[
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\.eslintrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\fix-unused-vars.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\public\\sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\add-missing-nl-keys.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\append-nl-keys.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\find-hardcoded-text.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\guard-no-raw-qdialog.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\importGs1Excel.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2634, 2637], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2634, 2637], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2987, 2990], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2987, 2990], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env ts-node\r\n\r\nimport * as XLSX from 'xlsx';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { config } from 'dotenv';\r\nimport { resolve } from 'path';\r\n\r\n// Load environment variables\r\nconfig();\r\n\r\n// Types\r\ninterface GS1Row {\r\n  GTIN?: string;\r\n  'GPC Brick Code'?: string;\r\n  Brand?: string;\r\n  'Product Name'?: string;\r\n  'Net Content'?: string;\r\n  'Net Content UOM'?: string;\r\n  'Gross Weight'?: number;\r\n  'Net Weight'?: number;\r\n  'Base Unit'?: boolean | string;\r\n  'Orderable Unit'?: boolean | string;\r\n  'Despatch Unit'?: boolean | string;\r\n  'Country of Origin'?: string;\r\n  'Effective From'?: string | Date;\r\n  'Effective To'?: string | Date;\r\n  'Product Lifecycle Status'?: string;\r\n  Description?: string;\r\n  Category?: string;\r\n  SKU?: string;\r\n  Price?: number;\r\n  Unit?: string;\r\n}\r\n\r\ninterface ProductInsert {\r\n  gtin: string;\r\n  sku: string;\r\n  name: string;\r\n  gpc_brick_code?: string | undefined;\r\n  brand?: string | undefined;\r\n  description?: string | undefined;\r\n  category?: string | undefined;\r\n  price?: number | undefined;\r\n  unit?: string | undefined;\r\n  net_content_value?: number | undefined;\r\n  net_content_uom?: string | undefined;\r\n  gross_weight?: number | undefined;\r\n  net_weight?: number | undefined;\r\n  base_unit_indicator?: boolean | undefined;\r\n  orderable_unit_indicator?: boolean | undefined;\r\n  despatch_unit_indicator?: boolean | undefined;\r\n  country_of_origin?: string | undefined;\r\n  effective_from_date?: string | undefined;\r\n  effective_to_date?: string | undefined;\r\n  product_lifecycle_status?: string | undefined;\r\n  active: boolean;\r\n}\r\n\r\ninterface ImportStats {\r\n  totalRows: number;\r\n  processed: number;\r\n  inserted: number;\r\n  updated: number;\r\n  skipped: number;\r\n  errors: string[];\r\n}\r\n\r\n// Initialize Supabase client\r\nconst supabaseUrl = process.env.SUPABASE_URL;\r\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  console.error(\r\n    '❌ Missing required environment variables: SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY'\r\n  );\r\n  process.exit(1);\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n/**\r\n * Validates GTIN format (8, 12, 13, or 14 digits)\r\n */\r\nfunction validateGTIN(gtin: string): boolean {\r\n  if (!gtin) return false;\r\n\r\n  // Remove any non-numeric characters\r\n  const cleanGtin = gtin.toString().replace(/\\D/g, '');\r\n\r\n  // Check if it's a valid length (8, 12, 13, or 14 digits)\r\n  const validLengths = [8, 12, 13, 14];\r\n  return validLengths.includes(cleanGtin.length);\r\n}\r\n\r\n/**\r\n * Converts string or boolean values to boolean\r\n */\r\nfunction parseBoolean(value: any): boolean {\r\n  if (typeof value === 'boolean') return value;\r\n  if (typeof value === 'string') {\r\n    const lower = value.toLowerCase().trim();\r\n    return (\r\n      lower === 'true' || lower === 'yes' || lower === '1' || lower === 'y'\r\n    );\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Parses date strings to ISO format\r\n */\r\nfunction parseDate(dateValue: any): string | undefined {\r\n  if (!dateValue) return undefined;\r\n\r\n  try {\r\n    let date: Date;\r\n\r\n    if (dateValue instanceof Date) {\r\n      date = dateValue;\r\n    } else if (typeof dateValue === 'number') {\r\n      // Excel date serial number\r\n      date = XLSX.SSF.parse_date_code(dateValue);\r\n    } else {\r\n      date = new Date(dateValue);\r\n    }\r\n\r\n    if (isNaN(date.getTime())) return undefined;\r\n\r\n    return date.toISOString().split('T')[0]; // Return YYYY-MM-DD format\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Parses net content value from string (e.g., \"250g\" -> 250)\r\n */\r\nfunction parseNetContent(netContent: string): { value?: number; uom?: string } {\r\n  if (!netContent) return {};\r\n\r\n  const contentStr = netContent.toString().trim();\r\n  const match = contentStr.match(/^(\\d+(?:\\.\\d+)?)\\s*([a-zA-Z]+)?$/);\r\n\r\n  if (match && match[1]) {\r\n    return {\r\n      value: parseFloat(match[1]),\r\n      uom: match[2] ? match[2].toLowerCase() : undefined,\r\n    };\r\n  }\r\n\r\n  // Try to extract just the number if no unit\r\n  const numberMatch = contentStr.match(/(\\d+(?:\\.\\d+)?)/);\r\n  if (numberMatch && numberMatch[1]) {\r\n    return { value: parseFloat(numberMatch[1]) };\r\n  }\r\n\r\n  return {};\r\n}\r\n\r\n/**\r\n * Maps GS1 row data to Product insert format\r\n */\r\nfunction mapGS1ToProduct(row: GS1Row, rowIndex: number): ProductInsert | null {\r\n  // Validate required fields\r\n  if (!row.GTIN) {\r\n    console.warn(`⚠️  Row ${rowIndex}: Missing GTIN, skipping`);\r\n    return null;\r\n  }\r\n\r\n  if (!validateGTIN(row.GTIN)) {\r\n    console.warn(\r\n      `⚠️  Row ${rowIndex}: Invalid GTIN format (${row.GTIN}), skipping`\r\n    );\r\n    return null;\r\n  }\r\n\r\n  if (!row['Product Name']) {\r\n    console.warn(`⚠️  Row ${rowIndex}: Missing Product Name, skipping`);\r\n    return null;\r\n  }\r\n\r\n  // Parse net content\r\n  const netContent = parseNetContent(row['Net Content'] || '');\r\n  const netContentUom = row['Net Content UOM'] || netContent.uom;\r\n\r\n  // Clean and format GTIN\r\n  const cleanGtin = row.GTIN.replace(/\\D/g, '');\r\n\r\n  // Generate SKU if not provided\r\n  const sku = row.SKU || `GS1-${cleanGtin}`;\r\n\r\n  const product: ProductInsert = {\r\n    gtin: cleanGtin,\r\n    sku,\r\n    name: row['Product Name'],\r\n    gpc_brick_code: row['GPC Brick Code'],\r\n    brand: row.Brand,\r\n    description: row.Description,\r\n    category: row.Category,\r\n    price: row.Price,\r\n    unit: row.Unit,\r\n    net_content_value: netContent.value,\r\n    net_content_uom: netContentUom,\r\n    gross_weight: row['Gross Weight'],\r\n    net_weight: row['Net Weight'],\r\n    base_unit_indicator:\r\n      row['Base Unit'] !== undefined ? parseBoolean(row['Base Unit']) : true,\r\n    orderable_unit_indicator:\r\n      row['Orderable Unit'] !== undefined\r\n        ? parseBoolean(row['Orderable Unit'])\r\n        : true,\r\n    despatch_unit_indicator:\r\n      row['Despatch Unit'] !== undefined\r\n        ? parseBoolean(row['Despatch Unit'])\r\n        : true,\r\n    country_of_origin: row['Country of Origin'],\r\n    effective_from_date: parseDate(row['Effective From']),\r\n    effective_to_date: parseDate(row['Effective To']),\r\n    product_lifecycle_status: row['Product Lifecycle Status'],\r\n    active: true,\r\n  };\r\n\r\n  return product;\r\n}\r\n\r\n/**\r\n * Upserts a product into the Supabase products table\r\n */\r\nasync function upsertProduct(\r\n  product: ProductInsert\r\n): Promise<{ success: boolean; isUpdate: boolean; error?: string }> {\r\n  try {\r\n    // Check if product exists\r\n    const { data: existing } = await supabase\r\n      .from('products')\r\n      .select('id')\r\n      .eq('gtin', product.gtin)\r\n      .single();\r\n\r\n    const isUpdate = !!existing;\r\n\r\n    // Upsert the product\r\n    const { error } = await supabase.from('products').upsert(product, {\r\n      onConflict: 'gtin',\r\n      ignoreDuplicates: false,\r\n    });\r\n\r\n    if (error) {\r\n      return { success: false, isUpdate, error: error.message };\r\n    }\r\n\r\n    return { success: true, isUpdate };\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      isUpdate: false,\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Main import function\r\n */\r\nasync function importGS1Excel(\r\n  filePath: string,\r\n  sheetName: string = 'NL'\r\n): Promise<ImportStats> {\r\n  const stats: ImportStats = {\r\n    totalRows: 0,\r\n    processed: 0,\r\n    inserted: 0,\r\n    updated: 0,\r\n    skipped: 0,\r\n    errors: [],\r\n  };\r\n\r\n  try {\r\n    console.log(`📂 Loading Excel file: ${filePath}`);\r\n\r\n    // Read the Excel file\r\n    const workbook = XLSX.readFile(filePath);\r\n\r\n    if (!workbook.SheetNames.includes(sheetName)) {\r\n      throw new Error(\r\n        `Sheet \"${sheetName}\" not found. Available sheets: ${workbook.SheetNames.join(\r\n          ', '\r\n        )}`\r\n      );\r\n    }\r\n\r\n    console.log(`📊 Reading sheet: ${sheetName}`);\r\n    const worksheet = workbook.Sheets[sheetName];\r\n\r\n    if (!worksheet) {\r\n      throw new Error(`Failed to read worksheet \"${sheetName}\"`);\r\n    }\r\n\r\n    // Convert sheet to JSON\r\n    const rawData: GS1Row[] = XLSX.utils.sheet_to_json(worksheet);\r\n    stats.totalRows = rawData.length;\r\n\r\n    console.log(`📋 Found ${stats.totalRows} rows to process`);\r\n    console.log('🔄 Starting import...\\n');\r\n\r\n    // Process each row\r\n    for (let i = 0; i < rawData.length; i++) {\r\n      const row = rawData[i];\r\n      if (!row) continue;\r\n\r\n      const rowIndex = i + 2; // Excel row number (accounting for header)\r\n\r\n      try {\r\n        // Map and validate the row\r\n        const product = mapGS1ToProduct(row, rowIndex);\r\n\r\n        if (!product) {\r\n          stats.skipped++;\r\n          continue;\r\n        }\r\n\r\n        // Upsert to database\r\n        const result = await upsertProduct(product);\r\n\r\n        if (result.success) {\r\n          stats.processed++;\r\n          if (result.isUpdate) {\r\n            stats.updated++;\r\n            console.log(`✅ Updated: ${product.name} (GTIN: ${product.gtin})`);\r\n          } else {\r\n            stats.inserted++;\r\n            console.log(`➕ Inserted: ${product.name} (GTIN: ${product.gtin})`);\r\n          }\r\n        } else {\r\n          stats.errors.push(`Row ${rowIndex}: ${result.error}`);\r\n          console.error(`❌ Error on row ${rowIndex}: ${result.error}`);\r\n        }\r\n\r\n        // Progress indicator for large files\r\n        if ((i + 1) % 100 === 0) {\r\n          console.log(\r\n            `📈 Progress: ${i + 1}/${stats.totalRows} rows processed`\r\n          );\r\n        }\r\n      } catch (error) {\r\n        const errorMsg =\r\n          error instanceof Error ? error.message : 'Unknown error';\r\n        stats.errors.push(`Row ${rowIndex}: ${errorMsg}`);\r\n        console.error(`❌ Error processing row ${rowIndex}: ${errorMsg}`);\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  } catch (error) {\r\n    const errorMsg = error instanceof Error ? error.message : 'Unknown error';\r\n    stats.errors.push(`File processing error: ${errorMsg}`);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Print import statistics\r\n */\r\nfunction printStats(stats: ImportStats) {\r\n  console.log('\\n📊 Import Statistics:');\r\n  console.log('═'.repeat(40));\r\n  console.log(`Total rows in file:    ${stats.totalRows}`);\r\n  console.log(`Successfully processed: ${stats.processed}`);\r\n  console.log(`New products inserted:  ${stats.inserted}`);\r\n  console.log(`Existing products updated: ${stats.updated}`);\r\n  console.log(`Rows skipped:          ${stats.skipped}`);\r\n  console.log(`Errors encountered:    ${stats.errors.length}`);\r\n\r\n  if (stats.errors.length > 0) {\r\n    console.log('\\n❌ Errors:');\r\n    stats.errors.forEach((error, index) => {\r\n      console.log(`${index + 1}. ${error}`);\r\n    });\r\n  }\r\n\r\n  console.log('═'.repeat(40));\r\n\r\n  if (stats.processed > 0) {\r\n    console.log('✅ Import completed successfully!');\r\n  } else {\r\n    console.log('⚠️  No products were imported.');\r\n  }\r\n}\r\n\r\n/**\r\n * Main execution\r\n */\r\nasync function main() {\r\n  try {\r\n    // Get file path from command line arguments or use default\r\n    const filePath = process.argv[2] || resolve(process.cwd(), 'gs1-data.xlsx');\r\n    const sheetName = process.argv[3] || 'NL';\r\n\r\n    console.log('🚀 GS1 Excel Import Tool');\r\n    console.log('═'.repeat(40));\r\n    console.log(`File: ${filePath}`);\r\n    console.log(`Sheet: ${sheetName}`);\r\n    console.log(`Supabase URL: ${supabaseUrl}`);\r\n    console.log('═'.repeat(40));\r\n\r\n    // Test Supabase connection\r\n    console.log('🔗 Testing Supabase connection...');\r\n    const { error: connectionError } = await supabase\r\n      .from('products')\r\n      .select('count', { count: 'exact', head: true });\r\n\r\n    if (connectionError) {\r\n      throw new Error(\r\n        `Failed to connect to Supabase: ${connectionError.message}`\r\n      );\r\n    }\r\n    console.log('✅ Supabase connection successful\\n');\r\n\r\n    // Run the import\r\n    const stats = await importGS1Excel(filePath, sheetName);\r\n\r\n    // Print results\r\n    printStats(stats);\r\n  } catch (error) {\r\n    console.error('\\n💥 Import failed:');\r\n    console.error(error instanceof Error ? error.message : error);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n// Execute if called directly\r\nif (require.main === module) {\r\n  main();\r\n}\r\n\r\nexport {\r\n  importGS1Excel,\r\n  mapGS1ToProduct,\r\n  validateGTIN,\r\n  parseBoolean,\r\n  parseDate,\r\n  parseNetContent,\r\n};\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\remcura-translation-manager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\reset-demo-data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\scan-i18n-usage.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\smart-translation-sync.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\testGs1Import.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\scripts\\validate-translations.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'filters' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 16
      },
      {
        "ruleId": "prefer-const",
        "severity": 1,
        "message": "'filters' is never reassigned. Use 'const' instead.",
        "line": 53,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 53,
        "endColumn": 16,
        "fix": { "range": [1125, 1142], "text": "const filters = {};" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "#!/usr/bin/env node\n\n/**\n * Translation Validation Script voor Remcura\n * Controleert consistentie tussen alle taalbestanden\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Taal configuratie (voor nu alleen Nederlands)\nconst LANGUAGES = ['nl'];\nconst I18N_DIR = path.join(__dirname, '../src/i18n');\n\n/**\n * Haalt alle keys uit een object recursief\n */\nfunction extractKeys(obj, prefix = '') {\n  const keys = [];\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const fullKey = prefix ? `${prefix}.${key}` : key;\n\n      if (\n        typeof obj[key] === 'object' &&\n        obj[key] !== null &&\n        !Array.isArray(obj[key])\n      ) {\n        keys.push(...extractKeys(obj[key], fullKey));\n      } else {\n        keys.push(fullKey);\n      }\n    }\n  }\n\n  return keys;\n}\n\n/**\n * Laadt vertaalbestand\n */\nfunction loadTranslationFile(lang) {\n  const filePath = path.join(I18N_DIR, lang, 'index.ts');\n\n  if (!fs.existsSync(filePath)) {\n    console.error(`❌ Bestand niet gevonden: ${filePath}`);\n    return null;\n  }\n\n  try {\n    // Load filters first if they exist\n    let filters = {};\n    const filtersPath = path.join(I18N_DIR, lang, 'filters.ts');\n    if (fs.existsSync(filtersPath)) {\n      try {\n        const filtersContent = fs.readFileSync(filtersPath, 'utf8');\n        const filtersMatch = filtersContent.match(\n          /export default\\s*({[\\s\\S]*});?\\s*$/\n        );\n        if (filtersMatch) {\n          const _filters = eval(`(${filtersMatch[1]})`);\n        }\n      } catch (filtersError) {\n        console.warn(\n          `⚠️ Kon filters niet laden voor ${lang}:`,\n          filtersError.message\n        );\n      }\n    }\n\n    // Dynamically import en eval de TS export\n    const content = fs.readFileSync(filePath, 'utf8');\n    const exportMatch = content.match(/export default\\s*({[\\s\\S]*});?\\s*$/);\n\n    if (!exportMatch) {\n      console.error(`❌ Kan export niet vinden in ${filePath}`);\n      return null;\n    }\n\n    // Eval is not ideal but for this script it works\n    // Make filters available in eval context\n    const translations = eval(`(${exportMatch[1]})`);\n    return translations;\n  } catch (error) {\n    console.error(`❌ Fout bij laden van ${filePath}:`, error.message);\n    return null;\n  }\n}\n\n/**\n * Valideert vertalingen\n */\nfunction validateTranslations() {\n  console.log('🔍 Remcura Vertaling Validator\\n');\n\n  const languageData = {};\n  const allKeys = new Set();\n\n  // Laad alle taalbestanden\n  for (const lang of LANGUAGES) {\n    console.log(`📂 Laden ${lang.toUpperCase()}...`);\n    const translations = loadTranslationFile(lang);\n\n    if (translations) {\n      languageData[lang] = translations;\n      const keys = extractKeys(translations);\n      keys.forEach(key => allKeys.add(key));\n      console.log(`   ✅ ${keys.length} keys gevonden`);\n    } else {\n      console.log(`   ❌ Laden mislukt`);\n    }\n  }\n\n  console.log(`\\n📊 Totaal unieke keys: ${allKeys.size}\\n`);\n\n  // Controleer missende keys per taal\n  const missingKeys = {};\n\n  for (const lang of LANGUAGES) {\n    if (!languageData[lang]) continue;\n\n    const langKeys = new Set(extractKeys(languageData[lang]));\n    const missing = Array.from(allKeys).filter(key => !langKeys.has(key));\n\n    missingKeys[lang] = missing;\n\n    console.log(`🔍 ${lang.toUpperCase()} Analyse:`);\n    console.log(`   📋 Keys aanwezig: ${langKeys.size}`);\n    console.log(`   ❌ Keys ontbrekend: ${missing.length}`);\n\n    if (missing.length > 0) {\n      console.log(`   🚨 Eerste 10 ontbrekende keys:`);\n      missing.slice(0, 10).forEach(key => {\n        console.log(`      - ${key}`);\n      });\n      if (missing.length > 10) {\n        console.log(`      ... en ${missing.length - 10} meer`);\n      }\n    }\n    console.log('');\n  }\n\n  // Zoek naar duplicaten binnen bestanden\n  console.log('🔄 Controleren op duplicaten...\\n');\n\n  for (const lang of LANGUAGES) {\n    if (!languageData[lang]) continue;\n\n    const filePath = path.join(I18N_DIR, lang, 'index.ts');\n    const content = fs.readFileSync(filePath, 'utf8');\n\n    // Vind propertynames die meerdere keren voorkomen\n    const propertyMatches = content.match(/^\\s*(\\w+):\\s/gm);\n    if (propertyMatches) {\n      const properties = propertyMatches.map(match => match.match(/(\\w+):/)[1]);\n      const counts = {};\n\n      properties.forEach(prop => {\n        counts[prop] = (counts[prop] || 0) + 1;\n      });\n\n      const duplicates = Object.entries(counts).filter(\n        ([_, count]) => count > 1\n      );\n\n      if (duplicates.length > 0) {\n        console.log(`⚠️ ${lang.toUpperCase()} heeft duplicaten:`);\n        duplicates.forEach(([prop, count]) => {\n          console.log(`   - \"${prop}\" komt ${count} keer voor`);\n        });\n      } else {\n        console.log(`✅ ${lang.toUpperCase()} heeft geen duplicaten`);\n      }\n    }\n  }\n\n  // Genereer rapport\n  console.log('\\n📋 SAMENVATTING:');\n  console.log('================');\n\n  const totalMissing = Object.values(missingKeys).reduce(\n    (sum, arr) => sum + arr.length,\n    0\n  );\n\n  if (totalMissing === 0) {\n    console.log('🎉 Alle vertalingen zijn compleet!');\n  } else {\n    console.log(`❌ ${totalMissing} missende vertalingen gevonden`);\n    console.log('\\n🛠️ AANBEVELINGEN:');\n\n    for (const [lang, missing] of Object.entries(missingKeys)) {\n      if (missing.length > 0) {\n        console.log(`\\n${lang.toUpperCase()}:`);\n        console.log(`- Voeg ${missing.length} ontbrekende keys toe`);\n        console.log(`- Meest kritieke: ${missing.slice(0, 3).join(', ')}`);\n      }\n    }\n  }\n\n  return {\n    allKeys: Array.from(allKeys),\n    missingKeys,\n    languageData,\n    isValid: totalMissing === 0,\n  };\n}\n\n// Run validatie\nif (require.main === module) {\n  validateTranslations();\n}\n\nmodule.exports = { validateTranslations };\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\App.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\i18n.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\pinia.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\supabase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\theme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BarcodeScanner.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 286,
        "column": 24,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 286,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 306,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 306,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9041, 9044], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9041, 9044], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 338,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 338,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10025, 10028], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10025, 10028], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 351,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 351,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10367, 10370], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10367, 10370], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 429,
        "column": 48,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 429,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 430,
        "column": 32,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 430,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [12453, 12454], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 504,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 504,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14232, 14235], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14232, 14235], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <q-dialog\n    :model-value=\"modelValue\"\n    position=\"standard\"\n    persistent\n    maximized\n    transition-show=\"slide-up\"\n    transition-hide=\"slide-down\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n  >\n    <q-card class=\"scanner-card\">\n      <!-- Header -->\n      <q-card-section class=\"scanner-header\">\n        <div class=\"header-content\">\n          <div class=\"title-section\">\n            <q-icon\n              name=\"qr_code_scanner\"\n              size=\"md\"\n              color=\"white\"\n              class=\"q-mr-sm\"\n            />\n            <div>\n              <div class=\"text-h6 text-white\">\n                {{ $t('barcodeScanner.title') }}\n              </div>\n              <div class=\"text-caption text-white opacity-80\">\n                {{ $t('barcodeScanner.subtitle') }}\n              </div>\n            </div>\n          </div>\n          <q-btn\n            flat\n            round\n            dense\n            icon=\"close\"\n            color=\"white\"\n            :title=\"$t('common.close')\"\n            @click=\"closeScanner\"\n          />\n        </div>\n      </q-card-section>\n\n      <!-- Camera Section -->\n      <q-card-section class=\"scanner-body\">\n        <!-- Camera Preview -->\n        <div class=\"camera-container\">\n          <div v-if=\"!cameraPermission\" class=\"permission-prompt\">\n            <q-icon\n              name=\"camera_alt\"\n              size=\"4rem\"\n              color=\"grey-5\"\n              class=\"q-mb-md\"\n            />\n            <div class=\"text-h6 q-mb-sm\">\n              {{ $t('barcodeScanner.cameraPermission') }}\n            </div>\n            <div class=\"text-body2 text-grey-6 q-mb-lg text-center\">\n              {{ $t('barcodeScanner.permissionDescription') }}\n            </div>\n            <q-btn\n              color=\"primary\"\n              icon=\"camera_alt\"\n              ::label=\"$t('barcodeScanner.scanLabel')\"\n              :loading=\"initializing\"\n              @click=\"initializeCamera\"\n            />\n          </div>\n\n          <div v-else-if=\"error\" class=\"error-state\">\n            <q-icon name=\"error\" size=\"4rem\" color=\"negative\" class=\"q-mb-md\" />\n            <div class=\"text-h6 q-mb-sm text-negative\">\n              {{ $t('barcodeScanner.error') }}\n            </div>\n            <div class=\"text-body2 text-grey-6 q-mb-lg text-center\">\n              {{ error }}\n            </div>\n            <q-btn\n              color=\"primary\"\n              icon=\"refresh\"\n              :label=\"$t('common.retry')\"\n              :loading=\"initializing\"\n              @click=\"initializeCamera\"\n            />\n          </div>\n\n          <div v-else class=\"camera-view\">\n            <!-- Video Element -->\n            <video\n              ref=\"videoElement\"\n              autoplay\n              playsinline\n              muted\n              class=\"camera-video\"\n              :class=\"{ 'camera-active': cameraActive }\"\n            />\n\n            <!-- Scanning Overlay -->\n            <div class=\"scanning-overlay\">\n              <!-- Scanning Frame -->\n              <div class=\"scan-frame\">\n                <div class=\"scan-corners\">\n                  <div class=\"corner corner-tl\"></div>\n                  <div class=\"corner corner-tr\"></div>\n                  <div class=\"corner corner-bl\"></div>\n                  <div class=\"corner corner-br\"></div>\n                </div>\n                <div v-if=\"scanning\" class=\"scan-line\"></div>\n              </div>\n\n              <!-- Instructions -->\n              <div class=\"scan-instructions\">\n                <div class=\"instruction-text\">\n                  {{\n                    scanning\n                      ? $t('barcodeScanner.scanning')\n                      : $t('barcodeScanner.instructions')\n                  }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Results -->\n            <div v-if=\"lastScanResult\" class=\"scan-result\">\n              <q-chip\n                :color=\"lastScanResult.valid ? 'positive' : 'warning'\"\n                :text-color=\"lastScanResult.valid ? 'white' : 'dark'\"\n                :icon=\"lastScanResult.valid ? 'check' : 'warning'\"\n                ::label=\"$t('barcodeScanner.scanLabel')\"\n                size=\"lg\"\n                class=\"result-chip\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- Manual Input Section -->\n        <div class=\"manual-input-section\">\n          <q-expansion-item\n            icon=\"keyboard\"\n            ::label=\"$t('barcodeScanner.scanLabel')\"\n            class=\"manual-input-expander\"\n          >\n            <div class=\"manual-input-content\">\n              <q-input\n                v-model=\"manualInput\"\n                :placeholder=\"$t('barcodeScanner.enterBarcode')\"\n                outlined\n                dense\n                clearable\n                class=\"q-mb-md\"\n                @keyup.enter=\"processManualInput\"\n              >\n                <template #append>\n                  <q-btn\n                    flat\n                    dense\n                    round\n                    icon=\"send\"\n                    color=\"primary\"\n                    :disable=\"!manualInput\"\n                    @click=\"processManualInput\"\n                  />\n                </template>\n              </q-input>\n              <div class=\"text-caption text-grey-6\">\n                {{ $t('barcodeScanner.manualInputHelp') }}\n              </div>\n            </div>\n          </q-expansion-item>\n        </div>\n      </q-card-section>\n\n      <!-- Footer Actions -->\n      <q-card-actions class=\"scanner-footer\">\n        <q-btn\n          flat\n          :label=\"$t('common.cancel')\"\n          class=\"q-mr-auto\"\n          @click=\"closeScanner\"\n        />\n\n        <q-btn\n          v-if=\"cameraActive\"\n          flat\n          icon=\"flip_camera_android\"\n          ::label=\"$t('barcodeScanner.scanLabel')\"\n          :disable=\"!canSwitchCamera\"\n          class=\"q-mr-sm\"\n          @click=\"switchCamera\"\n        />\n\n        <q-btn\n          v-if=\"cameraActive\"\n          flat\n          :icon=\"flashEnabled ? 'flash_off' : 'flash_on'\"\n          ::label=\"$t('barcodeScanner.scanLabel')\"\n          :disable=\"!hasFlash\"\n          @click=\"toggleFlash\"\n        />\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted, onUnmounted, watch, nextTick } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n\n  // Types\n  interface ScanResult {\n    code: string;\n    valid: boolean;\n    format?: string | undefined;\n  }\n\n  interface BarcodeDetector {\n    detect(imageSource: ImageBitmapSource): Promise<DetectedBarcode[]>;\n  }\n\n  interface DetectedBarcode {\n    rawValue: string;\n    format: string;\n    boundingBox: DOMRectReadOnly;\n    cornerPoints: { x: number; y: number }[];\n  }\n\n  // Props & Emits\n  const props = defineProps<{\n    modelValue: boolean;\n  }>();\n\n  const emit = defineEmits<{\n    'update:modelValue': [value: boolean];\n    scan: [code: string];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // State\n  const videoElement = ref<HTMLVideoElement | null>(null);\n  const cameraPermission = ref(false);\n  const cameraActive = ref(false);\n  const scanning = ref(false);\n  const initializing = ref(false);\n  const error = ref<string | null>(null);\n  const currentStream = ref<MediaStream | null>(null);\n  const scanInterval = ref<number | null>(null);\n  const lastScanResult = ref<ScanResult | null>(null);\n  const manualInput = ref('');\n\n  // Camera capabilities\n  const canSwitchCamera = ref(false);\n  const hasFlash = ref(false);\n  const flashEnabled = ref(false);\n  const currentFacingMode = ref<'user' | 'environment'>('environment');\n\n  // Barcode detector\n  let barcodeDetector: BarcodeDetector | null = null;\n\n  // GTIN Validation\n  const isValidGTIN = (code: string): boolean => {\n    if (!code) {\n      return false;\n    }\n    const cleanCode = code.trim().replace(/\\D/g, '');\n\n    // GTIN can be 8, 12, 13, or 14 digits\n    const gtinRegex = /^(\\d{8}|\\d{12}|\\d{13}|\\d{14})$/;\n    if (!gtinRegex.test(cleanCode)) {\n      return false;\n    }\n\n    // Check digit validation for GTIN-13 and GTIN-14\n    if (cleanCode.length === 13 || cleanCode.length === 14) {\n      return validateGTINCheckDigit(cleanCode);\n    }\n\n    return true;\n  };\n\n  const validateGTINCheckDigit = (gtin: string): boolean => {\n    const digits = gtin.split('').map(Number);\n    const checkDigit = digits.pop()!;\n\n    let sum = 0;\n    for (let i = 0; i < digits.length; i++) {\n      const weight = (digits.length - i) % 2 === 0 ? 1 : 3;\n      sum += (digits[i] ?? 0) * weight;\n    }\n\n    const calculatedCheckDigit = (10 - (sum % 10)) % 10;\n    return calculatedCheckDigit === checkDigit;\n  };\n\n  // Camera initialization\n  const initializeCamera = async () => {\n    initializing.value = true;\n    error.value = null;\n\n    try {\n      // Check if BarcodeDetector is supported\n      if ('BarcodeDetector' in window) {\n        const BarcodeDetectorClass = (window as any).BarcodeDetector;\n        const formats = await BarcodeDetectorClass?.getSupportedFormats();\n        if (formats.includes('ean_13') || formats.includes('code_128')) {\n          barcodeDetector = new BarcodeDetectorClass({\n            formats: [\n              'ean_8',\n              'ean_13',\n              'code_128',\n              'code_39',\n              'upc_a',\n              'upc_e',\n            ],\n          });\n        }\n      }\n\n      // Request camera permission\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: currentFacingMode.value,\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n        },\n      });\n\n      currentStream.value = stream;\n      cameraPermission.value = true;\n\n      // Check camera capabilities\n      const videoTrack = stream.getVideoTracks()[0];\n      if (videoTrack) {\n        const capabilities = videoTrack.getCapabilities();\n        hasFlash.value = !!(capabilities as any).torch;\n      }\n\n      canSwitchCamera.value = await checkMultipleCameras();\n\n      // Set up video element\n      await nextTick();\n      if (videoElement.value) {\n        videoElement.value.srcObject = stream;\n        await videoElement.value.play();\n        cameraActive.value = true;\n        startScanning();\n      }\n    } catch (err: any) {\n      console.error('Camera initialization failed:', err);\n      error.value =\n        err.name === 'NotAllowedError'\n          ? t('barcodeScanner.permissionDenied')\n          : err.name === 'NotFoundError'\n            ? t('barcodeScanner.noCameraFound')\n            : t('barcodeScanner.cameraError');\n    } finally {\n      initializing.value = false;\n    }\n  };\n\n  const checkMultipleCameras = async (): Promise<boolean> => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(\n        device => device.kind === 'videoinput'\n      );\n      return videoDevices.length > 1;\n    } catch {\n      return false;\n    }\n  };\n\n  const startScanning = () => {\n    if (!cameraActive.value || scanning.value) {\n      return;\n    }\n\n    scanning.value = true;\n\n    scanInterval.value = window.setInterval(async () => {\n      if (!videoElement.value || !cameraActive.value) {\n        return;\n      }\n\n      try {\n        await scanFrame();\n      } catch (err) {\n        console.warn('Scan frame error:', err);\n      }\n    }, 250); // Scan every 250ms\n  };\n\n  const scanFrame = async () => {\n    if (\n      !videoElement.value ||\n      !barcodeDetector ||\n      !videoElement.value.videoWidth\n    ) {\n      return;\n    }\n\n    try {\n      // Create canvas to capture frame\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        return;\n      }\n\n      canvas.width = videoElement.value.videoWidth;\n      canvas.height = videoElement.value.videoHeight;\n      ctx.drawImage(videoElement.value, 0, 0);\n\n      // Detect barcodes\n      const barcodes = await barcodeDetector.detect(canvas);\n\n      if (barcodes.length > 0) {\n        const barcode = barcodes[0];\n        if (barcode) {\n          processScanResult(barcode.rawValue, barcode.format);\n        }\n      }\n    } catch (err) {\n      // Fallback: try image bitmap approach\n      try {\n        const bitmap = await createImageBitmap(videoElement.value!);\n        const barcodes = await barcodeDetector!.detect(bitmap);\n\n        if (barcodes.length > 0) {\n          const barcode = barcodes[0];\n          if (barcode) {\n            processScanResult(barcode.rawValue, barcode.format);\n          }\n        }\n      } catch (fallbackErr) {\n        console.warn('Barcode detection failed:', fallbackErr);\n      }\n    }\n  };\n\n  const processScanResult = (code: string, format?: string) => {\n    const valid = isValidGTIN(code);\n\n    lastScanResult.value = { code, valid, format: format || undefined };\n\n    if (valid) {\n      // Valid GTIN found\n      $q.notify({\n        type: 'positive',\n        message: t('barcodeScanner.validGtin', { gtin: code }),\n        icon: 'check_circle',\n        position: 'top',\n        timeout: 2000,\n      });\n\n      emit('scan', code);\n      closeScanner();\n    } else {\n      // Invalid format\n      $q.notify({\n        type: 'warning',\n        message: t('barcodeScanner.invalidFormat', { code }),\n        icon: 'warning',\n        position: 'top',\n        timeout: 3000,\n      });\n    }\n  };\n\n  const processManualInput = () => {\n    if (!manualInput.value.trim()) {\n      return;\n    }\n\n    const code = manualInput.value.trim();\n    processScanResult(code);\n    manualInput.value = '';\n  };\n\n  const switchCamera = async () => {\n    if (!canSwitchCamera.value) {\n      return;\n    }\n\n    currentFacingMode.value =\n      currentFacingMode.value === 'user' ? 'environment' : 'user';\n\n    await stopCamera();\n    await initializeCamera();\n  };\n\n  const toggleFlash = async () => {\n    if (!hasFlash.value || !currentStream.value) {\n      return;\n    }\n\n    try {\n      const videoTrack = currentStream.value.getVideoTracks()[0];\n      if (videoTrack) {\n        await videoTrack.applyConstraints({\n          advanced: [{ torch: !flashEnabled.value } as any],\n        });\n        flashEnabled.value = !flashEnabled.value;\n      }\n    } catch (err) {\n      console.warn('Flash toggle failed:', err);\n    }\n  };\n\n  const stopCamera = async () => {\n    scanning.value = false;\n    cameraActive.value = false;\n\n    if (scanInterval.value) {\n      clearInterval(scanInterval.value);\n      scanInterval.value = null;\n    }\n\n    if (currentStream.value) {\n      currentStream.value.getTracks().forEach(track => track.stop());\n      currentStream.value = null;\n    }\n\n    if (videoElement.value) {\n      videoElement.value.srcObject = null;\n    }\n  };\n\n  const closeScanner = async () => {\n    await stopCamera();\n    lastScanResult.value = null;\n    error.value = null;\n    emit('update:modelValue', false);\n  };\n\n  // Watchers\n  watch(\n    () => props.modelValue,\n    async newVal => {\n      if (newVal && !cameraActive.value) {\n        await initializeCamera();\n      } else if (!newVal) {\n        await stopCamera();\n      }\n    }\n  );\n\n  // Lifecycle\n  onMounted(() => {\n    if (props.modelValue) {\n      initializeCamera();\n    }\n  });\n\n  onUnmounted(() => {\n    stopCamera();\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .scanner-card {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    background: black;\n  }\n\n  .scanner-header {\n    background: linear-gradient(\n      135deg,\n      var(--q-primary) 0%,\n      var(--q-secondary) 100%\n    );\n    padding: 1rem;\n    flex-shrink: 0;\n\n    .header-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n\n      .title-section {\n        display: flex;\n        align-items: center;\n      }\n    }\n  }\n\n  .scanner-body {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 0;\n    background: black;\n  }\n\n  .camera-container {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n  }\n\n  .permission-prompt,\n  .error-state {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    text-align: center;\n    color: white;\n  }\n\n  .camera-view {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .camera-video {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    transform: scaleX(-1); // Mirror effect for front camera\n\n    &.camera-active {\n      opacity: 1;\n    }\n  }\n\n  .scanning-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    pointer-events: none;\n  }\n\n  .scan-frame {\n    position: relative;\n    width: 280px;\n    height: 280px;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    border-radius: 12px;\n\n    .scan-corners {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n\n      .corner {\n        position: absolute;\n        width: 30px;\n        height: 30px;\n        border: 3px solid var(--q-primary);\n\n        &.corner-tl {\n          top: -3px;\n          left: -3px;\n          border-right: none;\n          border-bottom: none;\n          border-radius: 12px 0 0 0;\n        }\n\n        &.corner-tr {\n          top: -3px;\n          right: -3px;\n          border-left: none;\n          border-bottom: none;\n          border-radius: 0 12px 0 0;\n        }\n\n        &.corner-bl {\n          bottom: -3px;\n          left: -3px;\n          border-right: none;\n          border-top: none;\n          border-radius: 0 0 0 12px;\n        }\n\n        &.corner-br {\n          bottom: -3px;\n          right: -3px;\n          border-left: none;\n          border-top: none;\n          border-radius: 0 0 12px 0;\n        }\n      }\n    }\n\n    .scan-line {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 2px;\n      background: linear-gradient(\n        90deg,\n        transparent,\n        var(--q-primary),\n        transparent\n      );\n      animation: scan-line 2s ease-in-out infinite;\n    }\n  }\n\n  @keyframes scan-line {\n    0% {\n      top: 0;\n      opacity: 1;\n    }\n    50% {\n      top: calc(100% - 2px);\n      opacity: 0.8;\n    }\n    100% {\n      top: 0;\n      opacity: 1;\n    }\n  }\n\n  .scan-instructions {\n    margin-top: 2rem;\n    text-align: center;\n    color: white;\n    background: rgba(0, 0, 0, 0.7);\n    padding: 1rem 1.5rem;\n    border-radius: 8px;\n    backdrop-filter: blur(10px);\n\n    .instruction-text {\n      font-size: 1rem;\n      font-weight: 500;\n    }\n  }\n\n  .scan-result {\n    position: absolute;\n    bottom: 2rem;\n    left: 50%;\n    transform: translateX(-50%);\n\n    .result-chip {\n      font-size: 1.1rem;\n      padding: 0.5rem 1rem;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    }\n  }\n\n  .manual-input-section {\n    padding: 1rem;\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n\n    .manual-input-expander {\n      color: white;\n    }\n\n    .manual-input-content {\n      padding-top: 1rem;\n      color: white;\n    }\n  }\n\n  .scanner-footer {\n    background: rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(10px);\n    padding: 1rem;\n    color: white;\n    flex-shrink: 0;\n  }\n\n  // Mobile optimizations\n  @media (max-width: 768px) {\n    .scan-frame {\n      width: 240px;\n      height: 240px;\n    }\n\n    .scan-instructions {\n      margin-top: 1rem;\n      padding: 0.75rem 1rem;\n\n      .instruction-text {\n        font-size: 0.9rem;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchInput.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'modelValue' requires default value to be set.",
        "line": 167,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 173,
        "endColumn": 7
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'locationId' requires default value to be set.",
        "line": 176,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 176,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"batch-input-container\">\n    <div class=\"batch-input-wrapper\">\n      <!-- Product Selection -->\n      <BaseSelect\n        v-model=\"selectedProduct\"\n        :options=\"productOptions\"\n        option-value=\"id\"\n        option-label=\"display_name\"\n        :label=\"$t('product.product')\"\n        :placeholder=\"$t('product.selectProduct')\"\n        filterable\n        clearable\n        required\n        :loading=\"productsLoading\"\n        @update:model-value=\"onProductChange\"\n      >\n        <!-- @vue-ignore -->\n        <template #option=\"scope\">\n          <q-item v-bind=\"scope as any\" clickable>\n            <q-item-section>\n              <q-item-label>{{ (scope as any).option?.name }}</q-item-label>\n              <q-item-label caption\n                >{{ (scope as any).option?.sku }} •\n                {{ (scope as any).option?.category }}</q-item-label\n              >\n            </q-item-section>\n          </q-item>\n        </template>\n      </BaseSelect>\n\n      <!-- Batch Number Input -->\n      <q-input\n        v-model=\"batchNumber\"\n        :label=\"$t('batch.batchNumber')\"\n        :placeholder=\"$t('batch.enterBatchNumber')\"\n        outlined\n        dense\n        :rules=\"[requiredRule]\"\n        @blur=\"onBatchNumberChange\"\n      >\n        <template #append>\n          <q-btn\n            flat\n            round\n            dense\n            icon=\"qr_code_scanner\"\n            :title=\"$t('batch.scanBatch')\"\n            @click=\"openBarcodeScanner\"\n          />\n        </template>\n      </q-input>\n\n      <!-- Expiry Date -->\n      <q-input\n        v-model=\"expiryDate\"\n        :label=\"$t('batch.expiryDate')\"\n        type=\"date\"\n        outlined\n        dense\n        :rules=\"[requiredRule, validateExpiryDate]\"\n      />\n\n      <!-- Quantity Input -->\n      <q-input\n        v-model.number=\"quantity\"\n        :label=\"$t('product.quantity')\"\n        type=\"number\"\n        min=\"0\"\n        step=\"1\"\n        outlined\n        dense\n        :rules=\"[requiredRule, validateQuantity]\"\n      >\n        <template #append>\n          <span class=\"text-caption\">{{ selectedProduct?.unit || '' }}</span>\n        </template>\n      </q-input>\n\n      <!-- Existing Batch Selection (if found) -->\n      <div v-if=\"existingBatches.length > 0\" class=\"existing-batches\">\n        <div class=\"text-subtitle2 q-mb-md\">\n          {{ $t('batch.existingBatches') }}\n        </div>\n        <q-card\n          v-for=\"batch in existingBatches\"\n          :key=\"batch.id\"\n          flat\n          bordered\n          class=\"batch-card\"\n        >\n          <q-card-section class=\"q-pa-sm\">\n            <div class=\"flex justify-between items-center\">\n              <div>\n                <div class=\"text-weight-medium\">{{ batch.batchNumber }}</div>\n                <div class=\"text-caption text-grey-6\">\n                  {{ $t('batch.expires') }}:\n                  {{ formatDate(batch.expiryDate) }} •\n                  {{ $t('product.quantity') }}: {{ batch.currentQuantity }}\n                </div>\n              </div>\n              <q-btn\n                flat\n                dense\n                color=\"primary\"\n                :label=\"$t('batch.useBatch')\"\n                @click=\"selectExistingBatch(batch)\"\n              />\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n\n      <!-- View Mode -->\n      <div v-if=\"viewMode === 'lite'\" class=\"batch-summary\">\n        <q-card flat bordered>\n          <q-card-section class=\"q-pa-md\">\n            <div class=\"text-subtitle2 q-mb-sm\">\n              {{ $t('batch.batchSummary') }}\n            </div>\n            <div class=\"summary-row\">\n              <span>{{ $t('product.product') }}:</span>\n              <span>{{ selectedProduct?.name || '-' }}</span>\n            </div>\n            <div class=\"summary-row\">\n              <span>{{ $t('batch.batchNumber') }}:</span>\n              <span>{{ batchNumber || '-' }}</span>\n            </div>\n            <div class=\"summary-row\">\n              <span>{{ $t('batch.expiryDate') }}:</span>\n              <span>{{ expiryDate ? formatDate(expiryDate) : '-' }}</span>\n            </div>\n            <div class=\"summary-row\">\n              <span>{{ $t('product.quantity') }}:</span>\n              <span>{{ quantity || 0 }} {{ selectedProduct?.unit || '' }}</span>\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n    </div>\n\n    <!-- Barcode Scanner Dialog -->\n    <q-dialog v-model=\"showScanner\" max-width=\"500px\">\n      <BarcodeScanner v-model=\"showScanner\" @scan=\"onBarcodeScanned\" />\n    </q-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch, defineAsyncComponent } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useProductsStore } from '@/stores/products';\n  import { useAuthStore } from 'src/stores/auth';\n  import BaseSelect from 'src/components/base/BaseSelect.vue';\n  import type { ProductBatchDTO } from '@/domain/inventory/bridge';\n  import type { ProductWithStock } from 'src/types/inventory';\n  import { useFormatting } from 'src/composables/useFormatting';\n\n  // Lazy load barcode scanner\n  const BarcodeScanner = defineAsyncComponent(\n    () => import('src/components/BarcodeScanner.vue')\n  );\n\n  interface Props {\n    modelValue?: {\n      productId?: string;\n      batchNumber?: string;\n      expiryDate?: string;\n      quantity?: number;\n      batchId?: string;\n    };\n    viewMode?: 'lite' | 'full';\n    required?: boolean;\n    locationId?: string;\n  }\n\n  interface Emits {\n    (\n      e: 'update:modelValue',\n      value: {\n        productId?: string;\n        batchNumber?: string;\n        expiryDate?: string;\n        quantity?: number;\n        batchId?: string;\n        isExistingBatch?: boolean;\n      }\n    ): void;\n    (e: 'batch-selected', batch: ProductBatchDTO): void;\n    (e: 'validation-changed', isValid: boolean): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    viewMode: 'full',\n    required: true,\n  });\n\n  const emit = defineEmits<Emits>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const productStore = useProductsStore();\n  const authStore = useAuthStore();\n  const { formatDate } = useFormatting();\n\n  // Reactive state\n  const selectedProduct = ref<ProductWithStock | null>(null);\n  const batchNumber = ref('');\n  const expiryDate = ref('');\n  const quantity = ref<number | null>(null);\n  const existingBatches = ref<ProductBatchDTO[]>([]);\n  const showScanner = ref(false);\n  const productsLoading = ref(false);\n\n  // Computed\n  const productOptions = computed(() => {\n    return productStore.products.map((product: ProductWithStock) => ({\n      ...product,\n      label: `${product.name} (${product.sku})`,\n      value: product.id,\n    }));\n  });\n\n  const isValid = computed(() => {\n    if (!props.required) return true;\n    return !!(\n      selectedProduct.value &&\n      batchNumber.value &&\n      expiryDate.value &&\n      quantity.value\n    );\n  });\n\n  // Validation rules\n  const requiredRule = (val: string | number) =>\n    (!!val && val !== '') || t('validation.required');\n\n  const validateExpiryDate = (val: string) => {\n    if (!val) return props.required ? t('validation.required') : true;\n    const date = new Date(val);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return date >= today || t('batch.expiryDatePastError');\n  };\n\n  const validateQuantity = (val: number) => {\n    if (!val && props.required) return t('validation.required');\n    return val > 0 || t('validation.positiveNumber');\n  };\n\n  // Methods\n  const onProductChange = async (product: ProductWithStock | null) => {\n    selectedProduct.value = product;\n    existingBatches.value = [];\n\n    if (product && batchNumber.value) {\n      await searchExistingBatches();\n    }\n\n    emitValue();\n  };\n\n  const onBatchNumberChange = async () => {\n    if (selectedProduct.value && batchNumber.value) {\n      await searchExistingBatches();\n    }\n    emitValue();\n  };\n\n  const searchExistingBatches = async () => {\n    if (!selectedProduct.value || !batchNumber.value) return;\n\n    try {\n      const practiceId = authStore.clinicId;\n      if (!practiceId) return;\n\n      // Search for existing batches with the same product and batch number\n      const batches = batchStore\n        .batchesByProduct(selectedProduct.value.id)\n        .filter(batch =>\n          batch.batchNumber\n            .toLowerCase()\n            .includes(batchNumber.value.toLowerCase())\n        );\n\n      existingBatches.value = batches;\n    } catch (error) {\n      console.error('Error searching existing batches:', error);\n    }\n  };\n\n  const selectExistingBatch = (batch: ProductBatchDTO) => {\n    batchNumber.value = batch.batchNumber;\n    expiryDate.value = batch.expiryDate;\n    quantity.value = batch.currentQuantity;\n\n    const value = {\n      productId: selectedProduct.value?.id,\n      batchNumber: batch.batchNumber,\n      expiryDate: batch.expiryDate,\n      quantity: quantity.value,\n      batchId: batch.id,\n      isExistingBatch: true,\n    };\n\n    emit('update:modelValue', value);\n    emit('batch-selected', batch);\n  };\n\n  const openBarcodeScanner = () => {\n    showScanner.value = true;\n  };\n\n  const onBarcodeScanned = async (scannedCode: string) => {\n    showScanner.value = false;\n    batchNumber.value = scannedCode;\n\n    // Try to find existing batch\n    if (selectedProduct.value) {\n      await searchExistingBatches();\n\n      // If exact match found, auto-select it\n      const exactMatch = existingBatches.value.find(\n        batch => batch.batchNumber === scannedCode\n      );\n\n      if (exactMatch) {\n        selectExistingBatch(exactMatch);\n      }\n    }\n\n    emitValue();\n  };\n\n  const emitValue = () => {\n    const value = {\n      productId: selectedProduct.value?.id,\n      batchNumber: batchNumber.value,\n      expiryDate: expiryDate.value,\n      quantity: quantity.value || undefined,\n      batchId: undefined,\n      isExistingBatch: false,\n    };\n\n    emit('update:modelValue', value);\n  };\n\n  // Watch for validation changes\n  watch(isValid, valid => {\n    emit('validation-changed', valid);\n  });\n\n  // Watch for prop changes\n  watch(\n    () => props.modelValue,\n    newValue => {\n      if (newValue) {\n        if (newValue.productId) {\n          const product = productStore.products.find(\n            (p: ProductWithStock) => p.id === newValue.productId\n          );\n          selectedProduct.value = product || null;\n        }\n        batchNumber.value = newValue.batchNumber || '';\n        expiryDate.value = newValue.expiryDate || '';\n        quantity.value = newValue.quantity || null;\n      }\n    },\n    { immediate: true }\n  );\n\n  // Load products on mount\n  const loadProducts = async () => {\n    try {\n      productsLoading.value = true;\n      const practiceId = authStore.clinicId;\n      if (practiceId) {\n        await productStore.fetchProducts(practiceId);\n      }\n    } catch (error) {\n      console.error('Error loading products:', error);\n    } finally {\n      productsLoading.value = false;\n    }\n  };\n\n  // Initialize\n  loadProducts();\n</script>\n\n<style scoped>\n  .batch-input-container {\n    width: 100%;\n  }\n\n  .batch-input-wrapper {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n  }\n\n  .existing-batches {\n    margin-top: 16px;\n  }\n\n  .batch-card {\n    margin-bottom: 8px;\n  }\n\n  .batch-summary {\n    margin-top: 16px;\n  }\n\n  .summary-row {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 8px;\n  }\n\n  .summary-row:last-child {\n    margin-bottom: 0;\n  }\n\n  @media (max-width: 768px) {\n    .batch-input-wrapper {\n      gap: 12px;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchOverview.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 571,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 571,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16171, 16174], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16171, 16174], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 589,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 589,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16574, 16577], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16574, 16577], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"batch-overview\">\n    <!-- Header with actions -->\n    <div class=\"row items-center q-mb-md\">\n      <div class=\"text-h6\">{{ $t('batch.batchOverview') }}</div>\n      <q-space />\n\n      <!-- Filter controls -->\n      <div class=\"row q-gutter-sm\">\n        <q-select\n          v-model=\"filters.location\"\n          :options=\"locationOptions\"\n          :label=\"$t('location.location')\"\n          clearable\n          dense\n          outlined\n          style=\"min-width: 150px\"\n          @update:model-value=\"applyFilters\"\n        />\n\n        <q-select\n          v-model=\"filters.urgency\"\n          :options=\"urgencyOptions\"\n          :label=\"$t('batch.urgencyLevel')\"\n          clearable\n          dense\n          outlined\n          style=\"min-width: 120px\"\n          @update:model-value=\"applyFilters\"\n        />\n\n        <q-btn\n          icon=\"add\"\n          color=\"primary\"\n          :label=\"$t('batch.addBatch')\"\n          @click=\"showAddBatchDialog = true\"\n        />\n      </div>\n    </div>\n\n    <!-- Expiry alerts banner -->\n    <q-banner\n      v-if=\"expiryAlerts.length > 0\"\n      class=\"bg-orange text-white q-mb-md\"\n      rounded\n    >\n      <template #avatar>\n        <q-icon name=\"warning\" />\n      </template>\n      <div class=\"text-weight-medium\">{{ $t('batch.expiryAlert') }}</div>\n      <div class=\"text-caption\">\n        {{ $t('batch.batchesExpiringSoon', { count: expiryAlerts.length }) }}\n      </div>\n      <template #action>\n        <q-btn\n          flat\n          color=\"white\"\n          :label=\"$t('batch.viewExpiring')\"\n          @click=\"showExpiringOnly = !showExpiringOnly\"\n        />\n      </template>\n    </q-banner>\n\n    <!-- Main table -->\n    <div class=\"medical-table\">\n      <q-table\n        :rows=\"filteredBatches\"\n        :columns=\"columns\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 50 }\"\n        row-key=\"id\"\n        class=\"batch-table\"\n        :no-data-label=\"$t('batch.noBatchesFound')\"\n        flat\n        bordered\n        separator=\"cell\"\n      >\n        <!-- Product column with grouping -->\n        <template #body-cell-product=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row items-center\">\n              <q-avatar size=\"32px\" class=\"q-mr-sm\">\n                <q-icon name=\"medical_services\" color=\"primary\" />\n              </q-avatar>\n              <div>\n                <div class=\"text-weight-medium\">\n                  {{ props.row.productName }}\n                </div>\n                <div class=\"text-caption text-grey\">\n                  {{ props.row.productSku }}\n                </div>\n              </div>\n            </div>\n          </q-td>\n        </template>\n\n        <!-- Batch number column with scanner icon -->\n        <template #body-cell-batchNumber=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row items-center\">\n              <q-icon name=\"qr_code\" class=\"q-mr-xs text-grey icon-size-sm\" />\n              <span class=\"text-weight-medium\">{{\n                props.row.batchNumber\n              }}</span>\n            </div>\n            <div\n              v-if=\"props.row.supplierBatchNumber\"\n              class=\"text-caption text-grey\"\n            >\n              {{ $t('batch.supplierBatch') }}:\n              {{ props.row.supplierBatchNumber }}\n            </div>\n          </q-td>\n        </template>\n\n        <!-- Location column -->\n        <template #body-cell-location=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getLocationColor(props.row.locationType)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.row.locationName }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <!-- Quantity column with progress bar -->\n        <template #body-cell-quantity=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"text-weight-medium\">\n              {{ formatQuantity(props.row.currentQuantity) }}\n              <span class=\"text-grey\"\n                >/ {{ formatQuantity(props.row.initialQuantity) }}</span\n              >\n            </div>\n            <q-linear-progress\n              :value=\"props.row.currentQuantity / props.row.initialQuantity\"\n              size=\"4px\"\n              :color=\"\n                getQuantityColor(\n                  props.row.currentQuantity / props.row.initialQuantity\n                )\n              \"\n              class=\"q-mt-xs\"\n            />\n            <div class=\"text-caption text-grey\">\n              {{ $t('batch.available') }}:\n              {{ formatQuantity(props.row.availableQuantity) }}\n            </div>\n          </q-td>\n        </template>\n\n        <!-- Expiry date column with urgency indicators -->\n        <template #body-cell-expiry=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row items-center\">\n              <q-icon\n                :name=\"getExpiryIcon(props.row.urgencyLevel)\"\n                :color=\"getExpiryColor(props.row.urgencyLevel)\"\n                size=\"16px\"\n                class=\"q-mr-xs\"\n              />\n              <div>\n                <div class=\"text-weight-medium\">\n                  {{ formatDate(props.row.expiryDate) }}\n                </div>\n                <div\n                  class=\"text-caption\"\n                  :class=\"getExpiryTextClass(props.row.urgencyLevel)\"\n                >\n                  {{\n                    getExpiryText(\n                      props.row.daysUntilExpiry,\n                      props.row.urgencyLevel\n                    )\n                  }}\n                </div>\n              </div>\n            </div>\n          </q-td>\n        </template>\n\n        <!-- Status column -->\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getStatusColor(props.row.status)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ $t(`batch.status.${props.row.status}`) }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <!-- Actions column -->\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row q-gutter-xs\">\n              <q-btn\n                icon=\"edit\"\n                size=\"sm\"\n                flat\n                round\n                color=\"primary\"\n                @click=\"editBatch(props.row)\"\n              >\n                <q-tooltip>{{ $t('common.edit') }}</q-tooltip>\n              </q-btn>\n\n              <q-btn\n                icon=\"move_down\"\n                size=\"sm\"\n                flat\n                round\n                color=\"green\"\n                :disable=\"props.row.availableQuantity <= 0\"\n                @click=\"useBatch(props.row)\"\n              >\n                <q-tooltip>{{ $t('batch.useBatch') }}</q-tooltip>\n              </q-btn>\n\n              <q-btn\n                v-if=\"props.row.status === 'active'\"\n                icon=\"block\"\n                size=\"sm\"\n                flat\n                round\n                color=\"orange\"\n                @click=\"quarantineBatch(props.row)\"\n              >\n                <q-tooltip>{{ $t('batch.quarantine') }}</q-tooltip>\n              </q-btn>\n\n              <q-btn\n                icon=\"more_vert\"\n                size=\"sm\"\n                flat\n                round\n                @click=\"showBatchDetails(props.row)\"\n              >\n                <q-tooltip>{{ $t('common.moreActions') }}</q-tooltip>\n              </q-btn>\n            </div>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Add Batch Dialog -->\n    <q-dialog v-model=\"showAddBatchDialog\" max-width=\"900px\">\n      <BatchRegistrationForm\n        @close=\"showAddBatchDialog = false\"\n        @success=\"onBatchAdded\"\n      />\n    </q-dialog>\n\n    <!-- Batch Details Dialog -->\n    <BaseDialog\n      v-model=\"showDetailsDialog\"\n      :title=\"selectedBatch?.batchNumber || ''\"\n      :subtitle=\"selectedBatch?.productName || ''\"\n      icon=\"inventory_2\"\n      size=\"md\"\n      @close=\"showDetailsDialog = false\"\n    >\n      <div v-if=\"selectedBatch\" class=\"batch-details-content\">\n        <div class=\"row q-gutter-md\">\n          <div class=\"col\">\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">{{ $t('batch.quantity') }}</div>\n              <div class=\"detail-value\">\n                {{ selectedBatch.currentQuantity }}\n              </div>\n            </div>\n          </div>\n          <div class=\"col\">\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">{{ $t('batch.expiryDate') }}</div>\n              <div class=\"detail-value\">\n                {{ formatDate(selectedBatch.expiryDate) }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          color=\"primary\"\n          @click=\"showDetailsDialog = false\"\n        />\n      </template>\n    </BaseDialog>\n\n    <!-- Use Batch Dialog -->\n    <q-dialog v-model=\"showUseBatchDialog\" max-width=\"500px\">\n      <UseBatchDialog\n        v-if=\"selectedBatch\"\n        :batch=\"selectedBatch as any\"\n        @close=\"showUseBatchDialog = false\"\n        @used=\"onBatchUsed\"\n      />\n    </q-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar, date } from 'quasar';\n  import { useBatchStore } from '@/stores/batch';\n  import { useClinicStore } from '@/stores/clinic';\n  import { useAuthStore } from '@/stores/auth';\n  import BatchRegistrationForm from './BatchRegistrationForm.vue';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  import UseBatchDialog from './UseBatchDialog.vue';\n  import type { ProductBatchDTO } from '@/domain/inventory/bridge';\n  import type { ProductBatchWithDetails } from '@/types/inventory';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const clinicStore = useClinicStore();\n  const authStore = useAuthStore();\n\n  // State\n  const loading = ref(false);\n  const showAddBatchDialog = ref(false);\n  const showDetailsDialog = ref(false);\n  const showUseBatchDialog = ref(false);\n  const showExpiringOnly = ref(false);\n  const selectedBatch = ref<ProductBatchDTO | ProductBatchWithDetails | null>(\n    null\n  );\n\n  // Filters\n  const filters = ref({\n    location: null as string | null,\n    urgency: null as string | null,\n    search: '',\n  });\n\n  // Computed\n  const columns = computed(() => [\n    {\n      name: 'product',\n      label: t('product.product'),\n      align: 'left' as const,\n      sortable: true,\n      field: 'productName',\n    },\n    {\n      name: 'batchNumber',\n      label: t('batch.batchNumber'),\n      align: 'left' as const,\n      sortable: true,\n      field: 'batchNumber',\n    },\n    {\n      name: 'location',\n      label: t('location.location'),\n      align: 'left' as const,\n      sortable: true,\n      field: 'locationName',\n    },\n    {\n      name: 'quantity',\n      label: t('inventory.quantity'),\n      align: 'right' as const,\n      sortable: true,\n      field: 'currentQuantity',\n    },\n    {\n      name: 'expiry',\n      label: t('batch.expiryDate'),\n      align: 'left' as const,\n      sortable: true,\n      field: 'expiryDate',\n    },\n    {\n      name: 'status',\n      label: t('common.status'),\n      align: 'center' as const,\n      sortable: true,\n      field: 'status',\n    },\n    {\n      name: 'actions',\n      label: t('common.actions'),\n      align: 'center' as const,\n      sortable: false,\n      field: '',\n    },\n  ]);\n\n  const locationOptions = computed(() => [\n    { label: t('common.all'), value: null },\n    ...clinicStore.locations.map(location => ({\n      label: location.name,\n      value: location.id,\n    })),\n  ]);\n\n  const urgencyOptions = computed(() => [\n    { label: t('common.all'), value: null },\n    { label: t('batch.urgency.expired'), value: 'expired' },\n    { label: t('batch.urgency.critical'), value: 'critical' },\n    { label: t('batch.urgency.warning'), value: 'warning' },\n    { label: t('batch.urgency.normal'), value: 'normal' },\n  ]);\n\n  const expiryAlerts = computed(() => {\n    return batchStore.expiringBatches.filter(\n      batch =>\n        batch.urgency_level === 'critical' || batch.urgency_level === 'expired'\n    );\n  });\n\n  const filteredBatches = computed(() => {\n    let batches = [...batchStore.batches];\n\n    // Apply expiry filter\n    if (showExpiringOnly.value) {\n      batches = batches.filter(batch =>\n        ['expired', 'critical', 'warning'].includes(\n          batch.urgencyLevel || 'normal'\n        )\n      );\n    }\n\n    // Apply location filter\n    if (filters.value.location) {\n      batches = batches.filter(\n        batch => batch.locationId === filters.value.location\n      );\n    }\n\n    // Apply urgency filter\n    if (filters.value.urgency) {\n      batches = batches.filter(\n        batch => batch.urgencyLevel === filters.value.urgency\n      );\n    }\n\n    // Sort by expiry date (FIFO)\n    batches.sort((a, b) => {\n      const dateA = new Date(a.expiryDate).getTime();\n      const dateB = new Date(b.expiryDate).getTime();\n      return dateA - dateB;\n    });\n\n    return batches;\n  });\n\n  // Methods\n  const formatDate = (dateStr: string) => {\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\n  };\n\n  const formatQuantity = (quantity: number | null | undefined) => {\n    if (quantity === null || quantity === undefined || isNaN(quantity)) {\n      return '0';\n    }\n    return quantity.toLocaleString(undefined, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 3,\n    });\n  };\n\n  const getLocationColor = (type: string) => {\n    const colors = {\n      storage: 'blue',\n      emergency: 'red',\n      treatment: 'green',\n      default: 'grey',\n    };\n    return colors[type as keyof typeof colors] || colors.default;\n  };\n\n  const getQuantityColor = (ratio: number) => {\n    if (ratio > 0.5) {\n      return 'green';\n    }\n    if (ratio > 0.2) {\n      return 'orange';\n    }\n    return 'red';\n  };\n\n  const getExpiryIcon = (urgency: string) => {\n    const icons = {\n      expired: 'error',\n      critical: 'warning',\n      warning: 'schedule',\n      normal: 'check_circle',\n    };\n    return icons[urgency as keyof typeof icons] || 'check_circle';\n  };\n\n  const getExpiryColor = (urgency: string) => {\n    const colors = {\n      expired: 'red',\n      critical: 'deep-orange',\n      warning: 'amber',\n      normal: 'green',\n    };\n    return colors[urgency as keyof typeof colors] || 'green';\n  };\n\n  const getExpiryTextClass = (urgency: string) => {\n    const classes = {\n      expired: 'text-red',\n      critical: 'text-deep-orange',\n      warning: 'text-amber-8',\n      normal: 'text-green',\n    };\n    return classes[urgency as keyof typeof classes] || 'text-green';\n  };\n\n  const getExpiryText = (days: number, urgency: string) => {\n    if (urgency === 'expired') {\n      return t('batch.expiredDaysAgo', { days: Math.abs(days) });\n    } else if (days === 0) {\n      return t('batch.expiresToday');\n    } else if (days === 1) {\n      return t('batch.expiresTomorrow');\n    } else {\n      return t('batch.expiresInDays', { days });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      active: 'green',\n      expired: 'red',\n      depleted: 'grey',\n      recalled: 'deep-orange',\n      quarantine: 'amber',\n    };\n    return colors[status as keyof typeof colors] || 'grey';\n  };\n\n  const applyFilters = () => {\n    // Filters are reactive, so this just triggers recomputation\n  };\n\n  const editBatch = (batch: ProductBatchDTO) => {\n    selectedBatch.value = batch;\n    showDetailsDialog.value = true;\n  };\n\n  const useBatch = (batch: ProductBatchDTO) => {\n    selectedBatch.value = batch;\n    showUseBatchDialog.value = true;\n  };\n\n  const quarantineBatch = async (batch: ProductBatchDTO) => {\n    try {\n      const clinicId = authStore.clinicId;\n      if (!clinicId) {\n        throw new Error(t('batchoverv.noclinicidavailable'));\n      }\n      await batchStore.updateBatch(batch.id, {\n        status: 'recalled',\n      } as any);\n      $q.notify({\n        type: 'positive',\n        message: t('batch.quarantineSuccess'),\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failed'),\n      });\n    }\n  };\n\n  const showBatchDetails = (batch: ProductBatchWithDetails) => {\n    selectedBatch.value = batch;\n    showDetailsDialog.value = true;\n  };\n\n  const onBatchAdded = (batch: any) => {\n    showAddBatchDialog.value = false;\n    loadBatches();\n  };\n\n  const onBatchUpdated = () => {\n    showDetailsDialog.value = false;\n    loadBatches();\n  };\n\n  const onBatchUsed = () => {\n    showUseBatchDialog.value = false;\n    loadBatches();\n  };\n\n  const loadBatches = async () => {\n    try {\n      loading.value = true;\n      const clinicId = authStore.clinicId;\n      if (!clinicId) {\n        throw new Error(t('batchoverv.noclinicidavailable'));\n      }\n      await Promise.all([\n        batchStore.fetchBatches({ practiceId: clinicId }),\n        batchStore.fetchExpiringBatches(clinicId),\n      ]);\n    } catch (error) {\n      console.error(t('errors.failedToLoadData'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToLoadData'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    const clinicId = authStore.clinicId;\n    if (clinicId) {\n      await Promise.all([loadBatches(), clinicStore.fetchLocations(clinicId)]);\n    }\n  });\n</script>\n\n<style scoped>\n  .batch-overview {\n    padding: 16px;\n  }\n\n  /* Table styling now handled by global medical-table class */\n\n  .batch-details-content {\n    .detail-item {\n      .detail-label {\n        font-size: var(--text-sm);\n        color: var(--neutral-600);\n        margin-bottom: var(--space-1);\n        font-weight: var(--font-weight-medium);\n      }\n\n      .detail-value {\n        font-size: var(--text-base);\n        color: var(--neutral-900);\n        font-weight: var(--font-weight-semibold);\n      }\n    }\n  }\n\n  /* Dark mode adjustments */\n  body.body--dark {\n    .batch-details-content {\n      .detail-item {\n        .detail-label {\n          color: var(--neutral-400);\n        }\n\n        .detail-value {\n          color: var(--neutral-100);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchRegistrationForm.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'prefilledProductId' requires default value to be set.",
        "line": 212,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 212,
        "endColumn": 33
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'prefilledLocationId' requires default value to be set.",
        "line": 213,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 213,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 222,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 222,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6435, 6438], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6435, 6438], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6754, 6757], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6754, 6757], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10627, 10630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10627, 10630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <q-card class=\"batch-registration-card\">\n    <q-card-section class=\"row items-center q-pb-none\">\n      <div class=\"text-h6\">{{ $t('batch.registerNewBatch') }}</div>\n      <q-space />\n      <q-btn\n        v-if=\"!embedded\"\n        icon=\"close\"\n        flat\n        round\n        dense\n        @click=\"$emit('close')\"\n      />\n    </q-card-section>\n\n    <q-card-section>\n      <q-form class=\"q-gutter-md\" @submit=\"onSubmit\">\n        <!-- Product Selection -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-select\n              v-model=\"form.product_id\"\n              :options=\"productOptions\"\n              option-value=\"id\"\n              option-label=\"name\"\n              :label=\"$t('product.product')\"\n              use-input\n              hide-selected\n              fill-input\n              input-debounce=\"0\"\n              :loading=\"loadingProducts\"\n              :rules=\"[rules.required]\"\n              emit-value\n              map-options\n              @filter=\"filterProducts\"\n            >\n              <template #option=\"scope\">\n                <q-item v-bind=\"scope.itemProps\">\n                  <q-item-section>\n                    <q-item-label>{{ scope.opt.name }}</q-item-label>\n                    <q-item-label caption>{{ scope.opt.sku }}</q-item-label>\n                  </q-item-section>\n                </q-item>\n              </template>\n            </q-select>\n          </div>\n\n          <!-- Location Selection -->\n          <div class=\"col-12 col-md-6\">\n            <q-select\n              v-model=\"form.location_id\"\n              :options=\"locationOptions\"\n              option-value=\"id\"\n              option-label=\"name\"\n              :label=\"$t('location.location')\"\n              :rules=\"[rules.required]\"\n              emit-value\n              map-options\n            />\n          </div>\n        </div>\n\n        <!-- Batch Information -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.batch_number\"\n              :label=\"$t('batch.batchNumber')\"\n              :rules=\"[\n                val => !!val || $t('validation.required'),\n                val =>\n                  val.length >= 3 || $t('validation.minLength', { min: 3 }),\n              ]\"\n              counter\n              maxlength=\"100\"\n            >\n              <template #prepend>\n                <q-icon name=\"qr_code_scanner\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.supplier_batch_number\"\n              :label=\"$t('batch.supplierBatchNumber')\"\n              counter\n              maxlength=\"100\"\n            >\n              <template #prepend>\n                <q-icon name=\"business\" />\n              </template>\n            </q-input>\n          </div>\n        </div>\n\n        <!-- Dates -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.expiry_date\"\n              :label=\"$t('batch.expiryDate')\"\n              type=\"date\"\n              :rules=\"[\n                val => !!val || $t('validation.required'),\n                val => validateExpiryDate(val),\n              ]\"\n            >\n              <template #prepend>\n                <q-icon name=\"event\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.received_date\"\n              :label=\"$t('batch.receivedDate')\"\n              type=\"date\"\n              :rules=\"[rules.required]\"\n            >\n              <template #prepend>\n                <q-icon name=\"inbox\" />\n              </template>\n            </q-input>\n          </div>\n        </div>\n\n        <!-- Quantities -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-4\">\n            <q-input\n              v-model.number=\"form.initial_quantity\"\n              :label=\"$t('batch.initialQuantity')\"\n              type=\"number\"\n              step=\"0.001\"\n              min=\"0\"\n              :rules=\"[\n                val =>\n                  (val !== null && val !== undefined) ||\n                  $t('validation.required'),\n                rules.positive,\n              ]\"\n            >\n              <template #prepend>\n                <q-icon name=\"inventory\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-4\">\n            <q-input\n              v-model.number=\"form.unit_cost\"\n              :label=\"$t('batch.unitCost')\"\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              :suffix=\"form.currency\"\n            >\n              <template #prepend>\n                <q-icon name=\"euro\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-4\">\n            <q-select\n              v-model=\"form.currency\"\n              :options=\"currencyOptions\"\n              :label=\"$t('batch.currency')\"\n              emit-value\n              map-options\n            />\n          </div>\n        </div>\n\n        <!-- Form Actions -->\n        <div class=\"row q-gutter-sm q-mt-lg\">\n          <q-btn\n            :label=\"$t('common.cancel')\"\n            color=\"grey\"\n            flat\n            :disable=\"loading\"\n            @click=\"resetForm\"\n          />\n          <q-space />\n          <q-btn\n            :label=\"$t('batch.registerBatch')\"\n            color=\"primary\"\n            type=\"submit\"\n            :loading=\"loading\"\n            icon=\"add_circle\"\n          />\n        </div>\n      </q-form>\n    </q-card-section>\n  </q-card>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useFormValidation } from 'src/composables/useFormValidation';\n  import type { CreateBatchRequest } from 'src/types/inventory';\n\n  // Props & Emits\n  interface Props {\n    embedded?: boolean;\n    prefilledProductId?: string;\n    prefilledLocationId?: string;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    embedded: false,\n  });\n\n  const emit = defineEmits<{\n    close: [];\n    success: [batch: any];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const authStore = useAuthStore();\n  const { rules, patterns } = useFormValidation();\n\n  // State\n  const loading = ref(false);\n  const loadingProducts = ref(false);\n  const productOptions = ref<any[]>([]);\n\n  // Form data - using a form type that's compatible with CreateBatchRequest\n  interface BatchFormData {\n    practice_id: string;\n    product_id: string;\n    location_id: string;\n    batch_number: string;\n    supplier_batch_number: string;\n    expiry_date: string;\n    received_date: string;\n    initial_quantity: number;\n    unit_cost: number;\n    currency: string;\n    purchase_order_number: string;\n    invoice_number: string;\n    quality_check_passed: boolean;\n    quality_notes: string;\n  }\n\n  const form = ref<BatchFormData>({\n    practice_id: 'demo-practice',\n    product_id: (props.prefilledProductId ?? '') as string,\n    location_id: (props.prefilledLocationId ?? '') as string,\n    batch_number: '',\n    supplier_batch_number: '',\n    expiry_date: '',\n    received_date: new Date().toISOString().substring(0, 10),\n    initial_quantity: 0,\n    unit_cost: 0,\n    currency: 'EUR',\n    purchase_order_number: '',\n    invoice_number: '',\n    quality_check_passed: true,\n    quality_notes: '',\n  });\n\n  // Computed\n  const locationOptions = computed(() => [\n    { id: '1', name: t('location.sampleData.mainWarehouse.name') },\n    { id: '2', name: t('location.samples.emergencyStock') },\n    { id: '3', name: t('location.sampleData.treatmentRoom.name') },\n  ]);\n\n  const currencyOptions = computed(() => [\n    { label: t('currencies.eur'), value: 'EUR' },\n    { label: t('currencies.usd'), value: 'USD' },\n    { label: t('currencies.gbp'), value: 'GBP' },\n  ]);\n\n  // Methods\n  const validateExpiryDate = (value: string) => {\n    if (!value) return t('validation.required');\n\n    const expiryDate = new Date(value);\n    const today = new Date();\n\n    if (expiryDate < today) {\n      return t('batch.validation.expiryDateInPast');\n    }\n\n    return true;\n  };\n\n  const filterProducts = (val: string, update: (cb: () => void) => void) => {\n    // Product filtering logic\n    update(() => {\n      productOptions.value = [];\n    });\n  };\n\n  const resetForm = () => {\n    form.value = {\n      practice_id: 'demo-practice',\n      product_id: (props.prefilledProductId ?? '') as string,\n      location_id: (props.prefilledLocationId ?? '') as string,\n      batch_number: '',\n      supplier_batch_number: '',\n      expiry_date: '',\n      received_date: new Date().toISOString().substring(0, 10),\n      initial_quantity: 0,\n      unit_cost: 0,\n      currency: 'EUR',\n      purchase_order_number: '',\n      invoice_number: '',\n      quality_check_passed: true,\n      quality_notes: '',\n    };\n  };\n\n  const onSubmit = async () => {\n    try {\n      loading.value = true;\n\n      const batchData: CreateBatchRequest = {\n        practice_id: form.value.practice_id,\n        product_id: form.value.product_id,\n        location_id: form.value.location_id,\n        batch_number: form.value.batch_number,\n        expiry_date: form.value.expiry_date,\n        initial_quantity: form.value.initial_quantity,\n        ...(form.value.supplier_batch_number && {\n          supplier_batch_number: form.value.supplier_batch_number,\n        }),\n        ...(form.value.received_date && {\n          received_date: form.value.received_date,\n        }),\n        ...(form.value.unit_cost !== undefined && {\n          unit_cost: form.value.unit_cost,\n        }),\n        ...(form.value.currency && { currency: form.value.currency }),\n        ...(form.value.purchase_order_number && {\n          purchase_order_number: form.value.purchase_order_number,\n        }),\n        ...(form.value.invoice_number && {\n          invoice_number: form.value.invoice_number,\n        }),\n        ...(form.value.quality_check_passed !== undefined && {\n          quality_check_passed: form.value.quality_check_passed,\n        }),\n        ...(form.value.quality_notes && {\n          quality_notes: form.value.quality_notes,\n        }),\n      };\n\n      const newBatch = await batchStore.createBatch(batchData as any);\n\n      $q.notify({\n        type: 'positive',\n        message: t('batch.batchRegisteredSuccessfully'),\n      });\n\n      emit('success', newBatch);\n\n      if (!props.embedded) {\n        emit('close');\n      } else {\n        resetForm();\n      }\n    } catch (error) {\n      console.error(t('errors.failedToRegisterBatch'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToRegisterBatch'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    // Load initial data\n  });\n</script>\n\n<style scoped>\n  .batch-registration-card {\n    min-width: 600px;\n    max-width: 900px;\n  }\n\n  @media (max-width: 768px) {\n    .batch-registration-card {\n      min-width: 100%;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchReports.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6141, 6144], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6141, 6144], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 537,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 537,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16226, 16229], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16226, 16229], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 592,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 592,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17949, 17952], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17949, 17952], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"batch-reports\">\n    <div class=\"row q-gutter-md\">\n      <!-- Report Selection -->\n      <div class=\"col-12 col-md-4\">\n        <q-card>\n          <q-card-section>\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.selectReport') }}</div>\n\n            <q-list>\n              <q-item\n                v-for=\"report in reportTypes\"\n                :key=\"report.type\"\n                clickable\n                :active=\"selectedReport === report.type\"\n                class=\"report-item\"\n                @click=\"selectedReport = report.type\"\n              >\n                <q-item-section avatar>\n                  <q-icon :name=\"report.icon\" :color=\"report.color\" />\n                </q-item-section>\n                <q-item-section>\n                  <q-item-label>{{ report.title }}</q-item-label>\n                  <q-item-label caption>{{ report.description }}</q-item-label>\n                </q-item-section>\n              </q-item>\n            </q-list>\n          </q-card-section>\n        </q-card>\n      </div>\n\n      <!-- Report Configuration -->\n      <div class=\"col-12 col-md-8\">\n        <q-card>\n          <q-card-section>\n            <div class=\"text-h6 q-mb-md\">{{ getReportTitle() }}</div>\n\n            <!-- Date Range Selection -->\n            <div class=\"row q-gutter-md q-mb-md\">\n              <div class=\"col-6\">\n                <q-input\n                  v-model=\"dateRange.from\"\n                  :label=\"$t('common.fromDate')\"\n                  type=\"date\"\n                />\n              </div>\n              <div class=\"col-6\">\n                <q-input\n                  v-model=\"dateRange.to\"\n                  :label=\"$t('common.toDate')\"\n                  type=\"date\"\n                />\n              </div>\n            </div>\n\n            <!-- Additional Filters -->\n            <div class=\"row q-gutter-md q-mb-md\">\n              <div class=\"col-6\">\n                <q-select\n                  v-model=\"filters.location\"\n                  :options=\"locationOptions\"\n                  :label=\"$t('location.location')\"\n                  clearable\n                  emit-value\n                  map-options\n                />\n              </div>\n              <div class=\"col-6\">\n                <q-select\n                  v-model=\"filters.status\"\n                  :options=\"statusOptions\"\n                  :label=\"$t('common.status')\"\n                  clearable\n                  emit-value\n                  map-options\n                />\n              </div>\n            </div>\n\n            <!-- Generate Report Button -->\n            <div class=\"row q-gutter-sm\">\n              <q-btn\n                color=\"primary\"\n                icon=\"assessment\"\n                :label=\"$t('batch.generateReport')\"\n                :loading=\"generating\"\n                @click=\"generateReport\"\n              />\n\n              <q-btn\n                v-if=\"reportData.length\"\n                color=\"green\"\n                icon=\"download\"\n                :label=\"$t('batch.exportReport')\"\n                @click=\"exportReport\"\n              />\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n    </div>\n\n    <!-- Report Results -->\n    <div v-if=\"reportData.length\" class=\"q-mt-lg\">\n      <q-card>\n        <q-card-section>\n          <div class=\"text-h6 q-mb-md\">{{ $t('batch.reportResults') }}</div>\n\n          <!-- Summary Cards -->\n          <div class=\"row q-gutter-md q-mb-lg\">\n            <div class=\"col-12 col-md-3\">\n              <q-card flat bordered>\n                <q-card-section class=\"text-center\">\n                  <div class=\"text-h4 text-primary\">\n                    {{ summary.totalBatches }}\n                  </div>\n                  <div class=\"text-caption\">{{ $t('batch.totalBatches') }}</div>\n                </q-card-section>\n              </q-card>\n            </div>\n\n            <div class=\"col-12 col-md-3\">\n              <q-card flat bordered>\n                <q-card-section class=\"text-center\">\n                  <div class=\"text-h4 text-red\">\n                    {{ summary.expiredBatches }}\n                  </div>\n                  <div class=\"text-caption\">\n                    {{ $t('batch.expiredBatches') }}\n                  </div>\n                </q-card-section>\n              </q-card>\n            </div>\n\n            <div class=\"col-12 col-md-3\">\n              <q-card flat bordered>\n                <q-card-section class=\"text-center\">\n                  <div class=\"text-h4 text-orange\">\n                    {{ summary.expiringSoon }}\n                  </div>\n                  <div class=\"text-caption\">{{ $t('batch.expiringSoon') }}</div>\n                </q-card-section>\n              </q-card>\n            </div>\n\n            <div class=\"col-12 col-md-3\">\n              <q-card flat bordered>\n                <q-card-section class=\"text-center\">\n                  <div class=\"text-h4 text-green\">\n                    {{ formatCurrency(summary.totalValue) }}\n                  </div>\n                  <div class=\"text-caption\">{{ $t('batch.totalValue') }}</div>\n                </q-card-section>\n              </q-card>\n            </div>\n          </div>\n\n          <!-- Report Table -->\n          <div class=\"medical-table\">\n            <q-table\n              :rows=\"reportData\"\n              :columns=\"reportColumns\"\n              :pagination=\"{ rowsPerPage: 25 }\"\n              row-key=\"id\"\n              flat\n              bordered\n              separator=\"cell\"\n            />\n          </div>\n        </q-card-section>\n      </q-card>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useAuthStore } from 'src/stores/auth';\n  import { supabase } from 'src/boot/supabase';\n\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const authStore = useAuthStore();\n\n  // State\n  const selectedReport = ref('expiry-analysis');\n  const generating = ref(false);\n  const reportData = ref<any[]>([]);\n\n  const dateRange = ref({\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .split('T')[0],\n    to: new Date().toISOString().split('T')[0],\n  });\n\n  const filters = ref({\n    location: null,\n    status: null,\n  });\n\n  // Computed\n  const reportTypes = computed(() => [\n    {\n      type: 'expiry-analysis',\n      title: t('batch.expiryAnalysis'),\n      description: t('batch.expiryAnalysisDesc'),\n      icon: 'schedule',\n      color: 'orange',\n    },\n    {\n      type: 'batch-usage',\n      title: t('batch.batchUsage'),\n      description: t('batch.batchUsageDesc'),\n      icon: 'trending_down',\n      color: 'blue',\n    },\n    {\n      type: 'fifo-compliance',\n      title: t('batch.fifoCompliance'),\n      description: t('batch.fifoComplianceDesc'),\n      icon: 'trending_up',\n      color: 'green',\n    },\n    {\n      type: 'batch-costs',\n      title: t('batch.batchCosts'),\n      description: t('batch.batchCostsDesc'),\n      icon: 'euro',\n      color: 'purple',\n    },\n  ]);\n\n  const locationOptions = computed(() => [\n    { label: t('common.allLocations'), value: null },\n    { label: t('location.sampleData.mainWarehouse.name'), value: 'storage' },\n    { label: t('location.samples.emergencyStock'), value: 'emergency' },\n  ]);\n\n  const statusOptions = computed(() => [\n    { label: t('common.allStatuses'), value: null },\n    { label: t('batch.status.active'), value: 'active' },\n    { label: t('batch.status.expired'), value: 'expired' },\n    { label: t('batch.status.depleted'), value: 'depleted' },\n  ]);\n\n  const reportColumns = computed(() => {\n    const baseColumns = [\n      {\n        name: 'batchNumber',\n        label: t('batch.batchNumber'),\n        field: 'batchNumber',\n        align: 'left' as const,\n      },\n      {\n        name: 'productName',\n        label: t('product.product'),\n        field: 'productName',\n        align: 'left' as const,\n      },\n      {\n        name: 'locationName',\n        label: t('location.location'),\n        field: 'locationName',\n        align: 'left' as const,\n      },\n    ];\n\n    // Add specific columns based on report type\n    if (selectedReport.value === 'expiry-analysis') {\n      baseColumns.push(\n        {\n          name: 'expiryDate',\n          label: t('batch.expiryDate'),\n          field: 'expiryDate',\n          align: 'left' as const,\n        },\n        {\n          name: 'daysUntilExpiry',\n          label: t('batch.daysUntilExpiry'),\n          field: 'daysUntilExpiry',\n          align: 'left' as const,\n        }\n      );\n    }\n\n    return baseColumns;\n  });\n\n  const summary = computed(() => {\n    if (!reportData.value.length) {\n      return {\n        totalBatches: 0,\n        expiredBatches: 0,\n        expiringSoon: 0,\n        totalValue: 0,\n      };\n    }\n\n    return {\n      totalBatches: reportData.value.length,\n      expiredBatches: reportData.value.filter(b => b.daysUntilExpiry < 0)\n        .length,\n      expiringSoon: reportData.value.filter(\n        b => b.daysUntilExpiry >= 0 && b.daysUntilExpiry <= 30\n      ).length,\n      totalValue: reportData.value.reduce(\n        (sum, b) => sum + (b.currentQuantity * b.unitCost || 0),\n        0\n      ),\n    };\n  });\n\n  // Methods\n  const getReportTitle = () => {\n    const report = reportTypes.value.find(r => r.type === selectedReport.value);\n    return report?.title || t('batch.reportConfiguration');\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount);\n  };\n\n  const generateReport = async () => {\n    try {\n      generating.value = true;\n\n      const practiceId = authStore.clinicId || authStore.selectedPractice?.id;\n      if (!practiceId) {\n        throw new Error('No practice selected');\n      }\n\n      let query = supabase\n        .from('product_batches')\n        .select(\n          `\n          id,\n          batch_number,\n          expiry_date,\n          received_date,\n          current_quantity,\n          unit_cost,\n          status,\n          products!inner(name, sku),\n          practice_locations!inner(name)\n        `\n        )\n        .eq('practice_id', practiceId);\n\n      // Apply date range filter\n      if (dateRange.value.from) {\n        query = query.gte('expiry_date', dateRange.value.from);\n      }\n      if (dateRange.value.to) {\n        query = query.lte('expiry_date', dateRange.value.to);\n      }\n\n      // Apply report type specific filters\n      switch (selectedReport.value) {\n        case 'expiry-analysis': {\n          // Show batches expiring in next 90 days\n          const futureDate = new Date();\n          futureDate.setDate(futureDate.getDate() + 90);\n          query = query.lte(\n            'expiry_date',\n            futureDate.toISOString().split('T')[0]\n          );\n          break;\n        }\n\n        case 'low-stock':\n          query = query.lt('current_quantity', 10); // Batches with low quantity\n          break;\n\n        case 'expired':\n          query = query.lt(\n            'expiry_date',\n            new Date().toISOString().split('T')[0]\n          );\n          break;\n      }\n\n      // Apply additional filters\n      if (filters.value.status) {\n        query = query.eq('status', filters.value.status);\n      }\n\n      const { data, error } = await query.order('expiry_date', {\n        ascending: true,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      // Transform data for display\n      const transformedData = (data || []).map(batch => {\n        const expiryDate = new Date(batch.expiry_date);\n        const today = new Date();\n        const daysUntilExpiry = Math.ceil(\n          (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n        );\n\n        return {\n          id: batch.id,\n          batchNumber: batch.batch_number,\n          productName: batch.products?.name || 'Unknown Product',\n          productSku: batch.products?.sku || '',\n          locationName: batch.practice_locations?.name || 'Unknown Location',\n          expiryDate: batch.expiry_date,\n          receivedDate: batch.received_date,\n          daysUntilExpiry,\n          currentQuantity: batch.current_quantity,\n          unitCost: batch.unit_cost || 0,\n          status: batch.status,\n          urgencyLevel:\n            daysUntilExpiry < 0\n              ? 'expired'\n              : daysUntilExpiry <= 7\n                ? 'critical'\n                : daysUntilExpiry <= 30\n                  ? 'warning'\n                  : 'normal',\n        };\n      });\n\n      reportData.value = transformedData;\n\n      // If no real data, create sample batches for demo\n      if (transformedData.length === 0) {\n        await createSampleBatches(practiceId);\n        // Retry the query\n        const { data: retryData } = await query;\n        const retryTransformed = (retryData || []).map(batch => {\n          const expiryDate = new Date(batch.expiry_date);\n          const today = new Date();\n          const daysUntilExpiry = Math.ceil(\n            (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n          );\n\n          return {\n            id: batch.id,\n            batchNumber: batch.batch_number,\n            productName: batch.products?.name || 'Unknown Product',\n            productSku: batch.products?.sku || '',\n            locationName: batch.practice_locations?.name || 'Unknown Location',\n            expiryDate: batch.expiry_date,\n            receivedDate: batch.received_date,\n            daysUntilExpiry,\n            currentQuantity: batch.current_quantity,\n            unitCost: batch.unit_cost || 0,\n            status: batch.status,\n            urgencyLevel:\n              daysUntilExpiry < 0\n                ? 'expired'\n                : daysUntilExpiry <= 7\n                  ? 'critical'\n                  : daysUntilExpiry <= 30\n                    ? 'warning'\n                    : 'normal',\n          };\n        });\n        reportData.value = retryTransformed;\n      }\n\n      $q.notify({\n        type: 'positive',\n        message: t('batch.reportGenerated'),\n      });\n    } catch (error) {\n      console.error(t('errors.failedToGenerateReport'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToGenerateReport'),\n      });\n\n      // Fallback to mock data if database fails\n      reportData.value = createFallbackData();\n    } finally {\n      generating.value = false;\n    }\n  };\n\n  const createSampleBatches = async (practiceId: string) => {\n    try {\n      // Get some products and locations first\n      const { data: products } = await supabase\n        .from('products')\n        .select('id, name')\n        .eq('practice_id', practiceId)\n        .limit(3);\n\n      const { data: locations } = await supabase\n        .from('practice_locations')\n        .select('id, name')\n        .eq('practice_id', practiceId)\n        .limit(2);\n\n      if (!products?.length || !locations?.length) {\n        return; // Can't create samples without products/locations\n      }\n\n      const sampleBatches = [];\n      for (let i = 0; i < 5; i++) {\n        const product = products[i % products.length];\n        const location = locations[i % locations.length];\n\n        if (!product || !location) continue;\n\n        const daysOffset = (i - 2) * 30; // Some expired, some future\n        const expiryDate = new Date();\n        expiryDate.setDate(expiryDate.getDate() + daysOffset);\n\n        sampleBatches.push({\n          practice_id: practiceId,\n          product_id: product.id,\n          location_id: location.id,\n          batch_number: `BATCH-${String(i + 1).padStart(3, '0')}`,\n          expiry_date: expiryDate.toISOString().split('T')[0],\n          received_date: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .split('T')[0], // 60 days ago\n          initial_quantity: Math.floor(Math.random() * 100) + 20,\n          current_quantity: Math.floor(Math.random() * 50) + 5,\n          unit_cost: Math.random() * 50 + 5,\n          status: 'active',\n        });\n      }\n\n      await supabase.from('product_batches').insert(sampleBatches as any);\n    } catch (error) {\n      console.error('Error creating sample batches:', error);\n    }\n  };\n\n  const createFallbackData = () => {\n    return Array.from({ length: 8 }, (_, i) => ({\n      id: i + 1,\n      batchNumber: `BATCH-${String(i + 1).padStart(3, '0')}`,\n      productName: `Sample Product ${i + 1}`,\n      productSku: `PROD-${String(i + 1).padStart(3, '0')}`,\n      locationName: i % 2 === 0 ? 'Hoofdlocatie' : 'Behandelkamer 1',\n      expiryDate: new Date(Date.now() + (i - 3) * 24 * 60 * 60 * 1000)\n        .toISOString()\n        .split('T')[0],\n      receivedDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)\n        .toISOString()\n        .split('T')[0],\n      daysUntilExpiry: i - 3,\n      currentQuantity: Math.floor(Math.random() * 100) + 10,\n      unitCost: Math.random() * 50 + 5,\n      status: 'active',\n      urgencyLevel:\n        i <= 1\n          ? 'expired'\n          : i <= 3\n            ? 'critical'\n            : i <= 5\n              ? 'warning'\n              : 'normal',\n    }));\n  };\n\n  const exportReport = () => {\n    // Export report as CSV\n    const csvData = reportData.value.map(row => ({\n      [t('batch.batchNumber')]: row.batchNumber,\n      [t('product.product')]: row.productName,\n      [t('location.location')]: row.locationName,\n      [t('batch.expiryDate')]: row.expiryDate,\n      [t('batch.daysUntilExpiry')]: row.daysUntilExpiry,\n      [t('batch.currentQuantity')]: row.currentQuantity,\n      [t('batch.unitCost')]: row.unitCost,\n    }));\n\n    const csv = convertToCSV(csvData);\n    downloadCSV(csv, `batch-report-${selectedReport.value}.csv`);\n\n    $q.notify({\n      type: 'positive',\n      message: t('batch.reportExported'),\n    });\n  };\n\n  const convertToCSV = (data: any[]) => {\n    if (!data.length) {\n      return '';\n    }\n\n    const headers = Object.keys(data[0]);\n    const csvHeaders = headers.join(',');\n    const csvRows = data.map(row =>\n      headers.map(header => `\"${row[header] || ''}\"`).join(',')\n    );\n\n    return [csvHeaders, ...csvRows].join('\\n');\n  };\n\n  const downloadCSV = (csv: string, filename: string) => {\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n</script>\n\n<style scoped>\n  .batch-reports {\n    padding: 16px;\n  }\n\n  .report-item {\n    border-radius: 8px;\n    margin-bottom: 4px;\n  }\n\n  .report-item.q-item--active {\n    background-color: var(--q-primary);\n    color: white;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\CountryFlag.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\EmptyBatchDetailCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\ExpiringBatchesList.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\FifoBatchManager.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 126,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 126,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4071, 4074], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4071, 4074], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4247, 4250], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4247, 4250], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5335, 5338], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5335, 5338], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"fifo-batch-manager\">\n    <div class=\"row q-gutter-md\">\n      <!-- FIFO Suggestion Form -->\n      <div class=\"col-12 col-md-6\">\n        <q-card>\n          <q-card-section>\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoSuggestion') }}</div>\n\n            <q-form class=\"q-gutter-md\" @submit=\"generateSuggestion\">\n              <q-select\n                v-model=\"form.productId\"\n                :options=\"productOptions\"\n                option-value=\"id\"\n                option-label=\"name\"\n                :label=\"$t('product.product')\"\n                :rules=\"[val => !!val || $t('validation.required')]\"\n                emit-value\n                map-options\n              />\n\n              <q-select\n                v-model=\"form.locationId\"\n                :options=\"locationOptions\"\n                option-value=\"id\"\n                option-label=\"name\"\n                :label=\"$t('location.location')\"\n                :rules=\"[val => !!val || $t('validation.required')]\"\n                emit-value\n                map-options\n              />\n\n              <q-input\n                v-model.number=\"form.requestedQuantity\"\n                :label=\"$t('batch.requestedQuantity')\"\n                type=\"number\"\n                step=\"0.001\"\n                min=\"0\"\n                :rules=\"[val => val > 0 || $t('validation.mustBePositive')]\"\n              />\n\n              <q-btn\n                type=\"submit\"\n                color=\"primary\"\n                :label=\"$t('batch.generateFifoSuggestion')\"\n                :loading=\"loading\"\n                icon=\"trending_up\"\n              />\n            </q-form>\n          </q-card-section>\n        </q-card>\n      </div>\n\n      <!-- FIFO Results -->\n      <div class=\"col-12 col-md-6\">\n        <q-card>\n          <q-card-section>\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoResults') }}</div>\n\n            <div\n              v-if=\"!fifoResults.length\"\n              class=\"text-center text-grey q-py-lg\"\n            >\n              <q-icon name=\"trending_up\" size=\"48px\" class=\"q-mb-md\" />\n              <div>{{ $t('batch.noFifoResults') }}</div>\n            </div>\n\n            <q-list v-else>\n              <q-item\n                v-for=\"(result, index) in fifoResults\"\n                :key=\"index\"\n                class=\"fifo-result-item\"\n              >\n                <q-item-section avatar>\n                  <q-avatar color=\"primary\" text-color=\"white\">\n                    {{ index + 1 }}\n                  </q-avatar>\n                </q-item-section>\n\n                <q-item-section>\n                  <q-item-label>{{ result.batchNumber }}</q-item-label>\n                  <q-item-label caption>\n                    {{ $t('batch.useQuantity') }}: {{ result.useQuantity }}\n                  </q-item-label>\n                  <q-item-label caption>\n                    {{ $t('batch.expiryDate') }}:\n                    {{ formatDate(result.expiryDate) }}\n                  </q-item-label>\n                </q-item-section>\n\n                <q-item-section side>\n                  <q-chip\n                    :color=\"getExpiryColor(result.daysUntilExpiry)\"\n                    text-color=\"white\"\n                    size=\"sm\"\n                  >\n                    {{ result.daysUntilExpiry }}d\n                  </q-chip>\n                </q-item-section>\n              </q-item>\n            </q-list>\n\n            <div v-if=\"fifoResults.length\" class=\"q-mt-md\">\n              <q-btn\n                color=\"green\"\n                :label=\"$t('batch.applyFifoSuggestion')\"\n                icon=\"check\"\n                class=\"full-width\"\n                @click=\"applySuggestion\"\n              />\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar, date } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n\n  const emit = defineEmits<{\n    'suggestion-generated': [results: any[]];\n  }>();\n\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n\n  // State\n  const loading = ref(false);\n  const fifoResults = ref<any[]>([]);\n\n  const form = ref({\n    productId: '',\n    locationId: '',\n    requestedQuantity: 0,\n  });\n\n  // Mock options for now\n  const productOptions = ref([\n    { id: '1', name: t('product.samples.syringeBD') },\n    { id: '2', name: t('product.samples.needleBD') },\n  ]);\n\n  const locationOptions = ref([\n    { id: '1', name: t('location.sampleData.mainWarehouse.name') },\n    { id: '2', name: t('location.samples.emergencyStock') },\n  ]);\n\n  // Methods\n  const formatDate = (dateStr: string) => {\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\n  };\n\n  const getExpiryColor = (days: number) => {\n    if (days < 0) return 'red';\n    if (days <= 7) return 'deep-orange';\n    if (days <= 30) return 'amber';\n    return 'green';\n  };\n\n  const generateSuggestion = async () => {\n    try {\n      loading.value = true;\n\n      // Call the FIFO function from our batch store\n      const results = await batchStore.fetchFifoBatches(\n        form.value.productId,\n        form.value.locationId,\n        form.value.requestedQuantity\n      );\n\n      fifoResults.value = results.map((result: any, index: number) => ({\n        ...result,\n        daysUntilExpiry: Math.ceil(\n          (new Date(result.expiryDate).getTime() - Date.now()) /\n            (1000 * 60 * 60 * 24)\n        ),\n      }));\n\n      emit('suggestion-generated', fifoResults.value);\n\n      $q.notify({\n        type: 'positive',\n        message: t('batch.fifoSuggestionGenerated'),\n      });\n    } catch (error) {\n      console.error(t('errors.failedToGenerateSuggestion'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToGenerateSuggestion'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const applySuggestion = () => {\n    $q.dialog({\n      title: t('batch.confirmFifoApplication'),\n      message: t('batch.confirmFifoMessage'),\n      cancel: true,\n      persistent: true,\n    }).onOk(() => {\n      // Apply the FIFO suggestion\n      // This would typically create stock movements for each batch\n      $q.notify({\n        type: 'positive',\n        message: t('batch.fifoAppliedSuccessfully'),\n      });\n\n      // Reset form\n      form.value = {\n        productId: '',\n        locationId: '',\n        requestedQuantity: 0,\n      };\n      fifoResults.value = [];\n    });\n  };\n</script>\n\n<style scoped>\n  .fifo-batch-manager {\n    padding: 16px;\n  }\n\n  .fifo-result-item {\n    border: 1px solid #e0e0e0;\n    border-radius: 8px;\n    margin-bottom: 8px;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\PageLayout.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'backgroundColor' requires default value to be set.",
        "line": 33,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 33,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <q-page :class=\"pageClasses\">\r\n    <div class=\"page-layout-container\">\r\n      <!-- Page Header Slot -->\r\n      <div v-if=\"hasHeader\" class=\"page-header-section\">\r\n        <slot name=\"header\" />\r\n      </div>\r\n\r\n      <!-- Main Content -->\r\n      <div class=\"page-content-section\">\r\n        <slot />\r\n      </div>\r\n\r\n      <!-- Page Footer Slot -->\r\n      <div v-if=\"hasFooter\" class=\"page-footer-section\">\r\n        <slot name=\"footer\" />\r\n      </div>\r\n    </div>\r\n  </q-page>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed, useSlots } from 'vue';\r\n\r\n  interface Props {\r\n    maxWidth?: string | number;\r\n    padding?: string;\r\n    verticalSpacing?: string;\r\n    fullWidth?: boolean;\r\n    noTopPadding?: boolean;\r\n    noBottomPadding?: boolean;\r\n    noHorizontalPadding?: boolean;\r\n    backgroundColor?: string;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    maxWidth: '1400px',\r\n    padding: 'lg',\r\n    verticalSpacing: 'lg',\r\n    fullWidth: false,\r\n    noTopPadding: false,\r\n    noBottomPadding: false,\r\n    noHorizontalPadding: false,\r\n  });\r\n\r\n  const slots = useSlots();\r\n\r\n  const hasHeader = computed(() => !!slots.header);\r\n  const hasFooter = computed(() => !!slots.footer);\r\n\r\n  const pageClasses = computed(() => {\r\n    const classes = ['page-layout'];\r\n\r\n    if (!props.noTopPadding && !props.noBottomPadding) {\r\n      classes.push(`q-py-${props.verticalSpacing}`);\r\n    } else {\r\n      if (!props.noTopPadding) classes.push(`q-pt-${props.verticalSpacing}`);\r\n      if (!props.noBottomPadding) classes.push(`q-pb-${props.verticalSpacing}`);\r\n    }\r\n\r\n    // Remove horizontal padding from Quasar classes - we handle it in CSS\r\n    // if (!props.noHorizontalPadding) {\r\n    //   classes.push(`q-px-${props.padding}`)\r\n    // }\r\n\r\n    return classes;\r\n  });\r\n\r\n  const containerStyles = computed(() => {\r\n    const styles: Record<string, string> = {};\r\n\r\n    if (!props.fullWidth) {\r\n      if (typeof props.maxWidth === 'number') {\r\n        styles.maxWidth = `${props.maxWidth}px`;\r\n      } else {\r\n        styles.maxWidth = props.maxWidth;\r\n      }\r\n    }\r\n\r\n    if (props.backgroundColor) {\r\n      styles.backgroundColor = props.backgroundColor;\r\n    }\r\n\r\n    return styles;\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .page-layout {\r\n    min-height: 100%;\r\n\r\n    .page-layout-container {\r\n      max-width: v-bind('containerStyles.maxWidth');\r\n      margin: 0 auto;\r\n      width: 100%;\r\n      background-color: v-bind('containerStyles.backgroundColor');\r\n      box-sizing: border-box; // Ensure padding is included in width calculation\r\n      overflow-x: hidden; // Prevent horizontal scroll only on the container\r\n\r\n      // Apply consistent horizontal padding\r\n      padding-left: var(--space-6);\r\n      padding-right: var(--space-6);\r\n\r\n      @media (max-width: 1280px) {\r\n        padding-left: var(--space-4);\r\n        padding-right: var(--space-4);\r\n      }\r\n\r\n      @media (max-width: 640px) {\r\n        padding-left: var(--space-3);\r\n        padding-right: var(--space-3);\r\n      }\r\n    }\r\n\r\n    .page-header-section {\r\n      margin-bottom: var(--space-8);\r\n\r\n      @media (max-width: 768px) {\r\n        margin-bottom: var(--space-6);\r\n      }\r\n    }\r\n\r\n    .page-content-section {\r\n      flex: 1;\r\n\r\n      // Ensure proper spacing between content elements\r\n      > * + * {\r\n        margin-top: var(--space-6);\r\n\r\n        @media (max-width: 768px) {\r\n          margin-top: var(--space-4);\r\n        }\r\n      }\r\n    }\r\n\r\n    .page-footer-section {\r\n      margin-top: var(--space-8);\r\n\r\n      @media (max-width: 768px) {\r\n        margin-top: var(--space-6);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Ensure proper containment without breaking scroll behavior\r\n  .page-layout {\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n\r\n    // Ensure content doesn't exceed container width\r\n    .page-content-section {\r\n      width: 100%;\r\n      max-width: 100%;\r\n\r\n      // Apply to direct children to prevent overflow\r\n      > * {\r\n        max-width: 100%;\r\n        box-sizing: border-box;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\PageTitle.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 74,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 74,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 75,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 75,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'badge' requires default value to be set.",
        "line": 78,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 78,
        "endColumn": 20
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'meta' requires default value to be set.",
        "line": 80,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 80,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2315, 2318], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2315, 2318], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"page-title-component animate-fade-in\">\n    <div class=\"page-title-content\">\n      <div class=\"title-section\">\n        <div class=\"title-wrapper\">\n          <q-icon\n            v-if=\"props.icon\"\n            :name=\"props.icon\"\n            :size=\"props.iconSize\"\n            :color=\"props.iconColor\"\n            class=\"title-icon\"\n            aria-hidden=\"true\"\n          />\n          <div class=\"title-text\">\n            <h1\n              :id=\"`page-title-${title.replace(/\\s+/g, '-').toLowerCase()}`\"\n              class=\"page-title\"\n            >\n              {{ props.title }}\n            </h1>\n            <p v-if=\"props.subtitle\" class=\"page-subtitle\">\n              {{ props.subtitle }}\n            </p>\n          </div>\n          <q-badge\n            v-if=\"props.badge\"\n            :color=\"props.badgeColor\"\n            :label=\"props.badge\"\n            class=\"title-badge\"\n            :aria-label=\"`Status: ${props.badge}`\"\n          />\n        </div>\n\n        <div\n          v-if=\"props.meta && props.meta.length > 0\"\n          class=\"title-meta\"\n          role=\"list\"\n          :aria-label=\"$t('common.accessibility.pageMetadata')\"\n        >\n          <div\n            v-for=\"(item, index) in props.meta\"\n            :key=\"index\"\n            class=\"meta-item\"\n            role=\"listitem\"\n          >\n            <q-icon :name=\"item.icon\" size=\"16px\" aria-hidden=\"true\" />\n            <span>{{ item.text }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div\n        v-if=\"slots.actions\"\n        class=\"title-actions\"\n        role=\"group\"\n        :aria-label=\"$t('common.accessibility.pageActions')\"\n      >\n        <slot name=\"actions\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  // No additional imports needed for this component\n\n  interface MetaItem {\n    icon: string;\n    text: string;\n  }\n\n  interface Props {\n    title: string;\n    subtitle?: string;\n    icon?: string;\n    iconSize?: string;\n    iconColor?: string;\n    badge?: string;\n    badgeColor?: string;\n    meta?: MetaItem[];\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    iconSize: '24px',\n    iconColor: 'primary',\n    badgeColor: 'primary',\n  });\n\n  // Define slots using defineSlots instead of useSlots\n  const slots = defineSlots<{\n    actions?: () => any;\n  }>();\n</script>\n\n<style lang=\"scss\" scoped>\n  .page-title-component {\n    margin-bottom: var(--space-8);\n\n    .page-title-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-start;\n      gap: var(--space-6);\n      flex-wrap: wrap;\n\n      @media (max-width: 768px) {\n        flex-direction: column;\n        align-items: stretch;\n        gap: var(--space-4);\n      }\n    }\n\n    .title-section {\n      flex: 1;\n      min-width: 0;\n    }\n\n    .title-wrapper {\n      display: flex;\n      align-items: center;\n      gap: var(--space-3);\n      margin-bottom: var(--space-2);\n\n      .title-icon {\n        flex-shrink: 0;\n        align-self: flex-start;\n        margin-top: 2px;\n        // Font size handled by centralized icon system in app.scss\n      }\n\n      .title-text {\n        flex: 1;\n        min-width: 0;\n      }\n\n      .title-badge {\n        align-self: flex-start;\n        margin-top: var(--space-1);\n        flex-shrink: 0;\n      }\n    }\n\n    .page-title {\n      font-size: var(--text-3xl);\n      font-weight: var(--font-weight-bold);\n      line-height: var(--leading-tight);\n      color: var(--neutral-900);\n      margin: 0;\n      margin-bottom: var(--space-1);\n      letter-spacing: -0.025em;\n\n      @media (max-width: 768px) {\n        font-size: var(--text-2xl);\n      }\n    }\n\n    .page-subtitle {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-normal);\n      line-height: var(--leading-relaxed);\n      color: var(--neutral-600);\n      margin: 0;\n      max-width: 60ch;\n\n      @media (max-width: 768px) {\n        font-size: var(--text-sm);\n      }\n    }\n\n    .title-meta {\n      display: flex;\n      align-items: center;\n      gap: var(--space-6);\n      margin-top: var(--space-3);\n      flex-wrap: wrap;\n\n      @media (max-width: 640px) {\n        gap: var(--space-4);\n      }\n\n      .meta-item {\n        display: flex;\n        align-items: center;\n        gap: var(--space-2);\n        font-size: var(--text-sm);\n        font-weight: var(--font-weight-medium);\n        color: var(--neutral-600);\n\n        .q-icon {\n          color: var(--brand-primary);\n        }\n      }\n    }\n\n    .title-actions {\n      display: flex;\n      align-items: flex-start;\n      gap: var(--space-3);\n      flex-wrap: wrap;\n      padding-top: 8px; // Move buttons down slightly\n\n      @media (max-width: 768px) {\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 12px; // More space on mobile\n      }\n\n      @media (max-width: 480px) {\n        :deep(.q-btn) {\n          flex: 1;\n          min-width: 120px;\n        }\n      }\n    }\n  }\n\n  // Dark mode styles\n  body.body--dark {\n    .page-title {\n      color: var(--neutral-900);\n    }\n\n    .page-subtitle {\n      color: var(--neutral-600);\n    }\n\n    .meta-item {\n      color: var(--neutral-600);\n    }\n  }\n\n  // Animation\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .animate-fade-in {\n    animation: fade-in 0.3s ease-out;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenColorPicker.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenInspector.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenSlider.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\UseBatchDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 232,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 232,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7280, 7283], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7280, 7283], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <q-card class=\"use-batch-dialog\">\n    <q-card-section class=\"row items-center q-pb-none\">\n      <div class=\"text-h6\">{{ $t('batch.useBatch') }}</div>\n      <q-space />\n      <q-btn icon=\"close\" flat round dense @click=\"$emit('close')\" />\n    </q-card-section>\n\n    <q-card-section>\n      <!-- Batch Information -->\n      <div class=\"batch-info q-mb-lg\">\n        <q-card flat bordered class=\"q-pa-md\">\n          <div class=\"text-subtitle2 text-grey q-mb-sm\">\n            {{ $t('batch.batchInformation') }}\n          </div>\n          <div class=\"row q-gutter-md\">\n            <div class=\"col-12 col-md-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.batchNumber') }}\n              </div>\n              <div class=\"text-weight-medium\">{{ batch.batchNumber }}</div>\n            </div>\n            <div class=\"col-12 col-md-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('product.product') }}\n              </div>\n              <div class=\"text-weight-medium\">{{ batch.productName }}</div>\n            </div>\n            <div class=\"col-12 col-md-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.availableQuantity') }}\n              </div>\n              <div class=\"text-weight-medium text-green\">\n                {{ formatQuantity(batch.availableQuantity ?? 0) }}\n              </div>\n            </div>\n            <div class=\"col-12 col-md-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.expiryDate') }}\n              </div>\n              <div class=\"text-weight-medium\">\n                {{ formatDate(batch.expiryDate) }}\n              </div>\n            </div>\n          </div>\n        </q-card>\n      </div>\n\n      <!-- Usage Form -->\n      <q-form class=\"q-gutter-md\" @submit=\"onSubmit\">\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model.number=\"form.quantity\"\n              :label=\"$t('batch.quantityToUse')\"\n              type=\"number\"\n              step=\"0.001\"\n              min=\"0\"\n              :max=\"batch.availableQuantity\"\n              :rules=\"[\n                val => val > 0 || $t('validation.mustBePositive'),\n                val =>\n                  val <= (batch.availableQuantity ?? 0) ||\n                  $t('batch.validation.exceededAvailable'),\n              ]\"\n            >\n              <template #prepend>\n                <q-icon name=\"remove_circle\" />\n              </template>\n              <template #append>\n                <q-btn\n                  flat\n                  dense\n                  icon=\"select_all\"\n                  size=\"sm\"\n                  @click=\"form.quantity = batch.availableQuantity ?? 0\"\n                >\n                  <q-tooltip>{{ $t('batch.useAll') }}</q-tooltip>\n                </q-btn>\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <q-select\n              v-model=\"form.reason\"\n              :options=\"reasonOptions\"\n              :label=\"$t('batch.usageReason')\"\n              :rules=\"[val => !!val || $t('validation.required')]\"\n              emit-value\n              map-options\n            />\n          </div>\n        </div>\n\n        <q-input\n          v-model=\"form.notes\"\n          :label=\"$t('batch.usageNotes')\"\n          type=\"textarea\"\n          rows=\"3\"\n          :hint=\"$t('batch.usageNotesHint')\"\n        />\n\n        <!-- Usage Summary -->\n        <q-card v-if=\"form.quantity > 0\" flat bordered class=\"q-pa-md\">\n          <div class=\"text-subtitle2 text-grey q-mb-sm\">\n            {{ $t('batch.usageSummary') }}\n          </div>\n          <div class=\"row q-gutter-md\">\n            <div class=\"col-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.quantityUsed') }}\n              </div>\n              <div class=\"text-h6 text-red\">\n                -{{ formatQuantity(form.quantity) }}\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.remainingQuantity') }}\n              </div>\n              <div class=\"text-h6 text-green\">\n                {{\n                  formatQuantity((batch.availableQuantity ?? 0) - form.quantity)\n                }}\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.costImpact') }}\n              </div>\n              <div class=\"text-h6\">\n                {{ formatCurrency(form.quantity * (batch.unitCost ?? 0)) }}\n              </div>\n            </div>\n            <div class=\"col-6\">\n              <div class=\"text-caption text-grey\">\n                {{ $t('batch.newStatus') }}\n              </div>\n              <div class=\"text-h6\">\n                <q-chip\n                  :color=\"getNewStatusColor()\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                >\n                  {{ getNewStatusText() }}\n                </q-chip>\n              </div>\n            </div>\n          </div>\n        </q-card>\n\n        <!-- Form Actions -->\n        <div class=\"row q-gutter-sm q-mt-lg\">\n          <q-btn\n            :label=\"$t('common.cancel')\"\n            color=\"grey\"\n            flat\n            :disable=\"loading\"\n            @click=\"$emit('close')\"\n          />\n          <q-space />\n          <q-btn\n            :label=\"$t('batch.confirmUsage')\"\n            color=\"primary\"\n            type=\"submit\"\n            :loading=\"loading\"\n            icon=\"check\"\n          />\n        </div>\n      </q-form>\n    </q-card-section>\n  </q-card>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar, date } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import type { ProductBatchWithDetails } from 'src/types/inventory';\n\n  interface Props {\n    batch: ProductBatchWithDetails;\n  }\n\n  const props = defineProps<Props>();\n\n  const emit = defineEmits<{\n    close: [];\n    used: [batch: ProductBatchWithDetails, quantity: number];\n  }>();\n\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n\n  // State\n  const loading = ref(false);\n\n  const form = ref({\n    quantity: 0,\n    reason: '',\n    notes: '',\n  });\n\n  // Computed\n  const reasonOptions = computed(() => [\n    { label: t('batch.usage.consumption'), value: 'consumption' },\n    { label: t('batch.usage.expired'), value: 'expired' },\n    { label: t('batch.usage.damaged'), value: 'damaged' },\n    { label: t('batch.usage.transfer'), value: 'transfer' },\n    { label: t('batch.usage.adjustment'), value: 'adjustment' },\n    { label: t('batch.usage.other'), value: 'other' },\n  ]);\n\n  // Methods\n  const formatDate = (dateStr: string) => {\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\n  };\n\n  const formatQuantity = (quantity: number) => {\n    return quantity.toLocaleString(undefined, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 3,\n    });\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: (props.batch as any).currency || 'EUR',\n    }).format(amount);\n  };\n\n  const getNewStatusColor = () => {\n    const remaining =\n      (props.batch.availableQuantity ?? 0) - form.value.quantity;\n    if (remaining <= 0) return 'grey';\n    return 'green';\n  };\n\n  const getNewStatusText = () => {\n    const remaining =\n      (props.batch.availableQuantity ?? 0) - form.value.quantity;\n    if (remaining <= 0) return t('batch.status.depleted');\n    return t('batch.status.active');\n  };\n\n  const onSubmit = async () => {\n    try {\n      loading.value = true;\n\n      // Create stock movement record\n      const stockMovement = {\n        productId: props.batch.productId,\n        locationId: props.batch.locationId,\n        batchId: props.batch.id,\n        movementType: 'consumption',\n        quantityChange: -form.value.quantity,\n        quantityBefore: props.batch.currentQuantity,\n        quantityAfter: props.batch.currentQuantity - form.value.quantity,\n        referenceType: 'manual_usage',\n        notes: form.value.notes,\n        reason: form.value.reason,\n      };\n\n      // Process the batch usage\n      // TODO: Implement processStockMovement in batchStore or use appropriate method\n      // await batchStore.processStockMovement(stockMovement);\n\n      $q.notify({\n        type: 'positive',\n        message: t('batch.batchUsedSuccessfully'),\n        actions: [\n          {\n            label: t('common.dismiss'),\n            color: 'white',\n          },\n        ],\n      });\n\n      emit('used', props.batch, form.value.quantity);\n    } catch (error) {\n      console.error('Failed to use batch:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToUseBatch'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n</script>\n\n<style scoped>\n  .use-batch-dialog {\n    min-width: 600px;\n    max-width: 800px;\n  }\n\n  @media (max-width: 768px) {\n    .use-batch-dialog {\n      min-width: 100%;\n    }\n  }\n\n  .batch-info {\n    background: rgba(0, 0, 0, 0.02);\n    border-radius: 8px;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\DemoResetCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\MagicInviteManager.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\TeamOverview.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11074, 11077], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11074, 11077], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11152, 11155], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11152, 11155], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 339,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 339,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11713, 11716], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11713, 11716], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <q-card class=\"team-overview-card\" flat bordered>\n    <q-card-section class=\"team-header\">\n      <div class=\"header-content\">\n        <div class=\"title-section\">\n          <q-icon name=\"group\" size=\"2rem\" color=\"primary\" />\n          <div>\n            <h3 class=\"section-title\">{{ $t('admin.teamOverview') }}</h3>\n            <p class=\"section-subtitle\">\n              {{ $t('admin.teamOverviewSubtitle') }}\n            </p>\n          </div>\n        </div>\n        <div class=\"header-stats\">\n          <div class=\"stat\">\n            <div class=\"stat-number\">{{ totalMembers }}</div>\n            <div class=\"stat-label\">{{ $t('admin.totalMembers') }}</div>\n          </div>\n          <div class=\"stat\">\n            <div class=\"stat-number\">{{ onlineMembers }}</div>\n            <div class=\"stat-label\">{{ $t('admin.onlineNow') }}</div>\n          </div>\n        </div>\n      </div>\n    </q-card-section>\n\n    <!-- Team Members List -->\n    <q-card-section class=\"team-list\">\n      <div v-if=\"loading\" class=\"loading-state\">\n        <q-spinner-dots size=\"2rem\" color=\"primary\" />\n        <p>{{ $t('admin.loadingTeam') }}</p>\n      </div>\n\n      <div v-else-if=\"teamMembers.length === 0\" class=\"empty-state\">\n        <q-icon name=\"group_off\" size=\"4rem\" color=\"grey-5\" />\n        <h4>{{ $t('admin.noTeamMembers') }}</h4>\n        <p>{{ $t('admin.noTeamMembersDescription') }}</p>\n      </div>\n\n      <div v-else class=\"members-grid\">\n        <q-card\n          v-for=\"member in teamMembers\"\n          :key=\"member.id\"\n          class=\"member-card\"\n          :class=\"{\n            online: member.isOnline,\n            offline: !member.isOnline,\n          }\"\n        >\n          <!-- Member Header -->\n          <q-card-section class=\"member-header\">\n            <div class=\"member-avatar\">\n              <q-avatar\n                size=\"48px\"\n                :color=\"member.avatarColor\"\n                text-color=\"white\"\n              >\n                <span v-if=\"!member.avatar_url\">{{ member.initials }}</span>\n                <img v-else :src=\"member.avatar_url\" />\n              </q-avatar>\n              <div\n                class=\"status-indicator\"\n                :class=\"{ online: member.isOnline }\"\n              ></div>\n            </div>\n            <div class=\"member-info\">\n              <h4 class=\"member-name\">{{ member.full_name }}</h4>\n              <div class=\"member-role\">\n                <q-chip\n                  :color=\"getRoleColor(member.role)\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                >\n                  {{ $t(`roles.${member.role}`) }}\n                </q-chip>\n              </div>\n              <div v-if=\"member.department\" class=\"member-department\">\n                <q-icon name=\"apartment\" size=\"sm\" />\n                <span>{{ member.department }}</span>\n              </div>\n            </div>\n            <div class=\"member-actions\">\n              <q-btn-dropdown\n                flat\n                round\n                icon=\"more_vert\"\n                size=\"sm\"\n                :disable=\"member.role === 'owner'\"\n              >\n                <q-list>\n                  <q-item clickable @click=\"viewMember(member)\">\n                    <q-item-section avatar>\n                      <q-icon name=\"visibility\" />\n                    </q-item-section>\n                    <q-item-section>{{\n                      $t('admin.viewProfile')\n                    }}</q-item-section>\n                  </q-item>\n                  <q-item clickable @click=\"editMember(member)\">\n                    <q-item-section avatar>\n                      <q-icon name=\"edit\" />\n                    </q-item-section>\n                    <q-item-section>{{\n                      $t('admin.editMember')\n                    }}</q-item-section>\n                  </q-item>\n                  <q-separator />\n                  <q-item\n                    clickable\n                    :class=\"{\n                      'text-negative': member.is_active,\n                      'text-positive': !member.is_active,\n                    }\"\n                    @click=\"toggleMemberStatus(member)\"\n                  >\n                    <q-item-section avatar>\n                      <q-icon\n                        :name=\"member.is_active ? 'person_off' : 'person'\"\n                      />\n                    </q-item-section>\n                    <q-item-section>\n                      {{\n                        member.is_active\n                          ? $t('admin.deactivate')\n                          : $t('admin.activate')\n                      }}\n                    </q-item-section>\n                  </q-item>\n                </q-list>\n              </q-btn-dropdown>\n            </div>\n          </q-card-section>\n\n          <!-- Login Methods -->\n          <q-card-section class=\"login-methods\">\n            <div class=\"methods-header\">\n              <q-icon name=\"login\" size=\"sm\" />\n              <span>{{ $t('admin.loginMethods') }}</span>\n            </div>\n            <div class=\"methods-list\">\n              <!-- Magic Code Method -->\n              <div\n                v-if=\"member.magic_code_enabled\"\n                class=\"method-item magic-code\"\n                @click=\"showPersonalCode(member)\"\n              >\n                <div class=\"method-icon\">\n                  <q-icon name=\"auto_awesome\" color=\"primary\" />\n                </div>\n                <div class=\"method-info\">\n                  <div class=\"method-name\">{{ $t('admin.magicCode') }}</div>\n                  <div class=\"method-detail\">\n                    {{ member.personal_magic_code || '🏥LOADING...' }}\n                  </div>\n                </div>\n                <q-btn\n                  flat\n                  round\n                  icon=\"content_copy\"\n                  size=\"sm\"\n                  :disable=\"!member.personal_magic_code\"\n                  @click.stop=\"copyMagicCode(member)\"\n                />\n              </div>\n\n              <!-- Email/Password Method -->\n              <div\n                v-if=\"member.email_login_enabled\"\n                class=\"method-item email-login\"\n              >\n                <div class=\"method-icon\">\n                  <q-icon name=\"email\" color=\"secondary\" />\n                </div>\n                <div class=\"method-info\">\n                  <div class=\"method-name\">{{ $t('admin.emailPassword') }}</div>\n                  <div class=\"method-detail\">{{ member.email }}</div>\n                </div>\n                <q-btn\n                  flat\n                  round\n                  icon=\"lock_reset\"\n                  size=\"sm\"\n                  @click=\"resetPassword(member)\"\n                />\n              </div>\n\n              <!-- Device Remember Method -->\n              <div\n                v-if=\"member.device_remember_enabled\"\n                class=\"method-item device-remember\"\n              >\n                <div class=\"method-icon\">\n                  <q-icon name=\"devices\" color=\"accent\" />\n                </div>\n                <div class=\"method-info\">\n                  <div class=\"method-name\">\n                    {{ $t('admin.deviceRemember') }}\n                  </div>\n                  <div class=\"method-detail\">\n                    {{\n                      $t('admin.trustedDevices', {\n                        count: member.device_tokens?.length || 0,\n                      })\n                    }}\n                  </div>\n                </div>\n                <q-btn\n                  flat\n                  round\n                  icon=\"manage_accounts\"\n                  size=\"sm\"\n                  @click=\"manageDevices(member)\"\n                />\n              </div>\n            </div>\n          </q-card-section>\n\n          <!-- Activity Information -->\n          <q-card-section class=\"member-activity\">\n            <div class=\"activity-grid\">\n              <div class=\"activity-stat\">\n                <q-icon name=\"schedule\" size=\"sm\" />\n                <div>\n                  <div class=\"stat-label\">{{ $t('admin.lastLogin') }}</div>\n                  <div class=\"stat-value\">\n                    {{ formatLastLogin(member.last_login_at || undefined) }}\n                  </div>\n                </div>\n              </div>\n              <div class=\"activity-stat\">\n                <q-icon name=\"trending_up\" size=\"sm\" />\n                <div>\n                  <div class=\"stat-label\">{{ $t('admin.loginCount') }}</div>\n                  <div class=\"stat-value\">{{ member.login_count || 0 }}</div>\n                </div>\n              </div>\n              <div class=\"activity-stat\">\n                <q-icon name=\"favorite_border\" size=\"sm\" />\n                <div>\n                  <div class=\"stat-label\">\n                    {{ $t('admin.preferredMethod') }}\n                  </div>\n                  <div class=\"stat-value\">\n                    {{ $t(`admin.${member.preferred_login_method}`) }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </q-card-section>\n\n          <!-- Quick Actions -->\n          <q-card-actions class=\"member-quick-actions\">\n            <q-btn\n              flat\n              :label=\"$t('admin.sendMessage')\"\n              icon=\"message\"\n              size=\"sm\"\n              @click=\"sendMessage(member)\"\n            />\n            <q-btn\n              flat\n              :label=\"$t('admin.viewSessions')\"\n              icon=\"history\"\n              size=\"sm\"\n              @click=\"viewSessions(member)\"\n            />\n          </q-card-actions>\n        </q-card>\n      </div>\n    </q-card-section>\n\n    <!-- Personal Code Dialog -->\n    <q-dialog v-model=\"showCodeDialog\">\n      <q-card style=\"min-width: 350px\">\n        <q-card-section>\n          <div class=\"text-h6\">{{ $t('admin.personalMagicCode') }}</div>\n          <div class=\"text-subtitle2\">{{ selectedMember?.full_name }}</div>\n        </q-card-section>\n\n        <q-card-section class=\"text-center\">\n          <div class=\"magic-code-display\">\n            <div class=\"code-text\">\n              {{ selectedMember?.personal_magic_code }}\n            </div>\n            <q-btn\n              flat\n              icon=\"content_copy\"\n              :label=\"$t('common.copy')\"\n              @click=\"copyMagicCode(selectedMember)\"\n            />\n          </div>\n          <p class=\"code-explanation\">\n            {{ $t('admin.magicCodeExplanation') }}\n          </p>\n        </q-card-section>\n\n        <q-card-actions align=\"right\">\n          <q-btn v-close-popup flat :label=\"$t('common.close')\" />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </q-card>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import {\n    PermanentUserService,\n    type EnhancedPermanentUser,\n  } from 'src/services/permanentUsers';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // State\n  const loading = ref(true);\n  const teamMembers = ref<any[]>([]);\n  const showCodeDialog = ref(false);\n  const selectedMember = ref<any>(null);\n\n  // Computed\n  const totalMembers = computed(() => teamMembers.value.length);\n  const onlineMembers = computed(\n    () => teamMembers.value.filter(m => m.isOnline).length\n  );\n\n  // Methods\n  const loadTeamMembers = async () => {\n    loading.value = true;\n    try {\n      // Mock practice ID - in real app, get from auth store\n      const practiceId = 'mock-practice-id';\n      const members = await PermanentUserService.getPracticeTeam(practiceId);\n\n      // Enhance members with additional UI data\n      teamMembers.value = members.map((member: any) => ({\n        ...member,\n        initials: getInitials(member.full_name || ''),\n        avatarColor: getAvatarColor(member.full_name || ''),\n        isOnline: isRecentlyActive(member.last_login_at),\n      }));\n    } catch (error) {\n      console.error('Error loading team members:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('admin.loadTeamError'),\n        position: 'top-right',\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const getInitials = (fullName: string): string => {\n    return fullName\n      .split(' ')\n      .map(name => name.charAt(0))\n      .join('')\n      .toUpperCase()\n      .substring(0, 2);\n  };\n\n  const getAvatarColor = (fullName: string): string => {\n    const colors = [\n      'primary',\n      'secondary',\n      'accent',\n      'positive',\n      'negative',\n      'info',\n      'warning',\n    ];\n    const index = fullName.charCodeAt(0) % colors.length;\n    return colors[index] || 'primary';\n  };\n\n  const isRecentlyActive = (lastLogin?: string): boolean => {\n    if (!lastLogin) {\n      return false;\n    }\n    const lastLoginDate = new Date(lastLogin);\n    const now = new Date();\n    const diffInMinutes =\n      (now.getTime() - lastLoginDate.getTime()) / (1000 * 60);\n    return diffInMinutes < 30; // Online if active in last 30 minutes\n  };\n\n  const getRoleColor = (role: string): string => {\n    const roleColors: Record<string, string> = {\n      owner: 'red',\n      admin: 'purple',\n      manager: 'indigo',\n      assistant: 'blue',\n      member: 'teal',\n    };\n    return roleColors[role] || 'grey';\n  };\n\n  const formatLastLogin = (lastLogin?: string): string => {\n    if (!lastLogin) {\n      return t('admin.never');\n    }\n\n    const date = new Date(lastLogin);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n    if (diffInHours < 1) {\n      const minutes = Math.floor(diffInHours * 60);\n      return t('admin.minutesAgo', { count: minutes });\n    } else if (diffInHours < 24) {\n      const hours = Math.floor(diffInHours);\n      return t('admin.hoursAgo', { count: hours });\n    } else {\n      const days = Math.floor(diffInHours / 24);\n      return t('admin.daysAgo', { count: days });\n    }\n  };\n\n  // Actions\n  const viewMember = (member: EnhancedPermanentUser) => {\n    // Viewing member details\n    // TODO: Implement member profile view\n  };\n\n  const editMember = (member: EnhancedPermanentUser) => {\n    // Editing member\n    // TODO: Implement member editing\n  };\n\n  const toggleMemberStatus = async (member: EnhancedPermanentUser) => {\n    try {\n      const action = member.is_active ? 'deactivate' : 'activate';\n      const confirmed = await new Promise(resolve => {\n        $q.dialog({\n          title: t(\n            `admin.confirm${action.charAt(0).toUpperCase() + action.slice(1)}`\n          ),\n          message: t(\n            `admin.confirm${\n              action.charAt(0).toUpperCase() + action.slice(1)\n            }Message`,\n            { name: member.full_name }\n          ),\n          cancel: true,\n          persistent: true,\n        })\n          .onOk(() => resolve(true))\n          .onCancel(() => resolve(false));\n      });\n\n      if (confirmed) {\n        // TODO: Implement status toggle\n        member.is_active = !member.is_active;\n        $q.notify({\n          type: 'positive',\n          message: t(`admin.${action}Success`, { name: member.full_name }),\n          position: 'top-right',\n        });\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('admin.statusChangeError'),\n        position: 'top-right',\n      });\n    }\n  };\n\n  const showPersonalCode = (member: EnhancedPermanentUser) => {\n    selectedMember.value = member;\n    showCodeDialog.value = true;\n  };\n\n  const copyMagicCode = async (member: EnhancedPermanentUser | null) => {\n    if (!member?.personal_magic_code) {\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(member.personal_magic_code);\n      $q.notify({\n        type: 'positive',\n        message: t('admin.codeCopied'),\n        position: 'top-right',\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('admin.copyError'),\n        position: 'top-right',\n      });\n    }\n  };\n\n  const resetPassword = (member: EnhancedPermanentUser) => {\n    // Reset password for member\n    // TODO: Implement password reset\n  };\n\n  const manageDevices = (member: EnhancedPermanentUser) => {\n    // Manage devices for member\n    // TODO: Implement device management\n  };\n\n  const sendMessage = (member: EnhancedPermanentUser) => {\n    // Send message to member\n    // TODO: Implement messaging\n  };\n\n  const viewSessions = (member: EnhancedPermanentUser) => {\n    // View sessions for member\n    // TODO: Implement session history\n  };\n\n  onMounted(() => {\n    loadTeamMembers();\n  });\n</script>\n\n<style scoped lang=\"scss\">\n  .team-overview-card {\n    .team-header {\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n\n      .header-content {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        .title-section {\n          display: flex;\n          align-items: center;\n          gap: 1rem;\n\n          .section-title {\n            margin: 0;\n            color: #1976d2;\n            font-size: 1.5rem;\n          }\n\n          .section-subtitle {\n            margin: 0;\n            color: #666;\n          }\n        }\n\n        .header-stats {\n          display: flex;\n          gap: 2rem;\n\n          .stat {\n            text-align: center;\n\n            .stat-number {\n              font-size: 1.5rem;\n              font-weight: 600;\n              color: #1976d2;\n            }\n\n            .stat-label {\n              font-size: 0.9rem;\n              color: #666;\n            }\n          }\n        }\n      }\n    }\n\n    .team-list {\n      .loading-state,\n      .empty-state {\n        text-align: center;\n        padding: 3rem;\n        color: #666;\n\n        h4 {\n          margin: 1rem 0 0.5rem;\n        }\n\n        p {\n          margin: 0;\n        }\n      }\n\n      .members-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\n        gap: 1.5rem;\n\n        .member-card {\n          border-radius: 12px;\n          border: 2px solid transparent;\n          transition: all 0.3s ease;\n\n          &.online {\n            border-color: #4caf50;\n            box-shadow: 0 2px 12px rgba(76, 175, 80, 0.15);\n          }\n\n          &:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n          }\n\n          .member-header {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n            padding: 1rem;\n\n            .member-avatar {\n              position: relative;\n\n              .status-indicator {\n                position: absolute;\n                bottom: 0;\n                right: 0;\n                width: 12px;\n                height: 12px;\n                border-radius: 50%;\n                background: #ccc;\n                border: 2px solid white;\n\n                &.online {\n                  background: #4caf50;\n                }\n              }\n            }\n\n            .member-info {\n              flex: 1;\n\n              .member-name {\n                margin: 0 0 0.25rem;\n                font-size: 1.1rem;\n                color: #1976d2;\n              }\n\n              .member-role {\n                margin-bottom: 0.25rem;\n              }\n\n              .member-department {\n                display: flex;\n                align-items: center;\n                gap: 0.25rem;\n                color: #666;\n                font-size: 0.9rem;\n              }\n            }\n          }\n\n          .login-methods {\n            padding: 0 1rem 1rem;\n\n            .methods-header {\n              display: flex;\n              align-items: center;\n              gap: 0.5rem;\n              margin-bottom: 0.75rem;\n              color: #666;\n              font-weight: 500;\n              font-size: 0.9rem;\n            }\n\n            .methods-list {\n              .method-item {\n                display: flex;\n                align-items: center;\n                gap: 0.75rem;\n                padding: 0.5rem;\n                border-radius: 8px;\n                margin-bottom: 0.5rem;\n                cursor: pointer;\n                transition: background-color 0.2s;\n\n                &:hover {\n                  background: #f5f5f5;\n                }\n\n                .method-icon {\n                  width: 32px;\n                  display: flex;\n                  justify-content: center;\n                }\n\n                .method-info {\n                  flex: 1;\n\n                  .method-name {\n                    font-weight: 500;\n                    font-size: 0.9rem;\n                  }\n\n                  .method-detail {\n                    color: #666;\n                    font-size: 0.8rem;\n                    font-family: monospace;\n                  }\n                }\n              }\n            }\n          }\n\n          .member-activity {\n            padding: 0 1rem 1rem;\n\n            .activity-grid {\n              display: grid;\n              grid-template-columns: repeat(3, 1fr);\n              gap: 1rem;\n\n              .activity-stat {\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n\n                .stat-label {\n                  font-size: 0.8rem;\n                  color: #666;\n                }\n\n                .stat-value {\n                  font-size: 0.9rem;\n                  font-weight: 500;\n                }\n              }\n            }\n          }\n\n          .member-quick-actions {\n            padding: 0.5rem 1rem 1rem;\n            justify-content: space-between;\n          }\n        }\n      }\n    }\n\n    .magic-code-display {\n      background: #f5f5f5;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-bottom: 1rem;\n\n      .code-text {\n        font-size: 1.5rem;\n        font-weight: 600;\n        color: #1976d2;\n        font-family: monospace;\n        margin-bottom: 0.5rem;\n      }\n    }\n\n    .code-explanation {\n      color: #666;\n      font-size: 0.9rem;\n      line-height: 1.4;\n    }\n  }\n\n  @media (max-width: 768px) {\n    .team-overview-card {\n      .team-header .header-content {\n        flex-direction: column;\n        gap: 1rem;\n        text-align: center;\n      }\n\n      .members-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\auth\\UpgradeToMemberDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 264,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 264,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9230, 9233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9230, 9233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 265,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 265,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9249, 9252], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9249, 9252], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 271,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 271,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9403, 9406], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9403, 9406], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <q-dialog\n    v-model=\"showDialog\"\n    persistent\n    maximized\n    transition-show=\"slide-up\"\n    transition-hide=\"slide-down\"\n    class=\"upgrade-dialog\"\n  >\n    <q-card class=\"upgrade-card\">\n      <!-- Header -->\n      <q-card-section class=\"upgrade-header text-center\">\n        <div class=\"celebration-icon\">\n          <q-icon name=\"celebration\" size=\"4rem\" color=\"primary\" />\n        </div>\n        <h2 class=\"upgrade-title\">{{ $t('upgrade.welcomeToTeam') }}</h2>\n        <p class=\"upgrade-subtitle\">\n          {{\n            $t('upgrade.subtitle', {\n              role: invite.target_role,\n              practice: practice.name,\n            })\n          }}\n        </p>\n        <div class=\"upgrade-benefits\">\n          <div class=\"benefit\">\n            <q-icon name=\"check_circle\" color=\"positive\" />\n            <span>{{ $t('upgrade.benefit1') }}</span>\n          </div>\n          <div class=\"benefit\">\n            <q-icon name=\"check_circle\" color=\"positive\" />\n            <span>{{ $t('upgrade.benefit2') }}</span>\n          </div>\n          <div class=\"benefit\">\n            <q-icon name=\"check_circle\" color=\"positive\" />\n            <span>{{ $t('upgrade.benefit3') }}</span>\n          </div>\n        </div>\n      </q-card-section>\n\n      <!-- Options -->\n      <q-card-section class=\"upgrade-options\">\n        <div class=\"options-grid\">\n          <!-- Option 1: Personal Magic Code -->\n          <q-card\n            class=\"option-card magic-code-option\"\n            :class=\"{ selected: selectedOption === 'magic_code' }\"\n            clickable\n            @click=\"selectOption('magic_code')\"\n          >\n            <q-card-section class=\"text-center\">\n              <div class=\"option-icon\">\n                <q-icon name=\"auto_awesome\" size=\"3rem\" color=\"primary\" />\n              </div>\n              <h3 class=\"option-title\">{{ $t('upgrade.magicCodeTitle') }}</h3>\n              <p class=\"option-description\">\n                {{ $t('upgrade.magicCodeDescription') }}\n              </p>\n\n              <!-- Preview -->\n              <div class=\"code-preview\">\n                <div class=\"preview-label\">\n                  {{ $t('upgrade.yourPersonalCode') }}\n                </div>\n                <div class=\"preview-code\">{{ previewMagicCode }}</div>\n              </div>\n\n              <!-- Benefits -->\n              <div class=\"option-benefits\">\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"flash_on\" size=\"sm\" color=\"orange\" />\n                  <span>{{ $t('upgrade.magicBenefit1') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"memory\" size=\"sm\" color=\"blue\" />\n                  <span>{{ $t('upgrade.magicBenefit2') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"devices\" size=\"sm\" color=\"green\" />\n                  <span>{{ $t('upgrade.magicBenefit3') }}</span>\n                </div>\n              </div>\n            </q-card-section>\n            <q-card-section class=\"option-footer\">\n              <q-btn\n                :label=\"$t('upgrade.chooseThis')\"\n                color=\"primary\"\n                unelevated\n                class=\"full-width\"\n                :class=\"{ 'selected-btn': selectedOption === 'magic_code' }\"\n              />\n            </q-card-section>\n          </q-card>\n\n          <!-- Option 2: Email + Password -->\n          <q-card\n            class=\"option-card email-option\"\n            :class=\"{ selected: selectedOption === 'email_password' }\"\n            clickable\n            @click=\"selectOption('email_password')\"\n          >\n            <q-card-section class=\"text-center\">\n              <div class=\"option-icon\">\n                <q-icon name=\"email\" size=\"3rem\" color=\"secondary\" />\n              </div>\n              <h3 class=\"option-title\">{{ $t('upgrade.emailTitle') }}</h3>\n              <p class=\"option-description\">\n                {{ $t('upgrade.emailDescription') }}\n              </p>\n\n              <!-- Form Preview -->\n              <div\n                v-if=\"selectedOption === 'email_password'\"\n                class=\"form-preview\"\n              >\n                <q-input\n                  v-model=\"emailForm.email\"\n                  :label=\"$t('upgrade.yourEmail')\"\n                  outlined\n                  dense\n                  class=\"q-mb-sm\"\n                />\n                <q-input\n                  v-model=\"emailForm.password\"\n                  :label=\"$t('upgrade.choosePassword')\"\n                  type=\"password\"\n                  outlined\n                  dense\n                />\n              </div>\n\n              <!-- Benefits -->\n              <div class=\"option-benefits\">\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"security\" size=\"sm\" color=\"green\" />\n                  <span>{{ $t('upgrade.emailBenefit1') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"familiar\" size=\"sm\" color=\"blue\" />\n                  <span>{{ $t('upgrade.emailBenefit2') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"sync\" size=\"sm\" color=\"purple\" />\n                  <span>{{ $t('upgrade.emailBenefit3') }}</span>\n                </div>\n              </div>\n            </q-card-section>\n            <q-card-section class=\"option-footer\">\n              <q-btn\n                :label=\"$t('upgrade.chooseThis')\"\n                color=\"secondary\"\n                unelevated\n                class=\"full-width\"\n                :class=\"{ 'selected-btn': selectedOption === 'email_password' }\"\n              />\n            </q-card-section>\n          </q-card>\n\n          <!-- Option 3: Device Remember -->\n          <q-card\n            class=\"option-card device-option\"\n            :class=\"{ selected: selectedOption === 'device_remember' }\"\n            clickable\n            @click=\"selectOption('device_remember')\"\n          >\n            <q-card-section class=\"text-center\">\n              <div class=\"option-icon\">\n                <q-icon name=\"devices\" size=\"3rem\" color=\"accent\" />\n              </div>\n              <h3 class=\"option-title\">{{ $t('upgrade.deviceTitle') }}</h3>\n              <p class=\"option-description\">\n                {{ $t('upgrade.deviceDescription') }}\n              </p>\n\n              <!-- Device Info -->\n              <div class=\"device-info\">\n                <div class=\"device-name\">{{ deviceInfo.name }}</div>\n                <div class=\"device-type\">{{ deviceInfo.type }}</div>\n              </div>\n\n              <!-- Benefits -->\n              <div class=\"option-benefits\">\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"bolt\" size=\"sm\" color=\"orange\" />\n                  <span>{{ $t('upgrade.deviceBenefit1') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"lock\" size=\"sm\" color=\"green\" />\n                  <span>{{ $t('upgrade.deviceBenefit2') }}</span>\n                </div>\n                <div class=\"mini-benefit\">\n                  <q-icon name=\"refresh\" size=\"sm\" color=\"blue\" />\n                  <span>{{ $t('upgrade.deviceBenefit3') }}</span>\n                </div>\n              </div>\n            </q-card-section>\n            <q-card-section class=\"option-footer\">\n              <q-btn\n                :label=\"$t('upgrade.chooseThis')\"\n                color=\"accent\"\n                unelevated\n                class=\"full-width\"\n                :class=\"{\n                  'selected-btn': selectedOption === 'device_remember',\n                }\"\n              />\n            </q-card-section>\n          </q-card>\n        </div>\n      </q-card-section>\n\n      <!-- Name Input (Always Required) -->\n      <q-card-section class=\"name-section\">\n        <div class=\"name-input-container\">\n          <q-input\n            v-model=\"userName\"\n            :label=\"$t('upgrade.yourFullName')\"\n            outlined\n            size=\"lg\"\n            class=\"name-input\"\n            :rules=\"[val => !!val || $t('upgrade.nameRequired')]\"\n          >\n            <template #prepend>\n              <q-icon name=\"person\" />\n            </template>\n          </q-input>\n        </div>\n      </q-card-section>\n\n      <!-- Actions -->\n      <q-card-actions class=\"upgrade-actions\">\n        <div class=\"actions-container\">\n          <q-btn\n            :label=\"$t('upgrade.createAccount')\"\n            color=\"primary\"\n            size=\"lg\"\n            unelevated\n            :loading=\"creating\"\n            :disable=\"!canCreate\"\n            class=\"create-btn\"\n            @click=\"createPermanentAccount\"\n          />\n          <q-btn\n            :label=\"$t('upgrade.stayGuest')\"\n            flat\n            color=\"grey-7\"\n            class=\"guest-btn\"\n            @click=\"continueAsGuest\"\n          />\n        </div>\n      </q-card-actions>\n    </q-card>\n  </q-dialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n\n  // Props & Emits\n  interface Props {\n    modelValue: boolean;\n    invite: any;\n    practice: any;\n  }\n\n  const props = defineProps<Props>();\n  const emit = defineEmits<{\n    'update:modelValue': [value: boolean];\n    'upgrade-completed': [result: any];\n    'continue-as-guest': [];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // State\n  const showDialog = computed({\n    get: () => props.modelValue,\n    set: value => emit('update:modelValue', value),\n  });\n\n  const selectedOption = ref('magic_code'); // Default to magic code\n  const userName = ref('');\n  const creating = ref(false);\n\n  // Email form data\n  const emailForm = ref({\n    email: '',\n    password: '',\n  });\n\n  // Device info\n  const deviceInfo = ref({\n    name: t('device.thisDevice'),\n    type: t('device.unknown'),\n  });\n\n  // Computed\n  const previewMagicCode = computed(() => {\n    if (!userName.value) {\n      return t('upgrade.previewCode');\n    }\n    const parts = userName.value.split(' ');\n    const cleanName = (parts[0] ?? '').toUpperCase().replace(/[^A-Z]/g, '');\n    return `🏥${cleanName}2024`;\n  });\n\n  const canCreate = computed(() => {\n    if (!userName.value) {\n      return false;\n    }\n\n    if (selectedOption.value === 'email_password') {\n      return emailForm.value.email && emailForm.value.password.length >= 6;\n    }\n\n    return true;\n  });\n\n  // Methods\n  const selectOption = (option: string) => {\n    selectedOption.value = option;\n  };\n\n  const createPermanentAccount = async () => {\n    creating.value = true;\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const accountData = {\n        name: userName.value,\n        method: selectedOption.value,\n        personalCode:\n          selectedOption.value === 'magic_code' ? previewMagicCode.value : null,\n        email:\n          selectedOption.value === 'email_password'\n            ? emailForm.value.email\n            : null,\n      };\n\n      emit('upgrade-completed', accountData);\n      showDialog.value = false;\n\n      $q.notify({\n        type: 'positive',\n        message: t('upgrade.accountCreated'),\n        position: 'top-right',\n        timeout: 5000,\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('upgrade.createError'),\n        position: 'top-right',\n      });\n    } finally {\n      creating.value = false;\n    }\n  };\n\n  const continueAsGuest = () => {\n    emit('continue-as-guest');\n    showDialog.value = false;\n  };\n\n  const detectDevice = () => {\n    const userAgent = navigator.userAgent;\n    let deviceName = 'Deze browser';\n    let deviceType = 'Desktop';\n\n    if (/iPhone|iPad|iPod/.test(userAgent)) {\n      deviceType = 'iOS';\n      deviceName = /iPad/.test(userAgent) ? 'iPad' : 'iPhone';\n    } else if (/Android/.test(userAgent)) {\n      deviceType = 'Android';\n      deviceName = 'Android apparaat';\n    } else if (/Mac/.test(userAgent)) {\n      deviceName = 'Mac';\n    } else if (/Windows/.test(userAgent)) {\n      deviceName = 'Windows PC';\n    }\n\n    deviceInfo.value = { name: deviceName, type: deviceType };\n  };\n\n  onMounted(() => {\n    detectDevice();\n  });\n</script>\n\n<style scoped lang=\"scss\">\n  .upgrade-dialog {\n    .upgrade-card {\n      width: 100%;\n      max-width: 1200px;\n      margin: 0 auto;\n\n      .upgrade-header {\n        background: linear-gradient(135deg, #1976d2, #42a5f5);\n        color: white;\n        padding: 3rem 2rem;\n\n        .celebration-icon {\n          margin-bottom: 1rem;\n        }\n\n        .upgrade-title {\n          margin: 0 0 1rem;\n          font-size: 2.5rem;\n          font-weight: 700;\n        }\n\n        .upgrade-subtitle {\n          font-size: 1.2rem;\n          margin: 0 0 2rem;\n          opacity: 0.9;\n        }\n\n        .upgrade-benefits {\n          display: flex;\n          justify-content: center;\n          gap: 2rem;\n          flex-wrap: wrap;\n\n          .benefit {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            font-weight: 500;\n          }\n        }\n      }\n\n      .upgrade-options {\n        padding: 3rem 2rem;\n\n        .options-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n          gap: 2rem;\n          max-width: 1000px;\n          margin: 0 auto;\n\n          .option-card {\n            border: 2px solid transparent;\n            transition: all 0.3s ease;\n            cursor: pointer;\n            min-height: 400px;\n            display: flex;\n            flex-direction: column;\n\n            &:hover {\n              transform: translateY(-4px);\n              box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n            }\n\n            &.selected {\n              border-color: #1976d2;\n              transform: translateY(-4px);\n              box-shadow: 0 8px 25px rgba(25, 118, 210, 0.3);\n            }\n\n            .option-icon {\n              margin-bottom: 1rem;\n            }\n\n            .option-title {\n              margin: 0 0 1rem;\n              color: #1976d2;\n              font-size: 1.3rem;\n            }\n\n            .option-description {\n              color: #666;\n              margin: 0 0 1.5rem;\n              line-height: 1.5;\n            }\n\n            .code-preview {\n              background: #f5f5f5;\n              border-radius: 8px;\n              padding: 1rem;\n              margin-bottom: 1.5rem;\n\n              .preview-label {\n                font-size: 0.9rem;\n                color: #666;\n                margin-bottom: 0.5rem;\n              }\n\n              .preview-code {\n                font-size: 1.5rem;\n                font-weight: 600;\n                color: #1976d2;\n                font-family: monospace;\n              }\n            }\n\n            .form-preview {\n              margin-bottom: 1.5rem;\n            }\n\n            .device-info {\n              background: #f5f5f5;\n              border-radius: 8px;\n              padding: 1rem;\n              margin-bottom: 1.5rem;\n\n              .device-name {\n                font-weight: 600;\n                color: #1976d2;\n              }\n\n              .device-type {\n                font-size: 0.9rem;\n                color: #666;\n              }\n            }\n\n            .option-benefits {\n              .mini-benefit {\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                margin-bottom: 0.5rem;\n                font-size: 0.9rem;\n                color: #666;\n              }\n            }\n\n            .option-footer {\n              margin-top: auto;\n\n              .selected-btn {\n                background: #1976d2;\n                color: white;\n              }\n            }\n          }\n        }\n      }\n\n      .name-section {\n        background: #f8f9fa;\n        padding: 2rem;\n\n        .name-input-container {\n          max-width: 400px;\n          margin: 0 auto;\n\n          .name-input {\n            :deep(.q-field__control) {\n              height: 60px;\n              font-size: 1.1rem;\n            }\n          }\n        }\n      }\n\n      .upgrade-actions {\n        padding: 2rem;\n        background: white;\n\n        .actions-container {\n          display: flex;\n          flex-direction: column;\n          gap: 1rem;\n          max-width: 400px;\n          margin: 0 auto;\n\n          .create-btn {\n            height: 60px;\n            font-size: 1.1rem;\n            font-weight: 600;\n            border-radius: 12px;\n          }\n\n          .guest-btn {\n            padding: 1rem;\n          }\n        }\n      }\n    }\n  }\n\n  @media (max-width: 768px) {\n    .upgrade-dialog {\n      .upgrade-card {\n        .upgrade-header {\n          padding: 2rem 1rem;\n\n          .upgrade-title {\n            font-size: 2rem;\n          }\n\n          .upgrade-benefits {\n            flex-direction: column;\n            gap: 1rem;\n          }\n        }\n\n        .upgrade-options {\n          padding: 2rem 1rem;\n\n          .options-grid {\n            grid-template-columns: 1fr;\n            gap: 1.5rem;\n          }\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\BaseDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-modal\" should go before \"@update:model-value\".",
        "line": 15,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 15,
        "endColumn": 22,
        "fix": {
          "range": [378, 456],
          "text": "aria-modal=\"true\"\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'title' requires default value to be set.",
        "line": 179,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 179,
        "endColumn": 20
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 182,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 182,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 185,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 185,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'headerClass' requires default value to be set.",
        "line": 215,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 215,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'contentClass' requires default value to be set.",
        "line": 218,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 218,
        "endColumn": 38
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'footerClass' requires default value to be set.",
        "line": 221,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 221,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'dialogClass' requires default value to be set.",
        "line": 224,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 224,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'loadingText' requires default value to be set.",
        "line": 242,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 242,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'primaryAction' requires default value to be set.",
        "line": 248,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 248,
        "endColumn": 34
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'secondaryAction' requires default value to be set.",
        "line": 251,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 251,
        "endColumn": 36
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'steps' requires default value to be set.",
        "line": 257,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 257,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'confirmCloseMessage' requires default value to be set.",
        "line": 272,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 272,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\n  <q-dialog\n    :model-value=\"modelValue\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\"\n    role=\"dialog\"\n    :aria-labelledby=\"titleId\"\n    :aria-describedby=\"subtitleId\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    aria-modal=\"true\"\n    @show=\"onShow\"\n    @hide=\"onHide\"\n    @escape-key=\"onEscapeKey\"\n  >\n    <div ref=\"dialogRef\" :class=\"cardClasses\" @keydown=\"onKeyDown\">\n      <!-- Loading Overlay -->\n      <div v-if=\"loading\" class=\"dlg__loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n        <p class=\"loading-text\">{{ loadingText || $t('common.loading') }}</p>\n      </div>\n\n      <!-- Step Indicator (for multi-step dialogs) -->\n      <div v-if=\"showSteps && steps && steps.length > 1\" class=\"dialog-steps\">\n        <div class=\"steps-container\">\n          <div\n            v-for=\"(step, index) in steps\"\n            :key=\"index\"\n            :class=\"[\n              'step-item',\n              {\n                'step-active': index === currentStep,\n                'step-completed': index < currentStep,\n                'step-disabled': index > currentStep,\n              },\n            ]\"\n          >\n            <div class=\"step-indicator\">\n              <q-icon\n                v-if=\"index < currentStep\"\n                name=\"check\"\n                class=\"icon-size-sm\"\n              />\n              <span v-else>{{ index + 1 }}</span>\n            </div>\n            <span class=\"step-label\">{{ step.label }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dialog Header -->\n      <header\n        v-if=\"hasHeader\"\n        class=\"dlg__header\"\n        :class=\"[headerClass, headerVariantClass, statusColorClass]\"\n      >\n        <template v-if=\"slots.header\">\n          <slot name=\"header\" />\n        </template>\n        <div v-else class=\"header-content\">\n          <div v-if=\"icon\" class=\"header-icon-container\">\n            <div class=\"header-icon\">\n              <q-icon :name=\"icon\" :size=\"iconSize\" />\n            </div>\n          </div>\n          <div class=\"header-text\">\n            <h1 :id=\"titleId\" class=\"dlg__title\">{{ title }}</h1>\n            <p v-if=\"subtitle\" :id=\"subtitleId\" class=\"dlg__subtitle\">\n              {{ subtitle }}\n            </p>\n          </div>\n          <q-btn\n            v-if=\"closable\"\n            flat\n            round\n            dense\n            icon=\"close\"\n            class=\"close-btn\"\n            :aria-label=\"$t('common.closeDialog') || 'Close dialog'\"\n            :disable=\"isCloseDisabled\"\n            @click=\"onClose\"\n          />\n        </div>\n      </header>\n\n      <!-- Dialog Content -->\n      <main class=\"dlg__body\" :class=\"contentClass\">\n        <slot />\n      </main>\n\n      <!-- Dialog Footer -->\n      <footer\n        v-if=\"hasActions || primaryAction || secondaryAction\"\n        class=\"dlg__footer\"\n        :class=\"footerClass\"\n      >\n        <!-- Custom Actions Slot -->\n        <div v-if=\"hasActions\" class=\"custom-actions\">\n          <slot name=\"actions\" :loading=\"loading\" :disabled=\"actionsDisabled\" />\n        </div>\n\n        <!-- Standard Actions -->\n        <div v-else class=\"standard-actions\">\n          <!-- Secondary Action -->\n          <q-btn\n            v-if=\"secondaryAction\"\n            :label=\"secondaryAction.label\"\n            :icon=\"secondaryAction.icon\"\n            :disable=\"isSecondaryDisabled\"\n            flat\n            @click=\"onSecondaryAction\"\n          />\n\n          <!-- Primary Action -->\n          <q-btn\n            v-if=\"primaryAction\"\n            :label=\"primaryAction.label\"\n            :icon=\"primaryAction.icon\"\n            :loading=\"primaryActionLoading\"\n            :disable=\"isPrimaryDisabled\"\n            unelevated\n            color=\"primary\"\n            @click=\"onPrimaryAction\"\n          />\n        </div>\n      </footer>\n    </div>\n  </q-dialog>\n</template>\n\n<script setup lang=\"ts\">\n  import {\n    computed,\n    useSlots,\n    ref,\n    nextTick,\n    onMounted,\n    onUnmounted,\n  } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n\n  /**\n   * BaseDialog Component - Enterprise-grade dialog system\n   *\n   * Features:\n   * - Responsive design (mobile fullscreen, desktop modal)\n   * - Keyboard navigation (Enter/Escape)\n   * - Loading states and async actions\n   * - Multi-step wizard support\n   * - Dirty state checking\n   * - Focus management\n   * - Status colors and variants\n   * - Consistent with app design system\n   */\n\n  interface DialogStep {\n    label: string;\n    completed?: boolean;\n  }\n\n  interface DialogAction {\n    label: string;\n    icon?: string;\n    class?: string;\n    disabled?: boolean;\n    loading?: boolean;\n  }\n\n  interface Props {\n    /** Dialog visibility state */\n    modelValue: boolean;\n\n    /** Dialog title */\n    title?: string;\n\n    /** Dialog subtitle */\n    subtitle?: string;\n\n    /** Header icon */\n    icon?: string;\n\n    /** Icon size */\n    iconSize?: string;\n\n    /** Prevent closing on backdrop click */\n    persistent?: boolean;\n\n    /** Force maximized state */\n    maximized?: boolean;\n\n    /** Prevent mobile fullscreen behavior */\n    preventMobileFullscreen?: boolean;\n\n    /** Dialog position */\n    position?: 'standard' | 'top' | 'right' | 'bottom' | 'left';\n\n    /** Full width dialog */\n    fullWidth?: boolean;\n\n    /** Show transition */\n    transitionShow?: string;\n\n    /** Hide transition */\n    transitionHide?: string;\n\n    /** Show close button */\n    closable?: boolean;\n\n    /** Header CSS classes */\n    headerClass?: string | string[];\n\n    /** Content CSS classes */\n    contentClass?: string | string[];\n\n    /** Footer CSS classes */\n    footerClass?: string | string[];\n\n    /** Dialog CSS classes */\n    dialogClass?: string | string[];\n\n    /** Visual variant */\n    variant?: 'standard' | 'modern' | 'glass' | 'elegant' | 'minimal';\n\n    /** Dialog size */\n    size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n\n    /** Header variant */\n    headerVariant?: 'gradient' | 'solid' | 'minimal' | 'glass';\n\n    /** Status color for header */\n    statusColor?: 'primary' | 'success' | 'warning' | 'danger' | 'info';\n\n    /** Loading state */\n    loading?: boolean;\n\n    /** Loading text */\n    loadingText?: string;\n\n    /** Disable all actions */\n    actionsDisabled?: boolean;\n\n    /** Primary action configuration */\n    primaryAction?: DialogAction;\n\n    /** Secondary action configuration */\n    secondaryAction?: DialogAction;\n\n    /** Primary action loading state */\n    primaryActionLoading?: boolean;\n\n    /** Steps for wizard dialogs */\n    steps?: DialogStep[];\n\n    /** Current step index */\n    currentStep?: number;\n\n    /** Show step indicator */\n    showSteps?: boolean;\n\n    /** Auto-focus first input */\n    autoFocus?: boolean;\n\n    /** Check for unsaved changes */\n    isDirty?: boolean;\n\n    /** Confirm close message */\n    confirmCloseMessage?: string;\n\n    /** Enable keyboard shortcuts */\n    keyboardShortcuts?: boolean;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'close'): void;\n    (e: 'primary-action'): void;\n    (e: 'secondary-action'): void;\n    (e: 'show'): void;\n    (e: 'hide'): void;\n    (e: 'escape'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    persistent: false,\n    maximized: false,\n    preventMobileFullscreen: false,\n    position: 'standard',\n    fullWidth: false,\n    transitionShow: 'jump-up',\n    transitionHide: 'jump-down',\n    closable: true,\n    iconSize: '24px',\n    variant: 'elegant',\n    size: 'md',\n    headerVariant: 'solid',\n    statusColor: 'primary',\n    loading: false,\n    actionsDisabled: false,\n    primaryActionLoading: false,\n    currentStep: 0,\n    showSteps: false,\n    autoFocus: true,\n    isDirty: false,\n    keyboardShortcuts: true,\n  });\n\n  const emit = defineEmits<Emits>();\n  const slots = useSlots();\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // Reactive references\n  const dialogRef = ref<HTMLElement>();\n\n  // Computed properties\n  const titleId = computed(\n    () => `dialog-title-${Math.random().toString(36).substr(2, 9)}`\n  );\n  const subtitleId = computed(\n    () => `dialog-subtitle-${Math.random().toString(36).substr(2, 9)}`\n  );\n\n  const isMobile = computed(() => $q.screen.lt.md);\n\n  const hasHeader = computed(\n    () => !!(props.title || props.subtitle || props.icon || slots.header)\n  );\n  const hasActions = computed(() => !!slots.actions);\n\n  const cardClasses = computed(() => {\n    const classes = ['dlg'];\n\n    // Size classes using new unified system\n    classes.push(`dlg--${props.size}`);\n\n    // Loading state\n    if (props.loading) {\n      classes.push('dlg--loading');\n    }\n\n    // Mobile fullscreen handled by CSS media queries\n    // No need for JavaScript-based mobile detection\n\n    return classes;\n  });\n\n  const headerVariantClass = computed(() => `header-${props.headerVariant}`);\n  const statusColorClass = computed(() => `header-${props.statusColor}`);\n  const iconVariantClass = computed(() => `icon-${props.headerVariant}`);\n\n  // Normalized disabled states for native buttons (boolean, not undefined)\n  const isCloseDisabled = computed(() =>\n    Boolean(props.loading || props.actionsDisabled)\n  );\n  const isPrimaryDisabled = computed(() =>\n    Boolean(\n      props.loading || props.actionsDisabled || props.primaryAction?.disabled\n    )\n  );\n  const isSecondaryDisabled = computed(() =>\n    Boolean(\n      props.loading || props.actionsDisabled || props.secondaryAction?.disabled\n    )\n  );\n\n  // Methods\n  const onShow = () => {\n    emit('show');\n\n    if (props.autoFocus) {\n      nextTick(() => {\n        focusFirstInput();\n      });\n    }\n  };\n\n  const onHide = () => {\n    emit('hide');\n  };\n\n  const onClose = async () => {\n    if (props.isDirty && props.confirmCloseMessage) {\n      const confirmed = await showConfirmDialog(props.confirmCloseMessage);\n      if (!confirmed) return;\n    }\n\n    emit('close');\n    emit('update:modelValue', false);\n  };\n\n  const onPrimaryAction = () => {\n    emit('primary-action');\n  };\n\n  const onSecondaryAction = () => {\n    emit('secondary-action');\n  };\n\n  const onEscapeKey = () => {\n    if (props.keyboardShortcuts && !props.persistent) {\n      emit('escape');\n      onClose();\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (!props.keyboardShortcuts || props.loading) return;\n\n    // Enter key - trigger primary action\n    if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      if (props.primaryAction && !props.primaryAction.disabled) {\n        onPrimaryAction();\n      }\n    }\n  };\n\n  const focusFirstInput = () => {\n    const firstInput = dialogRef.value?.querySelector(\n      'input, textarea, select, [tabindex=\"0\"]'\n    ) as HTMLElement;\n    if (firstInput) {\n      firstInput.focus();\n    }\n  };\n\n  const showConfirmDialog = (message: string): Promise<boolean> => {\n    return new Promise(resolve => {\n      $q.dialog({\n        title: t('common.confirmClose'),\n        message,\n        cancel: true,\n        persistent: true,\n      })\n        .onOk(() => {\n          resolve(true);\n        })\n        .onCancel(() => {\n          resolve(false);\n        });\n    });\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    // Add global keyboard listeners if needed\n  });\n\n  onUnmounted(() => {\n    // Cleanup global listeners\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // BASEDIALOG - USES UNIFIED DIALOG SYSTEM\n  // Component-specific styles only, shared styles in _dialogs.scss\n  // ===================================================================\n\n  // Step indicator for wizard dialogs\n  .dialog-steps {\n    background: var(--surface);\n    border-bottom: var(--dlg-border);\n    padding: var(--dlg-pad);\n\n    .steps-container {\n      display: flex;\n      justify-content: center;\n      gap: var(--dlg-gap);\n      max-width: 600px;\n      margin: 0 auto;\n\n      .step-item {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-size: 14px;\n        font-weight: 500;\n        color: var(--text-muted);\n        font-family: var(--font-family);\n\n        &.step-active {\n          color: var(--brand-primary);\n        }\n\n        &.step-completed {\n          color: var(--brand-success);\n        }\n\n        .step-indicator {\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          font-weight: 600;\n          background: var(--neutral-200);\n          color: var(--text-muted);\n          font-family: var(--font-family);\n        }\n\n        &.step-active .step-indicator {\n          background: var(--brand-primary);\n          color: white;\n        }\n\n        &.step-completed .step-indicator {\n          background: var(--brand-success);\n          color: white;\n        }\n      }\n    }\n\n    @media (max-width: 640px) {\n      .steps-container {\n        gap: 8px;\n\n        .step-label {\n          display: none;\n        }\n      }\n    }\n  }\n\n  // Header variant styles (colors only, layout handled by unified system)\n  .dlg__header {\n    // Header variants\n    &.header-gradient {\n      background: linear-gradient(\n        135deg,\n        var(--brand-primary) 0%,\n        var(--brand-primary-light) 100%\n      );\n      color: white;\n      border-bottom: none;\n    }\n\n    &.header-solid {\n      background: var(--brand-primary);\n      color: white;\n      border-bottom: none;\n    }\n\n    &.header-minimal {\n      background: transparent;\n      color: var(--text);\n    }\n\n    &.header-glass {\n      background: rgba(255, 255, 255, 0.8);\n      backdrop-filter: blur(12px);\n      color: var(--text);\n    }\n\n    // Status colors\n    &.header-success {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-success);\n      }\n    }\n\n    &.header-warning {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-warning);\n      }\n    }\n\n    &.header-danger {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-danger);\n      }\n    }\n\n    &.header-info {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-info);\n      }\n    }\n\n    .header-content {\n      .header-icon-container {\n        .header-icon {\n          background: rgba(255, 255, 255, 0.2);\n          color: currentColor;\n        }\n      }\n    }\n  }\n\n  // Dark mode adaptations for component-specific styles\n  body.body--dark {\n    .dialog-steps {\n      background: var(--surface);\n      border-bottom: var(--dlg-border);\n    }\n\n    .dlg__header {\n      &.header-minimal {\n        color: var(--text);\n      }\n\n      &.header-glass {\n        background: rgba(0, 0, 0, 0.8);\n        color: var(--text);\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\ConfirmDialog.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'details' requires default value to be set.",
        "line": 87,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 87,
        "endColumn": 22
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'warningText' requires default value to be set.",
        "line": 89,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 89,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'consequences' requires default value to be set.",
        "line": 90,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 90,
        "endColumn": 29
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'confirmButtonIcon' requires default value to be set.",
        "line": 95,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 95,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    persistent\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    @close=\"handleCancel\"\n  >\n    <!-- Message Content -->\n    <div class=\"confirm-dialog-content\">\n      <!-- Main message -->\n      <div class=\"message\">{{ message }}</div>\n\n      <!-- Additional details -->\n      <div v-if=\"details\" class=\"details\">{{ details }}</div>\n\n      <!-- Warning/Info content -->\n      <div v-if=\"type !== 'default'\" class=\"alert-section\">\n        <q-banner :class=\"alertClasses\" :icon=\"alertIcon\">\n          <div v-if=\"warningText\" class=\"alert-text\">{{ warningText }}</div>\n          <ul\n            v-if=\"consequences && consequences.length > 0\"\n            class=\"consequences-list\"\n          >\n            <li v-for=\"consequence in consequences\" :key=\"consequence\">\n              {{ consequence }}\n            </li>\n          </ul>\n        </q-banner>\n      </div>\n\n      <!-- Input field for verification -->\n      <div v-if=\"requiresTextConfirmation\" class=\"verification-section\">\n        <p class=\"verification-prompt\">{{ verificationPrompt }}</p>\n        <q-input\n          v-model=\"verificationText\"\n          :placeholder=\"verificationPlaceholder\"\n          outlined\n          dense\n          :error=\"verificationError\"\n          :error-message=\"verificationErrorMessage\"\n          @input=\"handleVerificationInput\"\n        />\n      </div>\n    </div>\n\n    <!-- Dialog Actions -->\n    <template #actions>\n      <div class=\"confirm-dialog-actions\">\n        <!-- Cancel button -->\n        <q-btn\n          :label=\"cancelButtonText\"\n          color=\"grey-7\"\n          flat\n          :disable=\"loading\"\n          @click=\"handleCancel\"\n        />\n\n        <!-- Confirm button -->\n        <q-btn\n          :label=\"confirmButtonText\"\n          :color=\"confirmButtonColor\"\n          :loading=\"loading\"\n          :disable=\"loading || !canConfirm\"\n          :icon=\"confirmButtonIcon\"\n          @click=\"handleConfirm\"\n        />\n      </div>\n    </template>\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import BaseDialog from './BaseDialog.vue';\n\n  interface Props {\n    modelValue: boolean;\n    title: string;\n    message: string;\n    details?: string;\n    type?: 'default' | 'warning' | 'danger' | 'info';\n    warningText?: string;\n    consequences?: string[];\n    loading?: boolean;\n    cancelButtonText?: string;\n    confirmButtonText?: string;\n    confirmButtonColor?: string;\n    confirmButtonIcon?: string;\n    size?: 'sm' | 'md' | 'lg';\n    requiresTextConfirmation?: boolean;\n    verificationPrompt?: string;\n    verificationPlaceholder?: string;\n    verificationMatch?: string;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'confirm'): void;\n    (e: 'cancel'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    type: 'default',\n    loading: false,\n    cancelButtonText: '',\n    confirmButtonText: '',\n    confirmButtonColor: 'primary',\n    size: 'sm',\n    requiresTextConfirmation: false,\n    verificationPrompt: '',\n    verificationPlaceholder: '',\n    verificationMatch: '',\n  });\n\n  const emit = defineEmits<Emits>();\n  const { t } = useI18n();\n\n  // Internal state\n  const verificationText = ref('');\n  const verificationError = ref(false);\n\n  // Computed properties\n  const icon = computed(() => {\n    if (props.type === 'warning') return 'warning';\n    if (props.type === 'danger') return 'error';\n    if (props.type === 'info') return 'info';\n    return 'help';\n  });\n\n  const alertIcon = computed(() => {\n    if (props.type === 'warning') return 'warning';\n    if (props.type === 'danger') return 'dangerous';\n    if (props.type === 'info') return 'info';\n    return 'help';\n  });\n\n  const alertClasses = computed(() => {\n    const classes = ['text-white'];\n    if (props.type === 'warning') classes.push('bg-warning');\n    if (props.type === 'danger') classes.push('bg-negative');\n    if (props.type === 'info') classes.push('bg-info');\n    return classes;\n  });\n\n  const computedCancelButtonText = computed(\n    () => props.cancelButtonText || t('common.cancel')\n  );\n\n  const computedConfirmButtonText = computed(() => {\n    if (props.confirmButtonText) return props.confirmButtonText;\n    if (props.type === 'danger') return t('common.delete');\n    return t('common.confirm');\n  });\n\n  const computedConfirmButtonColor = computed(() => {\n    if (props.confirmButtonColor !== 'primary') return props.confirmButtonColor;\n    if (props.type === 'danger') return 'negative';\n    if (props.type === 'warning') return 'warning';\n    return 'primary';\n  });\n\n  const verificationPrompt = computed(\n    () =>\n      props.verificationPrompt ||\n      t('common.typeToConfirm', { text: props.verificationMatch })\n  );\n\n  const verificationPlaceholder = computed(\n    () => props.verificationPlaceholder || props.verificationMatch\n  );\n\n  const verificationErrorMessage = computed(() =>\n    t('validation.textMustMatch', { text: props.verificationMatch })\n  );\n\n  const canConfirm = computed(() => {\n    if (props.requiresTextConfirmation) {\n      return (\n        verificationText.value === props.verificationMatch &&\n        !verificationError.value\n      );\n    }\n    return true;\n  });\n\n  const dialogVariant = computed(() => {\n    if (props.type === 'danger') return 'elegant';\n    if (props.type === 'warning') return 'modern';\n    return 'elegant';\n  });\n\n  const headerVariant = computed(() => {\n    if (props.type === 'danger') return 'gradient';\n    if (props.type === 'warning') return 'solid';\n    return 'gradient';\n  });\n\n  // Methods\n  const handleConfirm = () => {\n    if (canConfirm.value && !props.loading) {\n      emit('confirm');\n    }\n  };\n\n  const handleCancel = () => {\n    emit('cancel');\n    emit('update:modelValue', false);\n  };\n\n  const handleVerificationInput = () => {\n    if (props.requiresTextConfirmation && props.verificationMatch) {\n      verificationError.value =\n        verificationText.value !== props.verificationMatch &&\n        verificationText.value.length > 0;\n    }\n  };\n\n  // Reset verification when dialog opens/closes\n  watch(\n    () => props.modelValue,\n    newVal => {\n      if (newVal) {\n        verificationText.value = '';\n        verificationError.value = false;\n      }\n    }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // Confirm dialog styles\n  // ===================================================================\n\n  .confirm-dialog-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n\n    .message {\n      font-size: 18px;\n      line-height: 1.6;\n      color: var(--neutral-800);\n      font-weight: var(--font-weight-medium);\n      letter-spacing: -0.01em;\n    }\n\n    .details {\n      font-size: var(--text-base);\n      line-height: 1.5;\n      color: var(--neutral-600);\n      background: var(--neutral-50);\n      padding: var(--space-4);\n      border-radius: 12px;\n      border-left: 4px solid var(--brand-primary);\n    }\n\n    .alert-section {\n      :deep(.q-banner) {\n        border-radius: 16px;\n        padding: var(--space-5);\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        border: none;\n\n        &.bg-warning {\n          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n        }\n\n        &.bg-negative {\n          background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);\n        }\n\n        &.bg-info {\n          background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);\n        }\n      }\n\n      .alert-text {\n        font-weight: var(--font-weight-semibold);\n        font-size: var(--text-base);\n        margin-bottom: var(--space-3);\n        line-height: 1.5;\n      }\n\n      .consequences-list {\n        margin: 0;\n        padding-left: var(--space-5);\n\n        li {\n          margin-bottom: var(--space-2);\n          font-size: var(--text-sm);\n          line-height: 1.4;\n\n          &:last-child {\n            margin-bottom: 0;\n          }\n        }\n      }\n    }\n\n    .verification-section {\n      background: var(--neutral-50);\n      padding: var(--space-5);\n      border-radius: 16px;\n      border: 2px solid var(--neutral-200);\n\n      .verification-prompt {\n        font-size: var(--text-base);\n        color: var(--neutral-700);\n        margin-bottom: var(--space-4);\n        font-weight: var(--font-weight-medium);\n        line-height: 1.5;\n      }\n\n      // Field styling handled by global field system\n    }\n  }\n\n  .confirm-dialog-actions {\n    display: flex;\n    gap: var(--space-4);\n    justify-content: flex-end;\n    margin-top: var(--space-2);\n\n    :deep(.q-btn) {\n      min-width: 140px;\n      height: var(--control-height-md);\n      border-radius: 14px;\n      font-weight: var(--font-weight-semibold);\n      font-size: var(--text-base);\n      letter-spacing: 0.01em;\n      text-transform: none;\n      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n      &:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-lg);\n      }\n\n      &:active {\n        transform: translateY(0);\n      }\n\n      // Cancel button styling\n      &[color='grey-7'] {\n        background: var(--neutral-100);\n        color: var(--neutral-700);\n        border: 2px solid var(--neutral-200);\n\n        &:hover {\n          background: var(--neutral-200);\n          border-color: var(--neutral-300);\n        }\n      }\n\n      // Primary button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-primary {\n        background: linear-gradient(\n          135deg,\n          var(--brand-primary) 0%,\n          var(--brand-primary-light) 100%\n        );\n        box-shadow: var(--shadow-md);\n      }\n\n      // Danger button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-negative {\n        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);\n        box-shadow: var(--shadow-md);\n      }\n\n      // Warning button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-warning {\n        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n        box-shadow: var(--shadow-md);\n      }\n    }\n\n    @media (max-width: 640px) {\n      flex-direction: column-reverse;\n      gap: var(--space-3);\n\n      :deep(.q-btn) {\n        width: 100%;\n        min-width: auto;\n      }\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE ADAPTATIONS\n  // ===================================================================\n\n  body.body--dark {\n    .confirm-dialog-content {\n      .message {\n        color: var(--neutral-100);\n      }\n\n      .details {\n        color: var(--neutral-300);\n        background: var(--neutral-800);\n        border-left-color: var(--brand-primary-light);\n      }\n\n      .verification-section {\n        background: var(--neutral-800);\n        border-color: var(--neutral-700);\n\n        .verification-prompt {\n          color: var(--neutral-200);\n        }\n\n        :deep(.q-field) {\n          .q-field__control {\n            background: var(--neutral-900);\n            border-color: var(--neutral-600);\n            color: var(--neutral-100);\n\n            &:hover {\n              border-color: var(--brand-primary-light);\n            }\n          }\n\n          &.q-field--focused .q-field__control {\n            border-color: var(--brand-primary-light);\n            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);\n          }\n        }\n      }\n    }\n\n    .confirm-dialog-actions {\n      :deep(.q-btn) {\n        // Cancel button dark mode\n        &[color='grey-7'] {\n          background: var(--neutral-700);\n          color: var(--neutral-200);\n          border-color: var(--neutral-600);\n\n          &:hover {\n            background: var(--neutral-600);\n            border-color: var(--neutral-500);\n          }\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // ACCESSIBILITY ENHANCEMENTS\n  // ===================================================================\n\n  .confirm-dialog-content {\n    .verification-section {\n      :deep(.q-field) {\n        .q-field__control {\n          &:focus-within {\n            outline: 2px solid var(--brand-primary);\n            outline-offset: 2px;\n          }\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\FormDialog.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 96,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 96,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 97,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 97,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'submitButtonIcon' requires default value to be set.",
        "line": 107,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 107,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    :loading-text=\"loadingText\"\n    :persistent=\"persistent || loading\"\n    :closable=\"!loading\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    @close=\"handleClose\"\n  >\n    <!-- Form Content -->\n    <q-form\n      class=\"form-dialog-content\"\n      aria-live=\"polite\"\n      @submit=\"handleSubmit\"\n      @reset=\"handleReset\"\n    >\n      <slot />\n\n      <!-- Form validation errors summary -->\n      <div\n        v-if=\"showErrorSummary && formErrors.length > 0\"\n        class=\"dlg__error-summary\"\n        role=\"alert\"\n        aria-live=\"assertive\"\n      >\n        <div class=\"error-title\">\n          {{ $t('validation.formErrors') }}\n        </div>\n        <ul class=\"error-list\">\n          <li v-for=\"error in formErrors\" :key=\"error\">{{ error }}</li>\n        </ul>\n      </div>\n    </q-form>\n\n    <!-- Dialog Actions -->\n    <template #actions>\n      <div class=\"form-dialog-actions\">\n        <!-- Loading indicator -->\n        <div v-if=\"loading\" class=\"loading-indicator\">\n          <q-spinner-dots size=\"md\" />\n          <span class=\"loading-text\">{{ loadingText }}</span>\n        </div>\n\n        <!-- Action buttons -->\n        <div v-else class=\"action-buttons\">\n          <!-- Reset button -->\n          <q-btn\n            v-if=\"showResetButton\"\n            :label=\"resetButtonText\"\n            color=\"grey-7\"\n            flat\n            :disable=\"loading\"\n            @click=\"handleReset\"\n          />\n\n          <!-- Cancel button -->\n          <q-btn\n            :label=\"cancelButtonText\"\n            color=\"grey-7\"\n            flat\n            :disable=\"loading\"\n            @click=\"handleCancel\"\n          />\n\n          <!-- Submit button -->\n          <q-btn\n            :label=\"submitButtonText\"\n            unelevated\n            color=\"primary\"\n            :loading=\"loading\"\n            :disable=\"loading || !canSubmit\"\n            :icon=\"submitButtonIcon\"\n            @click=\"handleSubmit\"\n          />\n        </div>\n      </div>\n    </template>\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import BaseDialog from './BaseDialog.vue';\n\n  interface Props {\n    modelValue: boolean;\n    title: string;\n    subtitle?: string;\n    icon?: string;\n    size?: 'sm' | 'md' | 'lg' | 'xl';\n    persistent?: boolean;\n    loading?: boolean;\n    loadingText?: string;\n    showResetButton?: boolean;\n    resetButtonText?: string;\n    cancelButtonText?: string;\n    submitButtonText?: string;\n    submitButtonColor?: string;\n    submitButtonIcon?: string;\n    canSubmit?: boolean;\n    formErrors?: string[];\n    showErrorSummary?: boolean;\n    confirmBeforeClose?: boolean;\n    confirmCloseMessage?: string;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'submit'): void;\n    (e: 'cancel'): void;\n    (e: 'reset'): void;\n    (e: 'close'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    size: 'md',\n    persistent: false,\n    loading: false,\n    loadingText: 'Processing...',\n    showResetButton: false,\n    resetButtonText: '',\n    cancelButtonText: '',\n    submitButtonText: '',\n    submitButtonColor: 'primary',\n    canSubmit: true,\n    formErrors: () => [],\n    showErrorSummary: true,\n    confirmBeforeClose: false,\n    confirmCloseMessage: '',\n  });\n\n  const emit = defineEmits<Emits>();\n  const { t } = useI18n();\n\n  // Internal state\n  const hasUnsavedChanges = ref(false);\n\n  // Computed properties\n  const computedResetButtonText = computed(\n    () => props.resetButtonText || t('common.reset')\n  );\n\n  const computedCancelButtonText = computed(\n    () => props.cancelButtonText || t('common.cancel')\n  );\n\n  const computedSubmitButtonText = computed(\n    () => props.submitButtonText || t('common.save')\n  );\n\n  const computedConfirmCloseMessage = computed(\n    () => props.confirmCloseMessage || t('common.confirmClose')\n  );\n\n  const dialogVariant = computed(() => 'elegant' as const);\n  const headerVariant = computed(() => 'solid' as const);\n\n  // Methods\n  const handleSubmit = () => {\n    if (!props.loading && props.canSubmit) {\n      emit('submit');\n    }\n  };\n\n  const handleCancel = () => {\n    if (props.confirmBeforeClose && hasUnsavedChanges.value) {\n      confirmClose(() => {\n        emit('cancel');\n        emit('update:modelValue', false);\n      });\n    } else {\n      emit('cancel');\n      emit('update:modelValue', false);\n    }\n  };\n\n  const handleReset = () => {\n    emit('reset');\n    hasUnsavedChanges.value = false;\n  };\n\n  const handleClose = () => {\n    if (props.confirmBeforeClose && hasUnsavedChanges.value) {\n      confirmClose(() => {\n        emit('close');\n        emit('update:modelValue', false);\n      });\n    } else {\n      emit('close');\n      emit('update:modelValue', false);\n    }\n  };\n\n  const confirmClose = (onConfirm: () => void) => {\n    // TODO: Use Quasar's Dialog plugin for confirmation\n    // For now, use browser confirm\n    if (confirm(computedConfirmCloseMessage.value)) {\n      onConfirm();\n    }\n  };\n\n  // Track changes\n  const markAsChanged = () => {\n    hasUnsavedChanges.value = true;\n  };\n\n  // Expose methods for parent components\n  defineExpose({\n    markAsChanged,\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // FORMDIALOG - USES UNIFIED DIALOG SYSTEM\n  // Component-specific styles only, shared styles in _dialogs.scss\n  // ===================================================================\n\n  .form-dialog-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--dlg-gap);\n  }\n\n  /* Form Grid helpers with token-driven spacing */\n  :global(.form-grid) {\n    display: grid;\n    grid-template-columns: repeat(12, minmax(0, 1fr));\n    gap: var(--dlg-gap);\n  }\n\n  :global(.col-12) {\n    grid-column: span 12 / span 12;\n  }\n  :global(.col-6) {\n    grid-column: span 12 / span 12;\n  }\n  :global(.col-4) {\n    grid-column: span 12 / span 12;\n  }\n  :global(.col-3) {\n    grid-column: span 12 / span 12;\n  }\n\n  @media (min-width: 768px) {\n    :global(.col-6) {\n      grid-column: span 6 / span 6;\n    }\n    :global(.col-4) {\n      grid-column: span 6 / span 6;\n    }\n    :global(.col-3) {\n      grid-column: span 6 / span 6;\n    }\n  }\n\n  @media (min-width: 1024px) {\n    :global(.col-4) {\n      grid-column: span 4 / span 4;\n    }\n    :global(.col-3) {\n      grid-column: span 3 / span 3;\n    }\n  }\n\n  .form-dialog-actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    margin-top: var(--space-2);\n\n    .loading-indicator {\n      display: flex;\n      align-items: center;\n      gap: var(--space-4);\n      color: var(--neutral-600);\n      background: var(--neutral-50);\n      padding: var(--space-4) var(--space-6);\n      border-radius: 16px;\n      border: 2px solid var(--neutral-200);\n\n      .loading-text {\n        font-size: var(--text-base);\n        font-weight: var(--font-weight-medium);\n      }\n\n      :deep(.q-spinner-dots) {\n        font-size: 32px;\n      }\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: var(--space-4);\n      margin-left: auto;\n\n      // Reset button styling\n      :deep(.q-btn[color='grey-7']) {\n        background: var(--neutral-100);\n        color: var(--neutral-700);\n        border: 2px solid var(--neutral-200);\n\n        &:hover {\n          background: var(--neutral-200);\n          border-color: var(--neutral-300);\n        }\n      }\n\n      @media (max-width: 640px) {\n        flex-direction: column-reverse;\n        width: 100%;\n        margin-left: 0;\n        gap: var(--space-3);\n\n        :deep(.q-btn) {\n          width: 100%;\n          min-width: auto;\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE ADAPTATIONS\n  // ===================================================================\n\n  body.body--dark {\n    .form-dialog-content {\n      :deep(.q-field) {\n        .q-field__control {\n          background: var(--neutral-900);\n          border-color: var(--neutral-600);\n          color: var(--neutral-100);\n\n          &:hover {\n            border-color: var(--brand-primary-light);\n          }\n        }\n\n        &.q-field--focused .q-field__control {\n          border-color: var(--brand-primary-light);\n          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);\n        }\n\n        &.q-field--error .q-field__control {\n          background: rgba(220, 38, 38, 0.1);\n        }\n\n        .q-field__label {\n          color: var(--neutral-300);\n        }\n      }\n\n      :deep(.q-checkbox),\n      :deep(.q-radio) {\n        .q-checkbox__inner,\n        .q-radio__inner {\n          border-color: var(--neutral-500);\n          background: var(--neutral-800);\n\n          &:hover {\n            border-color: var(--brand-primary-light);\n          }\n        }\n\n        &.q-checkbox--checked .q-checkbox__inner,\n        &.q-radio--checked .q-radio__inner {\n          background: var(--brand-primary-light);\n          border-color: var(--brand-primary-light);\n        }\n      }\n    }\n\n    .form-dialog-actions {\n      .loading-indicator {\n        background: var(--neutral-800);\n        border-color: var(--neutral-700);\n        color: var(--neutral-300);\n      }\n\n      .action-buttons {\n        :deep(.q-btn[color='grey-7']) {\n          background: var(--neutral-700);\n          color: var(--neutral-200);\n          border-color: var(--neutral-600);\n\n          &:hover {\n            background: var(--neutral-600);\n            border-color: var(--neutral-500);\n          }\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // RESPONSIVE DESIGN\n  // ===================================================================\n\n  @media (max-width: 640px) {\n    .form-dialog-actions {\n      flex-direction: column;\n      align-items: stretch;\n      gap: var(--space-4);\n\n      .loading-indicator {\n        justify-content: center;\n        margin-bottom: 0;\n      }\n    }\n  }\n\n  // ===================================================================\n  // ACCESSIBILITY ENHANCEMENTS\n  // ===================================================================\n\n  .form-dialog-content {\n    :deep(.q-field) {\n      .q-field__control {\n        &:focus-within {\n          outline: 2px solid var(--brand-primary);\n          outline-offset: 2px;\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\OptimizedImage.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'width' requires default value to be set.",
        "line": 65,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 65,
        "endColumn": 29
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'height' requires default value to be set.",
        "line": 66,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 66,
        "endColumn": 30
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'aspectRatio' requires default value to be set.",
        "line": 78,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 78,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div\n    ref=\"imageContainer\"\n    class=\"optimized-image-container\"\n    :class=\"{\n      loading: isLoading,\n      error: hasError,\n      loaded: isLoaded,\n    }\"\n    :style=\"containerStyle\"\n  >\n    <!-- Placeholder while loading -->\n    <div\n      v-if=\"isLoading || (!isVisible && !isLoaded)\"\n      class=\"image-placeholder\"\n      :style=\"placeholderStyle\"\n    >\n      <q-skeleton\n        v-if=\"showSkeleton && !hasError\"\n        type=\"rect\"\n        :width=\"width?.toString()\"\n        :height=\"height?.toString()\"\n        class=\"skeleton-placeholder\"\n      />\n      <div v-else-if=\"!hasError\" class=\"placeholder-icon\">\n        <q-icon :name=\"placeholderIcon\" :size=\"iconSize\" color=\"grey-4\" />\n      </div>\n      <div v-if=\"hasError\" class=\"error-placeholder\">\n        <q-icon name=\"broken_image\" :size=\"iconSize\" color=\"negative\" />\n        <div v-if=\"showErrorText\" class=\"error-text\">\n          {{ $t('common.imageLoadError') }}\n        </div>\n      </div>\n    </div>\n\n    <!-- Optimized image -->\n    <img\n      v-show=\"isLoaded && !hasError\"\n      ref=\"imageElement\"\n      :src=\"optimizedSrc\"\n      :alt=\"alt\"\n      :width=\"width\"\n      :height=\"height\"\n      :loading=\"useNativeLazyLoading ? 'lazy' : 'eager'\"\n      class=\"optimized-img\"\n      @load=\"handleLoad\"\n      @error=\"handleError\"\n      @click=\"handleClick\"\n    />\n\n    <!-- Loading overlay -->\n    <div v-if=\"isLoading && showLoadingOverlay\" class=\"loading-overlay\">\n      <q-spinner-dots size=\"24px\" color=\"primary\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, onUnmounted, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n\n  interface Props {\n    src: string;\n    alt?: string;\n    width?: string | number;\n    height?: string | number;\n    lazy?: boolean;\n    quality?: number;\n    format?: 'webp' | 'avif' | 'jpg' | 'png' | 'auto';\n    placeholder?: string;\n    placeholderIcon?: string;\n    showSkeleton?: boolean;\n    showLoadingOverlay?: boolean;\n    showErrorText?: boolean;\n    useNativeLazyLoading?: boolean;\n    rootMargin?: string;\n    threshold?: number;\n    aspectRatio?: string;\n    objectFit?: 'cover' | 'contain' | 'fill' | 'scale-down' | 'none';\n    borderRadius?: string;\n    clickable?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    alt: '',\n    lazy: true,\n    quality: 85,\n    format: 'auto',\n    placeholder: '',\n    placeholderIcon: 'image',\n    showSkeleton: true,\n    showLoadingOverlay: false,\n    showErrorText: true,\n    useNativeLazyLoading: true,\n    rootMargin: '50px',\n    threshold: 0.1,\n    objectFit: 'cover',\n    borderRadius: '4px',\n    clickable: false,\n  });\n\n  interface Emits {\n    (e: 'load'): void;\n    (e: 'error'): void;\n    (e: 'click'): void;\n  }\n\n  const emit = defineEmits<Emits>();\n  const { t } = useI18n();\n\n  // Refs\n  const imageContainer = ref<HTMLElement>();\n  const imageElement = ref<HTMLImageElement>();\n  const isVisible = ref(false);\n  const isLoading = ref(false);\n  const isLoaded = ref(false);\n  const hasError = ref(false);\n  const observer = ref<IntersectionObserver>();\n\n  // Computed\n  const optimizedSrc = computed(() => {\n    if (!props.src) return '';\n\n    // If it's a data URL or blob, return as-is\n    if (props.src.startsWith('data:') || props.src.startsWith('blob:')) {\n      return props.src;\n    }\n\n    // Create optimized URL with query parameters\n    const url = new URL(props.src, window.location.origin);\n\n    if (props.quality !== 85) {\n      url.searchParams.set('quality', props.quality.toString());\n    }\n\n    if (props.format !== 'auto') {\n      url.searchParams.set('format', props.format);\n    }\n\n    if (props.width) {\n      url.searchParams.set('width', props.width.toString());\n    }\n\n    if (props.height) {\n      url.searchParams.set('height', props.height.toString());\n    }\n\n    return url.toString();\n  });\n\n  const containerStyle = computed(() => ({\n    width: props.width ? `${props.width}px` : '100%',\n    height: props.height ? `${props.height}px` : 'auto',\n    aspectRatio: props.aspectRatio || undefined,\n    borderRadius: props.borderRadius,\n    cursor: props.clickable ? 'pointer' : 'default',\n  }));\n\n  const placeholderStyle = computed(() => ({\n    width: props.width ? `${props.width}px` : '100%',\n    height: props.height ? `${props.height}px` : '200px',\n    aspectRatio: props.aspectRatio || undefined,\n    borderRadius: props.borderRadius,\n  }));\n\n  const iconSize = computed(() => {\n    const size = Math.min(\n      parseInt(props.width?.toString() || '200') / 4,\n      parseInt(props.height?.toString() || '200') / 4,\n      48\n    );\n    return `${Math.max(size, 24)}px`;\n  });\n\n  // Methods\n  const startLoading = () => {\n    if (!props.src || hasError.value) return;\n\n    isLoading.value = true;\n\n    // Preload the image\n    const img = new Image();\n    img.onload = () => {\n      handleLoad();\n    };\n    img.onerror = () => {\n      handleError();\n    };\n    img.src = optimizedSrc.value;\n  };\n\n  const handleLoad = () => {\n    isLoading.value = false;\n    isLoaded.value = true;\n    hasError.value = false;\n    emit('load');\n  };\n\n  const handleError = () => {\n    isLoading.value = false;\n    isLoaded.value = false;\n    hasError.value = true;\n    emit('error');\n  };\n\n  const handleClick = () => {\n    if (props.clickable) {\n      emit('click');\n    }\n  };\n\n  const setupIntersectionObserver = () => {\n    if (!props.lazy || !imageContainer.value) return;\n\n    observer.value = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !isVisible.value) {\n            isVisible.value = true;\n            startLoading();\n            observer.value?.disconnect();\n          }\n        });\n      },\n      {\n        rootMargin: props.rootMargin,\n        threshold: props.threshold,\n      }\n    );\n\n    observer.value.observe(imageContainer.value);\n  };\n\n  // Watchers\n  watch(\n    () => props.src,\n    () => {\n      isLoaded.value = false;\n      hasError.value = false;\n\n      if (props.lazy && !isVisible.value) {\n        setupIntersectionObserver();\n      } else {\n        startLoading();\n      }\n    },\n    { immediate: true }\n  );\n\n  // Lifecycle\n  onMounted(() => {\n    if (props.lazy) {\n      setupIntersectionObserver();\n    } else {\n      isVisible.value = true;\n      startLoading();\n    }\n  });\n\n  onUnmounted(() => {\n    observer.value?.disconnect();\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .optimized-image-container {\n    position: relative;\n    display: inline-block;\n    overflow: hidden;\n    background: var(--color-surface-secondary);\n    transition: all 0.3s ease;\n\n    &.loading {\n      .optimized-img {\n        opacity: 0;\n      }\n    }\n\n    &.loaded {\n      .optimized-img {\n        opacity: 1;\n      }\n    }\n\n    &.error {\n      background: var(--color-surface-secondary);\n    }\n  }\n\n  .image-placeholder {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    background: linear-gradient(\n      135deg,\n      var(--color-surface-secondary) 0%,\n      var(--bg-tertiary) 100%\n    );\n    position: relative;\n    width: 100%;\n    height: 100%;\n    min-height: 100px;\n\n    .placeholder-icon {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      opacity: 0.5;\n    }\n\n    .error-placeholder {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      gap: 8px;\n\n      .error-text {\n        font-size: 12px;\n        color: #666;\n        text-align: center;\n      }\n    }\n  }\n\n  .skeleton-placeholder {\n    width: 100%;\n    height: 100%;\n  }\n\n  .optimized-img {\n    width: 100%;\n    height: 100%;\n    object-fit: v-bind('props.objectFit');\n    transition: opacity 0.3s ease;\n    display: block;\n  }\n\n  .loading-overlay {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 2;\n  }\n\n  // Dark mode support\n  body.body--dark .optimized-image-container {\n    background: #2a2a2a;\n\n    .image-placeholder {\n      background: linear-gradient(135deg, #2a2a2a 0%, #333333 100%);\n\n      .placeholder-icon {\n        opacity: 0.3;\n      }\n\n      .error-text {\n        color: #ccc;\n      }\n    }\n\n    &.error {\n      background: #2a2a2a;\n    }\n  }\n\n  // Hover effects for clickable images\n  .optimized-image-container.clickable {\n    &:hover {\n      transform: scale(1.02);\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    }\n  }\n\n  // Performance optimizations\n  .optimized-img {\n    will-change: opacity;\n    transform: translateZ(0); // Force GPU acceleration\n  }\n\n  .image-placeholder {\n    will-change: opacity;\n    contain: layout style paint;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\AlertCard.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'id' requires default value to be set.",
        "line": 107,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 107,
        "endColumn": 17
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'paddingClass' requires default value to be set.",
        "line": 108,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 108,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div :id=\"id\" :class=\"alertClasses\" role=\"region\">\n    <div class=\"alert-card\" :class=\"paddingClass\">\n      <!-- Alert indicator line -->\n      <div class=\"alert-indicator\" />\n\n      <!-- Card Header -->\n      <div v-if=\"hasHeader\" class=\"card-header\" :class=\"headerClass\">\n        <div class=\"card-header-content\">\n          <div class=\"card-title-section\">\n            <!-- Status Icon -->\n            <div\n              v-if=\"showStatusIcon\"\n              class=\"status-icon\"\n              :class=\"`status-icon--${severity}`\"\n            >\n              <q-icon :name=\"statusIcon\" class=\"icon-size-base\" />\n            </div>\n\n            <!-- Custom Icon -->\n            <div\n              v-else-if=\"icon\"\n              class=\"card-icon\"\n              :class=\"[\n                `card-icon--${iconVariant}`,\n                iconColor ? `card-icon--${iconColor}` : '',\n              ]\"\n            >\n              <q-icon :name=\"icon\" class=\"icon-size-base\" />\n            </div>\n\n            <!-- Title and Subtitle -->\n            <div v-if=\"title || subtitle\" class=\"card-text-content\">\n              <h3 v-if=\"title\" :id=\"id\" class=\"card-title\">{{ title }}</h3>\n              <p v-if=\"subtitle\" class=\"card-subtitle\">{{ subtitle }}</p>\n            </div>\n\n            <!-- Custom header content -->\n            <slot name=\"header-content\" />\n          </div>\n\n          <!-- Header actions -->\n          <div v-if=\"hasHeaderActions\" class=\"card-header-actions\">\n            <slot name=\"header-actions\" />\n          </div>\n\n          <!-- Dismiss button -->\n          <div v-if=\"dismissible\" class=\"dismiss-button\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"close\"\n              :aria-label=\"$t('common.close')\"\n              @click=\"$emit('close')\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <!-- Card Content -->\n      <div v-if=\"hasContent\" class=\"card-content\" :class=\"contentClass\">\n        <slot />\n      </div>\n\n      <!-- Card Actions -->\n      <div v-if=\"hasActions\" class=\"card-actions\" :class=\"actionsClass\">\n        <slot name=\"actions\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, useSlots, useAttrs } from 'vue';\n  import { useI18n } from 'vue-i18n';\n\n  interface Props {\n    // Content props\n    title?: string;\n    subtitle?: string;\n    icon?: string;\n    iconColor?:\n      | 'primary'\n      | 'secondary'\n      | 'positive'\n      | 'negative'\n      | 'warning'\n      | 'info';\n    iconVariant?: 'default' | 'outlined' | 'filled';\n\n    // Alert props\n    severity?: 'info' | 'success' | 'warning' | 'error';\n    showStatusIcon?: boolean;\n    dismissible?: boolean;\n\n    // Layout props\n    padding?: 'none' | 'sm' | 'md' | 'lg';\n\n    // Custom classes\n    cardClass?: string;\n    headerClass?: string;\n    contentClass?: string;\n    actionsClass?: string;\n\n    // Accessibility\n    id?: string;\n    paddingClass?: string;\n    role?: string;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    icon: undefined,\n    title: undefined,\n    subtitle: undefined,\n    iconColor: 'primary',\n    severity: 'info',\n    padding: 'md',\n    role: 'region',\n    iconVariant: 'default',\n    cardClass: '',\n    headerClass: '',\n    contentClass: '',\n    actionsClass: '',\n  });\n\n  const emit = defineEmits<{ close: []; dismiss: [] }>();\n\n  const slots = useSlots();\n  const attrs = useAttrs();\n\n  // Generate unique ID for title\n  const titleId = computed(() => {\n    if (attrs.id) return `${attrs.id}-title`;\n    if (props.title)\n      return `card-title-${props.title.replace(/\\s+/g, '-').toLowerCase()}`;\n    return `card-title-${Date.now()}`;\n  });\n\n  // Check for slot content\n  const hasHeader = computed(\n    () =>\n      !!(\n        props.title ||\n        props.subtitle ||\n        props.icon ||\n        props.showStatusIcon ||\n        slots['header-content'] ||\n        slots['header-actions']\n      )\n  );\n\n  const hasContent = computed(() => !!slots.default);\n  const hasActions = computed(() => !!slots.actions);\n  const hasHeaderActions = computed(() => !!slots['header-actions']);\n\n  // Status icon based on severity\n  const statusIcon = computed(() => {\n    switch (props.severity) {\n      case 'success':\n        return 'check_circle';\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      case 'info':\n      default:\n        return 'info';\n    }\n  });\n\n  // Card classes\n  const alertClasses = computed(() => {\n    const classes = ['alert-card', `alert-card--${props.severity}`];\n\n    // Padding classes\n    if (props.padding !== 'md') {\n      classes.push(`card-padding-${props.padding}`);\n    }\n\n    // Custom class\n    if (props.cardClass) {\n      classes.push(props.cardClass);\n    }\n\n    return classes.join(' ');\n  });\n\n  // Event handlers\n  const handleDismiss = () => {\n    emit('dismiss');\n  };\n</script>\n\n<style scoped lang=\"scss\">\n  .alert-card {\n    border-radius: 12px;\n    background: var(--surface);\n    border: 1px solid var(--alert-border);\n    box-shadow: var(\n      --card-shadow,\n      0 1px 3px rgba(0, 0, 0, 0.08),\n      0 1px 2px rgba(0, 0, 0, 0.06)\n    );\n    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n    overflow: hidden;\n    position: relative;\n\n    // Dark mode support\n    .body--dark & {\n      --card-background: #1e1e1e;\n      --card-shadow: 0 1px 3px rgba(0, 0, 0, 0.3), 0 1px 2px rgba(0, 0, 0, 0.2);\n    }\n\n    // Alert indicator line\n    .alert-indicator {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 4px;\n      background: var(--alert-color);\n      z-index: 1;\n    }\n\n    // Severity variants\n    &--info {\n      --alert-color: #3b82f6;\n      --alert-border: rgba(59, 130, 246, 0.2);\n      --alert-background: rgba(59, 130, 246, 0.05);\n\n      .body--dark & {\n        --alert-border: rgba(59, 130, 246, 0.3);\n        --alert-background: rgba(59, 130, 246, 0.1);\n      }\n    }\n\n    &--success {\n      --alert-color: #22c55e;\n      --alert-border: rgba(34, 197, 94, 0.2);\n      --alert-background: rgba(34, 197, 94, 0.05);\n\n      .body--dark & {\n        --alert-border: rgba(34, 197, 94, 0.3);\n        --alert-background: rgba(34, 197, 94, 0.1);\n      }\n    }\n\n    &--warning {\n      --alert-color: #f59e0b;\n      --alert-border: rgba(245, 158, 11, 0.2);\n      --alert-background: rgba(245, 158, 11, 0.05);\n\n      .body--dark & {\n        --alert-border: rgba(245, 158, 11, 0.3);\n        --alert-background: rgba(245, 158, 11, 0.1);\n      }\n    }\n\n    &--error {\n      --alert-color: #ef4444;\n      --alert-border: rgba(239, 68, 68, 0.2);\n      --alert-background: rgba(239, 68, 68, 0.05);\n\n      .body--dark & {\n        --alert-border: rgba(239, 68, 68, 0.3);\n        --alert-background: rgba(239, 68, 68, 0.1);\n      }\n    }\n\n    // Subtle background tint\n    &::before {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: var(--alert-background);\n      z-index: 0;\n    }\n\n    // Ensure content is above background\n    > * {\n      position: relative;\n      z-index: 1;\n    }\n  }\n\n  // Card header\n  .card-header {\n    background: transparent;\n    padding: 16px 20px;\n\n    .card-header-content {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 12px;\n    }\n\n    .card-title-section {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      flex: 1;\n    }\n\n    .card-text-content {\n      display: flex;\n      flex-direction: column;\n      gap: 4px;\n    }\n\n    .card-title {\n      font-size: 16px;\n      font-weight: 600;\n      line-height: 1.25;\n      margin: 0;\n      color: var(--text-primary);\n    }\n\n    .card-subtitle {\n      font-size: 14px;\n      color: var(--text-secondary);\n      margin: 0;\n      line-height: 1.4;\n    }\n\n    .card-header-actions {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n    }\n  }\n\n  // Status icon\n  .status-icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    flex-shrink: 0;\n\n    &--info {\n      background: rgba(59, 130, 246, 0.15);\n      color: #3b82f6;\n    }\n\n    &--success {\n      background: rgba(34, 197, 94, 0.15);\n      color: #22c55e;\n    }\n\n    &--warning {\n      background: rgba(245, 158, 11, 0.15);\n      color: #f59e0b;\n    }\n\n    &--error {\n      background: rgba(239, 68, 68, 0.15);\n      color: #ef4444;\n    }\n  }\n\n  // Dismiss button\n  .dismiss-button {\n    display: flex;\n    align-items: center;\n    opacity: 0.7;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n\n  // Card icon (same as other cards)\n  .card-icon {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    border-radius: 8px;\n    flex-shrink: 0;\n\n    &--default {\n      background: rgba(var(--q-primary-rgb), 0.1);\n      color: var(--q-primary);\n    }\n\n    &--outlined {\n      border: 1px solid rgba(var(--q-primary-rgb), 0.3);\n      color: var(--q-primary);\n    }\n\n    &--filled {\n      background: var(--q-primary);\n      color: white;\n    }\n\n    // Color variants\n    &--primary {\n      --q-primary-rgb: 59, 130, 246;\n      --q-primary: #3b82f6;\n    }\n    &--secondary {\n      --q-primary-rgb: 100, 116, 139;\n      --q-primary: #64748b;\n    }\n    &--positive {\n      --q-primary-rgb: 34, 197, 94;\n      --q-primary: #22c55e;\n    }\n    &--negative {\n      --q-primary-rgb: 239, 68, 68;\n      --q-primary: #ef4444;\n    }\n    &--warning {\n      --q-primary-rgb: 245, 158, 11;\n      --q-primary: #f59e0b;\n    }\n    &--info {\n      --q-primary-rgb: 14, 165, 233;\n      --q-primary: #0ea5e9;\n    }\n  }\n\n  // Card content\n  .card-content {\n    padding: 20px;\n    background: transparent;\n  }\n\n  // Card actions\n  .card-actions {\n    padding: 12px 20px;\n    background: transparent;\n    border-top: 1px solid var(--alert-border);\n\n    display: flex;\n    justify-content: flex-end;\n    gap: 12px;\n    align-items: center;\n\n    @media (max-width: 640px) {\n      flex-direction: column;\n      align-items: stretch;\n      gap: 8px;\n    }\n  }\n\n  // Padding variants\n  .card-padding-none {\n    .card-content {\n      padding: 0;\n    }\n  }\n\n  .card-padding-sm {\n    .card-header {\n      padding: 12px 16px;\n    }\n\n    .card-content {\n      padding: 16px;\n    }\n\n    .card-actions {\n      padding: 8px 16px;\n    }\n  }\n\n  .card-padding-lg {\n    .card-header {\n      padding: 20px 24px;\n    }\n\n    .card-content {\n      padding: 24px;\n    }\n\n    .card-actions {\n      padding: 16px 24px;\n    }\n  }\n\n  // Responsive adjustments\n  @media (max-width: 768px) {\n    .card-header {\n      padding: 14px 16px;\n\n      .card-title {\n        font-size: 15px;\n      }\n\n      .card-subtitle {\n        font-size: 13px;\n      }\n    }\n\n    .card-content {\n      padding: 16px;\n    }\n\n    .card-actions {\n      padding: 10px 16px;\n    }\n\n    .status-icon,\n    .card-icon {\n      width: 28px;\n      height: 28px;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseDashboardWidget.example.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseDashboardWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\CardStyleGuide.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\InteractiveCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\charts\\ChartCanvas.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'options' requires default value to be set.",
        "line": 23,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 23,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 52,
        "column": 23,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 52,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1528, 1531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1528, 1531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1921, 1924], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1921, 1924], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2535, 2538], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2535, 2538], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <div class=\"chart-canvas-wrapper\">\r\n    <canvas ref=\"canvasEl\" :height=\"height\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { onMounted, onUnmounted, ref, watch } from 'vue';\r\n  import { Chart, ChartData, ChartOptions } from 'chart.js/auto';\r\n\r\n  interface DatasetInput {\r\n    label: string;\r\n    data: number[];\r\n    color?: string;\r\n    backgroundColor?: string | string[];\r\n    borderColor?: string | string[];\r\n  }\r\n\r\n  interface Props {\r\n    type: string;\r\n    labels: string[];\r\n    datasets: DatasetInput[];\r\n    options?: ChartOptions;\r\n    height?: number | string;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), { height: 240 });\r\n  const emit = defineEmits<{\r\n    (e: 'datapoint-click', payload: { label: string; value: number }): void;\r\n  }>();\r\n\r\n  const canvasEl = ref<HTMLCanvasElement | null>(null);\r\n  let chart: Chart | null = null;\r\n\r\n  function buildData(): ChartData {\r\n    return {\r\n      labels: props.labels,\r\n      datasets: props.datasets.map(ds => ({\r\n        label: ds.label,\r\n        data: ds.data,\r\n        backgroundColor: ds.backgroundColor || ds.color || 'rgba(33,150,243,0.4)',\r\n        borderColor: ds.borderColor || ds.color || 'rgba(33,150,243,1)',\r\n        borderWidth: 2,\r\n        fill: props.type === 'line' ? false : true,\r\n      })),\r\n    } as ChartData;\r\n  }\r\n\r\n  function renderChart() {\r\n    if (!canvasEl.value) return;\r\n    chart?.destroy();\r\n    chart = new Chart(canvasEl.value.getContext('2d')!, {\r\n      type: props.type as any,\r\n      data: buildData(),\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: { legend: { display: true, position: 'bottom' } },\r\n        ...props.options,\r\n        // Click handler\r\n        onClick: (_event, activeElements) => {\r\n          if (!chart || activeElements.length === 0) return;\r\n          const element = activeElements[0] as any;\r\n          const { index, datasetIndex } = element;\r\n          const label = props.labels?.[index] ?? '';\r\n          const value = (props.datasets?.[datasetIndex]?.data || [])[index] ?? 0;\r\n          emit('datapoint-click', { label, value });\r\n        },\r\n      } as ChartOptions,\r\n    });\r\n  }\r\n\r\n  onMounted(() => {\r\n    renderChart();\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    chart?.destroy();\r\n    chart = null;\r\n  });\r\n\r\n  watch(\r\n    () => [props.type, props.labels, props.datasets, props.options],\r\n    () => {\r\n      if (!chart) {\r\n        renderChart();\r\n        return;\r\n      }\r\n      (chart.config as any).type = props.type;\r\n      chart.data = buildData();\r\n      chart.options = { ...chart.options, ...props.options } as ChartOptions;\r\n      chart.update();\r\n    },\r\n    { deep: true }\r\n  );\r\n</script>\r\n\r\n<style scoped>\r\n  .chart-canvas-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 160px;\r\n  }\r\n\r\n  canvas {\r\n    display: block;\r\n    width: 100% !important;\r\n  }\r\n</style>\r\n\r\n\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\DynamicWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\AlertWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\ChartWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 161,
        "column": 8,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 161,
        "endColumn": 11,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5063, 5066], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5063, 5066], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDashboardWidget :hide-header=\"true\">\n    <div v-if=\"showFilters\" class=\"chart-filters\">\n      <div class=\"row q-col-gutter-sm items-center\">\n        <div class=\"col-auto\">\n          <q-select\n            v-model=\"localPeriod\"\n            :options=\"periodOptions\"\n            dense\n            outlined\n            emit-value\n            map-options\n            :label=\"$t('analyticsPage.period')\"\n          />\n        </div>\n        <div v-if=\"locations?.length\" class=\"col-auto\">\n          <q-select\n            v-model=\"localLocation\"\n            :options=\"locations\"\n            option-value=\"id\"\n            option-label=\"name\"\n            dense\n            outlined\n            emit-value\n            map-options\n            :label=\"$t('locations.title')\"\n          />\n        </div>\n        <div v-if=\"suppliers?.length\" class=\"col-auto\">\n          <q-select\n            v-model=\"localSupplier\"\n            :options=\"suppliers\"\n            option-value=\"id\"\n            option-label=\"name\"\n            dense\n            outlined\n            emit-value\n            map-options\n            :label=\"$t('suppliers.title')\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <ChartCanvas\n      :type=\"resolvedType\"\n      :labels=\"chartJsLabels\"\n      :datasets=\"chartJsDatasets\"\n      :options=\"chartOptions\"\n      :height=\"260\"\n      @datapoint-click=\"handlePointClick\"\n    />\n  </BaseDashboardWidget>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch } from 'vue';\n  import { BaseDashboardWidget } from '@/components/cards';\n  import ChartCanvas from '@/components/charts/ChartCanvas.vue';\n\n  interface ChartData {\n    analytics?: Array<{\n      event_type: string;\n      created_at: string;\n      user_id?: string;\n    }>;\n    items?: Array<{ label: string; value: number }>;\n    chart_type?: string;\n    labels?: string[];\n    datasets?: Array<{ label: string; data: number[]; color?: string }>;\n  }\n\n  interface Props {\n    data: ChartData;\n    chartType: 'bar' | 'line' | 'pie';\n    showFilters?: boolean;\n    locations?: Array<{ id: string; name: string }>;\n    suppliers?: Array<{ id: string; name: string }>;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    showFilters: false,\n    locations: () => [],\n    suppliers: () => [],\n  });\n\n  // Local filters\n  const localPeriod = ref<'7d' | '30d' | '90d' | '1y'>('7d');\n  const localLocation = ref<string | null>(null);\n  const localSupplier = ref<string | null>(null);\n  const periodOptions = [\n    { label: '7d', value: '7d' },\n    { label: '30d', value: '30d' },\n    { label: '90d', value: '90d' },\n    { label: '1y', value: '1y' },\n  ];\n\n  // Process analytics data\n  const analyticsData = computed(() => props.data.analytics || []);\n\n  // Chart.js compatible computed values\n  const resolvedType = computed<'bar' | 'line' | 'pie'>(() => {\n    if (props.data.chart_type === 'line') return 'line';\n    if (props.data.chart_type === 'pie') return 'pie';\n    if (props.data.chart_type === 'bar') return 'bar';\n    return props.chartType;\n  });\n\n  const chartJsLabels = computed<string[]>(() => {\n    if (props.data.labels && props.data.datasets) return props.data.labels;\n    if (props.data.items) return props.data.items.map(i => i.label);\n\n    if (analyticsData.value.length > 0 && resolvedType.value === 'line') {\n      // last 7 days labels\n      const dailyCount: Record<string, number> = {};\n      analyticsData.value.forEach(e => {\n        const d = new Date(e.created_at).toLocaleDateString();\n        dailyCount[d] = (dailyCount[d] || 0) + 1;\n      });\n      return Object.keys(dailyCount).slice(-7);\n    }\n\n    if (analyticsData.value.length > 0) {\n      // event types labels\n      const eventCount: Record<string, number> = {};\n      analyticsData.value.forEach(e => {\n        eventCount[e.event_type] = (eventCount[e.event_type] || 0) + 1;\n      });\n      return Object.keys(eventCount).slice(0, 5);\n    }\n    return [];\n  });\n\n  const chartJsDatasets = computed(() => {\n    if (props.data.labels && props.data.datasets) return props.data.datasets;\n    if (props.data.items) {\n      return [{ label: 'Data', data: props.data.items.map(i => i.value) }];\n    }\n    if (analyticsData.value.length > 0 && resolvedType.value === 'line') {\n      const byDay: Record<string, number> = {};\n      analyticsData.value.forEach(e => {\n        const d = new Date(e.created_at).toLocaleDateString();\n        byDay[d] = (byDay[d] || 0) + 1;\n      });\n      const labels = chartJsLabels.value;\n      return [{ label: 'Events', data: labels.map(l => byDay[l] || 0) }];\n    }\n    if (analyticsData.value.length > 0) {\n      const eventCount: Record<string, number> = {};\n      analyticsData.value.forEach(e => {\n        eventCount[e.event_type] = (eventCount[e.event_type] || 0) + 1;\n      });\n      const labels = chartJsLabels.value;\n      return [{ label: 'Events', data: labels.map(l => eventCount[l] || 0) }];\n    }\n    return [];\n  });\n\n  const chartOptions = computed(() => ({\n    plugins: { legend: { display: true, position: 'bottom' } },\n  } as any));\n\n  function handlePointClick(payload: { label: string; value: number }) {\n    // Drill-down hook: consumers can watch for this event via parent component if needed\n    // For now, no-op to keep incremental and non-breaking\n  }\n\n  // Emit filter changes (optional future use)\n  watch([localPeriod, localLocation, localSupplier], () => {\n    // In a non-breaking migration we keep it internal; parents can extend later as needed\n  });\n\n  // Remove previous CSS-chart-only helpers\n\n  function getEventLabel(eventType: string): string {\n    return eventType;\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .chart-filters {\n    margin-bottom: var(--space-3);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\ListWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\MetricWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\QuickActionWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\filters\\FilterField.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 658,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 658,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20356, 20359], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20356, 20359], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 659,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 659,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20413, 20416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20413, 20416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div ref=\"fieldWrapper\" class=\"filter-field-magento-wrapper\">\n    <!-- Text Input with label above -->\n    <div v-if=\"field.type === 'text'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <q-input\n        :model-value=\"modelValue as string\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :debounce=\"field.debounce || 300\"\n        :disable=\"disabled\"\n        :readonly=\"readonly\"\n        :loading=\"loading\"\n        class=\"filter-input-magento filter-input--text\"\n        hide-bottom-space\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" class=\"filter-icon icon-size-sm\" />\n        </template>\n        <template v-if=\"field.scannerButton\" #append>\n          <q-btn\n            flat\n            round\n            dense\n            icon=\"qr_code_scanner\"\n            :disable=\"disabled\"\n            size=\"sm\"\n            class=\"filter-scanner-btn\"\n            @click=\"handleScan\"\n          />\n        </template>\n      </q-input>\n    </div>\n\n    <!-- Select Dropdown with label above -->\n    <div v-else-if=\"field.type === 'select'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <q-select\n        :model-value=\"modelValue\"\n        :options=\"selectOptions\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :disable=\"disabled || loading\"\n        :readonly=\"readonly\"\n        :loading=\"optionsLoading\"\n        option-value=\"value\"\n        option-label=\"label\"\n        emit-value\n        map-options\n        class=\"filter-input-magento filter-input--select\"\n        hide-bottom-space\n        max-height=\"200px\"\n        behavior=\"menu\"\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" size=\"16px\" class=\"filter-icon\" />\n        </template>\n        <template #option=\"scope\">\n          <q-item v-bind=\"scope.itemProps\" dense>\n            <q-item-section v-if=\"scope.opt.icon\" avatar>\n              <q-icon\n                :name=\"scope.opt.icon\"\n                :color=\"scope.opt.color\"\n                class=\"icon-size-sm\"\n              />\n            </q-item-section>\n            <q-item-section>\n              <q-item-label class=\"text-sm\">{{ scope.opt.label }}</q-item-label>\n            </q-item-section>\n            <q-item-section v-if=\"field.flagIcons\" side>\n              <country-flag :country=\"scope.opt.value\" size=\"small\" />\n            </q-item-section>\n          </q-item>\n        </template>\n      </q-select>\n    </div>\n\n    <!-- Multi Select with label above -->\n    <div\n      v-else-if=\"field.type === 'multi_select'\"\n      class=\"filter-field-container\"\n    >\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <q-select\n        :model-value=\"modelValue\"\n        :options=\"selectOptions\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :disable=\"disabled || loading\"\n        :readonly=\"readonly\"\n        :loading=\"optionsLoading\"\n        option-value=\"value\"\n        option-label=\"label\"\n        emit-value\n        map-options\n        multiple\n        use-chips\n        class=\"filter-input-magento filter-input--multi-select\"\n        hide-bottom-space\n        max-height=\"200px\"\n        behavior=\"menu\"\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" class=\"filter-icon icon-size-sm\" />\n        </template>\n        <template #selected>\n          <div class=\"flex flex-wrap gap-1\">\n            <q-chip\n              v-for=\"value in Array.isArray(modelValue) ? modelValue : []\"\n              :key=\"value\"\n              removable\n              dense\n              color=\"primary\"\n              text-color=\"white\"\n              size=\"xs\"\n              class=\"text-xs\"\n              @remove=\"removeMultiSelectValue(value)\"\n            >\n              {{ getOptionLabel(value) }}\n            </q-chip>\n          </div>\n        </template>\n      </q-select>\n    </div>\n\n    <!-- Boolean Checkbox with inline label -->\n    <div\n      v-else-if=\"field.type === 'boolean'\"\n      class=\"filter-field-container filter-field-container--checkbox\"\n    >\n      <div class=\"filter-field-label-spacer\"></div>\n\n      <div class=\"filter-checkbox-container\">\n        <q-checkbox\n          :model-value=\"modelValue\"\n          :color=\"field.color || 'primary'\"\n          :disable=\"disabled\"\n          :readonly=\"readonly\"\n          size=\"sm\"\n          class=\"filter-checkbox-magento\"\n          @update:model-value=\"handleChange\"\n        />\n        <label v-if=\"field.label\" class=\"filter-checkbox-label\">\n          <q-icon\n            v-if=\"field.icon\"\n            :name=\"field.icon\"\n            class=\"filter-icon icon-size-sm q-mr-xs\"\n          />\n          {{ $t(field.label as string) }}\n        </label>\n      </div>\n    </div>\n\n    <!-- Number Input with label above -->\n    <div v-else-if=\"field.type === 'number'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <q-input\n        :model-value=\"String(modelValue || '')\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :disable=\"disabled\"\n        :readonly=\"readonly\"\n        :loading=\"loading\"\n        type=\"number\"\n        :step=\"field.step || 1\"\n        class=\"filter-input-magento filter-input--number\"\n        hide-bottom-space\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" class=\"filter-icon icon-size-sm\" />\n        </template>\n        <template v-if=\"field.currency\" #append>\n          <span class=\"filter-currency\">{{ field.currency }}</span>\n        </template>\n      </q-input>\n    </div>\n\n    <!-- Number Range with label above (Van - Tot format) -->\n    <div\n      v-else-if=\"field.type === 'number_range'\"\n      class=\"filter-field-container\"\n    >\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <div class=\"filter-range-container\">\n        <q-input\n          :model-value=\"rangeValue.min || ''\"\n          placeholder=\"Van\"\n          type=\"number\"\n          :step=\"field.step || 1\"\n          outlined\n          class=\"filter-range-input filter-input-magento\"\n          hide-bottom-space\n          @update:model-value=\"value => handleRangeChange('min', value)\"\n        >\n          <template v-if=\"field.currency\" #append>\n            <span class=\"filter-currency\">{{ field.currency }}</span>\n          </template>\n        </q-input>\n\n        <span class=\"filter-range-separator\">–</span>\n\n        <q-input\n          :model-value=\"rangeValue.max || ''\"\n          placeholder=\"Tot\"\n          type=\"number\"\n          :step=\"field.step || 1\"\n          outlined\n          class=\"filter-range-input filter-input-magento\"\n          hide-bottom-space\n          @update:model-value=\"value => handleRangeChange('max', value)\"\n        >\n          <template v-if=\"field.currency\" #append>\n            <span class=\"filter-currency\">{{ field.currency }}</span>\n          </template>\n        </q-input>\n      </div>\n    </div>\n\n    <!-- Date Input with label above -->\n    <div v-else-if=\"field.type === 'date'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <q-input\n        :model-value=\"String(modelValue || '')\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :disable=\"disabled\"\n        :readonly=\"readonly\"\n        :loading=\"loading\"\n        class=\"filter-input-magento filter-input--date\"\n        hide-bottom-space\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" size=\"16px\" class=\"filter-icon\" />\n        </template>\n        <template #append>\n          <q-icon name=\"event\" class=\"filter-date-icon icon-size-sm\">\n            <q-popup-proxy\n              cover\n              transition-show=\"scale\"\n              transition-hide=\"scale\"\n            >\n              <q-date\n                :model-value=\"modelValue\"\n                mask=\"YYYY-MM-DD\"\n                @update:model-value=\"handleChange\"\n              >\n                <div class=\"row items-center justify-end\">\n                  <q-btn\n                    v-close-popup\n                    label=\"Sluiten\"\n                    color=\"primary\"\n                    flat\n                    size=\"sm\"\n                  />\n                </div>\n              </q-date>\n            </q-popup-proxy>\n          </q-icon>\n        </template>\n      </q-input>\n    </div>\n\n    <!-- Date Range with label above (Van - Tot format) -->\n    <div v-else-if=\"field.type === 'date_range'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n\n      <div class=\"filter-range-container\">\n        <q-input\n          :model-value=\"dateRangeValue.start || ''\"\n          placeholder=\"Van\"\n          outlined\n          class=\"filter-range-input filter-input-magento\"\n          hide-bottom-space\n          @update:model-value=\"value => handleDateRangeChange('start', value as string | null)\"\n        >\n          <template #append>\n            <q-icon name=\"event\" class=\"filter-date-icon icon-size-sm\">\n              <q-popup-proxy\n                cover\n                transition-show=\"scale\"\n                transition-hide=\"scale\"\n              >\n                <q-date\n                  :model-value=\"dateRangeValue.start\"\n                  mask=\"YYYY-MM-DD\"\n                  @update:model-value=\"\n                    value => handleDateRangeChange('start', value)\n                  \"\n                >\n                  <div class=\"row items-center justify-end\">\n                    <q-btn\n                      v-close-popup\n                      label=\"Sluiten\"\n                      color=\"primary\"\n                      flat\n                      size=\"sm\"\n                    />\n                  </div>\n                </q-date>\n              </q-popup-proxy>\n            </q-icon>\n          </template>\n        </q-input>\n\n        <span class=\"filter-range-separator\">–</span>\n\n        <q-input\n          :model-value=\"dateRangeValue.end || ''\"\n          placeholder=\"Tot\"\n          outlined\n          class=\"filter-range-input filter-input-magento\"\n          hide-bottom-space\n          @update:model-value=\"value => handleDateRangeChange('end', value as string | null)\"\n        >\n          <template #append>\n            <q-icon name=\"event\" class=\"filter-date-icon\" size=\"16px\">\n              <q-popup-proxy\n                cover\n                transition-show=\"scale\"\n                transition-hide=\"scale\"\n              >\n                <q-date\n                  :model-value=\"dateRangeValue.end\"\n                  mask=\"YYYY-MM-DD\"\n                  @update:model-value=\"\n                    value => handleDateRangeChange('end', value)\n                  \"\n                >\n                  <div class=\"row items-center justify-end\">\n                    <q-btn\n                      v-close-popup\n                      label=\"Sluiten\"\n                      color=\"primary\"\n                      flat\n                      size=\"sm\"\n                    />\n                  </div>\n                </q-date>\n              </q-popup-proxy>\n            </q-icon>\n          </template>\n        </q-input>\n      </div>\n    </div>\n\n    <!-- Country Select with label above -->\n    <div v-else-if=\"field.type === 'country'\" class=\"filter-field-container\">\n      <label v-if=\"field.label\" class=\"filter-field-label\">\n        {{ $t(field.label as string) }}\n      </label>\n      <div v-else class=\"filter-field-label-spacer\"></div>\n      <q-select\n        :model-value=\"modelValue\"\n        :options=\"selectOptions\"\n        :placeholder=\"field.placeholder ? $t(field.placeholder as string) : ''\"\n        outlined\n        :clearable=\"field.clearable\"\n        :disable=\"disabled || loading\"\n        :readonly=\"readonly\"\n        :loading=\"optionsLoading\"\n        option-value=\"value\"\n        option-label=\"label\"\n        emit-value\n        map-options\n        class=\"filter-input-magento filter-input--country\"\n        hide-bottom-space\n        max-height=\"200px\"\n        behavior=\"menu\"\n        @update:model-value=\"handleChange\"\n      >\n        <template v-if=\"field.icon\" #prepend>\n          <q-icon :name=\"field.icon\" size=\"16px\" class=\"filter-icon\" />\n        </template>\n        <template #option=\"scope\">\n          <q-item v-bind=\"scope.itemProps\" dense>\n            <q-item-section side>\n              <country-flag :country=\"scope.opt.value\" size=\"small\" />\n            </q-item-section>\n            <q-item-section>\n              <q-item-label class=\"text-sm\">{{ scope.opt.label }}</q-item-label>\n            </q-item-section>\n          </q-item>\n        </template>\n        <template #selected>\n          <div v-if=\"modelValue\" class=\"flex items-center gap-2\">\n            <country-flag :country=\"String(modelValue)\" size=\"small\" />\n            <span class=\"text-sm\">{{ getSelectedCountryLabel() }}</span>\n          </div>\n        </template>\n      </q-select>\n    </div>\n\n    <!-- Fallback for unknown types -->\n    <div v-else class=\"unknown-field-container\">\n      <div class=\"unknown-field-content\">\n        <q-icon name=\"warning\" class=\"unknown-field-icon\" />\n        <span class=\"unknown-field-message\"\n          >Unknown filter type: {{ field.type }}</span\n        >\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref, watch, onMounted, nextTick } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { supabase } from '@/services/supabase';\n  import CountryFlag from '@/components/CountryFlag.vue';\n  import type {\n    FilterField,\n    FilterValue,\n    FilterDataSource,\n    FilterOption,\n  } from '@/types/filters';\n\n  interface Props {\n    field: FilterField;\n    modelValue: FilterValue;\n    loading?: boolean;\n    disabled?: boolean;\n    readonly?: boolean;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: FilterValue): void;\n    (e: 'change', value: FilterValue, oldValue?: FilterValue): void;\n    (e: 'scan', scannedValue: string): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    loading: false,\n    disabled: false,\n    readonly: false,\n  });\n\n  const emit = defineEmits<Emits>();\n\n  // Composables\n  const { t } = useI18n();\n\n  // State\n  const selectOptions = ref<FilterOption[]>([]);\n  const optionsLoading = ref(false);\n\n  // Computed\n  const fieldClasses = computed(() => {\n    const classes = [`filter-input--${props.field.type}`];\n\n    if (props.field.size) {\n      classes.push(`filter-input--${props.field.size}`);\n    }\n\n    if (props.field.dense) {\n      classes.push('filter-input--dense');\n    }\n\n    return classes;\n  });\n\n  type FilterRange = { min?: number; max?: number };\n  type FilterDateRangeValue = { start?: string; end?: string };\n  const rangeValue = computed<FilterRange>(() => {\n    if (\n      props.field.type === 'number_range' &&\n      typeof props.modelValue === 'object' &&\n      props.modelValue !== null\n    ) {\n      return props.modelValue as FilterRange;\n    }\n    return { min: undefined, max: undefined };\n  });\n\n  const dateRangeValue = computed<FilterDateRangeValue>(() => {\n    if (\n      props.field.type === 'date_range' &&\n      typeof props.modelValue === 'object' &&\n      props.modelValue !== null\n    ) {\n      return props.modelValue as FilterDateRangeValue;\n    }\n    return { start: undefined, end: undefined };\n  });\n\n  // Methods\n  const handleChange = (value: FilterValue) => {\n    const oldValue = props.modelValue;\n    emit('update:modelValue', value);\n    emit('change', value, oldValue);\n  };\n\n  const isEmptyValue = (\n    value: FilterValue | FilterValue[] | undefined\n  ): boolean => {\n    if (value === null || value === undefined || value === '') {\n      return true;\n    }\n    if (typeof value === 'string' && value.trim() === '') {\n      return true;\n    }\n    if (typeof value === 'number' && value === 0) {\n      return true;\n    }\n    return false;\n  };\n\n  const handleRangeChange = (\n    key: 'min' | 'max',\n    value: number | string | null\n  ) => {\n    const currentRange = rangeValue.value;\n    const newRange: FilterRange = {\n      ...currentRange,\n      [key]: value ?? undefined,\n    };\n\n    // Clean up null/undefined values\n    if (isEmptyValue(newRange.min)) {\n      delete newRange.min;\n    }\n    if (isEmptyValue(newRange.max)) {\n      delete newRange.max;\n    }\n\n    handleChange(\n      Object.keys(newRange).length > 0 ? (newRange as FilterValue) : null\n    );\n  };\n\n  const handleDateRangeChange = (\n    key: 'start' | 'end',\n    value: string | null\n  ) => {\n    const currentRange = dateRangeValue.value;\n    const newRange: FilterDateRangeValue = {\n      ...currentRange,\n      [key]: value && value.trim() !== '' ? value : undefined,\n    };\n\n    // Clean up null/undefined values\n    if (\n      newRange.start === null ||\n      newRange.start === undefined ||\n      newRange.start === ''\n    ) {\n      delete newRange.start;\n    }\n    if (\n      newRange.end === null ||\n      newRange.end === undefined ||\n      newRange.end === ''\n    ) {\n      delete newRange.end;\n    }\n\n    handleChange(\n      Object.keys(newRange).length > 0 ? (newRange as FilterValue) : null\n    );\n  };\n\n  const removeMultiSelectValue = (valueToRemove: FilterValue) => {\n    if (Array.isArray(props.modelValue)) {\n      const newValues = props.modelValue.filter(v => v !== valueToRemove);\n      handleChange(newValues);\n    }\n  };\n\n  const getOptionLabel = (value: FilterValue) => {\n    const option = selectOptions.value.find(opt => opt.value === value);\n    return option?.label || String(value);\n  };\n\n  const handleScan = () => {\n    // TODO: Implement barcode scanning\n    // For now, emit scan event that parent can handle\n    emit('scan', '');\n  };\n\n  const getSelectedCountryLabel = () => {\n    const option = selectOptions.value.find(\n      opt => opt.value === props.modelValue\n    );\n    return option?.label || String(props.modelValue ?? '');\n  };\n\n  // Load select options based on data source\n  const loadSelectOptions = async () => {\n    if (!props.field.dataSource) {\n      return;\n    }\n\n    const dataSource = props.field.dataSource as FilterDataSource;\n\n    if (dataSource.type === 'static' && dataSource.options) {\n      // Translate static option labels if they are i18n keys\n      selectOptions.value = dataSource.options.map(option => ({\n        ...option,\n        label: option.label.startsWith('filters.')\n          ? t(option.label)\n          : option.label,\n      }));\n      return;\n    }\n\n    if (dataSource.type === 'supabase' && dataSource.table) {\n      const { valueField, labelField } = dataSource;\n\n      if (!valueField || !labelField) {\n        console.warn(\n          'Supabase data source requires both valueField and labelField to be defined',\n          dataSource\n        );\n        selectOptions.value = [];\n        return;\n      }\n\n      try {\n        optionsLoading.value = true;\n\n        let query = supabase\n          .from(dataSource.table as any)\n          .select(`${valueField}, ${labelField}` as any);\n\n        // Apply filters\n        if (dataSource.filters) {\n          dataSource.filters.forEach(filter => {\n            // Map filter operators to Supabase syntax\n            let supabaseOperator: string = filter.operator;\n            if (filter.operator === 'is not') {\n              supabaseOperator = 'not.is';\n            }\n\n            query = query.filter(filter.field, supabaseOperator, filter.value);\n          });\n        }\n\n        // Apply distinct\n        if (dataSource.distinct) {\n          // Note: Supabase doesn't have direct distinct, but we'll handle it client-side\n        }\n\n        // Apply ordering\n        if (dataSource.orderBy) {\n          dataSource.orderBy.forEach(order => {\n            query = query.order(order.field, {\n              ascending: order.direction === 'asc',\n            });\n          });\n        }\n\n        const { data, error } = await query;\n\n        if (error) {\n          console.warn(\n            'Failed to load select options (likely RLS policy issue):',\n            error\n          );\n          selectOptions.value = [];\n          return;\n        }\n\n        if (data) {\n          let options = (data as unknown as Array<Record<string, unknown>>).map(item => ({\n            value: item[valueField] as string | number | boolean,\n            label: item[labelField] as string,\n          }));\n\n          // Handle distinct client-side\n          if (dataSource.distinct) {\n            const seen = new Set();\n            options = options.filter(opt => {\n              if (seen.has(opt.value)) {\n                return false;\n              }\n              seen.add(opt.value);\n              return true;\n            });\n          }\n\n          selectOptions.value = options;\n        }\n      } catch (error) {\n        console.warn(\n          'Failed to load select options (likely RLS policy issue):',\n          error\n        );\n        selectOptions.value = [];\n      } finally {\n        optionsLoading.value = false;\n      }\n    }\n  };\n\n  // Watch for data source changes\n  watch(() => props.field.dataSource, loadSelectOptions, { immediate: true });\n\n  // Watch for model value changes to ensure proper label positioning\n  const hasValue = computed(() => {\n    const value = props.modelValue;\n\n    // Null, undefined, empty string\n    if (value === null || value === undefined || value === '') {\n      return false;\n    }\n\n    // Empty arrays\n    if (Array.isArray(value) && value.length === 0) return false;\n\n    // For objects (ranges), check if they have meaningful values\n    if (typeof value === 'object' && value !== null) {\n      // Empty object\n      if (Object.keys(value).length === 0) return false;\n\n      // For range objects with min/max, only consider it \"has value\" if at least one meaningful value exists\n      if ('min' in value || 'max' in value) {\n        const range = value as FilterRange;\n        const hasMin =\n          range.min !== null &&\n          range.min !== undefined &&\n          range.min !== 0;\n        const hasMax =\n          range.max !== null &&\n          range.max !== undefined &&\n          range.max !== 0;\n        return hasMin || hasMax;\n      }\n\n      // For date range objects with start/end\n      if ('start' in value || 'end' in value) {\n        const range = value as FilterDateRangeValue;\n        const hasStart =\n          range.start !== null &&\n          range.start !== undefined &&\n          range.start !== '';\n        const hasEnd =\n          range.end !== null && range.end !== undefined && range.end !== '';\n        return hasStart || hasEnd;\n      }\n\n      // For other objects, check if any values are meaningful\n      return Object.values(value).some(\n        v => v !== null && v !== undefined && v !== ''\n      );\n    }\n\n    // For numbers, any number including 0 is valid\n    if (typeof value === 'number') return true;\n\n    // For booleans, both true and false are valid values\n    if (typeof value === 'boolean') return true;\n\n    // For strings, check if not empty after trim\n    if (typeof value === 'string') return value.trim() !== '';\n\n    // Default: if we have any other value, consider it \"has value\"\n    return Boolean(value);\n  });\n\n  // Template ref for field wrapper\n  const fieldWrapper = ref<HTMLElement | null>(null);\n\n  // Enhanced label positioning that actually works\n  const updateFieldValueClass = () => {\n    nextTick(() => {\n      if (!fieldWrapper.value) return;\n\n      const fieldElements = fieldWrapper.value.querySelectorAll('.q-field');\n      fieldElements.forEach((fieldElement: Element) => {\n        // Force proper classes based on value state\n        if (hasValue.value) {\n          fieldElement.classList.add('q-field--has-value');\n          fieldElement.classList.add('q-field--float');\n        } else {\n          fieldElement.classList.remove('q-field--has-value');\n          fieldElement.classList.remove('q-field--float');\n        }\n      });\n    });\n  };\n\n  // More aggressive watching to ensure labels stay positioned\n  watch(hasValue, updateFieldValueClass, { immediate: true, flush: 'post' });\n  watch(() => props.modelValue, updateFieldValueClass, {\n    immediate: true,\n    flush: 'post',\n  });\n\n  // Additional watch for string/array values to catch all cases\n  watch(\n    () => props.modelValue,\n    newVal => {\n      // Extra check for edge cases\n      setTimeout(updateFieldValueClass, 50);\n    },\n    { immediate: true, deep: true }\n  );\n\n  // Initialize on mount and after DOM updates\n  onMounted(() => {\n    loadSelectOptions();\n    updateFieldValueClass();\n    // Additional timeout to ensure DOM is fully rendered\n    setTimeout(updateFieldValueClass, 100);\n  });\n\n  // Force update after any interaction\n  const forceUpdateLabels = () => {\n    setTimeout(updateFieldValueClass, 10);\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // MAGENTO-STYLE FILTER FIELDS - CLEAN & CONSISTENT\n  // ===================================================================\n\n  .filter-field-magento-wrapper {\n    width: 100%;\n    min-width: 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  // Compact field container with proper proportions\n  .filter-field-container {\n    display: flex;\n    flex-direction: column;\n    gap: 4px; // Proper gap for good visual spacing\n    min-height: 66px; // Proper height: 18px label + 4px gap + 40px field + 4px margin\n\n    &--checkbox {\n      align-items: flex-start;\n      min-height: 46px; // Proper height for checkboxes\n    }\n  }\n\n  // Well-proportioned labels above fields\n  .filter-field-label {\n    font-size: 13px; // Good readable size\n    font-weight: 500;\n    color: var(--text-primary);\n    line-height: 1.2; // Balanced line height\n    margin-bottom: 0; // No margin - gap handles spacing\n    min-height: 18px; // Proper label height\n    display: flex;\n    align-items: flex-end; // Align text to bottom of label area\n  }\n\n  // Empty spacer to maintain alignment when no label\n  .filter-field-label-spacer {\n    min-height: 18px; // Match label height exactly\n  }\n\n  // Compact Magento-style input styling\n  .filter-input-magento {\n    width: 100%;\n    min-width: 0;\n\n    // Fix the parent field height to match control height via tokens\n    :deep(.q-field) {\n      min-height: var(--control-height-md);\n      height: var(--control-height-md);\n    }\n\n    // Compact Magento-style field control with perfect centering\n    :deep(.q-field__control) {\n      background-color: var(--bg-primary);\n      border: 1px solid var(--border-primary);\n      border-radius: var(--radius-md);\n      min-height: var(--control-height-md);\n      height: var(--control-height-md);\n      padding: 0 12px; // Restored padding for proper spacing\n      transition: border-color 0.2s ease;\n      display: flex; // Enable flex for proper centering\n      align-items: center; // Perfect vertical centering\n\n      &:hover {\n        border-color: var(--border-secondary);\n      }\n    }\n\n    // Focus state\n    :deep(.q-field--focused .q-field__control) {\n      border-color: var(--brand-primary);\n      box-shadow: 0 0 0 3px var(--focus-ring-color, rgba(30, 58, 138, 0.3));\n      border-color: transparent;\n    }\n\n    // Native input styling with perfect vertical centering\n    :deep(.q-field__native) {\n      font-size: 14px;\n      color: var(--text-primary);\n      line-height: 1.4;\n      padding: var(--control-pad-y) 0;\n      height: var(--control-height-md);\n      min-height: var(--control-height-md);\n      display: flex;\n      align-items: center; // Perfect vertical centering\n    }\n\n    // Placeholder styling - normal text, secondary color, perfect centering\n    :deep(.q-placeholder) {\n      color: var(--text-tertiary);\n      font-style: normal;\n      font-size: 14px;\n      line-height: 1.4;\n      height: 100%; // Take full height\n      display: flex;\n      align-items: center; // Perfect vertical centering\n    }\n\n    // Selected value styling with perfect centering\n    :deep(.q-field__selected) {\n      color: var(--text-primary);\n      font-size: 14px;\n      line-height: 1.4;\n      height: 100%; // Take full height\n      display: flex;\n      align-items: center; // Perfect vertical centering\n      min-height: calc(var(--control-height-md) - 2px);\n      padding: 0; // Remove any extra padding\n    }\n\n    // Fix Quasar label positioning for all inputs\n    :deep(.q-field__label) {\n      position: absolute;\n      top: 50%; // Center vertically\n      transform: translateY(-50%); // Perfect center\n      left: 12px;\n      font-size: 14px;\n      color: var(--text-tertiary);\n      pointer-events: none;\n      transition: all 0.2s ease;\n      line-height: 1;\n    }\n\n    // When field has value or is focused, move label up\n    :deep(.q-field--float .q-field__label) {\n      top: -6px;\n      font-size: 12px;\n      color: var(--brand-primary);\n      background: var(--bg-primary);\n      padding: 0 4px;\n      transform: none;\n    }\n  }\n\n  // Icon styling - consistent positioning, size and perfect centering\n  .filter-icon {\n    color: var(--text-secondary);\n    flex-shrink: 0;\n    display: flex;\n    align-items: center; // Perfect vertical centering\n    justify-content: center; // Perfect horizontal centering\n  }\n\n  // Scanner button styling with perfect centering\n  .filter-scanner-btn {\n    color: var(--text-secondary);\n    display: flex;\n    align-items: center; // Perfect vertical centering\n    justify-content: center; // Perfect horizontal centering\n\n    &:hover {\n      color: var(--brand-primary);\n    }\n  }\n\n  // Date picker icon styling with perfect centering\n  .filter-date-icon {\n    color: var(--text-secondary);\n    cursor: pointer;\n    display: flex;\n    align-items: center; // Perfect vertical centering\n    justify-content: center; // Perfect horizontal centering\n\n    &:hover {\n      color: var(--brand-primary);\n    }\n  }\n\n  // Currency display styling\n  .filter-currency {\n    font-size: 14px;\n    color: var(--text-secondary);\n    font-weight: normal;\n  }\n\n  // Checkbox container and styling\n  .filter-checkbox-container {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    min-height: var(--control-height-md);\n  }\n\n  .filter-checkbox-magento {\n    :deep(.q-checkbox__inner) {\n      border: 1px solid var(--border-primary);\n      border-radius: 3px;\n      background: var(--bg-primary);\n    }\n\n    :deep(.q-checkbox__inner:hover) {\n      border-color: var(--border-secondary);\n    }\n  }\n\n  .filter-checkbox-label {\n    font-size: 14px;\n    color: var(--text-primary);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n  }\n\n  // Well-balanced range container - maintains Van-Tot format\n  .filter-range-container {\n    display: flex;\n    align-items: center;\n    gap: 8px; // Proper gap for good visual spacing\n    width: 100%;\n    min-height: 42px; // Match field height exactly\n  }\n\n  .filter-range-input {\n    flex: 1;\n    min-width: 0;\n\n    // Ensure range inputs have exact same height and centering as other fields\n    :deep(.q-field__control) {\n      min-height: var(--control-height-md);\n      height: var(--control-height-md);\n      display: flex; // Enable flex for proper centering\n      align-items: center; // Perfect vertical centering\n    }\n\n    // Range inputs inherit label styling from parent .filter-input-magento\n  }\n\n  .filter-range-separator {\n    font-size: 14px; // Reduced size for compactness\n    color: #666;\n    font-weight: normal;\n    margin: 0 2px; // Reduced margin\n    line-height: 1;\n  }\n\n  // Mobile responsiveness - compact yet touch-friendly\n  @media (max-width: 768px) {\n    .filter-field-container {\n      min-height: 62px; // Mobile: 18px label + 4px gap + 40px field\n      gap: 4px; // Proper gap for mobile\n\n      &--checkbox {\n        min-height: 44px; // Touch-friendly checkboxes\n      }\n    }\n\n    .filter-range-container {\n      flex-direction: column;\n      gap: 8px; // Proper gap on mobile for touch\n\n      .filter-range-separator {\n        display: none;\n      }\n\n      .filter-range-input {\n        :deep(.q-field__control) {\n          min-height: var(--control-height-md);\n          height: var(--control-height-md);\n        }\n      }\n    }\n\n    .filter-input-magento {\n      :deep(.q-field__control) {\n        min-height: var(--control-height-md);\n        height: var(--control-height-md);\n        font-size: 16px; // Prevent zoom on iOS\n        display: flex; // Maintain flex for centering\n        align-items: center; // Perfect vertical centering\n      }\n\n      // Mobile label positioning\n      :deep(.q-field__label) {\n        top: 50%; // Center vertically on mobile too\n        transform: translateY(-50%);\n        font-size: 16px; // Larger on mobile\n      }\n\n      :deep(.q-field--float .q-field__label) {\n        top: -8px; // Adjust for mobile\n        font-size: 14px; // Smaller when floating\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\filters\\FilterPanel.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 231,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 231,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7478, 7481], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7478, 7481], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 299,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 299,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9340, 9343], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9340, 9343], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"filter-panel-container\">\n    <!-- Filter Toggle Button - Top Right -->\n    <div class=\"filter-panel-header\">\n      <q-btn\n        unelevated\n        class=\"filter-toggle-btn app-btn-filter\"\n        :class=\"{ active: isFiltersVisible }\"\n        size=\"md\"\n        padding=\"12px 20px\"\n        @click=\"toggleFilters\"\n      >\n        <template #default>\n          <q-icon\n            :name=\"updatePending ? 'hourglass_empty' : 'tune'\"\n            :class=\"updatePending ? 'animate-spin' : ''\"\n            size=\"16px\"\n            class=\"q-mr-xs\"\n          />\n          {{ t('filters.filterPanel.filtersButton') }}\n          <q-chip\n            v-if=\"activeFiltersCount > 0\"\n            :label=\"activeFiltersCount\"\n            color=\"red\"\n            text-color=\"white\"\n            size=\"sm\"\n            class=\"q-ml-sm filter-count-badge\"\n          />\n        </template>\n      </q-btn>\n    </div>\n\n    <!-- Filter Content - Smooth Collapsible -->\n    <transition name=\"filter-slide\" appear>\n      <div v-show=\"isFiltersVisible\" class=\"filter-content\">\n        <!-- Main Filter Fields Grid - 12 Column Layout -->\n        <div class=\"filter-grid-12col\">\n          <!-- Regular fields (non-boolean) -->\n          <template v-for=\"field in regularFields\" :key=\"field.id\">\n            <div :class=\"getMagentoFieldClass(field)\">\n              <FilterField\n                :field=\"field\"\n                :model-value=\"modelValue[field.id]\"\n                :loading=\"loading\"\n                :disabled=\"disabled\"\n                :readonly=\"readonly\"\n                @update:model-value=\"\n                  value => handleFieldChange(field.id, value)\n                \"\n                @change=\"\n                  (value, oldValue) =>\n                    handleFieldChangeEvent(field, value, oldValue)\n                \"\n                @scan=\"value => handleScanEvent(field, value)\"\n              />\n            </div>\n          </template>\n\n          <!-- Boolean Fields Inline -->\n          <template v-for=\"field in booleanFields\" :key=\"field.id\">\n            <div :class=\"getMagentoFieldClass(field)\">\n              <FilterField\n                :field=\"field\"\n                :model-value=\"modelValue[field.id]\"\n                :loading=\"loading\"\n                :disabled=\"disabled\"\n                :readonly=\"readonly\"\n                @update:model-value=\"\n                  value => handleFieldChange(field.id, value)\n                \"\n                @change=\"\n                  (value, oldValue) =>\n                    handleFieldChangeEvent(field, value, oldValue)\n                \"\n                @scan=\"value => handleScanEvent(field, value)\"\n              />\n            </div>\n          </template>\n        </div>\n\n        <!-- Action Buttons - Right Bottom -->\n        <div class=\"filter-actions\">\n          <q-btn\n            unelevated\n            :label=\"t('filters.filterPanel.clearAllFilters')\"\n            :disable=\"disabled || activeFiltersCount === 0\"\n            class=\"filter-btn filter-btn--clear app-btn-secondary\"\n            size=\"sm\"\n            padding=\"10px 18px\"\n            @click=\"handleClearAll\"\n          />\n          <q-btn\n            unelevated\n            :label=\"t('filters.filterPanel.applyFilters')\"\n            :disable=\"disabled\"\n            class=\"filter-btn filter-btn--apply app-btn-primary\"\n            size=\"sm\"\n            padding=\"10px 20px\"\n            @click=\"handleApplyFilters\"\n          />\n        </div>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref, reactive, watch, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import FilterField from './FilterField.vue';\n  import { useDebounce } from '@/composables/useDebounce';\n  import type {\n    FilterPreset,\n    FilterValues,\n    FilterField as FilterFieldType,\n    FilterChangeEvent,\n    FilterResetEvent,\n    FilterValue,\n  } from '@/types/filters';\n\n  interface Props {\n    preset: FilterPreset;\n    modelValue: FilterValues;\n    loading?: boolean;\n    disabled?: boolean;\n    readonly?: boolean;\n    showHeader?: boolean;\n    showFooter?: boolean;\n    collapsible?: boolean;\n    initiallyCollapsed?: boolean;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', values: FilterValues): void;\n    (e: 'change', event: FilterChangeEvent): void;\n    (e: 'reset', event: FilterResetEvent): void;\n    (e: 'clear'): void;\n    (e: 'apply', values: FilterValues): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    loading: false,\n    disabled: false,\n    readonly: false,\n    showHeader: true,\n    showFooter: true,\n    collapsible: true,\n    initiallyCollapsed: true, // Default to collapsed (hidden)\n  });\n\n  const emit = defineEmits<Emits>();\n\n  // Composables\n  const { t } = useI18n();\n\n  // State\n  const isFiltersVisible = ref(!props.initiallyCollapsed);\n\n  // Computed - separated regular and boolean fields\n  const allFields = computed(() => {\n    return [...props.preset.fields].sort(\n      (a, b) => (a.priority || 999) - (b.priority || 999)\n    );\n  });\n\n  const regularFields = computed(() => {\n    return allFields.value.filter(field => field.type !== 'boolean');\n  });\n\n  const booleanFields = computed(() => {\n    return allFields.value.filter(field => field.type === 'boolean');\n  });\n\n  const activeFiltersCount = computed(() => {\n    return Object.values(props.modelValue).filter(value => {\n      if (value === null || value === undefined || value === '') {\n        return false;\n      }\n      if (Array.isArray(value) && value.length === 0) return false;\n      if (typeof value === 'object' && Object.keys(value).length === 0)\n        return false;\n      // Exclude boolean false values as they are not \"active\" filters\n      if (typeof value === 'boolean' && value === false) return false;\n      return true;\n    }).length;\n  });\n\n  // Methods - New Magento-style 12-column grid system\n  const getMagentoFieldClass = (field: FilterFieldType) => {\n    const baseClasses = ['filter-field-magento'];\n\n    // Compact multi-column grid sizing (3-4 fields per row)\n    if (field.size) {\n      switch (field.size) {\n        case 'xs':\n          baseClasses.push('col-span-3'); // 4 fields per row (3/12)\n          break;\n        case 'sm':\n          baseClasses.push('col-span-3'); // 4 fields per row (3/12)\n          break;\n        case 'md':\n          baseClasses.push('col-span-4'); // 3 fields per row (4/12)\n          break;\n        case 'lg':\n          baseClasses.push('col-span-6'); // 2 fields per row (6/12)\n          break;\n        default:\n          baseClasses.push('col-span-3'); // Default: 4 per row\n      }\n    } else {\n      // Auto-sizing based on field type for compact layout\n      if (field.type === 'number_range' || field.type === 'date_range') {\n        baseClasses.push('col-span-6'); // Ranges take half width (2 per row)\n      } else if (field.type === 'text' && field.id === 'search') {\n        baseClasses.push('col-span-6'); // Search takes half width\n      } else if (field.type === 'boolean') {\n        baseClasses.push('col-span-4'); // Checkboxes: 3 per row\n      } else {\n        baseClasses.push('col-span-3'); // Default: 4 per row\n      }\n    }\n\n    return baseClasses.join(' ');\n  };\n\n  // Debounced filter updates for better performance\n  const { debouncedFn: debouncedEmitUpdate, pending: updatePending } =\n    useDebounce(\n      ((newValues: FilterValues) => {\n        emit('update:modelValue', newValues);\n      }) as any,\n      300 // 300ms debounce delay\n    );\n\n  const handleFieldChange = (fieldId: string, value: FilterValue) => {\n    const newValues: FilterValues = { ...props.modelValue, [fieldId]: value };\n\n    // Clean up null/undefined values\n    if (value === null || value === undefined || value === '') {\n      delete newValues[fieldId];\n    }\n\n    // Use debounced update for text/search fields to improve performance\n    const field = allFields.value.find(f => f.id === fieldId);\n    const shouldDebounce =\n      field?.type === 'text' ||\n      (typeof field?.debounce === 'boolean' && field.debounce === true);\n\n    if (shouldDebounce) {\n      debouncedEmitUpdate(newValues);\n    } else {\n      // Immediate update for selects, toggles, etc.\n      emit('update:modelValue', newValues);\n    }\n  };\n\n  const handleFieldChangeEvent = (\n    field: FilterFieldType,\n    value: FilterValue,\n    oldValue?: FilterValue\n  ) => {\n    const changeEvent: FilterChangeEvent = {\n      field: field.id,\n      value,\n      oldValue,\n      preset: props.preset.id,\n    };\n\n    emit('change', changeEvent);\n  };\n\n  const handleScanEvent = (field: FilterFieldType, scannedValue: string) => {\n    // Handle barcode scanning for fields that support it\n    if (field.scannerButton) {\n      handleFieldChange(field.id, scannedValue);\n    }\n  };\n\n  const handleClearAll = () => {\n    emit('update:modelValue', {});\n    emit('clear');\n  };\n\n  const handleApplyFilters = () => {\n    // Emit apply event for parent to handle\n    emit('apply', props.modelValue);\n  };\n\n  const toggleFilters = () => {\n    isFiltersVisible.value = !isFiltersVisible.value;\n  };\n\n  // Apply default filters on mount\n  onMounted(() => {\n    if (\n      props.preset.defaultFilters &&\n      Object.keys(props.modelValue).length === 0\n    ) {\n      emit('update:modelValue', { ...props.preset.defaultFilters } as any);\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // MAGENTO-STYLE FILTER PANEL - CLEAN & CONSISTENT\n  // ===================================================================\n\n  .filter-panel-container {\n    width: 100%;\n    background: transparent;\n    position: relative;\n  }\n\n  // Header with toggle button - top right position\n  .filter-panel-header {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-bottom: 16px;\n\n    // Filter toggle button styling is now handled by app-btn-filter class in app.scss\n  }\n\n  // Filter slide transition\n  .filter-slide-enter-active {\n    transition: all 0.35s cubic-bezier(0.25, 0.8, 0.25, 1);\n    will-change: transform, opacity;\n  }\n\n  .filter-slide-leave-active {\n    transition: all 0.25s cubic-bezier(0.4, 0, 0.6, 1);\n    will-change: transform, opacity;\n  }\n\n  .filter-slide-enter-from {\n    opacity: 0;\n    transform: translateY(-15px) scale(0.95);\n  }\n\n  .filter-slide-leave-to {\n    opacity: 0;\n    transform: translateY(-10px) scale(0.98);\n  }\n\n  .filter-slide-enter-to,\n  .filter-slide-leave-from {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n\n  // Filter content panel\n  .filter-content {\n    background: #ffffff;\n    border: 1px solid #e1e5e9;\n    border-radius: 8px; // Rounded corners\n    padding: 24px; // Slightly more padding\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08); // Subtle shadow\n    overflow: hidden; // Prevent content overflow during animation\n\n    // Performance optimizations for smooth animation\n    backface-visibility: hidden;\n    transform: translateZ(0); // Force GPU acceleration\n    contain: layout style paint; // Optimize rendering\n  }\n\n  // Well-balanced grid with proper proportions\n  .filter-grid-12col {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    gap: 12px 8px; // Balanced gaps for good visual spacing\n    margin-bottom: 16px; // Proper margin\n\n    // Desktop: 3-4 fields per row\n    @media (min-width: 1200px) {\n      grid-template-columns: repeat(12, 1fr); // 4 fields x 3 cols = 12\n    }\n\n    // Large tablet: 3 fields per row\n    @media (min-width: 1025px) and (max-width: 1199px) {\n      grid-template-columns: repeat(9, 1fr); // 3 fields x 3 cols = 9\n    }\n\n    // Tablet: 2 fields per row\n    @media (min-width: 769px) and (max-width: 1024px) {\n      grid-template-columns: repeat(6, 1fr); // 2 fields x 3 cols = 6\n    }\n\n    // Mobile: 1 field per row\n    @media (max-width: 768px) {\n      grid-template-columns: 1fr;\n      gap: 10px; // Proper mobile spacing\n    }\n  }\n\n  // Well-proportioned field containers with perfect alignment\n  .filter-field-magento {\n    display: flex;\n    flex-direction: column;\n    min-height: 68px; // Consistent with FilterField.vue updated height\n    margin: 0; // Reset any default margins\n    padding: 0; // Reset any default padding\n\n    // Grid column span classes for compact layout\n    &.col-span-3 {\n      grid-column: span 3; // 4 fields per row (desktop)\n    }\n\n    &.col-span-4 {\n      grid-column: span 4; // 3 fields per row (desktop)\n    }\n\n    &.col-span-6 {\n      grid-column: span 6; // 2 fields per row (desktop)\n    }\n\n    &.col-span-12 {\n      grid-column: span 12; // Full width\n    }\n\n    // Responsive behavior for compact layout\n    @media (min-width: 1025px) and (max-width: 1199px) {\n      // Large tablet: adjust for 9-column grid (3 fields per row)\n      &.col-span-3 {\n        grid-column: span 3; // 3 fields per row\n      }\n\n      &.col-span-4 {\n        grid-column: span 3; // 3 fields per row\n      }\n\n      &.col-span-6 {\n        grid-column: span 4.5; // Approximate 2 fields per row\n      }\n    }\n\n    @media (min-width: 769px) and (max-width: 1024px) {\n      // Tablet: adjust for 6-column grid (2 fields per row)\n      &.col-span-3,\n      &.col-span-4 {\n        grid-column: span 3; // 2 fields per row\n      }\n\n      &.col-span-6 {\n        grid-column: span 6; // Full width on tablet\n      }\n    }\n\n    @media (max-width: 768px) {\n      // Mobile: all fields full width\n      &.col-span-3,\n      &.col-span-4,\n      &.col-span-6,\n      &.col-span-12 {\n        grid-column: span 1; // Stack on mobile\n      }\n    }\n  }\n\n  // Action buttons section - larger and clearer\n  .filter-actions {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    gap: 16px; // Increased gap\n    padding-top: 20px; // Increased padding\n    border-top: 1px solid #e0e0e0;\n    margin-top: 20px; // Increased margin\n\n    // Filter action button styling is now handled by app-btn-primary and app-btn-secondary classes\n    // Filter button styling moved to global button classes for consistency\n  }\n\n  // Mobile responsiveness\n  @media (max-width: 768px) {\n    .filter-panel-header {\n      margin-bottom: 12px;\n    }\n\n    .filter-content {\n      padding: 16px;\n    }\n\n    .filter-actions {\n      flex-direction: column;\n      gap: 12px; // Increased gap on mobile\n      padding-top: 16px;\n\n      .filter-btn {\n        width: 100%;\n        justify-content: center;\n        min-height: 48px; // Larger touch target for mobile\n\n        // Enhanced touch feedback\n        &:active {\n          transform: scale(0.98);\n        }\n      }\n    }\n  }\n\n  // Dark mode support now handled by global app.scss classes\n  body.body--dark {\n    .filter-content {\n      background: var(--bg-secondary);\n      border-color: var(--border-primary);\n    }\n\n    .filter-actions {\n      border-color: var(--border-primary);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\CountingEntryWithBatch.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'entry' requires default value to be set.",
        "line": 209,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 209,
        "endColumn": 30
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'existingEntry' requires default value to be set.",
        "line": 221,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 221,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 245,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 245,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7724, 7727], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7724, 7727], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8133, 8136], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8133, 8136], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 301,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 301,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9385, 9388], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9385, 9388], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 317,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 317,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9744, 9747], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9744, 9747], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 389,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 389,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11462, 11465], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11462, 11465], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 410,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 410,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12237, 12240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12237, 12240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 453,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 453,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13639, 13642], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13639, 13642], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"counting-entry-with-batch\">\n    <BaseCard class=\"entry-card\">\n      <q-card-section class=\"entry-header\">\n        <div class=\"flex justify-between items-center\">\n          <div class=\"product-info\">\n            <div class=\"text-h6\">{{ product.name }}</div>\n            <div class=\"text-caption\">\n              {{ product.sku }} • {{ product.category }}\n            </div>\n          </div>\n          <q-chip\n            :color=\"statusColor\"\n            :icon=\"statusIcon\"\n            text-color=\"white\"\n            :label=\"statusLabel\"\n          />\n        </div>\n      </q-card-section>\n\n      <q-card-section class=\"entry-content\">\n        <!-- Current Stock Display -->\n        <div class=\"current-stock-section q-mb-md\">\n          <div class=\"text-subtitle2 q-mb-sm\">\n            {{ $t('inventory.currentStock') }}\n          </div>\n          <div class=\"stock-display\">\n            <q-chip color=\"info\" text-color=\"white\" icon=\"inventory\">\n              {{ currentStock }} {{ product.unit }}\n            </q-chip>\n          </div>\n        </div>\n\n        <!-- Batch Information Section -->\n        <div\n          v-if=\"viewMode === 'full' || hasBatches\"\n          class=\"batch-section q-mb-md\"\n        >\n          <div class=\"text-subtitle2 q-mb-sm\">\n            {{ $t('batch.batchInformation') }}\n          </div>\n\n          <!-- Existing Batches -->\n          <div\n            v-if=\"existingBatches.length > 0\"\n            class=\"existing-batches q-mb-md\"\n          >\n            <div class=\"text-caption q-mb-xs\">\n              {{ $t('batch.existingBatches') }}:\n            </div>\n            <div class=\"batch-list\">\n              <q-card\n                v-for=\"batch in existingBatches\"\n                :key=\"batch.id\"\n                flat\n                bordered\n                class=\"batch-item\"\n                :class=\"{ 'selected-batch': selectedBatch?.id === batch.id }\"\n                @click=\"selectBatch(batch)\"\n              >\n                <q-card-section class=\"q-pa-sm\">\n                  <div class=\"flex justify-between items-center\">\n                    <div>\n                      <div class=\"text-weight-medium\">\n                        {{ batch.batchNumber }}\n                      </div>\n                      <div class=\"text-caption\">\n                        {{ $t('batch.expires') }}:\n                        {{ formatDate(batch.expiryDate) }}\n                      </div>\n                    </div>\n                    <div class=\"text-right\">\n                      <div class=\"text-weight-medium\">\n                        {{ batch.currentQuantity }}\n                      </div>\n                      <div class=\"text-caption\">{{ product.unit }}</div>\n                    </div>\n                  </div>\n                  <q-linear-progress\n                    v-if=\"batch.urgencyLevel !== 'normal'\"\n                    :value=\"getUrgencyValue(batch.urgencyLevel)\"\n                    :color=\"getUrgencyColor(batch.urgencyLevel)\"\n                    size=\"2px\"\n                    class=\"q-mt-xs\"\n                  />\n                </q-card-section>\n              </q-card>\n            </div>\n          </div>\n\n          <!-- New Batch Input (for full mode or when adding new batch) -->\n          <div\n            v-if=\"viewMode === 'full' || addingNewBatch\"\n            class=\"new-batch-input\"\n          >\n            <div class=\"text-caption q-mb-xs\">\n              {{ $t('batch.addNewBatch') }}:\n            </div>\n            <BatchInput\n              v-model=\"newBatchData\"\n              :view-mode=\"viewMode\"\n              :location-id=\"locationId\"\n              @validation-changed=\"onBatchValidationChanged\"\n            />\n          </div>\n\n          <!-- Add New Batch Button (for lite mode) -->\n          <q-btn\n            v-if=\"viewMode === 'lite' && !addingNewBatch\"\n            flat\n            dense\n            color=\"primary\"\n            icon=\"add\"\n            :label=\"$t('batch.addNewBatch')\"\n            size=\"sm\"\n            @click=\"addingNewBatch = true\"\n          />\n        </div>\n\n        <!-- Counted Quantity Input -->\n        <div class=\"counted-quantity-section\">\n          <div class=\"text-subtitle2 q-mb-sm\">\n            {{ $t('counting.countedQuantity') }}\n          </div>\n          <q-input\n            v-model.number=\"countedQuantity\"\n            type=\"number\"\n            min=\"0\"\n            step=\"1\"\n            outlined\n            dense\n            :label=\"$t('counting.enterCount')\"\n            :placeholder=\"$t('counting.enterQuantity')\"\n          >\n            <template #append>\n              <span class=\"text-caption\">{{ product.unit }}</span>\n            </template>\n          </q-input>\n        </div>\n\n        <!-- Discrepancy Display -->\n        <div v-if=\"hasDiscrepancy\" class=\"discrepancy-section q-mt-md\">\n          <q-banner :class=\"discrepancyClass\" rounded dense>\n            <template #avatar>\n              <q-icon :name=\"discrepancyIcon\" />\n            </template>\n            <div class=\"text-subtitle2\">{{ discrepancyMessage }}</div>\n            <div class=\"text-body2\">\n              {{ $t('counting.difference') }}: {{ discrepancyAmount }}\n              {{ product.unit }}\n            </div>\n          </q-banner>\n        </div>\n\n        <!-- Notes Section -->\n        <div v-if=\"viewMode === 'full'\" class=\"notes-section q-mt-md\">\n          <q-input\n            v-model=\"notes\"\n            type=\"textarea\"\n            :label=\"$t('common.notes')\"\n            :placeholder=\"$t('counting.addNotes')\"\n            outlined\n            dense\n            rows=\"2\"\n          />\n        </div>\n      </q-card-section>\n\n      <q-card-actions align=\"right\">\n        <q-btn\n          v-if=\"viewMode === 'lite' && addingNewBatch\"\n          flat\n          color=\"negative\"\n          :label=\"$t('common.cancel')\"\n          @click=\"cancelNewBatch\"\n        />\n        <q-btn\n          color=\"primary\"\n          :label=\"$t('counting.saveCount')\"\n          :loading=\"saving\"\n          :disable=\"!isValid\"\n          unelevated\n          @click=\"saveEntry\"\n        />\n      </q-card-actions>\n    </BaseCard>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useAuthStore } from 'src/stores/auth';\n  import BaseCard from 'src/components/base/BaseCard.vue';\n  import BatchInput from 'src/components/BatchInput.vue';\n  import type {\n    ProductBatchWithDetails,\n    CountingEntryDTO,\n  } from 'src/types/inventory';\n  import {\n    toProductBatchViewModel,\n    type ProductBatchViewModel,\n  } from 'src/viewmodels/inventory';\n  import { useFormatting } from 'src/composables/useFormatting';\n\n  interface Props {\n    entry?: CountingEntryDTO;\n    sessionId: string;\n    practiceId: string;\n    locationId: string;\n    product: {\n      id: string;\n      name: string;\n      sku: string | null;\n      category: string | null;\n      unit: string | null;\n    };\n    viewMode?: 'lite' | 'full';\n    existingEntry?: CountingEntryDTO;\n  }\n\n  interface Emits {\n    (e: 'entry-saved', entry: CountingEntryDTO): void;\n    (e: 'entry-updated', entry: CountingEntryDTO): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    viewMode: 'full',\n  });\n\n  const emit = defineEmits<Emits>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const authStore = useAuthStore();\n  const { formatDate } = useFormatting();\n\n  // Reactive state\n  const countedQuantity = ref<number | null>(null);\n  const selectedBatch = ref<ProductBatchViewModel | null>(null);\n  const newBatchData = ref<any>({});\n  const notes = ref('');\n  const saving = ref(false);\n  const addingNewBatch = ref(false);\n  const batchValidationPassed = ref(true);\n\n  // Computed\n  const existingBatches = computed(() => {\n    const rawBatches = batchStore\n      .batchesByProduct(props.product.id)\n      .filter(batch => batch.locationId === props.locationId);\n    return rawBatches.map(batch => toProductBatchViewModel(batch as any));\n  });\n\n  const hasBatches = computed(() => existingBatches.value.length > 0);\n\n  const currentStock = computed(() => {\n    return existingBatches.value.reduce(\n      (total, batch) => total + batch.currentQuantity,\n      0\n    );\n  });\n\n  const hasDiscrepancy = computed(() => {\n    return (\n      countedQuantity.value !== null &&\n      countedQuantity.value !== currentStock.value\n    );\n  });\n\n  const discrepancyAmount = computed(() => {\n    if (countedQuantity.value === null) return 0;\n    return countedQuantity.value - currentStock.value;\n  });\n\n  const discrepancyClass = computed(() => {\n    if (!hasDiscrepancy.value) return '';\n    return discrepancyAmount.value > 0\n      ? 'bg-orange-1 text-orange-8'\n      : 'bg-red-1 text-red-8';\n  });\n\n  const discrepancyIcon = computed(() => {\n    if (!hasDiscrepancy.value) return '';\n    return discrepancyAmount.value > 0 ? 'trending_up' : 'trending_down';\n  });\n\n  const discrepancyMessage = computed(() => {\n    if (!hasDiscrepancy.value) return '';\n    return discrepancyAmount.value > 0\n      ? t('counting.overageDetected')\n      : t('counting.shortageDetected');\n  });\n\n  const statusColor = computed(() => {\n    if (props.existingEntry) {\n      switch (props.existingEntry.status as any) {\n        case 'completed':\n          return 'positive';\n        case 'reviewed':\n          return 'info';\n        case 'flagged':\n          return 'warning';\n        default:\n          return 'grey';\n      }\n    }\n    return 'grey';\n  });\n\n  const statusIcon = computed(() => {\n    if (props.existingEntry) {\n      switch (props.existingEntry.status as any) {\n        case 'completed':\n          return 'check_circle';\n        case 'reviewed':\n          return 'verified';\n        case 'flagged':\n          return 'flag';\n        default:\n          return 'pending';\n      }\n    }\n    return 'pending';\n  });\n\n  const statusLabel = computed(() => {\n    if (props.existingEntry) {\n      return t(`counting.entryStatus.${props.existingEntry.status}`);\n    }\n    return t('counting.entryStatus.pending');\n  });\n\n  const isValid = computed(() => {\n    const hasValidCount =\n      countedQuantity.value !== null && countedQuantity.value >= 0;\n    const hasValidBatch = !addingNewBatch.value || batchValidationPassed.value;\n    return hasValidCount && hasValidBatch;\n  });\n\n  // Methods\n  const selectBatch = (batch: ProductBatchViewModel) => {\n    selectedBatch.value = selectedBatch.value?.id === batch.id ? null : batch;\n  };\n\n  const getUrgencyValue = (urgencyLevel: string): number => {\n    switch (urgencyLevel) {\n      case 'critical':\n        return 1;\n      case 'high':\n        return 0.8;\n      case 'warning':\n        return 0.6;\n      default:\n        return 0;\n    }\n  };\n\n  const getUrgencyColor = (urgencyLevel: string): string => {\n    switch (urgencyLevel) {\n      case 'critical':\n        return 'negative';\n      case 'high':\n        return 'warning';\n      case 'warning':\n        return 'orange';\n      default:\n        return 'primary';\n    }\n  };\n\n  const onBatchValidationChanged = (isValid: boolean) => {\n    batchValidationPassed.value = isValid;\n  };\n\n  const cancelNewBatch = () => {\n    addingNewBatch.value = false;\n    newBatchData.value = {};\n  };\n\n  const saveEntry = async () => {\n    try {\n      saving.value = true;\n\n      const entryData: any = {\n        session_id: props.sessionId,\n        product_id: props.product.id,\n        location_id: props.locationId,\n        system_quantity: currentStock.value,\n        counted_quantity: countedQuantity.value || 0,\n        discrepancy: discrepancyAmount.value,\n        notes: notes.value,\n        counted_by: authStore.user?.id || '',\n        counted_at: new Date().toISOString(),\n        status: hasDiscrepancy.value ? 'flagged' : 'completed',\n      };\n\n      // Add batch information if available\n      if (selectedBatch.value) {\n        entryData.batch_id = selectedBatch.value.id;\n      }\n\n      // Handle new batch creation if needed\n      if (addingNewBatch.value && newBatchData.value.batchNumber) {\n        // Create new batch first\n        const batchRequest: any = {\n          practice_id: authStore.clinicId,\n          product_id: props.product.id,\n          location_id: props.locationId,\n          batch_number: newBatchData.value.batchNumber,\n          expiry_date: newBatchData.value.expiryDate,\n          initial_quantity: newBatchData.value.quantity || 0,\n          current_quantity: newBatchData.value.quantity || 0,\n          unit_cost: 0, // Default value, can be updated later\n          currency: 'EUR',\n        };\n\n        const newBatch = await batchStore.createBatch(batchRequest);\n        entryData.batch_id = newBatch.id;\n      }\n\n      // Save the counting entry (this would need to be implemented in a counting store)\n      // await countingStore.saveEntry(entryData);\n\n      emit('entry-saved', entryData as CountingEntryDTO);\n\n      $q.notify({\n        type: 'positive',\n        message: t('counting.entrySaved'),\n        position: 'top',\n      });\n    } catch (error) {\n      console.error('Error saving counting entry:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('counting.saveFailed'),\n        position: 'top',\n      });\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  // Initialize with existing entry data\n  if (props.existingEntry) {\n    countedQuantity.value = props.existingEntry.counted_quantity;\n    notes.value = props.existingEntry.notes || '';\n\n    const batchId = (props.existingEntry as any).batch_id;\n    if (batchId) {\n      selectedBatch.value =\n        existingBatches.value.find(b => b.id === batchId) || null;\n    }\n  }\n</script>\n\n<style scoped>\n  .counting-entry-with-batch {\n    margin-bottom: 16px;\n  }\n\n  .entry-card {\n    border-left: 4px solid var(--primary);\n  }\n\n  .product-info .text-h6 {\n    margin-bottom: 4px;\n  }\n\n  .stock-display {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .batch-list {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    max-height: 200px;\n    overflow-y: auto;\n  }\n\n  .batch-item {\n    cursor: pointer;\n    transition: all 0.2s ease;\n  }\n\n  .batch-item:hover {\n    background-color: var(--grey-1);\n  }\n\n  .selected-batch {\n    border-color: var(--primary);\n    background-color: var(--primary-1);\n  }\n\n  .new-batch-input {\n    border: 1px dashed var(--grey-4);\n    border-radius: 4px;\n    padding: var(--control-pad-y) var(--control-pad-x);\n    background-color: var(--grey-1);\n  }\n\n  .discrepancy-section {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(-10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @media (max-width: 768px) {\n    .batch-list {\n      max-height: 150px;\n    }\n\n    .new-batch-input {\n      padding: var(--control-pad-y);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\CountingSessionDialog.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\MobileCountingInterface.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 500,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 500,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15450, 15453], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15450, 15453], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"mobile-counting\" :class=\"{ 'fullscreen-mode': isFullscreen }\">\n    <!-- Method Selection Screen -->\n    <Transition name=\"fade\" mode=\"out-in\">\n      <div\n        v-if=\"currentStep === 'method-selection'\"\n        class=\"method-selection-screen\"\n      >\n        <div class=\"method-header\">\n          <div class=\"header-content\">\n            <q-btn\n              round\n              flat\n              icon=\"close\"\n              color=\"white\"\n              size=\"md\"\n              @click=\"$emit('close')\"\n            />\n            <div class=\"session-info\">\n              <h1 class=\"main-title\">{{ $t('counting.title') }}</h1>\n              <p class=\"session-subtitle\">\n                {{ totalProducts }}\n                {{ $t('counting.totalProducts').toLowerCase() }}\n              </p>\n            </div>\n            <q-btn\n              round\n              flat\n              :icon=\"isFullscreen ? 'fullscreen_exit' : 'fullscreen'\"\n              color=\"white\"\n              size=\"md\"\n              @click=\"toggleFullscreen\"\n            />\n          </div>\n        </div>\n\n        <div class=\"method-content\">\n          <div class=\"method-selection\">\n            <div class=\"selection-header\">\n              <h2>{{ $t('counting.method.title') }}</h2>\n              <p>{{ $t('counting.method.subtitle') }}</p>\n            </div>\n\n            <div class=\"method-options\">\n              <q-card\n                class=\"method-option cursor-pointer\"\n                :class=\"{ selected: selectedMethod === 'scan' }\"\n                @click=\"selectMethod('scan')\"\n              >\n                <div class=\"method-icon scan-icon\">\n                  <q-icon name=\"qr_code_scanner\" />\n                </div>\n                <div class=\"method-info\">\n                  <h3>{{ $t('counting.method.scan') }}</h3>\n                  <p>{{ $t('counting.method.scanDescription') }}</p>\n                </div>\n                <div class=\"method-indicator\">\n                  <q-icon\n                    v-if=\"selectedMethod !== 'scan'\"\n                    name=\"radio_button_unchecked\"\n                  />\n                  <q-icon v-else name=\"check_circle\" />\n                </div>\n              </q-card>\n\n              <q-card\n                class=\"method-option cursor-pointer\"\n                :class=\"{ selected: selectedMethod === 'manual' }\"\n                @click=\"selectMethod('manual')\"\n              >\n                <div class=\"method-icon manual-icon\">\n                  <q-icon name=\"edit\" />\n                </div>\n                <div class=\"method-info\">\n                  <h3>{{ $t('counting.method.manual') }}</h3>\n                  <p>{{ $t('counting.method.manualDescription') }}</p>\n                </div>\n                <div class=\"method-indicator\">\n                  <q-icon\n                    v-if=\"selectedMethod !== 'manual'\"\n                    name=\"radio_button_unchecked\"\n                  />\n                  <q-icon v-else name=\"check_circle\" />\n                </div>\n              </q-card>\n            </div>\n\n            <div class=\"method-actions\">\n              <q-btn\n                :disable=\"!selectedMethod\"\n                color=\"primary\"\n                size=\"lg\"\n                class=\"full-width\"\n                no-caps\n                @click=\"startCounting\"\n              >\n                <q-icon name=\"arrow_forward\" class=\"q-mr-sm\" />\n                {{ $t('counting.method.continue') }}\n              </q-btn>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Transition>\n\n    <!-- Product Counting Flow -->\n    <Transition name=\"slide-up\" mode=\"out-in\">\n      <div v-if=\"currentStep === 'counting'\" class=\"counting-flow\">\n        <!-- Progress Header -->\n        <div class=\"counting-header\">\n          <div class=\"header-background\"></div>\n          <div class=\"header-content\">\n            <q-btn\n              round\n              flat\n              icon=\"arrow_back\"\n              color=\"white\"\n              size=\"md\"\n              @click=\"goBack\"\n            />\n\n            <div class=\"progress-info\">\n              <div class=\"progress-text\">\n                {{\n                  $t('counting.productFlow.progressOf', {\n                    current: currentProductIndex + 1,\n                    total: totalProducts,\n                  })\n                }}\n              </div>\n              <div class=\"progress-bar\">\n                <div\n                  class=\"progress-fill\"\n                  :style=\"{ width: progressPercentage + '%' }\"\n                ></div>\n              </div>\n            </div>\n\n            <button class=\"fullscreen-btn\" @click=\"toggleFullscreen\">\n              <q-icon :name=\"isFullscreen ? 'fullscreen_exit' : 'fullscreen'\" />\n            </button>\n          </div>\n        </div>\n\n        <!-- Scanner Mode -->\n        <div v-if=\"selectedMethod === 'scan'\" class=\"scanner-mode\">\n          <div v-if=\"!showProductInput\" class=\"scanner-interface\">\n            <div class=\"scanner-status\">\n              <h3>{{ $t('counting.scanner.scanning') }}</h3>\n              <p>{{ $t('counting.scanner.placeBarcode') }}</p>\n            </div>\n\n            <div class=\"camera-container\">\n              <video\n                ref=\"videoElement\"\n                autoplay\n                playsinline\n                class=\"camera-video\"\n                @loadedmetadata=\"onVideoLoaded\"\n              ></video>\n\n              <div class=\"scan-overlay\">\n                <div class=\"scan-frame\">\n                  <div class=\"frame-corners\">\n                    <div class=\"corner corner-tl\"></div>\n                    <div class=\"corner corner-tr\"></div>\n                    <div class=\"corner corner-bl\"></div>\n                    <div class=\"corner corner-br\"></div>\n                  </div>\n                  <div class=\"scan-line\"></div>\n                </div>\n              </div>\n\n              <!-- Camera Controls -->\n              <div class=\"camera-controls\">\n                <button\n                  v-if=\"canSwitchCamera\"\n                  class=\"camera-control-btn\"\n                  @click=\"switchCamera\"\n                >\n                  <q-icon name=\"flip_camera_android\" />\n                </button>\n                <button\n                  v-if=\"hasFlash\"\n                  :class=\"['camera-control-btn', { active: flashEnabled }]\"\n                  @click=\"toggleFlash\"\n                >\n                  <q-icon :name=\"flashEnabled ? 'flash_off' : 'flash_on'\" />\n                </button>\n              </div>\n            </div>\n\n            <div class=\"scanner-actions\">\n              <button class=\"switch-method-btn\" @click=\"switchToManual\">\n                <q-icon name=\"edit\" />\n                <span>{{ $t('counting.scanner.switchToManual') }}</span>\n              </button>\n            </div>\n          </div>\n\n          <!-- Product Input (after scan) -->\n          <Transition name=\"slide-up\">\n            <div v-if=\"showProductInput\" class=\"product-input-container\">\n              <ProductCountingCard\n                :product=\"(currentProduct as any)\"\n                :method=\"selectedMethod\"\n                :current-stock=\"currentStock\"\n                :is-loading=\"submitting\"\n                @confirm=\"confirmCount\"\n                @skip=\"skipProduct\"\n                @cancel=\"showProductInput = false\"\n              />\n            </div>\n          </Transition>\n        </div>\n\n        <!-- Manual Mode -->\n        <div v-if=\"selectedMethod === 'manual'\" class=\"manual-mode\">\n          <ProductCountingCard\n            :product=\"(currentProduct as any)\"\n            :method=\"selectedMethod\"\n            :current-stock=\"currentStock\"\n            :is-loading=\"submitting\"\n            @confirm=\"confirmCount\"\n            @skip=\"skipProduct\"\n          />\n        </div>\n      </div>\n    </Transition>\n\n    <!-- Completion Screen -->\n    <Transition name=\"fade\" mode=\"out-in\">\n      <div v-if=\"currentStep === 'complete'\" class=\"completion-screen\">\n        <div class=\"completion-content\">\n          <div class=\"completion-icon\">\n            <q-icon name=\"check_circle\" />\n          </div>\n          <h2>{{ $t('counting.productFlow.allComplete') }}</h2>\n          <div class=\"completion-stats\">\n            <div class=\"stat-item\">\n              <span class=\"stat-value\">{{ countedProducts }}</span>\n              <span class=\"stat-label\">{{\n                $t('counting.countedProducts')\n              }}</span>\n            </div>\n            <div class=\"stat-item\">\n              <span class=\"stat-value\">{{ discrepancies }}</span>\n              <span class=\"stat-label\">{{ $t('counting.discrepancies') }}</span>\n            </div>\n          </div>\n\n          <div class=\"completion-actions\">\n            <button class=\"complete-btn\" @click=\"$emit('session-complete')\">\n              <q-icon name=\"check\" />\n              <span>{{ $t('counting.completeSession') }}</span>\n            </button>\n            <button class=\"restart-btn\" @click=\"restartCounting\">\n              <q-icon name=\"refresh\" />\n              <span>{{ $t('common.restart') }}</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </Transition>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, onUnmounted, watch, nextTick } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import { useInventoryStore } from '@/stores/inventory';\n  import ProductCountingCard from './ProductCountingCard.vue';\n\n  // Types\n  interface Product {\n    id: string;\n    name: string;\n    sku: string;\n    current_stock?: number;\n    minimum_stock?: number;\n    maximum_stock?: number;\n    barcode?: string;\n    gtin?: string;\n    image_url?: string;\n  }\n\n  interface CountEntry {\n    id: string;\n    productName: string;\n    oldStock: number;\n    newStock: number;\n    variance: number;\n    timestamp: Date;\n  }\n\n  type CountingMethod = 'scan' | 'manual';\n  type CountingStep = 'method-selection' | 'counting' | 'complete';\n\n  // Props\n  interface Props {\n    locationId?: string;\n    practiceId?: string;\n    session?: unknown;\n    products?: Product[];\n  }\n\n  const props = defineProps<Props>();\n\n  // Emits\n  const emit = defineEmits<{\n    close: [];\n    'product-counted': [];\n    'session-complete': [];\n  }>();\n\n  // Composables\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const inventoryStore = useInventoryStore();\n\n  // State\n  const currentStep = ref<CountingStep>('method-selection');\n  const selectedMethod = ref<CountingMethod | null>(null);\n  const isFullscreen = ref(false);\n  const currentProductIndex = ref(0);\n  const showProductInput = ref(false);\n  const submitting = ref(false);\n\n  // Camera state\n  const videoElement = ref<HTMLVideoElement | null>(null);\n  const currentStream = ref<MediaStream | null>(null);\n  const canSwitchCamera = ref(false);\n  const hasFlash = ref(false);\n  const flashEnabled = ref(false);\n  const currentFacingMode = ref<'user' | 'environment'>('environment');\n  const scanInterval = ref<number | null>(null);\n\n  // Data\n  const productsList = ref<Product[]>(props.products ?? []);\n  const recentCounts = ref<CountEntry[]>([]);\n\n  // Barcode Detection\n  type BarcodeDetectionResult = { rawValue: string };\n  interface BarcodeDetectorInstance {\n    detect: (video: HTMLVideoElement) => Promise<BarcodeDetectionResult[]>;\n  }\n  interface BarcodeDetectorConstructor {\n    new (): BarcodeDetectorInstance;\n  }\n\n  let barcodeDetector: BarcodeDetectorInstance | null = null;\n\n  // Computed\n  const totalProducts = computed(() => productsList.value.length);\n  const countedProducts = computed(() => recentCounts.value.length);\n  const discrepancies = computed(\n    () => recentCounts.value.filter(c => c.variance !== 0).length\n  );\n\n  const progressPercentage = computed(() => {\n    if (totalProducts.value === 0) return 0;\n    return (currentProductIndex.value / totalProducts.value) * 100;\n  });\n\n  const currentProduct = computed(() => {\n    if (currentProductIndex.value >= productsList.value.length) return null;\n    return productsList.value[currentProductIndex.value];\n  });\n\n  const currentStock = computed(() => {\n    if (!currentProduct.value) return 0;\n    return currentProduct.value.current_stock || 0;\n  });\n\n  // Methods\n  const selectMethod = (method: CountingMethod) => {\n    selectedMethod.value = method;\n  };\n\n  const startCounting = async () => {\n    if (!selectedMethod.value) return;\n\n    currentStep.value = 'counting';\n\n    // Initialize camera for scan mode\n    if (selectedMethod.value === 'scan') {\n      await startCamera();\n    }\n  };\n\n  const goBack = () => {\n    if (currentStep.value === 'counting') {\n      stopCamera();\n      currentStep.value = 'method-selection';\n      currentProductIndex.value = 0;\n      showProductInput.value = false;\n    }\n  };\n\n  const switchToManual = () => {\n    selectedMethod.value = 'manual';\n    stopCamera();\n    showProductInput.value = false;\n  };\n\n  const toggleFullscreen = async () => {\n    try {\n      if (!isFullscreen.value) {\n        if (document.documentElement.requestFullscreen) {\n          await document.documentElement.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.warn('Fullscreen toggle failed:', error);\n    }\n  };\n\n  // Camera Methods\n  const startCamera = async () => {\n    try {\n      if (currentStream.value) {\n        await stopCamera();\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: currentFacingMode.value,\n          width: { ideal: 1920 },\n          height: { ideal: 1080 },\n        },\n      });\n\n      currentStream.value = stream;\n      if (videoElement.value) {\n        videoElement.value.srcObject = stream;\n      }\n\n      // Initialize camera capabilities\n      canSwitchCamera.value = await checkMultipleCameras();\n      hasFlash.value = await checkFlashSupport();\n\n      // Initialize barcode detection\n      if ('BarcodeDetector' in window) {\n        const Detector = (\n          window as { BarcodeDetector?: BarcodeDetectorConstructor }\n        ).BarcodeDetector;\n\n        if (Detector) {\n          barcodeDetector = new Detector();\n          startScanning();\n        }\n      }\n    } catch (error) {\n      console.error('Camera access failed:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('common.error'),\n        caption: 'Camera toegang geweigerd',\n      });\n    }\n  };\n\n  const stopCamera = async () => {\n    if (scanInterval.value) {\n      clearInterval(scanInterval.value);\n      scanInterval.value = null;\n    }\n\n    if (currentStream.value) {\n      currentStream.value.getTracks().forEach(track => track.stop());\n      currentStream.value = null;\n    }\n\n    if (videoElement.value) {\n      videoElement.value.srcObject = null;\n    }\n  };\n\n  const switchCamera = async () => {\n    if (!canSwitchCamera.value) return;\n\n    currentFacingMode.value =\n      currentFacingMode.value === 'user' ? 'environment' : 'user';\n    await stopCamera();\n    await startCamera();\n  };\n\n  const toggleFlash = async () => {\n    if (!hasFlash.value || !currentStream.value) return;\n\n    try {\n      const videoTrack = currentStream.value.getVideoTracks()[0];\n      if (videoTrack) {\n        await videoTrack.applyConstraints({\n          advanced: [{ torch: !flashEnabled.value } as any], // torch is not standard\n        });\n        flashEnabled.value = !flashEnabled.value;\n      }\n    } catch (err) {\n      console.warn('Flash toggle failed:', err);\n    }\n  };\n\n  const checkMultipleCameras = async (): Promise<boolean> => {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      const videoDevices = devices.filter(\n        device => device.kind === 'videoinput'\n      );\n      return videoDevices.length > 1;\n    } catch {\n      return false;\n    }\n  };\n\n  const checkFlashSupport = async (): Promise<boolean> => {\n    try {\n      const stream = currentStream.value;\n      if (!stream) return false;\n\n      const videoTrack = stream.getVideoTracks()[0];\n      if (!videoTrack) return false;\n      \n      const capabilities = videoTrack.getCapabilities();\n      return 'torch' in capabilities;\n    } catch {\n      return false;\n    }\n  };\n\n  const startScanning = () => {\n    if (!barcodeDetector || scanInterval.value) return;\n\n    scanInterval.value = window.setInterval(async () => {\n      if (!videoElement.value || currentStep.value !== 'counting' || !barcodeDetector) return;\n\n      try {\n        const barcodes = await barcodeDetector.detect(videoElement.value);\n        if (barcodes.length > 0 && barcodes[0]) {\n          const barcode = barcodes[0].rawValue;\n          await handleBarcodeScan(barcode);\n        }\n      } catch (error) {\n        // Silently ignore scanning errors\n      }\n    }, 1000);\n  };\n\n  const handleBarcodeScan = async (barcode: string) => {\n    try {\n      // Find product by barcode\n      const foundProduct = productsList.value.find(\n        p => p.barcode === barcode || p.gtin === barcode || p.sku === barcode\n      );\n\n      if (foundProduct) {\n        // Set current product index\n        const productIndex = productsList.value.findIndex(\n          p => p.id === foundProduct.id\n        );\n        if (productIndex !== -1) {\n          currentProductIndex.value = productIndex;\n          showProductInput.value = true;\n\n          $q.notify({\n            type: 'positive',\n            message: t('counting.scanner.productFound'),\n            caption: foundProduct.name,\n            timeout: 2000,\n          });\n        }\n      } else {\n        $q.notify({\n          type: 'warning',\n          message: t('counting.scanner.productNotFound'),\n          caption: `Barcode: ${barcode}`,\n          timeout: 3000,\n        });\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('counting.productFlow.error'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    }\n  };\n\n  // Product Flow Methods\n  const confirmCount = async (count: number) => {\n    if (!currentProduct.value) return;\n\n    try {\n      submitting.value = true;\n\n      const oldStock = currentStock.value;\n      const variance = count - oldStock;\n\n      // Add to recent counts\n      recentCounts.value.push({\n        id: currentProduct.value.id,\n        productName: currentProduct.value.name,\n        oldStock,\n        newStock: count,\n        variance,\n        timestamp: new Date(),\n      });\n\n      $q.notify({\n        type: 'positive',\n        message: t('counting.productFlow.saved'),\n        timeout: 1500,\n      });\n\n      // Emit event\n      emit('product-counted');\n\n      // Move to next product\n      await nextProduct();\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('counting.productFlow.error'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      submitting.value = false;\n    }\n  };\n\n  const skipProduct = async () => {\n    await nextProduct();\n  };\n\n  const nextProduct = async () => {\n    showProductInput.value = false;\n\n    // Optimized transition - shorter wait time\n    await nextTick();\n\n    if (currentProductIndex.value >= totalProducts.value - 1) {\n      // All products counted\n      currentStep.value = 'complete';\n      stopCamera();\n    } else {\n      // Move to next product with immediate update\n      currentProductIndex.value++;\n\n      // Reset for scan mode without delay\n      if (selectedMethod.value === 'scan') {\n        showProductInput.value = false;\n      }\n    }\n  };\n\n  const restartCounting = () => {\n    currentStep.value = 'method-selection';\n    currentProductIndex.value = 0;\n    selectedMethod.value = null;\n    showProductInput.value = false;\n    recentCounts.value = [];\n  };\n\n  const onVideoLoaded = () => {\n    // Video loaded successfully\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    // Load initial data\n    if (props.practiceId) {\n      await inventoryStore.refreshData(props.practiceId);\n    }\n\n    // Initialize products list\n    if (!props.products || props.products.length === 0) {\n      productsList.value = inventoryStore.stockLevels.map(stock => ({\n        id: stock.productId,\n        name: stock.productName ?? 'Onbekend product',\n        sku: stock.productName ?? '', // SKU not available on stock level view\n        current_stock: stock.currentQuantity ?? 0,\n        minimum_stock: stock.minimumQuantity ?? 0,\n        maximum_stock: stock.maximumQuantity ?? 100,\n        barcode: undefined, // Barcode not available on stock level view\n        gtin: undefined,\n        image_url: undefined,\n      }));\n    }\n\n    // Listen for fullscreen changes\n    document.addEventListener('fullscreenchange', () => {\n      isFullscreen.value = !!document.fullscreenElement;\n    });\n  });\n\n  onUnmounted(() => {\n    stopCamera();\n    document.removeEventListener('fullscreenchange', () => {});\n  });\n\n  // Watch for method changes\n  watch(selectedMethod, newMethod => {\n    if (newMethod === 'manual') {\n      stopCamera();\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .mobile-counting {\n    height: 100vh;\n    max-height: 100vh;\n    background: var(--bg-primary);\n    background-image: linear-gradient(\n      135deg,\n      var(--brand-primary),\n      var(--brand-primary-light)\n    );\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    overflow: hidden;\n\n    &.fullscreen-mode {\n      height: 100vh;\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      z-index: 9999;\n    }\n  }\n\n  // Method Selection Screen\n  .method-selection-screen {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n  }\n\n  .method-header {\n    padding: 1.5rem 1rem;\n    color: white;\n\n    .header-content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      max-width: 1200px;\n      margin: 0 auto;\n\n      // Header buttons are now q-btn components\n\n      .session-info {\n        text-align: center;\n        flex: 1;\n\n        .main-title {\n          margin: 0;\n          font-size: 1.75rem;\n          font-weight: var(--font-weight-bold);\n          margin-bottom: 0.25rem;\n          color: white;\n          font-family: var(--font-family);\n        }\n\n        .session-subtitle {\n          margin: 0;\n          font-size: 1rem;\n          opacity: 0.9;\n          font-weight: var(--font-weight-medium);\n          color: white;\n        }\n      }\n    }\n  }\n\n  .method-content {\n    flex: 1;\n    padding: 2rem 1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .method-selection {\n    background: var(--bg-secondary);\n    border-radius: var(--radius-lg);\n    padding: 2rem;\n    max-width: 500px;\n    width: 100%;\n    box-shadow: var(--shadow-xl);\n\n    .selection-header {\n      text-align: center;\n      margin-bottom: 2rem;\n\n      h2 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.5rem;\n        font-weight: var(--font-weight-bold);\n        color: var(--text-primary);\n        font-family: var(--font-family);\n      }\n\n      p {\n        margin: 0;\n        color: var(--text-secondary);\n        font-size: 1rem;\n      }\n    }\n\n    .method-options {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n      margin-bottom: 2rem;\n\n      .method-option {\n        display: flex;\n        align-items: center;\n        gap: 1rem;\n        padding: 1.5rem;\n        border: 2px solid var(--border-primary);\n        border-radius: var(--radius-base);\n        background: var(--bg-primary);\n        cursor: pointer;\n        transition:\n          transform 0.2s ease,\n          box-shadow 0.2s ease;\n        text-align: left;\n        width: 100%;\n\n        &:hover {\n          transform: translateY(-2px);\n          box-shadow: var(--shadow-md);\n        }\n\n        &.selected {\n          border-color: var(--brand-primary);\n          background: var(--bg-primary);\n          box-shadow: var(--shadow-lg);\n\n          .method-icon {\n            background: var(--brand-primary);\n            color: white;\n          }\n\n          .method-indicator {\n            color: var(--brand-primary);\n          }\n        }\n\n        .method-icon {\n          width: 56px;\n          height: 56px;\n          border-radius: var(--radius-base);\n          background: var(--bg-tertiary);\n          color: var(--text-secondary);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 24px;\n          transition:\n            background-color 0.2s ease,\n            color 0.2s ease;\n          flex-shrink: 0;\n        }\n\n        .method-info {\n          flex: 1;\n\n          h3 {\n            margin: 0 0 0.25rem 0;\n            font-size: 1.1rem;\n            font-weight: var(--font-weight-semibold);\n            color: var(--text-primary);\n          }\n\n          p {\n            margin: 0;\n            font-size: 0.9rem;\n            color: var(--text-secondary);\n          }\n        }\n\n        .method-indicator {\n          font-size: 24px;\n          color: var(--text-tertiary);\n          transition: color 0.2s ease;\n        }\n      }\n    }\n\n    .method-actions {\n      display: flex;\n      justify-content: center;\n    }\n  }\n\n  // Counting Flow\n  .counting-flow {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n  }\n\n  .counting-header {\n    position: relative;\n    padding: 1.5rem 1rem;\n    color: white;\n\n    .header-background {\n      position: absolute;\n      inset: 0;\n      background: rgba(0, 0, 0, 0.2);\n      backdrop-filter: blur(20px);\n    }\n\n    .header-content {\n      position: relative;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      max-width: 1200px;\n      margin: 0 auto;\n\n      .back-btn,\n      .fullscreen-btn {\n        width: 44px;\n        height: 44px;\n        border: none;\n        border-radius: 50%;\n        background: rgba(255, 255, 255, 0.2);\n        color: white;\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        transition: all 0.2s ease;\n        backdrop-filter: blur(10px);\n\n        &:hover {\n          background: rgba(255, 255, 255, 0.3);\n          transform: scale(1.05);\n        }\n      }\n\n      .progress-info {\n        text-align: center;\n        flex: 1;\n\n        .progress-text {\n          font-size: 1rem;\n          font-weight: 600;\n          margin-bottom: 0.5rem;\n        }\n\n        .progress-bar {\n          width: 200px;\n          height: 6px;\n          background: rgba(255, 255, 255, 0.3);\n          border-radius: 3px;\n          overflow: hidden;\n          margin: 0 auto;\n\n          .progress-fill {\n            height: 100%;\n            background: rgba(255, 255, 255, 0.9);\n            transition: width 0.3s ease;\n          }\n        }\n      }\n    }\n  }\n\n  // Scanner Mode\n  .scanner-mode {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .scanner-interface {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 1rem;\n\n    .scanner-status {\n      text-align: center;\n      color: white;\n      margin-bottom: 1rem;\n\n      h3 {\n        margin: 0 0 0.5rem 0;\n        font-size: 1.25rem;\n        font-weight: 600;\n      }\n\n      p {\n        margin: 0;\n        opacity: 0.8;\n        font-size: 1rem;\n      }\n    }\n\n    .camera-container {\n      flex: 1;\n      position: relative;\n      border-radius: 16px;\n      overflow: hidden;\n      background: #000;\n      margin-bottom: 1rem;\n      min-height: 400px;\n\n      .camera-video {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n\n      .scan-overlay {\n        position: absolute;\n        inset: 0;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .scan-frame {\n        position: relative;\n        width: 280px;\n        height: 280px;\n\n        .frame-corners {\n          position: absolute;\n          inset: 0;\n\n          .corner {\n            position: absolute;\n            width: 40px;\n            height: 40px;\n            border: 3px solid #00ff88;\n\n            &.corner-tl {\n              top: 0;\n              left: 0;\n              border-right: none;\n              border-bottom: none;\n              border-radius: 12px 0 0 0;\n            }\n\n            &.corner-tr {\n              top: 0;\n              right: 0;\n              border-left: none;\n              border-bottom: none;\n              border-radius: 0 12px 0 0;\n            }\n\n            &.corner-bl {\n              bottom: 0;\n              left: 0;\n              border-right: none;\n              border-top: none;\n              border-radius: 0 0 0 12px;\n            }\n\n            &.corner-br {\n              bottom: 0;\n              right: 0;\n              border-left: none;\n              border-top: none;\n              border-radius: 0 0 12px 0;\n            }\n          }\n        }\n\n        .scan-line {\n          position: absolute;\n          top: 50%;\n          left: 20px;\n          right: 20px;\n          height: 2px;\n          background: linear-gradient(90deg, transparent, #00ff88, transparent);\n          animation: scanning 2s ease-in-out infinite;\n        }\n      }\n\n      .camera-controls {\n        position: absolute;\n        bottom: 1rem;\n        right: 1rem;\n        display: flex;\n        gap: 0.75rem;\n\n        .camera-control-btn {\n          width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          border: none;\n          background: rgba(0, 0, 0, 0.6);\n          color: white;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          transition: all 0.2s ease;\n          backdrop-filter: blur(10px);\n\n          &:hover {\n            background: rgba(0, 0, 0, 0.8);\n            transform: scale(1.1);\n          }\n\n          &.active {\n            background: #00ff88;\n            color: #000;\n          }\n        }\n      }\n    }\n\n    .scanner-actions {\n      .switch-method-btn {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.75rem;\n        width: 100%;\n        padding: 1rem;\n        border: 2px solid rgba(255, 255, 255, 0.3);\n        border-radius: 12px;\n        background: rgba(255, 255, 255, 0.1);\n        color: white;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        backdrop-filter: blur(10px);\n\n        &:hover {\n          background: rgba(255, 255, 255, 0.2);\n          border-color: rgba(255, 255, 255, 0.5);\n        }\n      }\n    }\n  }\n\n  .product-input-container {\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex: 1;\n  }\n\n  // Manual Mode\n  .manual-mode {\n    flex: 1;\n    padding: 1rem;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    overflow-y: auto;\n  }\n\n  // Completion Screen\n  .completion-screen {\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    overflow: hidden;\n  }\n\n  .completion-content {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(20px);\n    border-radius: 24px;\n    padding: 3rem 2rem;\n    text-align: center;\n    max-width: 500px;\n    width: 100%;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n\n    .completion-icon {\n      font-size: 80px;\n      color: #10b981;\n      margin-bottom: 1.5rem;\n    }\n\n    h2 {\n      margin: 0 0 2rem 0;\n      font-size: 1.75rem;\n      font-weight: 700;\n      color: #1a202c;\n    }\n\n    .completion-stats {\n      display: flex;\n      justify-content: center;\n      gap: 2rem;\n      margin-bottom: 2rem;\n\n      .stat-item {\n        text-align: center;\n\n        .stat-value {\n          display: block;\n          font-size: 2rem;\n          font-weight: 800;\n          color: #1a202c;\n          line-height: 1;\n        }\n\n        .stat-label {\n          display: block;\n          font-size: 0.9rem;\n          color: #64748b;\n          margin-top: 0.25rem;\n        }\n      }\n    }\n\n    .completion-actions {\n      display: flex;\n      flex-direction: column;\n      gap: 1rem;\n\n      .complete-btn,\n      .restart-btn {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.75rem;\n        padding: 1rem 1.5rem;\n        border: none;\n        border-radius: 12px;\n        font-size: 1.1rem;\n        font-weight: 600;\n        cursor: pointer;\n        transition: all 0.2s ease;\n        min-height: 56px;\n      }\n\n      .complete-btn {\n        background: linear-gradient(135deg, #10b981, #059669);\n        color: white;\n\n        &:hover {\n          transform: translateY(-2px);\n          box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);\n        }\n      }\n\n      .restart-btn {\n        background: var(--color-surface-secondary);\n        color: #64748b;\n        border: 2px solid #e2e8f0;\n\n        &:hover {\n          background: var(--bg-tertiary);\n          border-color: #cbd5e0;\n        }\n      }\n    }\n  }\n\n  // Animations - GPU optimized\n  @keyframes scanning {\n    0%,\n    100% {\n      opacity: 0;\n      transform: translateY(-50%) scaleX(0) translateZ(0);\n    }\n    50% {\n      opacity: 1;\n      transform: translateY(-50%) scaleX(1) translateZ(0);\n    }\n  }\n\n  // Transitions - Performance optimized\n  .fade-enter-active,\n  .fade-leave-active {\n    transition: opacity 0.3s ease;\n    will-change: opacity;\n  }\n\n  .fade-enter-from,\n  .fade-leave-to {\n    opacity: 0;\n  }\n\n  .slide-up-enter-active,\n  .slide-up-leave-active {\n    transition:\n      transform 0.3s ease,\n      opacity 0.3s ease;\n    will-change: transform, opacity;\n  }\n\n  .slide-up-enter-from,\n  .slide-up-leave-to {\n    opacity: 0;\n    transform: translateY(20px) translateZ(0);\n  }\n\n  // Responsive Design\n  @media (max-width: 768px) {\n    .method-selection {\n      padding: 1.5rem;\n      margin: 1rem;\n\n      .method-options .method-option {\n        padding: 1rem;\n\n        .method-icon {\n          width: 48px;\n          height: 48px;\n          font-size: 20px;\n        }\n\n        .method-info h3 {\n          font-size: 1rem;\n        }\n\n        .method-info p {\n          font-size: 0.85rem;\n        }\n      }\n    }\n\n    .completion-content {\n      padding: 2rem 1.5rem;\n\n      .completion-stats {\n        gap: 1.5rem;\n\n        .stat-item .stat-value {\n          font-size: 1.5rem;\n        }\n      }\n\n      .completion-actions {\n        .complete-btn,\n        .restart-btn {\n          padding: 0.875rem 1.25rem;\n        }\n      }\n    }\n\n    .counting-header .header-content .progress-info .progress-bar {\n      width: 150px;\n    }\n  }\n\n  // Dark mode support\n  @media (prefers-color-scheme: dark) {\n    .method-selection,\n    .completion-content {\n      background: rgba(45, 55, 72, 0.95);\n\n      h2,\n      h3 {\n        color: #f7fafc;\n      }\n\n      .method-option {\n        background: rgba(45, 55, 72, 0.8);\n        border-color: rgba(255, 255, 255, 0.1);\n\n        &.selected {\n          background: rgba(102, 126, 234, 0.2);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\ProductCountingCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\QuickAdjustmentDialog.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'selectedProduct' requires default value to be set.",
        "line": 559,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 559,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 559,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 559,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19228, 19231], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19228, 19231], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'selectedLocation' requires default value to be set.",
        "line": 560,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 560,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 569,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 569,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19465, 19468], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19465, 19468], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 570,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 570,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19505, 19508], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19505, 19508], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 589,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 589,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20070, 20073], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20070, 20073], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 590,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 590,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20114, 20117], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20114, 20117], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 595,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 595,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20280, 20283], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20280, 20283], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 599,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 599,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20384, 20387], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20384, 20387], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 657,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 657,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22204, 22207], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22204, 22207], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 780,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 780,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25127, 25130], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25127, 25130], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 787,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 787,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25377, 25380], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25377, 25380], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 789,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 789,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25423, 25426], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25423, 25426], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 789,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 789,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25461, 25464], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25461, 25464], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 801,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 801,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25752, 25755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25752, 25755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 803,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 803,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25798, 25801], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25798, 25801], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 803,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 803,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25836, 25839], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25836, 25839], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 830,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 830,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26485, 26488], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26485, 26488], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 869,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 869,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27709, 27712], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27709, 27712], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 870,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 870,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27796, 27799], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27796, 27799], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 871,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 871,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27855, 27858], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27855, 27858], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 887,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 887,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28293, 28296], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28293, 28296], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 919,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 919,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29372, 29375], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29372, 29375], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 921,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 921,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29485, 29488], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29485, 29488], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 922,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 922,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29550, 29553], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29550, 29553], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1019,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1019,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32323, 32326], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32323, 32326], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1048,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1048,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [33568, 33571], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [33568, 33571], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 27,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    :title=\"$t('inventory.quickAdjustment')\"\n    :subtitle=\"$t('inventory.adjustStockLevels')\"\n    icon=\"tune\"\n    size=\"lg\"\n    :persistent=\"true\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n  >\n    <template #header>\n      <div class=\"row items-center q-pa-md\">\n        <q-icon name=\"tune\" size=\"24px\" class=\"q-mr-md\" />\n        <div class=\"col\">\n          <div class=\"text-h6\">{{ $t('inventory.quickAdjustment') }}</div>\n          <div class=\"text-subtitle2\">\n            {{ $t('inventory.adjustStockLevels') }}\n          </div>\n        </div>\n        <q-space />\n        <q-chip\n          v-if=\"realtimeConnected\"\n          size=\"sm\"\n          icon=\"wifi\"\n          color=\"positive\"\n          text-color=\"white\"\n          class=\"q-mr-sm\"\n          aria-label=\"Live realtime\"\n        >\n          {{ $t('common.live') }}\n        </q-chip>\n      </div>\n    </template>\n\n    <!-- Product Selection Step -->\n    <div v-if=\"!selectedProduct\" class=\"q-pa-md\">\n      <div class=\"step-container\">\n        <div class=\"step-header\">\n          <q-icon name=\"search\" size=\"20px\" color=\"primary\" />\n          <span class=\"text-h6 q-ml-sm\">{{\n            $t('inventory.selectProduct')\n          }}</span>\n        </div>\n\n        <div class=\"row q-gutter-md q-mt-md\">\n          <div class=\"col\">\n            <q-select\n              v-model=\"internalSelectedProduct\"\n              :options=\"availableProducts\"\n              option-label=\"name\"\n              option-value=\"id\"\n              :label=\"$t('inventory.searchProduct')\"\n              outlined\n              clearable\n              use-input\n              class=\"modern-select\"\n              :loading=\"productSearchLoading\"\n              @filter=\"filterProducts\"\n              @update:model-value=\"onProductSelected\"\n            >\n              <template #prepend>\n                <q-icon name=\"inventory_2\" />\n              </template>\n              <template #option=\"scope\">\n                <q-item v-bind=\"scope.itemProps\">\n                  <q-item-section avatar>\n                    <q-avatar size=\"40px\" class=\"bg-grey-3\">\n                      <q-img\n                        v-if=\"scope.opt.image_url\"\n                        :src=\"scope.opt.image_url\"\n                        spinner-color=\"primary\"\n                        style=\"height: 40px; width: 40px\"\n                      />\n                      <q-icon v-else name=\"inventory_2\" color=\"grey-6\" />\n                    </q-avatar>\n                  </q-item-section>\n                  <q-item-section>\n                    <q-item-label>{{ scope.opt.name }}</q-item-label>\n                    <q-item-label caption>\n                      SKU: {{ scope.opt.sku }} • {{ scope.opt.brand }}\n                    </q-item-label>\n                  </q-item-section>\n                  <q-item-section side>\n                    <q-chip\n                      size=\"sm\"\n                      :color=\"getStockStatusColor(scope.opt)\"\n                      text-color=\"white\"\n                    >\n                      {{ scope.opt.total_stock || 0 }} {{ scope.opt.unit }}\n                    </q-chip>\n                  </q-item-section>\n                </q-item>\n              </template>\n              <template #no-option>\n                <q-item>\n                  <q-item-section class=\"text-grey\">\n                    <div class=\"text-center q-pa-md\">\n                      <q-icon\n                        name=\"search_off\"\n                        size=\"2rem\"\n                        color=\"grey-5\"\n                        class=\"q-mb-sm\"\n                      />\n                      <div class=\"text-subtitle1\">\n                        {{ $t('inventory.noProductsFound') }}\n                      </div>\n                      <div class=\"text-caption text-grey-6\">\n                        {{ $t('inventory.tryDifferentSearchTerm') }}\n                      </div>\n                    </div>\n                  </q-item-section>\n                </q-item>\n              </template>\n            </q-select>\n          </div>\n          <div class=\"col-auto\">\n            <q-btn\n              icon=\"qr_code_scanner\"\n              color=\"primary\"\n              :size=\"$q.screen.xs ? 'md' : 'lg'\"\n              :label=\"$q.screen.xs ? '' : $t('inventory.scanBarcode')\"\n              class=\"scan-button\"\n              :title=\"$t('inventory.scanBarcode')\"\n              aria-label=\"Scan barcode\"\n              @click=\"showBarcodeScanner = true\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Enhanced Product Info Card -->\n    <div v-if=\"selectedProduct\" class=\"q-pa-md\">\n      <q-card\n        flat\n        bordered\n        class=\"product-card bg-gradient-to-r from-blue-50 to-indigo-50\"\n      >\n        <q-card-section class=\"q-pa-lg\">\n          <div class=\"row items-center q-gutter-lg\">\n            <!-- Product Image/Icon -->\n            <q-avatar size=\"80px\" class=\"product-avatar\">\n              <q-img\n                v-if=\"selectedProduct.image_url\"\n                :src=\"selectedProduct.image_url\"\n                spinner-color=\"primary\"\n                style=\"height: 80px; width: 80px\"\n                class=\"rounded-borders\"\n              />\n              <div\n                v-else\n                class=\"bg-primary text-white flex flex-center\"\n                style=\"height: 80px; width: 80px\"\n              >\n                <q-icon name=\"inventory_2\" size=\"40px\" />\n              </div>\n            </q-avatar>\n\n            <!-- Product Details -->\n            <div class=\"col\">\n              <div class=\"text-h5 text-weight-bold text-grey-8 q-mb-xs\">\n                {{ selectedProduct.name }}\n              </div>\n              <div class=\"text-subtitle1 text-grey-6 q-mb-sm\">\n                SKU: {{ selectedProduct.sku }} •\n                {{ selectedProduct.brand || $t('quickAdjustment.noProduct') }}\n              </div>\n              <div\n                v-if=\"selectedProduct.description\"\n                class=\"text-body2 text-grey-7 q-mb-md\"\n              >\n                {{ selectedProduct.description }}\n              </div>\n\n              <!-- Stock Status Row -->\n              <div class=\"row items-center q-gutter-md\">\n                <q-chip\n                  :color=\"getStockStatusColor(selectedProduct)\"\n                  text-color=\"white\"\n                  size=\"md\"\n                  :icon=\"getStockStatusIcon(selectedProduct)\"\n                >\n                  <span class=\"text-weight-bold\"\n                    >{{ getCurrentStock() }} {{ selectedProduct.unit }}</span\n                  >\n                </q-chip>\n\n                <div v-if=\"selectedLocation\" class=\"text-caption text-grey-6\">\n                  📍 {{ selectedLocation.name }}\n                </div>\n                <q-chip\n                  v-else\n                  color=\"orange\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                  icon=\"warning\"\n                >\n                  {{ $t('inventory.noLocationSelected') }}\n                </q-chip>\n\n                <div\n                  v-if=\"selectedProduct.price\"\n                  class=\"text-caption text-grey-6\"\n                >\n                  💰 €{{ Number(selectedProduct.price).toFixed(2) }}\n                </div>\n              </div>\n            </div>\n\n            <!-- Actions -->\n            <div class=\"col-auto\">\n              <q-btn\n                flat\n                round\n                icon=\"edit\"\n                class=\"text-grey-6\"\n                :title=\"$t('inventory.changeProduct')\"\n                size=\"lg\"\n                aria-label=\"Change product\"\n                @click=\"internalSelectedProduct = null\"\n              />\n            </div>\n          </div>\n\n          <!-- Additional Product Info -->\n          <div\n            v-if=\"selectedProduct.barcode || selectedProduct.category\"\n            class=\"q-mt-md q-pt-md border-top\"\n          >\n            <div class=\"row q-gutter-md\">\n              <div v-if=\"selectedProduct.category\" class=\"col-auto\">\n                <q-chip size=\"sm\" outline color=\"blue-grey\">\n                  <q-icon name=\"category\" size=\"xs\" class=\"q-mr-xs\" />\n                  {{ selectedProduct.category }}\n                </q-chip>\n              </div>\n              <div v-if=\"selectedProduct.barcode\" class=\"col-auto\">\n                <q-chip size=\"sm\" outline color=\"blue-grey\">\n                  <q-icon name=\"qr_code\" size=\"xs\" class=\"q-mr-xs\" />\n                  {{ selectedProduct.barcode }}\n                </q-chip>\n              </div>\n            </div>\n          </div>\n        </q-card-section>\n      </q-card>\n    </div>\n\n    <!-- Location Selection (if no location provided) -->\n    <div v-if=\"selectedProduct && !selectedLocation\" class=\"q-pa-md\">\n      <div class=\"step-container\">\n        <div class=\"step-header\">\n          <q-icon name=\"place\" size=\"20px\" color=\"orange\" />\n          <span class=\"text-h6 q-ml-sm\">{{\n            $t('inventory.selectLocation')\n          }}</span>\n          <q-chip size=\"sm\" color=\"orange\" text-color=\"white\" class=\"q-ml-sm\">{{\n            $t('common.required')\n          }}</q-chip>\n        </div>\n\n        <q-select\n          v-model=\"internalSelectedLocation\"\n          :options=\"availableLocations\"\n          option-label=\"name\"\n          option-value=\"id\"\n          :label=\"$t('inventory.selectLocation')\"\n          outlined\n          class=\"modern-select q-mt-md\"\n        >\n          <template #prepend>\n            <q-icon name=\"place\" />\n          </template>\n        </q-select>\n      </div>\n    </div>\n\n    <!-- Modern Adjustment Form -->\n    <div v-if=\"selectedProduct\" class=\"q-pa-md adjustment-section\">\n      <div class=\"adjustment-container\">\n        <!-- Step 1: Adjustment Type -->\n        <div class=\"adjustment-step\">\n          <div class=\"step-header\">\n            <q-icon name=\"tune\" size=\"20px\" color=\"primary\" />\n            <span class=\"text-h6 q-ml-sm\">{{\n              $t('inventory.adjustmentType')\n            }}</span>\n          </div>\n          <q-btn-toggle\n            v-model=\"adjustmentType\"\n            toggle-color=\"primary\"\n            :options=\"adjustmentTypeOptions\"\n            class=\"modern-toggle q-mt-md\"\n            :size=\"$q.screen.xs ? 'md' : 'lg'\"\n            spread\n          />\n        </div>\n\n        <!-- Step 2: Quantity Input -->\n        <div class=\"adjustment-step\">\n          <div class=\"step-header\">\n            <q-icon name=\"pin\" size=\"20px\" color=\"primary\" />\n            <span class=\"text-h6 q-ml-sm\">{{ getQuantityLabel() }}</span>\n          </div>\n\n          <div class=\"quantity-section q-mt-md\">\n            <div class=\"row q-gutter-md items-end\">\n              <div class=\"col\">\n                <q-input\n                  v-model.number=\"quantityInput\"\n                  type=\"number\"\n                  :label=\"getQuantityLabel()\"\n                  outlined\n                  min=\"0\"\n                  class=\"quantity-input\"\n                  :error=\"quantityError\"\n                  :error-message=\"quantityErrorMessage\"\n                >\n                  <template #prepend>\n                    <q-icon :name=\"getQuantityIcon()\" />\n                  </template>\n                  <template #append>\n                    <span class=\"text-caption text-grey-6\">{{\n                      selectedProduct.unit\n                    }}</span>\n                  </template>\n                </q-input>\n              </div>\n            </div>\n\n            <!-- Quick Amount Buttons -->\n            <div class=\"quick-amounts q-mt-md\">\n              <div class=\"text-caption text-grey-6 q-mb-sm\">\n                {{ $t('inventory.quickAmounts') }}\n              </div>\n              <div class=\"row q-gutter-xs\">\n                <q-btn\n                  v-for=\"amount in quickAmounts\"\n                  :key=\"amount\"\n                  :label=\"amount.toString()\"\n                  :size=\"$q.screen.xs ? 'xs' : 'sm'\"\n                  outline\n                  color=\"primary\"\n                  class=\"quick-amount-btn\"\n                  @click=\"setQuickAmount(amount)\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Step 3: Reason Selection -->\n        <div class=\"adjustment-step\">\n          <div class=\"step-header\">\n            <q-icon name=\"psychology\" size=\"20px\" color=\"primary\" />\n            <span class=\"text-h6 q-ml-sm\">{{ $t('inventory.reason') }}</span>\n            <q-chip\n              size=\"sm\"\n              color=\"orange\"\n              text-color=\"white\"\n              class=\"q-ml-sm\"\n              >{{ $t('common.required') }}</q-chip\n            >\n          </div>\n          <q-select\n            v-model=\"selectedReason\"\n            :options=\"reasonOptions\"\n            :label=\"$t('inventory.selectReason')\"\n            outlined\n            emit-value\n            map-options\n            class=\"modern-select q-mt-md\"\n            :error=\"reasonError\"\n            :error-message=\"reasonErrorMessage\"\n          >\n            <template #prepend>\n              <q-icon name=\"assignment\" />\n            </template>\n          </q-select>\n        </div>\n\n        <!-- Step 4: Notes (Optional) -->\n        <div class=\"adjustment-step\">\n          <div class=\"step-header\">\n            <q-icon name=\"note_add\" size=\"20px\" color=\"grey-6\" />\n            <span class=\"text-h6 q-ml-sm text-grey-7\">{{\n              $t('inventory.notes')\n            }}</span>\n            <q-chip\n              size=\"sm\"\n              color=\"grey-5\"\n              text-color=\"white\"\n              class=\"q-ml-sm\"\n              >{{ $t('common.optional') }}</q-chip\n            >\n          </div>\n          <q-input\n            v-model=\"notes\"\n            :label=\"$t('inventory.notes')\"\n            type=\"textarea\"\n            rows=\"2\"\n            outlined\n            :placeholder=\"$t('inventory.notesPlaceholder')\"\n            class=\"q-mt-md\"\n          >\n            <template #prepend>\n              <q-icon name=\"edit_note\" />\n            </template>\n          </q-input>\n        </div>\n\n        <!-- Enhanced Preview Card -->\n        <q-card\n          v-if=\"preview && isFormValid\"\n          flat\n          bordered\n          class=\"preview-card bg-gradient-to-r from-blue-50 to-green-50 q-mt-lg\"\n        >\n          <q-card-section class=\"q-pa-md\">\n            <div class=\"row items-center q-mb-md\">\n              <q-icon name=\"preview\" size=\"24px\" color=\"blue-7\" />\n              <span class=\"text-h6 q-ml-sm text-blue-8\">{{\n                $t('inventory.preview')\n              }}</span>\n              <q-space />\n              <q-chip size=\"sm\" color=\"blue\" text-color=\"white\">\n                {{\n                  adjustmentType === 'increase'\n                    ? 'Verhogen'\n                    : adjustmentType === 'decrease'\n                      ? 'Verlagen'\n                      : 'Instellen'\n                }}\n              </q-chip>\n            </div>\n            <div class=\"preview-content\">\n              <div class=\"row q-gutter-lg items-center\">\n                <div class=\"col text-center\">\n                  <div class=\"text-caption text-grey-6\">\n                    {{ $t('inventory.current') }}\n                  </div>\n                  <div class=\"text-h5 text-weight-bold\">\n                    {{ preview.current }}\n                  </div>\n                  <div class=\"text-caption\">{{ selectedProduct.unit }}</div>\n                </div>\n                <div class=\"col-auto flex items-center\">\n                  <q-icon\n                    :name=\"preview.change >= 0 ? 'arrow_forward' : 'arrow_back'\"\n                    size=\"24px\"\n                    :color=\"preview.change >= 0 ? 'positive' : 'negative'\"\n                  />\n                  <span\n                    class=\"q-mx-sm text-h6 text-weight-bold\"\n                    :class=\"\n                      preview.change >= 0 ? 'text-positive' : 'text-negative'\n                    \"\n                  >\n                    {{ preview.change >= 0 ? '+' : '' }}{{ preview.change }}\n                  </span>\n                </div>\n                <div class=\"col text-center\">\n                  <div class=\"text-caption text-grey-6\">\n                    {{ $t('inventory.newQuantity') }}\n                  </div>\n                  <div\n                    class=\"text-h5 text-weight-bold\"\n                    :class=\"getStatusTextClass(preview.newStatus)\"\n                  >\n                    {{ preview.newQuantity }}\n                  </div>\n                  <div class=\"text-caption\">{{ selectedProduct.unit }}</div>\n                </div>\n              </div>\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n    </div>\n\n    <!-- Actions -->\n    <template #actions>\n      <q-btn\n        :label=\"$t('common.cancel')\"\n        flat\n        :size=\"$q.screen.xs ? 'md' : 'lg'\"\n        class=\"q-mr-md\"\n        aria-label=\"Cancel\"\n        @click=\"$emit('update:modelValue', false)\"\n      />\n      <q-btn\n        :label=\"$t('inventory.adjustStock')\"\n        color=\"primary\"\n        :size=\"$q.screen.xs ? 'md' : 'lg'\"\n        unelevated\n        :loading=\"saving\"\n        :disable=\"!isFormValid\"\n        class=\"save-button\"\n        aria-label=\"Adjust stock\"\n        @click=\"performAdjustment\"\n      >\n        <template #loading>\n          <q-spinner-hourglass class=\"on-left\" />\n          {{ $t('inventory.adjusting') }}\n        </template>\n      </q-btn>\n    </template>\n\n    <!-- Validation Summary -->\n    <q-banner\n      v-if=\"!isFormValid && (quantityInput !== null || selectedReason)\"\n      rounded\n      class=\"validation-banner q-ma-md\"\n      :class=\"getValidationBannerClass()\"\n    >\n      <template #avatar>\n        <q-icon name=\"info\" />\n      </template>\n      <div class=\"text-subtitle2\">\n        {{ $t('inventory.completeRequiredFields') }}\n      </div>\n      <ul class=\"q-mt-sm\">\n        <li v-if=\"quantityError\">{{ quantityErrorMessage }}</li>\n        <li v-if=\"reasonError\">{{ reasonErrorMessage }}</li>\n        <li v-if=\"!selectedProduct\">\n          {{ $t('inventory.selectProductFirst') }}\n        </li>\n        <li v-if=\"!selectedLocation\">\n          {{ $t('inventory.selectLocationFirst') }}\n        </li>\n      </ul>\n    </q-banner>\n    <!-- Barcode Scanner -->\n    <BarcodeScanner v-model=\"showBarcodeScanner\" @scan=\"handleBarcodeScan\" />\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch, onMounted, onUnmounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useProductsStore } from 'src/stores/products';\n  import { useClinicStore } from 'src/stores/clinic';\n  import { realtimeService } from 'src/services/supabase';\n  import BarcodeScanner from 'src/components/BarcodeScanner.vue';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  import type {\n    StockUpdateRequest,\n    MovementType,\n    ReasonCode,\n    PracticeLocation,\n  } from 'src/types/inventory';\n\n  // Props & Emits\n  interface Props {\n    modelValue: boolean;\n    selectedProduct?: any;\n    selectedLocation?: PracticeLocation;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    modelValue: false,\n  });\n\n  const emit = defineEmits<{\n    'update:modelValue': [value: boolean];\n    'stock-updated': [product: any];\n    'product-selected': [product: any];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const inventoryStore = useInventoryStore();\n  const authStore = useAuthStore();\n  const productsStore = useProductsStore();\n  const clinicStore = useClinicStore();\n\n  // State\n  const adjustmentType = ref<'increase' | 'decrease' | 'set'>('increase');\n  const quantityInput = ref<number | null>(null);\n  const selectedReason = ref<ReasonCode | null>(null);\n  const notes = ref('');\n  const saving = ref(false);\n\n  // Product selection state\n  const internalSelectedProduct = ref<any>(null);\n  const availableProducts = ref<any[]>([]);\n  const showBarcodeScanner = ref(false);\n  const productSearchLoading = ref(false);\n\n  // Location selection state\n  const internalSelectedLocation = ref<any>(null);\n\n  // Realtime state\n  const realtimeConnected = ref(false);\n  const inventoryChannel = ref<any>(null);\n\n  // Quick amount buttons\n  const quickAmounts = [1, 5, 10, 25, 50, 100];\n\n  // Computed\n  const adjustmentTypeOptions = computed(() => [\n    {\n      label: t('inventory.increase'),\n      value: 'increase',\n      icon: 'add_circle',\n      color: 'positive',\n    },\n    {\n      label: t('inventory.decrease'),\n      value: 'decrease',\n      icon: 'remove_circle',\n      color: 'negative',\n    },\n    {\n      label: t('inventory.setTo'),\n      value: 'set',\n      icon: 'edit',\n      color: 'primary',\n    },\n  ]);\n\n  const reasonOptions = computed(() => [\n    { label: t('inventory.reasons.adjustment'), value: 'adjustment' },\n    { label: t('inventory.reasons.damage'), value: 'damage' },\n    { label: t('inventory.reasons.expired'), value: 'expired' },\n    { label: t('inventory.reasons.lost'), value: 'lost' },\n    { label: t('inventory.reasons.found'), value: 'found' },\n    { label: t('inventory.reasons.recount'), value: 'recount' },\n    { label: t('inventory.reasons.correction'), value: 'correction' },\n    { label: t('inventory.reasons.other'), value: 'other' },\n  ]);\n\n  const selectedProduct = computed(\n    () => props.selectedProduct || internalSelectedProduct.value\n  );\n  const selectedLocation = computed(\n    () => props.selectedLocation || internalSelectedLocation.value\n  );\n\n  // Available locations from clinic store\n  const availableLocations = computed(() => {\n    return (\n      clinicStore.locations || [\n        { id: '880e8400-e29b-41d4-a716-446655440001', name: 'Hoofdvoorraad' },\n        { id: '880e8400-e29b-41d4-a716-446655440002', name: 'Spoedkast' },\n        { id: '880e8400-e29b-41d4-a716-446655440003', name: 'Behandelkamer 1' },\n      ]\n    );\n  });\n\n  const getCurrentStock = () => {\n    if (!selectedProduct.value) return 0;\n    const product = selectedProduct.value as any;\n    return (\n      product?.current_quantity ||\n      product?.total_stock ||\n      product?.available_stock ||\n      0\n    );\n  };\n\n  const preview = computed(() => {\n    if (\n      !selectedProduct.value ||\n      quantityInput.value === null ||\n      quantityInput.value === undefined\n    ) {\n      return null;\n    }\n\n    const current = getCurrentStock();\n    let newQuantity: number;\n    let change: number;\n\n    switch (adjustmentType.value) {\n      case 'increase':\n        newQuantity = current + quantityInput.value;\n        change = quantityInput.value;\n        break;\n      case 'decrease':\n        newQuantity = Math.max(0, current - quantityInput.value);\n        change = -quantityInput.value;\n        break;\n      case 'set':\n        newQuantity = quantityInput.value;\n        change = quantityInput.value - current;\n        break;\n      default:\n        return null;\n    }\n\n    const newStatus = determineStockStatus(newQuantity);\n\n    return {\n      current,\n      newQuantity,\n      change,\n      newStatus,\n    };\n  });\n\n  // Validation\n  const quantityError = computed(() => {\n    return (\n      quantityInput.value !== null &&\n      (quantityInput.value === undefined ||\n        isNaN(quantityInput.value) ||\n        quantityInput.value < 0)\n    );\n  });\n\n  const quantityErrorMessage = computed(() => {\n    if (quantityError.value) {\n      return t('inventory.quantityMustBePositive');\n    }\n    return '';\n  });\n\n  const reasonError = computed(() => {\n    return !selectedReason.value && quantityInput.value !== null;\n  });\n\n  const reasonErrorMessage = computed(() => {\n    if (reasonError.value) {\n      return t('inventory.reasonRequired');\n    }\n    return '';\n  });\n\n  const isFormValid = computed(() => {\n    return (\n      quantityInput.value !== null &&\n      quantityInput.value !== undefined &&\n      !isNaN(quantityInput.value) &&\n      quantityInput.value > 0 &&\n      selectedReason.value !== null &&\n      selectedReason.value !== undefined &&\n      selectedProduct.value &&\n      selectedLocation.value\n    );\n  });\n\n  // Methods\n  const getQuantityLabel = () => {\n    switch (adjustmentType.value) {\n      case 'increase':\n        return t('inventory.quantityToAdd');\n      case 'decrease':\n        return t('inventory.quantityToRemove');\n      case 'set':\n        return t('inventory.newQuantity');\n      default:\n        return t('inventory.quantity');\n    }\n  };\n\n  const getQuantityIcon = () => {\n    switch (adjustmentType.value) {\n      case 'increase':\n        return 'add_circle';\n      case 'decrease':\n        return 'remove_circle';\n      case 'set':\n        return 'edit';\n      default:\n        return 'pin';\n    }\n  };\n\n  const setQuickAmount = (amount: number) => {\n    quantityInput.value = amount;\n  };\n\n  const determineStockStatus = (quantity: number): string => {\n    if (!selectedProduct.value) return 'in_stock';\n    const product = selectedProduct.value as any;\n    const minStock = product?.minimum_quantity || product?.minimum_stock || 10;\n    if (quantity <= 0) return 'out_of_stock';\n    if (quantity <= minStock) return 'low_stock';\n    return 'in_stock';\n  };\n\n  const getStockStatusColor = (product: any) => {\n    const stock =\n      (product as any)?.current_quantity || (product as any)?.total_stock || 0;\n    const status = determineStockStatus(stock);\n    switch (status) {\n      case 'out_of_stock':\n        return 'negative';\n      case 'low_stock':\n        return 'warning';\n      default:\n        return 'positive';\n    }\n  };\n\n  const getStockStatusIcon = (product: any) => {\n    const stock =\n      (product as any)?.current_quantity || (product as any)?.total_stock || 0;\n    const status = determineStockStatus(stock);\n    switch (status) {\n      case 'out_of_stock':\n        return 'error';\n      case 'low_stock':\n        return 'warning';\n      default:\n        return 'check_circle';\n    }\n  };\n\n  const getStatusTextClass = (status: string): string => {\n    switch (status) {\n      case 'out_of_stock':\n        return 'text-negative';\n      case 'low_stock':\n        return 'text-warning';\n      default:\n        return 'text-positive';\n    }\n  };\n\n  const getValidationBannerClass = () => {\n    return 'bg-orange-1 text-orange-8';\n  };\n\n  const filterProducts = async (val: string, update: any) => {\n    if (val.length < 2) {\n      update(() => {\n        availableProducts.value = [];\n      });\n      return;\n    }\n\n    productSearchLoading.value = true;\n\n    try {\n      // Load products from store if not loaded\n      if (!productsStore.products.length) {\n        const practiceId = authStore.userProfile?.clinic_id;\n        if (practiceId) {\n          await productsStore.fetchProducts(practiceId);\n        }\n      }\n\n      update(() => {\n        const needle = val.toLowerCase();\n        availableProducts.value = productsStore.products\n          .filter(\n            product =>\n              product.name.toLowerCase().includes(needle) ||\n              product.sku.toLowerCase().includes(needle) ||\n              (product.barcode &&\n                product.barcode.toLowerCase().includes(needle))\n          )\n          .slice(0, 10) // Limit to 10 results for performance\n          .map(product => ({\n            id: product.id,\n            name: product.name,\n            sku: product.sku,\n            unit: product.unit || 'stuk',\n            brand: product.brand,\n            image_url: product.imageUrl,\n            total_stock: product.totalStock,\n            current_quantity:\n              (product as any).current_quantity ?? product.totalStock,\n            minimum_quantity: (product as any).minimum_quantity ?? 0,\n            price: (product as any).price ?? product.unitPrice,\n            description: product.description,\n            barcode: product.barcode,\n            category: product.category,\n          }));\n      });\n    } catch (error) {\n      console.error('Error filtering products:', error);\n      update(() => {\n        availableProducts.value = [];\n      });\n    } finally {\n      productSearchLoading.value = false;\n    }\n  };\n\n  const onProductSelected = (product: any) => {\n    if (product) {\n      emit('product-selected', product);\n    }\n  };\n\n  const handleBarcodeScan = async (barcode: string) => {\n    try {\n      // Search for products matching the barcode\n      const practiceId = authStore.userProfile?.clinic_id;\n      if (practiceId && !productsStore.products.length) {\n        await productsStore.fetchProducts(practiceId);\n      }\n\n      const matchingProduct = productsStore.products.find(\n        product =>\n          product.barcode === barcode ||\n          product.sku === barcode ||\n          product.name.toLowerCase().includes(barcode.toLowerCase())\n      );\n\n      if (matchingProduct) {\n        // Set the product as selected\n        internalSelectedProduct.value = {\n          id: matchingProduct.id,\n          name: matchingProduct.name,\n          sku: matchingProduct.sku,\n          unit: matchingProduct.unit || 'stuk',\n          brand: matchingProduct.brand,\n          image_url: matchingProduct.imageUrl,\n          total_stock: matchingProduct.totalStock,\n          current_quantity:\n            (matchingProduct as any).current_quantity ??\n            matchingProduct.totalStock,\n          minimum_quantity: (matchingProduct as any).minimum_quantity ?? 0,\n          price: (matchingProduct as any).price ?? matchingProduct.unitPrice,\n          description: matchingProduct.description,\n          barcode: matchingProduct.barcode,\n          category: matchingProduct.category,\n        };\n\n        emit('product-selected', internalSelectedProduct.value);\n\n        $q.notify({\n          type: 'positive',\n          message: t('inventory.barcodeFound', {\n            product: matchingProduct.name,\n          }),\n          icon: 'qr_code_scanner',\n        });\n      } else {\n        $q.notify({\n          type: 'warning',\n          message: t('inventory.barcodeNotFound', { barcode }),\n          icon: 'search_off',\n        });\n      }\n    } catch (error) {\n      console.error('Error processing barcode:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.processingError'),\n        icon: 'error',\n      });\n    }\n  };\n\n  const performAdjustment = async () => {\n    if (!isFormValid.value || !preview.value) return;\n\n    // 🚀 IMPROVED UX: Close dialog immediately for better user experience\n    emit('update:modelValue', false);\n\n    // Show optimistic loading notification\n    const notif = $q.notify({\n      type: 'ongoing',\n      message: t('inventory.savingChanges'),\n      icon: 'hourglass_empty',\n      timeout: 0,\n    });\n\n    try {\n      const movementType: MovementType = 'adjustment';\n\n      const reasonCode = selectedReason.value;\n      if (!reasonCode) {\n        throw new Error(t('quickadjus.noreasonselected'));\n      }\n\n      const practiceId = authStore.userProfile?.clinic_id;\n      if (!practiceId) {\n        throw new Error(t('quickadjus.usernotauthenticatedor'));\n      }\n\n      const locationId = selectedLocation.value?.id;\n      if (!locationId) {\n        throw new Error(t('quickadjus.nolocationselected'));\n      }\n\n      const productId =\n        selectedProduct.value?.id || selectedProduct.value?.product_id;\n      if (!productId) {\n        throw new Error(t('quickadjus.noproductselected'));\n      }\n\n      const request: StockUpdateRequest = {\n        practice_id: practiceId,\n        location_id: locationId,\n        product_id: productId,\n        quantity_change: preview.value.change,\n        movement_type: movementType,\n        reason_code: reasonCode as ReasonCode,\n        notes: notes.value || '',\n      };\n\n      await inventoryStore.updateStockLevel(request);\n\n      // Update loading notification to success\n      notif({\n        type: 'positive',\n        message: t('inventory.stockUpdated'),\n        icon: 'check_circle',\n        timeout: 3000,\n      });\n\n      emit('stock-updated', selectedProduct.value);\n\n      // Reset form for next use\n      quantityInput.value = null;\n      selectedReason.value = null;\n      notes.value = '';\n      adjustmentType.value = 'increase';\n    } catch (error: any) {\n      console.error('Error updating stock:', error);\n\n      // Determine user-friendly error message\n      let errorMessage = t('inventory.errorUpdatingStock');\n      let canRetry = true;\n\n      if (error.message) {\n        if (error.message.includes('Insufficient stock')) {\n          errorMessage = error.message;\n          canRetry = false; // No point retrying if there's insufficient stock\n        } else if (error.message.includes('not found')) {\n          errorMessage = t('inventory.errorProductNotFound');\n          canRetry = false;\n        } else if (error.message.includes('Another update is in progress')) {\n          errorMessage = t('inventory.errorUpdateInProgress');\n          canRetry = true;\n        } else if (error.message.includes('Invalid reference')) {\n          errorMessage = t('inventory.errorInvalidData');\n          canRetry = false;\n        } else if (error.message.includes('negative stock not allowed')) {\n          errorMessage = t('inventory.errorNegativeStock');\n          canRetry = false;\n        } else if (error.message.startsWith('Failed to update stock:')) {\n          errorMessage = error.message;\n        }\n      }\n\n      // Update loading notification to error\n      const notificationOptions: any = {\n        type: 'negative',\n        message: errorMessage,\n        icon: 'error',\n        timeout: canRetry ? 5000 : 8000,\n      };\n\n      if (canRetry) {\n        notificationOptions.actions = [\n          {\n            label: t('common.retry'),\n            color: 'white',\n            handler: () => {\n              emit('update:modelValue', true);\n            },\n          },\n        ];\n      }\n\n      notif(notificationOptions);\n\n      // Only reopen dialog on error if it's worth retrying\n      if (canRetry) {\n        emit('update:modelValue', true);\n      }\n    }\n  };\n\n  // Initialize data on mount\n  onMounted(async () => {\n    try {\n      const practiceId = authStore.userProfile?.clinic_id;\n      if (!practiceId) return;\n\n      // Load products and locations if not already loaded\n      if (!productsStore.products.length) {\n        await productsStore.fetchProducts(practiceId);\n      }\n\n      if (!clinicStore.locations.length) {\n        await clinicStore.fetchLocations(practiceId);\n      }\n\n      // Initialize realtime service\n      if (practiceId) {\n        // TODO: Re-enable when subscribeToInventory is available on realtimeService\n        /*\n        inventoryChannel.value = realtimeService.subscribeToInventory(\n          practiceId,\n          (payload: any) => {\n            // Realtime inventory update received\n\n            if (payload.new && payload.eventType === 'UPDATE') {\n              // Find the product in availableProducts and update its total_stock\n              const productIndex = availableProducts.value.findIndex(\n                p => p.id === payload.new.product_id\n              );\n              if (productIndex !== -1) {\n                availableProducts.value[productIndex].total_stock =\n                  payload.new.current_quantity;\n                availableProducts.value[productIndex].current_quantity =\n                  payload.new.current_quantity;\n              }\n\n              // If this is the currently selected product, show a notification\n              if (\n                selectedProduct.value &&\n                selectedProduct.value.id === payload.new.product_id\n              ) {\n                $q.notify({\n                  type: 'info',\n                  message: `Stock bijgewerkt: ${selectedProduct.value.name} nu ${payload.new.current_quantity} ${selectedProduct.value.unit}`,\n                  icon: 'update',\n                  timeout: 3000,\n                });\n              }\n            }\n          }\n        );\n        */\n        realtimeConnected.value = true;\n      }\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  });\n\n  onUnmounted(() => {\n    if (inventoryChannel.value) {\n      // TODO: Re-enable when unsubscribeFromChannel is available\n      // realtimeService.unsubscribeFromChannel(inventoryChannel.value);\n      inventoryChannel.value = null;\n      realtimeConnected.value = false;\n    }\n  });\n\n  // Watch for product changes\n  watch(\n    () => props.selectedProduct,\n    newProduct => {\n      if (newProduct) {\n        internalSelectedProduct.value = newProduct;\n      }\n    },\n    { immediate: true }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  .modern-dialog {\n    .dialog-header {\n      border-radius: 8px 8px 0 0;\n      background: linear-gradient(135deg, var(--q-primary) 0%, #1976d2 100%);\n    }\n\n    .step-container,\n    .adjustment-container {\n      max-width: 100%;\n    }\n\n    .step-header {\n      display: flex;\n      align-items: center;\n      margin-bottom: 16px;\n      padding-bottom: 8px;\n      border-bottom: 1px solid var(--q-grey-4);\n    }\n\n    .adjustment-step {\n      margin-bottom: 32px;\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    }\n\n    .product-card {\n      border: 2px solid var(--q-grey-4);\n      border-radius: 16px;\n      transition: all 0.3s ease;\n      overflow: hidden;\n\n      &:hover {\n        border-color: var(--q-primary);\n        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\n        transform: translateY(-2px);\n      }\n    }\n\n    .product-avatar {\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    }\n\n    .modern-toggle {\n      .q-btn {\n        border-radius: 8px;\n        min-height: 48px;\n        transition: all 0.2s ease;\n\n        &:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n\n        @media (max-width: 600px) {\n          min-height: var(--control-height-sm);\n          font-size: var(--control-font-sm);\n          padding: var(--control-pad-y) var(--control-pad-x);\n        }\n      }\n    }\n\n    .modern-select,\n    .quantity-input {\n      .q-field__control {\n        border-radius: 8px;\n      }\n    }\n\n    .quick-amounts {\n      .quick-amount-btn {\n        min-width: 48px;\n        border-radius: 6px;\n        transition: all 0.2s ease;\n\n        &:hover {\n          transform: scale(1.05);\n        }\n\n        @media (max-width: 600px) {\n          min-width: 36px;\n          font-size: 0.75rem;\n          padding: 4px 8px;\n        }\n      }\n    }\n\n    .preview-card {\n      border: 2px solid var(--q-blue-4);\n      border-radius: 16px;\n      background: linear-gradient(135deg, #f0f8ff 0%, #e8f5e8 100%);\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n    }\n\n    .preview-content {\n      font-family: var(--font-mono);\n    }\n\n    .modern-actions {\n      border-radius: 0 0 8px 8px;\n      border-top: 1px solid var(--q-grey-4);\n      background: linear-gradient(180deg, #fafafa 0%, #f5f5f5 100%);\n\n      .save-button {\n        min-width: 140px;\n        border-radius: 8px;\n        font-weight: 600;\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        transition: all 0.2s ease;\n\n        &:hover {\n          transform: translateY(-1px);\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        }\n\n        @media (max-width: 600px) {\n          min-width: 100px;\n          font-size: 0.85rem;\n          padding: 8px 16px;\n        }\n      }\n    }\n\n    .validation-banner {\n      border-radius: 12px;\n\n      ul {\n        margin: 0;\n        padding-left: 20px;\n\n        li {\n          margin: 4px 0;\n        }\n      }\n    }\n\n    .scan-button {\n      min-height: 56px;\n      border-radius: 8px;\n      font-weight: 600;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n      transition: all 0.2s ease;\n\n      &:hover {\n        transform: translateY(-1px);\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      }\n\n      @media (max-width: 600px) {\n        min-height: 48px;\n        min-width: 48px;\n        padding: 8px;\n      }\n    }\n  }\n\n  // Gradient utilities for better visual appeal\n  .bg-gradient-to-r {\n    &.from-blue-50.to-indigo-50 {\n      background: linear-gradient(90deg, #eff6ff 0%, #eef2ff 100%);\n    }\n\n    &.from-blue-50.to-green-50 {\n      background: linear-gradient(90deg, #eff6ff 0%, #f0fdf4 100%);\n    }\n  }\n\n  // Animation for realtime indicator\n  @keyframes pulse {\n    0%,\n    100% {\n      opacity: 1;\n    }\n    50% {\n      opacity: 0.5;\n    }\n  }\n\n  .q-chip[color='positive'] {\n    animation: pulse 2s infinite;\n  }\n\n  // Enhanced mobile responsiveness\n  @media (max-width: 600px) {\n    .modern-dialog {\n      .product-card {\n        .q-card-section {\n          padding: 1rem;\n        }\n\n        .row {\n          .q-gutter-lg > * {\n            margin-right: 0.5rem;\n            margin-bottom: 0.5rem;\n          }\n        }\n      }\n\n      .adjustment-step {\n        margin-bottom: 24px;\n      }\n\n      .preview-card {\n        .row.q-gutter-lg {\n          gap: 0.5rem;\n        }\n      }\n    }\n  }\n\n  // Border utilities\n  .border-top {\n    border-top: 1px solid var(--q-grey-4);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\RealTimeIndicator.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\RealTimeStockNotification.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\StockTransferDialog.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'currentLocation' requires default value to be set.",
        "line": 353,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 353,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 362,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 362,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11618, 11621], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11618, 11621], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 437,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 437,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14020, 14023], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14020, 14023], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 442,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 442,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14164, 14167], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14164, 14167], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 442,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 442,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14172, 14175], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14172, 14175], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    :title=\"$t('inventory.stockTransfer')\"\n    icon=\"swap_horiz\"\n    size=\"lg\"\n    :persistent=\"true\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n  >\n    <!-- Product Selector (when no product selected) -->\n    <div v-if=\"!selectedProduct\" class=\"q-pa-md\">\n      <div class=\"text-subtitle2 q-mb-md\">\n        {{ $t('inventory.selectProduct') }}\n      </div>\n      <div class=\"row q-gutter-md\">\n        <div class=\"col\">\n          <q-select\n            v-model=\"internalSelectedProduct\"\n            :options=\"availableProducts\"\n            option-label=\"name\"\n            option-value=\"id\"\n            :label=\"$t('inventory.searchProduct')\"\n            outlined\n            clearable\n            use-input\n            @filter=\"filterProducts\"\n            @update:model-value=\"onProductSelected\"\n          >\n            <template #prepend>\n              <q-icon name=\"search\" />\n            </template>\n            <template #no-option>\n              <q-item>\n                <q-item-section class=\"text-grey\">\n                  {{ $t('inventory.noProductsFound') }}\n                </q-item-section>\n              </q-item>\n            </template>\n          </q-select>\n        </div>\n        <div class=\"col-auto\">\n          <q-btn\n            icon=\"qr_code_scanner\"\n            color=\"primary\"\n            outline\n            :label=\"$t('inventory.scanBarcode')\"\n            @click=\"showBarcodeScanner = true\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <!-- Product Preview (when product selected) -->\n    <div v-if=\"selectedProduct\" class=\"q-pa-md q-pt-none\">\n      <div class=\"product-preview\">\n        <div class=\"row items-center q-gutter-md\">\n          <q-avatar size=\"48px\" color=\"grey-3\">\n            <q-img\n              v-if=\"selectedProduct.imageUrl\"\n              :src=\"selectedProduct.imageUrl\"\n              :alt=\"selectedProduct.name\"\n            />\n            <q-icon\n              v-else\n              name=\"inventory\"\n              class=\"icon-size-lg\"\n              color=\"grey-6\"\n            />\n          </q-avatar>\n          <div class=\"col\">\n            <div class=\"text-subtitle1 text-weight-medium\">\n              {{ selectedProduct.name }}\n            </div>\n            <div class=\"text-caption text-grey-6\">\n              {{ selectedProduct.sku }} • {{ selectedProduct.brand }}\n            </div>\n            <div class=\"text-caption text-primary\">\n              <q-btn\n                icon=\"edit\"\n                flat\n                dense\n                size=\"sm\"\n                :label=\"$t('inventory.changeProduct')\"\n                @click=\"clearSelectedProduct\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Transfer Form -->\n    <div class=\"q-pa-md\">\n      <div class=\"q-gutter-md\">\n        <!-- From Location -->\n        <div>\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.fromLocation') }}\n          </label>\n          <q-select\n            v-model=\"fromLocation\"\n            :options=\"availableFromLocations\"\n            option-label=\"name\"\n            option-value=\"id\"\n            outlined\n            dense\n            :disable=\"!selectedProduct\"\n            @update:model-value=\"onFromLocationChange\"\n          >\n            <template #option=\"scope\">\n              <q-item v-bind=\"scope.itemProps\">\n                <q-item-section>\n                  <q-item-label>{{ scope.opt.name }}</q-item-label>\n                  <q-item-label caption>\n                    {{ $t('inventory.availableStock') }}:\n                    {{ getLocationStock(scope.opt.id) }}\n                  </q-item-label>\n                </q-item-section>\n              </q-item>\n            </template>\n          </q-select>\n        </div>\n\n        <!-- To Location -->\n        <div>\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.toLocation') }}\n          </label>\n          <q-select\n            v-model=\"toLocation\"\n            :options=\"availableToLocations\"\n            option-label=\"name\"\n            option-value=\"id\"\n            outlined\n            dense\n            :disable=\"!fromLocation\"\n          />\n        </div>\n\n        <!-- Batch Selection (if product requires batch tracking) -->\n        <div\n          v-if=\"\n            selectedProduct?.requiresBatchTracking &&\n            availableBatches.length > 0\n          \"\n        >\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.selectBatch') }}\n          </label>\n          <q-select\n            v-model=\"selectedBatch\"\n            :options=\"availableBatches\"\n            option-label=\"batchDisplay\"\n            option-value=\"id\"\n            outlined\n            dense\n            :disable=\"!fromLocation\"\n          >\n            <template #option=\"scope\">\n              <q-item v-bind=\"scope.itemProps\">\n                <q-item-section>\n                  <q-item-label>{{ scope.opt.batch_number }}</q-item-label>\n                  <q-item-label caption>\n                    {{ $t('inventory.expiryDate') }}:\n                    {{ formatDate(scope.opt.expiry_date) }} •\n                    {{ $t('inventory.available') }}:\n                    {{ scope.opt.available_quantity }}\n                  </q-item-label>\n                </q-item-section>\n                <q-item-section side>\n                  <q-chip\n                    :color=\"getBatchStatusColor(scope.opt)\"\n                    text-color=\"white\"\n                    size=\"sm\"\n                  >\n                    {{ getBatchStatusText(scope.opt) }}\n                  </q-chip>\n                </q-item-section>\n              </q-item>\n            </template>\n          </q-select>\n        </div>\n\n        <!-- Quantity -->\n        <div>\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.quantityToTransfer') }}\n          </label>\n          <div class=\"row q-gutter-sm\">\n            <div class=\"col\">\n              <q-input\n                v-model.number=\"transferQuantity\"\n                type=\"number\"\n                outlined\n                dense\n                min=\"1\"\n                :max=\"maxTransferQuantity\"\n                :disable=\"!fromLocation || !toLocation\"\n                :suffix=\"selectedProduct?.unit || ''\"\n              />\n            </div>\n            <div class=\"col-auto\">\n              <q-btn-group outline>\n                <q-btn\n                  v-for=\"amount in quickAmounts\"\n                  :key=\"amount\"\n                  :label=\"amount.toString()\"\n                  color=\"primary\"\n                  outline\n                  unelevated\n                  size=\"sm\"\n                  @click=\"setQuickAmount(amount)\"\n                />\n                <q-btn\n                  color=\"primary\"\n                  :label=\"$t('inventory.transferFullStock')\"\n                  outline\n                  icon=\"all_inbox\"\n                  @click=\"setQuickAmount(maxTransferQuantity)\"\n                />\n              </q-btn-group>\n            </div>\n          </div>\n          <div\n            v-if=\"maxTransferQuantity > 0\"\n            class=\"text-caption text-grey-6 q-mt-xs\"\n          >\n            {{ $t('inventory.maxAvailable') }}: {{ maxTransferQuantity }}\n            {{ selectedProduct?.unit }}\n          </div>\n        </div>\n\n        <!-- Reason -->\n        <div>\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.transferReason') }}\n          </label>\n          <q-select\n            v-model=\"transferReason\"\n            :options=\"reasonOptions\"\n            outlined\n            dense\n            :disable=\"!fromLocation || !toLocation\"\n          />\n        </div>\n\n        <!-- Notes -->\n        <div>\n          <label class=\"text-subtitle2 q-mb-sm block\">\n            {{ $t('inventory.notes') }} ({{ $t('common.optional') }})\n          </label>\n          <q-input\n            v-model=\"notes\"\n            type=\"textarea\"\n            outlined\n            dense\n            rows=\"2\"\n            :placeholder=\"$t('inventory.transferNotesPlaceholder')\"\n          />\n        </div>\n\n        <!-- Transfer Preview -->\n        <div v-if=\"isValidTransfer\" class=\"transfer-preview\">\n          <q-separator class=\"q-my-md\" />\n          <div class=\"text-subtitle2 q-mb-sm\">\n            {{ $t('inventory.transferPreview') }}\n          </div>\n          <div class=\"preview-card\">\n            <q-card flat bordered>\n              <q-card-section class=\"q-pa-sm\">\n                <div class=\"row items-center q-gutter-sm\">\n                  <div class=\"col text-center\">\n                    <div class=\"text-body2 text-weight-medium\">\n                      {{ fromLocation?.name }}\n                    </div>\n                    <div class=\"text-h6 text-negative\">\n                      -{{ transferQuantity }}\n                    </div>\n                    <div class=\"text-caption\">\n                      {{ getCurrentStock() - transferQuantity }}\n                      {{ $t('inventory.remaining') }}\n                    </div>\n                  </div>\n                  <div class=\"col-auto\">\n                    <q-icon name=\"arrow_forward\" size=\"md\" color=\"primary\" />\n                  </div>\n                  <div class=\"col text-center\">\n                    <div class=\"text-body2 text-weight-medium\">\n                      {{ toLocation?.name }}\n                    </div>\n                    <div class=\"text-h6 text-positive\">\n                      +{{ transferQuantity }}\n                    </div>\n                    <div class=\"text-caption\">\n                      {{ getToLocationCurrentStock() + transferQuantity }}\n                      {{ $t('inventory.newTotal') }}\n                    </div>\n                  </div>\n                </div>\n              </q-card-section>\n            </q-card>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Actions -->\n    <template #actions>\n      <div class=\"row items-center q-gutter-sm q-pa-sm\">\n        <q-space />\n        <q-btn\n          flat\n          :label=\"$t('common.cancel')\"\n          aria-label=\"Cancel\"\n          @click=\"$emit('update:modelValue', false)\"\n        />\n        <q-btn\n          color=\"primary\"\n          :label=\"$t('inventory.executeTransfer')\"\n          :loading=\"transferLoading\"\n          :disable=\"!isValidTransfer\"\n          aria-label=\"Execute transfer\"\n          @click=\"executeTransfer\"\n        />\n      </div>\n    </template>\n  </BaseDialog>\n\n  <!-- Barcode Scanner -->\n  <BarcodeScanner v-model=\"showBarcodeScanner\" @scan=\"handleBarcodeScan\" />\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { useClinicStore } from 'src/stores/clinic';\n  import { useBatchStore } from 'src/stores/batch';\n  import { formatDate } from 'src/utils/date';\n  import BarcodeScanner from 'src/components/BarcodeScanner.vue';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  import type {\n    LocationSummary,\n    ProductBatchSummary,\n    ProductWithStock,\n    StockTransferRequest,\n  } from 'src/types/inventory';\n\n  interface Props {\n    modelValue: boolean;\n    selectedProduct: ProductWithStock;\n    currentLocation?: LocationSummary;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    modelValue: false,\n  });\n\n  const emit = defineEmits<{\n    'update:modelValue': [value: boolean];\n    'transfer-completed': [transfer: any];\n    'product-selected': [product: ProductWithStock | null];\n  }>();\n\n  // Composition\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const inventoryStore = useInventoryStore();\n  const clinicStore = useClinicStore();\n  const batchStore = useBatchStore();\n\n  // State\n  const fromLocation = ref<LocationSummary | null>(\n    props.currentLocation ?? null\n  );\n  const toLocation = ref<LocationSummary | null>(null);\n  const selectedBatch = ref<ProductBatchSummary | null>(null);\n  const transferQuantity = ref<number>(1);\n  const transferReason = ref('location_rebalance');\n  const notes = ref('');\n  const transferLoading = ref(false);\n\n  // Product selection state\n  const internalSelectedProduct = ref<ProductWithStock>(props.selectedProduct);\n  const availableProducts = ref<ProductWithStock[]>([]);\n  const showBarcodeScanner = ref(false);\n\n  // Quick amount buttons\n  const quickAmounts = [1, 5, 10, 25, 50];\n\n  // Reason options\n  const reasonOptions = computed(() => [\n    { label: t('inventory.locationRebalance'), value: 'location_rebalance' },\n    { label: t('inventory.stockReplenishment'), value: 'stock_replenishment' },\n    { label: t('inventory.emergencyTransfer'), value: 'emergency_transfer' },\n    { label: t('inventory.expiryManagement'), value: 'expiry_management' },\n    {\n      label: t('inventory.maintenanceRelocation'),\n      value: 'maintenance_relocation',\n    },\n  ]);\n\n  // Available locations\n  const availableFromLocations = computed(() => {\n    if (!props.selectedProduct) return [];\n\n    return clinicStore.locations.filter(location => {\n      const stock = getLocationStock(location.id);\n      return stock > 0;\n    });\n  });\n\n  const availableToLocations = computed(() => {\n    if (!fromLocation.value) return [];\n\n    return clinicStore.locations.filter(\n      location => location.id !== fromLocation.value?.id\n    );\n  });\n\n  // Available batches for the selected product and location\n  const availableBatches = computed<ProductBatchSummary[]>(() => {\n    if (!props.selectedProduct?.requiresBatchTracking || !fromLocation.value) {\n      return [];\n    }\n\n    const fromLocationId = fromLocation.value.id;\n    const batches = batchStore.batches.filter(\n      batch =>\n        batch.productId === props.selectedProduct.id &&\n        batch.locationId === fromLocationId &&\n        batch.currentQuantity > 0\n    );\n\n    return batches\n      .map((batch: any) => ({\n        ...batch,\n        batchDisplay: `${batch.batchNumber} (${formatDate(batch.expiryDate)})`,\n      }))\n      .sort(\n        (a: any, b: any) =>\n          new Date(a.expiryDate).getTime() - new Date(b.expiryDate).getTime()\n      );\n  });\n\n  // Max transfer quantity\n  const maxTransferQuantity = computed(() => {\n    if (!fromLocation.value || !props.selectedProduct) return 0;\n\n    if (props.selectedProduct.requiresBatchTracking && selectedBatch.value) {\n      return selectedBatch.value.current_quantity;\n    }\n\n    return getLocationStock(fromLocation.value.id);\n  });\n\n  // Validation\n  const isValidTransfer = computed(() => {\n    const hasLocations = !!(fromLocation.value?.id && toLocation.value?.id);\n    const withinQuantityLimits =\n      transferQuantity.value > 0 &&\n      transferQuantity.value <= maxTransferQuantity.value;\n    const batchOk =\n      !props.selectedProduct?.requiresBatchTracking || !!selectedBatch.value;\n\n    return hasLocations && withinQuantityLimits && batchOk;\n  });\n\n  // Methods\n  const getLocationStock = (locationId: string): number => {\n    return inventoryStore.getProductStockAtLocation(\n      props.selectedProduct.id,\n      locationId\n    );\n  };\n\n  const getCurrentStock = (): number => {\n    return fromLocation.value ? getLocationStock(fromLocation.value.id) : 0;\n  };\n\n  const getToLocationCurrentStock = (): number => {\n    return toLocation.value ? getLocationStock(toLocation.value.id) : 0;\n  };\n\n  const onFromLocationChange = () => {\n    selectedBatch.value = null;\n    transferQuantity.value = 1;\n  };\n\n  const setQuickAmount = (amount: number) => {\n    transferQuantity.value = Math.min(amount, maxTransferQuantity.value);\n  };\n\n  const getBatchStatusColor = (batch: ProductBatchSummary): string => {\n    const daysToExpiry = Math.ceil(\n      (new Date(batch.expiry_date).getTime() - new Date().getTime()) /\n        (1000 * 60 * 60 * 24)\n    );\n\n    if (daysToExpiry < 0) return 'negative';\n    if (daysToExpiry <= 7) return 'warning';\n    if (daysToExpiry <= 30) return 'orange';\n    return 'positive';\n  };\n\n  const getBatchStatusText = (batch: ProductBatchSummary): string => {\n    const daysToExpiry = Math.ceil(\n      (new Date(batch.expiry_date).getTime() - new Date().getTime()) /\n        (1000 * 60 * 60 * 24)\n    );\n\n    if (daysToExpiry < 0) return t('inventory.expired');\n    if (daysToExpiry <= 7) return t('inventory.expiresSoon');\n    if (daysToExpiry <= 30) return t('inventory.expiresThisMonth');\n    return t('inventory.fresh');\n  };\n\n  const executeTransfer = async () => {\n    if (!isValidTransfer.value || !props.selectedProduct) return;\n\n    transferLoading.value = true;\n\n    try {\n      const transfer: StockTransferRequest = {\n        practice_id: props.selectedProduct.practiceId,\n        product_id: props.selectedProduct.id,\n        from_location_id: fromLocation.value?.id ?? '',\n        to_location_id: toLocation.value?.id ?? '',\n        quantity: transferQuantity.value,\n        reason: transferReason.value,\n        notes: notes.value,\n        batch_id: selectedBatch.value?.id ?? null,\n      };\n\n      await inventoryStore.executeStockTransfer(transfer);\n\n      $q.notify({\n        type: 'positive',\n        message: t('inventory.transferCompleted'),\n        caption: t('inventory.transferCompletedDetails', {\n          quantity: transferQuantity.value,\n          product: props.selectedProduct.name,\n          from: fromLocation.value?.name ?? '-',\n          to: toLocation.value?.name ?? '-',\n        }),\n      });\n\n      emit('transfer-completed', transfer);\n      emit('update:modelValue', false);\n\n      // Reset form\n      resetForm();\n    } catch (error) {\n      console.error('Transfer failed:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('inventory.transferFailed'),\n        caption:\n          (error as Error).message || t('inventory.transferFailedDetails'),\n      });\n    } finally {\n      transferLoading.value = false;\n    }\n  };\n\n  const resetForm = () => {\n    fromLocation.value = null;\n    toLocation.value = null;\n    selectedBatch.value = null;\n    transferQuantity.value = 1;\n    transferReason.value = 'location_rebalance';\n    notes.value = '';\n    internalSelectedProduct.value = null as unknown as ProductWithStock;\n  };\n\n  // Product selection functions\n  const filterProducts = (\n    val: string,\n    update: (callback: () => void) => void\n  ) => {\n    update(() => {\n      if (val === '') {\n        availableProducts.value = [];\n      } else {\n        // In a real implementation, this would search inventory\n        availableProducts.value = [];\n      }\n    });\n  };\n\n  const onProductSelected = (product: ProductWithStock | null) => {\n    if (product) {\n      emit('product-selected', product);\n    }\n  };\n\n  const clearSelectedProduct = () => {\n    emit('product-selected', null);\n  };\n\n  // Barcode scanning\n  const handleBarcodeScan = async (barcode: string) => {\n    try {\n      // This would search for products by barcode\n      const notificationOptions = {\n        type: 'info' as const,\n        message: t('inventory.barcodeScanned', { barcode }),\n        icon: 'qr_code_scanner',\n      };\n      $q.notify(notificationOptions);\n    } catch (error) {\n      console.error('Error processing barcode:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.processingError'),\n      });\n    }\n  };\n\n  // Initialize with current location if provided\n  watch(\n    () => props.currentLocation,\n    newLocation => {\n      if (newLocation && !fromLocation.value) {\n        fromLocation.value = newLocation;\n      }\n    },\n    { immediate: true }\n  );\n\n  // Reset form when dialog closes\n  watch(\n    () => props.modelValue,\n    isOpen => {\n      if (!isOpen) {\n        resetForm();\n      }\n    }\n  );\n</script>\n\n<style scoped>\n  .product-preview {\n    background: var(--q-grey-1);\n    border-radius: 8px;\n    padding: 16px;\n    margin-bottom: 16px;\n  }\n\n  .transfer-preview {\n    margin-top: 16px;\n  }\n\n  .preview-card {\n    background: linear-gradient(135deg, var(--q-primary-1), var(--q-accent-1));\n    border-radius: 8px;\n    padding: 4px;\n  }\n\n  .preview-card .q-card {\n    border-radius: 6px;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\layout\\DemoBanner.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\navigation\\NavIconItem.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\orderLists\\AdvancedOrderListCard.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'reorderAdvice' requires default value to be set.",
        "line": 469,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 469,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 611,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 611,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17499, 17502], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17499, 17502], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 612,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 612,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17575, 17578], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17575, 17578], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 617,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 617,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17721, 17724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17721, 17724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 618,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 618,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17779, 17782], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17779, 17782], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 627,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 627,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18081, 18084], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18081, 18084], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 632,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 632,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18217, 18220], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18217, 18220], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 633,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 633,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18275, 18278], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18275, 18278], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 638,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 638,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18440, 18443], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18440, 18443], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 645,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 645,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18598, 18601], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18598, 18601], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 658,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 658,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18871, 18874], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18871, 18874], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 859,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 859,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23964, 23967], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23964, 23967], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"modern-order-card\">\n    <!-- Card Header -->\n    <div class=\"card-header\">\n      <div class=\"header-left\">\n        <div class=\"list-icon\">\n          <q-icon\n            :name=\"getListIcon()\"\n            :color=\"getIconColor()\"\n            class=\"icon-size-lg\"\n          />\n        </div>\n        <div class=\"list-info\">\n          <h3 class=\"list-title\">{{ orderList.name }}</h3>\n          <p class=\"list-subtitle\">\n            {{ orderList.description || 'Geen beschrijving' }}\n          </p>\n        </div>\n      </div>\n\n      <div class=\"header-right\">\n        <q-badge\n          :color=\"statusColor\"\n          :label=\"statusLabel\"\n          class=\"status-badge\"\n        />\n        <q-btn\n          flat\n          round\n          dense\n          icon=\"more_vert\"\n          class=\"menu-btn\"\n          @click=\"showActionsMenu = !showActionsMenu\"\n        />\n      </div>\n    </div>\n\n    <!-- Tags Row -->\n    <div\n      v-if=\"(orderList as any).tags && (orderList as any).tags.length > 0\"\n      class=\"tags-section\"\n    >\n      <q-chip\n        v-for=\"tag in (orderList as any).tags\"\n        :key=\"tag\"\n        size=\"sm\"\n        outline\n        :label=\"tag\"\n        class=\"tag-chip\"\n      />\n    </div>\n\n    <!-- Actions Menu -->\n    <q-menu v-model=\"showActionsMenu\" anchor=\"top right\" self=\"top right\">\n      <q-list dense class=\"actions-menu\">\n        <q-item v-close-popup clickable @click=\"openOrderList\">\n          <q-item-section avatar>\n            <q-icon name=\"open_in_new\" />\n          </q-item-section>\n          <q-item-section>Openen</q-item-section>\n        </q-item>\n\n        <q-item v-close-popup clickable @click=\"duplicateList\">\n          <q-item-section avatar>\n            <q-icon name=\"content_copy\" />\n          </q-item-section>\n          <q-item-section>Dupliceren</q-item-section>\n        </q-item>\n\n        <q-item v-close-popup clickable @click=\"exportList\">\n          <q-item-section avatar>\n            <q-icon name=\"download\" />\n          </q-item-section>\n          <q-item-section>Exporteren</q-item-section>\n        </q-item>\n\n        <q-separator />\n\n        <q-item\n          v-close-popup\n          clickable\n          class=\"text-primary\"\n          @click=\"editSettings\"\n        >\n          <q-item-section avatar>\n            <q-icon name=\"settings\" />\n          </q-item-section>\n          <q-item-section>Instellingen</q-item-section>\n        </q-item>\n      </q-list>\n    </q-menu>\n\n    <!-- Card Content -->\n    <div class=\"card-content\">\n      <!-- Critical Items Alert -->\n      <div\n        v-if=\"\n          reorderAdvice && reorderAdvice.items_by_urgency.critical.length > 0\n        \"\n        class=\"critical-alert\"\n      >\n        <div class=\"alert-icon\">\n          <q-icon name=\"warning\" color=\"negative\" class=\"icon-size-base\" />\n        </div>\n        <div class=\"alert-content\">\n          <span class=\"alert-text\"\n            >{{ reorderAdvice.items_by_urgency.critical.length }} kritieke\n            items</span\n          >\n          <q-btn\n            flat\n            dense\n            label=\"Bestel nu\"\n            :loading=\"creatingOrder\"\n            color=\"negative\"\n            size=\"sm\"\n            class=\"alert-btn\"\n            @click=\"orderCriticalItems\"\n          />\n        </div>\n      </div>\n\n      <!-- Stock Overview Stats -->\n      <div class=\"stats-grid\">\n        <div class=\"stat-item stat-critical\">\n          <div class=\"stat-value\">{{ outOfStockCount }}</div>\n          <div class=\"stat-label\">Uitverkocht</div>\n        </div>\n\n        <div class=\"stat-item stat-warning\">\n          <div class=\"stat-value\">{{ lowStockCount }}</div>\n          <div class=\"stat-label\">Laag</div>\n        </div>\n\n        <div class=\"stat-item stat-success\">\n          <div class=\"stat-value\">{{ normalStockCount }}</div>\n          <div class=\"stat-label\">Normaal</div>\n        </div>\n\n        <div class=\"stat-item stat-info\">\n          <div class=\"stat-value\">{{ overstockedCount }}</div>\n          <div class=\"stat-label\">Teveel</div>\n        </div>\n      </div>\n\n      <!-- Quick Info -->\n      <div class=\"quick-info\">\n        <div class=\"info-item\">\n          <q-icon name=\"inventory\" class=\"info-icon icon-size-sm\" />\n          <span>{{ orderList.total_items || 0 }} items</span>\n        </div>\n        <div class=\"info-item\">\n          <q-icon name=\"euro\" class=\"info-icon icon-size-sm\" />\n          <span>€{{ ((orderList as any).total_value || 0).toFixed(2) }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Order recommendations -->\n    <div v-if=\"showRecommendations\" class=\"order-recommendations q-pt-none\">\n      <div class=\"text-subtitle2 q-mb-md\">📋 Besteladvies</div>\n\n      <!-- Supplier breakdown -->\n      <div\n        v-if=\"reorderAdvice && reorderAdvice.suppliers_involved.length > 0\"\n        class=\"suppliers-breakdown q-mb-md\"\n      >\n        <div class=\"text-caption text-grey-6 q-mb-xs\">\n          Leveranciers betrokken:\n        </div>\n        <div class=\"row q-gutter-xs\">\n          <q-chip\n            v-for=\"supplier in reorderAdvice.suppliers_involved\"\n            :key=\"supplier\"\n            size=\"sm\"\n            color=\"primary\"\n            text-color=\"white\"\n            :label=\"supplier\"\n            icon=\"business\"\n          />\n        </div>\n      </div>\n\n      <!-- Top priority items preview -->\n      <div v-if=\"topPriorityItems.length > 0\" class=\"priority-items\">\n        <div class=\"text-caption text-grey-6 q-mb-xs\">Prioriteit items:</div>\n        <q-list dense class=\"rounded-borders\">\n          <q-item\n            v-for=\"item in topPriorityItems.slice(0, 3)\"\n            :key=\"item.product_id\"\n            class=\"q-pa-xs\"\n          >\n            <q-item-section avatar>\n              <q-icon\n                :name=\"getUrgencyIcon(item.urgency_level)\"\n                :color=\"getUrgencyColor(item.urgency_level)\"\n                size=\"sm\"\n              />\n            </q-item-section>\n\n            <q-item-section>\n              <q-item-label class=\"text-weight-medium\">{{\n                item.product_name\n              }}</q-item-label>\n              <q-item-label caption>\n                Voorraad: {{ item.current_stock }} / Min:\n                {{ item.minimum_stock }}\n              </q-item-label>\n            </q-item-section>\n\n            <q-item-section side>\n              <div class=\"text-right\">\n                <div class=\"text-weight-bold text-primary\">\n                  {{ item.calculated_order_quantity }}\n                </div>\n                <div class=\"text-caption\">bestellen</div>\n              </div>\n            </q-item-section>\n          </q-item>\n\n          <q-item v-if=\"topPriorityItems.length > 3\" class=\"text-center\">\n            <q-item-section>\n              <q-item-label class=\"text-grey-6\">\n                +{{ topPriorityItems.length - 3 }} meer...\n              </q-item-label>\n            </q-item-section>\n          </q-item>\n        </q-list>\n      </div>\n\n      <!-- Cost estimation -->\n      <div v-if=\"reorderAdvice\" class=\"cost-estimation q-mt-md\">\n        <div class=\"row items-center\">\n          <div class=\"col\">\n            <div class=\"text-caption text-grey-6\">Geschatte kosten:</div>\n            <div class=\"text-h6 text-primary\">\n              €{{ reorderAdvice.total_estimated_cost.toFixed(2) }}\n            </div>\n          </div>\n          <div class=\"col-auto\">\n            <div class=\"text-caption text-grey-6\">Items:</div>\n            <div class=\"text-subtitle1\">\n              {{ reorderAdvice.total_items_to_order }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Card Actions -->\n    <div class=\"card-actions\">\n      <!-- Primary Actions -->\n      <div class=\"primary-actions\">\n        <q-btn\n          v-if=\"hasItemsToOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\"\n          unelevated\n          no-caps\n          size=\"sm\"\n          class=\"action-btn action-btn--primary\"\n          @click=\"createQuickOrder\"\n        />\n\n        <q-btn\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\"\n          outline\n          no-caps\n          size=\"sm\"\n          class=\"action-btn action-btn--secondary\"\n          @click=\"openOrderList\"\n        />\n      </div>\n\n      <!-- Secondary Actions -->\n      <div class=\"secondary-actions\">\n        <q-btn\n          flat\n          round\n          dense\n          icon=\"inventory\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n          @click=\"openStockManager\"\n        >\n          <q-tooltip>Voorraad beheren</q-tooltip>\n        </q-btn>\n\n        <q-btn\n          flat\n          round\n          dense\n          icon=\"analytics\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n          @click=\"viewAnalytics\"\n        >\n          <q-tooltip>Analytics</q-tooltip>\n        </q-btn>\n\n        <q-btn\n          flat\n          round\n          dense\n          icon=\"settings\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n          @click=\"editSettings\"\n        >\n          <q-tooltip>Instellingen</q-tooltip>\n        </q-btn>\n      </div>\n    </div>\n\n    <!-- Mini progress bar for auto-reorder lists -->\n    <div\n      v-if=\"(orderList as any).auto_reorder_enabled\"\n      class=\"auto-reorder-progress\"\n    >\n      <q-linear-progress\n        :value=\"autoReorderProgress\"\n        :color=\"autoReorderProgress > 0.8 ? 'warning' : 'primary'\"\n        size=\"4px\"\n      />\n      <div class=\"text-caption text-center q-pa-xs text-grey-6\">\n        Volgende automatische controle: {{ nextAutoCheck }}\n      </div>\n    </div>\n\n    <!-- Settings Dialog -->\n    <q-dialog v-model=\"showSettingsDialog\" persistent>\n      <q-card style=\"min-width: 400px\">\n        <q-card-section class=\"q-pb-none\">\n          <div class=\"text-h6\">Bestellijst instellingen</div>\n          <div class=\"text-caption text-grey-6\">{{ orderList.name }}</div>\n        </q-card-section>\n\n        <q-card-section>\n          <div class=\"q-gutter-md\">\n            <!-- Basic settings -->\n            <q-input v-model=\"settingsForm.name\" label=\"Naam\" outlined dense />\n\n            <q-input\n              v-model=\"settingsForm.description\"\n              label=\"Beschrijving\"\n              outlined\n              dense\n              type=\"textarea\"\n              rows=\"2\"\n            />\n\n            <!-- List type -->\n            <q-select\n              v-model=\"settingsForm.list_type\"\n              label=\"Type lijst\"\n              :options=\"listTypeOptions\"\n              outlined\n              dense\n              emit-value\n              map-options\n            />\n\n            <!-- Auto-reorder settings -->\n            <div class=\"q-gutter-sm\">\n              <q-toggle\n                v-model=\"settingsForm.auto_reorder_enabled\"\n                label=\"Automatisch herbestellen\"\n                color=\"primary\"\n              />\n\n              <q-input\n                v-if=\"settingsForm.auto_reorder_enabled\"\n                v-model.number=\"settingsForm.reorder_frequency_days\"\n                label=\"Controle frequentie (dagen)\"\n                type=\"number\"\n                outlined\n                dense\n                min=\"1\"\n                max=\"365\"\n              />\n            </div>\n\n            <!-- Order timing -->\n            <div class=\"row q-gutter-sm\">\n              <q-select\n                v-model=\"settingsForm.preferred_order_day\"\n                label=\"Voorkeur besteldag\"\n                :options=\"dayOptions\"\n                outlined\n                dense\n                emit-value\n                map-options\n                class=\"col\"\n              />\n\n              <q-input\n                v-model=\"settingsForm.order_cutoff_time\"\n                label=\"Besteltijd\"\n                type=\"time\"\n                outlined\n                dense\n                class=\"col\"\n              />\n            </div>\n\n            <!-- Minimum order value -->\n            <q-input\n              v-model.number=\"settingsForm.min_order_value\"\n              label=\"Minimum bestelwaarde (€)\"\n              type=\"number\"\n              outlined\n              dense\n              min=\"0\"\n              step=\"0.01\"\n            />\n\n            <!-- Tags -->\n            <q-select\n              v-model=\"settingsForm.tags\"\n              label=\"Tags\"\n              multiple\n              outlined\n              dense\n              use-input\n              use-chips\n              input-debounce=\"0\"\n              new-value-mode=\"add-unique\"\n              hint=\"Voer tags in en druk op Enter\"\n            />\n          </div>\n        </q-card-section>\n\n        <q-card-actions align=\"right\" class=\"q-pa-md\">\n          <q-btn flat label=\"Annuleren\" @click=\"showSettingsDialog = false\" />\n          <q-btn\n            :loading=\"savingSettings\"\n            color=\"primary\"\n            label=\"Opslaan\"\n            @click=\"saveSettings\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { useOrderListsStore } from '@/stores/orderLists';\n  import { useAuthStore } from '@/stores/auth';\n  import { BaseCard } from '@/components/cards';\n  import type { OrderListWithItems } from '@/types/stores';\n  import type {\n    OrderAdvice,\n    ReorderSuggestion,\n  } from '@/stores/orderLists/orderLists-minmax';\n\n  interface Props {\n    orderList: OrderListWithItems;\n    reorderAdvice?: OrderAdvice;\n    showRecommendations?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    showRecommendations: true,\n  });\n\n  const emit = defineEmits<{\n    'order-created': [orderList: OrderListWithItems];\n    'list-updated': [orderList: OrderListWithItems];\n    'analytics-requested': [orderList: OrderListWithItems];\n  }>();\n\n  const $q = useQuasar();\n  const router = useRouter();\n  const orderListsStore = useOrderListsStore();\n\n  // State\n  const creatingOrder = ref(false);\n  const showSettingsDialog = ref(false);\n  const savingSettings = ref(false);\n  const showActionsMenu = ref(false);\n\n  // Settings form\n  const settingsForm = ref({\n    name: '',\n    description: '',\n    list_type: 'reorder_list',\n    auto_reorder_enabled: false,\n    reorder_frequency_days: 14,\n    preferred_order_day: null,\n    order_cutoff_time: '',\n    min_order_value: 0,\n    tags: [],\n  });\n\n  // Options\n  const listTypeOptions = [\n    { label: 'Herbestel lijst', value: 'reorder_list' },\n    { label: 'Winkellijst', value: 'shopping_list' },\n    { label: 'Noodlijst', value: 'emergency_list' },\n    { label: 'Onderhoudslijst', value: 'maintenance_list' },\n  ];\n\n  const dayOptions = [\n    { label: 'Zondag', value: 0 },\n    { label: 'Maandag', value: 1 },\n    { label: 'Dinsdag', value: 2 },\n    { label: 'Woensdag', value: 3 },\n    { label: 'Donderdag', value: 4 },\n    { label: 'Vrijdag', value: 5 },\n    { label: 'Zaterdag', value: 6 },\n  ];\n\n  // Computed properties\n  const cardClasses = computed(() => ({\n    'full-height': true,\n  }));\n\n  const statusColor = computed(() => {\n    const status = props.orderList.status;\n    if (status === 'active') return 'positive';\n    if (status === 'draft') return 'warning';\n    if (status === 'submitted') return 'info';\n    if (status === 'completed') return 'primary';\n    if (status === 'cancelled') return 'negative';\n    return 'grey';\n  });\n\n  const statusLabel = computed(() =>\n    getStatusLabel(props.orderList.status ?? 'draft')\n  );\n\n  const hasUrgentItems = computed(() => {\n    return (\n      (props.reorderAdvice?.items_by_urgency.critical?.length ?? 0) > 0 ||\n      (props.reorderAdvice?.items_by_urgency.high?.length ?? 0) > 0\n    );\n  });\n\n  const outOfStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'critical' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const lowStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'high' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const normalStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          (item.urgency_level as string) === 'medium' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const overstockedCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          (item.urgency_level as string) === 'low' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const topPriorityItems = computed(() => {\n    if (!props.reorderAdvice) {\n      return [];\n    }\n\n    return [\n      ...(props.reorderAdvice.items_by_urgency.critical ?? []),\n      ...(props.reorderAdvice.items_by_urgency.high ?? []),\n      ...(props.reorderAdvice.items_by_urgency.normal ?? []),\n    ].slice(0, 5);\n  });\n\n  const hasItemsToOrder = computed(() => {\n    return (props.reorderAdvice?.total_items_to_order ?? 0) > 0;\n  });\n\n  const itemsToOrderCount = computed(() => {\n    return props.reorderAdvice?.total_items_to_order || 0;\n  });\n\n  const autoReorderProgress = computed(() => {\n    const autoReorderEnabled = (props.orderList as any).auto_reorder_enabled;\n    const reorderFrequency = (props.orderList as any).reorder_frequency_days;\n    if (!autoReorderEnabled || !reorderFrequency) {\n      return 0;\n    }\n\n    const lastCheck = (props.orderList as any).last_auto_check\n      ? new Date((props.orderList as any).last_auto_check)\n      : new Date();\n    const daysSinceLastCheck =\n      (Date.now() - lastCheck.getTime()) / (1000 * 60 * 60 * 24);\n\n    return Math.min(daysSinceLastCheck / reorderFrequency, 1);\n  });\n\n  const nextAutoCheck = computed(() => {\n    const autoReorderEnabled = (props.orderList as any).auto_reorder_enabled;\n    if (!autoReorderEnabled) {\n      return 'Niet gepland';\n    }\n\n    const lastCheck = (props.orderList as any).last_auto_check\n      ? new Date((props.orderList as any).last_auto_check)\n      : new Date();\n    const nextCheck = new Date(lastCheck);\n    nextCheck.setDate(\n      nextCheck.getDate() +\n        ((props.orderList as any).reorder_frequency_days || 14)\n    );\n\n    return nextCheck.toLocaleDateString('nl-NL');\n  });\n\n  const getListIcon = () => {\n    if ((props.orderList as any).auto_reorder_enabled) {\n      return 'schedule';\n    }\n    if (hasUrgentItems.value) {\n      return 'warning';\n    }\n    return 'list_alt';\n  };\n\n  const getIconColor = () => {\n    if (hasUrgentItems.value) {\n      return 'negative';\n    }\n    if ((props.orderList as any).auto_reorder_enabled) {\n      return 'info';\n    }\n    return 'primary';\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'ready':\n        return 'Klaar';\n      case 'draft':\n        return 'Concept';\n      case 'submitted':\n        return 'Verzonden';\n      case 'confirmed':\n        return 'Bevestigd';\n      case 'delivered':\n        return 'Geleverd';\n      case 'cancelled':\n        return 'Geannuleerd';\n      default:\n        return 'Onbekend';\n    }\n  };\n\n  // Methods\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'critical':\n        return 'error';\n      case 'high':\n        return 'warning';\n      case 'normal':\n        return 'info';\n      case 'low':\n        return 'low_priority';\n      default:\n        return 'help';\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical':\n        return 'negative';\n      case 'high':\n        return 'warning';\n      case 'normal':\n        return 'primary';\n      case 'low':\n        return 'grey';\n      default:\n        return 'grey';\n    }\n  };\n\n  const openOrderList = () => {\n    router.push(`/order-lists/${props.orderList.id}`);\n  };\n\n  const createQuickOrder = async () => {\n    if (!props.reorderAdvice) {\n      return;\n    }\n\n    creatingOrder.value = true;\n    try {\n      const itemsToOrder = [\n        ...props.reorderAdvice.items_by_urgency.critical,\n        ...props.reorderAdvice.items_by_urgency.high,\n        ...props.reorderAdvice.items_by_urgency.normal,\n      ].filter(item => item.calculated_order_quantity > 0);\n\n      const orders = await orderListsStore.applyOrderSuggestions();\n\n      $q.notify({\n        type: 'positive',\n        message: `${orders.length} bestelling(en) aangemaakt!`,\n        caption: `${itemsToOrder.length} items geselecteerd`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij aanmaken bestelling',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const orderAllItems = async () => {\n    creatingOrder.value = true;\n    try {\n      const allItems =\n        orderListsStore.orderSuggestions?.filter(\n          item => item.order_list_id === props.orderList.id\n        ) || [];\n\n      const orders = await orderListsStore.applyOrderSuggestions();\n\n      $q.notify({\n        type: 'positive',\n        message: `${orders.length} bestelling(en) aangemaakt!`,\n        caption: `Alle ${allItems.length} items geselecteerd`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij aanmaken bestelling',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const orderCriticalItems = async () => {\n    if (!props.reorderAdvice?.items_by_urgency.critical.length) {\n      return;\n    }\n\n    creatingOrder.value = true;\n    try {\n      const orders = await orderListsStore.applyOrderSuggestions();\n\n      $q.notify({\n        type: 'positive',\n        message: 'Kritieke items besteld!',\n        caption: `${props.reorderAdvice.items_by_urgency.critical.length} items`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij bestellen kritieke items',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const openStockManager = () => {\n    // Ga naar voorraad levels pagina met filter op deze bestellijst\n    router.push({\n      name: 'inventory-levels',\n      query: { orderListId: props.orderList.id },\n    });\n  };\n\n  const viewAnalytics = () => {\n    emit('analytics-requested', props.orderList);\n  };\n\n  const scheduleAutomation = () => {\n    settingsForm.value.auto_reorder_enabled = true;\n    showSettingsDialog.value = true;\n  };\n\n  const duplicateList = async () => {\n    try {\n      const newList = await orderListsStore.duplicateOrderList(\n        props.orderList.id,\n        `${props.orderList.name} (kopie)`\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: 'Lijst gedupliceerd!',\n        caption: `Nieuwe lijst: ${newList.name}`,\n        timeout: 3000,\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij dupliceren lijst',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    }\n  };\n\n  const exportList = () => {\n    // Implementation for exporting list\n    $q.notify({\n      type: 'info',\n      message: 'Export functie komt binnenkort',\n      timeout: 2000,\n    });\n  };\n\n  const editSettings = () => {\n    // Populate form with current values\n    const extendedOrderList = props.orderList as any;\n    settingsForm.value = {\n      name: props.orderList.name,\n      description: props.orderList.description || '',\n      list_type: extendedOrderList.list_type || 'reorder_list',\n      auto_reorder_enabled: extendedOrderList.auto_reorder_enabled || false,\n      reorder_frequency_days: extendedOrderList.reorder_frequency_days || 14,\n      preferred_order_day: extendedOrderList.preferred_order_day || null,\n      order_cutoff_time: extendedOrderList.order_cutoff_time || '',\n      min_order_value: extendedOrderList.min_order_value || 0,\n      tags: extendedOrderList.tags || [],\n    };\n\n    showSettingsDialog.value = true;\n  };\n\n  const saveSettings = async () => {\n    savingSettings.value = true;\n    try {\n      await orderListsStore.updateOrderList({\n        id: props.orderList.id,\n        ...settingsForm.value,\n      });\n\n      $q.notify({\n        type: 'positive',\n        message: 'Instellingen opgeslagen!',\n        timeout: 2000,\n      });\n\n      emit('list-updated', props.orderList);\n      showSettingsDialog.value = false;\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij opslaan instellingen',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      savingSettings.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    // Load order suggestions for this list if not already loaded\n    const authStore = useAuthStore();\n    if (authStore.clinicId) {\n      await orderListsStore.generateOrderSuggestions(authStore.clinicId);\n    }\n  });\n</script>\n\n<style scoped>\n  /* Order list card styles */\n  .modern-order-card {\n    background: white;\n    border-radius: 16px;\n    box-shadow: var(--shadow-md);\n    transition: all 0.3s ease;\n    overflow: hidden;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid rgba(0, 0, 0, 0.06);\n  }\n\n  .modern-order-card:hover {\n    transform: translateY(-4px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Card Header */\n  .card-header {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 20px 20px 16px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.06);\n  }\n\n  .header-left {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n    flex: 1;\n  }\n\n  .list-icon {\n    width: 40px;\n    height: 40px;\n    border-radius: 10px;\n    background: rgba(25, 118, 210, 0.1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .list-info {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-title {\n    font-size: 16px;\n    font-weight: 600;\n    color: #1a1a1a;\n    margin: 0 0 4px 0;\n    line-height: 1.3;\n    word-break: break-word;\n  }\n\n  .list-subtitle {\n    font-size: 13px;\n    color: #666;\n    margin: 0;\n    line-height: 1.4;\n    word-break: break-word;\n  }\n\n  .header-right {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    flex-shrink: 0;\n  }\n\n  .status-badge {\n    font-size: 11px;\n    font-weight: 500;\n    padding: 4px 8px;\n    border-radius: 6px;\n  }\n\n  .menu-btn {\n    width: 32px;\n    height: 32px;\n    color: #666;\n  }\n\n  .menu-btn:hover {\n    background: rgba(0, 0, 0, 0.08);\n  }\n\n  /* Tags Section */\n  .tags-section {\n    padding: 0 20px 16px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 6px;\n  }\n\n  .tag-chip {\n    font-size: 11px;\n    border-color: rgba(0, 0, 0, 0.12);\n    color: #666;\n  }\n\n  /* Card Content */\n  .card-content {\n    flex: 1;\n    padding: 16px 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n  }\n\n  /* Critical Alert */\n  .critical-alert {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px;\n    background: rgba(244, 67, 54, 0.08);\n    border: 1px solid rgba(244, 67, 54, 0.2);\n    border-radius: 8px;\n  }\n\n  .alert-icon {\n    flex-shrink: 0;\n  }\n\n  .alert-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    gap: 8px;\n  }\n\n  .alert-text {\n    font-size: 13px;\n    font-weight: 500;\n    color: #d32f2f;\n  }\n\n  .alert-btn {\n    font-size: 12px;\n    min-height: 28px;\n    padding: 0 12px;\n  }\n\n  /* Stats Grid */\n  .stats-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n  }\n\n  .stat-item {\n    text-align: center;\n    padding: 12px 8px;\n    border-radius: 8px;\n    border: 1px solid;\n    transition: transform 0.2s ease;\n  }\n\n  .stat-item:hover {\n    transform: scale(1.02);\n  }\n\n  .stat-critical {\n    background: rgba(244, 67, 54, 0.08);\n    border-color: rgba(244, 67, 54, 0.2);\n  }\n\n  .stat-warning {\n    background: rgba(255, 152, 0, 0.08);\n    border-color: rgba(255, 152, 0, 0.2);\n  }\n\n  .stat-success {\n    background: rgba(76, 175, 80, 0.08);\n    border-color: rgba(76, 175, 80, 0.2);\n  }\n\n  .stat-info {\n    background: rgba(33, 150, 243, 0.08);\n    border-color: rgba(33, 150, 243, 0.2);\n  }\n\n  .stat-value {\n    font-size: 20px;\n    font-weight: 700;\n    line-height: 1;\n    margin-bottom: 4px;\n  }\n\n  .stat-critical .stat-value {\n    color: #d32f2f;\n  }\n  .stat-warning .stat-value {\n    color: #f57c00;\n  }\n  .stat-success .stat-value {\n    color: #388e3c;\n  }\n  .stat-info .stat-value {\n    color: #1976d2;\n  }\n\n  .stat-label {\n    font-size: 11px;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    color: #666;\n  }\n\n  /* Quick Info */\n  .quick-info {\n    display: flex;\n    justify-content: space-between;\n    padding: 12px;\n    background: rgba(0, 0, 0, 0.02);\n    border-radius: 8px;\n    margin-top: auto;\n  }\n\n  .info-item {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 13px;\n    color: #666;\n  }\n\n  .info-icon {\n    color: #999;\n  }\n\n  /* Card Actions */\n  .card-actions {\n    padding: 16px 20px 20px;\n    border-top: 1px solid rgba(0, 0, 0, 0.06);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 12px;\n  }\n\n  .primary-actions {\n    display: flex;\n    gap: 8px;\n    flex: 1;\n  }\n\n  .action-btn {\n    flex: 1;\n    min-height: 36px;\n    font-size: 13px;\n    font-weight: 500;\n  }\n\n  .action-btn--primary {\n    background: linear-gradient(135deg, #1976d2, #1565c0);\n  }\n\n  .action-btn--secondary {\n    border-color: #1976d2;\n    color: #1976d2;\n  }\n\n  .secondary-actions {\n    display: flex;\n    gap: 4px;\n  }\n\n  .icon-btn {\n    width: 36px;\n    height: 36px;\n  }\n\n  .icon-btn:hover {\n    background: rgba(0, 0, 0, 0.08);\n  }\n\n  /* Actions Menu */\n  .actions-menu {\n    min-width: 160px;\n    border-radius: 8px;\n    overflow: hidden;\n  }\n\n  /* Auto Reorder Progress */\n  .auto-reorder-progress {\n    margin-top: -1px;\n    background: var(--q-surface);\n  }\n\n  /* Dark Mode Support */\n  .body--dark .modern-order-card {\n    background: #2d2d2d;\n    border-color: rgba(255, 255, 255, 0.12);\n  }\n\n  .body--dark .card-header {\n    border-bottom-color: rgba(255, 255, 255, 0.12);\n  }\n\n  .body--dark .list-title {\n    color: #fff;\n  }\n\n  .body--dark .list-subtitle {\n    color: #bbb;\n  }\n\n  .body--dark .quick-info {\n    background: rgba(255, 255, 255, 0.08);\n  }\n\n  .body--dark .card-actions {\n    border-top-color: rgba(255, 255, 255, 0.12);\n  }\n\n  /* Responsive Design */\n  @media (max-width: 600px) {\n    .card-header {\n      padding: 16px;\n    }\n\n    .card-content {\n      padding: 12px 16px;\n    }\n\n    .card-actions {\n      padding: 12px 16px 16px;\n      flex-direction: column;\n      gap: 8px;\n    }\n\n    .primary-actions {\n      width: 100%;\n    }\n\n    .secondary-actions {\n      justify-content: center;\n    }\n\n    .stats-grid {\n      grid-template-columns: 1fr 1fr;\n      gap: 8px;\n    }\n\n    .stat-item {\n      padding: 8px 6px;\n    }\n\n    .stat-value {\n      font-size: 18px;\n    }\n  }\n\n  /* Accessibility */\n  @media (prefers-reduced-motion: reduce) {\n    .modern-order-card,\n    .stat-item,\n    .icon-btn,\n    .menu-btn {\n      transition: none;\n    }\n\n    .modern-order-card:hover {\n      transform: none;\n    }\n\n    .stat-item:hover {\n      transform: none;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\orderLists\\SimpleOrderListCard.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2118, 2121], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2118, 2121], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"simple-order-card\" @click=\"openOrderList\">\n    <!-- Card Header -->\n    <div class=\"card-header\">\n      <div class=\"header-left\">\n        <div class=\"list-icon\">\n          <q-icon\n            :name=\"getListIcon()\"\n            :color=\"getIconColor()\"\n            class=\"icon-size-lg\"\n          />\n        </div>\n        <div class=\"list-info\">\n          <h3 class=\"list-title\">{{ orderList.name }}</h3>\n          <p v-if=\"orderList.description\" class=\"list-subtitle\">\n            {{ orderList.description }}\n          </p>\n        </div>\n      </div>\n\n      <div class=\"header-right\">\n        <q-badge\n          :color=\"statusColor\"\n          :label=\"statusLabel\"\n          class=\"status-badge\"\n        />\n      </div>\n    </div>\n\n    <!-- Card Content -->\n    <div class=\"card-content\">\n      <!-- Critical Alert (only if critical items exist) -->\n      <div v-if=\"hasCriticalItems\" class=\"critical-alert\">\n        <q-icon name=\"warning\" color=\"negative\" class=\"icon-size-base\" />\n        <span class=\"alert-text\">{{ criticalItemsCount }} kritieke items</span>\n      </div>\n\n      <!-- Basic Info -->\n      <div class=\"basic-info\">\n        <div class=\"info-item\">\n          <q-icon name=\"inventory\" class=\"info-icon icon-size-sm\" />\n          <span>{{ (orderList as any).totalItems || 0 }} producten</span>\n        </div>\n        <div v-if=\"hasItemsToOrder\" class=\"info-item order-ready\">\n          <q-icon name=\"shopping_cart\" class=\"info-icon icon-size-sm\" />\n          <span>{{ itemsToOrderCount }} te bestellen</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Card Footer -->\n    <div class=\"card-footer\">\n      <q-btn\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\"\n        outline\n        no-caps\n        size=\"sm\"\n        class=\"manage-btn\"\n        @click.stop=\"openOrderList\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useRouter } from 'vue-router';\n  import type { OrderListDTO } from '@/domain/inventory/dto';\n\n  interface Props {\n    orderList: OrderListDTO;\n    reorderAdvice?: any | null;\n  }\n\n  const props = defineProps<Props>();\n  const router = useRouter();\n\n  // Computed properties\n  const statusColor = computed(() => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'positive';\n      case 'draft':\n        return 'warning';\n      case 'submitted':\n        return 'info';\n      case 'confirmed':\n        return 'primary';\n      case 'delivered':\n        return 'positive';\n      case 'cancelled':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  });\n\n  const statusLabel = computed(() => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'Klaar';\n      case 'draft':\n        return 'Concept';\n      case 'submitted':\n        return 'Verstuurd';\n      case 'confirmed':\n        return 'Bevestigd';\n      case 'delivered':\n        return 'Geleverd';\n      case 'cancelled':\n        return 'Geannuleerd';\n      default:\n        return 'Onbekend';\n    }\n  });\n\n  const hasCriticalItems = computed(() => {\n    return props.reorderAdvice?.items_by_urgency?.critical?.length > 0;\n  });\n\n  const criticalItemsCount = computed(() => {\n    return props.reorderAdvice?.items_by_urgency?.critical?.length || 0;\n  });\n\n  const hasItemsToOrder = computed(() => {\n    return props.reorderAdvice?.total_items_to_order > 0;\n  });\n\n  const itemsToOrderCount = computed(() => {\n    return props.reorderAdvice?.total_items_to_order || 0;\n  });\n\n  // Methods\n  const getListIcon = () => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'check_circle';\n      case 'draft':\n        return 'edit';\n      case 'submitted':\n        return 'send';\n      case 'confirmed':\n        return 'verified';\n      case 'delivered':\n        return 'local_shipping';\n      case 'cancelled':\n        return 'cancel';\n      default:\n        return 'list_alt';\n    }\n  };\n\n  const getIconColor = () => {\n    return statusColor.value;\n  };\n\n  const openOrderList = () => {\n    router.push(`/order-lists/${props.orderList.id}`);\n  };\n</script>\n\n<style scoped>\n  .simple-order-card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: var(--shadow-md);\n    transition: all 0.2s ease;\n    overflow: hidden;\n    border: 1px solid rgba(0, 0, 0, 0.04);\n    cursor: pointer;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .simple-order-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Header */\n  .card-header {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 16px 16px 12px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.04);\n  }\n\n  .header-left {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-icon {\n    width: 36px;\n    height: 36px;\n    border-radius: 8px;\n    background: rgba(25, 118, 210, 0.08);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .list-info {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-title {\n    font-size: 15px;\n    font-weight: 600;\n    color: #1a1a1a;\n    margin: 0 0 4px 0;\n    line-height: 1.3;\n    word-break: break-word;\n  }\n\n  .list-subtitle {\n    font-size: 12px;\n    color: #666;\n    margin: 0;\n    line-height: 1.4;\n    word-break: break-word;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .header-right {\n    flex-shrink: 0;\n  }\n\n  .status-badge {\n    font-size: 10px;\n    font-weight: 500;\n    padding: 3px 6px;\n    border-radius: 4px;\n  }\n\n  /* Content */\n  .card-content {\n    flex: 1;\n    padding: 12px 16px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  .critical-alert {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 8px 12px;\n    background: rgba(244, 67, 54, 0.05);\n    border: 1px solid rgba(244, 67, 54, 0.1);\n    border-radius: 6px;\n  }\n\n  .alert-text {\n    font-size: 12px;\n    color: #d32f2f;\n    font-weight: 500;\n  }\n\n  .basic-info {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .info-item {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 12px;\n    color: #666;\n  }\n\n  .info-item.order-ready {\n    color: #1976d2;\n    font-weight: 500;\n  }\n\n  .info-icon {\n    color: #999;\n  }\n\n  .info-item.order-ready .info-icon {\n    color: #1976d2;\n  }\n\n  /* Footer */\n  .card-footer {\n    padding: 12px 16px;\n    border-top: 1px solid rgba(0, 0, 0, 0.04);\n    background: rgba(0, 0, 0, 0.01);\n  }\n\n  .manage-btn {\n    width: 100%;\n    border-radius: 6px;\n  }\n\n  /* Responsive */\n  @media (max-width: 600px) {\n    .card-header {\n      padding: 14px 14px 10px;\n    }\n\n    .card-content {\n      padding: 10px 14px;\n    }\n\n    .card-footer {\n      padding: 10px 14px;\n    }\n\n    .list-title {\n      font-size: 14px;\n    }\n\n    .list-subtitle {\n      font-size: 11px;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\DynamicPlatformWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1448, 1451], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1448, 1451], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2413, 2416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2413, 2416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDashboardWidget\n    :title=\"widget.title\"\n    :loading=\"widget.loading || loading\"\n  >\n    <template v-if=\"hasActions\" #actions>\n      <q-btn\n        flat\n        round\n        dense\n        icon=\"refresh\"\n        size=\"sm\"\n        :loading=\"widget.loading || loading\"\n        @click=\"$emit('refresh', widget.id)\"\n      >\n        <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n      </q-btn>\n      <q-btn\n        flat\n        round\n        dense\n        icon=\"settings\"\n        size=\"sm\"\n        @click=\"$emit('configure', widget.id)\"\n      >\n        <q-tooltip>{{ $t('common.configure') }}</q-tooltip>\n      </q-btn>\n    </template>\n\n    <!-- Widget Content based on type -->\n    <component :is=\"widgetComponent\" :data=\"widget.data\" v-bind=\"widgetProps\" />\n  </BaseDashboardWidget>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { BaseDashboardWidget } from '@/components/cards';\n\n  // Import platform widget components\n  import MetricWidget from './widgets/MetricWidget.vue';\n  import ChartWidget from './widgets/ChartWidget.vue';\n  import ListWidget from './widgets/ListWidget.vue';\n  import SystemWidget from './widgets/SystemWidget.vue';\n  import TableWidget from './widgets/TableWidget.vue';\n\n  export interface PlatformWidget {\n    id: string;\n    title: string;\n    type: 'metric' | 'chart' | 'list' | 'table' | 'system';\n    data: Record<string, any>;\n    size: 'small' | 'medium' | 'large';\n    position: number;\n    visible: boolean;\n    loading?: boolean;\n    error?: string;\n  }\n\n  interface Props {\n    widget: PlatformWidget;\n    loading?: boolean;\n    showActions?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    loading: false,\n    showActions: true,\n  });\n\n  const emit = defineEmits<{\n    refresh: [widgetId: string];\n    configure: [widgetId: string];\n  }>();\n\n  const { t } = useI18n();\n\n  // Computed properties\n  const widgetComponent = computed(() => {\n    switch (props.widget.type) {\n      case 'metric':\n        return MetricWidget;\n      case 'chart':\n        return ChartWidget;\n      case 'list':\n        return ListWidget;\n      case 'table':\n        return TableWidget;\n      case 'system':\n        return SystemWidget;\n      default:\n        return MetricWidget; // Fallback\n    }\n  });\n\n  const widgetProps = computed(() => {\n    const baseProps: Record<string, any> = {};\n\n    // Add any specific props based on widget type\n    if (props.widget.type === 'chart') {\n      // Platform charts might have different requirements\n      baseProps.chartType = 'line'; // Default for platform\n    }\n\n    return baseProps;\n  });\n\n  const hasActions = computed(() => {\n    return props.showActions;\n  });\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\ChartWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2183, 2186], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2183, 2186], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2648, 2651], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2648, 2651], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Chart.js will be rendered here -->\r\n    <canvas ref=\"chartCanvas\" class=\"chart-canvas\"></canvas>\r\n\r\n    <!-- Fallback for when Chart.js is not available -->\r\n    <div v-if=\"!chartReady\" class=\"chart-fallback\">\r\n      <q-icon name=\"bar_chart\" size=\"4em\" class=\"text-grey-4 q-mb-md\" />\r\n      <div class=\"text-subtitle2 text-grey-6\">\r\n        {{ $t('platform.chart.loading') }}\r\n      </div>\r\n\r\n      <!-- Simple data display -->\r\n      <div v-if=\"data.labels && data.data\" class=\"simple-chart q-mt-md\">\r\n        <div v-for=\"(value, index) in data.data\" :key=\"index\" class=\"chart-bar\">\r\n          <div class=\"bar-label\">{{ data.labels[index] }}</div>\r\n          <div class=\"bar-container\">\r\n            <div\r\n              class=\"bar-fill\"\r\n              :style=\"{ width: `${(value / maxValue) * 100}%` }\"\r\n            ></div>\r\n            <span class=\"bar-value\">{{ value }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onUnmounted, nextTick } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n  import ChartCanvas from '@/components/charts/ChartCanvas.vue';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: {\r\n      chart_type?: string;\r\n      labels?: string[];\r\n      data?: number[];\r\n      datasets?: Array<{\r\n        label: string;\r\n        data: number[];\r\n        color: string;\r\n      }>;\r\n      title?: string;\r\n      total?: number;\r\n    };\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Reactive state\r\n  const chartReady = ref(true);\r\n\r\n  // Computed\r\n  const maxValue = computed(() => {\r\n    if (props.data.data) {\r\n      return Math.max(...props.data.data);\r\n    }\r\n    return 100;\r\n  });\r\n\r\n  // Methods\r\n  function getChartConfig() {\r\n    const {\r\n      chart_type = 'bar',\r\n      labels = [],\r\n      data = [],\r\n      datasets = [],\r\n    } = props.data;\r\n\r\n    // If datasets are provided, use them\r\n    if (datasets.length > 0) {\r\n      return {\r\n        type: chart_type as any,\r\n        data: {\r\n          labels,\r\n          datasets: datasets.map(dataset => ({\r\n            label: dataset.label,\r\n            data: dataset.data,\r\n            backgroundColor: dataset.color,\r\n            borderColor: dataset.color,\r\n            borderWidth: 2,\r\n            fill: false,\r\n          })),\r\n        },\r\n        options: getChartOptions(),\r\n      };\r\n    }\r\n\r\n    // Otherwise create a simple dataset\r\n    return {\r\n      type: chart_type as any,\r\n      data: {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: props.data.title || 'Data',\r\n            data,\r\n            backgroundColor: 'rgba(33, 150, 243, 0.6)',\r\n            borderColor: 'rgba(33, 150, 243, 1)',\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n      },\r\n      options: getChartOptions(),\r\n    };\r\n  }\r\n\r\n  function getChartOptions() {\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom' as const,\r\n        },\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)',\r\n          },\r\n        },\r\n        x: {\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)',\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  // Lifecycle (no-op, ChartCanvas handles rendering)\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform chart widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  /* ChartCanvas handles rendering and fallback */\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    /* no-op */\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\ListWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1608, 1611], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1608, 1611], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1630, 1633], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1630, 1633], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDashboardWidget :hide-header=\"true\">\n    <q-list separator>\n      <q-item v-for=\"(item, index) in listItems\" :key=\"index\" class=\"list-item\">\n        <q-item-section v-if=\"item.icon || item.severity\" avatar>\n          <q-icon\n            :name=\"item.icon || getSeverityIcon(item.severity)\"\n            :color=\"item.color || getSeverityColor(item.severity)\"\n            size=\"sm\"\n          />\n        </q-item-section>\n\n        <q-item-section>\n          <q-item-label>{{\n            item.title || item.description || item.message\n          }}</q-item-label>\n          <q-item-label v-if=\"item.subtitle || item.timestamp\" caption>\n            {{ item.subtitle || formatTimestamp(item.timestamp) }}\n          </q-item-label>\n        </q-item-section>\n\n        <q-item-section v-if=\"item.value || item.count\" side>\n          <q-chip\n            :color=\"item.chipColor || 'primary'\"\n            text-color=\"white\"\n            size=\"sm\"\n          >\n            {{ item.value || item.count }}\n          </q-chip>\n        </q-item-section>\n      </q-item>\n\n      <q-item v-if=\"!listItems.length\">\n        <q-item-section class=\"text-center text-grey-6\">\n          <q-icon name=\"info\" size=\"2em\" class=\"q-mb-sm\" />\n          <div>{{ $t('common.noData') }}</div>\n        </q-item-section>\n      </q-item>\n    </q-list>\n  </BaseDashboardWidget>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { BaseDashboardWidget } from '@/components/cards';\n\n  const { t } = useI18n();\n\n  // Props\n  interface Props {\n    data: {\n      items?: any[];\n      alerts?: any[];\n    };\n  }\n\n  const props = defineProps<Props>();\n\n  // Computed\n  const listItems = computed(() => {\n    return props.data.items || props.data.alerts || [];\n  });\n\n  // Methods\n  function getSeverityIcon(severity?: string): string {\n    switch (severity) {\n      case 'error':\n      case 'high':\n        return 'error';\n      case 'warning':\n      case 'medium':\n        return 'warning';\n      case 'info':\n      case 'low':\n        return 'info';\n      case 'success':\n        return 'check_circle';\n      default:\n        return 'circle';\n    }\n  }\n\n  function getSeverityColor(severity?: string): string {\n    switch (severity) {\n      case 'error':\n      case 'high':\n        return 'negative';\n      case 'warning':\n      case 'medium':\n        return 'warning';\n      case 'info':\n      case 'low':\n        return 'info';\n      case 'success':\n        return 'positive';\n      default:\n        return 'grey';\n    }\n  }\n\n  function formatTimestamp(timestamp?: string): string {\n    if (!timestamp) return '';\n\n    const date = new Date(timestamp);\n    return new Intl.DateTimeFormat('nl-NL', {\n      day: '2-digit',\n      month: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  // Platform list widget content styling (wrapper now handled by BaseDashboardWidget)\n\n  .list-item {\n    border-radius: 8px;\n    margin-bottom: 4px;\n    transition: background-color 0.2s ease;\n\n    &:hover {\n      background-color: rgba(var(--q-primary-rgb), 0.05);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\MetricWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2080, 2083], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2080, 2083], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3868, 3871], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3868, 3871], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 183,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 183,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5245, 5248], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5245, 5248], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 203,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 203,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5709, 5712], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5709, 5712], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Single Value Metric -->\r\n    <template v-if=\"isSingleValue\">\r\n      <div class=\"metric-primary\">\r\n        <div class=\"metric-value\">{{ formatValue(primaryValue) }}</div>\r\n        <div class=\"metric-label\">{{ primaryLabel }}</div>\r\n        <div v-if=\"trend\" class=\"metric-trend\" :class=\"trendClass\">\r\n          <q-icon :name=\"trendIcon\" class=\"q-mr-xs\" />\r\n          {{ trend }}\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Multi-Value Metrics -->\r\n    <template v-else>\r\n      <div class=\"metrics-grid\">\r\n        <div\r\n          v-for=\"(value, key) in filteredData\"\r\n          :key=\"key\"\r\n          class=\"metric-item\"\r\n        >\r\n          <div class=\"metric-value\">{{ formatValue(value) }}</div>\r\n          <div class=\"metric-label\">{{ formatLabel(key) }}</div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Progress Bar (if percentage data) -->\r\n    <template v-if=\"hasPercentage\">\r\n      <div class=\"metric-progress q-mt-md\">\r\n        <q-linear-progress\r\n          :value=\"percentageValue / 100\"\r\n          :color=\"progressColor\"\r\n          size=\"8px\"\r\n          rounded\r\n        />\r\n        <div class=\"text-caption text-center q-mt-xs\">\r\n          {{ Math.round(percentageValue) }}% {{ progressLabel }}\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Additional Info -->\r\n    <template v-if=\"additionalInfo\">\r\n      <div class=\"metric-info q-mt-md\">\r\n        <div\r\n          v-for=\"(info, key) in additionalInfo\"\r\n          :key=\"key\"\r\n          class=\"info-item text-caption\"\r\n        >\r\n          <span class=\"info-label\">{{ formatLabel(key) }}:</span>\r\n          <span class=\"info-value q-ml-xs\">{{ formatValue(info) }}</span>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: Record<string, any>;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Computed properties\r\n  const isSingleValue = computed(() => {\r\n    const keys = Object.keys(props.data);\r\n    return (\r\n      keys.length === 1 ||\r\n      keys.includes('value') ||\r\n      keys.includes('count') ||\r\n      keys.includes('total')\r\n    );\r\n  });\r\n\r\n  const primaryValue = computed(() => {\r\n    if (props.data.value !== undefined) return props.data.value;\r\n    if (props.data.count !== undefined) return props.data.count;\r\n    if (props.data.total !== undefined) return props.data.total;\r\n    if (props.data.total_value !== undefined) return props.data.total_value;\r\n\r\n    // Return first numeric value\r\n    const firstNumericKey = Object.keys(props.data).find(\r\n      key => typeof props.data[key] === 'number'\r\n    );\r\n    return firstNumericKey ? props.data[firstNumericKey] : 0;\r\n  });\r\n\r\n  const primaryLabel = computed(() => {\r\n    if (props.data.label) return props.data.label;\r\n    if (props.data.title) return props.data.title;\r\n    return '';\r\n  });\r\n\r\n  const trend = computed(() => {\r\n    return props.data.trend;\r\n  });\r\n\r\n  const trendClass = computed(() => {\r\n    if (!trend.value) return '';\r\n\r\n    if (trend.value === 'up' || trend.value === 'increasing')\r\n      return 'trend-positive';\r\n    if (trend.value === 'down' || trend.value === 'decreasing')\r\n      return 'trend-negative';\r\n    return 'trend-neutral';\r\n  });\r\n\r\n  const trendIcon = computed(() => {\r\n    if (!trend.value) return '';\r\n\r\n    if (trend.value === 'up' || trend.value === 'increasing')\r\n      return 'trending_up';\r\n    if (trend.value === 'down' || trend.value === 'decreasing')\r\n      return 'trending_down';\r\n    return 'trending_flat';\r\n  });\r\n\r\n  const filteredData = computed(() => {\r\n    const filtered: Record<string, any> = {};\r\n\r\n    // Exclude metadata keys\r\n    const excludeKeys = [\r\n      'label',\r\n      'title',\r\n      'trend',\r\n      'status',\r\n      'last_check',\r\n      'error',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (!excludeKeys.includes(key) && typeof props.data[key] === 'number') {\r\n        filtered[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  });\r\n\r\n  const hasPercentage = computed(() => {\r\n    return (\r\n      props.data.compliance_rate !== undefined ||\r\n      props.data.health_percentage !== undefined ||\r\n      props.data.percentage !== undefined\r\n    );\r\n  });\r\n\r\n  const percentageValue = computed(() => {\r\n    return (\r\n      props.data.compliance_rate ||\r\n      props.data.health_percentage ||\r\n      props.data.percentage ||\r\n      0\r\n    );\r\n  });\r\n\r\n  const progressColor = computed(() => {\r\n    const value = percentageValue.value;\r\n    if (value >= 90) return 'positive';\r\n    if (value >= 70) return 'warning';\r\n    return 'negative';\r\n  });\r\n\r\n  const progressLabel = computed(() => {\r\n    if (props.data.compliance_rate !== undefined)\r\n      return t('platform.metrics.compliance');\r\n    if (props.data.health_percentage !== undefined)\r\n      return t('platform.metrics.health');\r\n    return t('platform.metrics.progress');\r\n  });\r\n\r\n  const additionalInfo = computed(() => {\r\n    const info: Record<string, any> = {};\r\n\r\n    // Include text/status information\r\n    const includeKeys = [\r\n      'status',\r\n      'last_check',\r\n      'response_time_ms',\r\n      'environment',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (includeKeys.includes(key) && props.data[key] !== undefined) {\r\n        info[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return Object.keys(info).length > 0 ? info : null;\r\n  });\r\n\r\n  // Methods\r\n  function formatValue(value: any): string {\r\n    if (typeof value === 'number') {\r\n      if (value >= 1000000) {\r\n        return (value / 1000000).toFixed(1) + 'M';\r\n      } else if (value >= 1000) {\r\n        return (value / 1000).toFixed(1) + 'K';\r\n      }\r\n      return value.toLocaleString();\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  function formatLabel(key: string): string {\r\n    // Convert snake_case to readable labels\r\n    const formatted = key\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n\r\n    // Try to get translation first\r\n    const translationKey = `platform.metrics.${key}`;\r\n    const translated = t(translationKey);\r\n\r\n    return translated !== translationKey ? translated : formatted;\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform metric widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  .metric-primary {\r\n    text-align: center;\r\n\r\n    .metric-value {\r\n      font-size: 2.5rem;\r\n      font-weight: bold;\r\n      color: var(--q-primary);\r\n      line-height: 1;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .metric-label {\r\n      font-size: 1rem;\r\n      color: var(--q-dark);\r\n      font-weight: 500;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .metric-trend {\r\n      font-size: 0.875rem;\r\n      font-weight: 500;\r\n\r\n      &.trend-positive {\r\n        color: var(--q-positive);\r\n      }\r\n\r\n      &.trend-negative {\r\n        color: var(--q-negative);\r\n      }\r\n\r\n      &.trend-neutral {\r\n        color: var(--q-dark);\r\n      }\r\n    }\r\n  }\r\n\r\n  .metrics-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n    gap: 1rem;\r\n\r\n    .metric-item {\r\n      text-align: center;\r\n      padding: 0.5rem;\r\n      border-radius: 8px;\r\n      background: rgba(var(--q-primary-rgb), 0.05);\r\n\r\n      .metric-value {\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n        color: var(--q-primary);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      .metric-label {\r\n        font-size: 0.75rem;\r\n        color: var(--q-dark);\r\n        margin-top: 0.25rem;\r\n        line-height: 1.2;\r\n      }\r\n    }\r\n  }\r\n\r\n  .metric-progress {\r\n    .q-linear-progress {\r\n      border-radius: 4px;\r\n    }\r\n  }\r\n\r\n  .metric-info {\r\n    .info-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      padding: 0.25rem 0;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n\r\n      .info-label {\r\n        color: var(--q-dark);\r\n        opacity: 0.7;\r\n      }\r\n\r\n      .info-value {\r\n        font-weight: 500;\r\n        color: var(--q-dark);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    .metric-primary .metric-label,\r\n    .metrics-grid .metric-item .metric-label,\r\n    .metric-info .info-item .info-label,\r\n    .metric-info .info-item .info-value {\r\n      color: var(--q-dark-page);\r\n    }\r\n\r\n    .metrics-grid .metric-item {\r\n      background: rgba(255, 255, 255, 0.05);\r\n    }\r\n\r\n    .metric-info .info-item {\r\n      border-bottom-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 480px) {\r\n    .metric-primary .metric-value {\r\n      font-size: 2rem;\r\n    }\r\n\r\n    .metrics-grid {\r\n      grid-template-columns: repeat(2, 1fr);\r\n      gap: 0.5rem;\r\n\r\n      .metric-item {\r\n        padding: 0.25rem;\r\n\r\n        .metric-value {\r\n          font-size: 1.25rem;\r\n        }\r\n\r\n        .metric-label {\r\n          font-size: 0.7rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\SystemWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7852, 7855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7852, 7855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9402, 9405], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9402, 9405], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 354,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 354,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10681, 10684], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10681, 10684], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Version Information -->\r\n    <template v-if=\"isVersionInfo\">\r\n      <div class=\"version-section\">\r\n        <div class=\"version-header\">\r\n          <q-icon name=\"info\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.versionInfo') }}</span>\r\n        </div>\r\n\r\n        <div class=\"version-details\">\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.appVersion')\r\n            }}</span>\r\n            <q-chip color=\"primary\" text-color=\"white\" class=\"version-value\">\r\n              v{{ data.app_version }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.buildNumber')\r\n            }}</span>\r\n            <span class=\"version-value\">#{{ data.build_number }}</span>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.environment')\r\n            }}</span>\r\n            <q-chip\r\n              :color=\"environmentColor\"\r\n              text-color=\"white\"\r\n              class=\"version-value\"\r\n            >\r\n              {{ data.environment }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.lastDeployment')\r\n            }}</span>\r\n            <span class=\"version-value\">{{\r\n              formatDateTime(data.last_deployment)\r\n            }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dependencies -->\r\n        <template v-if=\"data.dependencies\">\r\n          <q-separator class=\"q-my-md\" />\r\n          <div class=\"dependencies-section\">\r\n            <div class=\"text-subtitle2 q-mb-sm\">\r\n              <q-icon name=\"extension\" class=\"q-mr-xs\" />\r\n              {{ $t('platform.system.dependencies') }}\r\n            </div>\r\n            <div class=\"dependencies-grid\">\r\n              <div\r\n                v-for=\"(version, name) in data.dependencies\"\r\n                :key=\"name\"\r\n                class=\"dependency-item\"\r\n              >\r\n                <span class=\"dependency-name\">{{ name }}</span>\r\n                <span class=\"dependency-version\">{{ version }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- System Health -->\r\n    <template v-else-if=\"isSystemHealth\">\r\n      <div class=\"health-section\">\r\n        <div class=\"health-header\">\r\n          <q-icon name=\"health_and_safety\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.healthStatus') }}</span>\r\n        </div>\r\n\r\n        <div class=\"health-metrics\">\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.overallStatus') }}\r\n            </div>\r\n            <q-chip\r\n              :color=\"healthStatusColor\"\r\n              text-color=\"white\"\r\n              :icon=\"healthStatusIcon\"\r\n              class=\"health-value\"\r\n            >\r\n              {{ $t(`platform.system.status.${data.overall_status}`) }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.errors24h') }}\r\n            </div>\r\n            <div class=\"health-value text-h6\">\r\n              {{ data.error_count_24h || 0 }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.activePractices') }}\r\n            </div>\r\n            <div class=\"health-value text-h6\">\r\n              {{ data.active_practices_1h || 0 }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.databaseStatus') }}\r\n            </div>\r\n            <q-chip\r\n              :color=\"\r\n                data.database_status === 'connected' ? 'positive' : 'negative'\r\n              \"\r\n              text-color=\"white\"\r\n              :icon=\"\r\n                data.database_status === 'connected' ? 'check_circle' : 'error'\r\n              \"\r\n              class=\"health-value\"\r\n            >\r\n              {{ $t(`platform.system.database.${data.database_status}`) }}\r\n            </q-chip>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"health-footer\">\r\n          <div class=\"text-caption text-grey-6\">\r\n            {{ $t('platform.system.lastCheck') }}:\r\n            {{ formatDateTime(data.last_check) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Database Status -->\r\n    <template v-else-if=\"isDatabaseStatus\">\r\n      <div class=\"database-section\">\r\n        <div class=\"database-header\">\r\n          <q-icon name=\"storage\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{\r\n            $t('platform.system.databaseStatus')\r\n          }}</span>\r\n        </div>\r\n\r\n        <div class=\"database-metrics\">\r\n          <div class=\"database-item\">\r\n            <q-icon\r\n              :name=\"data.status === 'connected' ? 'check_circle' : 'error'\"\r\n              :color=\"data.status === 'connected' ? 'positive' : 'negative'\"\r\n              size=\"sm\"\r\n              class=\"q-mr-sm\"\r\n            />\r\n            <span>{{ $t(`platform.system.database.${data.status}`) }}</span>\r\n          </div>\r\n\r\n          <template v-if=\"data.response_time_ms\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"speed\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.responseTime') }}:\r\n                {{ data.response_time_ms }}ms</span\r\n              >\r\n            </div>\r\n          </template>\r\n\r\n          <template v-if=\"data.total_tables\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"table_chart\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.totalTables') }}:\r\n                {{ data.total_tables }}</span\r\n              >\r\n            </div>\r\n          </template>\r\n\r\n          <template v-if=\"data.largest_table\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"dataset\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.largestTable') }}:\r\n                {{ data.largest_table }}</span\r\n              >\r\n            </div>\r\n          </template>\r\n        </div>\r\n\r\n        <template v-if=\"data.error\">\r\n          <q-separator class=\"q-my-md\" />\r\n          <div class=\"database-error\">\r\n            <q-icon name=\"error_outline\" color=\"negative\" class=\"q-mr-sm\" />\r\n            <span class=\"text-negative\">{{ data.error }}</span>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Generic System Information -->\r\n    <template v-else>\r\n      <div class=\"system-info\">\r\n        <div class=\"system-header\">\r\n          <q-icon name=\"computer\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.information') }}</span>\r\n        </div>\r\n\r\n        <div class=\"system-details\">\r\n          <div\r\n            v-for=\"(value, key) in filteredData\"\r\n            :key=\"key\"\r\n            class=\"system-item\"\r\n          >\r\n            <span class=\"system-label\">{{ formatLabel(key) }}</span>\r\n            <span class=\"system-value\">{{ formatValue(value) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: Record<string, any>;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Computed properties\r\n  const isVersionInfo = computed(() => {\r\n    return (\r\n      props.data.app_version !== undefined ||\r\n      props.data.build_number !== undefined\r\n    );\r\n  });\r\n\r\n  const isSystemHealth = computed(() => {\r\n    return (\r\n      props.data.overall_status !== undefined ||\r\n      props.data.error_count_24h !== undefined\r\n    );\r\n  });\r\n\r\n  const isDatabaseStatus = computed(() => {\r\n    return (\r\n      props.data.status !== undefined &&\r\n      props.data.response_time_ms !== undefined\r\n    );\r\n  });\r\n\r\n  const environmentColor = computed(() => {\r\n    switch (props.data.environment) {\r\n      case 'production':\r\n        return 'negative';\r\n      case 'staging':\r\n        return 'warning';\r\n      case 'development':\r\n        return 'info';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const healthStatusColor = computed(() => {\r\n    switch (props.data.overall_status) {\r\n      case 'healthy':\r\n        return 'positive';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'critical':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const healthStatusIcon = computed(() => {\r\n    switch (props.data.overall_status) {\r\n      case 'healthy':\r\n        return 'check_circle';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'critical':\r\n        return 'error';\r\n      default:\r\n        return 'help';\r\n    }\r\n  });\r\n\r\n  const filteredData = computed(() => {\r\n    const filtered: Record<string, any> = {};\r\n\r\n    // Exclude complex objects and metadata\r\n    const excludeKeys = [\r\n      'dependencies',\r\n      'last_check',\r\n      'overall_status',\r\n      'error_count_24h',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (\r\n        !excludeKeys.includes(key) &&\r\n        typeof props.data[key] !== 'object' &&\r\n        props.data[key] !== undefined\r\n      ) {\r\n        filtered[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Methods\r\n  function formatDateTime(dateString?: string): string {\r\n    if (!dateString) return t('common.unknown');\r\n\r\n    const date = new Date(dateString);\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(date);\r\n  }\r\n\r\n  function formatLabel(key: string): string {\r\n    // Convert snake_case to readable labels\r\n    const formatted = key\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n\r\n    // Try to get translation first\r\n    const translationKey = `platform.system.${key}`;\r\n    const translated = t(translationKey);\r\n\r\n    return translated !== translationKey ? translated : formatted;\r\n  }\r\n\r\n  function formatValue(value: any): string {\r\n    if (typeof value === 'boolean') {\r\n      return value ? t('common.yes') : t('common.no');\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value.toLocaleString();\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform system widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  // Version Info Styles\r\n  .version-section {\r\n    .version-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .version-details {\r\n      .version-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .version-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .version-value {\r\n          font-family: var(--font-mono);\r\n        }\r\n      }\r\n    }\r\n\r\n    .dependencies-section {\r\n      .dependencies-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n        gap: 0.5rem;\r\n\r\n        .dependency-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 0.5rem;\r\n          background: rgba(var(--q-primary-rgb), 0.05);\r\n          border-radius: 6px;\r\n          border-left: 3px solid var(--q-primary);\r\n\r\n          .dependency-name {\r\n            font-weight: 500;\r\n            color: var(--q-dark);\r\n          }\r\n\r\n          .dependency-version {\r\n            font-family: var(--font-mono);\r\n            font-size: 0.875rem;\r\n            color: var(--q-primary);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Health Status Styles\r\n  .health-section {\r\n    .health-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .health-metrics {\r\n      .health-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.75rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .health-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .health-value {\r\n          font-weight: 600;\r\n        }\r\n      }\r\n    }\r\n\r\n    .health-footer {\r\n      margin-top: 1rem;\r\n      padding-top: 1rem;\r\n      border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n    }\r\n  }\r\n\r\n  // Database Status Styles\r\n  .database-section {\r\n    .database-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .database-metrics {\r\n      .database-item {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n      }\r\n    }\r\n\r\n    .database-error {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 0.75rem;\r\n      background: rgba(244, 67, 54, 0.05);\r\n      border-radius: 6px;\r\n      border-left: 3px solid var(--q-negative);\r\n    }\r\n  }\r\n\r\n  // System Info Styles\r\n  .system-info {\r\n    .system-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .system-details {\r\n      .system-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .system-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .system-value {\r\n          font-family: var(--font-mono);\r\n          color: var(--q-primary);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    .version-details .version-item,\r\n    .health-metrics .health-item,\r\n    .database-metrics .database-item,\r\n    .system-details .system-item {\r\n      border-bottom-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    .health-footer {\r\n      border-top-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    .dependencies-grid .dependency-item {\r\n      background: rgba(255, 255, 255, 0.05);\r\n    }\r\n\r\n    .database-error {\r\n      background: rgba(244, 67, 54, 0.1);\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 480px) {\r\n    .dependencies-grid {\r\n      grid-template-columns: 1fr;\r\n    }\r\n\r\n    .version-item,\r\n    .health-item,\r\n    .database-item,\r\n    .system-item {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      gap: 0.25rem;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\TableWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [894, 897], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [894, 897], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [919, 922], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [919, 922], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1388, 1391], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1388, 1391], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDashboardWidget :hide-header=\"true\">\n    <q-table\n      :rows=\"data.rows || []\"\n      :columns=\"columns\"\n      row-key=\"index\"\n      flat\n      :pagination=\"pagination\"\n      :loading=\"loading\"\n      class=\"platform-table\"\n    >\n      <template #no-data>\n        <div\n          class=\"full-width row flex-center q-gutter-sm\"\n          :class=\"error ? 'text-negative' : 'text-grey-6'\"\n        >\n          <q-icon size=\"2em\" :name=\"error ? 'error' : 'info'\" />\n          <span>{{ error || $t('common.noData') }}</span>\n        </div>\n      </template>\n    </q-table>\n  </BaseDashboardWidget>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { BaseDashboardWidget } from '@/components/cards';\n\n  const { t } = useI18n();\n\n  // Props\n  interface Props {\n    data: {\n      headers?: string[];\n      rows?: any[][];\n      columns?: any[];\n      error?: string;\n    };\n  }\n\n  const props = defineProps<Props>();\n  const error = computed(() => props.data?.error || '');\n\n  // Reactive state\n  const loading = ref(false);\n\n  // Computed\n  const columns = computed(() => {\n    if (props.data.columns) {\n      return props.data.columns;\n    }\n\n    if (props.data.headers) {\n      return props.data.headers.map((header, index) => ({\n        name: `col_${index}`,\n        label: header,\n        field: (row: any[]) => row[index],\n        align: 'left' as const,\n        sortable: true,\n      }));\n    }\n\n    return [];\n  });\n\n  const pagination = ref({\n    rowsPerPage: 10,\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // Platform table widget content styling (wrapper now handled by BaseDashboardWidget)\n\n  .platform-table {\n    /* Table styling now handled by global medical-table class */\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\AdvancedSearchDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 420,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 420,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13016, 13019], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13016, 13019], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 541,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 541,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15867, 15870], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15867, 15870], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDialog\n    v-model=\"isOpen\"\n    :title=\"$t('productsPage.advancedSearch.title')\"\n    icon=\"search\"\n    size=\"lg\"\n    variant=\"elegant\"\n    header-variant=\"solid\"\n  >\n    <div class=\"advanced-search-content\">\n      <!-- Basic Search -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          {{ $t('productsPage.advancedSearch.basicSearch') }}\n        </h6>\n        <div class=\"search-row\">\n          <q-input\n            v-model=\"searchCriteria.search\"\n            :placeholder=\"$t('productsPage.advancedSearch.searchPlaceholder')\"\n            outlined\n            clearable\n            class=\"search-input full-width\"\n          >\n            <template #prepend>\n              <q-icon name=\"search\" />\n            </template>\n          </q-input>\n        </div>\n      </div>\n\n      <!-- GS1 Search -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          <q-icon name=\"qr_code_2\" class=\"q-mr-xs\" />\n          {{ $t('productsPage.advancedSearch.gs1Search') }}\n        </h6>\n        <div class=\"search-grid\">\n          <q-input\n            v-model=\"searchCriteria.gtin\"\n            :placeholder=\"$t('productsPage.filters.gtinPlaceholder')\"\n            outlined\n            clearable\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"qr_code_2\" color=\"primary\" />\n            </template>\n            <template #append>\n              <q-btn\n                flat\n                round\n                icon=\"qr_code_scanner\"\n                color=\"primary\"\n                size=\"sm\"\n                @click=\"$emit('open-scanner')\"\n              />\n            </template>\n          </q-input>\n\n          <q-select\n            v-model=\"searchCriteria.country_of_origin\"\n            :options=\"countryOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectCountry')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"flag\" color=\"info\" />\n            </template>\n          </q-select>\n\n          <q-select\n            v-model=\"searchCriteria.gpc_brick_code\"\n            :options=\"gpcOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectGpc')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"category\" color=\"orange\" />\n            </template>\n          </q-select>\n\n          <q-select\n            v-model=\"searchCriteria.lifecycle_status\"\n            :options=\"lifecycleOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectLifecycle')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"timeline\" color=\"purple\" />\n            </template>\n          </q-select>\n        </div>\n      </div>\n\n      <!-- Category & Supplier -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          {{ $t('productsPage.advancedSearch.categorySupplier') }}\n        </h6>\n        <div class=\"search-grid\">\n          <q-select\n            v-model=\"searchCriteria.category\"\n            :options=\"categoryOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectCategory')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"folder\" color=\"amber\" />\n            </template>\n          </q-select>\n\n          <q-select\n            v-model=\"searchCriteria.supplier\"\n            :options=\"supplierOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectSupplier')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"business\" color=\"green\" />\n            </template>\n          </q-select>\n\n          <q-select\n            v-model=\"searchCriteria.stock_status\"\n            :options=\"stockStatusOptions\"\n            emit-value\n            map-options\n            clearable\n            outlined\n            :placeholder=\"$t('productsPage.filters.selectStockStatus')\"\n            class=\"search-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"inventory\" color=\"blue\" />\n            </template>\n          </q-select>\n        </div>\n      </div>\n\n      <!-- Price Range -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          {{ $t('productsPage.advancedSearch.priceRange') }}\n        </h6>\n        <div class=\"price-range-section\">\n          <q-input\n            v-model.number=\"searchCriteria.priceMin\"\n            type=\"number\"\n            outlined\n            :placeholder=\"$t('productsPage.filters.minPrice')\"\n            class=\"price-input\"\n          >\n            <template #prepend>\n              <q-icon name=\"euro\" />\n            </template>\n          </q-input>\n          <span class=\"price-separator\">-</span>\n          <q-input\n            v-model.number=\"searchCriteria.priceMax\"\n            type=\"number\"\n            outlined\n            :placeholder=\"$t('productsPage.filters.maxPrice')\"\n            class=\"price-input\"\n          >\n            <template #append>\n              <q-icon name=\"euro\" />\n            </template>\n          </q-input>\n        </div>\n      </div>\n\n      <!-- Special Options -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          {{ $t('productsPage.advancedSearch.specialOptions') }}\n        </h6>\n        <div class=\"options-grid\">\n          <q-toggle\n            v-model=\"searchCriteria.orderable_only\"\n            :label=\"$t('productsPage.filters.orderableOnly')\"\n            color=\"positive\"\n            class=\"option-toggle\"\n          />\n          <q-toggle\n            v-model=\"searchCriteria.has_gtin\"\n            :label=\"$t('productsPage.advancedSearch.hasGtin')\"\n            color=\"primary\"\n            class=\"option-toggle\"\n          />\n          <q-toggle\n            v-model=\"searchCriteria.batch_tracked\"\n            :label=\"$t('productsPage.advancedSearch.batchTracked')\"\n            color=\"secondary\"\n            class=\"option-toggle\"\n          />\n          <q-toggle\n            v-model=\"searchCriteria.in_stock_only\"\n            :label=\"$t('productsPage.advancedSearch.inStockOnly')\"\n            color=\"positive\"\n            class=\"option-toggle\"\n          />\n        </div>\n      </div>\n\n      <!-- Sorting -->\n      <div class=\"search-section\">\n        <h6 class=\"section-title\">\n          {{ $t('productsPage.advancedSearch.sorting') }}\n        </h6>\n        <div class=\"sorting-section\">\n          <q-select\n            v-model=\"searchCriteria.sort_by\"\n            :options=\"sortByOptions\"\n            emit-value\n            map-options\n            outlined\n            :placeholder=\"$t('productsPage.advancedSearch.sortBy')\"\n            class=\"sort-select\"\n          >\n            <template #prepend>\n              <q-icon name=\"sort\" />\n            </template>\n          </q-select>\n          <q-btn-toggle\n            v-model=\"searchCriteria.sort_order\"\n            :options=\"sortOrderOptions\"\n            color=\"primary\"\n            outline\n            class=\"sort-toggle\"\n          />\n        </div>\n      </div>\n\n      <!-- Results Preview -->\n      <div v-if=\"showPreview\" class=\"results-preview\">\n        <div class=\"preview-header\">\n          <h6 class=\"preview-title\">\n            <q-icon name=\"preview\" class=\"q-mr-xs\" />\n            {{ $t('productsPage.advancedSearch.livePreview') }}\n          </h6>\n          <q-btn\n            flat\n            size=\"sm\"\n            :icon=\"previewExpanded ? 'expand_less' : 'expand_more'\"\n            @click=\"previewExpanded = !previewExpanded\"\n          />\n        </div>\n\n        <div class=\"preview-content\">\n          <div class=\"preview-stats\">\n            <q-chip\n              :color=\"previewResults.count > 0 ? 'positive' : 'grey'\"\n              text-color=\"white\"\n              icon=\"search\"\n              size=\"md\"\n            >\n              {{\n                $t('productsPage.advancedSearch.resultsFound', {\n                  count: previewResults.count,\n                })\n              }}\n            </q-chip>\n\n            <div v-if=\"previewResults.count > 0\" class=\"preview-metrics\">\n              <q-chip\n                v-if=\"previewResults.averagePrice\"\n                outline\n                color=\"info\"\n                icon=\"euro\"\n                size=\"sm\"\n              >\n                {{ $t('productsPage.advancedSearch.avgPrice') }}:\n                {{ formatPrice(previewResults.averagePrice) }}\n              </q-chip>\n\n              <q-chip\n                v-if=\"previewResults.inStockCount\"\n                outline\n                color=\"positive\"\n                icon=\"inventory\"\n                size=\"sm\"\n              >\n                {{ $t('productsPage.advancedSearch.inStock') }}:\n                {{ previewResults.inStockCount }}\n              </q-chip>\n\n              <q-chip\n                v-if=\"previewResults.gtinCount\"\n                outline\n                color=\"primary\"\n                icon=\"qr_code_2\"\n                size=\"sm\"\n              >\n                {{ $t('productsPage.advancedSearch.withGtin') }}:\n                {{ previewResults.gtinCount }}\n              </q-chip>\n            </div>\n          </div>\n\n          <q-slide-transition>\n            <div\n              v-show=\"previewExpanded && previewResults.samples.length > 0\"\n              class=\"preview-samples\"\n            >\n              <div class=\"samples-header\">\n                {{ $t('productsPage.advancedSearch.sampleResults') }}:\n              </div>\n              <div class=\"samples-list\">\n                <div\n                  v-for=\"product in previewResults.samples\"\n                  :key=\"product.id\"\n                  class=\"sample-item\"\n                >\n                  <div class=\"sample-info\">\n                    <div class=\"sample-name\">{{ product.name }}</div>\n                    <div class=\"sample-details\">\n                      <span v-if=\"product.sku\" class=\"sample-sku\">{{\n                        product.sku\n                      }}</span>\n                      <span v-if=\"product.category\" class=\"sample-category\">{{\n                        product.category\n                      }}</span>\n                      <span v-if=\"product.gtin\" class=\"sample-gtin\">\n                        <q-icon name=\"qr_code_2\" size=\"xs\" />\n                        {{ product.gtin }}\n                      </span>\n                    </div>\n                  </div>\n                  <div v-if=\"product.price\" class=\"sample-price\">\n                    {{ formatPrice(product.price) }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </q-slide-transition>\n        </div>\n      </div>\n    </div>\n\n    <template #actions>\n      <q-btn flat :label=\"$t('common.cancel')\" @click=\"isOpen = false\" />\n      <q-btn\n        flat\n        color=\"grey\"\n        :label=\"$t('productsPage.advancedSearch.reset')\"\n        @click=\"resetCriteria\"\n      />\n      <q-btn\n        color=\"primary\"\n        :label=\"$t('productsPage.advancedSearch.search')\"\n        :disable=\"!hasValidCriteria\"\n        icon=\"search\"\n        unelevated\n        @click=\"performSearch\"\n      />\n      <q-btn\n        v-if=\"hasValidCriteria && previewResults.count > 0\"\n        flat\n        color=\"info\"\n        :label=\"$t('productsPage.advancedSearch.previewTable')\"\n        icon=\"table_view\"\n        @click=\"$emit('preview-table')\"\n      />\n    </template>\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  import type { ProductFilter } from 'src/types/inventory';\n\n  // Props & Emits\n  interface Props {\n    modelValue: boolean;\n    currentFilters: ProductFilter;\n    countryOptions: Array<{ label: string; value: string }>;\n    gpcOptions: Array<{ label: string; value: string }>;\n    categoryOptions: Array<{ label: string; value: string }>;\n    supplierOptions: Array<{ label: string; value: string }>;\n    stockStatusOptions: Array<{ label: string; value: string }>;\n    lifecycleOptions: Array<{ label: string; value: string }>;\n    resultsCount?: number | null;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (\n      e: 'search',\n      criteria: ProductFilter & {\n        priceMin?: number;\n        priceMax?: number;\n        has_gtin?: boolean;\n        batch_tracked?: boolean;\n        in_stock_only?: boolean;\n      }\n    ): void;\n    (e: 'open-scanner'): void;\n    (e: 'preview', criteria: any): void;\n    (e: 'preview-table'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    resultsCount: null,\n  });\n\n  const emit = defineEmits<Emits>();\n\n  // Composables\n  const { t } = useI18n();\n\n  // State\n  const searchCriteria = ref({\n    search: '',\n    gtin: '',\n    country_of_origin: '',\n    gpc_brick_code: '',\n    lifecycle_status: '',\n    category: '',\n    supplier: '',\n    stock_status: '',\n    sort_by: 'name' as const,\n    sort_order: 'asc' as const,\n    orderable_only: false,\n    priceMin: null as number | null,\n    priceMax: null as number | null,\n    has_gtin: false,\n    batch_tracked: false,\n    in_stock_only: false,\n  });\n\n  const previewResults = ref({\n    count: 0,\n    averagePrice: null as number | null,\n    inStockCount: 0,\n    gtinCount: 0,\n    samples: [] as Array<{\n      id: string;\n      name: string;\n      sku?: string;\n      category?: string;\n      gtin?: string;\n      price?: number;\n    }>,\n  });\n\n  const previewExpanded = ref(false);\n  const previewTimeout = ref<number | null>(null);\n\n  // Computed\n  const isOpen = computed({\n    get: () => props.modelValue,\n    set: value => emit('update:modelValue', value),\n  });\n\n  const sortByOptions = computed(() => [\n    { label: t('productsPage.sortBy.name'), value: 'name' },\n    { label: t('productsPage.sortBy.price'), value: 'price' },\n    { label: t('productsPage.sortBy.stock'), value: 'stock' },\n    { label: t('productsPage.sortBy.category'), value: 'category' },\n  ]);\n\n  const sortOrderOptions = computed(() => [\n    {\n      label: t('productsPage.sortOrder.asc'),\n      value: 'asc',\n      icon: 'arrow_upward',\n    },\n    {\n      label: t('productsPage.sortOrder.desc'),\n      value: 'desc',\n      icon: 'arrow_downward',\n    },\n  ]);\n\n  const hasValidCriteria = computed(() => {\n    return Object.values(searchCriteria.value).some(\n      value => value !== '' && value !== null && value !== false\n    );\n  });\n\n  const showPreview = computed(() => {\n    return (\n      hasValidCriteria.value &&\n      (previewResults.value.count > 0 || previewResults.value.count === 0)\n    );\n  });\n\n  // Format price helper\n  const formatPrice = (price: number): string => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(price);\n  };\n\n  // Methods\n  const resetCriteria = () => {\n    searchCriteria.value = {\n      search: '',\n      gtin: '',\n      country_of_origin: '',\n      gpc_brick_code: '',\n      lifecycle_status: '',\n      category: '',\n      supplier: '',\n      stock_status: '',\n      sort_by: 'name',\n      sort_order: 'asc',\n      orderable_only: false,\n      priceMin: null,\n      priceMax: null,\n      has_gtin: false,\n      batch_tracked: false,\n      in_stock_only: false,\n    };\n  };\n\n  const performSearch = () => {\n    emit('search', { ...searchCriteria.value } as any);\n    isOpen.value = false;\n  };\n\n  // Watch for criteria changes to show preview\n  watch(\n    searchCriteria,\n    newCriteria => {\n      if (hasValidCriteria.value) {\n        // Debounce preview requests\n        if (previewTimeout.value) {\n          clearTimeout(previewTimeout.value);\n        }\n\n        previewTimeout.value = window.setTimeout(() => {\n          emit('preview', newCriteria);\n        }, 300);\n      } else {\n        // Clear preview when no criteria\n        previewResults.value = {\n          count: 0,\n          averagePrice: null,\n          inStockCount: 0,\n          gtinCount: 0,\n          samples: [],\n        };\n      }\n    },\n    { deep: true }\n  );\n\n  // Update preview results when results count changes\n  watch(\n    () => props.resultsCount,\n    newCount => {\n      if (newCount !== null) {\n        previewResults.value.count = newCount;\n      }\n    }\n  );\n\n  // Initialize with current filters\n  watch(\n    () => props.currentFilters,\n    newFilters => {\n      if (newFilters) {\n        Object.assign(searchCriteria.value, newFilters);\n      }\n    },\n    { immediate: true }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  // Dialog styling is handled by BaseDialog\n\n  .advanced-search-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n    padding: var(--space-6);\n\n    .search-section {\n      background: var(--bg-primary);\n      border-radius: var(--radius-lg);\n      padding: var(--space-5);\n      border: 1px solid var(--border-primary);\n      box-shadow: var(--shadow-sm);\n\n      .section-title {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--brand-primary);\n        display: flex;\n        align-items: center;\n        border-bottom: 1px solid var(--border-primary);\n        padding-bottom: var(--space-3);\n      }\n    }\n\n    .search-row {\n      display: flex;\n      gap: 1rem;\n\n      .search-input {\n        flex: 1;\n      }\n    }\n\n    .search-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 1rem;\n\n      .search-input {\n        width: 100%;\n      }\n    }\n\n    .price-range-section {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      max-width: 400px;\n\n      .price-input {\n        flex: 1;\n      }\n\n      .price-separator {\n        color: rgba(0, 0, 0, 0.6);\n        font-weight: 500;\n        font-size: 1.1rem;\n      }\n    }\n\n    .options-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 1rem;\n\n      .option-toggle {\n        justify-self: start;\n      }\n    }\n\n    .sorting-section {\n      display: flex;\n      align-items: center;\n      gap: 1rem;\n      max-width: 500px;\n\n      .sort-select {\n        flex: 1;\n      }\n\n      .sort-toggle {\n        border-radius: 6px;\n      }\n    }\n\n    .results-preview {\n      margin-top: 1.5rem;\n      padding: 1rem;\n      border: 1px solid rgba(0, 0, 0, 0.1);\n      border-radius: 8px;\n      background: rgba(0, 0, 0, 0.02);\n\n      .preview-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 1rem;\n\n        .preview-title {\n          margin: 0;\n          font-size: 0.9rem;\n          font-weight: 600;\n          color: var(--q-primary);\n        }\n      }\n\n      .preview-content {\n        .preview-stats {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 0.5rem;\n          align-items: center;\n          margin-bottom: 1rem;\n\n          .preview-metrics {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 0.5rem;\n          }\n        }\n\n        .preview-samples {\n          .samples-header {\n            font-size: 0.85rem;\n            font-weight: 500;\n            color: rgba(0, 0, 0, 0.7);\n            margin-bottom: 0.5rem;\n          }\n\n          .samples-list {\n            .sample-item {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              padding: 0.5rem;\n              margin-bottom: 0.5rem;\n              background: white;\n              border-radius: 6px;\n              border: 1px solid rgba(0, 0, 0, 0.08);\n\n              &:last-child {\n                margin-bottom: 0;\n              }\n\n              .sample-info {\n                flex: 1;\n\n                .sample-name {\n                  font-size: 0.9rem;\n                  font-weight: 500;\n                  margin-bottom: 0.25rem;\n                }\n\n                .sample-details {\n                  display: flex;\n                  gap: 0.5rem;\n                  font-size: 0.75rem;\n                  color: rgba(0, 0, 0, 0.6);\n\n                  .sample-sku {\n                    background: rgba(0, 0, 0, 0.1);\n                    padding: 0.1rem 0.4rem;\n                    border-radius: 3px;\n                    font-family: monospace;\n                  }\n\n                  .sample-category {\n                    color: var(--q-amber);\n                  }\n\n                  .sample-gtin {\n                    color: var(--q-primary);\n                    display: flex;\n                    align-items: center;\n                    gap: 0.2rem;\n                  }\n                }\n              }\n\n              .sample-price {\n                font-size: 0.9rem;\n                font-weight: 600;\n                color: var(--q-primary);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Mobile responsiveness\n  @media (max-width: 768px) {\n    .advanced-search-dialog {\n      .advanced-search-card {\n        min-width: 95vw;\n        max-width: 95vw;\n        margin: 1rem;\n      }\n    }\n\n    .advanced-search-content {\n      .search-grid {\n        grid-template-columns: 1fr;\n      }\n\n      .price-range-section {\n        flex-direction: column;\n        align-items: stretch;\n        max-width: none;\n\n        .price-separator {\n          text-align: center;\n        }\n      }\n\n      .sorting-section {\n        flex-direction: column;\n        align-items: stretch;\n        max-width: none;\n      }\n\n      .options-grid {\n        grid-template-columns: 1fr;\n\n        .option-toggle {\n          justify-self: stretch;\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\OrderListDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 339,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 339,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10733, 10736], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10733, 10736], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 355,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 355,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11236, 11239], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11236, 11239], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 355,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 355,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11256, 11259], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11256, 11259], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 367,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 367,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11563, 11566], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11563, 11566], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 374,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 374,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11736, 11739], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11736, 11739], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 384,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 384,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12021, 12024], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12021, 12024], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12156, 12159], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12156, 12159], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 411,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 411,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12741, 12744], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12741, 12744], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 435,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 435,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13581, 13584], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13581, 13584], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 468,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 468,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14539, 14542], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14539, 14542], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 506,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 506,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15575, 15578], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15575, 15578], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 527,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 527,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16234, 16237], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16234, 16237], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDialog\r\n    v-model=\"dialogVisible\"\r\n    :title=\"\r\n      isEditing ? $t('orderLists.editDialog') : $t('orderLists.createDialog')\r\n    \"\r\n    icon=\"list_alt\"\r\n    size=\"xl\"\r\n    variant=\"elegant\"\r\n    header-variant=\"solid\"\r\n    @hide=\"onDialogHide\"\r\n  >\r\n    <div class=\"orderlist-dialog-content\">\r\n      <div class=\"orderlist-layout\">\r\n        <!-- Left Panel - Order List Details -->\r\n        <div class=\"orderlist-details-panel\">\r\n          <h3 class=\"panel-title\">{{ $t('orderLists.details') }}</h3>\r\n\r\n          <q-form class=\"q-gutter-md\">\r\n            <q-input\r\n              ref=\"nameInput\"\r\n              v-model=\"form.name\"\r\n              :label=\"$t('orderLists.name')\"\r\n              :rules=\"[\r\n                val => !!val || $t('validation.required'),\r\n                val =>\r\n                  val.length >= 3 || $t('validation.minLength', { min: 3 }),\r\n              ]\"\r\n              outlined\r\n              autofocus\r\n            />\r\n\r\n            <q-input\r\n              v-model=\"form.description\"\r\n              :label=\"$t('orderLists.description')\"\r\n              type=\"textarea\"\r\n              rows=\"3\"\r\n              outlined\r\n            />\r\n\r\n            <q-select\r\n              v-model=\"form.supplier_id\"\r\n              :options=\"supplierOptions\"\r\n              :label=\"$t('orderLists.supplier')\"\r\n              :rules=\"[val => !!val || $t('orderLists.supplierRequired')]\"\r\n              outlined\r\n              emit-value\r\n              map-options\r\n            />\r\n\r\n            <q-input\r\n              v-model=\"form.notes\"\r\n              :label=\"$t('orderLists.notes')\"\r\n              type=\"textarea\"\r\n              rows=\"2\"\r\n              outlined\r\n            />\r\n\r\n            <div class=\"checkbox-group\">\r\n              <q-checkbox\r\n                v-model=\"form.auto_suggest_quantities\"\r\n                :label=\"$t('orderLists.autoFill')\"\r\n              />\r\n              <q-checkbox\r\n                v-model=\"form.urgent_order\"\r\n                :label=\"$t('orderLists.urgent')\"\r\n                color=\"orange\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Summary -->\r\n            <div class=\"orderlist-summary\">\r\n              <h4 class=\"summary-title\">{{ $t('orderLists.summary') }}</h4>\r\n              <div class=\"summary-stats\">\r\n                <div class=\"stat-item\">\r\n                  <span class=\"stat-label\">{{\r\n                    $t('orderLists.totalItems')\r\n                  }}</span>\r\n                  <span class=\"stat-value\">{{ totalItems }}</span>\r\n                </div>\r\n                <div class=\"stat-item\">\r\n                  <span class=\"stat-label\">{{\r\n                    $t('orderLists.totalAmount')\r\n                  }}</span>\r\n                  <span class=\"stat-value\">€{{ totalAmount.toFixed(2) }}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-form>\r\n        </div>\r\n\r\n        <!-- Right Panel - Products -->\r\n        <div class=\"orderlist-products-panel\">\r\n          <div class=\"panel-header\">\r\n            <h3 class=\"panel-title\">{{ $t('orderLists.products') }}</h3>\r\n            <q-btn\r\n              :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\"\r\n              icon=\"add\"\r\n              :disable=\"!form.supplier_id\"\r\n              unelevated\r\n              no-caps\r\n              @click=\"showAddProductDialog = true\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Products List -->\r\n          <div v-if=\"orderListItems.length > 0\" class=\"products-list\">\r\n            <q-card\r\n              v-for=\"(item, index) in orderListItems\"\r\n              :key=\"item.id || index\"\r\n              class=\"q-pa-md\"\r\n              bordered\r\n            >\r\n              <div class=\"row items-center q-gutter-md\">\r\n                <div class=\"col\">\r\n                  <div class=\"text-subtitle1 text-weight-bold\">\r\n                    {{ getProductName(item.product_id) }}\r\n                  </div>\r\n                  <div class=\"text-body2 text-grey-6\">\r\n                    SKU: {{ getProductSku(item.product_id) }}\r\n                  </div>\r\n                  <div v-if=\"item.notes\" class=\"text-body2 text-grey-6 q-mt-xs\">\r\n                    {{ item.notes }}\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-auto\">\r\n                  <q-input\r\n                    v-model.number=\"item.requested_quantity\"\r\n                    type=\"number\"\r\n                    min=\"1\"\r\n                    :label=\"$t('orderLists.quantity')\"\r\n                    outlined\r\n                    dense\r\n                    style=\"width: 100px\"\r\n                    @update:model-value=\"updateItemTotal(item)\"\r\n                  />\r\n                </div>\r\n\r\n                <div class=\"col-auto text-right\">\r\n                  <div class=\"text-body2 text-grey-6\">\r\n                    {{ $t('orderLists.unitPrice') }}\r\n                  </div>\r\n                  <div class=\"text-subtitle2\">\r\n                    €{{ item.unit_price.toFixed(2) }}\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-auto text-right\">\r\n                  <div class=\"text-body2 text-grey-6\">\r\n                    {{ $t('orderLists.totalPrice') }}\r\n                  </div>\r\n                  <div class=\"text-subtitle1 text-weight-bold\">\r\n                    €{{ item.total_price.toFixed(2) }}\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"col-auto\">\r\n                  <q-btn\r\n                    flat\r\n                    round\r\n                    color=\"negative\"\r\n                    icon=\"delete\"\r\n                    size=\"sm\"\r\n                    @click=\"removeItem(index)\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </q-card>\r\n          </div>\r\n\r\n          <!-- Empty State -->\r\n          <BaseCard v-else class=\"text-center q-pa-xl\">\r\n            <q-icon\r\n              name=\"shopping_cart\"\r\n              size=\"3rem\"\r\n              color=\"grey-4\"\r\n              class=\"q-mb-md\"\r\n            />\r\n            <div class=\"text-body1 text-grey-6\">\r\n              {{ $t('orderLists.noProducts') }}\r\n            </div>\r\n            <q-btn\r\n              v-if=\"form.supplier_id\"\r\n              :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\"\r\n              class=\"q-mt-md\"\r\n              @click=\"showAddProductDialog = true\"\r\n            />\r\n          </BaseCard>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <template #actions>\r\n      <q-btn flat :label=\"$t('common.cancel')\" @click=\"closeDialog\" />\r\n      <q-btn\r\n        :label=\"$t('common.save')\"\r\n        color=\"primary\"\r\n        :loading=\"orderListsStore.saving\"\r\n        :disable=\"!isFormValid\"\r\n        unelevated\r\n        @click=\"saveOrderList\"\r\n      />\r\n    </template>\r\n  </BaseDialog>\r\n\r\n  <!-- Add Product Dialog -->\r\n  <q-dialog v-model=\"showAddProductDialog\" persistent>\r\n    <q-card style=\"min-width: 500px\">\r\n      <q-card-section>\r\n        <div class=\"text-h6\">{{ $t('orderLists.addProduct') }}</div>\r\n      </q-card-section>\r\n\r\n      <q-card-section class=\"q-pt-none\">\r\n        <q-select\r\n          v-model=\"selectedProductId\"\r\n          :options=\"availableProducts\"\r\n          :label=\"$t('orderLists.selectProduct')\"\r\n          outlined\r\n          option-label=\"name\"\r\n          option-value=\"id\"\r\n          emit-value\r\n          map-options\r\n          use-input\r\n          hide-selected\r\n          fill-input\r\n          input-debounce=\"300\"\r\n          @filter=\"filterProducts\"\r\n        >\r\n          <template #option=\"scope\">\r\n            <q-item v-bind=\"scope.itemProps\">\r\n              <q-item-section>\r\n                <q-item-label>{{ scope.opt.name }}</q-item-label>\r\n                <q-item-label caption>{{ scope.opt.sku }}</q-item-label>\r\n              </q-item-section>\r\n              <q-item-section side>\r\n                <q-item-label caption\r\n                  >€{{ scope.opt.price?.toFixed(2) || '0.00' }}</q-item-label\r\n                >\r\n              </q-item-section>\r\n            </q-item>\r\n          </template>\r\n        </q-select>\r\n\r\n        <q-input\r\n          v-model.number=\"newItemQuantity\"\r\n          :label=\"$t('orderLists.quantity')\"\r\n          type=\"number\"\r\n          min=\"1\"\r\n          outlined\r\n          class=\"q-mt-md\"\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"newItemNotes\"\r\n          :label=\"$t('orderLists.notes')\"\r\n          type=\"textarea\"\r\n          rows=\"2\"\r\n          outlined\r\n          class=\"q-mt-md\"\r\n        />\r\n      </q-card-section>\r\n\r\n      <q-card-actions align=\"right\">\r\n        <q-btn flat :label=\"$t('common.cancel')\" @click=\"cancelAddProduct\" />\r\n        <q-btn\r\n          :label=\"$t('common.add')\"\r\n          color=\"primary\"\r\n          :disable=\"!selectedProductId || !newItemQuantity\"\r\n          @click=\"addProduct\"\r\n        />\r\n      </q-card-actions>\r\n    </q-card>\r\n  </q-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch, nextTick, onMounted } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import {\r\n    useOrderListsStore,\r\n    type OrderListWithItems,\r\n    type CreateOrderListRequest,\r\n    type UpdateOrderListRequest,\r\n    type AddOrderListItemRequest,\r\n  } from 'src/stores/orderLists';\r\n  import { useSuppliersStore } from 'src/stores/suppliers';\r\n  import { useProductsStore } from 'src/stores/products';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { BaseCard } from 'src/components/cards';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import type { OrderListItemRow, ProductWithStock } from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    modelValue: boolean;\r\n    orderList?: OrderListWithItems | null;\r\n    orderLists?: OrderListWithItems[];\r\n    selectedProduct?: ProductWithStock | null;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    orderList: null,\r\n    orderLists: () => [],\r\n    selectedProduct: null,\r\n  });\r\n\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    saved: [];\r\n    createOrderList: [orderList: OrderListWithItems];\r\n    addToExisting: [orderListId: string, product: ProductWithStock];\r\n  }>();\r\n\r\n  const $q = useQuasar();\r\n  const { t } = useI18n();\r\n\r\n  // Stores\r\n  const orderListsStore = useOrderListsStore();\r\n  const suppliersStore = useSuppliersStore();\r\n  const productsStore = useProductsStore();\r\n  const authStore = useAuthStore();\r\n\r\n  // Refs\r\n  const nameInput = ref();\r\n\r\n  // State\r\n  const form = ref({\r\n    name: '',\r\n    description: '',\r\n    supplier_id: '',\r\n    notes: '',\r\n    auto_suggest_quantities: false,\r\n    urgent_order: false,\r\n  });\r\n\r\n  const orderListItems = ref<any[]>([]);\r\n  const showAddProductDialog = ref(false);\r\n  const selectedProductId = ref('');\r\n  const newItemQuantity = ref(1);\r\n  const newItemNotes = ref('');\r\n  const availableProducts = ref<ProductWithStock[]>([]);\r\n\r\n  // Computed\r\n  const dialogVisible = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const isEditing = computed(() => !!props.orderList);\r\n\r\n  const supplierOptions = computed(() =>\r\n    (suppliersStore.suppliers as any).map((supplier: any) => ({\r\n      label: supplier.name,\r\n      value: supplier.id,\r\n    }))\r\n  );\r\n\r\n  const isFormValid = computed(() => {\r\n    return form.value.name.length >= 3 && form.value.supplier_id;\r\n  });\r\n\r\n  const totalItems = computed(() => {\r\n    return orderListItems.value.reduce(\r\n      (sum: number, item: any) => sum + item.requested_quantity,\r\n      0\r\n    );\r\n  });\r\n\r\n  const totalAmount = computed(() => {\r\n    return orderListItems.value.reduce(\r\n      (sum: number, item: any) => sum + item.total_price,\r\n      0\r\n    );\r\n  });\r\n\r\n  const filteredProducts = computed(() => {\r\n    if (!form.value.supplier_id) return [];\r\n\r\n    return productsStore.products.filter(product => {\r\n      const hasSupplierProduct = product.supplierProducts?.some(\r\n        (sp: any) => sp.supplier_id === form.value.supplier_id\r\n      );\r\n      const notAlreadyAdded = !orderListItems.value.some(\r\n        (item: any) => item.product_id === product.id\r\n      );\r\n      return hasSupplierProduct && notAlreadyAdded;\r\n    });\r\n  });\r\n\r\n  // Methods\r\n  const resetForm = () => {\r\n    form.value = {\r\n      name: '',\r\n      description: '',\r\n      supplier_id: '',\r\n      notes: '',\r\n      auto_suggest_quantities: false,\r\n      urgent_order: false,\r\n    };\r\n    orderListItems.value = [];\r\n    selectedProductId.value = '';\r\n    newItemQuantity.value = 1;\r\n    newItemNotes.value = '';\r\n  };\r\n\r\n  const populateForm = () => {\r\n    if (props.orderList) {\r\n      const orderListAny = props.orderList as any;\r\n      form.value = {\r\n        name: props.orderList.name,\r\n        description: props.orderList.description || '',\r\n        supplier_id: orderListAny.supplier_id ?? null,\r\n        notes: orderListAny.notes || '',\r\n        auto_suggest_quantities:\r\n          orderListAny.auto_suggest_quantities || false,\r\n        urgent_order: orderListAny.urgent_order || false,\r\n      };\r\n      orderListItems.value = [...(props.orderList.items || [])];\r\n    }\r\n  };\r\n\r\n  const getProductName = (productId: string) => {\r\n    const product = productsStore.getProductById(productId);\r\n    return product?.name || t('common.unknownProduct');\r\n  };\r\n\r\n  const getProductSku = (productId: string) => {\r\n    const product = productsStore.getProductById(productId);\r\n    return product?.sku || t('common.noSku');\r\n  };\r\n\r\n  const updateItemTotal = (item: any) => {\r\n    item.total_price = item.unit_price * item.requested_quantity;\r\n  };\r\n\r\n  const removeItem = (index: number) => {\r\n    orderListItems.value.splice(index, 1);\r\n  };\r\n\r\n  const filterProducts = (\r\n    val: string,\r\n    update: (callback: () => void) => void\r\n  ) => {\r\n    update(() => {\r\n      if (val === '') {\r\n        availableProducts.value = filteredProducts.value;\r\n      } else {\r\n        const needle = val.toLowerCase();\r\n        availableProducts.value = filteredProducts.value.filter(\r\n          product =>\r\n            product.name.toLowerCase().includes(needle) ||\r\n            product.sku.toLowerCase().includes(needle)\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  const addProduct = () => {\r\n    if (!selectedProductId.value || !newItemQuantity.value) return;\r\n\r\n    const product = productsStore.getProductById(selectedProductId.value);\r\n    if (!product) return;\r\n\r\n    const existingItem = orderListItems.value.find(\r\n      (item: any) => item.product_id === product.id\r\n    );\r\n\r\n    if (existingItem) {\r\n      existingItem.requested_quantity += newItemQuantity.value;\r\n      existingItem.notes = newItemNotes.value;\r\n    } else {\r\n      orderListItems.value.push({\r\n        product_id: product.id,\r\n        product,\r\n        requested_quantity: newItemQuantity.value,\r\n        notes: newItemNotes.value,\r\n        status: 'pending',\r\n        id: `${product.id}-${Date.now()}`,\r\n      });\r\n    }\r\n\r\n    cancelAddProduct();\r\n  };\r\n\r\n  const cancelAddProduct = () => {\r\n    showAddProductDialog.value = false;\r\n    selectedProductId.value = '';\r\n    newItemQuantity.value = 1;\r\n    newItemNotes.value = '';\r\n  };\r\n\r\n  const saveOrderList = async () => {\r\n    try {\r\n      if (!isFormValid.value) return;\r\n\r\n      const practiceId = authStore.clinicId;\r\n      if (!practiceId) {\r\n        throw new Error(t('orderlistd.nopracticeselected'));\r\n      }\r\n\r\n      if (isEditing.value && props.orderList) {\r\n        // Update existing order list\r\n        const updateRequest: any = {\r\n          id: props.orderList.id,\r\n          name: form.value.name,\r\n          description: form.value.description,\r\n          supplier_id: form.value.supplier_id,\r\n          auto_suggest_quantities: form.value.auto_suggest_quantities,\r\n          urgent_order: form.value.urgent_order,\r\n        };\r\n\r\n        if (form.value.notes) {\r\n          updateRequest.notes = form.value.notes;\r\n        }\r\n\r\n        await orderListsStore.updateOrderList(updateRequest);\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('orderLists.updated'),\r\n        });\r\n      } else {\r\n        // Create new order list\r\n        const createRequest: any = {\r\n          practice_id: practiceId,\r\n          supplier_id: form.value.supplier_id,\r\n          name: form.value.name,\r\n          description: form.value.description,\r\n          auto_suggest_quantities: form.value.auto_suggest_quantities,\r\n          urgent_order: form.value.urgent_order,\r\n        };\r\n\r\n        if (form.value.notes) {\r\n          createRequest.notes = form.value.notes;\r\n        }\r\n\r\n        const newOrderList =\r\n          await orderListsStore.createOrderList(createRequest);\r\n\r\n        // Add items to the new order list\r\n        for (const item of orderListItems.value) {\r\n          const addItemRequest: AddOrderListItemRequest = {\r\n            order_list_id: newOrderList.id,\r\n            product_id: item.product_id,\r\n            supplier_product_id: item.supplier_product_id,\r\n            requested_quantity: item.requested_quantity,\r\n          };\r\n\r\n          if (item.notes) {\r\n            addItemRequest.notes = item.notes;\r\n          }\r\n\r\n          await orderListsStore.addOrderListItem(addItemRequest);\r\n        }\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('orderLists.created'),\r\n        });\r\n      }\r\n\r\n      emit('saved');\r\n      closeDialog();\r\n    } catch (error) {\r\n      console.error('Error saving order list:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('orderLists.saveError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    emit('update:modelValue', false);\r\n  };\r\n\r\n  const onDialogHide = () => {\r\n    resetForm();\r\n  };\r\n\r\n  // Watchers\r\n  watch(\r\n    () => props.modelValue,\r\n    newVal => {\r\n      if (newVal) {\r\n        populateForm();\r\n        nextTick(() => {\r\n          nameInput.value?.focus();\r\n        });\r\n      }\r\n    }\r\n  );\r\n\r\n  watch(\r\n    () => form.value.supplier_id,\r\n    () => {\r\n      availableProducts.value = filteredProducts.value;\r\n    }\r\n  );\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    availableProducts.value = filteredProducts.value;\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // ===================================================================\r\n  // Order list dialog styles\r\n  // ===================================================================\r\n\r\n  .orderlist-dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n    min-height: 600px;\r\n  }\r\n\r\n  .orderlist-layout {\r\n    display: grid;\r\n    grid-template-columns: 1fr 2fr;\r\n    gap: var(--space-6);\r\n    height: 100%;\r\n\r\n    @media (max-width: 768px) {\r\n      grid-template-columns: 1fr;\r\n      gap: var(--space-4);\r\n    }\r\n  }\r\n\r\n  // Left Panel - Details\r\n  .orderlist-details-panel {\r\n    background: var(--neutral-50);\r\n    border-radius: var(--radius-lg);\r\n    padding: var(--space-6);\r\n    border: 1px solid var(--border-primary);\r\n  }\r\n\r\n  // Right Panel - Products\r\n  .orderlist-products-panel {\r\n    background: var(--bg-primary);\r\n    border-radius: var(--radius-lg);\r\n    padding: var(--space-6);\r\n    border: 1px solid var(--border-primary);\r\n  }\r\n\r\n  .panel-title {\r\n    font-size: var(--text-xl);\r\n    font-weight: var(--font-weight-semibold);\r\n    color: var(--text-primary);\r\n    margin: 0 0 var(--space-4) 0;\r\n  }\r\n\r\n  .panel-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: var(--space-4);\r\n  }\r\n\r\n  // Form Styling\r\n  .orderlist-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-4);\r\n  }\r\n\r\n  .checkbox-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n    margin-top: var(--space-2);\r\n  }\r\n\r\n  // Summary Section\r\n  .orderlist-summary {\r\n    margin-top: var(--space-6);\r\n    padding: var(--space-4);\r\n    background: white;\r\n    border-radius: var(--radius-md);\r\n    border: 1px solid var(--border-primary);\r\n  }\r\n\r\n  .summary-title {\r\n    font-size: var(--text-lg);\r\n    font-weight: var(--font-weight-semibold);\r\n    color: var(--text-primary);\r\n    margin: 0 0 var(--space-3) 0;\r\n  }\r\n\r\n  .summary-stats {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: var(--space-4);\r\n  }\r\n\r\n  .stat-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-1);\r\n  }\r\n\r\n  .stat-label {\r\n    font-size: var(--text-sm);\r\n    color: var(--text-secondary);\r\n    font-weight: var(--font-weight-medium);\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: var(--text-lg);\r\n    font-weight: var(--font-weight-bold);\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  // Dark Mode\r\n  body.body--dark {\r\n    .orderlist-details-panel {\r\n      background: var(--neutral-800);\r\n      border-color: var(--border-primary);\r\n    }\r\n\r\n    .orderlist-products-panel {\r\n      background: var(--bg-primary);\r\n      border-color: var(--border-primary);\r\n    }\r\n\r\n    .orderlist-summary {\r\n      background: var(--neutral-900);\r\n      border-color: var(--border-primary);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ProductDetailsDialog.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ProductFormDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5960, 5963], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5960, 5963], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 283,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 283,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7925, 7928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7925, 7928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8156, 8159], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8156, 8159], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 288,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 288,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8215, 8218], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8215, 8218], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 289,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 289,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8287, 8290], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8287, 8290], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 291,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 291,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8379, 8382], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8379, 8382], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 336,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 336,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9713, 9716], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9713, 9716], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 339,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 339,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9803, 9806], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9803, 9806], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <FormDialog\n    v-model=\"dialogModel\"\n    :title=\"isEdit ? $t('products.editProduct') : $t('products.createProduct')\"\n    icon=\"inventory\"\n    size=\"lg\"\n    :loading=\"saving\"\n    @submit=\"onSubmit\"\n    @cancel=\"closeDialog\"\n  >\n    <q-form class=\"product-form\" @submit=\"onSubmit\">\n      <!-- Basic Information Section -->\n      <div class=\"form-section\">\n        <h3 class=\"section-title\">{{ $t('products.basicInfo') }}</h3>\n\n        <!-- Product Name -->\n        <q-input\n          ref=\"nameInput\"\n          v-model=\"form.name\"\n          :label=\"$t('products.name') + ' *'\"\n          outlined\n          :rules=\"[rules.required]\"\n        />\n\n        <!-- SKU -->\n        <q-input\n          v-model=\"form.sku\"\n          :label=\"$t('products.sku')\"\n          outlined\n          :hint=\"$t('products.skuHint')\"\n        />\n\n        <!-- Description -->\n        <q-input\n          v-model=\"form.description\"\n          :label=\"$t('products.description')\"\n          type=\"textarea\"\n          outlined\n          rows=\"3\"\n        />\n      </div>\n\n      <!-- Product Details Section -->\n      <div class=\"form-section\">\n        <h3 class=\"section-title\">{{ $t('products.details') }}</h3>\n\n        <!-- Category and Brand Row -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col\">\n            <q-input\n              v-model=\"form.category\"\n              :label=\"$t('products.category')\"\n              outlined\n            />\n          </div>\n          <div class=\"col\">\n            <q-input\n              v-model=\"form.brand\"\n              :label=\"$t('products.brand')\"\n              outlined\n            />\n          </div>\n        </div>\n\n        <!-- Unit and Price Row -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col\">\n            <q-select\n              v-model=\"form.unit\"\n              :options=\"unitOptions\"\n              :label=\"$t('products.unit')\"\n              outlined\n              emit-value\n              map-options\n            />\n          </div>\n          <div class=\"col\">\n            <q-input\n              v-model.number=\"form.price\"\n              :label=\"$t('products.price')\"\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              outlined\n              :prefix=\"form.currency\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <!-- Additional Information Section -->\n      <div class=\"form-section\">\n        <h3 class=\"section-title\">{{ $t('products.additionalInfo') }}</h3>\n\n        <!-- Barcode -->\n        <q-input\n          v-model=\"form.barcode\"\n          :label=\"$t('products.barcode')\"\n          outlined\n          :hint=\"$t('products.barcodeHint')\"\n        >\n          <template #append>\n            <q-btn\n              icon=\"qr_code_scanner\"\n              flat\n              round\n              @click=\"$emit('scan-barcode')\"\n            >\n              <q-tooltip>{{ $t('products.scanBarcode') }}</q-tooltip>\n            </q-btn>\n          </template>\n        </q-input>\n\n        <!-- Options Row -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col\">\n            <q-checkbox\n              v-model=\"form.requires_batch_tracking\"\n              :label=\"$t('products.requiresBatchTracking')\"\n            />\n          </div>\n          <div class=\"col\">\n            <q-checkbox v-model=\"form.active\" :label=\"$t('products.active')\" />\n          </div>\n        </div>\n      </div>\n\n      <!-- Advanced Fields Section -->\n      <div class=\"form-section\">\n        <q-expansion-item\n          icon=\"qr_code_2\"\n          :label=\"$t('products.gs1Information')\"\n          header-class=\"text-primary\"\n          class=\"advanced-expansion\"\n        >\n          <div class=\"q-pa-md q-gutter-md\">\n            <!-- GTIN and GPC Row -->\n            <div class=\"row q-gutter-md\">\n              <div class=\"col\">\n                <q-input\n                  v-model=\"form.gtin\"\n                  label=\"GTIN\"\n                  outlined\n                  :hint=\"$t('products.gtinHint')\"\n                />\n              </div>\n              <div class=\"col\">\n                <q-input\n                  v-model=\"form.gpc_brick_code\"\n                  label=\"GPC Brick Code\"\n                  outlined\n                  :hint=\"$t('products.gpcHint')\"\n                />\n              </div>\n            </div>\n\n            <!-- Country and Lifecycle Row -->\n            <div class=\"row q-gutter-md\">\n              <div class=\"col\">\n                <q-input\n                  v-model=\"form.country_of_origin\"\n                  :label=\"$t('products.countryOfOrigin')\"\n                  outlined\n                />\n              </div>\n              <div class=\"col\">\n                <q-select\n                  v-model=\"form.product_lifecycle_status\"\n                  :options=\"lifecycleOptions\"\n                  :label=\"$t('products.lifecycleStatus')\"\n                  outlined\n                  emit-value\n                  map-options\n                />\n              </div>\n            </div>\n          </div>\n        </q-expansion-item>\n      </div>\n    </q-form>\n  </FormDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, watch, nextTick } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useAuthStore } from 'src/stores/auth';\n  import { productService } from 'src/services/supabase';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import type { ProductRow } from 'src/types/inventory';\n\n  // Props\n  interface Props {\n    modelValue: boolean;\n    product?: ProductRow | null;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    product: null,\n  });\n\n  // Emits\n  const emit = defineEmits<{\n    'update:modelValue': [value: boolean];\n    saved: [product: ProductRow];\n    'scan-barcode': [];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const authStore = useAuthStore();\n\n  // Refs\n  const nameInput = ref<any>(null);\n  const saving = ref(false);\n\n  // State\n  const dialogModel = computed({\n    get: () => props.modelValue,\n    set: value => emit('update:modelValue', value),\n  });\n\n  const isEdit = computed(() => !!props.product);\n\n  // Form data\n  const defaultForm = () => ({\n    name: '',\n    sku: '',\n    description: '',\n    category: '',\n    brand: '',\n    unit: 'stuk',\n    price: 0,\n    currency: 'EUR',\n    barcode: '',\n    active: true,\n    requires_batch_tracking: false,\n    gtin: '',\n    gpc_brick_code: '',\n    country_of_origin: '',\n    product_lifecycle_status: 'active',\n  });\n\n  const form = ref(defaultForm());\n\n  // Options\n  const unitOptions = [\n    { label: t('products.units.piece'), value: 'stuk' },\n    { label: t('products.units.pack'), value: 'pak' },\n    { label: t('products.units.box'), value: 'doos' },\n    { label: t('products.units.bottle'), value: 'fles' },\n    { label: t('products.units.tube'), value: 'tube' },\n    { label: t('products.units.liter'), value: 'liter' },\n    { label: t('products.units.kg'), value: 'kg' },\n    { label: t('products.units.gram'), value: 'gram' },\n  ];\n\n  const lifecycleOptions = [\n    { label: t('products.lifecycle.active'), value: 'active' },\n    { label: t('products.lifecycle.discontinued'), value: 'discontinued' },\n    { label: t('products.lifecycle.new'), value: 'new' },\n    { label: t('products.lifecycle.phaseOut'), value: 'phase_out' },\n  ];\n\n  // Validation rules\n  const rules = {\n    required: (val: string) => !!val || t('validation.required'),\n  };\n\n  // Methods\n  const populateForm = () => {\n    if (props.product) {\n      form.value = {\n        name: props.product.name || '',\n        sku: props.product.sku || '',\n        description: props.product.description || '',\n        category: props.product.category || '',\n        brand: props.product.brand || '',\n        unit: props.product.unit || 'stuk',\n        price: props.product.price || 0,\n        currency: (props.product as any).currency || 'EUR',\n        barcode: props.product.barcode || '',\n        active: props.product.active !== false,\n        requires_batch_tracking: props.product.requires_batch_tracking || false,\n        gtin: (props.product as any).gtin || '',\n        gpc_brick_code: (props.product as any).gpc_brick_code || '',\n        country_of_origin: (props.product as any).country_of_origin || '',\n        product_lifecycle_status:\n          (props.product as any).product_lifecycle_status || 'active',\n      };\n    } else {\n      form.value = defaultForm();\n    }\n  };\n\n  const resetForm = () => {\n    form.value = defaultForm();\n  };\n\n  const onSubmit = async () => {\n    if (!authStore.clinicId) {\n      $q.notify({\n        type: 'negative',\n        message: t('errors.noPracticeSelected'),\n      });\n      return;\n    }\n\n    saving.value = true;\n    try {\n      const productData = {\n        practice_id: authStore.clinicId,\n        name: form.value.name,\n        sku: form.value.sku || null,\n        description: form.value.description || null,\n        category: form.value.category || null,\n        brand: form.value.brand || null,\n        unit: form.value.unit,\n        price: form.value.price,\n        currency: form.value.currency,\n        barcode: form.value.barcode || null,\n        active: form.value.active,\n        requires_batch_tracking: form.value.requires_batch_tracking,\n        gtin: form.value.gtin || null,\n        gpc_brick_code: form.value.gpc_brick_code || null,\n        country_of_origin: form.value.country_of_origin || null,\n        product_lifecycle_status: form.value.product_lifecycle_status,\n      };\n\n      let result;\n      if (isEdit.value && props.product) {\n        result = await productService.update(\n          props.product.id,\n          productData as any\n        );\n      } else {\n        result = await productService.create(productData as any);\n      }\n\n      if (result) {\n        $q.notify({\n          type: 'positive',\n          message: isEdit.value ? t('products.updated') : t('products.created'),\n        });\n        emit('saved', result);\n        closeDialog();\n      }\n    } catch (error) {\n      console.error('Error saving product:', error);\n      $q.notify({\n        type: 'negative',\n        message: isEdit.value\n          ? t('products.updateError')\n          : t('products.createError'),\n      });\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const closeDialog = () => {\n    emit('update:modelValue', false);\n  };\n\n  const onDialogHide = () => {\n    resetForm();\n  };\n\n  // Watchers\n  watch(\n    () => props.modelValue,\n    newVal => {\n      if (newVal) {\n        populateForm();\n        nextTick(() => {\n          nameInput.value?.focus();\n        });\n      }\n    }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  .product-form {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n  }\n\n  .form-section {\n    margin-bottom: var(--space-6);\n\n    .section-title {\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--text-primary);\n      margin: 0 0 var(--space-4) 0;\n      padding-bottom: var(--space-2);\n      border-bottom: 1px solid var(--border-primary);\n    }\n  }\n\n  .advanced-expansion {\n    border: 1px solid var(--border-primary);\n    border-radius: 4px;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ShoppingCartDialog.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\SmartTable.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\UnifiedTable.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3616, 3619], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3616, 3619], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div ref=\"tableContainer\" class=\"unified-table-container medical-table\">\n    <q-table\n      v-bind=\"$attrs\"\n      :rows=\"rows\"\n      :columns=\"enhancedColumns\"\n      :loading=\"loading\"\n      :pagination=\"internalPagination\"\n      row-key=\"id\"\n      flat\n      bordered\n      separator=\"cell\"\n      class=\"unified-table\"\n      @update:pagination=\"onPaginationUpdate\"\n      @request=\"onTableRequest\"\n    >\n      <!-- Pass through all slots -->\n      <template v-for=\"(_, slot) in $slots\" #[slot]=\"slotProps\">\n        <slot :name=\"slot\" v-bind=\"slotProps || {}\" />\n      </template>\n\n      <!-- Default loading template -->\n      <template v-if=\"!$slots.loading\" #loading>\n        <q-inner-loading showing color=\"primary\" />\n      </template>\n\n      <!-- Default no-data template -->\n      <template v-if=\"!$slots['no-data']\" #no-data>\n        <div class=\"full-width row flex-center q-gutter-sm\">\n          <q-icon size=\"2em\" name=\"sentiment_dissatisfied\" />\n          <span>{{ noDataMessage || $t('common.noData') }}</span>\n        </div>\n      </template>\n    </q-table>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref, watch, onMounted, onUnmounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n\n  // Types\n  type TableRow = Record<string, unknown>;\n\n  type TableFieldAccessor = keyof TableRow | ((row: TableRow) => unknown);\n\n  interface TableColumn {\n    name: string;\n    label: string;\n    field: TableFieldAccessor;\n    align?: 'left' | 'right' | 'center';\n    sortable?: boolean;\n    style?: string;\n    headerStyle?: string;\n    classes?: string;\n    headerClasses?: string;\n    format?: (val: unknown, row: TableRow) => string;\n  }\n\n  interface TablePagination {\n    sortBy?: string;\n    descending?: boolean;\n    page: number;\n    rowsPerPage: number;\n    rowsNumber?: number;\n  }\n\n  // Props\n  interface Props {\n    rows: TableRow[];\n    columns: TableColumn[];\n    loading?: boolean;\n    pagination?: TablePagination;\n    noDataMessage?: string;\n    sortable?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    rows: () => [],\n    columns: () => [],\n    loading: false,\n    pagination: () => ({\n      sortBy: undefined,\n      descending: false,\n      page: 1,\n      rowsPerPage: 25,\n      rowsNumber: 0,\n    }),\n    sortable: true,\n    noDataMessage: '',\n  });\n\n  // Emits\n  const emit = defineEmits<{\n    'update:pagination': [pagination: TablePagination];\n    request: [requestProps: TableRequestPayload];\n  }>();\n  interface TableRequestPayload {\n    pagination: TablePagination;\n    filter?: unknown;\n    rows?: TableRow[];\n    columns?: TableColumn[];\n    [key: string]: unknown;\n  }\n\n  const { t } = useI18n();\n\n  // Template ref for the table container\n  const tableContainer = ref<HTMLElement>();\n\n  // Internal pagination state\n  const internalPagination = ref<TablePagination>({ ...props.pagination });\n\n  // Watch for external pagination changes\n  watch(\n    () => props.pagination,\n    newPagination => {\n      internalPagination.value = { ...newPagination };\n    },\n    { deep: true }\n  );\n\n  // Enhanced columns with consistent styling and sortable defaults\n  const enhancedColumns = computed(() => {\n    return props.columns.map(column => ({\n      ...column,\n      sortable: column.sortable !== false && props.sortable,\n      headerClasses: `unified-table-header ${column.headerClasses || ''}`,\n      classes: `unified-table-cell ${column.classes || ''}`,\n      headerStyle: column.headerStyle || '',\n      style: column.style || '',\n    }));\n  });\n\n  // Handle pagination updates\n  const onPaginationUpdate = (newPagination: any) => {\n    internalPagination.value = { ...newPagination };\n    emit('update:pagination', newPagination as TablePagination);\n  };\n\n  // Handle table requests (sorting, pagination)\n  const onTableRequest = (requestProps: TableRequestPayload) => {\n    const { pagination } = requestProps;\n    internalPagination.value = { ...pagination };\n    emit('request', requestProps);\n  };\n\n  // Enable horizontal scroll with mouse wheel\n  const handleWheelScroll = (event: WheelEvent) => {\n    if (!tableContainer.value) return;\n\n    // Check if horizontal scroll is needed\n    const { scrollWidth, clientWidth, scrollLeft } = tableContainer.value;\n    const canScrollHorizontally = scrollWidth > clientWidth;\n\n    // Only handle horizontal scroll when:\n    // 1. Shift key is held (explicit horizontal scroll intent)\n    // 2. Table needs horizontal scroll AND we're already scrolled horizontally\n    if (canScrollHorizontally && event.shiftKey && event.deltaY !== 0) {\n      event.preventDefault();\n      tableContainer.value.scrollLeft += event.deltaY;\n    }\n\n    // For normal vertical scroll, let the browser handle it naturally\n    // This ensures smooth transitions between horizontal and vertical scrolling\n  };\n\n  // Lifecycle hooks\n  onMounted(() => {\n    if (tableContainer.value) {\n      // Use passive: true for better performance unless we need to preventDefault\n      tableContainer.value.addEventListener('wheel', handleWheelScroll, {\n        passive: false,\n      });\n    }\n  });\n\n  onUnmounted(() => {\n    if (tableContainer.value) {\n      tableContainer.value.removeEventListener('wheel', handleWheelScroll);\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .unified-table-container {\n    overflow-x: auto; // Enable horizontal scroll\n    overflow-y: visible;\n\n    .unified-table {\n      border-radius: var(--radius-lg);\n      box-shadow: var(--shadow-sm);\n      border: 1px solid var(--border-primary);\n      min-width: 100%; // Ensure table can grow beyond container\n\n      // Enhanced headers with consistent styling\n      :deep(.unified-table-header) {\n        background: var(--brand-primary); // Consistent hoofdblauwe kleur\n        color: white;\n        font-family: var(--font-family);\n        font-weight: var(--font-weight-bold);\n        text-transform: uppercase;\n        letter-spacing: 0.05em;\n        font-size: var(--text-xs);\n        padding: var(--space-3) var(--space-4);\n        border-right: 1px solid rgba(255, 255, 255, 0.2);\n        box-shadow: var(--shadow-sm);\n\n        &:last-child {\n          border-right: none;\n        }\n\n        // Sortable column hover effect\n        &.sortable {\n          cursor: pointer;\n          transition: background var(--transition-base);\n\n          &:hover {\n            background: var(--brand-primary-dark);\n          }\n        }\n      }\n\n      // Consistent row styling with alternating colors\n      :deep(.q-tr) {\n        border-bottom: 1px solid var(--border-primary);\n        transition: all var(--transition-fast);\n\n        // Alternating row colors\n        &:nth-child(even) {\n          background: var(--neutral-50);\n        }\n\n        &:nth-child(odd) {\n          background: white;\n        }\n\n        &:hover {\n          background: rgba(\n            30,\n            58,\n            138,\n            0.05\n          ); // Subtle blue hover using brand primary\n          box-shadow: var(--shadow-md);\n        }\n      }\n\n      // Cell styling\n      :deep(.unified-table-cell) {\n        padding: var(--space-3) var(--space-4);\n        border-right: 1px solid var(--border-primary);\n        vertical-align: middle;\n\n        &:last-child {\n          border-right: none;\n        }\n\n        // Numeric columns\n        &.col-numeric {\n          font-variant-numeric: tabular-nums;\n          font-weight: var(--font-weight-semibold);\n          text-align: right;\n        }\n\n        // Status columns\n        &.col-status {\n          text-align: center;\n          font-weight: var(--font-weight-medium);\n        }\n\n        // Product/name columns\n        &.col-product,\n        &.col-name {\n          font-weight: var(--font-weight-medium);\n          color: var(--text-primary);\n        }\n\n        // Action columns\n        &.col-actions {\n          text-align: center;\n        }\n      }\n\n      // Loading and empty states\n      :deep(.q-table__bottom) {\n        padding: var(--space-3) var(--space-4);\n        border-top: 1px solid var(--border-primary);\n      }\n\n      :deep(.q-table__top) {\n        padding: var(--space-3) var(--space-4);\n        border-bottom: 1px solid var(--border-primary);\n      }\n    }\n  }\n\n  // Dark mode support\n  body.body--dark .unified-table-container {\n    .unified-table {\n      background: var(--bg-secondary);\n      border-color: var(--border-primary);\n\n      :deep(.unified-table-header) {\n        background: var(--brand-primary);\n        color: white;\n\n        &.sortable:hover {\n          background: var(--brand-primary-dark);\n        }\n      }\n\n      :deep(.q-tr) {\n        border-bottom-color: var(--border-primary);\n\n        &:nth-child(even) {\n          background: var(--bg-tertiary);\n        }\n\n        &:nth-child(odd) {\n          background: var(--bg-secondary);\n        }\n\n        &:hover {\n          background: rgba(30, 58, 138, 0.08);\n          box-shadow: var(--shadow-md);\n        }\n      }\n\n      :deep(.unified-table-cell) {\n        border-right-color: var(--border-primary);\n        color: var(--text-primary);\n      }\n\n      :deep(.q-table__bottom),\n      :deep(.q-table__top) {\n        border-color: var(--border-primary);\n        background: var(--bg-secondary);\n      }\n    }\n  }\n\n  // Responsive adjustments\n  @media (max-width: 768px) {\n    .unified-table-container {\n      .unified-table {\n        :deep(.unified-table-header),\n        :deep(.unified-table-cell) {\n          padding: var(--space-2) var(--space-3);\n          font-size: var(--text-sm);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\VirtualizedTable.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\themeManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useBulkData.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'practiceId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 93,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5155, 5158], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5155, 5158], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5213, 5216], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5213, 5216], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5244, 5247], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5244, 5247], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 208,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 208,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5362, 5365], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5362, 5365], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 208,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 208,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5376, 5379], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5376, 5379], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport { supabase } from '@/boot/supabase';\n\ninterface StockLevelRecord {\n  product_id: string;\n  current_quantity: number;\n  minimum_quantity: number;\n  location_id: string;\n  practice_locations: {\n    name: string;\n  };\n}\n\ninterface SupplierProductRecord {\n  product_id: string;\n  supplier_id: string;\n  supplier_sku: string;\n  unit_price: number;\n  minimum_order_quantity: number | null;\n  lead_time_days: number | null;\n  is_preferred: boolean;\n  suppliers: {\n    name: string;\n    contact_email: string | null;\n  };\n}\n\ninterface ProductBatchRecord {\n  product_id: string;\n  batch_number: string;\n  expiry_date: string;\n  quantity_remaining: number;\n  location_id: string;\n  practice_locations: {\n    name: string;\n  };\n}\n\ninterface RelatedDataFilters {\n  [key: string]: string | number | boolean | null;\n}\n\nexport function useBulkData() {\n  const loading = ref(false);\n  const error = ref<Error | null>(null);\n\n  const loadStockLevelsForProducts = async (\n    productIds: string[],\n    practiceId: string\n  ): Promise<Record<string, StockLevelRecord[]>> => {\n    if (!productIds.length) return {};\n\n    loading.value = true;\n    error.value = null;\n\n    try {\n      const { data, error: queryError } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n          product_id,\n          current_quantity,\n          minimum_quantity,\n          location_id,\n          practice_locations!inner(name)\n        `\n        )\n        .eq('practice_id', practiceId)\n        .in('product_id', productIds);\n\n      if (queryError) throw queryError;\n\n      const stockByProduct: Record<string, StockLevelRecord[]> = {};\n      (data as StockLevelRecord[] | null)?.forEach(stock => {\n        if (!stockByProduct[stock.product_id]) {\n          stockByProduct[stock.product_id] = [];\n        }\n        stockByProduct[stock.product_id]?.push(stock);\n      });\n\n      return stockByProduct;\n    } catch (err) {\n      error.value = err as Error;\n      console.error('Bulk stock loading failed:', err);\n      return {};\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const loadSupplierProductsForProducts = async (\n    productIds: string[],\n    practiceId: string\n  ): Promise<Record<string, SupplierProductRecord[]>> => {\n    if (!productIds.length) return {};\n\n    loading.value = true;\n    error.value = null;\n\n    try {\n      const { data, error: queryError } = await supabase\n        .from('supplier_products')\n        .select(\n          `\n          id,\n          product_id,\n          supplier_id,\n          supplier_sku,\n          cost_price,\n          list_price,\n          minimum_order_quantity,\n          lead_time_days,\n          is_preferred,\n          suppliers!inner(name, contact_email)\n        `\n        )\n        .in('product_id', productIds)\n        .eq('is_available', true);\n\n      if (queryError) throw queryError;\n\n      const suppliersByProduct: Record<string, SupplierProductRecord[]> = {};\n      (data as unknown as SupplierProductRecord[] | null)?.forEach(sp => {\n        if (!suppliersByProduct[sp.product_id]) {\n          suppliersByProduct[sp.product_id] = [];\n        }\n        suppliersByProduct[sp.product_id]?.push(sp);\n      });\n\n      return suppliersByProduct;\n    } catch (err) {\n      error.value = err as Error;\n      console.error('Bulk supplier products loading failed:', err);\n      return {};\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const loadBatchesForProducts = async (\n    productIds: string[],\n    practiceId: string\n  ): Promise<Record<string, ProductBatchRecord[]>> => {\n    if (!productIds.length) return {};\n\n    loading.value = true;\n    error.value = null;\n\n    try {\n      const { data, error: queryError } = await supabase\n        .from('product_batches')\n        .select(\n          `\n          id,\n          product_id,\n          batch_number,\n          expiry_date,\n          current_quantity,\n          available_quantity,\n          location_id,\n          practice_locations!inner(name)\n        `\n        )\n        .eq('practice_id', practiceId)\n        .in('product_id', productIds)\n        .gt('current_quantity', 0)\n        .order('expiry_date', { ascending: true });\n\n      if (queryError) throw queryError;\n\n      const batchesByProduct: Record<string, ProductBatchRecord[]> = {};\n      (data as unknown as ProductBatchRecord[] | null)?.forEach(batch => {\n        if (!batchesByProduct[batch.product_id]) {\n          batchesByProduct[batch.product_id] = [];\n        }\n        batchesByProduct[batch.product_id]?.push(batch);\n      });\n\n      return batchesByProduct;\n    } catch (err) {\n      error.value = err as Error;\n      console.error('Bulk batch loading failed:', err);\n      return {};\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const loadRelatedData = async <T extends Record<string, unknown>>(\n    table: string,\n    foreignKey: string,\n    entityIds: string[],\n    selectFields = '*',\n    additionalFilters: RelatedDataFilters = {}\n  ): Promise<Record<string, T[]>> => {\n    if (!entityIds.length) return {};\n\n    loading.value = true;\n    error.value = null;\n\n    try {\n      let query = (supabase as any)\n        .from(table)\n        .select(selectFields as any)\n        .in(foreignKey as any, entityIds);\n\n      Object.entries(additionalFilters).forEach(([key, value]) => {\n        query = query.eq(key as any, value as any);\n      });\n\n      const { data, error: queryError } = await query;\n\n      if (queryError) throw queryError;\n\n      const groupedData: Record<string, T[]> = {};\n      (data as unknown as T[] | null)?.forEach(item => {\n        const key = String(item[foreignKey]);\n        if (!groupedData[key]) {\n          groupedData[key] = [];\n        }\n        groupedData[key].push(item);\n      });\n\n      return groupedData;\n    } catch (err) {\n      error.value = err as Error;\n      console.error(`Bulk loading failed for ${table}:`, err);\n      return {};\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  return {\n    loading,\n    error,\n    loadStockLevelsForProducts,\n    loadSupplierProductsForProducts,\n    loadBatchesForProducts,\n    loadRelatedData,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useButtons.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useCache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useDebounce.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1687, 1690], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1687, 1690], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, type Ref, watch } from 'vue';\n\n/**\n * Debounce composable for better performance\n * Delays execution of expensive operations like filtering and API calls\n */\ntype GenericFunction = (...args: unknown[]) => unknown;\n\nexport function useDebounce<T extends GenericFunction>(\n  fn: T,\n  delay = 300\n): {\n  debouncedFn: (...args: Parameters<T>) => void;\n  cancel: () => void;\n  flush: () => void;\n  pending: Ref<boolean>;\n} {\n  let timeoutId: NodeJS.Timeout | null = null;\n  const pending = ref(false);\n  let lastArgs: Parameters<T> | null = null;\n\n  const cancel = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n      timeoutId = null;\n      pending.value = false;\n    }\n  };\n\n  const flush = () => {\n    if (timeoutId && lastArgs) {\n      cancel();\n      fn(...lastArgs);\n      lastArgs = null;\n    }\n  };\n\n  const debouncedFn = (...args: Parameters<T>) => {\n    lastArgs = args;\n    cancel();\n    pending.value = true;\n\n    timeoutId = setTimeout(() => {\n      fn(...args);\n      pending.value = false;\n      timeoutId = null;\n      lastArgs = null;\n    }, delay);\n  };\n\n  return {\n    debouncedFn,\n    cancel,\n    flush,\n    pending,\n  };\n}\n\n/**\n * Debounced ref for reactive values\n * Useful for filter inputs that should update with delay\n */\nexport function useDebouncedRef<T>(\n  initialValue: T,\n  delay = 300\n): {\n  value: Ref<T>;\n  debouncedValue: Ref<T>;\n  pending: Ref<boolean>;\n} {\n  const value = ref(initialValue) as Ref<T>;\n  const debouncedValue = ref(initialValue) as Ref<T>;\n  const pending = ref(false);\n\n  const { debouncedFn } = useDebounce(\n    ((newValue: T) => {\n      debouncedValue.value = newValue;\n      pending.value = false;\n    }) as any,\n    delay\n  );\n\n  watch(\n    value,\n    newValue => {\n      pending.value = true;\n      debouncedFn(newValue);\n    },\n    { immediate: true }\n  );\n\n  return {\n    value,\n    debouncedValue,\n    pending,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useFormValidation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useFormatting.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useModalGuard.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useOffline.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useSmartTable.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useTableSorting.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\bridge.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\dto.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\payload.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\examples\\BaseDialogExamples.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [339, 342], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [339, 342], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [352, 355], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [352, 355], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [867, 870], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [867, 870], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1453, 1456], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1453, 1456], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2924, 2927], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2924, 2927], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3245, 3248], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3245, 3248], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createI18n } from 'vue-i18n';\nimport type { SupportedLocale } from '@/types/i18n';\nexport type { SupportedLocale } from '@/types/i18n';\n\n// Always use lazy loading to avoid require() issues in Vite\nconst ENABLE_LAZY_LOADING = true;\n\n// Messages for upfront loading (empty for lazy loading)\nconst messages: Record<SupportedLocale, any> = {} as any;\n\n// Get saved locale from localStorage or default to 'nl'\nconst getSavedLocale = (): SupportedLocale => {\n  const _saved = localStorage.getItem('remcura_locale');\n  // We only support Dutch now; ignore any previously saved en/es\n  return 'nl';\n};\n\n// Check if we're in development mode\nexport const isDevelopment =\n  process.env.NODE_ENV === 'development' || process.env.DEV === 'true';\n\n// Custom missing handler for development feedback\nconst missingHandler = (\n  locale: string,\n  key: string,\n  _instance: any,\n  _type: string\n) => {\n  if (isDevelopment) {\n    console.warn(`[i18n:missing] ${locale}:${key}`);\n    return key; // show key in dev\n  }\n  return '';\n};\n\n// Create i18n instance\n// Use composition mode for Vue 3 compatibility\nexport const i18n = createI18n({\n  locale: getSavedLocale(),\n  fallbackLocale: 'nl',\n  messages: ENABLE_LAZY_LOADING ? {} : messages, // Empty in production for lazy loading\n  legacy: false, // Use composition mode for Vue 3 compatibility\n  globalInjection: true,\n  missingWarn: isDevelopment,\n  fallbackWarn: isDevelopment,\n  missing: missingHandler as any,\n});\n\n// Async loader for lazy loading\nconst loadedLanguages: Set<SupportedLocale> = new Set();\n\nexport const loadLanguageAsync = async (\n  locale: SupportedLocale\n): Promise<void> => {\n  if (!ENABLE_LAZY_LOADING) {\n    // In development, everything is already loaded\n    return Promise.resolve();\n  }\n\n  if (loadedLanguages.has(locale)) {\n    // Already loaded\n    return Promise.resolve();\n  }\n\n  try {\n    const messages = await import(`./${locale}/index.ts`);\n    i18n.global.setLocaleMessage(locale, messages.default);\n    loadedLanguages.add(locale);\n\n    if (isDevelopment) {\n      // Lazy loaded translations\n    }\n  } catch (error) {\n    console.error(`❌ [i18n] Failed to load ${locale} translations:`, error);\n    throw error;\n  }\n};\n\n// Initialize with Dutch language in production (lazy load)\nif (ENABLE_LAZY_LOADING) {\n  const initialLocale = getSavedLocale();\n  loadLanguageAsync(initialLocale)\n    .then(() => {\n      if (isDevelopment) {\n        // Initial translations loaded\n      }\n    })\n    .catch(error => {\n      console.error('❌ [i18n] Failed to load initial translations:', error);\n    });\n}\n\n// Locale setter with persistence and lazy loading\nexport const setI18nLanguage = async (\n  locale: SupportedLocale\n): Promise<SupportedLocale> => {\n  // Load the language if lazy loading is enabled\n  if (ENABLE_LAZY_LOADING) {\n    await loadLanguageAsync(locale);\n  }\n\n  // In composition mode, locale is a ref with .value\n  (i18n.global.locale as any).value = locale;\n  document.querySelector('html')?.setAttribute('lang', locale);\n  localStorage.setItem('remcura_locale', locale);\n  return locale;\n};\n\n// Get current locale\nexport const getCurrentLocale = (): SupportedLocale => {\n  // In composition mode, locale is a ref with .value\n  return (i18n.global.locale as any).value as SupportedLocale;\n};\n\n// Development helper: Check if a translation exists\nexport const hasTranslation = (\n  key: string,\n  locale?: SupportedLocale\n): boolean => {\n  const targetLocale = locale || getCurrentLocale();\n  return i18n.global.te(key, targetLocale);\n};\n\n// Development helper: Get missing translations for current locale\nexport const getMissingTranslations = (\n  keys: string[],\n  locale?: SupportedLocale\n): string[] => {\n  const targetLocale = locale || getCurrentLocale();\n  return keys.filter(key => !hasTranslation(key, targetLocale));\n};\n\n// Development helper: Log translation coverage stats\nexport const logTranslationStats = () => {\n  if (!isDevelopment) {\n    return;\n  }\n\n  const locales: SupportedLocale[] = ['nl'];\n  console.group('🌐 Translation Coverage Statistics');\n\n  locales.forEach(locale => {\n    if (ENABLE_LAZY_LOADING) {\n      const _isLoaded = loadedLanguages.has(locale);\n      // Language loaded check\n    } else {\n      // Count keys for status\n    }\n  });\n\n  console.groupEnd();\n};\n\n// Preload all languages (useful for offline apps)\nexport const preloadAllLanguages = async (): Promise<void> => {\n  if (!ENABLE_LAZY_LOADING) {\n    // Already loaded in development\n    return Promise.resolve();\n  }\n\n  const locales: SupportedLocale[] = ['nl'];\n  const loadPromises = locales.map(locale => loadLanguageAsync(locale));\n\n  try {\n    await Promise.all(loadPromises);\n    if (isDevelopment) {\n      // All languages preloaded successfully\n    }\n  } catch (error) {\n    console.error('❌ [i18n] Failed to preload all languages:', error);\n    throw error;\n  }\n};\n\n// Check if lazy loading is enabled\nexport const isLazyLoadingEnabled = (): boolean => ENABLE_LAZY_LOADING;\n\n// Helper function to recursively count keys in translation object (for future use)\n// const countKeys = (obj: any, prefix = ''): number => {\n//   let count = 0;\n//   for (const key in obj) {\n//     if (typeof obj[key] === 'object' && obj[key] !== null) {\n//       count += countKeys(obj[key], prefix ? `${prefix}.${key}` : key);\n//     } else {\n//       count++;\n//     }\n//   }\n//   return count;\n// };\n\nexport default i18n;\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\nl\\filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\nl\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\layouts\\AuthLayout.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\layouts\\MainLayout.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\AdminDashboard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\AnalyticsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\BatchManagementPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 679,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 679,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20565, 20568], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20565, 20568], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 681,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 681,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20665, 20668], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20665, 20668], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 697,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 697,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21150, 21153], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21150, 21153], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 721,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 721,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21827, 21830], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21827, 21830], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 753,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 753,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22627, 22630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22627, 22630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 757,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 757,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22740, 22743], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22740, 22743], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 767,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 767,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22978, 22981], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22978, 22981], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('batch.batchManagement')\"\n        :subtitle=\"$t('batch.manageBatchesSubtitle')\"\n        icon=\"qr_code_scanner\"\n      >\n        <template #actions>\n          <!-- View Mode Toggle -->\n          <q-btn-toggle\n            v-model=\"viewMode\"\n            :options=\"viewModeOptions\"\n            outline\n            toggle-color=\"primary\"\n            color=\"grey-6\"\n            size=\"sm\"\n            class=\"view-mode-toggle\"\n          />\n\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"refreshing\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshData\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            v-if=\"viewMode === 'full'\"\n            icon=\"add\"\n            :label=\"$t('batch.addBatch')\"\n            unelevated\n            no-caps\n            class=\"app-btn-success\"\n            @click=\"showAddBatchDialog = true\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <div class=\"batch-management-page\">\n      <!-- Dashboard Cards - Full View -->\n      <div v-if=\"viewMode === 'full'\" class=\"row q-mb-lg stats-cards-container\">\n        <!-- Total Batches Card -->\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.totalBatches')\"\n            icon=\"inventory\"\n            icon-color=\"primary\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"40px\"\n                />\n                <span v-else>{{ totalBatches }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n\n        <!-- Expiring Soon Card -->\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.expiringSoon')\"\n            icon=\"warning\"\n            :icon-color=\"expiringBatches > 0 ? 'warning' : 'info'\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"40px\"\n                />\n                <span v-else>{{ expiringBatches }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n\n        <!-- Active Batches Card -->\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.activeBatches')\"\n            icon=\"check_circle\"\n            icon-color=\"positive\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"40px\"\n                />\n                <span v-else>{{ activeBatches }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n\n        <!-- Total Value Card -->\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.totalValue')\"\n            icon=\"euro\"\n            icon-color=\"primary\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"80px\"\n                />\n                <span v-else>{{ formatCurrency(totalValue, 'EUR') }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n      </div>\n\n      <!-- Dashboard Cards - Lite View -->\n      <div v-else class=\"row q-mb-lg stats-cards-container-lite\">\n        <!-- Essential Info Only -->\n        <div class=\"col-12 col-sm-6 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.totalBatches')\"\n            icon=\"inventory\"\n            icon-color=\"primary\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"40px\"\n                />\n                <span v-else>{{ totalBatches }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n\n        <!-- Expiring Soon Card -->\n        <div class=\"col-12 col-sm-6 stats-card-col\">\n          <BaseCard\n            :title=\"$t('batch.expiringSoon')\"\n            icon=\"warning\"\n            :icon-color=\"expiringBatches > 0 ? 'warning' : 'info'\"\n          >\n            <div class=\"stat-display\">\n              <div class=\"stat-value\">\n                <q-skeleton\n                  v-if=\"batchStore.loading\"\n                  type=\"text\"\n                  width=\"40px\"\n                />\n                <span v-else>{{ expiringBatches }}</span>\n              </div>\n            </div>\n          </BaseCard>\n        </div>\n      </div>\n\n      <!-- Quick Actions -->\n      <div v-if=\"viewMode === 'full'\" class=\"q-mb-lg\">\n        <div class=\"text-h6 q-mb-md text-grey-8\">\n          <q-icon name=\"flash_on\" class=\"q-mr-sm\" />\n          {{ $t('batch.quickActions') }}\n        </div>\n\n        <div class=\"row q-gutter-md\">\n          <!-- Scan Batch Action -->\n          <div class=\"col-12 col-sm-6 col-md-3\">\n            <InteractiveCard\n              :title=\"$t('batch.scanBatch')\"\n              :subtitle=\"$t('batch.scanBatchSubtitle')\"\n              icon=\"qr_code_scanner\"\n              icon-color=\"primary\"\n              @click=\"openBarcodeScanner\"\n            />\n          </div>\n\n          <!-- View Expiring Action -->\n          <div class=\"col-12 col-sm-6 col-md-3\">\n            <InteractiveCard\n              :title=\"$t('batch.viewExpiring')\"\n              :subtitle=\"`${expiringBatches} ${$t(\n                'batch.viewExpiringSubtitle'\n              )}`\"\n              icon=\"warning\"\n              icon-color=\"warning\"\n              :class=\"showExpiringOnly ? 'expiring-active' : ''\"\n              @click=\"filterExpiring\"\n            />\n          </div>\n\n          <!-- Export Batches Action -->\n          <div class=\"col-12 col-sm-6 col-md-3\">\n            <InteractiveCard\n              :title=\"$t('batch.exportBatches')\"\n              :subtitle=\"$t('batch.exportBatchesSubtitle')\"\n              icon=\"download\"\n              icon-color=\"positive\"\n              @click=\"exportBatches\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <!-- Quick Actions - Lite View -->\n      <div v-else class=\"q-mb-lg lite-actions\">\n        <div class=\"row q-gutter-sm\">\n          <q-btn\n            icon=\"qr_code_scanner\"\n            :label=\"$t('batch.scanBatch')\"\n            unelevated\n            color=\"primary\"\n            class=\"lite-action-btn\"\n            @click=\"openBarcodeScanner\"\n          />\n          <q-btn\n            icon=\"warning\"\n            :label=\"$t('batch.viewExpiring')\"\n            unelevated\n            :color=\"showExpiringOnly ? 'warning' : 'grey-6'\"\n            class=\"lite-action-btn\"\n            @click=\"filterExpiring\"\n          />\n        </div>\n      </div>\n\n      <!-- Error Banner -->\n      <div v-if=\"batchStore.error\" class=\"q-mb-md\">\n        <q-banner class=\"bg-negative text-white\" rounded dense>\n          <template #avatar>\n            <q-icon name=\"warning\" size=\"sm\" />\n          </template>\n          <div class=\"text-subtitle2\">{{ $t('errors.failedToLoadData') }}</div>\n          <template #action>\n            <q-btn\n              flat\n              color=\"white\"\n              :label=\"$t('common.retry')\"\n              size=\"sm\"\n              @click=\"refreshData\"\n            />\n          </template>\n        </q-banner>\n      </div>\n\n      <!-- Expiry Alerts -->\n      <div v-if=\"criticalBatches.length > 0\" class=\"q-mb-lg\">\n        <q-banner class=\"bg-red text-white\" rounded dense>\n          <template #avatar>\n            <q-icon name=\"error\" size=\"sm\" />\n          </template>\n          <div class=\"text-subtitle2\">{{ $t('batch.criticalAlert') }}</div>\n          <div class=\"text-body2\">\n            {{\n              $t('batch.criticalBatchesFound', {\n                count: criticalBatches.length,\n              })\n            }}\n          </div>\n          <template #action>\n            <q-btn\n              flat\n              color=\"white\"\n              :label=\"$t('batch.viewCritical')\"\n              size=\"sm\"\n              @click=\"filterCritical\"\n            />\n          </template>\n        </q-banner>\n      </div>\n\n      <!-- Main Content Tabs - Full View -->\n      <BaseCard v-if=\"viewMode === 'full'\">\n        <q-tabs\n          v-model=\"activeTab\"\n          dense\n          class=\"text-grey\"\n          active-color=\"primary\"\n          indicator-color=\"primary\"\n          align=\"justify\"\n          narrow-indicator\n        >\n          <q-tab name=\"overview\" :label=\"$t('batch.overview')\" icon=\"list\" />\n          <q-tab\n            name=\"expiring\"\n            :label=\"$t('batch.expiring')\"\n            icon=\"schedule\"\n          />\n          <q-tab\n            name=\"fifo\"\n            :label=\"$t('batch.fifoManagement')\"\n            icon=\"trending_up\"\n          />\n          <q-tab name=\"reports\" :label=\"$t('batch.reports')\" icon=\"analytics\" />\n        </q-tabs>\n\n        <q-separator />\n\n        <q-tab-panels v-model=\"activeTab\" animated>\n          <!-- Overview Tab -->\n          <q-tab-panel name=\"overview\" class=\"q-pa-none\">\n            <BatchOverview\n              ref=\"batchOverviewRef\"\n              :view-mode=\"viewMode\"\n              @batch-selected=\"onBatchSelected\"\n              @batch-used=\"onBatchUsed\"\n            />\n          </q-tab-panel>\n\n          <!-- Expiring Tab -->\n          <q-tab-panel name=\"expiring\" class=\"q-pa-md\">\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.expiringBatches') }}</div>\n            <ExpiringBatchesList\n              :batches=\"batchStore.expiringBatches\"\n              @batch-selected=\"onBatchSelected\"\n            />\n          </q-tab-panel>\n\n          <!-- FIFO Management Tab -->\n          <q-tab-panel name=\"fifo\" class=\"q-pa-md\">\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoManagement') }}</div>\n            <FifoBatchManager @suggestion-generated=\"onFifoSuggestion\" />\n          </q-tab-panel>\n\n          <!-- Reports Tab -->\n          <q-tab-panel name=\"reports\" class=\"q-pa-md\">\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.batchReports') }}</div>\n            <BatchReports />\n          </q-tab-panel>\n        </q-tab-panels>\n      </BaseCard>\n\n      <!-- Simplified Content - Lite View -->\n      <BaseCard v-else class=\"lite-content\">\n        <q-tabs\n          v-model=\"activeTab\"\n          dense\n          class=\"text-grey\"\n          active-color=\"primary\"\n          indicator-color=\"primary\"\n          align=\"left\"\n          narrow-indicator\n        >\n          <q-tab name=\"overview\" :label=\"$t('batch.overview')\" icon=\"list\" />\n          <q-tab\n            name=\"expiring\"\n            :label=\"$t('batch.expiring')\"\n            icon=\"schedule\"\n          />\n        </q-tabs>\n\n        <q-separator />\n\n        <q-tab-panels v-model=\"activeTab\" animated>\n          <!-- Overview Tab - Lite -->\n          <q-tab-panel name=\"overview\" class=\"q-pa-none\">\n            <BatchOverview\n              ref=\"batchOverviewRef\"\n              :view-mode=\"viewMode\"\n              @batch-selected=\"onBatchSelected\"\n              @batch-used=\"onBatchUsed\"\n            />\n          </q-tab-panel>\n\n          <!-- Expiring Tab - Lite -->\n          <q-tab-panel name=\"expiring\" class=\"q-pa-md\">\n            <div class=\"text-subtitle1 q-mb-md\">\n              {{ $t('batch.expiringBatches') }}\n            </div>\n            <ExpiringBatchesList\n              :batches=\"batchStore.expiringBatches\"\n              :view-mode=\"viewMode\"\n              @batch-selected=\"onBatchSelected\"\n            />\n          </q-tab-panel>\n        </q-tab-panels>\n      </BaseCard>\n    </div>\n\n    <!-- Add Batch Dialog -->\n    <BaseDialog\n      v-model=\"showAddBatchDialog\"\n      :title=\"$t('batch.addBatch')\"\n      icon=\"inventory\"\n      size=\"lg\"\n    >\n      <BatchRegistrationForm\n        @close=\"showAddBatchDialog = false\"\n        @success=\"onBatchAdded\"\n      />\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          @click=\"showAddBatchDialog = false\"\n        />\n      </template>\n    </BaseDialog>\n\n    <!-- Batch Detail Dialog -->\n    <BaseDialog\n      v-model=\"showBatchDetailDialog\"\n      :title=\"\n        $t('batch.batchTitle', {\n          batchNumber: selectedBatch?.batch_number || '',\n        })\n      \"\n      :subtitle=\"selectedBatch?.product?.name || ''\"\n      icon=\"inventory\"\n      size=\"md\"\n      @close=\"showBatchDetailDialog = false\"\n    >\n      <div v-if=\"selectedBatch\" class=\"batch-details\">\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('batch.expiryDate') }}:</span>\n          <span class=\"value\">{{ formatDate(selectedBatch.expiryDate) }}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('batch.currentQuantity') }}:</span>\n          <span class=\"value\">{{ selectedBatch.currentQuantity }}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('batch.status') }}:</span>\n          <q-chip\n            :color=\"\n              getStatusColor(\n                selectedBatch.raw?.status ??\n                  (selectedBatch.currentQuantity > 0 ? 'active' : 'depleted')\n              )\n            \"\n            text-color=\"white\"\n            size=\"sm\"\n          >\n            {{\n              $t(\n                `batch.status.${selectedBatch.raw?.status ?? (selectedBatch.currentQuantity > 0 ? 'active' : 'depleted')}`\n              )\n            }}\n          </q-chip>\n        </div>\n      </div>\n\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          color=\"primary\"\n          @click=\"showBatchDetailDialog = false\"\n        />\n      </template>\n    </BaseDialog>\n\n    <!-- Barcode Scanner Dialog -->\n    <BaseDialog\n      v-model=\"showScannerDialog\"\n      :title=\"$t('barcodeScanner.title')\"\n      icon=\"qr_code_scanner\"\n      size=\"md\"\n    >\n      <BarcodeScanner v-model=\"showScannerDialog\" @scan=\"onBarcodeScanned\" />\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          @click=\"showScannerDialog = false\"\n        />\n      </template>\n    </BaseDialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  // Dialog baseline: this page uses BaseDialog for add batch and scanner modals\n  import {\n    ref,\n    computed,\n    onMounted,\n    getCurrentInstance,\n    defineAsyncComponent,\n    watch,\n  } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useClinicStore } from 'src/stores/clinic';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import { BaseCard, InteractiveCard } from 'src/components/cards';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  // ✅ PERFORMANCE OPTIMIZATION: Dynamic imports for heavy components\n\n  import BatchOverview from 'src/components/BatchOverview.vue';\n  const BatchRegistrationForm = defineAsyncComponent(\n    () => import('src/components/BatchRegistrationForm.vue')\n  );\n  const BarcodeScanner = defineAsyncComponent(\n    () => import('src/components/BarcodeScanner.vue')\n  );\n  const ExpiringBatchesList = defineAsyncComponent(\n    () => import('src/components/ExpiringBatchesList.vue')\n  );\n  const FifoBatchManager = defineAsyncComponent(\n    () => import('src/components/FifoBatchManager.vue')\n  );\n  const BatchReports = defineAsyncComponent(\n    () => import('src/components/BatchReports.vue')\n  );\n  import type { ProductBatchWithDetails } from 'src/types/inventory';\n  import { useFormatting } from 'src/composables/useFormatting';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const inventoryStore = useInventoryStore();\n  const authStore = useAuthStore();\n  const clinicStore = useClinicStore();\n  const { formatDate } = useFormatting();\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      active: 'positive',\n      expired: 'negative',\n      depleted: 'grey',\n      recalled: 'deep-orange',\n      quarantine: 'warning',\n    };\n    return colors[status as keyof typeof colors] || 'grey';\n  };\n\n  // State\n  const activeTab = ref('overview');\n  const showAddBatchDialog = ref(false);\n  const showBatchDetailDialog = ref(false);\n  const showScannerDialog = ref(false);\n  const showExpiringOnly = ref(false);\n  const selectedBatch = ref<ProductBatchWithDetails | null>(null);\n  const refreshing = ref(false);\n  const batchOverviewRef = ref();\n\n  // View mode state\n  const viewMode = ref<'lite' | 'full'>('full');\n  const viewModeOptions = computed(() => [\n    { label: t('batch.viewMode.lite'), value: 'lite', icon: 'view_compact' },\n    { label: t('batch.viewMode.full'), value: 'full', icon: 'view_module' },\n  ]);\n\n  // Computed\n  const totalBatches = computed(() => batchStore.batches.length);\n\n  const activeBatches = computed(\n    () => batchStore.batches.filter(batch => batch.status === 'active').length\n  );\n\n  const expiringBatches = computed(\n    () =>\n      batchStore.expiringBatches.filter(\n        batch =>\n          batch.urgency_level === 'critical' ||\n          batch.urgency_level === 'warning'\n      ).length\n  );\n\n  const criticalBatches = computed(() =>\n    batchStore.expiringBatches.filter(\n      batch =>\n        batch.urgency_level === 'expired' || batch.urgency_level === 'critical'\n    )\n  );\n\n  const totalValue = computed(() =>\n    batchStore.batches.reduce(\n      (sum, batch) =>\n        sum + (batch.currentQuantity || 0) * (batch.unitCost || 0),\n      0\n    )\n  );\n\n  // Methods\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: currency || 'EUR',\n    }).format(amount);\n  };\n\n  const initializeViewMode = () => {\n    // Check for saved preference first\n    const savedViewMode = localStorage.getItem('remcura_batch_view_mode');\n    if (savedViewMode && ['lite', 'full'].includes(savedViewMode)) {\n      viewMode.value = savedViewMode as 'lite' | 'full';\n      return;\n    }\n\n    // Default based on user role or practice settings\n    // For now, default to 'full' - can be enhanced with role-based logic\n    viewMode.value = 'full';\n\n    // Save the initial preference\n    localStorage.setItem('remcura_batch_view_mode', viewMode.value);\n  };\n\n  const onViewModeChange = () => {\n    // Save preference when changed\n    localStorage.setItem('remcura_batch_view_mode', viewMode.value);\n\n    // Reset active tab for lite view if on advanced tabs\n    if (\n      viewMode.value === 'lite' &&\n      ['fifo', 'reports'].includes(activeTab.value)\n    ) {\n      activeTab.value = 'overview';\n    }\n  };\n\n  const refreshData = async () => {\n    try {\n      refreshing.value = true;\n      const practiceId = authStore.clinicId;\n      if (!practiceId) {\n        return;\n      }\n\n      await Promise.all([\n        batchStore.fetchBatches({ practiceId }),\n        batchStore.fetchExpiringBatches(practiceId),\n      ]);\n\n      $q.notify({\n        type: 'positive',\n        message: t('common.dataRefreshed'),\n        timeout: 1000,\n      });\n    } catch (error) {\n      console.error(t('errors.failedToRefreshData'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToRefreshData'),\n      });\n    } finally {\n      refreshing.value = false;\n    }\n  };\n\n  const openBarcodeScanner = () => {\n    showScannerDialog.value = true;\n  };\n\n  const filterExpiring = () => {\n    showExpiringOnly.value = !showExpiringOnly.value;\n    activeTab.value = 'expiring';\n  };\n\n  const filterCritical = () => {\n    activeTab.value = 'expiring';\n    // Apply critical filter in the expiring tab\n  };\n\n  const exportBatches = () => {\n    // Export batch data as CSV\n    const csvData = batchStore.batches.map(batch => ({\n      [t('batch.batchNumber')]: batch.batchNumber,\n      [t('product.product')]:\n        (batch as any).productName ?? `Product ${batch.productId}`,\n      [t('location.location')]:\n        (batch as any).locationName ?? `Location ${batch.locationId}`,\n      [t('batch.currentQuantity')]: batch.currentQuantity,\n      [t('batch.expiryDate')]: batch.expiryDate,\n      [t('common.status')]:\n        batch.status ?? (batch.currentQuantity > 0 ? 'active' : 'depleted'),\n    }));\n\n    const csv = convertToCSV(csvData);\n    downloadCSV(csv, 'batch-overview.csv');\n\n    $q.notify({\n      type: 'positive',\n      message: t('batch.exportSuccess'),\n    });\n  };\n\n  const convertToCSV = (data: any[]) => {\n    if (!data.length) {\n      return '';\n    }\n\n    const headers = Object.keys(data[0]);\n    const csvHeaders = headers.join(',');\n    const csvRows = data.map(row =>\n      headers.map(header => `\"${row[header] || ''}\"`).join(',')\n    );\n\n    return [csvHeaders, ...csvRows].join('\\n');\n  };\n\n  const downloadCSV = (csv: string, filename: string) => {\n    const blob = new Blob([csv], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const onBatchSelected = (batch: ProductBatchWithDetails | any) => {\n    selectedBatch.value = batch as ProductBatchWithDetails;\n    showBatchDetailDialog.value = true;\n  };\n\n  const onBatchAdded = () => {\n    showAddBatchDialog.value = false;\n    refreshData();\n  };\n\n  const onBatchUpdated = () => {\n    showBatchDetailDialog.value = false;\n    refreshData();\n  };\n\n  const onBatchUsed = () => {\n    refreshData();\n  };\n\n  const onUseBatch = (batch: ProductBatchWithDetails) => {\n    // Handle batch usage\n    showBatchDetailDialog.value = false;\n    // Open usage dialog or process directly\n  };\n\n  const onBarcodeScanned = (barcodeData: string) => {\n    showScannerDialog.value = false;\n\n    // Try to find batch by batch number\n    const foundBatch = batchStore.batches.find(\n      batch =>\n        batch.batchNumber === barcodeData ||\n        (batch as any).supplierBatchNumber === barcodeData\n    );\n\n    if (foundBatch) {\n      selectedBatch.value = foundBatch as any;\n      showBatchDetailDialog.value = true;\n    } else {\n      $q.notify({\n        type: 'warning',\n        message: t('batch.batchNotFound', { batchNumber: barcodeData }),\n      });\n    }\n  };\n\n  const onFifoSuggestion = (suggestion: any) => {\n    // Handle FIFO batch suggestion\n    // FIFO suggestion generated successfully\n  };\n\n  // Watchers\n  watch(viewMode, onViewModeChange);\n\n  // Lifecycle\n  onMounted(() => {\n    initializeViewMode();\n    const practiceId = authStore.clinicId;\n    if (practiceId) {\n      refreshData();\n    }\n  });\n</script>\n\n<style scoped>\n  .batch-management-page {\n    padding: 16px;\n  }\n\n  .dashboard-card {\n    height: 100px;\n    transition: all 0.3s ease;\n  }\n\n  .dashboard-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n\n  .dashboard-card .q-card-section {\n    height: 100%;\n  }\n\n  @media (max-width: 768px) {\n    .batch-management-page {\n      padding: 8px;\n    }\n\n    .dashboard-card {\n      height: 80px;\n    }\n  }\n\n  .stats-cards-container {\n    gap: 0;\n\n    .stats-card-col {\n      padding: 8px;\n\n      @media (max-width: 640px) {\n        padding: 6px;\n      }\n    }\n  }\n\n  .stats-cards-container-lite {\n    gap: 0;\n\n    .stats-card-col {\n      padding: 8px;\n\n      @media (max-width: 640px) {\n        padding: 6px;\n      }\n    }\n  }\n\n  .lite-actions {\n    .lite-action-btn {\n      min-width: 140px;\n\n      @media (max-width: 640px) {\n        min-width: 120px;\n        font-size: 0.875rem;\n      }\n    }\n  }\n\n  .lite-content {\n    .q-tab-panels {\n      .q-tab-panel {\n        padding: 12px;\n      }\n    }\n  }\n\n  .view-mode-toggle {\n    margin-right: 8px;\n\n    @media (max-width: 768px) {\n      margin-right: 0;\n      margin-bottom: 8px;\n    }\n  }\n\n  /* Active state for expiring filter */\n  .expiring-active {\n    border-color: #ff9800;\n    background: linear-gradient(135deg, #fff3e0 0%, #ffebcc 100%);\n\n    .body--dark & {\n      background: linear-gradient(135deg, #2d1b0e 0%, #3d2914 100%);\n      border-color: #ff9800;\n    }\n  }\n\n  /* New stat display styles for replaced stats cards */\n  .stat-display {\n    text-align: center;\n    padding: var(--space-4);\n\n    .stat-value {\n      font-size: 28px;\n      font-weight: 700;\n      color: var(--text-primary);\n      line-height: 1.2;\n      margin-bottom: 4px;\n    }\n  }\n\n  .batch-details {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n\n    .detail-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      padding: 8px 0;\n      border-bottom: 1px solid var(--card-border, rgba(0, 0, 0, 0.08));\n\n      &:last-child {\n        border-bottom: none;\n      }\n\n      .label {\n        font-weight: 600;\n        color: var(--text-primary);\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\DashboardPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10911, 10914], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10911, 10914], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"dashboardConfig.title\"\n        :subtitle=\"dashboardConfig.subtitle\"\n        icon=\"space_dashboard\"\n      >\n        <template #actions>\n          <!-- Practice Switcher (only for platform owners) -->\n          <q-select\n            v-if=\"isPlatformOwner\"\n            v-model=\"selectedPracticeId\"\n            :options=\"practiceOptions\"\n            option-value=\"id\"\n            option-label=\"name\"\n            emit-value\n            map-options\n            dense\n            outlined\n            style=\"min-width: 260px; margin-right: 12px\"\n            :label=\"$t('dashboard.selectPractice')\"\n            :loading=\"loadingPractices\"\n            @update:model-value=\"handlePracticeChange\"\n          >\n            <template #prepend>\n              <q-icon name=\"business\" />\n            </template>\n          </q-select>\n\n          <!-- Demo Role Switcher -->\n          <q-select\n            v-model=\"selectedDemoRole\"\n            :options=\"demoRoleOptions\"\n            option-value=\"value\"\n            option-label=\"label\"\n            emit-value\n            map-options\n            dense\n            outlined\n            style=\"min-width: 250px; margin-right: 12px\"\n            :label=\"$t('dashboard.demoRoleSwitch.label')\"\n            color=\"primary\"\n            :loading=\"loading\"\n            class=\"demo-role-switcher\"\n            @update:model-value=\"switchDemoRole\"\n          >\n            <template #prepend>\n              <q-icon name=\"swap_horiz\" />\n            </template>\n\n            <template #option=\"scope\">\n              <q-item v-bind=\"scope.itemProps\" class=\"role-option-item\">\n                <q-item-section avatar>\n                  <q-icon :name=\"scope.opt.icon\" />\n                </q-item-section>\n                <q-item-section>\n                  <q-item-label>{{ scope.opt.label }}</q-item-label>\n                </q-item-section>\n              </q-item>\n            </template>\n\n            <!-- use default selected rendering -->\n          </q-select>\n\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshDashboard\"\n          >\n            <q-tooltip>{{ $t('dashboard.actions.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            flat\n            round\n            icon=\"tune\"\n            size=\"md\"\n            class=\"app-btn-refresh\"\n            @click=\"showCustomizeDialog = true\"\n          >\n            <q-tooltip>{{ $t('dashboard.actions.customize') }}</q-tooltip>\n          </q-btn>\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Role-based Dashboard Content -->\n    <div class=\"dashboard-container\">\n      <!-- Quick Actions Bar -->\n      <div v-if=\"quickActions.length\" class=\"quick-actions-section\">\n        <div class=\"quick-actions-grid\">\n          <q-btn\n            v-for=\"action in quickActions\"\n            :key=\"action.id\"\n            :icon=\"action.icon\"\n            :label=\"action.label\"\n            unelevated\n            no-caps\n            :class=\"getActionButtonClass(action.type)\"\n            @click=\"$router.push(action.route)\"\n          />\n        </div>\n      </div>\n\n      <!-- Alerts Section -->\n      <div v-if=\"alerts.length\" class=\"alerts-section\">\n        <q-banner\n          v-for=\"alert in alerts\"\n          :key=\"alert.id\"\n          :class=\"`banner-${alert.type}`\"\n          rounded\n          class=\"alert-banner\"\n        >\n          <template #avatar>\n            <q-icon\n              :name=\"getAlertIcon(alert.type)\"\n              :color=\"alert.type === 'warning' ? 'warning' : alert.type\"\n            />\n          </template>\n          {{ alert.message }}\n          <template v-if=\"alert.action\" #action>\n            <q-btn\n              flat\n              :label=\"alert.actionLabel\"\n              @click=\"$router.push(alert.action)\"\n            />\n          </template>\n        </q-banner>\n      </div>\n\n      <!-- Widgets Grid -->\n      <transition name=\"dashboard-transition\" mode=\"out-in\">\n        <div :key=\"selectedDemoRole\" class=\"widgets-grid\">\n          <div\n            v-for=\"widget in widgets\"\n            :key=\"widget.id\"\n            :class=\"getWidgetGridClass(widget)\"\n            class=\"widget-grid-item\"\n          >\n            <DynamicWidget\n              :widget=\"widget\"\n              :loading=\"loading\"\n              @refresh=\"refreshWidget\"\n            />\n          </div>\n        </div>\n      </transition>\n\n      <!-- Platform Owner Message -->\n      <div\n        v-if=\"selectedDemoRole === 'platform_owner'\"\n        class=\"platform-owner-message\"\n      >\n        <q-banner class=\"bg-deep-purple-1 text-deep-purple-8\" rounded>\n          <template #avatar>\n            <q-icon name=\"settings\" color=\"deep-purple\" />\n          </template>\n          <div class=\"text-weight-medium\">\n            {{ $t('dashboard.platformOwner.title') }}\n          </div>\n          <div class=\"text-body2 q-mt-xs\">\n            {{ $t('dashboard.platformOwner.description') }}\n          </div>\n\n          <template #action>\n            <q-btn\n              :label=\"$t('dashboard.platformOwner.goToPlatform')\"\n              color=\"deep-purple\"\n              to=\"/platform\"\n              unelevated\n              no-caps\n            />\n          </template>\n        </q-banner>\n      </div>\n\n      <!-- Empty State -->\n      <div v-else-if=\"!widgets.length && !loading\" class=\"empty-dashboard\">\n        <q-icon name=\"widgets\" class=\"icon-size-3xl\" color=\"grey-5\" />\n        <h5>{{ $t('dashboard.empty.title') }}</h5>\n        <p>{{ $t('dashboard.empty.subtitle') }}</p>\n        <q-btn\n          :label=\"$t('dashboard.empty.addWidgets')\"\n          unelevated\n          no-caps\n          class=\"app-btn-primary\"\n          @click=\"showCustomizeDialog = true\"\n        />\n      </div>\n    </div>\n\n    <!-- Customize Dialog -->\n    <BaseDialog\n      v-model=\"showCustomizeDialog\"\n      :title=\"$t('dashboard.customize.title')\"\n      icon=\"tune\"\n      size=\"sm\"\n      @close=\"showCustomizeDialog = false\"\n    >\n      <div class=\"customize-dialog-content\">\n        <p>{{ $t('dashboard.customize.comingSoon') }}</p>\n      </div>\n\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          color=\"primary\"\n          @click=\"showCustomizeDialog = false\"\n        />\n      </template>\n    </BaseDialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { useAuthStore } from 'src/stores/auth';\n  import { supabase } from '@/boot/supabase';\n  import {\n    practiceDashboardService,\n    type PracticeDashboardData,\n    type PracticeWidget as DashboardWidgetType,\n  } from '@/services/dashboard/practice-dashboard';\n  import { roleDashboardConfig } from '@/services/dashboard/role-config';\n  import type { UserRole } from '@/types/permissions';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import DynamicWidget from 'src/components/dashboard/DynamicWidget.vue';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const router = useRouter();\n  const authStore = useAuthStore();\n\n  // State\n  const loading = ref(false);\n  const showCustomizeDialog = ref(false);\n  const dashboardData = ref<PracticeDashboardData | null>(null);\n\n  // Computed properties\n  const userProfile = computed(() => authStore.userProfile);\n  const userRole = computed(\n    () => (userProfile.value?.role || 'assistant') as UserRole\n  );\n  const selectedDemoRole = ref(userRole.value);\n  const isPlatformOwner = computed(() => userRole.value === 'platform_owner');\n\n  // Practice selection for platform owners\n  const practices = ref<Array<{ id: string; name: string }>>([]);\n  const selectedPracticeId = ref<string | null>(authStore.clinicId || null);\n  const loadingPractices = ref(false);\n  const practiceOptions = computed(() => practices.value);\n\n  const dashboardConfig = computed(() =>\n    practiceDashboardService.getRoleConfig(selectedDemoRole.value)\n  );\n\n  const widgets = computed(() => dashboardData.value?.widgets || []);\n  const quickActions = computed(() => dashboardData.value?.quickActions || []);\n  const alerts = computed(() => dashboardData.value?.alerts || []);\n\n  const demoRoleOptions = computed(() =>\n    roleDashboardConfig.getDemoRoleOptions()\n  );\n\n  const selectedRoleIcon = computed(() => {\n    const option = demoRoleOptions.value.find(\n      opt => opt.value === selectedDemoRole.value\n    );\n    return option?.icon || 'person';\n  });\n\n  const selectedRoleLabel = computed(() => {\n    const option = demoRoleOptions.value.find(\n      opt => opt.value === selectedDemoRole.value\n    );\n    return option?.label || selectedDemoRole.value;\n  });\n\n  // Methods\n  function getWidgetGridClass(widget: DashboardWidgetType): string {\n    const baseClass = 'widget-grid-item';\n    const sizeClass = `widget-${widget.size}`;\n    return `${baseClass} ${sizeClass}`;\n  }\n\n  function getAlertIcon(type: string): string {\n    switch (type) {\n      case 'warning':\n        return 'warning';\n      case 'error':\n        return 'error';\n      case 'info':\n        return 'info';\n      case 'success':\n        return 'check_circle';\n      default:\n        return 'info';\n    }\n  }\n\n  async function loadDashboard() {\n    try {\n      loading.value = true;\n      const role = selectedDemoRole.value || userRole.value || 'assistant';\n      const practiceId =\n        selectedPracticeId.value ||\n        authStore.clinicId ||\n        authStore.selectedPractice?.id;\n\n      if (!practiceId) {\n        throw new Error(t('dashboard.errors.practiceIdMissing'));\n      }\n\n      dashboardData.value = await practiceDashboardService.getDashboardData(\n        role as UserRole,\n        practiceId\n      );\n      // Dashboard loaded successfully\n    } catch (error) {\n      console.error('Failed to load dashboard:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('dashboard.errors.loadFailed'),\n        caption: t('dashboard.errors.tryRefresh'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function refreshDashboard() {\n    await loadDashboard();\n    $q.notify({\n      type: 'positive',\n      message: t('dashboard.actions.refreshed'),\n      timeout: 1000,\n    });\n  }\n\n  async function refreshWidget(widgetId: string) {\n    // Refresh specific widget - for now just refresh all data\n    await loadDashboard();\n    $q.notify({\n      type: 'positive',\n      message: t('dashboard.widgetRefreshed', { widget: widgetId }),\n      timeout: 1000,\n    });\n  }\n\n  async function switchDemoRole(newRole: string | any) {\n    // Extract string value if object is passed\n    const roleValue = typeof newRole === 'object' ? newRole.value : newRole;\n\n    // Switching demo role\n\n    if (roleValue === selectedDemoRole.value) {\n      return;\n    }\n\n    selectedDemoRole.value = roleValue;\n\n    // Reload dashboard with new role\n    try {\n      loading.value = true;\n\n      // Clear current data first for visual effect\n      dashboardData.value = null;\n\n      // Small delay for better UX\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Load new dashboard data\n      const practiceId =\n        selectedPracticeId.value ||\n        authStore.clinicId ||\n        authStore.selectedPractice?.id;\n      if (practiceId) {\n        dashboardData.value = await practiceDashboardService.getDashboardData(\n          roleValue as UserRole,\n          practiceId\n        );\n      }\n\n      $q.notify({\n        type: 'positive',\n        message: t('dashboard.roleSwitch.success'),\n        caption: t('dashboard.roleSwitch.caption'),\n        timeout: 2500,\n        icon: 'swap_horiz',\n      });\n    } catch (error) {\n      console.error('Failed to switch demo role:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('dashboard.errors.switchFailed'),\n        caption: t('dashboard.errors.tryAgain'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function loadPracticesForOwner() {\n    if (!isPlatformOwner.value) return;\n    loadingPractices.value = true;\n    try {\n      const { data, error } = await supabase\n        .from('practices')\n        .select('id, name')\n        .order('name');\n      if (error) throw error;\n      practices.value = data || [];\n      if (!selectedPracticeId.value && practices.value.length > 0) {\n        selectedPracticeId.value = practices.value[0]?.id ?? '';\n      }\n    } catch (e) {\n      console.error('Failed to load practices for owner', e);\n    } finally {\n      loadingPractices.value = false;\n    }\n  }\n\n  async function handlePracticeChange() {\n    await loadDashboard();\n  }\n\n  function getDemoRoleLabel(role: string): string {\n    switch (role) {\n      case 'assistant':\n        return t('dashboard.titles.assistant');\n      case 'manager':\n        return t('dashboard.titles.manager');\n      case 'owner':\n        return t('dashboard.titles.owner');\n      default:\n        return t('dashboard.titles.default');\n    }\n  }\n\n  // Watchers\n  watch(\n    userRole,\n    newRole => {\n      // Only update if we haven't manually selected a different role\n      if (selectedDemoRole.value === userRole.value) {\n        selectedDemoRole.value = newRole;\n      }\n    },\n    { immediate: true }\n  );\n\n  // Lifecycle\n  // Get button class based on action type\n  const getActionButtonClass = (type: string) => {\n    const classMap: Record<string, string> = {\n      create: 'app-btn-success',\n      view: 'app-btn-primary',\n      manage: 'app-btn-secondary',\n      analyze: 'app-btn-info',\n      export: 'app-btn-secondary',\n      settings: 'app-btn-secondary',\n      default: 'app-btn-secondary',\n    };\n    return classMap[type] || classMap.default;\n  };\n\n  onMounted(async () => {\n    await loadPracticesForOwner();\n    await loadDashboard();\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .dashboard-container {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n  }\n\n  // Quick Actions Section\n  .quick-actions-section {\n    .quick-actions-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: var(--space-4);\n\n      .quick-action-btn {\n        min-height: 60px;\n        font-weight: var(--font-weight-medium);\n        transition: all 0.2s ease;\n\n        &:hover {\n          transform: translateY(-2px);\n          box-shadow: var(--shadow-md);\n        }\n      }\n    }\n  }\n\n  // Alerts Section\n  .alerts-section {\n    .alert-banner {\n      margin-bottom: var(--space-3);\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n\n      &.banner-warning {\n        background: var(--warning-50);\n        border-color: var(--warning-200);\n      }\n\n      &.banner-error {\n        background: var(--negative-50);\n        border-color: var(--negative-200);\n      }\n\n      &.banner-info {\n        background: var(--info-50);\n        border-color: var(--info-200);\n      }\n    }\n  }\n\n  // Widgets Grid - Verbeterde layout voor consistente uitlijning\n  .widgets-grid {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n    gap: var(--space-4);\n    auto-rows: minmax(200px, auto); // Minimale hoogte voor consistentie\n\n    .widget-grid-item {\n      display: flex;\n      flex-direction: column;\n\n      // Small widgets: 4 kolommen op desktop, 6 op tablet, 12 op mobile\n      &.widget-small {\n        grid-column: span 4;\n\n        @media (max-width: 1200px) {\n          grid-column: span 6;\n        }\n\n        @media (max-width: 768px) {\n          grid-column: span 12;\n        }\n      }\n\n      // Medium widgets: 6 kolommen op desktop, 12 op tablet/mobile\n      &.widget-medium {\n        grid-column: span 6;\n\n        @media (max-width: 1024px) {\n          grid-column: span 12;\n        }\n      }\n\n      // Large widgets: altijd volledige breedte\n      &.widget-large {\n        grid-column: span 12;\n      }\n\n      // Zorg dat alle widgets in een rij dezelfde hoogte hebben\n      > * {\n        flex: 1;\n        min-height: 100%;\n      }\n    }\n\n    // Automatische row heights voor betere uitlijning\n    &::after {\n      content: '';\n      grid-column: 1 / -1;\n      height: 0;\n    }\n  }\n\n  // Empty State\n  .empty-dashboard {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    padding: var(--space-8);\n    margin: var(--space-8) 0;\n\n    h5 {\n      margin: var(--space-4) 0 var(--space-2) 0;\n      color: var(--text-primary);\n      font-weight: var(--font-weight-semibold);\n    }\n\n    p {\n      margin: 0 0 var(--space-6) 0;\n      color: var(--text-muted);\n      max-width: 400px;\n    }\n  }\n\n  // Dark mode\n  body.body--dark {\n    .alerts-section .alert-banner {\n      &.banner-warning {\n        background: var(--warning-900);\n        border-color: var(--warning-700);\n      }\n\n      &.banner-error {\n        background: var(--negative-900);\n        border-color: var(--negative-700);\n      }\n\n      &.banner-info {\n        background: var(--info-900);\n        border-color: var(--info-700);\n      }\n    }\n\n    .empty-dashboard h5 {\n      color: var(--text-primary-dark);\n    }\n  }\n\n  // Mobile optimizations\n  @media (max-width: 768px) {\n    .dashboard-container {\n      gap: var(--space-4);\n    }\n\n    .quick-actions-section .quick-actions-grid {\n      grid-template-columns: 1fr;\n      gap: var(--space-3);\n\n      .quick-action-btn {\n        min-height: 50px;\n        font-size: var(--text-sm);\n      }\n    }\n\n    .widgets-grid {\n      gap: var(--space-4);\n\n      .widget-grid-item {\n        grid-column: span 12;\n      }\n    }\n\n    .empty-dashboard {\n      padding: var(--space-6);\n      margin: var(--space-6) 0;\n    }\n  }\n\n  // Enhanced responsive grid\n  @media (min-width: 1400px) {\n    .widgets-grid {\n      grid-template-columns: repeat(16, 1fr);\n\n      .widget-grid-item {\n        &.widget-small {\n          grid-column: span 4;\n        }\n\n        &.widget-medium {\n          grid-column: span 8;\n        }\n\n        &.widget-large {\n          grid-column: span 16;\n        }\n      }\n    }\n  }\n\n  // Animation for widget loading\n  .widget-grid-item {\n    transition: all 0.3s ease;\n\n    &:hover {\n      transform: translateY(-2px);\n    }\n  }\n\n  // Loading states\n  .q-loading-bar {\n    background: var(--primary);\n  }\n\n  // Enforce consistent width for demo switcher in both light and dark\n  .demo-role-switcher {\n    width: 360px;\n    max-width: 360px;\n    flex: 0 0 360px;\n  }\n\n  body.body--dark .demo-role-switcher {\n    width: 360px;\n    max-width: 360px;\n    flex: 0 0 360px;\n  }\n\n  // Role option styling\n  .role-option-item {\n    transition: all 0.2s ease;\n\n    &:hover {\n      background: var(--neutral-100);\n    }\n\n    .q-item__section--avatar {\n      color: var(--primary);\n    }\n  }\n\n  // Dark mode role option hover\n  body.body--dark {\n    .role-option-item:hover {\n      background: var(--bg-tertiary);\n    }\n  }\n\n  // Dashboard transition animations\n  .dashboard-transition-enter-active,\n  .dashboard-transition-leave-active {\n    transition: all 0.4s ease;\n  }\n\n  .dashboard-transition-enter-from {\n    opacity: 0;\n    transform: translateY(20px) scale(0.95);\n  }\n\n  .dashboard-transition-leave-to {\n    opacity: 0;\n    transform: translateY(-20px) scale(1.05);\n  }\n\n  .dashboard-transition-enter-to,\n  .dashboard-transition-leave-from {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n\n  // Title transition (for future use)\n  .title-transition-enter-active,\n  .title-transition-leave-active {\n    transition: all 0.3s ease;\n  }\n\n  .title-transition-enter-from,\n  .title-transition-leave-to {\n    opacity: 0;\n    transform: translateX(10px);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\ErrorNotFound.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NewDialogsGalleryPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NewStyleGuidePage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NotificationsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrderListDetailPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 451,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 451,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14517, 14520], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14517, 14520], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 454,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 454,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14640, 14643], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14640, 14643], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 456,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 456,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14717, 14720], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14717, 14720], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 490,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 490,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15484, 15487], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15484, 15487], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 499,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 499,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15721, 15724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15721, 15724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 761,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 761,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22625, 22628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22625, 22628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 780,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 780,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23087, 23090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23087, 23090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 785,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 785,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23234, 23237], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23234, 23237], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 795,
        "column": 9,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 795,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [23507, 23508], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 796,
        "column": 12,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 796,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [23539, 23540], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 841,
        "column": 47,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 841,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [24812, 24813], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 864,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 864,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25258, 25261], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25258, 25261], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 871,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 871,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25411, 25414], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25411, 25414], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"order-detail-page\">\n    <!-- Modern Header -->\n    <div class=\"page-header\">\n      <div class=\"header-content\">\n        <div class=\"breadcrumb-nav\">\n          <q-btn\n            flat\n            round\n            icon=\"arrow_back\"\n            class=\"back-btn\"\n            @click=\"router.back()\"\n          />\n          <span class=\"breadcrumb-text\">Bestellijsten</span>\n          <q-icon\n            name=\"chevron_right\"\n            size=\"16px\"\n            class=\"breadcrumb-separator\"\n          />\n          <span class=\"breadcrumb-current\">{{\n            orderList?.name || 'Laden...'\n          }}</span>\n        </div>\n\n        <div class=\"header-main\">\n          <div class=\"title-section\">\n            <div class=\"list-icon-large\">\n              <q-icon\n                :name=\"getListIcon()\"\n                :color=\"getIconColor()\"\n                class=\"icon-size-2xl\"\n              />\n            </div>\n            <div class=\"title-content\">\n              <h1 class=\"page-title\">{{ orderList?.name || 'Bestellijst' }}</h1>\n              <p class=\"page-subtitle\">\n                {{ orderList?.description || 'Details en producten beheren' }}\n              </p>\n              <div class=\"title-meta\">\n                <q-badge\n                  :color=\"statusColor\"\n                  :label=\"statusLabel\"\n                  class=\"status-badge\"\n                />\n                <span class=\"meta-separator\">•</span>\n                <span class=\"meta-text\"\n                  >{{ orderList?.total_items || 0 }} producten</span\n                >\n                <span class=\"meta-separator\">•</span>\n                <span class=\"meta-text\"\n                  >€{{\n                    formatCurrency((orderList as any)?.total_value || 0)\n                  }}</span\n                >\n              </div>\n            </div>\n          </div>\n\n          <div class=\"header-actions\">\n            <q-btn\n              icon=\"add\"\n              :label=\"$t('orderLists.addProduct')\"\n              color=\"primary\"\n              unelevated\n              no-caps\n              class=\"primary-action\"\n              @click=\"addProduct\"\n            />\n            <q-btn\n              icon=\"edit\"\n              outline\n              color=\"primary\"\n              no-caps\n              class=\"secondary-action\"\n              @click=\"editOrderList\"\n            />\n            <q-btn\n              icon=\"shopping_cart_checkout\"\n              color=\"primary\"\n              no-caps\n              class=\"primary-action\"\n              :label=\"$t('orderLists.orderAll')\"\n              @click=\"confirmPlaceAll = true\"\n            />\n            <q-btn flat round icon=\"more_vert\" class=\"menu-btn\">\n              <q-menu>\n                <q-list dense>\n                  <q-item v-close-popup clickable @click=\"duplicateList\">\n                    <q-item-section avatar>\n                      <q-icon name=\"content_copy\" />\n                    </q-item-section>\n                    <q-item-section>{{\n                      $t('common.duplicate')\n                    }}</q-item-section>\n                  </q-item>\n                  <q-item v-close-popup clickable @click=\"exportList\">\n                    <q-item-section avatar>\n                      <q-icon name=\"download\" />\n                    </q-item-section>\n                    <q-item-section>{{ $t('common.export') }}</q-item-section>\n                  </q-item>\n                  <q-separator />\n                  <q-item\n                    v-close-popup\n                    clickable\n                    class=\"text-negative\"\n                    @click=\"deleteList\"\n                  >\n                    <q-item-section avatar>\n                      <q-icon name=\"delete\" />\n                    </q-item-section>\n                    <q-item-section>{{ $t('common.delete') }}</q-item-section>\n                  </q-item>\n                </q-list>\n              </q-menu>\n            </q-btn>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <div v-if=\"loading\" class=\"flex flex-center q-pa-xl\">\n      <q-spinner-gears size=\"xl\" color=\"primary\" />\n    </div>\n\n    <!-- Error State -->\n    <div v-else-if=\"error\" class=\"q-pa-lg\">\n      <q-banner class=\"bg-negative text-white\">\n        <template #avatar>\n          <q-icon name=\"error\" />\n        </template>\n        {{ error }}\n        <template #action>\n          <q-btn flat label=\"Opnieuw proberen\" @click=\"loadOrderList\" />\n        </template>\n      </q-banner>\n    </div>\n\n    <!-- Main Content -->\n    <div v-else-if=\"orderList\" class=\"main-content\">\n      <!-- Filters Section -->\n      <div class=\"filters-section q-mb-md\">\n        <FilterPanel\n          v-model=\"filterValues\"\n          :preset=\"orderListsFilterPreset\"\n          :loading=\"loadingItems\"\n          collapsible\n          class=\"order-list-filter-panel\"\n          @change=\"handleFilterChange\"\n          @reset=\"handleFilterReset\"\n          @clear=\"handleFilterClear\"\n        />\n      </div>\n\n      <!-- Table Header -->\n      <div class=\"table-header q-mb-sm\">\n        <div class=\"row items-center justify-between\">\n          <div class=\"col-auto\">\n            <div class=\"table-info\">\n              <span class=\"table-count\"\n                >{{ filteredOrderListItems.length }} van\n                {{ orderListItems.length }} items</span\n              >\n            </div>\n          </div>\n\n          <div class=\"col-auto\">\n            <q-btn\n              flat\n              round\n              icon=\"refresh\"\n              :loading=\"loadingItems\"\n              color=\"grey-7\"\n              size=\"sm\"\n              @click=\"loadOrderListItems\"\n            >\n              <q-tooltip>Vernieuwen</q-tooltip>\n            </q-btn>\n          </div>\n        </div>\n      </div>\n\n      <!-- Products Table (Direct, not in card container) -->\n      <div v-if=\"loadingItems\" class=\"loading-state\">\n        <q-inner-loading :showing=\"loadingItems\">\n          <q-spinner-gears size=\"50px\" color=\"primary\" />\n        </q-inner-loading>\n      </div>\n\n      <div v-else-if=\"orderListItems.length === 0\" class=\"empty-state\">\n        <div class=\"empty-icon\">\n          <q-icon name=\"inventory_2\" class=\"icon-size-2xl\" color=\"grey-4\" />\n        </div>\n        <h3>Geen producten toegevoegd</h3>\n        <p>Voeg producten toe aan deze bestellijst om te beginnen.</p>\n        <q-btn\n          icon=\"add\"\n          label=\"Eerste product toevoegen\"\n          color=\"primary\"\n          unelevated\n          no-caps\n          @click=\"addProduct\"\n        />\n      </div>\n\n      <div v-else class=\"medical-table\">\n        <SmartTable\n          :data=\"filteredOrderListItems\"\n          :columns=\"orderListTableColumns\"\n          :config=\"smartTableConfig\"\n          row-key=\"id\"\n          :rows-per-page-options=\"[25, 50, 100]\"\n        >\n          <!-- Loading -->\n          <template #loading>\n            <q-inner-loading showing color=\"primary\" />\n          </template>\n\n          <!-- No Data -->\n          <template #no-data>\n            <div class=\"full-width row flex-center q-gutter-sm\">\n              <q-icon class=\"icon-size-xl\" name=\"search_off\" />\n              <span>Geen producten gevonden met de huidige filters</span>\n            </div>\n          </template>\n\n          <!-- Product Name Cell -->\n          <template #body-cell-name=\"props\">\n            <q-td :props=\"props\" class=\"product-name-cell\">\n              <div class=\"product-info\">\n                <div class=\"product-name\">\n                  {{\n                    props.row.product_name ||\n                    props.row.product?.name ||\n                    'Onbekend product'\n                  }}\n                </div>\n                <div class=\"product-sku\">\n                  {{\n                    props.row.product_sku ||\n                    props.row.product?.sku ||\n                    'Geen SKU'\n                  }}\n                </div>\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Quantity Cell with Controls -->\n          <template #body-cell-quantity=\"props\">\n            <q-td :props=\"props\" class=\"quantity-cell\">\n              <div class=\"quantity-controls\">\n                <q-btn\n                  flat\n                  round\n                  dense\n                  icon=\"remove\"\n                  :disable=\"props.row.suggested_quantity <= 0\"\n                  class=\"quantity-btn\"\n                  @click=\"decrementQuantity(props.row)\"\n                />\n                <q-input\n                  v-model.number=\"props.row.suggested_quantity\"\n                  type=\"number\"\n                  min=\"0\"\n                  dense\n                  outlined\n                  class=\"quantity-input\"\n                  style=\"width: 80px\"\n                  @update:model-value=\"updateItemQuantity(props.row)\"\n                />\n                <q-btn\n                  flat\n                  round\n                  dense\n                  icon=\"add\"\n                  class=\"quantity-btn\"\n                  @click=\"incrementQuantity(props.row)\"\n                />\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Unit Price Cell -->\n          <template #body-cell-unit_price=\"props\">\n            <q-td :props=\"props\" class=\"price-cell\">\n              €{{ (props.row.unit_price || 0).toFixed(2) }}\n            </q-td>\n          </template>\n\n          <!-- Total Price Cell -->\n          <template #body-cell-total_price=\"props\">\n            <q-td :props=\"props\" class=\"total-price-cell\">\n              <strong\n                >€{{\n                  (\n                    (props.row.suggested_quantity || 0) *\n                    (props.row.unit_price || 0)\n                  ).toFixed(2)\n                }}</strong\n              >\n            </q-td>\n          </template>\n\n          <!-- Supplier Cell -->\n          <template #body-cell-supplier=\"props\">\n            <q-td :props=\"props\" class=\"supplier-cell\">\n              {{ props.row.supplier_product?.supplier?.name || 'Onbekend' }}\n            </q-td>\n          </template>\n\n          <!-- Actions Cell -->\n          <template #body-cell-actions=\"props\">\n            <q-td :props=\"props\" class=\"actions-cell\">\n              <div class=\"row q-gutter-xs\">\n                <q-btn\n                  flat\n                  round\n                  dense\n                  icon=\"edit\"\n                  color=\"primary\"\n                  @click=\"editItem(props.row)\"\n                >\n                  <q-tooltip>Bewerken</q-tooltip>\n                </q-btn>\n                <q-btn\n                  flat\n                  round\n                  dense\n                  icon=\"delete\"\n                  color=\"negative\"\n                  @click=\"removeItem(props.row)\"\n                >\n                  <q-tooltip>Verwijderen</q-tooltip>\n                </q-btn>\n              </div>\n            </q-td>\n          </template>\n        </SmartTable>\n      </div>\n    </div>\n\n    <!-- Add Product Dialog -->\n    <FormDialog\n      v-model=\"showAddProductDialog\"\n      :title=\"$t('orderLists.addProduct')\"\n      :subtitle=\"$t('orderLists.addProductSubtitle')\"\n      icon=\"add_shopping_cart\"\n      size=\"md\"\n      :loading=\"addingProduct\"\n      :can-submit=\"!!(selectedProduct && newItemQuantity)\"\n      :submit-button-text=\"$t('common.add')\"\n      @submit=\"confirmAddProduct\"\n      @cancel=\"showAddProductDialog = false\"\n    >\n      <div class=\"q-gutter-md\">\n        <q-select\n          v-model=\"selectedProduct\"\n          :options=\"filteredProducts\"\n          option-label=\"name\"\n          option-value=\"id\"\n          :label=\"$t('products.search')\"\n          outlined\n          use-input\n          clearable\n          :loading=\"loadingProducts\"\n          @filter=\"filterProducts\"\n        >\n          <template #option=\"scope\">\n            <q-item v-bind=\"scope.itemProps\">\n              <q-item-section avatar>\n                <q-avatar size=\"sm\">\n                  <q-icon name=\"inventory\" />\n                </q-avatar>\n              </q-item-section>\n              <q-item-section>\n                <q-item-label>{{ scope.opt.name }}</q-item-label>\n                <q-item-label caption>{{ scope.opt.sku }}</q-item-label>\n              </q-item-section>\n            </q-item>\n          </template>\n        </q-select>\n\n        <q-input\n          v-model.number=\"newItemQuantity\"\n          :label=\"$t('orderLists.recommendedQty')\"\n          type=\"number\"\n          min=\"1\"\n          outlined\n        />\n      </div>\n    </FormDialog>\n\n    <!-- Confirm place all dialog -->\n    <q-dialog v-model=\"confirmPlaceAll\">\n      <q-card>\n        <q-card-section class=\"text-h6\">\n          {{ $t('orderLists.confirmPlaceAllTitle') }}\n        </q-card-section>\n        <q-card-section>\n          {{ $t('orderLists.confirmPlaceAllBody') }}\n        </q-card-section>\n        <q-card-actions align=\"right\">\n          <q-btn v-close-popup flat :label=\"$t('common.cancel')\" />\n          <q-btn\n            color=\"primary\"\n            :label=\"$t('orderLists.orderAll')\"\n            @click=\"orderAll()\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useRoute, useRouter } from 'vue-router';\n  import { useQuasar } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import { useOrderListsStore } from '@/stores/orderLists';\n  import { useProductsStore } from '@/stores/products';\n  import { useAuthStore } from '@/stores/auth';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import SmartTable from '@/components/tables/SmartTable.vue';\n  import FilterPanel from '@/components/filters/FilterPanel.vue';\n  import type { OrderListWithItems } from '@/types/stores';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n  import { orderListsFilterPreset } from '@/presets/filters/orderLists';\n\n  const route = useRoute();\n  const router = useRouter();\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const orderListsStore = useOrderListsStore();\n  const productsStore = useProductsStore();\n\n  // State\n  const loading = ref(true);\n  const loadingItems = ref(false);\n  const loadingProducts = ref(false);\n  const addingProduct = ref(false);\n  const processingGlobalOrder = ref(false);\n  const error = ref<string | null>(null);\n  const orderList = ref<OrderListWithItems | null>(null);\n  const orderListItems = ref<any[]>([]);\n  const showAddProductDialog = ref(false);\n  const confirmPlaceAll = ref(false);\n  const selectedProduct = ref<any>(null);\n  const newItemQuantity = ref(1);\n  const filteredProducts = ref<any[]>([]);\n\n  // Filter state\n  const filterValues = ref<FilterValues>({});\n\n  // Table columns for order list items\n  const orderListTableColumns = computed(() => [\n    {\n      name: 'name',\n      label: 'Product',\n      field: 'product_name',\n      align: 'left' as const,\n      sortable: true,\n      style: 'width: 250px',\n    },\n    {\n      name: 'quantity',\n      label: 'Hoeveelheid',\n      field: 'suggested_quantity',\n      align: 'center' as const,\n      sortable: true,\n      style: 'width: 150px',\n    },\n    {\n      name: 'unit_price',\n      label: 'Prijs/stuk',\n      field: 'unit_price',\n      align: 'right' as const,\n      sortable: true,\n      style: 'width: 120px',\n    },\n    {\n      name: 'total_price',\n      label: 'Totaal',\n      field: (row: any) =>\n        (row.suggested_quantity || 0) * (row.unit_price || 0),\n      align: 'right' as const,\n      sortable: true,\n      style: 'width: 120px',\n    },\n    {\n      name: 'supplier',\n      label: 'Leverancier',\n      field: (row: any) => row.supplier_product?.supplier?.name || 'Onbekend',\n      align: 'left' as const,\n      sortable: true,\n      style: 'width: 150px',\n    },\n    {\n      name: 'actions',\n      label: 'Acties',\n      field: 'actions',\n      align: 'center' as const,\n      sortable: false,\n      style: 'width: 120px',\n    },\n  ]);\n\n  // Smart table configuration\n  const smartTableConfig = computed(() => ({\n    enableVirtualization: orderListItems.value.length > 100,\n    clientSideThreshold: 50,\n    serverSideThreshold: 200,\n  }));\n\n  // Computed\n  const statusColor = computed(() => {\n    if (!orderList.value) {\n      return 'grey';\n    }\n    const status = orderList.value.status;\n    // Map status to colors\n    if (status === 'active') return 'positive';\n    if (status === 'draft') return 'warning';\n    if (status === 'submitted') return 'info';\n    if (status === 'completed') return 'primary';\n    if (status === 'cancelled') return 'negative';\n    return 'grey';\n  });\n\n  const statusLabel = computed(() => {\n    if (!orderList.value) {\n      return 'Onbekend';\n    }\n    const status = orderList.value.status;\n    // Map status to labels\n    if (status === 'active') return 'Klaar';\n    if (status === 'draft') return 'Concept';\n    if (status === 'submitted') return 'Verzonden';\n    if (status === 'completed') return 'Geleverd';\n    if (status === 'cancelled') return 'Geannuleerd';\n    return 'Onbekend';\n  });\n\n  // Filter computed properties\n  const filteredOrderListItems = computed(() => {\n    let filtered = [...orderListItems.value];\n\n    // Text search\n    if (\n      filterValues.value.search &&\n      typeof filterValues.value.search === 'string'\n    ) {\n      const search = filterValues.value.search.toLowerCase();\n      filtered = filtered.filter(\n        item =>\n          (item.product_name || item.product?.name || '')\n            .toLowerCase()\n            .includes(search) ||\n          (item.product_sku || item.product?.sku || '')\n            .toLowerCase()\n            .includes(search)\n      );\n    }\n\n    // Supplier filter\n    if (filterValues.value.supplier) {\n      filtered = filtered.filter(\n        item =>\n          item.supplier_product?.supplier?.id === filterValues.value.supplier\n      );\n    }\n\n    return filtered;\n  });\n\n  // Filter handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    if (\n      event.value &&\n      typeof event.value === 'object' &&\n      !Array.isArray(event.value) &&\n      !(event.value instanceof Date)\n    ) {\n      filterValues.value = {\n        ...filterValues.value,\n        ...(event.value as FilterValues),\n      };\n    }\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    filterValues.value = {};\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Methods\n  const loadOrderList = async () => {\n    loading.value = true;\n    error.value = null;\n\n    try {\n      const listId = route.params.id as string;\n      orderList.value =\n        (await orderListsStore.getOrderListById(listId)) ?? null;\n      await loadOrderListItems();\n    } catch (err) {\n      error.value = 'Kon bestellijst niet laden';\n      console.error('Error loading order list:', err);\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const loadOrderListItems = async () => {\n    if (!orderList.value) {\n      return;\n    }\n\n    loadingItems.value = true;\n    try {\n      // For now, we'll use the items from the orderList object\n      // In the future, we can create a dedicated method for this\n      orderListItems.value = orderList.value.items || [];\n    } catch (err) {\n      $q.notify({\n        type: 'negative',\n        message: 'Kon producten niet laden',\n      });\n    } finally {\n      loadingItems.value = false;\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString('nl-NL', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const formatCurrency = (amount: number | string) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return num.toFixed(2);\n  };\n\n  const getStockColor = (current: number, minimum: number) => {\n    if (current === 0) {\n      return 'negative';\n    }\n    if (current <= minimum) {\n      return 'warning';\n    }\n    return 'positive';\n  };\n\n  const editOrderList = () => {\n    $q.notify({\n      type: 'info',\n      message: 'Bewerken functionaliteit komt binnenkort',\n    });\n  };\n\n  const addProduct = () => {\n    showAddProductDialog.value = true;\n    loadProducts();\n  };\n\n  const loadProducts = async () => {\n    loadingProducts.value = true;\n    try {\n      const authStore = useAuthStore();\n      if (authStore.clinicId) {\n        await productsStore.fetchProducts(authStore.clinicId);\n      }\n      filteredProducts.value = productsStore.products.slice(0, 20); // Limit initial results\n    } catch (err) {\n      $q.notify({\n        type: 'negative',\n        message: 'Kon producten niet laden',\n      });\n    } finally {\n      loadingProducts.value = false;\n    }\n  };\n\n  const filterProducts = (\n    val: string,\n    update: (callback: () => void) => void\n  ) => {\n    update(() => {\n      if (val === '') {\n        filteredProducts.value = productsStore.products.slice(0, 20);\n      } else {\n        const needle = val.toLowerCase();\n        filteredProducts.value = productsStore.products\n          .filter(\n            product =>\n              product.name.toLowerCase().includes(needle) ||\n              product.sku?.toLowerCase().includes(needle)\n          )\n          .slice(0, 20);\n      }\n    });\n  };\n\n  const confirmAddProduct = async () => {\n    if (!selectedProduct.value || !orderList.value) {\n      return;\n    }\n\n    addingProduct.value = true;\n    try {\n      // Find the first supplier product for this product\n      const supplierProduct = selectedProduct.value.supplier_products?.[0];\n      if (!supplierProduct) {\n        throw new Error('Geen leverancier gevonden voor dit product');\n      }\n\n      await orderListsStore.addOrderListItem({\n        order_list_id: orderList.value.id,\n        product_id: selectedProduct.value.id,\n        supplier_product_id: supplierProduct.id,\n        requested_quantity: newItemQuantity.value,\n        notes: '',\n      });\n\n      $q.notify({\n        type: 'positive',\n        message: 'Product toegevoegd aan bestellijst',\n      });\n\n      showAddProductDialog.value = false;\n      selectedProduct.value = null;\n      newItemQuantity.value = 1;\n\n      // Reload the order list to get updated items\n      await loadOrderList();\n    } catch (err) {\n      $q.notify({\n        type: 'negative',\n        message: 'Kon product niet toevoegen',\n        caption: err instanceof Error ? err.message : 'Onbekende fout',\n      });\n    } finally {\n      addingProduct.value = false;\n    }\n  };\n\n  const updateItemQuantity = async (item: any) => {\n    try {\n      await orderListsStore.updateOrderListItem(item.id, {\n        requested_quantity: item.suggested_quantity || item.requested_quantity,\n      });\n\n      $q.notify({\n        type: 'positive',\n        message: 'Hoeveelheid bijgewerkt',\n        timeout: 1000,\n      });\n    } catch (err) {\n      $q.notify({\n        type: 'negative',\n        message: 'Kon hoeveelheid niet bijwerken',\n      });\n    }\n  };\n\n  const incrementQuantity = (item: any) => {\n    item.suggested_quantity = (item.suggested_quantity || 0) + 1;\n    updateItemQuantity(item);\n  };\n\n  const decrementQuantity = (item: any) => {\n    if (item.suggested_quantity > 0) {\n      item.suggested_quantity = item.suggested_quantity - 1;\n      updateItemQuantity(item);\n    }\n  };\n\n  const duplicateList = async () => {\n    try {\n      await orderListsStore.duplicateOrderList(\n        orderList.value!.id,\n        `${orderList.value!.name} (kopie)`\n      );\n      $q.notify({\n        type: 'positive',\n        message: 'Bestellijst gedupliceerd',\n      });\n    } catch (err) {\n      $q.notify({\n        type: 'negative',\n        message: 'Kon lijst niet dupliceren',\n      });\n    }\n  };\n\n  const orderAll = async () => {\n    try {\n      confirmPlaceAll.value = false;\n      processingGlobalOrder.value = true;\n      // Delegate to min/max orchestration if available\n      if (orderListsStore.applyOrderSuggestions && orderList.value) {\n        await orderListsStore.applyOrderSuggestions();\n      }\n      $q.notify({ type: 'positive', message: t('orderLists.ordersCreated') });\n    } catch (err) {\n      $q.notify({ type: 'negative', message: t('orderLists.processingError') });\n    } finally {\n      processingGlobalOrder.value = false;\n    }\n  };\n\n  const exportList = () => {\n    $q.notify({\n      type: 'info',\n      message: 'Export functionaliteit komt binnenkort',\n    });\n  };\n\n  const deleteList = async () => {\n    $q.dialog({\n      title: 'Bestellijst verwijderen',\n      message: `Weet je zeker dat je \"${orderList.value?.name}\" wilt verwijderen?`,\n      cancel: true,\n      persistent: true,\n    }).onOk(async () => {\n      try {\n        await orderListsStore.deleteOrderList(orderList.value!.id);\n        $q.notify({\n          type: 'positive',\n          message: 'Bestellijst verwijderd',\n        });\n        router.push('/order-lists');\n      } catch (err) {\n        $q.notify({\n          type: 'negative',\n          message: 'Kon lijst niet verwijderen',\n        });\n      }\n    });\n  };\n\n  const getListIcon = () => {\n    return 'list_alt';\n  };\n\n  const getIconColor = () => {\n    return 'primary';\n  };\n\n  const editItem = (item: any) => {\n    $q.notify({\n      type: 'info',\n      message: 'Bewerken functionaliteit komt binnenkort',\n    });\n  };\n\n  const removeItem = async (item: any) => {\n    $q.dialog({\n      title: 'Product verwijderen',\n      message: `Weet je zeker dat je \"${\n        item.product_name || item.product?.name\n      }\" wilt verwijderen?`,\n      cancel: true,\n      persistent: true,\n    }).onOk(async () => {\n      try {\n        await orderListsStore.removeOrderListItem(item.id);\n\n        $q.notify({\n          type: 'positive',\n          message: 'Product verwijderd',\n        });\n\n        // Reload the order list to get updated items\n        await loadOrderList();\n      } catch (err) {\n        $q.notify({\n          type: 'negative',\n          message: 'Kon product niet verwijderen',\n          caption: err instanceof Error ? err.message : 'Onbekende fout',\n        });\n      }\n    });\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    loadOrderList();\n  });\n</script>\n\n<style scoped>\n  /* Table Header Styling */\n  .table-header {\n    padding: 0;\n  }\n\n  .table-info {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .table-count {\n    font-size: 13px;\n    color: var(--text-secondary);\n    font-weight: 500;\n  }\n\n  /* Compact margins for better spacing */\n  .filters-section {\n    margin-bottom: 16px;\n  }\n\n  .table-header {\n    margin-bottom: 8px;\n  }\n\n  /* Ensure medical-table styling is applied */\n  .medical-table {\n    margin-top: 0;\n  }\n  /* Order list detail page styles */\n  .order-detail-page {\n    min-height: 100vh;\n    background: linear-gradient(\n      135deg,\n      var(--neutral-50) 0%,\n      var(--neutral-200) 100%\n    );\n  }\n\n  /* Page Header */\n  .page-header {\n    background: var(--bg-secondary);\n    border-bottom: 1px solid var(--border-primary);\n    box-shadow: var(--shadow-sm);\n  }\n\n  .header-content {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 24px 32px;\n  }\n\n  .breadcrumb-nav {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    margin-bottom: 16px;\n  }\n\n  .back-btn {\n    color: var(--text-secondary);\n    width: 36px;\n    height: 36px;\n  }\n\n  .back-btn:hover {\n    background: var(--hover-bg);\n  }\n\n  .breadcrumb-text {\n    font-size: 14px;\n    color: var(--text-secondary);\n  }\n\n  .breadcrumb-separator {\n    color: var(--neutral-300);\n  }\n\n  .breadcrumb-current {\n    font-size: 14px;\n    color: var(--text-primary);\n    font-weight: 500;\n  }\n\n  .header-main {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 24px;\n  }\n\n  .title-section {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n    flex: 1;\n  }\n\n  .list-icon-large {\n    width: 64px;\n    height: 64px;\n    border-radius: 16px;\n    background: linear-gradient(\n      135deg,\n      rgba(30, 58, 138, 0.08),\n      rgba(30, 58, 138, 0.16)\n    );\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .title-content {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .page-title {\n    font-size: 28px;\n    font-weight: 700;\n    color: var(--text-primary);\n    margin: 0 0 8px 0;\n    line-height: 1.2;\n  }\n\n  .page-subtitle {\n    font-size: 16px;\n    color: var(--text-secondary);\n    margin: 0 0 12px 0;\n    line-height: 1.4;\n  }\n\n  .title-meta {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    flex-wrap: wrap;\n  }\n\n  .status-badge {\n    font-size: 12px;\n    font-weight: 500;\n    padding: 6px 12px;\n    border-radius: 8px;\n  }\n\n  .meta-separator {\n    color: var(--neutral-300);\n    font-weight: 500;\n  }\n\n  .meta-text {\n    font-size: 14px;\n    color: var(--text-secondary);\n    font-weight: 500;\n  }\n\n  .header-actions {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n  }\n\n  .primary-action {\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px 20px;\n    border-radius: 8px;\n  }\n\n  .secondary-action {\n    font-size: 14px;\n    font-weight: 500;\n    padding: 10px 16px;\n    border-radius: 8px;\n  }\n\n  .menu-btn {\n    width: 40px;\n    height: 40px;\n    color: var(--text-secondary);\n  }\n\n  .menu-btn:hover {\n    background: var(--hover-bg);\n  }\n\n  /* Main Content */\n  .main-content {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 32px;\n  }\n\n  /* Stats Bar */\n  .stats-bar {\n    margin-bottom: 32px;\n  }\n\n  .stats-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 20px;\n  }\n\n  .stat-card {\n    background: var(--bg-secondary);\n    border-radius: var(--radius-lg);\n    padding: 20px;\n    box-shadow: var(--shadow-sm);\n    border: 1px solid var(--border-primary);\n    transition:\n      transform 0.2s ease,\n      box-shadow 0.2s ease;\n    display: flex;\n    align-items: center;\n    gap: 16px;\n  }\n\n  .stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-md);\n  }\n\n  .stat-icon {\n    width: 48px;\n    height: 48px;\n    border-radius: var(--radius-lg);\n    background: var(--hover-bg);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .stat-content {\n    flex: 1;\n  }\n\n  .stat-value {\n    font-size: 20px;\n    font-weight: 700;\n    color: var(--text-primary);\n    line-height: 1.2;\n    margin-bottom: 4px;\n  }\n\n  .stat-label {\n    font-size: 13px;\n    color: var(--text-secondary);\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n\n  /* Products Section */\n  .products-section {\n    background: var(--bg-secondary);\n    border-radius: var(--radius-xl);\n    box-shadow: var(--shadow-sm);\n    border: 1px solid var(--border-primary);\n    overflow: hidden;\n  }\n\n  .section-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 24px 32px;\n    border-bottom: 1px solid var(--border-primary);\n    background: linear-gradient(\n      135deg,\n      var(--neutral-50) 0%,\n      rgba(248, 250, 252, 0.5) 100%\n    );\n  }\n\n  .section-title {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n  }\n\n  .section-title h2 {\n    font-size: 20px;\n    font-weight: 600;\n    color: var(--text-primary);\n    margin: 0;\n  }\n\n  .item-count {\n    background: var(--hover-bg);\n    color: var(--brand-primary-light);\n    padding: 4px 8px;\n    border-radius: 6px;\n    font-size: 12px;\n    font-weight: 500;\n  }\n\n  .section-actions {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n  }\n\n  .refresh-btn {\n    color: var(--text-secondary);\n    width: 36px;\n    height: 36px;\n  }\n\n  .refresh-btn:hover {\n    background: var(--hover-bg);\n  }\n\n  /* Products Table Container */\n  .products-table-container {\n    position: relative;\n    min-height: 200px;\n  }\n\n  .loading-state {\n    height: 200px;\n    position: relative;\n  }\n\n  .empty-state {\n    text-align: center;\n    padding: 64px 32px;\n  }\n\n  .empty-icon {\n    margin-bottom: 16px;\n  }\n\n  .empty-state h3 {\n    font-size: 18px;\n    font-weight: 600;\n    color: var(--text-primary);\n    margin: 0 0 8px 0;\n  }\n\n  .empty-state p {\n    font-size: 14px;\n    color: var(--text-secondary);\n    margin: 0 0 24px 0;\n  }\n\n  /* Products Grid */\n  .products-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\n    gap: 24px;\n    padding: 24px 32px 32px;\n  }\n\n  .product-card {\n    background: var(--neutral-50);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-lg);\n    transition:\n      transform 0.2s ease,\n      box-shadow 0.2s ease;\n    overflow: hidden;\n  }\n\n  .product-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-md);\n  }\n\n  .product-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 16px 20px;\n    background: var(--bg-secondary);\n    border-bottom: 1px solid var(--border-primary);\n  }\n\n  .product-info {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    flex: 1;\n    min-width: 0;\n  }\n\n  .product-icon {\n    width: 36px;\n    height: 36px;\n    border-radius: var(--radius-md);\n    background: var(--hover-bg);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .product-details {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .product-name {\n    font-size: 14px;\n    font-weight: 600;\n    color: var(--text-primary);\n    margin: 0 0 4px 0;\n    line-height: 1.3;\n    word-break: break-word;\n  }\n\n  .product-sku {\n    font-size: 12px;\n    color: var(--text-secondary);\n    margin: 0;\n    font-family: var(--font-family-mono);\n  }\n\n  .product-menu {\n    width: 32px;\n    height: 32px;\n    color: var(--text-secondary);\n  }\n\n  .product-menu:hover {\n    background: var(--hover-bg);\n  }\n\n  .product-content {\n    padding: 20px;\n  }\n\n  .quantity-section {\n    margin-bottom: 20px;\n  }\n\n  .quantity-label {\n    display: block;\n    font-size: 13px;\n    font-weight: 500;\n    color: var(--text-primary);\n    margin-bottom: 8px;\n  }\n\n  .quantity-controls {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  .quantity-btn {\n    width: 32px;\n    height: 32px;\n    color: var(--text-secondary);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-sm);\n  }\n\n  .quantity-btn:hover {\n    background: var(--hover-bg);\n    border-color: var(--hover-border);\n  }\n\n  .quantity-input {\n    width: 80px;\n  }\n\n  .quantity-input input {\n    text-align: center;\n    font-weight: 600;\n  }\n\n  .product-meta {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .meta-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .meta-label {\n    font-size: 13px;\n    color: var(--text-secondary);\n    font-weight: 500;\n  }\n\n  .meta-value {\n    font-size: 13px;\n    color: var(--text-primary);\n    font-weight: 600;\n  }\n\n  .total-price {\n    color: var(--brand-success-light);\n    font-size: 14px;\n  }\n\n  /* Responsive Design */\n  @media (max-width: 768px) {\n    .header-content {\n      padding: 16px 20px;\n    }\n\n    .header-main {\n      flex-direction: column;\n      align-items: flex-start;\n      gap: 16px;\n    }\n\n    .title-section {\n      width: 100%;\n    }\n\n    .header-actions {\n      width: 100%;\n      justify-content: flex-start;\n    }\n\n    .main-content {\n      padding: 20px 16px;\n    }\n\n    .stats-container {\n      grid-template-columns: 1fr;\n      gap: 16px;\n    }\n\n    .section-header {\n      flex-direction: column;\n      align-items: flex-start;\n      gap: 16px;\n      padding: 20px;\n    }\n\n    .section-actions {\n      width: 100%;\n      justify-content: space-between;\n    }\n\n    .products-grid {\n      grid-template-columns: 1fr;\n      gap: 16px;\n      padding: 20px;\n    }\n\n    .product-card {\n      margin: 0;\n    }\n\n    .quantity-controls {\n      justify-content: center;\n    }\n  }\n\n  /* Dark Mode Support */\n  .body--dark .order-detail-page {\n    background: var(--bg-primary);\n  }\n\n  .body--dark .page-header {\n    background: var(--bg-secondary);\n    border-bottom-color: var(--border-primary);\n  }\n\n  .body--dark .page-title {\n    color: var(--text-primary);\n  }\n\n  .body--dark .page-subtitle {\n    color: var(--text-secondary);\n  }\n\n  .body--dark .stat-card,\n  .body--dark .products-section {\n    background: var(--bg-secondary);\n    border-color: var(--border-primary);\n  }\n\n  .body--dark .product-card {\n    background: var(--bg-secondary);\n  }\n\n  .body--dark .product-header {\n    background: var(--bg-secondary);\n    border-bottom-color: var(--border-primary);\n  }\n\n  .body--dark .product-name {\n    color: var(--text-primary);\n  }\n\n  .body--dark .meta-value {\n    color: var(--text-primary);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrderListsPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 431,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 431,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13839, 13842], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13839, 13842], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 432,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 432,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13894, 13897], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13894, 13897], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 438,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 438,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14045, 14048], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14045, 14048], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 503,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 503,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15516, 15519], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15516, 15519], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 566,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 566,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17443, 17446], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17443, 17446], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 569,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 569,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17544, 17547], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17544, 17547], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Bestellijsten\"\n      subtitle=\"Beheer en automatiseer je bestellijsten met min/max levels\"\n      icon=\"list_alt\"\n    >\n      <template #actions>\n        <q-btn\n          color=\"primary\"\n          icon=\"add\"\n          label=\"Nieuwe lijst\"\n          class=\"app-btn-primary q-mr-sm\"\n          unelevated\n          no-caps\n          @click=\"showCreateDialog = true\"\n        />\n        <q-btn\n          color=\"secondary\"\n          icon=\"smartphone\"\n          label=\"Mobiel tellen\"\n          class=\"app-btn-secondary\"\n          outline\n          no-caps\n          @click=\"openMobileCountingInterface\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Global Reorder Advice Banner -->\n    <div v-if=\"globalOrderAdvice && hasUrgentItems\" class=\"q-mb-lg\">\n      <q-banner class=\"bg-warning text-dark rounded-borders\">\n        <template #avatar>\n          <q-icon name=\"warning\" size=\"32px\" />\n        </template>\n        <div class=\"text-weight-medium\">\n          {{ criticalItemsCount }} kritieke items hebben voorraad nodig!\n        </div>\n        <div class=\"text-caption\">\n          Totaal geschatte kosten: €{{\n            globalOrderAdvice.total_estimated_cost.toFixed(2)\n          }}\n        </div>\n        <template #action>\n          <q-btn\n            flat\n            label=\"Alles bestellen\"\n            :loading=\"processingGlobalOrder\"\n            class=\"app-btn-warning text-dark\"\n            no-caps\n            @click=\"orderAllUrgentItems\"\n          />\n          <q-btn\n            flat\n            label=\"Details\"\n            class=\"app-btn-secondary text-dark\"\n            no-caps\n            @click=\"showGlobalAdviceDialog = true\"\n          />\n        </template>\n      </q-banner>\n    </div>\n\n    <!-- Dashboard Cards -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Lists Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Totaal lijsten\" icon=\"list_alt\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">{{ totalLists }}</div>\n            <div class=\"kpi-subtitle\">Bestellijsten</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Items to Order Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          title=\"Te bestellen\"\n          icon=\"shopping_cart\"\n          :icon-color=\"itemsNeedingOrder > 0 ? 'warning' : 'positive'\"\n          :highlight=\"itemsNeedingOrder > 0\"\n        >\n          <div class=\"kpi-content\">\n            <div\n              class=\"kpi-value\"\n              :class=\"itemsNeedingOrder > 0 ? 'text-warning' : 'text-positive'\"\n            >\n              {{ itemsNeedingOrder }}\n            </div>\n            <div class=\"kpi-subtitle\">Items</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Auto-reorder Lists Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Automatisch\" icon=\"schedule\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">{{ autoReorderLists }}</div>\n            <div class=\"kpi-subtitle\">Auto-lijsten</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Value Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Geschatte waarde\" icon=\"euro\" icon-color=\"positive\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              €{{ totalEstimatedValue.toFixed(0) }}\n            </div>\n            <div class=\"kpi-subtitle\">Totale waarde</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Filters -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        v-model=\"filterValues\"\n        :preset=\"orderListsFilterPreset\"\n        :loading=\"loading\"\n        collapsible\n        class=\"order-lists-filter-panel\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n      />\n    </div>\n\n    <!-- Order Lists Display -->\n    <div v-if=\"viewMode === 'cards'\" class=\"row order-lists-grid\">\n      <div\n        v-for=\"orderList in filteredOrderLists\"\n        :key=\"orderList.id\"\n        class=\"col-12 col-sm-6 col-md-4 order-list-col\"\n      >\n        <SimpleOrderListCard\n          :order-list=\"orderList as any\"\n          :reorder-advice=\"getOrderAdviceForList(orderList.id)\"\n        />\n      </div>\n    </div>\n\n    <!-- Table View -->\n    <div v-else class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"filteredOrderLists\"\n        :columns=\"tableColumns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"order-lists-table\"\n      >\n        <template #body-cell-name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"text-weight-medium\">{{ props.row.name }}</div>\n            <div class=\"text-caption text-grey-6\">\n              {{ props.row.description }}\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-badge\n              :color=\"getStatusColor(props.row.status)\"\n              :label=\"getStatusLabel(props.row.status)\"\n            />\n          </q-td>\n        </template>\n\n        <template #body-cell-urgency=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row q-gutter-xs\">\n              <q-chip\n                v-if=\"getUrgencyStats(props.row.id).critical > 0\"\n                size=\"sm\"\n                color=\"negative\"\n                text-color=\"white\"\n                :label=\"getUrgencyStats(props.row.id).critical\"\n                icon=\"error\"\n              />\n              <q-chip\n                v-if=\"getUrgencyStats(props.row.id).high > 0\"\n                size=\"sm\"\n                color=\"warning\"\n                text-color=\"dark\"\n                :label=\"getUrgencyStats(props.row.id).high\"\n                icon=\"warning\"\n              />\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"open_in_new\"\n              class=\"q-mr-sm\"\n              @click=\"viewOrderList(props.row)\"\n            >\n              <q-tooltip>Openen</q-tooltip>\n            </q-btn>\n            <q-btn flat round dense icon=\"more_vert\">\n              <q-menu>\n                <q-list dense>\n                  <q-item clickable @click=\"editOrderList(props.row)\">\n                    <q-item-section>Bewerken</q-item-section>\n                  </q-item>\n                  <q-item clickable @click=\"duplicateOrderList(props.row)\">\n                    <q-item-section>Dupliceren</q-item-section>\n                  </q-item>\n                  <q-separator />\n                  <q-item\n                    clickable\n                    class=\"text-negative\"\n                    @click=\"deleteOrderList(props.row)\"\n                  >\n                    <q-item-section>Verwijderen</q-item-section>\n                  </q-item>\n                </q-list>\n              </q-menu>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Empty State -->\n    <div v-if=\"filteredOrderLists.length === 0\" class=\"text-center q-py-xl\">\n      <q-icon name=\"list_alt\" size=\"64px\" class=\"text-grey-4\" />\n      <div class=\"text-h6 q-mt-md text-grey-6\">\n        {{\n          hasActiveFilters\n            ? $t('orderLists.emptyFiltered')\n            : $t('orderLists.empty')\n        }}\n      </div>\n      <div class=\"text-body2 q-mt-sm text-grey-5\">\n        {{\n          hasActiveFilters\n            ? $t('orderLists.tryOtherFilters')\n            : $t('orderLists.createFirstList')\n        }}\n      </div>\n      <q-btn\n        v-if=\"!hasActiveFilters\"\n        color=\"primary\"\n        :label=\"$t('orderLists.newList')\"\n        class=\"q-mt-md\"\n        @click=\"showCreateDialog = true\"\n      />\n    </div>\n\n    <!-- Global Advice Dialog -->\n    <BaseDialog\n      v-model=\"showGlobalAdviceDialog\"\n      :title=\"$t('orderLists.globalAdvice')\"\n      icon=\"lightbulb\"\n      size=\"md\"\n    >\n      <div v-if=\"globalOrderAdvice\">\n        <div class=\"row q-gutter-md q-mb-md\">\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-negative\">\n              {{ globalOrderAdvice.items_by_urgency.critical.length }}\n            </div>\n            <div class=\"text-caption\">Kritiek</div>\n          </div>\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-warning\">\n              {{ globalOrderAdvice.items_by_urgency.high.length }}\n            </div>\n            <div class=\"text-caption\">Hoog</div>\n          </div>\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-primary\">\n              {{ globalOrderAdvice.items_by_urgency.normal.length }}\n            </div>\n            <div class=\"text-caption\">Normaal</div>\n          </div>\n        </div>\n\n        <div class=\"q-mb-md\">\n          <div class=\"text-subtitle2 q-mb-xs\">Leveranciers betrokken:</div>\n          <div class=\"row q-gutter-xs\">\n            <q-chip\n              v-for=\"supplier in globalOrderAdvice.suppliers_involved\"\n              :key=\"supplier\"\n              color=\"primary\"\n              text-color=\"white\"\n              :label=\"supplier\"\n              size=\"sm\"\n            />\n          </div>\n        </div>\n\n        <div class=\"q-mb-md\">\n          <div class=\"row items-center\">\n            <div class=\"col\">\n              <div class=\"text-subtitle2\">Totale kosten:</div>\n              <div class=\"text-h5 text-primary\">\n                €{{ globalOrderAdvice.total_estimated_cost.toFixed(2) }}\n              </div>\n            </div>\n            <div class=\"col-auto\">\n              <div class=\"text-subtitle2\">Items:</div>\n              <div class=\"text-subtitle1\">\n                {{ globalOrderAdvice.total_items_to_order }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          @click=\"showGlobalAdviceDialog = false\"\n        />\n        <q-btn\n          :loading=\"processingGlobalOrder\"\n          color=\"primary\"\n          :label=\"$t('orderLists.orderAll')\"\n          @click=\"orderAllUrgentItems\"\n        />\n      </template>\n    </BaseDialog>\n\n    <!-- Mobile Counting Interface Dialog -->\n    <q-dialog\n      v-model=\"showMobileCountingDialog\"\n      full-width\n      full-height\n      maximized\n      transition-show=\"slide-up\"\n      transition-hide=\"slide-down\"\n    >\n      <MobileCountingInterface\n        :practice-id=\"authStore.clinicId ?? undefined\"\n        @close=\"showMobileCountingDialog = false\"\n      />\n    </q-dialog>\n\n    <!-- Create Order List Dialog -->\n    <OrderListDialog\n      v-model=\"showCreateDialog\"\n      @created=\"handleOrderListCreated\"\n    />\n\n    <!-- Loading State -->\n    <q-inner-loading :showing=\"loading\">\n      <q-spinner-gears size=\"50px\" color=\"primary\" />\n    </q-inner-loading>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  // Dialog baseline: this page uses BaseDialog for global advice modal\n  import { ref, computed, onMounted, watch } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { useI18n } from 'vue-i18n';\n  import { useOrderListsStore } from '@/stores/orderLists';\n  import { useAuthStore } from '@/stores/auth';\n  import { useSuppliersStore } from '@/stores/suppliers';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import { BaseCard } from '@/components/cards';\n  import FilterPanel from '@/components/filters/FilterPanel.vue';\n  import SimpleOrderListCard from '@/components/orderLists/SimpleOrderListCard.vue';\n  import MobileCountingInterface from '@/components/inventory/MobileCountingInterface.vue';\n  import OrderListDialog from '@/components/products/OrderListDialog.vue';\n  import type { OrderListWithItems } from '@/types/stores';\n  import type { OrderAdvice } from '@/stores/orderLists/orderLists-minmax';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n  import { advancedOrderListsFilterPreset as orderListsFilterPreset } from '@/presets/filters/advancedOrderLists';\n\n  const $q = useQuasar();\n  const $t = useI18n().t;\n  const router = useRouter();\n  const orderListsStore = useOrderListsStore();\n  const authStore = useAuthStore();\n  const suppliersStore = useSuppliersStore();\n\n  // State\n  const loading = ref(false);\n  const showCreateDialog = ref(false);\n  const showGlobalAdviceDialog = ref(false);\n  const showMobileCountingDialog = ref(false);\n  const processingGlobalOrder = ref(false);\n\n  // Filters\n  const filterValues = ref<FilterValues>({});\n  const viewMode = computed(() => filterValues.value.viewMode || 'cards');\n  const hasActiveFilters = computed(() => {\n    return Object.values(filterValues.value).some(value => {\n      if (value === null || value === undefined || value === '') {\n        return false;\n      }\n      if (Array.isArray(value) && value.length === 0) {\n        return false;\n      }\n      if (typeof value === 'boolean' && value === false) {\n        return false;\n      }\n      return true;\n    });\n  });\n\n  // Update filter preset with dynamic supplier options\n  watch(\n    () => suppliersStore.activeSuppliers,\n    suppliers => {\n      const supplierFilter = orderListsFilterPreset.fields.find(\n        f => f.id === 'supplier'\n      );\n      if (supplierFilter && supplierFilter.type === 'select') {\n        // Break type inference to avoid deep instantiation\n        const options: Array<any> = [];\n        for (const supplier of suppliers as any[]) {\n          options.push({\n            label: supplier.name,\n            value: supplier.id,\n          });\n        }\n        (supplierFilter as any).options = options;\n      }\n    },\n    { immediate: true }\n  );\n\n  // Table columns\n  const tableColumns = [\n    {\n      name: 'name',\n      required: true,\n      label: 'Naam',\n      align: 'left' as const,\n      field: 'name',\n      sortable: true,\n    },\n    {\n      name: 'status',\n      align: 'center' as const,\n      label: 'Status',\n      field: 'status',\n      sortable: true,\n    },\n    {\n      name: 'items',\n      align: 'center' as const,\n      label: 'Items',\n      field: 'total_items',\n      sortable: true,\n    },\n    {\n      name: 'value',\n      align: 'right' as const,\n      label: 'Waarde',\n      field: 'total_value',\n      sortable: true,\n      format: (val: number) => `€${val.toFixed(2)}`,\n    },\n    {\n      name: 'urgency',\n      align: 'center' as const,\n      label: 'Urgentie',\n      field: 'id',\n    },\n    {\n      name: 'actions',\n      align: 'center' as const,\n      label: 'Acties',\n      field: 'id',\n    },\n  ];\n\n  // Computed properties\n  const totalLists = computed(() => orderListsStore.orderLists.length);\n\n  const itemsNeedingOrder = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.filter(item => item.calculated_order_quantity > 0)\n      .length;\n  });\n\n  const autoReorderLists = computed(() => {\n    const lists = orderListsStore.orderLists || [];\n    // Explicitly break type inference to avoid deep instantiation\n    let count = 0;\n    for (const list of lists as any[]) {\n      if (list.auto_reorder_enabled) {\n        count++;\n      }\n    }\n    return count;\n  });\n\n  const totalEstimatedValue = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.reduce(\n      (sum, item) =>\n        sum + item.calculated_order_quantity * (item.preferred_unit_price || 0),\n      0\n    );\n  });\n\n  const globalOrderAdvice = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const itemsByUrgency = {\n      critical: suggestions.filter(\n        item => (item.urgency_level as string) === 'critical'\n      ),\n      high: suggestions.filter(\n        item => (item.urgency_level as string) === 'high'\n      ),\n      normal: suggestions.filter(\n        item => (item.urgency_level as string) === 'normal'\n      ),\n      low: suggestions.filter(item => (item.urgency_level as string) === 'low'),\n    };\n\n    return {\n      total_items_to_order: suggestions.filter(\n        item => item.calculated_order_quantity > 0\n      ).length,\n      total_estimated_cost: totalEstimatedValue.value,\n      items_by_urgency: itemsByUrgency,\n      suppliers_involved: [\n        ...new Set(\n          suggestions.map(item => item.preferred_supplier_name).filter(Boolean)\n        ),\n      ],\n      estimated_delivery_dates: {},\n    };\n  });\n\n  const hasUrgentItems = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.some(\n      item =>\n        item.urgency_level === 'critical' ||\n        (item.urgency_level === 'high' && item.calculated_order_quantity > 0)\n    );\n  });\n\n  const criticalItemsCount = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.filter(item => item.urgency_level === 'critical').length;\n  });\n\n  const filteredOrderLists = computed(() => {\n    const lists = orderListsStore.orderLists || [];\n    const result: any[] = [];\n\n    // Break type inference to avoid deep instantiation\n    for (const list of lists as any[]) {\n      let include = true;\n\n      // Apply search filter\n      if (filterValues.value.search && include) {\n        const searchTerm = String(filterValues.value.search).toLowerCase();\n        const matchesName = list.name?.toLowerCase().includes(searchTerm);\n        const matchesDesc = list.description\n          ?.toLowerCase()\n          .includes(searchTerm);\n        include = matchesName || matchesDesc;\n      }\n\n      // Apply status filter\n      if (filterValues.value.status && include) {\n        include = list.status === filterValues.value.status;\n      }\n\n      // Apply supplier filter\n      if (filterValues.value.supplier && include) {\n        include = list.supplier_id === filterValues.value.supplier;\n      }\n\n      // Apply urgency filter\n      if (filterValues.value.urgency && include) {\n        const urgencyStats = getUrgencyStats(list.id);\n        include =\n          urgencyStats[\n            filterValues.value.urgency as keyof typeof urgencyStats\n          ] > 0;\n      }\n\n      if (include) {\n        result.push(list);\n      }\n    }\n\n    return result;\n  });\n\n  // Filter handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // FilterChangeEvent contains field, value, oldValue, preset\n    // The actual values are managed by the FilterPanel component\n    console.log('Filter changed:', event);\n  };\n\n  const handleFilterReset = () => {\n    filterValues.value = {};\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Methods\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      ready: 'positive',\n      draft: 'warning',\n      submitted: 'info',\n      confirmed: 'primary',\n      delivered: 'positive',\n      cancelled: 'negative',\n    };\n    return colors[status] || 'grey';\n  };\n\n  const getStatusLabel = (status: string) => {\n    const labels: Record<string, string> = {\n      ready: 'Klaar',\n      draft: 'Concept',\n      submitted: 'Verzonden',\n      confirmed: 'Bevestigd',\n      delivered: 'Geleverd',\n      cancelled: 'Geannuleerd',\n    };\n    return labels[status] || status;\n  };\n\n  const getOrderAdviceForList = (listId: string): OrderAdvice | undefined => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const items = suggestions.filter(item => item.order_list_id === listId);\n\n    if (items.length === 0) {\n      return undefined;\n    }\n\n    const itemsByUrgency = {\n      critical: items.filter(\n        item => (item.urgency_level as string) === 'critical'\n      ),\n      high: items.filter(item => (item.urgency_level as string) === 'high'),\n      normal: items.filter(item => (item.urgency_level as string) === 'normal'),\n      low: items.filter(item => (item.urgency_level as string) === 'low'),\n    };\n\n    const totalCost = items.reduce(\n      (sum, item) =>\n        sum + item.calculated_order_quantity * (item.preferred_unit_price || 0),\n      0\n    );\n\n    const suppliersInvolved = [\n      ...new Set(\n        items.map(item => item.preferred_supplier_name).filter(Boolean)\n      ),\n    ];\n\n    return {\n      total_items_to_order: items.filter(\n        item => item.calculated_order_quantity > 0\n      ).length,\n      total_estimated_cost: totalCost,\n      items_by_urgency: itemsByUrgency,\n      suppliers_involved: suppliersInvolved,\n      estimated_delivery_dates: {},\n    };\n  };\n\n  const getUrgencyStats = (listId: string) => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const items = suggestions.filter(item => item.order_list_id === listId);\n\n    return {\n      critical: items.filter(\n        item => (item.urgency_level as string) === 'critical'\n      ).length,\n      high: items.filter(item => (item.urgency_level as string) === 'high')\n        .length,\n      normal: items.filter(item => (item.urgency_level as string) === 'normal')\n        .length,\n      low: items.filter(item => (item.urgency_level as string) === 'low')\n        .length,\n    };\n  };\n\n  const openMobileCountingInterface = () => {\n    showMobileCountingDialog.value = true;\n  };\n\n  const orderAllUrgentItems = async () => {\n    processingGlobalOrder.value = true;\n    try {\n      const urgentItems = [\n        ...(globalOrderAdvice.value?.items_by_urgency?.critical || []),\n        ...(globalOrderAdvice.value?.items_by_urgency?.high || []),\n      ].filter(item => item.calculated_order_quantity > 0);\n\n      if (urgentItems.length === 0) {\n        $q.notify({\n          type: 'info',\n          message: $t('orderLists.noUrgentItems'),\n          timeout: 2000,\n        });\n        return;\n      }\n\n      // Split orders by suppliers\n      const splitResult =\n        await orderListsStore.splitOrderBySuppliers(urgentItems);\n\n      $q.notify({\n        type: 'positive',\n        message: $t('orderlists.positive'),\n        caption: `${urgentItems.length} urgente items verwerkt`,\n        timeout: 3000,\n      });\n\n      showGlobalAdviceDialog.value = false;\n\n      // Optionally send orders to suppliers\n      if (splitResult.supplier_orders.length > 0) {\n        $q.dialog({\n          title: 'Bestellingen verzenden?',\n          message: $t('orderLists.sendConfirm', {\n            count: splitResult.supplier_orders.length,\n          }),\n          ok: {\n            label: 'Ja, verzenden',\n            color: 'primary',\n          },\n          cancel: {\n            label: 'Later',\n            color: 'grey',\n            flat: true,\n          },\n        }).onOk(async () => {\n          try {\n            const sendResults = await orderListsStore.sendOrdersToSuppliers(\n              splitResult.supplier_orders\n            );\n\n            const successCount = sendResults.filter(\n              r => r.status === 'success'\n            ).length;\n            const failedCount = sendResults.filter(\n              r => r.status === 'failed'\n            ).length;\n\n            $q.notify({\n              type: successCount > 0 ? 'positive' : 'negative',\n              message: $t('orderLists.ordersSent', {\n                successCount,\n                failedCount,\n              }),\n              timeout: 3000,\n            });\n          } catch (error) {\n            $q.notify({\n              type: 'negative',\n              message: $t('orderLists.sendError'),\n              caption:\n                error instanceof Error ? error.message : 'Onbekende fout',\n            });\n          }\n        });\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.processingError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      processingGlobalOrder.value = false;\n    }\n  };\n\n  const viewOrderList = (orderList: OrderListWithItems) => {\n    router.push(`/order-lists/${orderList.id}`);\n  };\n\n  const editOrderList = (orderList: OrderListWithItems) => {\n    // Implementation for editing order list\n    $q.notify({\n      type: 'info',\n      message: $t('orderLists.editComing'),\n      timeout: 2000,\n    });\n  };\n\n  const duplicateOrderList = async (orderList: OrderListWithItems) => {\n    try {\n      const newName = `${orderList.name} (kopie)`;\n      const newList = await orderListsStore.duplicateOrderList(\n        orderList.id,\n        newName\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: $t('orderLists.duplicated'),\n        caption: `Nieuwe lijst: ${newList.name}`,\n        timeout: 3000,\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.duplicateError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    }\n  };\n\n  const deleteOrderList = async (orderList: OrderListWithItems) => {\n    $q.dialog({\n      title: 'Lijst verwijderen',\n      message: $t('orderLists.deleteConfirmText', { name: orderList.name }),\n      ok: {\n        label: 'Verwijderen',\n        color: 'negative',\n      },\n      cancel: {\n        label: 'Annuleren',\n        color: 'grey',\n        flat: true,\n      },\n    }).onOk(async () => {\n      try {\n        await orderListsStore.deleteOrderList(orderList.id);\n\n        $q.notify({\n          type: 'positive',\n          message: $t('orderLists.deleted'),\n          timeout: 2000,\n        });\n      } catch (error) {\n        $q.notify({\n          type: 'negative',\n          message: $t('orderLists.deleteError'),\n          caption: error instanceof Error ? error.message : 'Onbekende fout',\n        });\n      }\n    });\n  };\n\n  const handleOrderCreated = (orderList: OrderListWithItems) => {\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.orderCreated'),\n      caption: `Vanuit lijst: ${orderList.name}`,\n      timeout: 3000,\n    });\n  };\n\n  const handleListUpdated = (orderList: OrderListWithItems) => {\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.updated'),\n      timeout: 2000,\n    });\n  };\n\n  const handleAnalyticsRequest = (orderList: OrderListWithItems) => {\n    router.push(`/analytics?list=${orderList.id}`);\n  };\n\n  const handleOrderListCreated = () => {\n    showCreateDialog.value = false;\n\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.created'),\n      timeout: 2000,\n    });\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    loading.value = true;\n    try {\n      const practiceId = authStore.clinicId;\n      if (practiceId) {\n        await Promise.all([\n          orderListsStore.fetchOrderLists(practiceId),\n          suppliersStore.fetchSuppliers(),\n          orderListsStore.generateOrderSuggestions(practiceId),\n        ]);\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.loadDataError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      loading.value = false;\n    }\n  });\n\n  // Watch for practice changes\n  watch(\n    () => authStore.clinicId,\n    async newPracticeId => {\n      if (newPracticeId) {\n        loading.value = true;\n        try {\n          await Promise.all([\n            orderListsStore.fetchOrderLists(newPracticeId),\n            orderListsStore.generateOrderSuggestions(newPracticeId),\n          ]);\n        } catch (error) {\n          $q.notify({\n            type: 'negative',\n            message: $t('orderLists.loadDataError'),\n            caption: error instanceof Error ? error.message : 'Onbekende fout',\n          });\n        } finally {\n          loading.value = false;\n        }\n      }\n    }\n  );\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n\n  /* Order Lists Grid */\n  .order-lists-grid {\n    .order-list-col {\n      padding: 8px;\n    }\n  }\n\n  /* Filters Section */\n  .filters-section {\n    margin-bottom: var(--space-6, 24px);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrdersPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 244,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 244,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6651, 6654], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6651, 6654], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 288,
        "column": 20,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 288,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 328,
        "column": 20,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 328,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 503,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 503,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13423, 13426], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13423, 13426], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 521,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 521,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13785, 13788], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13785, 13788], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 528,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 528,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13925, 13928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13925, 13928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 535,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 535,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14069, 14072], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14069, 14072], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 569,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 569,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14787, 14790], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14787, 14790], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle :title=\"$t('orders.title')\" icon=\"assignment\">\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshOrders\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            icon=\"file_download\"\n            :label=\"$t('common.export')\"\n            :loading=\"exporting\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n            @click=\"showExportDialog = true\"\n          />\n          <q-btn\n            icon=\"analytics\"\n            :label=\"$t('orders.analytics')\"\n            unelevated\n            no-caps\n            class=\"app-btn-info\"\n            @click=\"showAnalytics = true\"\n          />\n          <q-btn\n            icon=\"add\"\n            :label=\"$t('orders.createOrder')\"\n            unelevated\n            no-caps\n            class=\"app-btn-primary\"\n            @click=\"createNewOrder\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- FilterPanel component -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        v-model=\"filterValues\"\n        :preset=\"ordersFilterPreset\"\n        :loading=\"loading\"\n        collapsible\n        class=\"orders-filter-panel\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n      />\n    </div>\n\n    <!-- Orders Table -->\n    <div class=\"medical-table no-top-content\">\n      <q-table\n        v-model:selected=\"selected\"\n        :rows=\"filteredOrders\"\n        :columns=\"columns\"\n        :loading=\"loading\"\n        selection=\"multiple\"\n        row-key=\"id\"\n        :pagination=\"{ rowsPerPage: 25 }\"\n        flat\n        bordered\n        separator=\"cell\"\n      >\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\" class=\"text-center\">\n            <q-chip\n              :color=\"getStatusColor(props.value)\"\n              :text-color=\"getStatusTextColor(props.value)\"\n              :label=\"$t(`orders.status.${props.value}`)\"\n              size=\"sm\"\n              dense\n            />\n          </q-td>\n        </template>\n\n        <template #body-cell-order_date=\"props\">\n          <q-td :props=\"props\">\n            {{ formatDate(props.value) }}\n          </q-td>\n        </template>\n\n        <template #body-cell-total_amount=\"props\">\n          <q-td :props=\"props\" class=\"text-right\">\n            {{ formatCurrency(props.value) }}\n          </q-td>\n        </template>\n\n        <template #body-cell-expected_delivery_date=\"props\">\n          <q-td :props=\"props\">\n            {{ formatDate(props.value) }}\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"visibility\"\n              size=\"sm\"\n              @click=\"viewOrder(props.row)\"\n            >\n              <q-tooltip>{{ $t('orders.viewOrder') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"edit\"\n              size=\"sm\"\n              @click=\"editOrder(props.row)\"\n            >\n              <q-tooltip>{{ $t('orders.editOrder') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"download\"\n              size=\"sm\"\n              @click=\"downloadOrder(props.row)\"\n            >\n              <q-tooltip>{{ $t('orders.downloadOrder') }}</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Export Dialog -->\n    <FormDialog\n      v-model=\"showExportDialog\"\n      :title=\"$t('orders.export.title')\"\n      icon=\"download\"\n      size=\"sm\"\n      :loading=\"exporting\"\n      :submit-button-text=\"$t('orders.export.export')\"\n      @submit=\"performExport\"\n      @cancel=\"showExportDialog = false\"\n    >\n      <div class=\"q-gutter-md\">\n        <q-select\n          v-model=\"exportFormat\"\n          :options=\"exportFormatOptions\"\n          :label=\"$t('orders.export.format')\"\n          outlined\n          emit-value\n          map-options\n        />\n\n        <q-input\n          v-model=\"exportDateFrom\"\n          :label=\"$t('orders.export.dateFrom')\"\n          type=\"date\"\n          outlined\n        />\n\n        <q-input\n          v-model=\"exportDateTo\"\n          :label=\"$t('orders.export.dateTo')\"\n          type=\"date\"\n          outlined\n        />\n      </div>\n    </FormDialog>\n\n    <!-- Analytics Dialog -->\n    <q-dialog v-model=\"showAnalytics\" maximized>\n      <q-card>\n        <q-card-section>\n          <div class=\"text-h6\">{{ $t('orders.analytics.title') }}</div>\n        </q-card-section>\n\n        <q-card-section>\n          <div class=\"text-center\">\n            <q-icon name=\"assessment\" size=\"xl\" color=\"grey-5\" />\n            <div class=\"text-h6 q-mt-md\">\n              {{ $t('orders.analytics.comingSoon') }}\n            </div>\n          </div>\n        </q-card-section>\n\n        <q-card-actions align=\"right\">\n          <q-btn\n            flat\n            :label=\"$t('common.close')\"\n            @click=\"showAnalytics = false\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar, date } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import { ordersFilterPreset } from '@/presets/filters/orders';\n  import { supabase } from 'src/services/supabase';\n  import { useAuthStore } from 'src/stores/auth';\n\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const authStore = useAuthStore();\n\n  // Refs\n  const loading = ref(false);\n  const exporting = ref(false);\n  const selected = ref([]);\n  const showExportDialog = ref(false);\n  const showAnalytics = ref(false);\n\n  // New filter state for FilterPanel\n  const filterValues = ref<FilterValues>({});\n\n  // Export state\n  const exportFormat = ref('xlsx');\n  const exportDateFrom = ref('');\n  const exportDateTo = ref('');\n\n  // Data\n  const orders = ref<any[]>([]);\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Filter logic is handled by computed property\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    filterValues.value = {\n      ...(ordersFilterPreset.defaultFilters as FilterValues),\n    };\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Computed\n  const filteredOrders = computed(() => {\n    let filtered = orders.value;\n\n    // Apply status filter\n    const status = filterValues.value.status;\n    if (status) {\n      filtered = filtered.filter(order => order.status === status);\n    }\n\n    // Apply supplier filter\n    const supplier = filterValues.value.supplier;\n    if (supplier) {\n      filtered = filtered.filter(order => order.supplier_id === supplier);\n    }\n\n    // Apply date range filter\n    const orderDateRange = filterValues.value.order_date_range;\n    if (\n      orderDateRange &&\n      typeof orderDateRange === 'object' &&\n      'from' in orderDateRange\n    ) {\n      const fromDate = new Date(\n        (orderDateRange as { from?: Date; to?: Date }).from ?? new Date()\n      );\n      const toDate = (orderDateRange as { from?: Date; to?: Date }).to\n        ? new Date((orderDateRange as { from?: Date; to?: Date }).to!)\n        : new Date();\n\n      filtered = filtered.filter(order => {\n        const orderDate = new Date(order.order_date);\n        return orderDate >= fromDate && orderDate <= toDate;\n      });\n    }\n\n    // Apply amount range filter\n    const amountRange = filterValues.value.amount_range;\n    if (\n      amountRange &&\n      typeof amountRange === 'object' &&\n      ('min' in amountRange || 'max' in amountRange)\n    ) {\n      filtered = filtered.filter(order => {\n        const amount = order.total_amount || 0;\n        const range = amountRange as { min?: number; max?: number };\n        if (range.min !== undefined && amount < range.min) {\n          return false;\n        }\n        if (range.max !== undefined && amount > range.max) {\n          return false;\n        }\n        return true;\n      });\n    }\n\n    // Apply expected delivery date range filter\n    const deliveryDateRange = filterValues.value.expected_delivery_date_range;\n    if (\n      deliveryDateRange &&\n      typeof deliveryDateRange === 'object' &&\n      'from' in deliveryDateRange\n    ) {\n      const fromDate = new Date(\n        (deliveryDateRange as { from?: Date; to?: Date }).from ?? new Date()\n      );\n      const toDate = (deliveryDateRange as { from?: Date; to?: Date }).to\n        ? new Date((deliveryDateRange as { from?: Date; to?: Date }).to!)\n        : new Date();\n\n      filtered = filtered.filter(order => {\n        if (!order.expected_delivery_date) {\n          return false;\n        }\n        const deliveryDate = new Date(order.expected_delivery_date);\n        return deliveryDate >= fromDate && deliveryDate <= toDate;\n      });\n    }\n\n    return filtered;\n  });\n\n  // Button definitions\n  const exportBtn = computed(() => ({\n    icon: 'download',\n    label: t('orders.export.button'),\n    color: 'secondary',\n    unelevated: true,\n    'no-caps': true,\n  }));\n\n  const analyticsBtn = computed(() => ({\n    icon: 'analytics',\n    label: t('orders.analytics.button'),\n    color: 'info',\n    unelevated: true,\n    'no-caps': true,\n  }));\n\n  const createOrderBtn = computed(() => ({\n    icon: 'add',\n    label: t('orders.createOrder'),\n    color: 'primary',\n    unelevated: true,\n    'no-caps': true,\n  }));\n\n  // Table columns with enhanced configuration\n  const columns = computed(() => [\n    {\n      name: 'order_number',\n      label: t('orders.orderNumber'),\n      field: 'order_number',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'supplier_name',\n      label: t('orders.supplier'),\n      field: 'supplier_name',\n      align: 'left' as const,\n      sortable: true,\n      classes: 'col-name',\n      headerClasses: 'col-name',\n    },\n    {\n      name: 'order_date',\n      label: t('orders.orderDate'),\n      field: 'order_date',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'status',\n      label: t('orders.columns.status'),\n      field: 'status',\n      align: 'center' as const,\n      sortable: true,\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'total_amount',\n      label: t('orders.totalAmount'),\n      field: 'total_amount',\n      align: 'right' as const,\n      sortable: true,\n      classes: 'col-numeric',\n      headerClasses: 'col-numeric',\n    },\n    {\n      name: 'expected_delivery_date',\n      label: t('orders.expectedDelivery'),\n      field: 'expected_delivery_date',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'actions',\n      label: t('orders.actions'),\n      field: '',\n      align: 'center' as const,\n      sortable: false,\n      classes: 'col-actions',\n      headerClasses: 'col-actions',\n    },\n  ]);\n\n  // Export format options\n  const exportFormatOptions = computed(() => [\n    { label: t('exports.formats.excel'), value: 'xlsx' },\n    { label: t('exports.formats.csv'), value: 'csv' },\n    { label: t('exports.formats.pdf'), value: 'pdf' },\n  ]);\n\n  // Helper functions\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'draft':\n        return 'grey';\n      case 'submitted':\n        return 'info';\n      case 'confirmed':\n        return 'positive';\n      case 'shipped':\n        return 'purple';\n      case 'delivered':\n        return 'green';\n      case 'cancelled':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  };\n\n  const getStatusTextColor = (status: string): string => {\n    return 'white';\n  };\n\n  const formatDate = (dateString: string): string => {\n    if (!dateString) {\n      return '-';\n    }\n    return date.formatDate(dateString, 'DD/MM/YYYY');\n  };\n\n  const formatCurrency = (amount: number): string => {\n    if (!amount) {\n      return '€0,00';\n    }\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(amount);\n  };\n\n  // Methods\n  const refreshOrders = async () => {\n    await loadOrders();\n  };\n\n  const loadOrders = async () => {\n    try {\n      loading.value = true;\n      const { data, error } = await supabase\n        .from('orders')\n        .select(\n          `\n        *,\n        supplier:suppliers(name)\n      `\n        )\n        .order('order_date', { ascending: false });\n\n      if (error) throw error;\n\n      orders.value = (data || []).map((order, index) => ({\n        ...order,\n        supplier_name: order.supplier?.name || 'Unknown',\n        order_number:\n          order.order_number || `ORD-${String(index + 1).padStart(4, '0')}`,\n      }));\n    } catch (error: any) {\n      console.error('Failed to load orders:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('orders.loadError'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createNewOrder = () => {\n    $q.notify({\n      type: 'info',\n      message: t('common.comingSoon'),\n    });\n  };\n\n  const viewOrder = (order: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('orders.viewOrderNotImplemented'),\n    });\n  };\n\n  const editOrder = (order: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('orders.editOrderNotImplemented'),\n    });\n  };\n\n  const downloadOrder = (order: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('orders.downloadOrderNotImplemented'),\n    });\n  };\n\n  const bulkExport = () => {\n    $q.notify({\n      type: 'info',\n      message: t('orders.bulkExportNotImplemented'),\n    });\n  };\n\n  const bulkEmail = () => {\n    $q.notify({\n      type: 'info',\n      message: t('orders.bulkEmailNotImplemented'),\n    });\n  };\n\n  const performExport = async () => {\n    try {\n      exporting.value = true;\n\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      $q.notify({\n        type: 'positive',\n        message: t('orders.export.exportSuccess'),\n      });\n\n      showExportDialog.value = false;\n    } catch (error: any) {\n      console.error('Export failed:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('orders.export.exportError'),\n      });\n    } finally {\n      exporting.value = false;\n    }\n  };\n\n  // onTableRequest is now provided by useTableSorting composable\n\n  // Lifecycle\n  onMounted(async () => {\n    await loadOrders();\n\n    // Initialize filter values with defaults\n    if (ordersFilterPreset.defaultFilters) {\n      filterValues.value = {\n        ...ordersFilterPreset.defaultFilters,\n      } as FilterValues;\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .filters-section {\n    .orders-filter-panel {\n      // Custom styling for the FilterPanel in orders page\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\ProductsPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 410,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 410,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13319, 13322], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13319, 13322], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 410,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 410,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13333, 13336], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13333, 13336], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 760,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 760,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23054, 23057], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23054, 23057], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 775,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 775,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23448, 23451], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23448, 23451], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 827,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 827,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24832, 24835], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24832, 24835], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('productsPage.title')\"\n        :subtitle=\"$t('productsPage.subtitle')\"\n        icon=\"inventory_2\"\n      >\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshData\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            v-if=\"canCreate\"\n            icon=\"add\"\n            :label=\"$t('products.createProduct')\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n            @click=\"showCreateProductDialog\"\n          />\n          <q-btn\n            icon=\"add_shopping_cart\"\n            :label=\"$t('productsPage.viewCart')\"\n            :disable=\"cartItemsCount === 0\"\n            unelevated\n            no-caps\n            class=\"app-btn-primary\"\n            @click=\"showCartDialog = true\"\n          >\n            <q-badge\n              v-if=\"cartItemsCount > 0\"\n              color=\"red\"\n              floating\n              :label=\"cartItemsCount\"\n            />\n          </q-btn>\n        </template>\n      </PageTitle>\n    </template>\n\n    <div class=\"products-page\">\n      <!-- FilterPanel component -->\n      <div class=\"filters-section q-mb-lg\">\n        <FilterPanel\n          v-model=\"filterValues\"\n          :preset=\"productsFilterPreset\"\n          :loading=\"loading\"\n          collapsible\n          class=\"products-filter-panel\"\n          @change=\"handleFilterChange\"\n          @reset=\"handleFilterReset\"\n          @clear=\"handleFilterClear\"\n        />\n      </div>\n\n      <!-- Smart Products Table -->\n      <div class=\"products-table-container\">\n        <SmartTable\n          :data=\"products\"\n          :columns=\"tableColumns\"\n          :config=\"smartTableConfig\"\n          :show-strategy-indicator=\"isDevelopment\"\n          :show-performance-info=\"isDevelopment\"\n          row-key=\"id\"\n          :rows-per-page-options=\"[25, 50, 100]\"\n          @strategy-changed=\"onStrategyChanged\"\n        >\n          <!-- Loading -->\n          <template #loading>\n            <q-inner-loading showing color=\"primary\" />\n          </template>\n\n          <!-- No Data -->\n          <template #no-data>\n            <div class=\"full-width row flex-center q-gutter-sm\">\n              <q-icon size=\"2em\" name=\"sentiment_dissatisfied\" />\n              <span>{{ $t('productsPage.noProductsFound') }}</span>\n            </div>\n          </template>\n\n          <!-- SKU Cell -->\n          <template #body-cell-sku=\"props\">\n            <q-td :props=\"props\">\n              <code class=\"sku-code\">{{ props.row.sku || '-' }}</code>\n            </q-td>\n          </template>\n\n          <!-- Stock Status Cell -->\n          <template #body-cell-stock_status=\"props\">\n            <q-td :props=\"props\">\n              <q-chip\n                :color=\"getStockStatusColor(props.row.stock_status)\"\n                :text-color=\"getStockStatusTextColor(props.row.stock_status)\"\n                size=\"sm\"\n                dense\n              >\n                {{ $t(`productsPage.stockStatus.${props.row.stock_status}`) }}\n              </q-chip>\n            </q-td>\n          </template>\n\n          <!-- GS1 Status Cell -->\n          <template #body-cell-gs1_status=\"props\">\n            <q-td :props=\"props\">\n              <q-chip\n                :color=\"\n                  props.row.gs1_status === 'complete' ? 'positive' : 'orange'\n                \"\n                text-color=\"white\"\n                size=\"sm\"\n                dense\n              >\n                {{ $t(`productsPage.gs1Status.${props.row.gs1_status}`) }}\n              </q-chip>\n            </q-td>\n          </template>\n\n          <!-- Price Cell -->\n          <template #body-cell-price=\"props\">\n            <q-td :props=\"props\" class=\"price-info\">\n              <div class=\"price-value\">\n                <span v-if=\"props.row.price\" class=\"price-amount\">\n                  € {{ props.row.price.toFixed(2) }}\n                </span>\n                <span v-else class=\"no-price\">-</span>\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Batch Status Cell -->\n          <template #body-cell-batch_status=\"props\">\n            <q-td :props=\"props\">\n              <q-chip\n                :color=\"\n                  props.row.batch_status === 'batch_tracked' ? 'info' : 'grey'\n                \"\n                text-color=\"white\"\n                size=\"sm\"\n                dense\n              >\n                {{ $t(`productsPage.batchStatus.${props.row.batch_status}`) }}\n              </q-chip>\n            </q-td>\n          </template>\n\n          <!-- Actions Cell -->\n          <template #body-cell-actions=\"props\">\n            <q-td :props=\"props\">\n              <div class=\"action-buttons\">\n                <q-btn\n                  size=\"sm\"\n                  flat\n                  dense\n                  round\n                  icon=\"visibility\"\n                  color=\"primary\"\n                  @click=\"showProductDetails(props.row)\"\n                >\n                  <q-tooltip>{{ $t('productsPage.viewDetails') }}</q-tooltip>\n                </q-btn>\n                <q-btn\n                  v-if=\"canEdit\"\n                  size=\"sm\"\n                  flat\n                  dense\n                  round\n                  icon=\"edit\"\n                  color=\"warning\"\n                  @click=\"editProduct(props.row)\"\n                >\n                  <q-tooltip>{{ $t('products.editProduct') }}</q-tooltip>\n                </q-btn>\n                <q-btn\n                  v-if=\"canDelete\"\n                  size=\"sm\"\n                  flat\n                  dense\n                  round\n                  icon=\"delete\"\n                  color=\"negative\"\n                  @click=\"deleteProduct(props.row)\"\n                >\n                  <q-tooltip>{{ $t('products.deleteProduct') }}</q-tooltip>\n                </q-btn>\n                <q-btn\n                  size=\"sm\"\n                  flat\n                  dense\n                  round\n                  icon=\"add_shopping_cart\"\n                  color=\"positive\"\n                  @click=\"handleAddToCart(props.row)\"\n                >\n                  <q-tooltip>{{ $t('productsPage.addToCart') }}</q-tooltip>\n                </q-btn>\n                <q-btn\n                  size=\"sm\"\n                  flat\n                  dense\n                  round\n                  icon=\"list_alt\"\n                  color=\"orange\"\n                  @click=\"handleAddToOrderList(props.row)\"\n                >\n                  <q-tooltip>{{ $t('productsPage.addToOrderList') }}</q-tooltip>\n                </q-btn>\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Row with click handler for expansion -->\n          <template #body-cell-name=\"props\">\n            <q-td\n              :props=\"props\"\n              class=\"product-name-cell cursor-pointer\"\n              @click=\"toggleRowExpansion(props.row.id)\"\n            >\n              <div class=\"product-info\">\n                <div class=\"product-name\">{{ props.row.name }}</div>\n                <div v-if=\"props.row.brand\" class=\"product-brand\">\n                  {{ props.row.brand }}\n                </div>\n              </div>\n            </q-td>\n          </template>\n        </SmartTable>\n      </div>\n    </div>\n\n    <!-- Product Details Dialog -->\n    <ProductDetailsDialog\n      v-model=\"showDetailsDialog\"\n      :product=\"selectedProduct\"\n      @add-to-cart=\"handleAddToCart\"\n      @add-to-order-list=\"handleAddToOrderList\"\n    />\n\n    <!-- Shopping Cart Dialog -->\n    <ShoppingCartDialog\n      v-model=\"showCartDialog\"\n      :cart-items=\"cart as any\"\n      :cart-total=\"cartTotal\"\n      @update-quantity=\"updateCartItemQuantity\"\n      @remove-item=\"removeFromCart\"\n      @clear-cart=\"clearCart\"\n      @checkout=\"handleCheckout\"\n    />\n\n    <!-- Order List Dialog -->\n    <OrderListDialog\n      v-model=\"showOrderListDialog\"\n      :order-lists=\"orderLists\"\n      :selected-product=\"selectedProduct as any\"\n      @create-order-list=\"handleCreateOrderList as any\"\n      @add-to-existing=\"handleAddToExistingOrderList as any\"\n    />\n\n    <!-- GTIN Barcode Scanner -->\n    <BarcodeScanner v-model=\"showGtinScanner\" @scan=\"handleGtinScan\" />\n\n    <!-- Advanced Search Dialog -->\n    <AdvancedSearchDialog\n      v-model=\"showAdvancedSearch\"\n      :current-filters=\"filters\"\n      :country-options=\"countryOptions\"\n      :gpc-options=\"gpcOptions\"\n      :category-options=\"categoryOptions\"\n      :supplier-options=\"supplierOptions\"\n      :stock-status-options=\"stockStatusOptions\"\n      :lifecycle-options=\"lifecycleOptions\"\n      :results-count=\"searchResultsCount\"\n      @search=\"handleAdvancedSearch\"\n      @open-scanner=\"showGtinScanner = true\"\n      @preview=\"handleSearchPreview\"\n    />\n\n    <!-- Product Form Dialog -->\n    <ProductFormDialog\n      v-model=\"showProductFormDialog\"\n      :product=\"selectedProductForEdit as any\"\n      @saved=\"onProductSaved\"\n      @scan-barcode=\"showGtinScanner = true\"\n    />\n\n    <!-- Delete Confirmation Dialog -->\n    <ConfirmDialog\n      v-model=\"showDeleteDialog\"\n      type=\"danger\"\n      :title=\"$t('products.deleteConfirm')\"\n      :message=\"$t('products.deleteMessage', { name: productToDelete?.name })\"\n      :loading=\"deleting\"\n      @confirm=\"confirmDelete\"\n      @cancel=\"showDeleteDialog = false\"\n    />\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, watch, defineAsyncComponent } from 'vue';\n  import { storeToRefs } from 'pinia';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useProductsStore } from 'src/stores/products';\n  import { useOrderListsStore } from 'src/stores/orderLists';\n  import { useAuthStore } from 'src/stores/auth';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import ConfirmDialog from 'src/components/base/ConfirmDialog.vue';\n  import SmartTable from 'src/components/tables/SmartTable.vue';\n  // ✅ PERFORMANCE OPTIMIZATION: Dynamic imports for heavy dialogs\n\n  const ProductDetailsDialog = defineAsyncComponent(\n    () => import('src/components/products/ProductDetailsDialog.vue')\n  );\n  const ShoppingCartDialog = defineAsyncComponent(\n    () => import('src/components/products/ShoppingCartDialog.vue')\n  );\n  const OrderListDialog = defineAsyncComponent(\n    () => import('src/components/products/OrderListDialog.vue')\n  );\n  const BarcodeScanner = defineAsyncComponent(\n    () => import('src/components/BarcodeScanner.vue')\n  );\n  const AdvancedSearchDialog = defineAsyncComponent(\n    () => import('src/components/products/AdvancedSearchDialog.vue')\n  );\n  const ProductFormDialog = defineAsyncComponent(\n    () => import('src/components/products/ProductFormDialog.vue')\n  );\n\n  import { productsFilterPreset } from '@/presets/filters/products';\n  import { usePermissions } from 'src/services/permissions';\n  import type {\n    ProductWithStock,\n    ProductBatchSummary,\n  } from 'src/types/inventory';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n\n  const { t, locale } = useI18n();\n  const $q = useQuasar();\n  const productsStore = useProductsStore();\n  const orderListsStore = useOrderListsStore();\n  const authStore = useAuthStore();\n  const permissions = usePermissions();\n\n  // Permission checks - TODO: Connect to proper auth system\n  const canCreate = ref(true);\n  const canEdit = ref(true);\n  const canDelete = ref(true);\n\n  // Reactive data\n  const selectedProduct = ref<ProductWithStock | null>(null);\n  const showDetailsDialog = ref(false);\n  const showCartDialog = ref(false);\n  const showOrderListDialog = ref(false);\n  const showGtinScanner = ref(false);\n  const showAdvancedSearch = ref(false);\n  const showProductFormDialog = ref(false);\n  const showDeleteDialog = ref(false);\n  const selectedProductForEdit = ref<ProductWithStock | null>(null);\n  const productToDelete = ref<ProductWithStock | null>(null);\n  const deleting = ref(false);\n  const expandedRows = ref<string[]>([]);\n  const searchResultsCount = ref<number | null>(null);\n\n  // New filter state for FilterPanel\n  const filterValues = ref<FilterValues>({});\n\n  // Store getters - using storeToRefs for reactivity\n  const {\n    products,\n    loading,\n    cart,\n    cartItemsCount,\n    cartTotal,\n    filters,\n    availableCategories,\n    availableCountries,\n    availableGpcCodes,\n    availableLifecycleStatuses,\n    availableSuppliers,\n    productStats,\n  } = storeToRefs(productsStore);\n\n  const { orderLists } = storeToRefs(orderListsStore);\n\n  // Development mode indicator\n  const isDevelopment = computed(() => process.env.NODE_ENV === 'development');\n\n  // Smart table configuration for large datasets\n  const smartTableConfig = computed(() => ({\n    clientSideThreshold: 1000, // Switch to server-side at 1000 products\n    virtualizationThreshold: 5000, // Switch to virtualization at 5000 products\n    debounceMs: 300,\n    itemHeight: 60,\n    serverSideLoader: async (pagination: any, filters: any) => {\n      // Server-side loading for large datasets\n      const practiceId = authStore.clinicId;\n      if (!practiceId) return { data: [], totalCount: 0 };\n\n      // TODO: Implement server-side pagination when needed\n      // For now, return all products (client-side handles pagination)\n      return {\n        data: products.value,\n        totalCount: products.value.length,\n      };\n    },\n  }));\n\n  // Handle strategy changes\n  const onStrategyChanged = (strategy: string) => {\n    console.log(`Products table strategy changed to: ${strategy}`);\n    $q.notify({\n      type: 'info',\n      message: `Table optimized for ${strategy} mode`,\n      timeout: 2000,\n    });\n  };\n\n  // Table columns configuration with enhanced sorting support\n  const tableColumns = computed(() => [\n    {\n      name: 'name',\n      label: t('productsPage.table.name'),\n      field: 'name',\n      align: 'left' as const,\n      sortable: true,\n      style: 'width: 250px',\n      classes: 'col-name',\n      headerClasses: 'col-name',\n    },\n    {\n      name: 'sku',\n      label: t('productsPage.table.sku'),\n      field: 'sku',\n      align: 'left' as const,\n      sortable: true,\n      style: 'width: 120px',\n    },\n    {\n      name: 'stock_status',\n      label: t('productsPage.table.stockStatus'),\n      field: 'stock_status',\n      align: 'center' as const,\n      sortable: true,\n      style: 'width: 150px',\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'gs1_status',\n      label: t('productsPage.table.gs1Status'),\n      field: 'gs1_status',\n      align: 'center' as const,\n      sortable: false,\n      style: 'width: 140px',\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'price',\n      label: t('productsPage.table.price'),\n      field: 'lowest_price',\n      align: 'right' as const,\n      sortable: true,\n      style: 'width: 120px',\n      classes: 'col-numeric',\n      headerClasses: 'col-numeric',\n    },\n    {\n      name: 'batch_status',\n      label: t('productsPage.table.stockType'),\n      field: 'batch_status',\n      align: 'center' as const,\n      sortable: false,\n      style: 'width: 140px',\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'actions',\n      label: t('productsPage.table.actions'),\n      field: '',\n      align: 'center' as const,\n      sortable: false,\n      style: 'width: 180px',\n      classes: 'col-actions',\n      headerClasses: 'col-actions',\n    },\n  ]);\n\n  // Legacy filter options for compatibility\n  const categoryOptions = computed(\n    () =>\n      availableCategories.value\n        ?.filter((cat): cat is string => cat !== null)\n        .map(cat => ({\n          label: cat,\n          value: cat,\n        })) ?? []\n  );\n\n  const stockStatusOptions = computed(() => [\n    { label: t('productsPage.stockStatus.in_stock'), value: 'in_stock' },\n    { label: t('productsPage.stockStatus.low_stock'), value: 'low_stock' },\n    {\n      label: t('productsPage.stockStatus.out_of_stock'),\n      value: 'out_of_stock',\n    },\n  ]);\n\n  const countryOptions = computed(\n    () =>\n      availableCountries.value\n        ?.filter(\n          (country): country is string =>\n            country !== null && country !== undefined\n        )\n        .map(country => ({\n          label: `${getCountryFlag(country)} ${getCountryName(country)}`,\n          value: country,\n        })) ?? []\n  );\n\n  const gpcOptions = computed(\n    () =>\n      availableGpcCodes.value?.map((gpc: string) => ({\n        label: `${gpc} - ${getGpcDescription(gpc)}`,\n        value: gpc,\n      })) ?? []\n  );\n\n  const lifecycleOptions = computed(() => [\n    { label: t('productsPage.lifecycleStatus.active'), value: 'active' },\n    {\n      label: t('productsPage.lifecycleStatus.discontinued'),\n      value: 'discontinued',\n    },\n    { label: t('productsPage.lifecycleStatus.new'), value: 'new' },\n    { label: t('productsPage.lifecycleStatus.phase_out'), value: 'phase_out' },\n  ]);\n\n  const supplierOptions = computed(() =>\n    availableSuppliers.value.map(supplier => ({\n      label: typeof supplier === 'string' ? supplier : supplier.name,\n      value: typeof supplier === 'string' ? supplier : supplier.id,\n    }))\n  );\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Convert FilterPanel values to store filter format\n    const storeFilters = convertFilterValuesToStoreFormat(filterValues.value);\n    updateFilters(storeFilters);\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    // Reset to default values\n    filterValues.value = {\n      ...productsFilterPreset.defaultFilters,\n    } as FilterValues;\n    productsStore.clearFilters();\n  };\n\n  const handleFilterClear = () => {\n    // Clear all filters\n    filterValues.value = {};\n    productsStore.clearFilters();\n  };\n\n  // Helper to convert FilterPanel values to store format\n  const convertFilterValuesToStoreFormat = (values: FilterValues) => {\n    return {\n      search: String(values.search || ''),\n      category: String(values.category || ''),\n      supplier: String(values.supplier || ''),\n      stock_status: String(values.stock_status || 'all'),\n      gtin: String(values.gtin || ''),\n      country_of_origin: String(values.country_of_origin || ''),\n      gpc_brick_code: String(values.gpc_brick_code || ''),\n      lifecycle_status: String(values.lifecycle_status || ''),\n      orderable_only: Boolean(values.orderable_only || false),\n    };\n  };\n\n  // Helper functions\n  const getStockStatusColor = (status: string): string => {\n    switch (status) {\n      case 'in_stock':\n        return 'positive';\n      case 'low_stock':\n        return 'warning';\n      case 'out_of_stock':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  };\n\n  const getStockStatusTextColor = (status: string): string => {\n    switch (status) {\n      case 'in_stock':\n        return 'white';\n      case 'low_stock':\n        return 'black';\n      case 'out_of_stock':\n        return 'white';\n      default:\n        return 'black';\n    }\n  };\n\n  const getStockStatusLabel = (status: string): string => {\n    switch (status) {\n      case 'in_stock':\n        return t('productsPage.stockStatus.in_stock');\n      case 'low_stock':\n        return t('productsPage.stockStatus.low_stock');\n      case 'out_of_stock':\n        return t('productsPage.stockStatus.out_of_stock');\n      default:\n        return t('productsPage.stockStatus.unavailable');\n    }\n  };\n\n  const getCountryFlag = (countryCode: string): string => {\n    // Simple flag implementation - could be enhanced\n    return '🏳️';\n  };\n\n  const getCountryName = (countryCode: string): string => {\n    // Simple country name implementation\n    return countryCode;\n  };\n\n  const getGpcDescription = (gpcCode: string): string => {\n    // Simple GPC description implementation\n    return 'Product Classification';\n  };\n\n  const isValidGTIN = (value: string): boolean => {\n    return /^\\d{8,14}$/.test(value);\n  };\n\n  const handleGtinScan = (gtin: string) => {\n    // Update filter values\n    filterValues.value = { ...filterValues.value, gtin };\n\n    // Check if we found a product with this GTIN\n    const gtinMatch = products.value.find(\n      (product: ProductWithStock) => product.gtin === gtin\n    );\n    if (gtinMatch) {\n      $q.notify({\n        type: 'positive',\n        message: t('productsPage.gtinFound', { product: gtinMatch.name }),\n        icon: 'qr_code_2',\n        position: 'top',\n        actions: [\n          {\n            label: t('productsPage.viewProduct'),\n            color: 'white',\n            handler: () => showProductDetails(gtinMatch),\n          },\n        ],\n      });\n    } else {\n      $q.notify({\n        type: 'warning',\n        message: t('productsPage.gtinNotFound', { gtin }),\n        icon: 'search_off',\n        position: 'top',\n      });\n    }\n  };\n\n  const toggleRowExpansion = (productId: string) => {\n    const index = expandedRows.value.indexOf(productId);\n    if (index > -1) {\n      expandedRows.value.splice(index, 1);\n    } else {\n      expandedRows.value.push(productId);\n    }\n  };\n\n  const showProductDetails = (product: ProductWithStock) => {\n    selectedProduct.value = product;\n    showDetailsDialog.value = true;\n  };\n\n  const handleAddToCart = (product: ProductWithStock) => {\n    try {\n      productsStore.addToCart(product, 1);\n      $q.notify({\n        type: 'positive',\n        message: t('productsPage.addedToCart', { productName: product.name }),\n        position: 'top',\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('productsPage.cartAddError'),\n        position: 'top',\n      });\n    }\n  };\n\n  const handleAddToOrderList = (product: ProductWithStock) => {\n    selectedProduct.value = product;\n    showOrderListDialog.value = true;\n  };\n\n  const refreshData = async () => {\n    try {\n      const practiceId = authStore.clinicId;\n      if (!practiceId) {\n        return;\n      }\n\n      await productsStore.refreshData(practiceId);\n      $q.notify({\n        type: 'positive',\n        message: t('productsPage.dataRefreshed'),\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('productsPage.productLoadError'),\n      });\n    }\n  };\n\n  // Store actions\n  const { updateFilters } = productsStore;\n  const { updateCartItemQuantity, removeFromCart, clearCart } = productsStore;\n  const handleCreateOrderList = orderListsStore.createOrderList;\n  const handleAddToExistingOrderList = orderListsStore.addOrderListItem;\n\n  const handleCheckout = () => {\n    $q.notify({\n      type: 'info',\n      message: t('common.comingSoon'),\n    });\n  };\n\n  const handleAdvancedSearch = (criteria: any) => {\n    // Apply advanced search criteria to filters\n    Object.assign(filters, criteria);\n\n    // Update search results count\n    searchResultsCount.value = products.value.length;\n\n    $q.notify({\n      type: 'positive',\n      message: t('productsPage.advancedSearch.resultsFound', {\n        count: products.value.length,\n      }),\n    });\n  };\n\n  const handleSearchPreview = (criteria: any) => {\n    // For preview, we'll simulate the search without actually applying filters\n    const mockCount = Math.floor(Math.random() * products.value.length);\n    searchResultsCount.value = mockCount;\n  };\n\n  // Product CRUD Methods\n  const showCreateProductDialog = () => {\n    selectedProductForEdit.value = null;\n    showProductFormDialog.value = true;\n  };\n\n  const editProduct = (product: ProductWithStock) => {\n    selectedProductForEdit.value = product;\n    showProductFormDialog.value = true;\n  };\n\n  const deleteProduct = (product: ProductWithStock) => {\n    productToDelete.value = product;\n    showDeleteDialog.value = true;\n  };\n\n  const confirmDelete = async () => {\n    if (!productToDelete.value) {\n      return;\n    }\n\n    deleting.value = true;\n    try {\n      await productsStore.deleteProduct(productToDelete.value.id);\n\n      $q.notify({\n        type: 'positive',\n        message: t('products.deleted', { name: productToDelete.value.name }),\n      });\n\n      showDeleteDialog.value = false;\n      productToDelete.value = null;\n\n      // Refresh products list\n      await refreshData();\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('products.deleteError'),\n      });\n    } finally {\n      deleting.value = false;\n    }\n  };\n\n  const onProductSaved = async (product: any) => {\n    showProductFormDialog.value = false;\n    selectedProductForEdit.value = null;\n\n    // Refresh products list to show the changes\n    await refreshData();\n  };\n\n  // Table request handler for sorting and pagination\n  // NOTE: SmartTable handles its own pagination/sorting via useSmartTable composable\n  // const onTableRequest = (props: any) => {\n  //   // Use the composable's handler and then update rowsNumber\n  //   tableRequestHandler(props);\n  //   pagination.value.rowsNumber = products.value.length;\n  // };\n\n  // Lifecycle\n  onMounted(async () => {\n    const practiceId = authStore.clinicId;\n\n    if (practiceId) {\n      // Clear any existing filters first\n      productsStore.clearFilters();\n\n      await productsStore.fetchProducts(practiceId);\n\n      // If no products loaded on first try, wait and retry once\n      if (products.value.length === 0) {\n        // Retrying product loading...\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        await productsStore.fetchProducts(practiceId);\n      }\n    }\n\n    // Initialize filter values with defaults\n    if (productsFilterPreset.defaultFilters) {\n      filterValues.value = {\n        ...productsFilterPreset.defaultFilters,\n      } as FilterValues;\n    }\n\n    // Check user permissions\n    try {\n      canCreate.value = await permissions.canCreateProducts();\n      canEdit.value = await permissions.canEditProducts();\n      canDelete.value = await permissions.canDeleteProducts();\n    } catch (error) {\n      console.error('Error checking permissions:', error);\n      // Default to no permissions on error\n      canCreate.value = false;\n      canEdit.value = false;\n      canDelete.value = false;\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .products-page {\n    .filters-section {\n      margin-bottom: 1.5rem;\n\n      .products-filter-panel {\n        background: var(--q-card-background);\n        border-radius: 8px;\n      }\n    }\n\n    .products-table-container {\n      // Minimal product-specific styling - main table styling handled by global medical-table class\n      .product-info {\n        .product-name {\n          font-weight: var(--font-weight-medium);\n          color: var(--text-primary);\n        }\n\n        .product-brand {\n          font-size: var(--text-sm);\n          color: var(--text-secondary);\n          margin-top: var(--space-1);\n        }\n      }\n\n      .sku-code {\n        font-family: var(--font-family-mono);\n        background: var(--neutral-100);\n        padding: var(--space-1) var(--space-2);\n        border-radius: var(--radius-sm);\n        font-size: var(--text-sm);\n        color: var(--text-secondary);\n      }\n\n      .price-value {\n        font-weight: var(--font-weight-semibold);\n        color: var(--brand-primary);\n      }\n\n      .action-buttons {\n        display: flex;\n        gap: var(--space-1);\n        justify-content: center;\n\n        .q-btn {\n          min-width: 32px;\n          min-height: 32px;\n        }\n      }\n    }\n  }\n\n  // Mobile responsiveness\n  @media (max-width: 768px) {\n    .products-page {\n      .products-table-container {\n        overflow-x: auto;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\SettingsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\StyleGuidePage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\StyleSandbox.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\SuppliersPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 549,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 549,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16715, 16718], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16715, 16718], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 552,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 552,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16760, 16763], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16760, 16763], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 814,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 814,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23954, 23957], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23954, 23957], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 940,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 940,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26992, 26995], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26992, 26995], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('suppliersPage.title')\"\n        :subtitle=\"$t('suppliersPage.subtitle')\"\n        icon=\"corporate_fare\"\n      >\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n            @click=\"loadSuppliers\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            icon=\"cloud_upload\"\n            :label=\"$t('suppliersPage.importSuppliers')\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n            @click=\"importSuppliers\"\n          />\n          <q-btn\n            icon=\"add\"\n            :label=\"$t('suppliersPage.addSupplier')\"\n            unelevated\n            no-caps\n            class=\"app-btn-success\"\n            @click=\"openAddDialog\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- FilterPanel component -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        v-model=\"filterValues\"\n        :preset=\"suppliersFilterPreset\"\n        :loading=\"loading\"\n        collapsible\n        class=\"suppliers-filter-panel\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n      />\n    </div>\n\n    <!-- Suppliers Table -->\n    <div class=\"medical-table\">\n      <q-table\n        :rows=\"filteredSuppliers\"\n        :columns=\"columns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 25 }\"\n        flat\n        bordered\n        separator=\"cell\"\n      >\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"props.row.active ? 'positive' : 'negative'\"\n              :label=\"\n                props.row.active\n                  ? $t('suppliersPage.active')\n                  : $t('suppliersPage.inactive')\n              \"\n              text-color=\"white\"\n              dense\n            />\n          </q-td>\n        </template>\n\n        <template #body-cell-magento_link=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              v-if=\"props.row.magento_vendor_id\"\n              color=\"primary\"\n              :label=\"props.row.magento_vendor_id\"\n              text-color=\"white\"\n              dense\n            />\n            <q-chip\n              v-else\n              color=\"grey-5\"\n              :label=\"$t('suppliersPage.notLinked')\"\n              text-color=\"grey-8\"\n              dense\n            />\n          </q-td>\n        </template>\n\n        <template #body-cell-integration_status=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"column q-gutter-xs\">\n              <q-chip\n                :color=\"getIntegrationTypeColor(props.row.integration_type)\"\n                :label=\"getIntegrationTypeLabel(props.row.integration_type)\"\n                text-color=\"white\"\n                dense\n              />\n              <q-chip\n                v-if=\"props.row.integration_type !== 'manual'\"\n                :color=\"props.row.auto_sync_enabled ? 'positive' : 'grey-5'\"\n                :label=\"\n                  props.row.auto_sync_enabled\n                    ? $t('suppliersPage.autoSyncOn')\n                    : $t('suppliersPage.autoSyncOff')\n                \"\n                :text-color=\"props.row.auto_sync_enabled ? 'white' : 'grey-8'\"\n                dense\n                size=\"sm\"\n              />\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-order_method=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getOrderMethodColor(props.row.order_method)\"\n              :label=\"getOrderMethodLabel(props.row.order_method)\"\n              text-color=\"white\"\n              dense\n            />\n          </q-td>\n        </template>\n\n        <template #body-cell-last_sync=\"props\">\n          <q-td :props=\"props\">\n            <div v-if=\"props.row.last_sync_at\" class=\"text-caption\">\n              {{ formatDate(props.row.last_sync_at) }}\n            </div>\n            <div v-else class=\"text-grey-6 text-caption\">\n              {{ $t('suppliersPage.neverSynced') }}\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row q-gutter-xs\">\n              <q-btn\n                flat\n                round\n                dense\n                icon=\"settings\"\n                size=\"sm\"\n                color=\"primary\"\n                @click=\"configureIntegration(props.row)\"\n              >\n                <q-tooltip>{{\n                  $t('suppliersPage.configureIntegration')\n                }}</q-tooltip>\n              </q-btn>\n              <q-btn\n                v-if=\"canSync(props.row)\"\n                flat\n                round\n                dense\n                icon=\"sync\"\n                size=\"sm\"\n                color=\"positive\"\n                :loading=\"syncing[props.row.id]\"\n                @click=\"syncSupplierProducts(props.row)\"\n              >\n                <q-tooltip>{{ $t('suppliersPage.syncProducts') }}</q-tooltip>\n              </q-btn>\n              <q-btn\n                flat\n                round\n                dense\n                icon=\"edit\"\n                size=\"sm\"\n                @click=\"editSupplier(props.row)\"\n              >\n                <q-tooltip>{{ $t('suppliersPage.editSupplier') }}</q-tooltip>\n              </q-btn>\n              <q-btn\n                flat\n                round\n                dense\n                icon=\"delete\"\n                size=\"sm\"\n                color=\"negative\"\n                @click=\"deleteSupplier(props.row)\"\n              >\n                <q-tooltip>{{ $t('suppliersPage.deleteSupplier') }}</q-tooltip>\n              </q-btn>\n            </div>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Add/Edit Supplier Dialog -->\n    <FormDialog\n      v-model=\"showDialog\"\n      :title=\"\n        editingSupplier\n          ? $t('suppliersPage.editSupplier')\n          : $t('suppliersPage.addSupplier')\n      \"\n      icon=\"business\"\n      size=\"lg\"\n      :loading=\"saving\"\n      @submit=\"saveSupplier\"\n      @cancel=\"closeDialog\"\n    >\n      <div class=\"supplier-form-content q-gutter-md\">\n        <q-input\n          v-model=\"supplierForm.name\"\n          :label=\"$t('suppliersPage.supplierName')\"\n          outlined\n          :rules=\"[val => !!val || $t('validation.required')]\"\n        />\n\n        <q-input\n          v-model=\"supplierForm.contact_email\"\n          :label=\"$t('suppliersPage.contactEmail')\"\n          outlined\n          type=\"email\"\n        />\n\n        <q-input\n          v-model=\"supplierForm.contact_phone\"\n          :label=\"$t('suppliersPage.contactPhone')\"\n          outlined\n        />\n\n        <q-input\n          v-model=\"supplierForm.website\"\n          :label=\"$t('suppliersPage.website')\"\n          outlined\n        />\n\n        <q-input\n          v-model=\"supplierForm.address\"\n          :label=\"$t('suppliersPage.address')\"\n          outlined\n          type=\"textarea\"\n        />\n\n        <div class=\"row q-gutter-md\">\n          <q-input\n            v-model=\"supplierForm.city\"\n            :label=\"$t('suppliersPage.city')\"\n            outlined\n            style=\"flex: 1\"\n          />\n\n          <q-input\n            v-model=\"supplierForm.postal_code\"\n            :label=\"$t('suppliersPage.postalCode')\"\n            outlined\n            style=\"max-width: 150px\"\n          />\n        </div>\n\n        <q-input\n          v-model=\"supplierForm.country\"\n          :label=\"$t('suppliersPage.country')\"\n          outlined\n        />\n\n        <q-input\n          v-model.number=\"supplierForm.magento_vendor_id\"\n          :label=\"$t('suppliersPage.magentoVendorId')\"\n          outlined\n          type=\"number\"\n        />\n\n        <q-input\n          v-model=\"supplierForm.notes\"\n          :label=\"$t('suppliersPage.notes')\"\n          outlined\n          type=\"textarea\"\n        />\n\n        <q-separator />\n\n        <!-- Integration Configuration Section -->\n        <div class=\"text-h6 q-mt-md\">\n          {{ $t('suppliersPage.integrationSettings') }}\n        </div>\n\n        <div class=\"row q-gutter-md\">\n          <q-select\n            v-model=\"supplierForm.integration_type\"\n            :options=\"integrationTypeOptions\"\n            :label=\"$t('suppliersPage.integrationType')\"\n            outlined\n            emit-value\n            map-options\n            style=\"flex: 1\"\n          />\n\n          <q-select\n            v-model=\"supplierForm.order_method\"\n            :options=\"orderMethodOptions\"\n            :label=\"$t('suppliersPage.orderMethod')\"\n            outlined\n            emit-value\n            map-options\n            style=\"flex: 1\"\n          />\n        </div>\n\n        <q-toggle\n          v-model=\"supplierForm.auto_sync_enabled\"\n          :label=\"$t('suppliersPage.autoSyncEnabled')\"\n          :disable=\"supplierForm.integration_type === 'manual'\"\n          color=\"positive\"\n        />\n\n        <!-- Integration Config based on type -->\n        <div\n          v-if=\"supplierForm.integration_type === 'email'\"\n          class=\"q-gutter-md\"\n        >\n          <q-input\n            v-model=\"integrationConfig.order_email\"\n            :label=\"$t('suppliersPage.orderEmail')\"\n            outlined\n            type=\"email\"\n          />\n        </div>\n\n        <div v-if=\"supplierForm.integration_type === 'api'\" class=\"q-gutter-md\">\n          <q-input\n            v-model=\"integrationConfig.api_endpoint\"\n            :label=\"$t('suppliersPage.apiEndpoint')\"\n            outlined\n          />\n          <q-input\n            v-model=\"integrationConfig.api_key\"\n            :label=\"$t('suppliersPage.apiKey')\"\n            outlined\n            type=\"password\"\n          />\n        </div>\n\n        <div v-if=\"supplierForm.integration_type === 'edi'\" class=\"q-gutter-md\">\n          <q-input\n            v-model=\"integrationConfig.edi_endpoint\"\n            :label=\"$t('suppliersPage.ediEndpoint')\"\n            outlined\n          />\n          <q-input\n            v-model=\"integrationConfig.edi_partner_id\"\n            :label=\"$t('suppliersPage.ediPartnerId')\"\n            outlined\n          />\n        </div>\n\n        <q-toggle\n          v-model=\"supplierForm.active\"\n          :label=\"$t('suppliersPage.activeSupplier')\"\n          color=\"positive\"\n        />\n      </div>\n    </FormDialog>\n\n    <!-- Integration Configuration Dialog -->\n    <q-dialog v-model=\"showIntegrationDialog\">\n      <q-card style=\"min-width: 600px\">\n        <q-card-section>\n          <div class=\"text-h6\">\n            {{ $t('suppliersPage.configureIntegration') }} -\n            {{ selectedSupplier?.name }}\n          </div>\n        </q-card-section>\n\n        <q-card-section>\n          <div class=\"q-gutter-md\">\n            <q-banner\n              v-if=\"selectedSupplier?.integration_type === 'manual'\"\n              class=\"bg-grey-2\"\n            >\n              <template #avatar>\n                <q-icon name=\"info\" color=\"grey-7\" />\n              </template>\n              {{ $t('suppliersPage.manualIntegrationInfo') }}\n            </q-banner>\n\n            <div v-else>\n              <div class=\"row q-gutter-md q-mb-md\">\n                <div class=\"col\">\n                  <q-card flat bordered>\n                    <q-card-section>\n                      <div class=\"text-subtitle2\">\n                        {{ $t('suppliersPage.currentConfig') }}\n                      </div>\n                      <div class=\"q-mt-sm\">\n                        <div>\n                          <strong\n                            >{{ $t('suppliersPage.integrationType') }}:</strong\n                          >\n                          {{\n                            getIntegrationTypeLabel(\n                              selectedSupplier?.integration_type ?? 'manual'\n                            )\n                          }}\n                        </div>\n                        <div>\n                          <strong\n                            >{{ $t('suppliersPage.orderMethod') }}:</strong\n                          >\n                          {{\n                            getOrderMethodLabel(\n                              selectedSupplier?.order_method ?? 'email'\n                            )\n                          }}\n                        </div>\n                        <div>\n                          <strong>{{ $t('suppliersPage.autoSync') }}:</strong>\n                          <q-chip\n                            :color=\"\n                              selectedSupplier?.auto_sync_enabled\n                                ? 'positive'\n                                : 'negative'\n                            \"\n                            :label=\"\n                              selectedSupplier?.auto_sync_enabled\n                                ? $t('common.yes')\n                                : $t('common.no')\n                            \"\n                            text-color=\"white\"\n                            dense\n                          />\n                        </div>\n                        <div v-if=\"selectedSupplier?.last_sync_at\">\n                          <strong>{{ $t('suppliersPage.lastSync') }}:</strong>\n                          {{ formatDate(selectedSupplier.last_sync_at) }}\n                        </div>\n                      </div>\n                    </q-card-section>\n                  </q-card>\n                </div>\n              </div>\n\n              <div class=\"row q-gutter-md\">\n                <q-btn\n                  v-if=\"selectedSupplier && canSync(selectedSupplier)\"\n                  color=\"positive\"\n                  icon=\"sync\"\n                  :label=\"$t('suppliersPage.syncNow')\"\n                  :loading=\"syncing[selectedSupplier.id]\"\n                  unelevated\n                  @click=\"syncSupplierProducts(selectedSupplier)\"\n                />\n                <q-btn\n                  color=\"primary\"\n                  icon=\"settings\"\n                  :label=\"$t('suppliersPage.editSettings')\"\n                  unelevated\n                  @click=\"editSupplierIntegration\"\n                />\n                <q-btn\n                  color=\"secondary\"\n                  icon=\"send\"\n                  :label=\"$t('suppliersPage.testConnection')\"\n                  unelevated\n                  @click=\"testConnection\"\n                />\n              </div>\n            </div>\n          </div>\n        </q-card-section>\n\n        <q-card-actions align=\"right\">\n          <q-btn\n            flat\n            :label=\"$t('common.close')\"\n            @click=\"closeIntegrationDialog\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import { suppliersFilterPreset } from '@/presets/filters/suppliers';\n  import { supabase } from 'src/services/supabase';\n  import { monitoringService } from 'src/services/monitoring';\n  import { useTableSorting } from 'src/composables/useTableSorting';\n  import type { Tables } from '@/types/supabase.generated';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n\n  type Supplier = Tables<'suppliers'>;\n\n  const $q = useQuasar();\n  const { t } = useI18n();\n\n  // Refs\n  const loading = ref(false);\n  const saving = ref(false);\n  const showDialog = ref(false);\n  const showIntegrationDialog = ref(false);\n  const editingSupplier = ref<Supplier | null>(null);\n  const selectedSupplier = ref<Supplier | null>(null);\n  const syncing = ref<Record<string, boolean>>({});\n\n  // New filter state for FilterPanel\n  const filterValues = ref<FilterValues>({});\n\n  // Form data\n  const supplierForm = ref({\n    name: '',\n    code: '',\n    contact_email: '',\n    contact_phone: '',\n    contact_person: '',\n    website: '',\n    address: '',\n    city: '',\n    postal_code: '',\n    country: 'Netherlands',\n    magento_vendor_id: null as number | null,\n    notes: '',\n    active: true,\n    integration_type: 'manual',\n    order_method: 'manual',\n    auto_sync_enabled: false,\n    integration_config: {},\n  });\n\n  // Integration config separate object\n  const integrationConfig = ref<any>({});\n\n  // Data\n  const suppliers = ref<any[]>([]);\n\n  // Integration type options\n  const integrationTypeOptions = computed(() => [\n    { label: t('suppliersPage.integrationTypes.manual'), value: 'manual' },\n    { label: t('suppliersPage.integrationTypes.email'), value: 'email' },\n    { label: t('suppliersPage.integrationTypes.api'), value: 'api' },\n    { label: t('suppliersPage.integrationTypes.edi'), value: 'edi' },\n    { label: t('suppliersPage.integrationTypes.magento'), value: 'magento' },\n  ]);\n\n  // Order method options\n  const orderMethodOptions = computed(() => [\n    { label: t('suppliersPage.orderMethods.manual'), value: 'manual' },\n    { label: t('suppliersPage.orderMethods.email'), value: 'email' },\n    { label: t('suppliersPage.orderMethods.api'), value: 'api' },\n    { label: t('suppliersPage.orderMethods.pdf'), value: 'pdf' },\n  ]);\n\n  // Helper functions for UI\n  const getIntegrationTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      manual: 'grey-6',\n      email: 'blue',\n      api: 'green',\n      edi: 'purple',\n      magento: 'orange',\n    };\n    return colors[type] || 'grey-6';\n  };\n\n  const getIntegrationTypeLabel = (type: string) => {\n    const option = integrationTypeOptions.value.find(opt => opt.value === type);\n    return option?.label || type;\n  };\n\n  const getOrderMethodColor = (method: string) => {\n    const colors: Record<string, string> = {\n      manual: 'grey-6',\n      email: 'blue',\n      api: 'green',\n      pdf: 'orange',\n    };\n    return colors[method] || 'grey-6';\n  };\n\n  const getOrderMethodLabel = (method: string) => {\n    const option = orderMethodOptions.value.find(opt => opt.value === method);\n    return option?.label || method;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  const canSync = (supplier: Supplier) => {\n    return supplier.integration_type !== 'manual' && supplier.auto_sync_enabled;\n  };\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Filter logic is handled by computed property\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    filterValues.value = {};\n    if (suppliersFilterPreset.defaultFilters) {\n      Object.assign(filterValues.value, suppliersFilterPreset.defaultFilters);\n    }\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Computed\n  const filteredSuppliers = computed(() => {\n    let filtered = suppliers.value;\n\n    // Apply search filter\n    const searchTerm = filterValues.value.search;\n    if (searchTerm) {\n      const search = String(searchTerm).toLowerCase();\n      filtered = filtered.filter(\n        supplier =>\n          supplier.name?.toLowerCase().includes(search) ||\n          supplier.contact_email?.toLowerCase().includes(search) ||\n          supplier.contact_phone?.toLowerCase().includes(search)\n      );\n    }\n\n    // Apply status filter\n    const statusFilter = filterValues.value.status;\n    if (\n      statusFilter !== undefined &&\n      statusFilter !== null &&\n      statusFilter !== ''\n    ) {\n      const isActive = Boolean(statusFilter);\n      filtered = filtered.filter(supplier => supplier.active === isActive);\n    }\n\n    // Apply integration type filter\n    const integrationType = filterValues.value.integration_type;\n    if (integrationType) {\n      filtered = filtered.filter(supplier => {\n        if (integrationType === 'manual') {\n          return !supplier.magento_vendor_id;\n        } else if (integrationType === 'magento') {\n          return supplier.magento_vendor_id;\n        } else if (integrationType === 'api') {\n          // Add logic for API integration when available\n          return false;\n        }\n        return true;\n      });\n    }\n\n    // Apply country filter\n    const country = filterValues.value.country;\n    if (country) {\n      filtered = filtered.filter(supplier => supplier.country === country);\n    }\n\n    // Apply city filter\n    const city = filterValues.value.city;\n    if (city) {\n      filtered = filtered.filter(supplier => supplier.city === city);\n    }\n\n    return filtered;\n  });\n\n  // Table columns with enhanced configuration\n  const columns = computed(() => [\n    {\n      name: 'name',\n      label: t('suppliersPage.name'),\n      field: 'name',\n      align: 'left' as const,\n      sortable: true,\n      classes: 'col-name',\n      headerClasses: 'col-name',\n    },\n    {\n      name: 'integration_status',\n      label: t('suppliersPage.integrationStatus'),\n      field: 'integration_type',\n      align: 'center' as const,\n      sortable: true,\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'order_method',\n      label: t('suppliersPage.orderMethod'),\n      field: 'order_method',\n      align: 'center' as const,\n      sortable: true,\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'contact_email',\n      label: t('suppliersPage.email'),\n      field: 'contact_email',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'contact_phone',\n      label: t('suppliersPage.phone'),\n      field: 'contact_phone',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'city',\n      label: t('suppliersPage.city'),\n      field: 'city',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'last_sync',\n      label: t('suppliersPage.lastSync'),\n      field: 'last_sync_at',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'status',\n      label: t('suppliersPage.status'),\n      field: 'active',\n      align: 'center' as const,\n      sortable: true,\n      classes: 'col-status',\n      headerClasses: 'col-status',\n    },\n    {\n      name: 'actions',\n      label: t('suppliersPage.actions'),\n      field: '',\n      align: 'center' as const,\n      sortable: false,\n      classes: 'col-actions',\n      headerClasses: 'col-actions',\n    },\n  ]);\n\n  // Methods\n  const loadSuppliers = async () => {\n    try {\n      loading.value = true;\n      const { data, error } = await supabase\n        .from('suppliers')\n        .select('*')\n        .order('name');\n\n      if (error) {\n        throw error;\n      }\n\n      suppliers.value = data || [];\n    } catch (error: unknown) {\n      console.error('Failed to load suppliers:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('suppliersPage.loadError'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const openAddDialog = () => {\n    editingSupplier.value = null;\n    supplierForm.value = {\n      name: '',\n      code: '',\n      contact_email: '',\n      contact_phone: '',\n      contact_person: '',\n      website: '',\n      address: '',\n      city: '',\n      postal_code: '',\n      country: 'Netherlands',\n      magento_vendor_id: null,\n      notes: '',\n      active: true,\n      integration_type: 'manual',\n      order_method: 'manual',\n      auto_sync_enabled: false,\n      integration_config: {},\n    };\n    integrationConfig.value = {};\n    showDialog.value = true;\n  };\n\n  const editSupplier = (supplier: Supplier) => {\n    editingSupplier.value = supplier;\n    supplierForm.value = { ...supplier } as any;\n    integrationConfig.value = supplier.integration_config || {};\n    showDialog.value = true;\n  };\n\n  const saveSupplier = async () => {\n    try {\n      saving.value = true;\n\n      // Merge integration config into the supplier form\n      const supplierData = {\n        ...supplierForm.value,\n        integration_config: integrationConfig.value,\n      };\n\n      if (editingSupplier.value) {\n        // Update existing supplier\n        const { error } = await supabase\n          .from('suppliers')\n          .update(supplierData)\n          .eq('id', editingSupplier.value.id);\n\n        if (error) {\n          throw error;\n        }\n\n        $q.notify({\n          type: 'positive',\n          message: t('suppliersPage.supplierUpdated'),\n        });\n      } else {\n        // Create new supplier\n        const { error } = await supabase\n          .from('suppliers')\n          .insert([supplierData]);\n\n        if (error) {\n          throw error;\n        }\n\n        $q.notify({\n          type: 'positive',\n          message: t('suppliersPage.supplierCreated'),\n        });\n      }\n\n      showDialog.value = false;\n      await loadSuppliers();\n    } catch (error: unknown) {\n      console.error('Failed to save supplier:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('suppliersPage.saveError'),\n      });\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const deleteSupplier = async (supplier: Supplier) => {\n    try {\n      const confirmed = await new Promise(resolve => {\n        $q.dialog({\n          title: t('suppliersPage.confirmDelete'),\n          message: t('suppliersPage.confirmDeleteMessage', {\n            name: supplier.name,\n          }),\n          cancel: true,\n          persistent: true,\n        })\n          .onOk(() => resolve(true))\n          .onCancel(() => resolve(false));\n      });\n\n      if (!confirmed) {\n        return;\n      }\n\n      const { error } = await supabase\n        .from('suppliers')\n        .delete()\n        .eq('id', supplier.id);\n\n      if (error) {\n        throw error;\n      }\n\n      $q.notify({\n        type: 'positive',\n        message: t('suppliersPage.supplierDeleted'),\n      });\n\n      await loadSuppliers();\n    } catch (error: unknown) {\n      console.error('Failed to delete supplier:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('suppliersPage.deleteError'),\n      });\n    }\n  };\n\n  const closeDialog = () => {\n    showDialog.value = false;\n    editingSupplier.value = null;\n  };\n\n  const importSuppliers = () => {\n    $q.notify({\n      type: 'info',\n      message: t('common.comingSoon'),\n    });\n  };\n\n  const configureIntegration = (supplier: Supplier) => {\n    selectedSupplier.value = supplier;\n    showIntegrationDialog.value = true;\n  };\n\n  const closeIntegrationDialog = () => {\n    showIntegrationDialog.value = false;\n    selectedSupplier.value = null;\n  };\n\n  const editSupplierIntegration = () => {\n    editingSupplier.value = selectedSupplier.value;\n    supplierForm.value = { ...selectedSupplier.value } as any;\n    showDialog.value = true;\n    closeIntegrationDialog();\n  };\n\n  const testConnection = async () => {\n    $q.notify({\n      type: 'info',\n      message: t('suppliersPage.testingConnection'),\n    });\n    try {\n      // Simulate connection test - in real implementation, this would call the actual integration\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      $q.notify({\n        type: 'positive',\n        message: t('suppliersPage.connectionSuccessful'),\n      });\n    } catch (error: unknown) {\n      $q.notify({\n        type: 'negative',\n        message: t('suppliersPage.connectionFailed', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n        }),\n      });\n    }\n  };\n\n  const syncSupplierProducts = async (supplier: Supplier) => {\n    if (!canSync(supplier)) {\n      $q.notify({\n        type: 'warning',\n        message: t('suppliersPage.syncDisabledWarning'),\n      });\n      return;\n    }\n\n    syncing.value[supplier.id] = true;\n    try {\n      // Call the sync function we created in the database\n      const { data, error } = await supabase.rpc('sync_supplier_products', {\n        supplier_uuid: supplier.id,\n      });\n\n      if (error) {\n        throw error;\n      }\n\n      const result = data as {\n        success?: boolean;\n        products_synced?: number;\n        error?: string;\n      } | null;\n      if (result?.success) {\n        $q.notify({\n          type: 'positive',\n          message: t('suppliersPage.syncSuccess', {\n            name: supplier.name,\n            count: result.products_synced ?? 0,\n          }),\n        });\n        // Reload suppliers to get updated sync time\n        await loadSuppliers();\n      } else {\n        throw new Error(result?.error || 'Sync failed');\n      }\n    } catch (error: unknown) {\n      $q.notify({\n        type: 'negative',\n        message: t('suppliersPage.syncFailed', {\n          name: supplier.name,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        }),\n      });\n    } finally {\n      syncing.value[supplier.id] = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    await loadSuppliers();\n\n    // Initialize filter values with defaults\n    if (suppliersFilterPreset.defaultFilters) {\n      Object.assign(filterValues.value, suppliersFilterPreset.defaultFilters);\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .filters-section {\n    .suppliers-filter-panel {\n      // Custom styling for the FilterPanel in suppliers page\n    }\n  }\n\n  .btn-modern {\n    border-radius: 8px;\n    font-weight: 500;\n    text-transform: none;\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\auth\\LoginPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\auth\\MagicJoinPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6196, 6199], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6196, 6199], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6238, 6241], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6238, 6241], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8860, 8863], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8860, 8863], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 301,
        "column": 11,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 301,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [9097, 9173],
              "text": "// @ts-expect-error - loginResult.user is guaranteed to exist when success is true"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 325,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 325,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9781, 9784], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9781, 9784], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 365,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 365,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10868, 10871], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10868, 10871], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 436,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 436,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12880, 12883], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12880, 12883], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 443,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 443,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13052, 13055], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13052, 13055], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14198, 14201], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14198, 14201], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <div class=\"magic-join-page\">\n    <!-- Main Join Card -->\n    <q-card class=\"join-card\" flat bordered>\n      <q-card-section class=\"text-center\">\n        <!-- Step Indicator -->\n        <div class=\"step-indicator\">\n          <div class=\"step-icon\">\n            <q-icon name=\"auto_awesome\" size=\"2.5rem\" color=\"primary\" />\n          </div>\n          <h2>{{ $t('magicJoin.enterCode') }}</h2>\n          <p class=\"step-description\">{{ $t('magicJoin.codeExplanation') }}</p>\n        </div>\n\n        <!-- Magic Code Input -->\n        <div class=\"code-input-section\">\n          <q-input\n            v-model=\"magicCode\"\n            :placeholder=\"$t('magicJoin.placeholder')\"\n            outlined\n            size=\"lg\"\n            class=\"magic-input\"\n            :class=\"{ 'has-code': magicCode.length > 0 }\"\n            autofocus\n            @input=\"handleCodeInput\"\n          >\n            <template #prepend>\n              <q-icon name=\"auto_awesome\" />\n            </template>\n            <template #append>\n              <q-btn\n                v-if=\"magicCode\"\n                icon=\"clear\"\n                flat\n                round\n                @click=\"clearCode\"\n              />\n            </template>\n          </q-input>\n\n          <!-- Code Preview -->\n          <div v-if=\"codePreview\" class=\"code-preview\">\n            <div class=\"preview-icon\">{{ codePreview.emoji }}</div>\n            <div class=\"preview-text\">\n              <div class=\"practice-name\">{{ codePreview.practice }}</div>\n              <div class=\"access-type\">{{ codePreview.access }}</div>\n            </div>\n            <q-icon name=\"check_circle\" color=\"positive\" size=\"md\" />\n          </div>\n\n          <!-- Join Button -->\n          <q-btn\n            v-if=\"magicCode.length >= 5\"\n            :label=\"$t('magicJoin.joinNow')\"\n            color=\"primary\"\n            size=\"lg\"\n            unelevated\n            class=\"join-button\"\n            :loading=\"joining\"\n            @click=\"handleJoin\"\n          />\n        </div>\n\n        <!-- Alternative Methods -->\n        <div class=\"alternative-methods\">\n          <div class=\"divider\">\n            <span>{{ $t('common.or') }}</span>\n          </div>\n\n          <div class=\"alt-buttons\">\n            <q-btn\n              :label=\"$t('magicJoin.scanQR')\"\n              icon=\"qr_code_scanner\"\n              flat\n              class=\"alt-btn\"\n              @click=\"showQRScanner = true\"\n            />\n            <q-btn\n              :label=\"$t('magicJoin.tryDemo')\"\n              icon=\"science\"\n              flat\n              class=\"alt-btn demo-btn\"\n              @click=\"tryDemo\"\n            />\n          </div>\n        </div>\n      </q-card-section>\n    </q-card>\n\n    <!-- How It Works -->\n    <q-card class=\"how-it-works-card\" flat>\n      <q-card-section>\n        <div class=\"how-header\">\n          <q-icon name=\"help_outline\" />\n          <span>{{ $t('magicJoin.howItWorks') }}</span>\n        </div>\n\n        <div class=\"steps\">\n          <div class=\"step\">\n            <div class=\"step-number\">1</div>\n            <div class=\"step-content\">\n              <h4>{{ $t('magicJoin.step1') }}</h4>\n              <p>{{ $t('magicJoin.step1Detail') }}</p>\n            </div>\n          </div>\n          <div class=\"step\">\n            <div class=\"step-number\">2</div>\n            <div class=\"step-content\">\n              <h4>{{ $t('magicJoin.step2') }}</h4>\n              <p>{{ $t('magicJoin.step2Detail') }}</p>\n            </div>\n          </div>\n          <div class=\"step\">\n            <div class=\"step-number\">3</div>\n            <div class=\"step-content\">\n              <h4>{{ $t('magicJoin.step3') }}</h4>\n              <p>{{ $t('magicJoin.step3Detail') }}</p>\n            </div>\n          </div>\n        </div>\n      </q-card-section>\n    </q-card>\n\n    <!-- QR Scanner Dialog -->\n    <q-dialog v-model=\"showQRScanner\">\n      <q-card style=\"width: 90vw; max-width: 400px\">\n        <q-card-section>\n          <div class=\"text-h6 text-center\">{{ $t('magicJoin.scanTitle') }}</div>\n          <div class=\"scanner-area\">\n            <q-icon name=\"qr_code_scanner\" size=\"8rem\" color=\"grey-5\" />\n            <p>{{ $t('magicJoin.scanInstructions') }}</p>\n            <!-- Real QR scanner would go here -->\n          </div>\n        </q-card-section>\n        <q-card-actions align=\"center\">\n          <q-btn\n            flat\n            :label=\"$t('common.cancel')\"\n            @click=\"showQRScanner = false\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n\n    <!-- Welcome Dialog -->\n    <q-dialog v-model=\"showWelcome\" persistent>\n      <q-card class=\"welcome-dialog\">\n        <q-card-section class=\"text-center\">\n          <div class=\"welcome-icon\">\n            <q-icon name=\"celebration\" size=\"4rem\" color=\"primary\" />\n          </div>\n          <h3>{{ $t('magicJoin.welcomeTitle') }}</h3>\n          <p>{{ welcomeMessage }}</p>\n          <q-btn\n            :label=\"$t('magicJoin.getStarted')\"\n            color=\"primary\"\n            size=\"lg\"\n            unelevated\n            @click=\"finishJoin\"\n          />\n        </q-card-section>\n      </q-card>\n    </q-dialog>\n\n    <!-- Upgrade To Member Dialog -->\n    <UpgradeToMemberDialog\n      v-model=\"showUpgradeDialog\"\n      :invite=\"currentInvite\"\n      :practice=\"currentPractice\"\n      @upgrade-completed=\"handleUpgradeCompleted\"\n      @continue-as-guest=\"handleContinueAsGuest\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { PermanentUserService } from 'src/services/permanentUsers';\n  import { MagicInviteService } from 'src/services/magicInvites';\n  import UpgradeToMemberDialog from 'src/components/auth/UpgradeToMemberDialog.vue';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const router = useRouter();\n\n  // State\n  const magicCode = ref('');\n  const joining = ref(false);\n  const showQRScanner = ref(false);\n  const showWelcome = ref(false);\n  const welcomeMessage = ref('');\n\n  // Upgrade Flow State\n  const showUpgradeDialog = ref(false);\n  const currentInvite = ref<any>(null);\n  const currentPractice = ref<any>(null);\n  const detectedLoginType = ref<'invite' | 'personal' | 'invalid' | null>(null);\n\n  // Computed\n  const codePreview = computed(() => {\n    if (magicCode.value.length < 5) {\n      return null;\n    }\n\n    // Demo examples\n    if (magicCode.value.toLowerCase().includes('demo')) {\n      return {\n        emoji: '🏥',\n        practice: 'Demo Kliniek',\n        access: t('magicJoin.demoAccess'),\n      };\n    }\n\n    if (magicCode.value.includes('🏥')) {\n      return {\n        emoji: '🏥',\n        practice: 'Medisch Centrum Amsterdam',\n        access: t('magicJoin.memberAccess'),\n      };\n    }\n\n    return null;\n  });\n\n  // Methods\n  const handleCodeInput = () => {\n    // Clean and format input\n    magicCode.value = magicCode.value\n      .toUpperCase()\n      // Allow letters, numbers, and a curated set of emoji; avoid multi-codepoint classes\n      .replace(/(?![\\p{L}\\p{N}]|🏥|💊|🦷|🔬|🩺|💉|⚕️|✨|🌟)./gu, '');\n  };\n\n  const clearCode = () => {\n    magicCode.value = '';\n  };\n\n  // 🧠 SMART LOGIN DETECTION & VALIDATION\n  const handleJoin = async () => {\n    if (!magicCode.value || magicCode.value.length < 6) {\n      $q.notify({\n        type: 'negative',\n        message: t('magicJoin.invalidCode'),\n        position: 'top-right',\n      });\n      return;\n    }\n\n    joining.value = true;\n\n    try {\n      // 🧠 SMART DETECTION: Is this an invite code or personal code?\n      const loginTypeResult = await PermanentUserService.detectLoginType(\n        magicCode.value\n      );\n      detectedLoginType.value = loginTypeResult.type;\n\n      if (loginTypeResult.type === 'personal') {\n        // 🚀 DIRECT LOGIN - This is a personal magic code\n        await handlePersonalCodeLogin(loginTypeResult.data);\n      } else if (loginTypeResult.type === 'invite') {\n        // 📧 INVITE CODE - Check if it's for permanent upgrade\n        await handleInviteCode(loginTypeResult.data);\n      } else {\n        // ❌ INVALID CODE - Fallback to demo for development\n        if (magicCode.value.toLowerCase().includes('demo')) {\n          await handleDemoLogin();\n        } else {\n          $q.notify({\n            type: 'negative',\n            message: t('magicJoin.invalidCode'),\n            position: 'top-right',\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error validating code:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('magicJoin.joinError'),\n        position: 'top-right',\n      });\n    } finally {\n      joining.value = false;\n    }\n  };\n\n  // 🚀 Handle Personal Magic Code Login (Existing Team Member)\n  const handlePersonalCodeLogin = async (userData: any) => {\n    try {\n      const loginResult = await PermanentUserService.validatePersonalMagicCode(\n        magicCode.value\n      );\n\n      if (loginResult.success) {\n        welcomeMessage.value = t('magicJoin.welcomeBack', {\n          // @ts-ignore - loginResult.user is guaranteed to exist when success is true\n          name: loginResult.user.full_name,\n        });\n        showWelcome.value = true;\n\n        $q.notify({\n          type: 'positive',\n          message: t('magicJoin.personalCodeSuccess'),\n          position: 'top-right',\n          timeout: 3000,\n        });\n      } else {\n        throw new Error(loginResult.error);\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('magicJoin.personalCodeError'),\n        position: 'top-right',\n      });\n    }\n  };\n\n  // 📧 Handle Invite Code (Potential Upgrade to Permanent)\n  const handleInviteCode = async (inviteData: any) => {\n    try {\n      // Validate the invite code using MagicInviteService\n      const validationResult = await MagicInviteService.validateMagicCode(\n        magicCode.value\n      );\n\n      if (!validationResult) {\n        $q.notify({\n          type: 'negative',\n          message: t('magicJoin.invalidCode'),\n          position: 'top-right',\n        });\n        return;\n      }\n\n      // Check if invite is expired\n      if (\n        validationResult.expires_at &&\n        new Date(validationResult.expires_at) < new Date()\n      ) {\n        $q.notify({\n          type: 'negative',\n          message: t('magicJoin.expiredCode'),\n          position: 'top-right',\n        });\n        return;\n      }\n\n      // Check if invite has reached max uses\n      if (validationResult.current_uses >= validationResult.max_uses) {\n        $q.notify({\n          type: 'negative',\n          message: t('magicJoin.maxUsesReached'),\n          position: 'top-right',\n        });\n        return;\n      }\n\n      // Set current practice and invite data\n      currentPractice.value = (validationResult as any).practices;\n      currentInvite.value = validationResult;\n\n      // Update last_used_at timestamp and increment usage\n      await MagicInviteService.incrementInviteUsage(validationResult.id);\n\n      // 🎯 CHECK: Is this a permanent role invite?\n      const permanentRoles = ['assistant', 'admin', 'member', 'manager'];\n      const isPermanentInvite = permanentRoles.includes(\n        validationResult.target_role?.toLowerCase()\n      );\n\n      if (isPermanentInvite) {\n        // 🚀 SHOW UPGRADE DIALOG\n        showUpgradeDialog.value = true;\n\n        $q.notify({\n          type: 'info',\n          message: t('magicJoin.permanentInviteDetected'),\n          position: 'top-right',\n          timeout: 4000,\n        });\n      } else {\n        // 👤 REGULAR GUEST ACCESS\n        welcomeMessage.value = t('magicJoin.welcomeMessage', {\n          practice: currentPractice.value.name,\n        });\n        showWelcome.value = true;\n\n        $q.notify({\n          type: 'positive',\n          message: t('magicJoin.guestAccessGranted'),\n          position: 'top-right',\n          timeout: 2000,\n        });\n      }\n    } catch (error) {\n      console.error('Error validating invite code:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('magicJoin.validationError'),\n        position: 'top-right',\n      });\n    }\n  };\n\n  // 🎮 Handle Demo Login (Development)\n  const handleDemoLogin = async () => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      welcomeMessage.value = t('magicJoin.welcomeMessage', {\n        practice: t('demo.clinicName'),\n      });\n      showWelcome.value = true;\n\n      $q.notify({\n        type: 'positive',\n        message: t('magicJoin.demoAccess'),\n        position: 'top-right',\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: t('magicJoin.joinError'),\n        position: 'top-right',\n      });\n    }\n  };\n\n  // 🚀 UPGRADE FLOW HANDLERS\n  const handleUpgradeCompleted = async (upgradeResult: any) => {\n    try {\n      $q.loading.show({\n        message: t('upgrade.creatingAccount'),\n      });\n\n      // Create the permanent user account\n      const createRequest: any = {\n        practice_id: currentInvite.value.practice_id,\n        invite_id: currentInvite.value.id,\n        full_name: upgradeResult.name,\n        role: currentInvite.value.target_role,\n        department: currentInvite.value.department,\n        login_method: upgradeResult.method,\n        email: upgradeResult.email,\n        password: upgradeResult.password, // Only if email method\n      };\n\n      // Add device_fingerprint only if method is device_remember\n      if (upgradeResult.method === 'device_remember') {\n        createRequest.device_fingerprint =\n          PermanentUserService.getDeviceFingerprint();\n      }\n\n      const result =\n        await PermanentUserService.createPermanentUser(createRequest);\n\n      if (result.success) {\n        // Show success with personal code if applicable\n        let successMessage = t('upgrade.accountCreated');\n        if (result.personal_code) {\n          successMessage += ` ${t('upgrade.yourCodeIs') || 'Je code is'}: ${\n            result.personal_code\n          }`;\n        }\n\n        welcomeMessage.value = successMessage;\n        showWelcome.value = true;\n\n        const notifyOptions: any = {\n          type: 'positive',\n          message: t('upgrade.accountCreated'),\n          position: 'top-right',\n          timeout: 8000,\n        };\n\n        if (result.personal_code) {\n          notifyOptions.actions = [\n            {\n              label: t('common.copy') || 'Kopieer',\n              color: 'white',\n              handler: () =>\n                navigator.clipboard?.writeText(result.personal_code || ''),\n            },\n          ];\n        }\n\n        $q.notify(notifyOptions);\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      console.error('Error creating permanent account:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('upgrade.createError') || 'Fout bij aanmaken account',\n        position: 'top-right',\n      });\n    } finally {\n      $q.loading.hide();\n    }\n  };\n\n  const handleContinueAsGuest = () => {\n    // Continue with the regular guest flow\n    if (currentPractice.value) {\n      welcomeMessage.value = t('magicJoin.welcomeMessage', {\n        practice: currentPractice.value.name,\n      });\n      showWelcome.value = true;\n    }\n  };\n\n  const tryDemo = () => {\n    magicCode.value = '🏥DEMO✨2024';\n    handleCodeInput();\n  };\n\n  const finishJoin = () => {\n    showWelcome.value = false;\n    router.push('/dashboard');\n  };\n</script>\n\n<style scoped lang=\"scss\">\n  .magic-join-page {\n    max-width: 500px;\n    margin: 0 auto;\n\n    .join-card {\n      width: 100%;\n      border-radius: 16px;\n      margin-bottom: 2rem;\n\n      .step-indicator {\n        margin-bottom: 2rem;\n\n        .step-icon {\n          margin-bottom: 1rem;\n        }\n\n        h2 {\n          margin: 0 0 0.5rem;\n          color: #1976d2;\n          font-size: 1.5rem;\n        }\n\n        .step-description {\n          color: #666;\n          margin: 0;\n        }\n      }\n\n      .code-input-section {\n        .magic-input {\n          margin-bottom: 1rem;\n\n          :deep(.q-field__control) {\n            font-size: 1.2rem;\n            height: 60px;\n          }\n\n          &.has-code :deep(.q-field__control) {\n            border-color: #4caf50;\n            background: rgba(76, 175, 80, 0.05);\n          }\n        }\n\n        .code-preview {\n          display: flex;\n          align-items: center;\n          gap: 1rem;\n          padding: 1rem;\n          background: #f8f9fa;\n          border-radius: 12px;\n          margin-bottom: 1.5rem;\n\n          .preview-icon {\n            font-size: 2rem;\n          }\n\n          .preview-text {\n            flex: 1;\n            text-align: left;\n\n            .practice-name {\n              font-weight: 600;\n              color: #1976d2;\n            }\n\n            .access-type {\n              color: #666;\n              font-size: 0.9rem;\n            }\n          }\n        }\n\n        .join-button {\n          width: 100%;\n          height: 50px;\n          border-radius: 12px;\n          font-size: 1.1rem;\n          font-weight: 600;\n          margin-bottom: 1.5rem;\n        }\n      }\n\n      .alternative-methods {\n        .divider {\n          position: relative;\n          text-align: center;\n          margin: 1.5rem 0;\n\n          &::before {\n            content: '';\n            position: absolute;\n            top: 50%;\n            left: 0;\n            right: 0;\n            height: 1px;\n            background: #ddd;\n          }\n\n          span {\n            background: white;\n            padding: 0 1rem;\n            color: #666;\n            font-size: 0.9rem;\n          }\n        }\n\n        .alt-buttons {\n          display: flex;\n          gap: 1rem;\n          justify-content: center;\n\n          .alt-btn {\n            color: #666;\n            text-transform: none;\n\n            &.demo-btn {\n              color: #ff8f00;\n            }\n          }\n        }\n      }\n    }\n\n    .how-it-works-card {\n      width: 100%;\n      border-radius: 16px;\n      background: rgba(255, 255, 255, 0.7);\n\n      .how-header {\n        display: flex;\n        align-items: center;\n        gap: 0.5rem;\n        margin-bottom: 1.5rem;\n        color: #666;\n        font-weight: 500;\n      }\n\n      .steps {\n        .step {\n          display: flex;\n          gap: 1rem;\n          margin-bottom: 1.5rem;\n\n          .step-number {\n            width: 32px;\n            height: 32px;\n            border-radius: 50%;\n            background: #1976d2;\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-weight: 600;\n            flex-shrink: 0;\n          }\n\n          .step-content {\n            h4 {\n              margin: 0 0 0.5rem;\n              color: #1976d2;\n              font-size: 1rem;\n            }\n\n            p {\n              margin: 0;\n              color: #666;\n              font-size: 0.9rem;\n              line-height: 1.4;\n            }\n          }\n        }\n      }\n    }\n\n    .scanner-area {\n      text-align: center;\n      padding: 2rem;\n      color: #666;\n\n      p {\n        margin-top: 1rem;\n      }\n    }\n\n    .welcome-dialog {\n      min-width: 300px;\n      border-radius: 16px;\n\n      .welcome-icon {\n        margin-bottom: 1rem;\n      }\n\n      h3 {\n        margin: 0 0 1rem;\n        color: #1976d2;\n      }\n\n      p {\n        margin: 0 0 2rem;\n        color: #666;\n        line-height: 1.5;\n      }\n    }\n  }\n\n  @media (max-width: 600px) {\n    .magic-join-page {\n      padding: 0.5rem;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\CountingPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\CountingSessionPage.vue",
    "messages": [
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 225,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 225,
        "endColumn": 50
      },
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 241,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 241,
        "endColumn": 51
      },
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 254,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 254,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 328,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 328,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10480, 10483], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10480, 10483], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 434,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 434,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13107, 13110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13107, 13110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"sessionName\"\n        :subtitle=\"sessionType\"\n        icon=\"checklist\"\n        :back-button=\"true\"\n        @back=\"handleBack\"\n      >\n        <template #actions>\n          <div class=\"header-actions\">\n            <!-- Session Status -->\n            <q-chip\n              :color=\"statusColor\"\n              :icon=\"statusIcon\"\n              text-color=\"white\"\n              :label=\"formatStatus(session?.status ?? '')\"\n              size=\"md\"\n            />\n\n            <!-- Progress Info -->\n            <div v-if=\"session\" class=\"progress-info\">\n              <span class=\"progress-text\">\n                {{ sessionAny.products_counted ?? 0 }}/{{\n                  session.total_products_counted ?? 0\n                }}\n              </span>\n              <q-linear-progress\n                :value=\"\n                  (sessionAny.products_counted ?? 0) /\n                  (session.total_products_counted ?? 1)\n                \"\n                color=\"primary\"\n                size=\"4px\"\n                class=\"progress-bar\"\n              />\n            </div>\n\n            <!-- Action Buttons -->\n            <q-btn\n              v-if=\"session?.status === 'in_progress'\"\n              color=\"positive\"\n              icon=\"check\"\n              :label=\"$t('counting.completeSession')\"\n              :disable=\"!canComplete\"\n              unelevated\n              @click=\"completeSession\"\n            />\n\n            <q-btn\n              v-if=\"session?.status === 'completed'\"\n              color=\"info\"\n              icon=\"verified\"\n              :label=\"$t('counting.approveSession')\"\n              unelevated\n              @click=\"approveSession\"\n            />\n          </div>\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Main Content -->\n    <div class=\"counting-session-content\">\n      <!-- Loading State -->\n      <div v-if=\"countingStore.loading\" class=\"loading-container\">\n        <q-spinner-dots size=\"xl\" color=\"primary\" />\n        <p class=\"loading-text\">{{ $t('counting.loadingSession') }}</p>\n      </div>\n\n      <!-- Session Not Found -->\n      <BaseCard v-else-if=\"!session\" icon-color=\"negative\">\n        <q-card-section class=\"text-center\">\n          <q-icon name=\"error_outline\" size=\"xl\" color=\"negative\" />\n          <div class=\"text-h6 q-mt-md\">\n            {{ $t('counting.sessionNotFound') }}\n          </div>\n          <div class=\"text-subtitle2 q-mt-sm\">\n            {{ $t('counting.sessionNotFoundDescription') }}\n          </div>\n        </q-card-section>\n        <q-card-actions align=\"center\">\n          <q-btn\n            color=\"primary\"\n            :label=\"$t('common.goBack')\"\n            @click=\"$router.push('/inventory/counting')\"\n          />\n        </q-card-actions>\n      </BaseCard>\n\n      <!-- Error Banner -->\n      <AlertCard\n        v-else-if=\"loadError\"\n        type=\"error\"\n        :title=\"$t('common.error')\"\n        :message=\"$t('counting.sessionLoadFailed')\"\n      >\n        <template #actions>\n          <q-btn\n            color=\"primary\"\n            :label=\"$t('common.retry')\"\n            @click=\"loadSession\"\n          />\n        </template>\n      </AlertCard>\n\n      <!-- Session Content -->\n      <template v-else>\n        <!-- Session Summary -->\n        <BaseCard class=\"session-summary\">\n          <template #header>\n            <q-card-section class=\"session-header\">\n              <div class=\"text-h6\">{{ $t('counting.sessionSummary') }}</div>\n            </q-card-section>\n          </template>\n\n          <q-card-section class=\"summary-content\">\n            <div class=\"summary-grid\">\n              <div class=\"summary-item\">\n                <div class=\"summary-label\">\n                  {{ $t('counting.sessionType') }}\n                </div>\n                <div class=\"summary-value\">\n                  {{ formatSessionType(sessionAny.session_type) }}\n                </div>\n              </div>\n\n              <div class=\"summary-item\">\n                <div class=\"summary-label\">\n                  {{ $t('counting.totalProducts') }}\n                </div>\n                <div class=\"summary-value\">\n                  {{ session.total_products_counted ?? 0 }}\n                </div>\n              </div>\n\n              <div class=\"summary-item\">\n                <div class=\"summary-label\">\n                  {{ $t('counting.countedProducts') }}\n                </div>\n                <div class=\"summary-value\">\n                  {{ sessionAny.products_counted ?? 0 }}\n                </div>\n              </div>\n\n              <div class=\"summary-item\">\n                <div class=\"summary-label\">\n                  {{ $t('counting.discrepancies') }}\n                </div>\n                <div\n                  class=\"summary-value\"\n                  :class=\"{\n                    'has-discrepancies':\n                      (sessionAny.discrepancies_found ?? 0) > 0,\n                  }\"\n                >\n                  {{ sessionAny.discrepancies_found ?? 0 }}\n                </div>\n              </div>\n\n              <div class=\"summary-item\">\n                <div class=\"summary-label\">{{ $t('common.startedAt') }}</div>\n                <div class=\"summary-value\">\n                  {{\n                    formatDateTime(sessionAny.started_at ?? session.created_at)\n                  }}\n                </div>\n              </div>\n\n              <div v-if=\"session.completed_at\" class=\"summary-item\">\n                <div class=\"summary-label\">{{ $t('common.completedAt') }}</div>\n                <div class=\"summary-value\">\n                  {{ formatDateTime(session.completed_at) }}\n                </div>\n              </div>\n            </div>\n          </q-card-section>\n        </BaseCard>\n\n        <!-- Mobile Counting Interface -->\n        <MobileCountingInterface\n          v-if=\"session.status === 'in_progress'\"\n          :session=\"session\"\n          :products=\"countingProducts\"\n          @product-counted=\"onProductCounted\"\n          @session-complete=\"onSessionComplete\"\n        />\n\n        <!-- Counting Results Table (for completed sessions) -->\n        <BaseCard v-else class=\"counting-results\">\n          <template #header>\n            <q-card-section class=\"results-header\">\n              <div class=\"text-h6\">{{ $t('counting.countingResults') }}</div>\n              <div class=\"text-subtitle2\">{{ $t('counting.viewResults') }}</div>\n            </q-card-section>\n          </template>\n\n          <div class=\"medical-table\">\n            <AlertCard\n              v-if=\"entriesError\"\n              type=\"error\"\n              :title=\"$t('common.error')\"\n              :message=\"$t('counting.entriesLoadFailed')\"\n            >\n              <template #actions>\n                <q-btn\n                  color=\"primary\"\n                  :label=\"$t('common.retry')\"\n                  @click=\"loadCountingEntries\"\n                />\n              </template>\n            </AlertCard>\n            <q-table\n              :rows=\"countingEntries\"\n              :columns=\"resultsColumns\"\n              row-key=\"id\"\n              :pagination=\"pagination\"\n              :loading=\"entriesLoading\"\n              :no-data-label=\"$t('counting.noResultsFound')\"\n              class=\"results-table\"\n              flat\n            >\n              <!-- Product Column -->\n              <template #body-cell-product=\"props\">\n                <q-td :props=\"props\">\n                  <div class=\"product-info\">\n                    <div class=\"product-name\">\n                      {{\n                        props.row.product?.name || t('common.unknownProduct')\n                      }}\n                    </div>\n                    <div class=\"product-sku\">\n                      {{ props.row.product?.sku || '-' }}\n                    </div>\n                  </div>\n                </q-td>\n              </template>\n\n              <!-- Variance Column -->\n              <template #body-cell-variance=\"props\">\n                <q-td :props=\"props\">\n                  <q-chip\n                    :color=\"varianceColor(props.value)\"\n                    :icon=\"varianceIcon(props.value)\"\n                    text-color=\"white\"\n                    :label=\"formatVariance(props.value)\"\n                    size=\"sm\"\n                  />\n                </q-td>\n              </template>\n\n              <!-- Status Column -->\n              <template #body-cell-status=\"props\">\n                <q-td :props=\"props\">\n                  <q-chip\n                    :color=\"entryStatusColor(props.value)\"\n                    :label=\"formatEntryStatus(props.value)\"\n                    size=\"sm\"\n                  />\n                </q-td>\n              </template>\n            </q-table>\n          </div>\n        </BaseCard>\n      </template>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import {\n    ref,\n    computed,\n    onMounted,\n    onBeforeUnmount,\n    defineAsyncComponent,\n  } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useRouter, useRoute } from 'vue-router';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useCountingStore } from 'src/stores/counting';\n  import type {\n    CountingSession,\n    CountingEntryDTO,\n    CountingProduct,\n  } from '@/types/inventory';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\n\n  // Lazy loaded components\n  const MobileCountingInterface = defineAsyncComponent(\n    () => import('src/components/inventory/MobileCountingInterface.vue')\n  );\n\n  // Props\n  const props = defineProps<{\n    sessionId: string;\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const router = useRouter();\n  const route = useRoute();\n  const authStore = useAuthStore();\n  const countingStore = useCountingStore();\n\n  // Reactive state\n  const countingProducts = ref<CountingProduct[]>([]);\n  const countingEntries = ref<CountingEntryDTO[]>([]);\n  const entriesLoading = ref(false);\n  const loadError = ref(false);\n  const entriesError = ref(false);\n\n  // Pagination\n  const pagination = ref({\n    sortBy: 'created_at',\n    descending: false,\n    page: 1,\n    rowsPerPage: 25,\n  });\n\n  // Computed properties\n  const session = computed(() => countingStore.currentSession);\n  const sessionAny = computed(() => session.value as any);\n\n  const sessionName = computed(\n    () => session.value?.name || t('counting.unknownSession')\n  );\n\n  const sessionType = computed(() =>\n    session.value ? formatSessionType(sessionAny.value.session_type) : ''\n  );\n\n  const statusColor = computed(() => {\n    if (!session.value) return 'grey';\n    switch (session.value.status) {\n      case 'in_progress':\n        return 'primary';\n      case 'completed':\n        return 'positive';\n      case 'cancelled':\n        return 'negative';\n      case 'approved':\n        return 'info';\n      default:\n        return 'grey';\n    }\n  });\n\n  const statusIcon = computed(() => {\n    if (!session.value) return 'help';\n    switch (session.value.status) {\n      case 'in_progress':\n        return 'play_circle';\n      case 'completed':\n        return 'check_circle';\n      case 'cancelled':\n        return 'cancel';\n      case 'approved':\n        return 'verified';\n      default:\n        return 'help';\n    }\n  });\n\n  const canComplete = computed(() => {\n    return session.value && (sessionAny.value.products_counted ?? 0) > 0;\n  });\n\n  const resultsColumns = computed(() => [\n    {\n      name: 'product',\n      label: t('counting.product'),\n      field: 'product_id',\n      sortable: true,\n      align: 'left' as const,\n    },\n    {\n      name: 'system_quantity',\n      label: t('counting.systemQuantity'),\n      field: 'system_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'counted_quantity',\n      label: t('counting.countedQuantity'),\n      field: 'counted_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'variance',\n      label: t('counting.variance'),\n      field: 'variance',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'status',\n      label: t('common.status'),\n      field: 'status',\n      align: 'center' as const,\n      sortable: true,\n    },\n  ]);\n\n  // Methods\n  const loadSession = async () => {\n    try {\n      loadError.value = false;\n      const practiceId = authStore.userProfile?.clinic_id || '';\n      const s = await countingStore.fetchSessionById(\n        practiceId,\n        props.sessionId\n      );\n      if (s && (s.status === 'completed' || s.status === 'approved')) {\n        await loadCountingEntries();\n      }\n    } catch (error) {\n      console.error('Error loading session:', error);\n      loadError.value = true;\n    }\n  };\n\n  const loadCountingEntries = async () => {\n    entriesLoading.value = true;\n    try {\n      await countingStore.fetchCountingEntries(props.sessionId);\n      countingEntries.value = (countingStore as any)\n        .entries as CountingEntryDTO[];\n      entriesError.value = false;\n    } catch (error) {\n      console.error('Error loading counting entries:', error);\n      entriesError.value = true;\n    } finally {\n      entriesLoading.value = false;\n    }\n  };\n\n  const completeSession = () => {\n    $q.dialog({\n      title: t('counting.completeSession'),\n      message: t('counting.confirmComplete'),\n      cancel: true,\n      persistent: true,\n    }).onOk(async () => {\n      try {\n        await countingStore.updateSession(props.sessionId, {\n          status: 'completed',\n          completed_at: new Date().toISOString(),\n          completed_by: authStore.user?.id || '',\n        });\n\n        $q.notify({\n          type: 'positive',\n          message: t('counting.sessionCompleted'),\n          position: 'top',\n        });\n\n        await loadSession();\n      } catch (error) {\n        console.error('Error completing session:', error);\n        $q.notify({\n          type: 'negative',\n          message: t('counting.completeFailed'),\n          position: 'top',\n        });\n      }\n    });\n  };\n\n  const approveSession = () => {\n    $q.dialog({\n      title: t('counting.approveSession'),\n      message: t('counting.confirmApprove'),\n      cancel: true,\n      persistent: true,\n    }).onOk(async () => {\n      try {\n        const { movementIds } = await countingStore.postCountingSession(\n          props.sessionId\n        );\n\n        const notify = $q.notify({\n          type: 'positive',\n          message: t('counting.sessionApproved'),\n          position: 'top',\n          timeout: 8000,\n          actions: movementIds.length\n            ? [\n                {\n                  label: t('common.undo'),\n                  color: 'white',\n                  handler: async () => {\n                    try {\n                      const undone = await countingStore.undoLastPosting(\n                        props.sessionId\n                      );\n                      if (undone) {\n                        $q.notify({\n                          type: 'info',\n                          message: t('common.changesReverted'),\n                          position: 'top',\n                        });\n                        await loadSession();\n                      }\n                    } catch (e) {\n                      $q.notify({\n                        type: 'negative',\n                        message: t('common.actionFailed'),\n                        position: 'top',\n                      });\n                    }\n                  },\n                },\n              ]\n            : [],\n        });\n\n        await loadSession();\n      } catch (error) {\n        console.error('Error approving session:', error);\n        $q.notify({\n          type: 'negative',\n          message: t('counting.approveFailed'),\n          position: 'top',\n        });\n      }\n    });\n  };\n\n  const handleBack = () => {\n    router.push('/inventory/counting');\n  };\n\n  const onProductCounted = () => {\n    // Refresh session data to update progress\n    loadSession();\n  };\n\n  const onSessionComplete = () => {\n    completeSession();\n  };\n\n  // Formatting helpers\n  const formatSessionType = (type: string): string => {\n    return t(`counting.${type}`, type);\n  };\n\n  const formatStatus = (status?: string): string => {\n    if (!status) return '';\n    return t(`counting.status.${status}`, status);\n  };\n\n  const formatEntryStatus = (status: string): string => {\n    return t(`counting.entryStatus.${status}`, status);\n  };\n\n  const formatDateTime = (dateString: string): string => {\n    return new Intl.DateTimeFormat('nl-NL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(dateString));\n  };\n\n  const formatVariance = (variance: number): string => {\n    if (variance === 0) return '0';\n    return variance > 0 ? `+${variance}` : `${variance}`;\n  };\n\n  const varianceColor = (variance: number): string => {\n    if (variance === 0) return 'positive';\n    return variance > 0 ? 'warning' : 'negative';\n  };\n\n  const varianceIcon = (variance: number): string => {\n    if (variance === 0) return 'check';\n    return variance > 0 ? 'arrow_upward' : 'arrow_downward';\n  };\n\n  const entryStatusColor = (status: string): string => {\n    switch (status) {\n      case 'verified':\n        return 'positive';\n      case 'discrepancy':\n        return 'warning';\n      case 'pending':\n        return 'info';\n      default:\n        return 'grey';\n    }\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    loadSession();\n  });\n\n  onBeforeUnmount(() => {\n    // Cleanup to prevent async operations after unmount\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  .counting-session-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n  }\n\n  .header-actions {\n    display: flex;\n    align-items: center;\n    gap: var(--space-4);\n\n    .progress-info {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: var(--space-1);\n\n      .progress-text {\n        font-size: var(--text-sm);\n        color: var(--text-muted);\n      }\n\n      .progress-bar {\n        width: 100%;\n      }\n    }\n\n    @media (max-width: 768px) {\n      flex-direction: column;\n      gap: var(--space-3);\n    }\n  }\n\n  .loading-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: var(--space-12);\n    gap: var(--space-4);\n\n    .loading-text {\n      color: var(--text-muted);\n      font-size: var(--text-base);\n      margin: 0;\n    }\n  }\n\n  .summary-content {\n    .summary-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: var(--space-6);\n\n      .summary-item {\n        .summary-label {\n          font-size: var(--text-sm);\n          color: var(--text-muted);\n          margin-bottom: var(--space-1);\n        }\n\n        .summary-value {\n          font-size: var(--text-lg);\n          font-weight: var(--font-weight-medium);\n          color: var(--text-primary);\n\n          &.has-discrepancies {\n            color: var(--warning);\n          }\n        }\n      }\n\n      @media (max-width: 768px) {\n        grid-template-columns: repeat(2, 1fr);\n        gap: var(--space-4);\n      }\n    }\n  }\n\n  .product-info {\n    .product-name {\n      font-weight: var(--font-weight-medium);\n      color: var(--text-primary);\n    }\n\n    .product-sku {\n      font-size: var(--text-sm);\n      color: var(--text-muted);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\InventoryLevelsPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 389,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 389,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11856, 11859], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11856, 11859], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 524,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 524,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15634, 15637], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15634, 15637], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 533,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 533,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15925, 15928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15925, 15928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17520, 17523], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17520, 17523], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 613,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 613,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18345, 18348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18345, 18348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 667,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 667,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19761, 19764], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19761, 19764], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 675,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 675,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19994, 19997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19994, 19997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 682,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 682,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20141, 20144], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20141, 20144], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 723,
        "column": 25,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 723,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [21335, 21336], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 746,
        "column": 26,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 746,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [22196, 22197], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 747,
        "column": 25,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 747,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [22259, 22260], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 752,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 752,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [22501, 22502], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 768,
        "column": 24,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 768,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 773,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 773,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23147, 23150], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23147, 23150], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 782,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 782,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23431, 23434], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23431, 23434], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 870,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 870,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25912, 25915], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25912, 25915], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('inventory.stockLevels')\"\n        :subtitle=\"$t('inventory.overview')\"\n        icon=\"inventory_2\"\n      >\n        <template #actions>\n          <q-btn\n            icon=\"refresh\"\n            :loading=\"loading\"\n            round\n            flat\n            size=\"md\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshData\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Quick Stats Overview -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.totalProducts')\"\n          :subtitle=\"selectedLocationName\"\n          icon=\"inventory_2\"\n          icon-color=\"primary\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{ filteredStockLevels.length }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.products') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.stockLocations')\"\n          :subtitle=\"$t('inventory.activeLocations')\"\n          icon=\"location_on\"\n          icon-color=\"info\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{ clinicStore.locations.length }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.locations') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.dataLoaded')\"\n          :subtitle=\"$t('inventory.upToDate')\"\n          icon=\"check_circle\"\n          icon-color=\"positive\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"24px\" />\n              <template v-else>\n                {{ inventoryStore.realtimeConnected ? '🔄' : '✓' }}\n              </template>\n            </div>\n            <div class=\"kpi-subtitle\">\n              {{\n                inventoryStore.realtimeConnected\n                  ? $t('inventory.realTimeConnected')\n                  : $t('inventory.status')\n              }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.lastUpdated')\"\n          :subtitle=\"$t('inventory.refreshData')\"\n          icon=\"refresh\"\n          icon-color=\"warning\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{\n                lastUpdated ? formatTime(lastUpdated) : '-'\n              }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.lastSync') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Error Banner -->\n    <q-banner\n      v-if=\"errorState.visible\"\n      dense\n      class=\"q-mb-md bg-negative text-white\"\n      rounded\n    >\n      <div class=\"row items-center\">\n        <q-icon name=\"error_outline\" class=\"q-mr-sm\" />\n        <div class=\"col\">{{ errorState.message }}</div>\n        <div class=\"col-auto\">\n          <q-btn\n            flat\n            dense\n            color=\"white\"\n            :label=\"$t('common.retry')\"\n            @click=\"onRetry\"\n          />\n        </div>\n      </div>\n    </q-banner>\n\n    <!-- Modern FilterPanel Component -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        v-model=\"filterValues\"\n        :preset=\"inventoryFilterPreset\"\n        :loading=\"loading\"\n        collapsible\n        class=\"inventory-filter-panel\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n      />\n    </div>\n\n    <!-- Stock Levels Table -->\n    <div class=\"medical-table\">\n      <q-table\n        :rows=\"filteredStockLevels\"\n        :columns=\"columns\"\n        :loading=\"loading\"\n        row-key=\"id\"\n        :pagination=\"{ rowsPerPage: 25 }\"\n        flat\n        bordered\n        separator=\"cell\"\n      >\n        <template #loading>\n          <q-inner-loading showing color=\"primary\" />\n        </template>\n\n        <template #no-data>\n          <div class=\"full-width row flex-center q-gutter-sm\">\n            <q-icon size=\"2em\" name=\"sentiment_dissatisfied\" />\n            <span>{{ $t('inventory.noStockLevels') }}</span>\n          </div>\n        </template>\n\n        <template #body-cell-product_name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"product-info\">\n              <div class=\"product-name\">{{ props.row.product_name }}</div>\n              <div v-if=\"props.row.product_sku\" class=\"product-sku\">\n                SKU: {{ props.row.product_sku }}\n              </div>\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-current_quantity=\"props\">\n          <q-td :props=\"props\" class=\"text-center\">\n            <q-chip\n              :color=\"getQuantityColor(props.row)\"\n              :text-color=\"getQuantityTextColor(props.row)\"\n              size=\"sm\"\n              dense\n            >\n              {{ props.row.current_quantity }}\n              {{ props.row.product_unit || 'pcs' }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-stock_status=\"props\">\n          <q-td :props=\"props\" class=\"text-center\">\n            <q-chip\n              :color=\"getStockStatusColor(props.row.stock_status)\"\n              :text-color=\"getStockStatusTextColor(props.row.stock_status)\"\n              size=\"sm\"\n              dense\n            >\n              {{ $t(`inventory.stockStatus.${props.row.stock_status}`) }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-location_name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"location-info\">\n              <q-icon\n                name=\"location_on\"\n                size=\"xs\"\n                color=\"info\"\n                class=\"q-mr-xs\"\n              />\n              {{ props.row.location_name }}\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-last_counted_at=\"props\">\n          <q-td :props=\"props\">\n            {{\n              props.row.last_counted_at\n                ? formatDate(props.row.last_counted_at)\n                : '-'\n            }}\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"edit\"\n              size=\"sm\"\n              @click=\"adjustStock(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.adjustStock') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"history\"\n              size=\"sm\"\n              @click=\"viewHistory(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.viewHistory') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"count\"\n              size=\"sm\"\n              @click=\"countStock(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.countStock') }}</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Stock Adjustment Dialog -->\n    <FormDialog\n      v-model=\"showAdjustDialog\"\n      :title=\"$t('inventory.adjustStock')\"\n      icon=\"tune\"\n      size=\"md\"\n      :loading=\"adjusting\"\n      :submit-button-text=\"$t('inventory.adjust')\"\n      @submit=\"performAdjustment\"\n      @cancel=\"closeAdjustDialog\"\n    >\n      <div v-if=\"selectedStockLevel\" class=\"adjustment-product-info\">\n        <div class=\"product-name\">{{ selectedStockLevel.product_name }}</div>\n        <div class=\"current-stock\">\n          {{ $t('inventory.currentStock') }}:\n          {{ selectedStockLevel.current_quantity }}\n          {{ selectedStockLevel.product_unit || 'pcs' }}\n        </div>\n      </div>\n\n      <div class=\"q-gutter-md\">\n        <q-select\n          v-model=\"adjustmentType\"\n          :options=\"adjustmentTypeOptions\"\n          :label=\"$t('inventory.adjustmentType')\"\n          outlined\n          emit-value\n          map-options\n        />\n\n        <q-input\n          v-model.number=\"adjustmentQuantity\"\n          :label=\"$t('inventory.quantity')\"\n          type=\"number\"\n          outlined\n          :rules=\"[\n            val => (val !== null && val > 0) || $t('validation.required'),\n          ]\"\n        />\n\n        <q-input\n          v-model=\"adjustmentReason\"\n          :label=\"$t('inventory.reason')\"\n          type=\"textarea\"\n          outlined\n          rows=\"3\"\n        />\n      </div>\n    </FormDialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar, date } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import { inventoryFilterPreset } from 'src/presets/filters/inventory';\n  import { supabase } from 'src/boot/supabase';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useClinicStore } from 'src/stores/clinic';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { ServiceErrorHandler } from 'src/utils/service-error-handler';\n  import type { StockUpdateRequest } from 'src/types/inventory';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from 'src/types/filters';\n\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const authStore = useAuthStore();\n  const clinicStore = useClinicStore();\n  const inventoryStore = useInventoryStore();\n\n  // Refs\n  const loading = ref(false);\n  const adjusting = ref(false);\n  const showAdjustDialog = ref(false);\n  interface StockLevelRow {\n    id: string;\n    product_id: string;\n    location_id: string;\n    current_quantity: number;\n    minimum_quantity: number;\n    last_counted_at?: string | null;\n    product_name: string;\n    product_sku: string | null;\n    product_category: string | null;\n    product_unit: string;\n    location_name: string;\n    stock_status: string;\n  }\n\n  const selectedStockLevel = ref<StockLevelRow | null>(null);\n  const lastUpdated = ref<Date | null>(null);\n  const errorState = ref<{\n    visible: boolean;\n    message: string;\n    retry?: () => void;\n  }>({ visible: false, message: '' });\n\n  // New filter state for FilterPanel\n  const filterValues = ref<FilterValues>({});\n\n  // Adjustment state\n  const adjustmentType = ref('add');\n  const adjustmentQuantity = ref<number | null>(null);\n  const adjustmentReason = ref('');\n\n  // Data\n  const stockLevels = ref<StockLevelRow[]>([]);\n  const isDemoMode = computed(() => !authStore.clinicId);\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Filter logic is handled by computed property\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    filterValues.value = (inventoryFilterPreset.defaultFilters || {}) as any;\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Computed\n  const selectedLocationName = computed(() => {\n    const locationId = filterValues.value.location;\n    if (!locationId) return t('inventory.allLocations');\n\n    const location = clinicStore.locations.find(l => l.id === locationId);\n    return location?.name || t('inventory.unknownLocation');\n  });\n\n  const filteredStockLevels = computed(() => {\n    let filtered = stockLevels.value;\n\n    // Apply search filter\n    const search = filterValues.value.search;\n    if (search) {\n      const searchTerm = String(search).toLowerCase();\n      filtered = filtered.filter(\n        level =>\n          level.product_name?.toLowerCase().includes(searchTerm) ||\n          level.product_sku?.toLowerCase().includes(searchTerm) ||\n          level.product_category?.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Apply location filter\n    const location = filterValues.value.location;\n    if (location) {\n      filtered = filtered.filter(level => level.location_id === location);\n    }\n\n    // Apply stock status filter\n    const stockStatus = filterValues.value.stock_status;\n    if (stockStatus) {\n      filtered = filtered.filter(level => level.stock_status === stockStatus);\n    }\n\n    // Apply category filter\n    const category = filterValues.value.category;\n    if (category) {\n      filtered = filtered.filter(level => level.product_category === category);\n    }\n\n    // Apply quantity range filter\n    const quantityRange = filterValues.value.quantity_range;\n    if (\n      quantityRange &&\n      typeof quantityRange === 'object' &&\n      'min' in quantityRange\n    ) {\n      filtered = filtered.filter(level => {\n        const quantity = level.current_quantity || 0;\n        const range = quantityRange as { min?: number; max?: number };\n        if (range.min !== undefined && quantity < range.min) return false;\n        if (range.max !== undefined && quantity > range.max) return false;\n        return true;\n      });\n    }\n\n    // Apply low stock filter\n    const lowStockOnly = filterValues.value.low_stock_only;\n    if (lowStockOnly) {\n      filtered = filtered.filter(level => level.stock_status === 'low_stock');\n    }\n\n    return filtered;\n  });\n\n  // Table columns\n  const columns = computed(() => [\n    {\n      name: 'product_name',\n      label: t('inventory.product'),\n      field: 'product_name',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'location_name',\n      label: t('inventory.location'),\n      field: 'location_name',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'current_quantity',\n      label: t('inventory.currentStock'),\n      field: 'current_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'minimum_quantity',\n      label: t('inventory.minimumStock'),\n      field: 'minimum_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'stock_status',\n      label: t('inventory.status'),\n      field: 'stock_status',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'last_counted_at',\n      label: t('inventory.lastCounted'),\n      field: 'last_counted_at',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'actions',\n      label: t('inventory.actions'),\n      field: '',\n      align: 'center' as const,\n      sortable: false,\n    },\n  ]);\n\n  // Adjustment type options\n  const adjustmentTypeOptions = computed(() => [\n    { label: t('inventory.addStock'), value: 'add' },\n    { label: t('inventory.removeStock'), value: 'remove' },\n    { label: t('inventory.setStock'), value: 'set' },\n  ]);\n\n  // Helper functions\n  const getQuantityColor = (stockLevel: any): string => {\n    const quantity = stockLevel.current_quantity || 0;\n    const minimum = stockLevel.minimum_quantity || 0;\n\n    if (quantity === 0) return 'negative';\n    if (quantity <= minimum) return 'warning';\n    return 'positive';\n  };\n\n  const getQuantityTextColor = (stockLevel: any): string => {\n    const color = getQuantityColor(stockLevel);\n    return color === 'warning' ? 'black' : 'white';\n  };\n\n  const getStockStatusColor = (status: string): string => {\n    switch (status) {\n      case 'in_stock':\n        return 'positive';\n      case 'low_stock':\n        return 'warning';\n      case 'out_of_stock':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  };\n\n  const getStockStatusTextColor = (status: string): string => {\n    switch (status) {\n      case 'low_stock':\n        return 'black';\n      default:\n        return 'white';\n    }\n  };\n\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return '-';\n    return date.formatDate(dateString, 'DD/MM/YYYY');\n  };\n\n  const formatTime = (dateObj: Date): string => {\n    return date.formatDate(dateObj, 'HH:mm');\n  };\n\n  // Methods\n  const loadStockLevels = async () => {\n    try {\n      loading.value = true;\n      // Demo fallback: no practice selected\n      if (!authStore.clinicId) {\n        stockLevels.value = generateDemoStockLevels();\n        await updateLastSync();\n        errorState.value = { visible: false, message: '' };\n        return;\n      }\n      const { data, error } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n        *,\n        product:products(name, sku, category, unit),\n        location:practice_locations(name)\n      `\n        )\n        .eq('practice_id', authStore.clinicId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      stockLevels.value = (data || []).map((level: any) => ({\n        id: level.id,\n        product_id: level.product_id,\n        location_id: level.location_id,\n        current_quantity: level.current_quantity || 0,\n        minimum_quantity: level.minimum_stock || 0,\n        last_counted_at: level.last_counted_at,\n        product_name: level.product?.name || `Product ${level.product_id}`,\n        product_sku: level.product?.sku || null,\n        product_category: level.product?.category || null,\n        product_unit: level.product?.unit || 'pcs',\n        location_name: level.location?.name || `Location ${level.location_id}`,\n        stock_status: determineStockStatus(\n          level.current_quantity,\n          level.minimum_stock || 0\n        ),\n      }));\n      await updateLastSync();\n      errorState.value = { visible: false, message: '' };\n    } catch (error: any) {\n      ServiceErrorHandler.handle(\n        error,\n        {\n          service: 'InventoryLevels',\n          operation: 'loadStockLevels',\n          metadata: { practiceId: authStore.clinicId },\n        },\n        { rethrow: false }\n      );\n      errorState.value = {\n        visible: true,\n        message: t('inventory.loadError'),\n        retry: async () => {\n          await loadStockLevels();\n        },\n      };\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const updateLastSync = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('stock_movements')\n        .select('created_at')\n        .eq('practice_id', authStore.clinicId ?? '')\n        .order('created_at', { ascending: false })\n        .limit(1);\n      if (!error && data && data.length > 0 && data[0]?.created_at) {\n        lastUpdated.value = new Date(data[0].created_at);\n      } else {\n        lastUpdated.value = new Date();\n      }\n    } catch {\n      lastUpdated.value = new Date();\n    }\n  };\n\n  const determineStockStatus = (current: number, minimum: number): string => {\n    if (current <= 0) return 'out_of_stock';\n    if (current <= minimum) return 'low_stock';\n    return 'in_stock';\n  };\n\n  const refreshData = async () => {\n    await loadStockLevels();\n    $q.notify({\n      type: 'positive',\n      message: t('inventory.dataRefreshed'),\n    });\n  };\n\n  const adjustStock = (stockLevel: any) => {\n    selectedStockLevel.value = stockLevel;\n    adjustmentType.value = 'add';\n    adjustmentQuantity.value = null;\n    adjustmentReason.value = '';\n    showAdjustDialog.value = true;\n  };\n\n  const viewHistory = (stockLevel: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('inventory.historyNotImplemented'),\n    });\n  };\n\n  const countStock = (stockLevel: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('inventory.countingNotImplemented'),\n    });\n  };\n\n  const closeAdjustDialog = () => {\n    showAdjustDialog.value = false;\n    selectedStockLevel.value = null;\n  };\n\n  const performAdjustment = async () => {\n    if (!selectedStockLevel.value || !adjustmentQuantity.value) return;\n\n    try {\n      adjusting.value = true;\n\n      const currentQty = selectedStockLevel.value.current_quantity;\n      let targetQty = currentQty;\n      switch (adjustmentType.value) {\n        case 'add':\n          targetQty = currentQty + adjustmentQuantity.value;\n          break;\n        case 'remove':\n          targetQty = Math.max(0, currentQty - adjustmentQuantity.value);\n          break;\n        case 'set':\n          targetQty = adjustmentQuantity.value;\n          break;\n      }\n      const delta = targetQty - currentQty;\n      if (delta === 0) {\n        closeAdjustDialog();\n        return;\n      }\n\n      // Demo fallback: update local state only, no persistence\n      if (!authStore.clinicId) {\n        // Update local list to reflect change\n        const idx = stockLevels.value.findIndex(\n          s => s.id === selectedStockLevel.value!.id\n        );\n        if (idx !== -1 && stockLevels.value[idx]) {\n          const updated = {\n            ...stockLevels.value[idx],\n            current_quantity: Math.max(0, targetQty),\n            stock_status: determineStockStatus(\n              Math.max(0, targetQty),\n              stockLevels.value[idx]?.minimum_quantity || 0\n            ),\n          } as StockLevelRow;\n          stockLevels.value.splice(idx, 1, updated);\n        }\n        $q.notify({ type: 'positive', message: t('inventory.stockAdjusted') });\n        closeAdjustDialog();\n        await updateLastSync();\n        return;\n      }\n\n      // Prefer RPC if available, fallback to store update\n      const tryRpc = async () => {\n        return await supabase.rpc('update_stock_level', {\n          p_practice_id: authStore.clinicId ?? '',\n          p_location_id: selectedStockLevel.value!.location_id,\n          p_product_id: selectedStockLevel.value!.product_id,\n          p_quantity_change: delta,\n          p_movement_type: 'adjustment',\n          p_performed_by: authStore.user?.id ?? '',\n          p_reference_type: 'manual_adjustment',\n          p_reference_id: selectedStockLevel.value!.id,\n          p_reason_code: 'manual_adjustment',\n          p_notes: adjustmentReason.value ?? '',\n        });\n      };\n\n      let rpcOk = false;\n      try {\n        const { error: rpcError } = await tryRpc();\n        if (!rpcError) rpcOk = true;\n      } catch {\n        rpcOk = false;\n      }\n\n      if (!rpcOk) {\n        const request: StockUpdateRequest = {\n          practice_id: authStore.clinicId!,\n          location_id: selectedStockLevel.value.location_id,\n          product_id: selectedStockLevel.value.product_id,\n          quantity_change: delta,\n          movement_type: 'adjustment',\n          reason_code: 'manual_adjustment' as any,\n          notes: adjustmentReason.value || '',\n        };\n        await inventoryStore.updateStockLevel(request);\n      }\n\n      $q.notify({ type: 'positive', message: t('inventory.stockAdjusted') });\n      closeAdjustDialog();\n      await loadStockLevels();\n    } catch (error: any) {\n      ServiceErrorHandler.handle(\n        error,\n        {\n          service: 'InventoryLevels',\n          operation: 'performAdjustment',\n          metadata: {\n            practiceId: authStore.clinicId,\n            productId: selectedStockLevel.value?.product_id,\n            locationId: selectedStockLevel.value?.location_id,\n          },\n        },\n        { rethrow: false }\n      );\n      errorState.value = {\n        visible: true,\n        message: t('inventory.adjustError'),\n        retry: async () => {\n          await performAdjustment();\n        },\n      };\n    } finally {\n      adjusting.value = false;\n    }\n  };\n\n  const onRetry = async () => {\n    const retry = errorState.value.retry;\n    errorState.value = { visible: false, message: '' };\n    if (retry) await retry();\n    else await loadStockLevels();\n  };\n\n  // Demo data generator\n  const generateDemoStockLevels = (): StockLevelRow[] => {\n    const demo: StockLevelRow[] = [\n      {\n        id: 'demo-1',\n        product_id: 'prod-1',\n        location_id: 'loc-1',\n        current_quantity: 24,\n        minimum_quantity: 10,\n        last_counted_at: null,\n        product_name: 'Handschoenen Maat M',\n        product_sku: 'GLV-M',\n        product_category: 'Verbruik',\n        product_unit: 'pcs',\n        location_name: 'Demo Magazijn',\n        stock_status: determineStockStatus(24, 10),\n      },\n      {\n        id: 'demo-2',\n        product_id: 'prod-2',\n        location_id: 'loc-1',\n        current_quantity: 5,\n        minimum_quantity: 8,\n        last_counted_at: null,\n        product_name: 'Desinfectiemiddel 500ml',\n        product_sku: 'DSF-500',\n        product_category: 'Hygiëne',\n        product_unit: 'btl',\n        location_name: 'Demo Magazijn',\n        stock_status: determineStockStatus(5, 8),\n      },\n      {\n        id: 'demo-3',\n        product_id: 'prod-3',\n        location_id: 'loc-2',\n        current_quantity: 0,\n        minimum_quantity: 2,\n        last_counted_at: null,\n        product_name: 'Pleisters set',\n        product_sku: 'PLS-SET',\n        product_category: 'EHBO',\n        product_unit: 'set',\n        location_name: 'Behandelkamer 1',\n        stock_status: determineStockStatus(0, 2),\n      },\n    ];\n    return demo;\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    await loadStockLevels();\n\n    // Initialize filter values with defaults\n    if (inventoryFilterPreset.defaultFilters) {\n      filterValues.value = inventoryFilterPreset.defaultFilters as any;\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // Inventory levels page styles\n  // ===================================================================\n\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl);\n          font-weight: var(--font-weight-bold);\n          line-height: var(--leading-tight);\n          color: var(--brand-primary);\n          margin-bottom: var(--space-2);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs);\n          font-weight: var(--font-weight-semibold);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal);\n        }\n      }\n    }\n  }\n\n  .filters-section {\n    margin-bottom: var(--space-6);\n\n    .inventory-filter-panel {\n      // FilterPanel defines its own styling\n      // No additional customization needed\n    }\n  }\n\n  .product-info {\n    .product-name {\n      font-family: var(--font-family);\n      font-weight: var(--font-weight-semibold);\n      font-size: var(--text-base);\n      color: var(--text-primary);\n      line-height: var(--leading-tight);\n    }\n\n    .product-sku {\n      font-family: var(--font-family-mono);\n      font-size: var(--text-xs);\n      font-weight: var(--font-weight-medium);\n      color: var(--text-tertiary);\n      margin-top: var(--space-1);\n      background: var(--bg-tertiary);\n      padding: var(--space-1) var(--space-2);\n      border-radius: var(--radius-sm);\n      display: inline-block;\n    }\n  }\n\n  .location-info {\n    display: flex;\n    align-items: center;\n    gap: var(--space-2);\n\n    .location-name {\n      font-family: var(--font-family);\n      font-weight: var(--font-weight-medium);\n      color: var(--text-primary);\n    }\n\n    .location-type {\n      font-size: var(--text-xs);\n      color: var(--text-secondary);\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE SUPPORT\n  // ===================================================================\n\n  body.body--dark {\n    .stats-cards-container {\n      .kpi-content {\n        .kpi-value {\n          color: var(--brand-primary-light);\n        }\n\n        .kpi-subtitle {\n          color: var(--text-secondary);\n        }\n      }\n    }\n\n    .product-info {\n      .product-name {\n        color: var(--text-primary);\n      }\n\n      .product-sku {\n        color: var(--text-tertiary);\n        background: var(--bg-tertiary);\n      }\n    }\n\n    .location-info {\n      .location-name {\n        color: var(--text-primary);\n      }\n\n      .location-type {\n        color: var(--text-secondary);\n      }\n    }\n  }\n\n  // Adjustment dialog styles\n  .adjustment-product-info {\n    padding: var(--space-4);\n    background: var(--neutral-50);\n    border-radius: var(--radius-lg);\n    margin-bottom: var(--space-4);\n\n    .product-name {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-semibold);\n      color: var(--neutral-900);\n      margin-bottom: var(--space-1);\n    }\n\n    .current-stock {\n      font-size: var(--text-sm);\n      color: var(--neutral-600);\n    }\n  }\n\n  // Dark mode adjustments\n  body.body--dark {\n    .adjustment-product-info {\n      background: var(--neutral-800);\n\n      .product-name {\n        color: var(--neutral-100);\n      }\n\n      .current-stock {\n        color: var(--neutral-400);\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\LocationsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\MobileCountingTestPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\MovementsPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 412,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 412,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12584, 12587], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12584, 12587], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13908, 13911], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13908, 13911], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 480,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 480,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14543, 14546], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14543, 14546], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 499,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 499,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15122, 15125], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15122, 15125], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 518,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 518,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15719, 15722], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15719, 15722], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('inventory.movements.title')\"\n        :subtitle=\"$t('inventory.movements.subtitle')\"\n        icon=\"timeline\"\n      >\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            :loading=\"movementsLoading\"\n            class=\"app-btn-refresh\"\n            @click=\"refreshData\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n\n          <q-btn\n            icon=\"file_download\"\n            :label=\"$t('common.export')\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n            @click=\"exportMovements\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- FilterPanel component -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        v-model=\"filterValues\"\n        :preset=\"movementsFilterPreset\"\n        :loading=\"movementsLoading\"\n        collapsible\n        class=\"movements-filter-panel\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n      />\n    </div>\n\n    <!-- Error Banner -->\n    <q-banner\n      v-if=\"errorState.visible\"\n      dense\n      class=\"q-mb-md bg-negative text-white\"\n      rounded\n    >\n      <div class=\"row items-center\">\n        <q-icon name=\"error_outline\" class=\"q-mr-sm\" />\n        <div class=\"col\">{{ errorState.message }}</div>\n        <div class=\"col-auto\">\n          <q-btn\n            flat\n            dense\n            color=\"white\"\n            :label=\"$t('common.retry')\"\n            @click=\"errorState.retry?.()\"\n          />\n        </div>\n      </div>\n    </q-banner>\n\n    <!-- Main Content -->\n    <div class=\"movements-content\">\n      <!-- Loading State -->\n      <div v-if=\"movementsLoading\" class=\"loading-container\">\n        <q-spinner-dots size=\"xl\" color=\"primary\" />\n        <p class=\"loading-text\">{{ $t('inventory.movements.loading') }}</p>\n      </div>\n\n      <!-- Movements Table -->\n      <div v-else class=\"medical-table\">\n        <q-table\n          v-model:pagination=\"pagination\"\n          :rows=\"filteredMovements\"\n          :columns=\"columns as any\"\n          row-key=\"id\"\n          :rows-number=\"inventoryStore.stockMovementsTotal || 0\"\n          :loading=\"movementsLoading\"\n          :no-data-label=\"$t('inventory.movements.noData')\"\n          class=\"movements-table\"\n          flat\n          bordered\n          separator=\"cell\"\n        >\n          <template #loading>\n            <q-inner-loading showing color=\"primary\" />\n          </template>\n          <!-- Movement Type Column -->\n          <template #body-cell-movement_type=\"props\">\n            <q-td :props=\"props\">\n              <q-chip\n                :icon=\"movementIcon(props.value)\"\n                :color=\"movementColor(props.value)\"\n                text-color=\"white\"\n                :label=\"formatMovementType(props.value)\"\n                size=\"sm\"\n              />\n            </q-td>\n          </template>\n\n          <!-- Product Column -->\n          <template #body-cell-product=\"props\">\n            <q-td :props=\"props\">\n              <div class=\"product-info\">\n                <div class=\"product-name\">\n                  {{ props.row.product?.name || $t('common.unknownProduct') }}\n                </div>\n                <div class=\"product-sku\">\n                  {{ props.row.product?.sku || '-' }}\n                </div>\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Quantity Change Column -->\n          <template #body-cell-quantity_change=\"props\">\n            <q-td :props=\"props\">\n              <span\n                :class=\"{\n                  'quantity-positive': props.value > 0,\n                  'quantity-negative': props.value < 0,\n                  'quantity-neutral': props.value === 0,\n                }\"\n                class=\"quantity-change\"\n              >\n                {{ props.value > 0 ? '+' : '' }}{{ props.value }}\n              </span>\n            </q-td>\n          </template>\n\n          <!-- Location Column -->\n          <template #body-cell-location=\"props\">\n            <q-td :props=\"props\">\n              {{ props.row.location?.name || $t('common.unknownLocation') }}\n            </q-td>\n          </template>\n\n          <!-- Date Column -->\n          <template #body-cell-created_at=\"props\">\n            <q-td :props=\"props\">\n              <div class=\"date-info\">\n                <div class=\"date\">{{ formatDate(props.value) }}</div>\n                <div class=\"time\">{{ formatTime(props.value) }}</div>\n              </div>\n            </q-td>\n          </template>\n\n          <!-- Notes Column -->\n          <template #body-cell-notes=\"props\">\n            <q-td :props=\"props\">\n              <span v-if=\"props.value\" class=\"notes\">\n                {{ props.value }}\n              </span>\n              <span v-else class=\"no-notes\">-</span>\n            </q-td>\n          </template>\n\n          <!-- Actions Column -->\n          <template #body-cell-actions=\"props\">\n            <q-td :props=\"props\">\n              <q-btn\n                flat\n                round\n                icon=\"visibility\"\n                size=\"sm\"\n                :title=\"$t('common.view')\"\n                @click=\"viewMovementDetails(props.row)\"\n              />\n            </q-td>\n          </template>\n        </q-table>\n      </div>\n    </div>\n\n    <!-- Movement Details Dialog -->\n    <BaseDialog\n      v-model=\"showMovementDetails\"\n      :title=\"$t('inventory.movementDetails')\"\n      icon=\"swap_horiz\"\n      size=\"md\"\n      @close=\"showMovementDetails = false\"\n    >\n      <div v-if=\"selectedMovement\" class=\"movement-details\">\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.movementType') }}:</span>\n          <q-chip\n            :icon=\"movementIcon(selectedMovement.movement_type as MovementType)\"\n            :color=\"\n              movementColor(selectedMovement.movement_type as MovementType)\n            \"\n            text-color=\"white\"\n            :label=\"\n              formatMovementType(selectedMovement.movement_type as MovementType)\n            \"\n            size=\"sm\"\n          />\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.product') }}:</span>\n          <span class=\"value\">\n            {{ selectedMovement.product?.name || $t('common.unknownProduct') }}\n            <span class=\"sku\"\n              >({{ selectedMovement.product?.sku || $t('common.noSku') }})</span\n            >\n          </span>\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.location') }}:</span>\n          <span class=\"value\">{{\n            selectedMovement.location?.name || $t('common.unknownLocation')\n          }}</span>\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.quantityChange') }}:</span>\n          <span\n            :class=\"{\n              'quantity-positive': selectedMovement.quantity_change > 0,\n              'quantity-negative': selectedMovement.quantity_change < 0,\n            }\"\n            class=\"quantity-change value\"\n          >\n            {{ selectedMovement.quantity_change > 0 ? '+' : ''\n            }}{{ selectedMovement.quantity_change }}\n          </span>\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.quantityBefore') }}:</span>\n          <span class=\"value\">{{ selectedMovement.quantity_before }}</span>\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.quantityAfter') }}:</span>\n          <span class=\"value\">{{ selectedMovement.quantity_after }}</span>\n        </div>\n\n        <div v-if=\"(selectedMovement as any).reason_code\" class=\"detail-row\">\n          <span class=\"label\">{{ $t('inventory.reasonCode') }}:</span>\n          <span class=\"value\">{{\n            formatReasonCode((selectedMovement as any).reason_code)\n          }}</span>\n        </div>\n\n        <div v-if=\"selectedMovement.notes\" class=\"detail-row\">\n          <span class=\"label\">{{ $t('common.notes') }}:</span>\n          <span class=\"value\">{{ selectedMovement.notes }}</span>\n        </div>\n\n        <div class=\"detail-row\">\n          <span class=\"label\">{{ $t('common.date') }}:</span>\n          <span class=\"value\">{{\n            formatDateTime(selectedMovement.created_at ?? '')\n          }}</span>\n        </div>\n      </div>\n\n      <template #actions>\n        <q-btn\n          flat\n          :label=\"$t('common.close')\"\n          color=\"primary\"\n          @click=\"showMovementDetails = false\"\n        />\n      </template>\n    </BaseDialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { useClinicStore } from 'src/stores/clinic';\n  import type {\n    MovementWithRelations,\n    MovementType,\n    ReasonCode,\n  } from 'src/types/inventory';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from 'src/types/filters';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import { movementsFilterPreset } from 'src/presets/filters/movements';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const authStore = useAuthStore();\n  const inventoryStore = useInventoryStore();\n  const clinicStore = useClinicStore();\n\n  // Reactive state\n  const movementsLoading = ref(false);\n  const showMovementDetails = ref(false);\n  const selectedMovement = ref<MovementWithRelations | null>(null);\n  const isUnmounted = ref(false);\n  const errorState = ref<{\n    visible: boolean;\n    message: string;\n    retry?: () => void;\n  }>({ visible: false, message: '' });\n  const demoMovements = ref<MovementWithRelations[]>([]);\n\n  // Filter system styles\n  const filterValues = ref<FilterValues>({});\n\n  // Pagination\n  const pagination = ref({\n    sortBy: 'created_at',\n    descending: true,\n    page: 1,\n    rowsPerPage: 25,\n  });\n\n  // Computed properties\n  const practiceId = computed(() => authStore.userProfile?.clinic_id || '');\n\n  const filteredMovements = computed(() =>\n    practiceId.value ? inventoryStore.stockMovements : demoMovements.value\n  );\n\n  const columns = computed(() => [\n    {\n      name: 'movement_type',\n      label: t('inventory.movementType'),\n      field: 'movement_type',\n      align: 'left',\n      sortable: true,\n    },\n    {\n      name: 'product',\n      label: t('inventory.product'),\n      field: 'product',\n      align: 'left',\n      sortable: false,\n    },\n    {\n      name: 'quantity_change',\n      label: t('inventory.quantityChange'),\n      field: 'quantity_change',\n      align: 'center',\n      sortable: true,\n    },\n    {\n      name: 'location',\n      label: t('inventory.location'),\n      field: 'location',\n      align: 'left',\n      sortable: false,\n    },\n    {\n      name: 'created_at',\n      label: t('common.date'),\n      field: 'created_at',\n      align: 'left',\n      sortable: true,\n    },\n    {\n      name: 'notes',\n      label: t('common.notes'),\n      field: 'notes',\n      align: 'left',\n      sortable: false,\n    },\n    {\n      name: 'actions',\n      label: t('common.actions'),\n      field: 'actions',\n      align: 'center',\n      sortable: false,\n    },\n  ]);\n\n  // Methods\n  const refreshData = async () => {\n    if (!practiceId.value) {\n      // Demo fallback\n      demoMovements.value = generateDemoMovements();\n      errorState.value = { visible: false, message: '' };\n      return;\n    }\n    try {\n      await inventoryStore.fetchStockMovements(practiceId.value, {\n        page: pagination.value.page,\n        rowsPerPage: pagination.value.rowsPerPage,\n        sortBy: pagination.value.sortBy,\n        descending: pagination.value.descending,\n        filters: {\n          dateRange: filterValues.value.date_range as\n            | { start?: string; end?: string }\n            | undefined,\n          location_id: (filterValues.value.location_id as string) || undefined,\n          movement_type: (filterValues.value.movement_type as any) || undefined,\n          product_search:\n            (filterValues.value.product_search as string) || undefined,\n        },\n      });\n      errorState.value = { visible: false, message: '' };\n      $q.notify({\n        type: 'positive',\n        message: t('common.dataRefreshed'),\n        position: 'top',\n      });\n    } catch (error) {\n      console.error('Error refreshing movements:', error);\n      errorState.value = {\n        visible: true,\n        message: t('inventory.movements.loadError'),\n        retry: async () => {\n          await refreshData();\n        },\n      };\n    }\n  };\n\n  // Demo data\n  const generateDemoMovements = (): MovementWithRelations[] => {\n    const now = new Date();\n    const iso = (d: Date) => d.toISOString();\n    return [\n      {\n        id: 'demo-mv-1',\n        practice_id: 'demo',\n        location_id: 'loc-1',\n        product_id: 'prod-1',\n        movement_type: 'receipt',\n        quantity_change: 20,\n        quantity_before: 10,\n        quantity_after: 30,\n        created_at: iso(new Date(now.getTime() - 3600 * 1000)),\n        notes: 'Demo ontvangst',\n        product: { id: 'prod-1', name: 'Handschoenen M', sku: 'GLV-M' },\n        location: {\n          id: 'loc-1',\n          name: 'Demo Magazijn',\n          code: 'WH1',\n          location_type: 'warehouse',\n        } as any,\n      },\n      {\n        id: 'demo-mv-2',\n        practice_id: 'demo',\n        location_id: 'loc-1',\n        product_id: 'prod-2',\n        movement_type: 'usage',\n        quantity_change: -3,\n        quantity_before: 12,\n        quantity_after: 9,\n        created_at: iso(new Date(now.getTime() - 2 * 3600 * 1000)),\n        notes: 'Verbruik behandelkamer',\n        product: {\n          id: 'prod-2',\n          name: 'Desinfectiemiddel 500ml',\n          sku: 'DSF-500',\n        },\n        location: {\n          id: 'loc-1',\n          name: 'Demo Magazijn',\n          code: 'WH1',\n          location_type: 'warehouse',\n        } as any,\n      },\n      {\n        id: 'demo-mv-3',\n        practice_id: 'demo',\n        location_id: 'loc-2',\n        product_id: 'prod-3',\n        movement_type: 'adjustment',\n        quantity_change: 5,\n        quantity_before: 0,\n        quantity_after: 5,\n        created_at: iso(new Date(now.getTime() - 3 * 3600 * 1000)),\n        notes: 'Aanvulling',\n        product: { id: 'prod-3', name: 'Pleisters set', sku: 'PLS-SET' },\n        location: {\n          id: 'loc-2',\n          name: 'Behandelkamer 1',\n          code: 'TR1',\n          location_type: 'treatment',\n        } as any,\n      },\n      {\n        id: 'demo-mv-4',\n        practice_id: 'demo',\n        location_id: 'loc-2',\n        product_id: 'prod-1',\n        movement_type: 'transfer',\n        quantity_change: 4,\n        quantity_before: 2,\n        quantity_after: 6,\n        created_at: iso(new Date(now.getTime() - 4 * 3600 * 1000)),\n        notes: 'Van magazijn naar behandelkamer',\n        product: { id: 'prod-1', name: 'Handschoenen M', sku: 'GLV-M' },\n        location: {\n          id: 'loc-2',\n          name: 'Behandelkamer 1',\n          code: 'TR1',\n          location_type: 'treatment',\n        } as any,\n      },\n    ] as MovementWithRelations[];\n  };\n\n  const exportMovements = () => {\n    const rows = inventoryStore.stockMovements as MovementWithRelations[];\n    const header = [\n      'type',\n      'sku',\n      'product_name',\n      'delta',\n      'location',\n      'created_at',\n      'note',\n    ];\n    const csvRows = [header.join(',')];\n    for (const r of rows) {\n      const type = r.movement_type;\n      const sku = r.product?.sku ?? '';\n      const name = r.product?.name ?? '';\n      const delta = String(r.quantity_change ?? 0);\n      const loc = r.location?.name ?? '';\n      const created = r.created_at ? new Date(r.created_at).toISOString() : '';\n      const note = (r.notes ?? '').replace(/\"/g, '\"\"');\n      const line = [\n        type,\n        sku,\n        name,\n        delta,\n        loc,\n        created,\n        `\"${note}` + '\"',\n      ].join(',');\n      csvRows.push(line);\n    }\n    const blob = new Blob([csvRows.join('\\n')], {\n      type: 'text/csv;charset=utf-8;',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `movements_${new Date().toISOString()}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const viewMovementDetails = (movement: MovementWithRelations) => {\n    selectedMovement.value = movement;\n    showMovementDetails.value = true;\n  };\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Handle individual filter changes if needed\n    // Could add specific logic here for real-time filtering\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    // Handle filter reset - refresh data to show all movements\n    refreshData();\n  };\n\n  const handleFilterClear = () => {\n    // Handle all filters cleared - refresh data to show all movements\n    refreshData();\n  };\n\n  // Formatting helpers\n  const formatMovementType = (type: MovementType): string => {\n    return t(`inventory.movement.${type}`, type);\n  };\n\n  const formatReasonCode = (code: ReasonCode): string => {\n    return t(`inventory.reason.${code}`, code);\n  };\n\n  const movementIcon = (type: MovementType): string => {\n    switch (type) {\n      case 'receipt':\n        return 'add_circle';\n      case 'usage':\n        return 'remove_circle';\n      case 'transfer':\n        return 'swap_horiz';\n      case 'adjustment':\n        return 'edit';\n      case 'count':\n        return 'checklist';\n      case 'waste':\n        return 'delete';\n      default:\n        return 'timeline';\n    }\n  };\n\n  const movementColor = (type: MovementType): string => {\n    switch (type) {\n      case 'receipt':\n        return 'positive';\n      case 'usage':\n        return 'negative';\n      case 'transfer':\n        return 'info';\n      case 'adjustment':\n        return 'warning';\n      case 'count':\n        return 'secondary';\n      case 'waste':\n        return 'negative';\n      default:\n        return 'primary';\n    }\n  };\n\n  const formatDate = (dateString: string): string => {\n    return new Intl.DateTimeFormat('nl-NL', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    }).format(new Date(dateString));\n  };\n\n  const formatTime = (dateString: string): string => {\n    return new Intl.DateTimeFormat('nl-NL', {\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(dateString));\n  };\n\n  const formatDateTime = (dateString: string): string => {\n    return new Intl.DateTimeFormat('nl-NL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(new Date(dateString));\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    if (practiceId.value) {\n      await clinicStore.fetchLocations(practiceId.value);\n      await refreshData();\n    }\n  });\n\n  onBeforeUnmount(() => {\n    isUnmounted.value = true;\n  });\n\n  // React to filter and pagination changes for server-side fetch\n  watch(\n    () => ({\n      ...pagination.value,\n      ...filterValues.value,\n      practice: practiceId.value,\n    }),\n    async () => {\n      if (practiceId.value) {\n        await refreshData();\n      }\n    },\n    { deep: true }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  .movements-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n  }\n\n  .header-actions {\n    display: flex;\n    align-items: center;\n    gap: var(--space-4);\n\n    @media (max-width: 768px) {\n      flex-direction: column;\n      gap: var(--space-3);\n    }\n  }\n\n  .loading-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    padding: var(--space-12);\n    gap: var(--space-4);\n\n    .loading-text {\n      color: var(--text-muted);\n      font-size: var(--text-base);\n      margin: 0;\n    }\n  }\n\n  .movements-table-card {\n    overflow: visible;\n  }\n\n  .product-info {\n    .product-name {\n      font-weight: var(--font-weight-medium);\n      color: var(--text-primary);\n    }\n\n    .product-sku {\n      font-size: var(--text-sm);\n      color: var(--text-muted);\n    }\n  }\n\n  .quantity-change {\n    font-weight: var(--font-weight-medium);\n\n    &.quantity-positive {\n      color: var(--positive);\n    }\n\n    &.quantity-negative {\n      color: var(--negative);\n    }\n\n    &.quantity-neutral {\n      color: var(--text-muted);\n    }\n  }\n\n  .date-info {\n    .date {\n      font-weight: var(--font-weight-medium);\n      color: var(--text-primary);\n    }\n\n    .time {\n      font-size: var(--text-sm);\n      color: var(--text-muted);\n    }\n  }\n\n  .notes {\n    font-style: italic;\n    color: var(--text-secondary);\n  }\n\n  .no-notes {\n    color: var(--text-muted);\n  }\n\n  .movement-details {\n    .detail-row {\n      display: flex;\n      align-items: center;\n      margin-bottom: var(--space-4);\n\n      .label {\n        font-weight: var(--font-weight-medium);\n        color: var(--text-secondary);\n        min-width: 140px;\n      }\n\n      .value {\n        color: var(--text-primary);\n\n        .sku {\n          color: var(--text-muted);\n          font-size: var(--text-sm);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\ApiDocsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\BackupPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5700, 5703], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5700, 5703], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5833, 5836], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5833, 5836], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5963, 5966], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5963, 5966], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Backup & Restore\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Backup', to: '/platform/backup' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshBackups\"\n        />\n        <q-btn\n          class=\"app-btn-primary\"\n          icon=\"backup\"\n          label=\"Create Backup\"\n          :loading=\"creating\"\n          @click=\"createBackup\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Backup Statistics -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Backups Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Total backups\" icon=\"backup\" icon-color=\"positive\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              {{ backupStats.totalBackups }}\n            </div>\n            <div class=\"kpi-subtitle\">Total backups</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Last Backup Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Last backup\" icon=\"schedule\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">{{ backupStats.lastBackup }}</div>\n            <div class=\"kpi-subtitle\">Last backup</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Size Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Total size\" icon=\"storage\" icon-color=\"warning\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-warning\">\n              {{ backupStats.totalSize }}\n            </div>\n            <div class=\"kpi-subtitle\">Total size</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Retention Days Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Retention policy\" icon=\"timer\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">\n              {{ backupStats.retention }}\n            </div>\n            <div class=\"kpi-subtitle\">Retention days</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n    <!-- Backup History Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"backups\"\n        :columns=\"backupColumns as any\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"backup-history-table\"\n        title=\"Backup history\"\n      >\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getBackupStatusColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              icon=\"download\"\n              size=\"sm\"\n              class=\"app-btn-info\"\n              @click=\"downloadBackup(props.row)\"\n            >\n              <q-tooltip>Download</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"restore\"\n              size=\"sm\"\n              class=\"app-btn-warning\"\n              @click=\"restoreBackup(props.row)\"\n            >\n              <q-tooltip>Restore</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"delete\"\n              size=\"sm\"\n              class=\"app-btn-danger\"\n              @click=\"deleteBackup(props.row)\"\n            >\n              <q-tooltip>Delete</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const loading = ref(false);\n  const creating = ref(false);\n\n  const backupStats = ref({\n    totalBackups: 0,\n    lastBackup: 'N/A',\n    totalSize: '0 GB',\n    retention: 30,\n  });\n\n  const backups = ref([]);\n\n  const backupColumns = [\n    {\n      name: 'created_at',\n      label: 'Created',\n      field: 'created_at',\n      align: 'left',\n    },\n    { name: 'name', label: 'Name', field: 'name', align: 'left' },\n    { name: 'size', label: 'Size', field: 'size', align: 'right' },\n    { name: 'type', label: 'Type', field: 'type', align: 'center' },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n    { name: 'actions', label: 'Actions', field: 'actions', align: 'center' },\n  ];\n\n  const getBackupStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'positive';\n      case 'failed':\n        return 'negative';\n      case 'in_progress':\n        return 'warning';\n      default:\n        return 'grey';\n    }\n  };\n\n  const refreshBackups = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement backup fetching\n      console.log('Refreshing backups...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createBackup = async () => {\n    creating.value = true;\n    try {\n      // TODO: Implement backup creation\n      console.log('Creating backup...');\n    } finally {\n      creating.value = false;\n    }\n  };\n\n  const downloadBackup = (backup: any) => {\n    console.log('Download backup:', backup);\n    // TODO: Implement backup download\n  };\n\n  const restoreBackup = (backup: any) => {\n    console.log('Restore backup:', backup);\n    // TODO: Implement backup restore\n  };\n\n  const deleteBackup = (backup: any) => {\n    console.log('Delete backup:', backup);\n    // TODO: Implement backup deletion\n  };\n\n  onMounted(() => {\n    refreshBackups();\n  });\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\CreatePracticePage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\DatabaseAdminPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\MonitoringPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\PlatformDashboard.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 363,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 363,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10337, 10340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10337, 10340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      :title=\"$t('platform.title')\"\n      :subtitle=\"$t('platform.subtitle')\"\n      icon=\"admin_panel_settings\"\n    >\n      <template #actions>\n        <q-chip\n          :color=\"systemHealthColor\"\n          text-color=\"white\"\n          :icon=\"systemHealthIcon\"\n          class=\"q-px-md\"\n        >\n          {{\n            $t(\n              `platform.systemHealth.${dashboardData?.platformMetrics.systemHealth}`\n            )\n          }}\n        </q-chip>\n      </template>\n    </PageTitle>\n\n    <!-- System Info Bar -->\n    <q-card class=\"q-mb-lg\">\n      <q-card-section class=\"bg-grey-1\">\n        <div class=\"row items-center q-gutter-lg\">\n          <div class=\"col-auto\">\n            <span class=\"text-caption text-grey-6\"\n              >{{ $t('platform.version') }}:</span\n            >\n            <span class=\"text-weight-bold q-ml-xs\">{{\n              dashboardData?.systemInfo.version\n            }}</span>\n          </div>\n          <div class=\"col-auto\">\n            <span class=\"text-caption text-grey-6\"\n              >{{ $t('platform.environment') }}:</span\n            >\n            <span class=\"text-weight-bold q-ml-xs\">{{\n              dashboardData?.systemInfo.environment\n            }}</span>\n          </div>\n          <div class=\"col-auto\">\n            <span class=\"text-caption text-grey-6\"\n              >{{ $t('platform.uptime') }}:</span\n            >\n            <span class=\"text-weight-bold q-ml-xs\">{{\n              dashboardData?.systemInfo.uptime\n            }}</span>\n          </div>\n          <div class=\"col-auto\">\n            <span class=\"text-caption text-grey-6\"\n              >{{ $t('platform.lastDeployment') }}:</span\n            >\n            <span class=\"text-weight-bold q-ml-xs\">{{\n              formatDateTime(dashboardData?.systemInfo.lastDeployment)\n            }}</span>\n          </div>\n        </div>\n      </q-card-section>\n    </q-card>\n\n    <!-- Platform Metrics Overview -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Practices Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('platform.metrics.totalPractices')\"\n          icon=\"business\"\n          icon-color=\"primary\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">\n              {{ dashboardData?.platformMetrics.totalPractices || 0 }}\n            </div>\n            <div class=\"kpi-subtitle\">Practices</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Users Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('platform.metrics.totalUsers')\"\n          icon=\"people\"\n          icon-color=\"info\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">\n              {{ dashboardData?.platformMetrics.totalUsers || 0 }}\n            </div>\n            <div class=\"kpi-subtitle\">Users</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Active Today Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('platform.metrics.activeToday')\"\n          icon=\"trending_up\"\n          icon-color=\"positive\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              {{ dashboardData?.platformMetrics.activeToday || 0 }}\n            </div>\n            <div class=\"kpi-subtitle\">Active today</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Events Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('platform.metrics.totalEvents')\"\n          icon=\"event\"\n          icon-color=\"warning\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-warning\">\n              {{\n                formatNumber(dashboardData?.platformMetrics.totalEvents || 0)\n              }}\n            </div>\n            <div class=\"kpi-subtitle\">Events</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Quick Actions -->\n    <div class=\"quick-actions q-pa-md\">\n      <div class=\"text-h6 q-mb-md\">{{ $t('platform.quickActions.title') }}</div>\n      <div class=\"row q-gutter-md\">\n        <div\n          v-for=\"action in dashboardData?.quickActions\"\n          :key=\"action.id\"\n          class=\"col-auto\"\n        >\n          <q-btn\n            :color=\"action.color\"\n            :icon=\"action.icon\"\n            :label=\"action.label\"\n            :to=\"action.route\"\n            class=\"app-btn-secondary full-width\"\n            size=\"lg\"\n            style=\"min-width: 200px\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <!-- Dashboard Widgets -->\n    <div class=\"dashboard-widgets q-pa-md\">\n      <div class=\"row q-gutter-md\">\n        <div\n          v-for=\"widget in sortedWidgets\"\n          :key=\"widget.id\"\n          :class=\"getWidgetClass(widget.size)\"\n        >\n          <DynamicPlatformWidget\n            :widget=\"widget\"\n            @refresh=\"refreshWidget\"\n            @configure=\"configureWidget\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <!-- Refresh FAB -->\n    <q-page-sticky position=\"bottom-right\" :offset=\"[18, 18]\">\n      <q-btn\n        fab\n        icon=\"refresh\"\n        color=\"primary\"\n        class=\"app-btn-refresh\"\n        :loading=\"loading\"\n        @click=\"refreshDashboard\"\n      >\n        <q-tooltip>{{ $t('platform.actions.refresh') }}</q-tooltip>\n      </q-btn>\n    </q-page-sticky>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted, onUnmounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import {\n    platformDashboardService,\n    type PlatformDashboardData,\n  } from '@/services/dashboard/platform-dashboard';\n  import { dashboardLogger } from '@/utils/logger';\n  import DynamicPlatformWidget from '@/components/platform/DynamicPlatformWidget.vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import { BaseCard } from '@/components/cards';\n\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // Reactive state\n  const loading = ref(false);\n  const dashboardData = ref<PlatformDashboardData | null>(null);\n  const refreshInterval = ref<NodeJS.Timer | null>(null);\n\n  // Computed properties\n  const sortedWidgets = computed(() => {\n    return (\n      dashboardData.value?.widgets\n        .slice()\n        .sort((a, b) => a.position - b.position) || []\n    );\n  });\n\n  const systemHealthColor = computed(() => {\n    const health = dashboardData.value?.platformMetrics.systemHealth;\n    switch (health) {\n      case 'healthy':\n        return 'positive';\n      case 'warning':\n        return 'warning';\n      case 'critical':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  });\n\n  const systemHealthIcon = computed(() => {\n    const health = dashboardData.value?.platformMetrics.systemHealth;\n    switch (health) {\n      case 'healthy':\n        return 'check_circle';\n      case 'warning':\n        return 'warning';\n      case 'critical':\n        return 'error';\n      default:\n        return 'help';\n    }\n  });\n\n  // Methods\n  function getWidgetClass(size: 'small' | 'medium' | 'large'): string {\n    switch (size) {\n      case 'small':\n        return 'col-12 col-md-6 col-lg-4';\n      case 'medium':\n        return 'col-12 col-md-6 col-lg-6';\n      case 'large':\n        return 'col-12';\n      default:\n        return 'col-12 col-md-6';\n    }\n  }\n\n  function formatNumber(num: number): string {\n    if (num >= 1000000) {\n      return (num / 1000000).toFixed(1) + 'M';\n    } else if (num >= 1000) {\n      return (num / 1000).toFixed(1) + 'K';\n    }\n    return num.toString();\n  }\n\n  function formatDateTime(dateString?: string): string {\n    if (!dateString) return 'Unknown';\n\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('nl-NL', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    }).format(date);\n  }\n\n  async function loadDashboard() {\n    try {\n      loading.value = true;\n      dashboardLogger.info('🌐 Loading platform dashboard...');\n\n      dashboardData.value = await platformDashboardService.getDashboardData();\n\n      dashboardLogger.info('✅ Platform dashboard loaded successfully');\n    } catch (error) {\n      dashboardLogger.error('❌ Failed to load platform dashboard:', error as Record<string, unknown>);\n\n      // Show error notification\n      $q.notify({\n        type: 'negative',\n        message: t('platform.errors.loadFailed'),\n        actions: [\n          {\n            label: t('common.retry'),\n            color: 'white',\n            handler: () => loadDashboard(),\n          },\n        ],\n      });\n    } finally {\n      loading.value = false;\n    }\n  }\n\n  async function refreshDashboard() {\n    await loadDashboard();\n\n    $q.notify({\n      type: 'positive',\n      message: t('platform.messages.refreshed'),\n      timeout: 2000,\n    });\n  }\n\n  async function refreshWidget(widgetId: string) {\n    try {\n      dashboardLogger.info(`🔄 Refreshing widget: ${widgetId}`);\n\n      // Find and update the specific widget\n      if (dashboardData.value) {\n        const widget = dashboardData.value.widgets.find(w => w.id === widgetId);\n        if (widget) {\n          widget.loading = true;\n\n          // Reload the entire dashboard for now\n          // In a more sophisticated implementation, we'd reload just this widget\n          await loadDashboard();\n        }\n      }\n    } catch (error) {\n      dashboardLogger.error(`❌ Failed to refresh widget ${widgetId}:`, error as Record<string, unknown>);\n    }\n  }\n\n  function configureWidget(widgetId: string) {\n    dashboardLogger.info(`⚙️ Configuring widget: ${widgetId}`);\n\n    $q.notify({\n      type: 'info',\n      message: t('platform.messages.configureWidget', { widget: widgetId }),\n      timeout: 3000,\n    });\n  }\n\n  function startAutoRefresh() {\n    // Auto-refresh every 5 minutes\n    refreshInterval.value = setInterval(\n      () => {\n        loadDashboard();\n      },\n      5 * 60 * 1000\n    );\n  }\n\n  function stopAutoRefresh() {\n    if (refreshInterval.value) {\n      clearInterval(refreshInterval.value as any);\n      refreshInterval.value = null;\n    }\n  }\n\n  // Lifecycle\n  onMounted(() => {\n    loadDashboard();\n    startAutoRefresh();\n  });\n\n  onUnmounted(() => {\n    stopAutoRefresh();\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n\n  .quick-actions {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 16px 16px 0 0;\n    margin-top: 2rem;\n  }\n\n  .dashboard-widgets {\n    background: rgba(255, 255, 255, 0.98);\n    min-height: 60vh;\n  }\n\n  // Dark mode support\n  .body--dark {\n    .quick-actions {\n      background: rgba(0, 0, 0, 0.8);\n      color: white;\n    }\n\n    .dashboard-widgets {\n      background: rgba(0, 0, 0, 0.9);\n    }\n  }\n\n  // Responsive design\n  @media (max-width: 768px) {\n    .platform-header .row {\n      flex-direction: column;\n      text-align: center;\n\n      .col-auto:last-child {\n        margin-top: 1rem;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\PracticesPage.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3344, 3347], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3344, 3347], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3481, 3484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3481, 3484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Practice Management\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Practices', to: '/platform/practices' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshData\"\n        />\n        <q-btn\n          class=\"app-btn-primary\"\n          icon=\"add\"\n          label=\"Create Practice\"\n          @click=\"$router.push('/platform/practices/create')\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Practices Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"practices\"\n        :columns=\"columns as any\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"practices-table\"\n        title=\"Practices overview\"\n      >\n        <template #body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getStatusColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              icon=\"edit\"\n              size=\"sm\"\n              class=\"app-btn-secondary\"\n              @click=\"editPractice(props.row)\"\n            >\n              <q-tooltip>Edit</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"visibility\"\n              size=\"sm\"\n              class=\"app-btn-info\"\n              @click=\"viewPractice(props.row)\"\n            >\n              <q-tooltip>View</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const practices = ref([]);\n  const loading = ref(false);\n\n  const columns = [\n    { name: 'name', label: 'Practice Name', field: 'name', align: 'left' },\n    { name: 'email', label: 'Contact Email', field: 'email', align: 'left' },\n    {\n      name: 'users_count',\n      label: 'Users',\n      field: 'users_count',\n      align: 'center',\n    },\n    {\n      name: 'created_at',\n      label: 'Created',\n      field: 'created_at',\n      align: 'left',\n    },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n    { name: 'actions', label: 'Actions', field: 'actions', align: 'center' },\n  ];\n\n  const refreshData = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement practice data fetching\n      console.log('Refreshing practices data...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'positive';\n      case 'inactive':\n        return 'negative';\n      case 'suspended':\n        return 'warning';\n      default:\n        return 'grey';\n    }\n  };\n\n  const editPractice = (practice: any) => {\n    console.log('Edit practice:', practice);\n    // TODO: Implement edit functionality\n  };\n\n  const viewPractice = (practice: any) => {\n    console.log('View practice:', practice);\n    // TODO: Implement view functionality\n  };\n\n  onMounted(() => {\n    refreshData();\n  });\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\SystemLogsPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\advancedOrderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\locations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\movements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\orderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\orders.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\products.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\suppliers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\router\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\router\\routes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\admin.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 791,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 791,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22443, 22446], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22443, 22446], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 794,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 794,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22540, 22543], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22540, 22543], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 799,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 799,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22662, 22665], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22662, 22665], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 848,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 848,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23980, 23983], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23980, 23983], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/services/supabase';\r\nimport type {\r\n  Location,\r\n  LocationInsert,\r\n  LocationUpdate,\r\n  UserPermission,\r\n  UserPermissionInsert,\r\n} from '@/types/supabase';\r\nimport type { PermissionType, ResourceType } from '@/types/permissions';\r\nimport type { PracticeMemberRow } from '@/types/inventory';\r\nimport type { UsageAnalytics } from '@/types/analytics';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { analyticsService } from './analytics';\r\n\r\n// Error message constants (to be translated in components)\r\nconst ADMIN_ERRORS = {\r\n  NO_PRACTICE_SELECTED: 'admin.errors.noPracticeSelected',\r\n  PRACTICE_OR_USER_NOT_FOUND: 'admin.errors.practiceOrUserNotFound',\r\n  USER_NOT_FOUND_IN_PRACTICE: 'admin.errors.userNotFoundInPractice',\r\n  USER_EMAIL_NOT_FOUND: 'admin.errors.userEmailNotFound',\r\n  CANNOT_DEACTIVATE_PRACTICE_OWNER:\r\n    'admin.errors.cannotDeactivatePracticeOwner',\r\n  CANNOT_DELETE_MAIN_LOCATION: 'admin.errors.cannotDeleteMainLocation',\r\n  INSUFFICIENT_PERMISSIONS_CREATE:\r\n    'admin.errors.insufficientPermissionsToCreate',\r\n  INSUFFICIENT_PERMISSIONS_UPDATE:\r\n    'admin.errors.insufficientPermissionsToUpdate',\r\n  INSUFFICIENT_PERMISSIONS_DELETE:\r\n    'admin.errors.insufficientPermissionsToDelete',\r\n  INSUFFICIENT_PERMISSIONS_VIEW: 'admin.errors.insufficientPermissionsToView',\r\n  INSUFFICIENT_PERMISSIONS_GRANT: 'admin.errors.insufficientPermissionsToGrant',\r\n  INSUFFICIENT_PERMISSIONS_REVOKE:\r\n    'admin.errors.insufficientPermissionsToRevoke',\r\n  INSUFFICIENT_PERMISSIONS_RESET: 'admin.errors.insufficientPermissionsToReset',\r\n  INSUFFICIENT_PERMISSIONS_TOGGLE:\r\n    'admin.errors.insufficientPermissionsToToggle',\r\n  FAILED_TO_CREATE: 'admin.errors.failedToCreate',\r\n  FAILED_TO_UPDATE: 'admin.errors.failedToUpdate',\r\n  FAILED_TO_DELETE: 'admin.errors.failedToDelete',\r\n  FAILED_TO_GET: 'admin.errors.failedToGet',\r\n  FAILED_TO_GRANT: 'admin.errors.failedToGrant',\r\n  FAILED_TO_REVOKE: 'admin.errors.failedToRevoke',\r\n  FAILED_TO_SEND: 'admin.errors.failedToSend',\r\n  FAILED_TO_SET: 'admin.errors.failedToSet',\r\n} as const;\r\n\r\nexport interface AuditLogEntry {\r\n  id: string;\r\n  practice_id: string;\r\n  user_id: string | null;\r\n  action: string;\r\n  resource_type: string;\r\n  resource_id: string | null;\r\n  old_values: Record<string, unknown>;\r\n  new_values: Record<string, unknown>;\r\n  metadata: Record<string, unknown>;\r\n  timestamp: Date;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n}\r\n\r\nexport interface PermissionCheck {\r\n  hasPermission: boolean;\r\n  reason?: string;\r\n  expires_at?: Date;\r\n}\r\n\r\nexport class AdminService {\r\n  /**\r\n   * Create a new location\r\n   */\r\n  async createLocation(\r\n    locationData: Omit<LocationInsert, 'practice_id'>\r\n  ): Promise<Location> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n    const user = authStore.user;\r\n\r\n    if (!practiceId || !user) {\r\n      throw new Error(ADMIN_ERRORS.PRACTICE_OR_USER_NOT_FOUND);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice', practiceId))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_CREATE);\r\n    }\r\n\r\n    const newLocation: LocationInsert = {\r\n      ...locationData,\r\n      practice_id: practiceId,\r\n    };\r\n\r\n    const { data, error } = await supabase\r\n      .from('practice_locations')\r\n      .insert(newLocation)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_CREATE);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity('location_created', 'location', data.id, null, data);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get all locations for current practice\r\n   */\r\n  async getLocations(): Promise<Location[]> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('practice_locations')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .order('is_main', { ascending: false })\r\n      .order('name');\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_GET);\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  /**\r\n   * Update location\r\n   */\r\n  async updateLocation(\r\n    locationId: string,\r\n    updates: LocationUpdate\r\n  ): Promise<Location> {\r\n    // Check permissions\r\n    if (!(await this.hasPermission('write', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_UPDATE);\r\n    }\r\n\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    // Get current data for audit log\r\n    const { data: currentData } = await supabase\r\n      .from('practice_locations')\r\n      .select('*')\r\n      .eq('id', locationId)\r\n      .single();\r\n\r\n    const { data, error } = await supabase\r\n      .from('practice_locations')\r\n      .update({\r\n        ...updates,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('id', locationId)\r\n      .eq('practice_id', practiceId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_UPDATE);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'location_updated',\r\n      'location',\r\n      locationId,\r\n      currentData,\r\n      data\r\n    );\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Delete location\r\n   */\r\n  async deleteLocation(locationId: string): Promise<void> {\r\n    // Check permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_DELETE);\r\n    }\r\n\r\n    // Get current data for audit log\r\n    const { data: currentData } = await supabase\r\n      .from('practice_locations')\r\n      .select('*')\r\n      .eq('id', locationId)\r\n      .single();\r\n\r\n    // Check if it's the main location\r\n    if (currentData?.is_main_location) {\r\n      throw new Error(ADMIN_ERRORS.CANNOT_DELETE_MAIN_LOCATION);\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('practice_locations')\r\n      .delete()\r\n      .eq('id', locationId);\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_DELETE);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'location_deleted',\r\n      'location',\r\n      locationId,\r\n      currentData,\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Grant permission to user\r\n   */\r\n  async grantPermission(\r\n    userId: string,\r\n    permissionType: PermissionType,\r\n    resourceType: ResourceType,\r\n    resourceId?: string,\r\n    locationId?: string,\r\n    expiresAt?: Date\r\n  ): Promise<UserPermission> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n    const grantedBy = authStore.user?.id;\r\n\r\n    if (!practiceId || !grantedBy) {\r\n      throw new Error(ADMIN_ERRORS.PRACTICE_OR_USER_NOT_FOUND);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_GRANT);\r\n    }\r\n\r\n    const permissionData: UserPermissionInsert = {\r\n      user_id: userId,\r\n      practice_id: practiceId,\r\n      location_id: locationId || null,\r\n      permission_type: permissionType,\r\n      resource_type: resourceType,\r\n      resource_id: resourceId || null,\r\n      granted_by: grantedBy,\r\n      expires_at: expiresAt?.toISOString() || null,\r\n    };\r\n\r\n    const { data, error } = await supabase\r\n      .from('user_permissions')\r\n      .insert(permissionData)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_GRANT);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'permission_granted',\r\n      'user_permission',\r\n      data.id,\r\n      null,\r\n      data\r\n    );\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Revoke permission\r\n   */\r\n  async revokePermission(permissionId: string): Promise<void> {\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_REVOKE);\r\n    }\r\n\r\n    // Get current data for audit log\r\n    const { data: currentData } = await supabase\r\n      .from('user_permissions')\r\n      .select('*')\r\n      .eq('id', permissionId)\r\n      .single();\r\n\r\n    const { error } = await supabase\r\n      .from('user_permissions')\r\n      .delete()\r\n      .eq('id', permissionId);\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_REVOKE);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'permission_revoked',\r\n      'user_permission',\r\n      permissionId,\r\n      currentData,\r\n      null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if user has permission\r\n   */\r\n  async hasPermission(\r\n    permissionType: PermissionType,\r\n    resourceType: ResourceType,\r\n    resourceId?: string,\r\n    userId?: string\r\n  ): Promise<boolean> {\r\n    const authStore = useAuthStore();\r\n    const checkUserId = userId || authStore.user?.id;\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!checkUserId || !practiceId) {\r\n      return false;\r\n    }\r\n\r\n    // Check if user is practice owner (has all permissions)\r\n    const { data: membership } = await supabase\r\n      .from('practice_members')\r\n      .select('role')\r\n      .eq('practice_id', practiceId)\r\n      .eq('user_id', checkUserId)\r\n      .single();\r\n\r\n    if (membership?.role === 'owner') {\r\n      return true;\r\n    }\r\n\r\n    // Check specific permissions\r\n    let query = supabase\r\n      .from('user_permissions')\r\n      .select('*')\r\n      .eq('user_id', checkUserId)\r\n      .eq('practice_id', practiceId)\r\n      .eq('permission_type', permissionType)\r\n      .eq('resource_type', resourceType);\r\n\r\n    if (resourceId) {\r\n      query = query.eq('resource_id', resourceId);\r\n    }\r\n\r\n    const { data: permissions } = await query;\r\n\r\n    if (!permissions || permissions.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // Check if any permission is valid (not expired)\r\n    const now = new Date();\r\n    return permissions.some(\r\n      permission =>\r\n        !permission.expires_at || new Date(permission.expires_at) > now\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get detailed permission check\r\n   */\r\n  async checkPermission(\r\n    permissionType: PermissionType,\r\n    resourceType: ResourceType,\r\n    resourceId?: string,\r\n    userId?: string\r\n  ): Promise<PermissionCheck> {\r\n    const authStore = useAuthStore();\r\n    const checkUserId = userId || authStore.user?.id;\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!checkUserId || !practiceId) {\r\n      return { hasPermission: false, reason: 'User or practice not found' };\r\n    }\r\n\r\n    // Check if user is practice owner\r\n    const { data: membership } = await supabase\r\n      .from('practice_members')\r\n      .select('role')\r\n      .eq('practice_id', practiceId)\r\n      .eq('user_id', checkUserId)\r\n      .single();\r\n\r\n    if (membership?.role === 'owner') {\r\n      return { hasPermission: true, reason: 'Practice owner' };\r\n    }\r\n\r\n    // Check specific permissions\r\n    let query = supabase\r\n      .from('user_permissions')\r\n      .select('*')\r\n      .eq('user_id', checkUserId)\r\n      .eq('practice_id', practiceId)\r\n      .eq('permission_type', permissionType)\r\n      .eq('resource_type', resourceType);\r\n\r\n    if (resourceId) {\r\n      query = query.eq('resource_id', resourceId);\r\n    }\r\n\r\n    const { data: permissions } = await query;\r\n\r\n    if (!permissions || permissions.length === 0) {\r\n      return { hasPermission: false, reason: 'No matching permissions found' };\r\n    }\r\n\r\n    // Check if any permission is valid\r\n    const now = new Date();\r\n    const validPermission = permissions.find(\r\n      permission =>\r\n        !permission.expires_at || new Date(permission.expires_at) > now\r\n    );\r\n\r\n    if (validPermission) {\r\n      const result: PermissionCheck = {\r\n        hasPermission: true,\r\n      };\r\n\r\n      if (validPermission.expires_at) {\r\n        result.expires_at = new Date(validPermission.expires_at);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    return { hasPermission: false, reason: 'All permissions have expired' };\r\n  }\r\n\r\n  /**\r\n   * Get user permissions\r\n   */\r\n  async getUserPermissions(userId?: string): Promise<UserPermission[]> {\r\n    const authStore = useAuthStore();\r\n    const checkUserId = userId || authStore.user?.id;\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!checkUserId || !practiceId) {\r\n      throw new Error(ADMIN_ERRORS.PRACTICE_OR_USER_NOT_FOUND);\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('user_permissions')\r\n      .select('*')\r\n      .eq('user_id', checkUserId)\r\n      .eq('practice_id', practiceId)\r\n      .order('created_at', { ascending: false });\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_GET);\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  /**\r\n   * Get practice members with their permissions\r\n   */\r\n  async getPracticeMembers(): Promise<\r\n    (PracticeMemberRow & { permissions?: UserPermission[] })[]\r\n  > {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error('No practice selected');\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('read', 'practice'))) {\r\n      throw new Error('Insufficient permissions to view members');\r\n    }\r\n\r\n    const { data: members, error } = await supabase\r\n      .from('practice_members')\r\n      .select('*')\r\n      .eq('practice_id', practiceId);\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_GET);\r\n    }\r\n\r\n    // Get permissions for each member\r\n    const membersWithPermissions = await Promise.all(\r\n      (members as PracticeMemberRow[] | null | undefined)?.map(async member => {\r\n        const permissions = await this.getUserPermissions(member.user_id);\r\n        return { ...member, permissions };\r\n      }) ?? []\r\n    );\r\n\r\n    return membersWithPermissions;\r\n  }\r\n\r\n  /**\r\n   * Log activity for audit trail\r\n   */\r\n  async logActivity(\r\n    action: string,\r\n    resourceType: string,\r\n    resourceId: string | null,\r\n    oldValues: Record<string, unknown> | null = null,\r\n    newValues: Record<string, unknown> | null = null,\r\n    metadata: Record<string, unknown> = {}\r\n  ): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await analyticsService.trackEvent('admin_activity', {\r\n        action,\r\n        resource_type: resourceType,\r\n        resource_id: resourceId,\r\n        old_values: oldValues,\r\n        new_values: newValues,\r\n        metadata,\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to log admin activity:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get audit log\r\n   */\r\n  async getAuditLog(filters?: {\r\n    action?: string;\r\n    resourceType?: string;\r\n    userId?: string;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n    limit?: number;\r\n  }): Promise<AuditLogEntry[]> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error('Insufficient permissions to view audit log');\r\n    }\r\n\r\n    // TODO: Implement proper audit log retrieval\r\n    const events: UsageAnalytics[] = await analyticsService.getUsageStats();\r\n\r\n    const auditEntries = (events\r\n      .filter(event => {\r\n        if (filters?.action && event.eventData?.action !== filters.action)\r\n          return false;\r\n        if (\r\n          filters?.resourceType &&\r\n          event.eventData?.resource_type !== filters.resourceType\r\n        )\r\n          return false;\r\n        return true;\r\n      })\r\n      .map(event => ({\r\n        id: event.id,\r\n        practice_id: event.practiceId ?? null,\r\n        user_id: event.userId ?? null,\r\n        action: event.eventData?.action || 'unknown',\r\n        resource_type: event.eventData?.resource_type || 'unknown',\r\n        resource_id: event.eventData?.resource_id,\r\n        old_values: event.eventData?.old_values,\r\n        new_values: event.eventData?.new_values,\r\n        metadata: event.eventData?.metadata || {},\r\n        timestamp: new Date(event.createdAt),\r\n        ip_address: event.ipAddress ?? null,\r\n        user_agent: event.userAgent ?? null,\r\n      }))\r\n      .slice(0, filters?.limit || 100)) as AuditLogEntry[];\r\n\r\n    return auditEntries;\r\n  }\r\n\r\n  /**\r\n   * Set main location\r\n   */\r\n  async setMainLocation(locationId: string): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_TOGGLE);\r\n    }\r\n\r\n    // Remove main flag from all locations\r\n    await supabase\r\n      .from('practice_locations')\r\n      .update({ is_main_location: false })\r\n      .eq('practice_id', practiceId);\r\n\r\n    // Set new main location\r\n    const { error } = await supabase\r\n      .from('practice_locations')\r\n      .update({ is_main_location: true })\r\n      .eq('id', locationId)\r\n      .eq('practice_id', practiceId);\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_SET);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'main_location_changed',\r\n      'location',\r\n      locationId,\r\n      null,\r\n      { is_main_location: true }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get permission templates\r\n   */\r\n  getPermissionTemplates() {\r\n    return {\r\n      assistant: [\r\n        { permission_type: 'read', resource_type: 'bestellijst' },\r\n        { permission_type: 'write', resource_type: 'bestellijst' },\r\n        { permission_type: 'read', resource_type: 'product' },\r\n        { permission_type: 'write', resource_type: 'product' },\r\n        { permission_type: 'read', resource_type: 'cart' },\r\n        { permission_type: 'write', resource_type: 'cart' },\r\n      ],\r\n      manager: [\r\n        { permission_type: 'read', resource_type: 'bestellijst' },\r\n        { permission_type: 'write', resource_type: 'bestellijst' },\r\n        { permission_type: 'delete', resource_type: 'bestellijst' },\r\n        { permission_type: 'read', resource_type: 'product' },\r\n        { permission_type: 'write', resource_type: 'product' },\r\n        { permission_type: 'read', resource_type: 'order' },\r\n        { permission_type: 'write', resource_type: 'order' },\r\n        { permission_type: 'read', resource_type: 'analytics' },\r\n      ],\r\n      admin: [{ permission_type: 'admin', resource_type: 'practice' }],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Apply permission template\r\n   */\r\n  async applyPermissionTemplate(\r\n    userId: string,\r\n    template: 'assistant' | 'manager' | 'admin',\r\n    locationId?: string\r\n  ): Promise<void> {\r\n    const templates = this.getPermissionTemplates();\r\n    const permissions = templates[template];\r\n\r\n    for (const permission of permissions) {\r\n      await this.grantPermission(\r\n        userId,\r\n        permission.permission_type as PermissionType,\r\n        permission.resource_type as ResourceType,\r\n        undefined,\r\n        locationId\r\n      );\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'permission_template_applied',\r\n      'user_permission',\r\n      null,\r\n      null,\r\n      {\r\n        user_id: userId,\r\n        template,\r\n        location_id: locationId,\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Reset user password\r\n   */\r\n  async resetUserPassword(userId: string): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_RESET);\r\n    }\r\n\r\n    // Get user email from practice members\r\n    const { data: member, error: memberError } = await supabase\r\n      .from('practice_members')\r\n      .select('user_id')\r\n      .eq('practice_id', practiceId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (memberError || !member) {\r\n      throw new Error(ADMIN_ERRORS.USER_NOT_FOUND_IN_PRACTICE);\r\n    }\r\n\r\n    // Get user email from auth.users\r\n    const { data: userData, error: userError } =\r\n      await supabase.auth.admin.getUserById(userId);\r\n\r\n    if (userError || !userData?.user?.email) {\r\n      throw new Error(ADMIN_ERRORS.USER_EMAIL_NOT_FOUND);\r\n    }\r\n\r\n    // Use Supabase Auth API to reset password\r\n    const { error } = await supabase.auth.resetPasswordForEmail(\r\n      userData.user.email,\r\n      {\r\n        redirectTo: `${window.location.origin}/auth/reset-password`,\r\n      }\r\n    );\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_SEND);\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity('password_reset_initiated', 'user', userId, null, {\r\n      email: userData.user.email,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle user status (activate/deactivate)\r\n   */\r\n  async toggleUserStatus(userId: string, activate: boolean): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      throw new Error(ADMIN_ERRORS.NO_PRACTICE_SELECTED);\r\n    }\r\n\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error(ADMIN_ERRORS.INSUFFICIENT_PERMISSIONS_TOGGLE);\r\n    }\r\n\r\n    // Get current member data\r\n    const { data: currentMember, error: getCurrentError } = await supabase\r\n      .from('practice_members')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .eq('user_id', userId)\r\n      .single();\r\n\r\n    if (getCurrentError || !currentMember) {\r\n      throw new Error(ADMIN_ERRORS.USER_NOT_FOUND_IN_PRACTICE);\r\n    }\r\n\r\n    // Don't allow deactivating practice owner\r\n    if (!activate && currentMember.role === 'owner') {\r\n      throw new Error(ADMIN_ERRORS.CANNOT_DEACTIVATE_PRACTICE_OWNER);\r\n    }\r\n\r\n    // Update user status\r\n    const newRole = activate\r\n      ? (currentMember.role as any) === 'inactive'\r\n        ? 'assistant'\r\n        : currentMember.role\r\n      : ('inactive' as any);\r\n\r\n    const { error } = await supabase\r\n      .from('practice_members')\r\n      .update({\r\n        role: newRole as any,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq('practice_id', practiceId)\r\n      .eq('user_id', userId);\r\n\r\n    if (error) {\r\n      throw new Error(ADMIN_ERRORS.FAILED_TO_UPDATE);\r\n    }\r\n\r\n    // If deactivating, revoke all active permissions\r\n    if (!activate) {\r\n      const permissions = await this.getUserPermissions(userId);\r\n      for (const permission of permissions) {\r\n        await this.revokePermission(permission.id);\r\n      }\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      activate ? 'user_activated' : 'user_deactivated',\r\n      'user',\r\n      userId,\r\n      { role: currentMember.role },\r\n      { role: newRole }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Bulk update user roles for location\r\n   */\r\n  async bulkUpdateLocationAccess(\r\n    locationId: string,\r\n    userUpdates: Array<{\r\n      userId: string;\r\n      permissionType: PermissionType;\r\n      grant: boolean;\r\n    }>\r\n  ): Promise<void> {\r\n    // Check admin permissions\r\n    if (!(await this.hasPermission('admin', 'practice'))) {\r\n      throw new Error('Insufficient permissions to perform bulk user updates');\r\n    }\r\n\r\n    for (const update of userUpdates) {\r\n      if (update.grant) {\r\n        await this.grantPermission(\r\n          update.userId,\r\n          update.permissionType,\r\n          'orders' as any,\r\n          undefined,\r\n          locationId\r\n        );\r\n      } else {\r\n        // Find and revoke permission\r\n        const permissions = await this.getUserPermissions(update.userId);\r\n        const permission = permissions.find(\r\n          p =>\r\n            p.location_id === locationId &&\r\n            p.permission_type === update.permissionType &&\r\n            p.resource_type === 'bestellijst'\r\n        );\r\n\r\n        if (permission) {\r\n          await this.revokePermission(permission.id);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Log activity\r\n    await this.logActivity(\r\n      'bulk_location_access_updated',\r\n      'location',\r\n      locationId,\r\n      null,\r\n      {\r\n        updates: userUpdates,\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport const adminService = new AdminService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\analytics.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Do not use \"@ts-nocheck\" because it alters compilation errors.",
        "line": 1,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tsDirectiveComment",
        "endLine": 1,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// @ts-nocheck\n/** @deprecated Use analytics-vm.ts */\nimport { supabase } from '@/boot/supabase';\nimport { useAuthStore } from '@/stores/auth';\nimport { analyticsLogger } from '@/utils/logger';\nimport { handleSupabaseError } from '@/utils/service-error-handler';\nimport { t } from '@/utils/i18n-service';\nimport type {\n  AnalyticsDateRange,\n  AnalyticsSummary,\n  OrderMetrics,\n  ProductMetrics,\n  UserActivityMetrics,\n  AnalyticsStockLevelDTO,\n  LowStockItemDTO,\n  StockTurnoverRateDTO,\n  TopUsedProductDTO,\n} from '@/types/analytics';\nimport type { UsageAnalytics } from '@/types/analytics';\nimport type { StockLevelDTO } from '@/domain/inventory/dto';\n\n// Legacy compatibility types\ninterface LegacyStockLevel {\n  product_id: string;\n  location_id: string;\n  current_quantity: number;\n  minimum_quantity: number;\n  reserved_quantity: number;\n  available_quantity: number;\n  product_name?: string;\n  location_name?: string;\n  preferred_supplier_id?: string | null;\n  updated_at?: string | null;\n}\n\n// Removed unused legacy interface types\n\nconst _toLegacyStockLevel = (dto: StockLevelDTO): LegacyStockLevel => ({\n  product_id: dto.productId,\n  location_id: dto.locationId,\n  current_quantity: dto.currentQuantity ?? 0,\n  minimum_quantity: dto.minimumQuantity ?? 0,\n  reserved_quantity: dto.reservedQuantity ?? 0,\n  available_quantity: dto.availableQuantity ?? 0,\n  product_name: dto.productName ?? undefined,\n  location_name: dto.locationName ?? undefined,\n  preferred_supplier_id: dto.preferredSupplierId ?? null,\n  updated_at: dto.updatedAt ?? null,\n});\n\n// Removed unused toLegacyLowStockProduct function\n\n// Removed unused toLegacyStockLevelWithMovements function\n\n// Removed unused toLegacyUsageAnalytics function\n\n// Removed unused toLegacyStockEntry function\n\ninterface LowStockItem extends LowStockItemDTO {}\n\ninterface StockTurnoverRate extends StockTurnoverRateDTO {}\n\ntype MonthlyUsageTrends = Record<string, number>;\n\ninterface TopUsedProduct extends TopUsedProductDTO {}\n\ninterface CostSavingsAnalytics {\n  total_savings: number;\n  waste_reduction: number;\n  efficiency_improvement: number;\n  cost_per_unit_improvement: number;\n}\n\ninterface InventoryValueTrends {\n  current_value: number;\n  trend_data: Array<{ date: string; value: number }>;\n}\n\ninterface PredictedStockNeed {\n  productId: string;\n  productName: string;\n  currentStock: number;\n  predictedUsage: number;\n  suggestedOrder: number;\n}\n\ninterface ForecastAccuracy {\n  overall_accuracy: number;\n  category_accuracy: Record<string, number>;\n  trend: 'improving' | 'stable' | 'needs_attention' | 'insufficient_data';\n}\n\ninterface StockMovementRow {\n  movement_type: string;\n  quantity: number | null;\n  products?: {\n    price?: number | null;\n    category?: string | null;\n  } | null;\n}\n\ntype StockLevelWithMovementsRow = StockLevelView & {\n  stock_movements: StockMovementRow[] | StockMovementRow | null;\n};\n\ninterface StockEntryRow {\n  stockLevel: StockLevelView;\n  countedQuantity: number;\n  recordedAt: string;\n}\n\n// Removed unused InventoryProductRow interface\n\ntype JsonRecord = Record<string, unknown>;\n\nconst toArray = <T>(value: T | T[] | null | undefined): T[] =>\n  Array.isArray(value) ? value : value ? [value] : [];\n\nconst mapStockLevelToAnalyticsDTO = (\n  entry: StockLevelView\n): AnalyticsStockLevelDTO => ({\n  productId: entry.productId,\n  locationId: entry.locationId,\n  currentQuantity: entry.currentQuantity ?? 0,\n  minimumQuantity: entry.minimumQuantity ?? 0,\n  reservedQuantity: entry.reservedQuantity ?? 0,\n  availableQuantity: entry.availableQuantity ?? 0,\n  productName: entry.productName ?? undefined,\n  locationName: entry.locationName ?? undefined,\n  preferredSupplierId: entry.preferredSupplierId ?? undefined,\n  updatedAt: entry.updatedAt ?? undefined,\n});\n\nexport class AnalyticsService {\n  private sessionId: string = crypto.randomUUID();\n  private eventQueue: JsonRecord[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Auto-flush events every 30 seconds\n    this.startAutoFlush();\n  }\n\n  /**\n   * Track user event\n   */\n  async trackEvent(\n    eventType: string,\n    eventData?: JsonRecord,\n    location_id?: string\n  ): Promise<void> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      analyticsLogger.warn('No practice selected, skipping analytics event', {\n        eventType,\n      });\n      return;\n    }\n\n    try {\n      const { error } = await supabase.from('usage_analytics').insert([\n        {\n          practice_id: practiceId,\n          user_id: authStore.user?.id || null,\n          location_id: location_id || null,\n          event_type: eventType,\n          event_data: eventData || {},\n          session_id: this.sessionId,\n          user_agent: navigator.userAgent,\n        },\n      ]);\n\n      if (error) {\n        handleSupabaseError(error, {\n          service: 'AnalyticsService',\n          operation: 'trackEvent',\n          practiceId,\n          userId: authStore.user?.id ?? null,\n          metadata: { eventType, eventData },\n        });\n      }\n    } catch (error) {\n      analyticsLogger.error('Failed to track analytics event', {\n        eventType,\n        error,\n      });\n    }\n  }\n\n  /**\n   * Get comprehensive analytics summary\n   */\n  static async getSummary(\n    dateRange: AnalyticsDateRange\n  ): Promise<AnalyticsSummary> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      return {\n        totalEvents: 0,\n        activeUsers: 0,\n        totalOrders: 0,\n        productUpdates: 0,\n        topEvents: [],\n        userActivity: {},\n        dailyActivity: {},\n      };\n    }\n\n    try {\n      // Get usage analytics events\n      const { data: events = [] } = await supabase\n        .from('usage_analytics')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate)\n        .order('created_at', { ascending: false });\n\n      // Get orders count\n      const { count: ordersCount = 0 } = await supabase\n        .from('orders')\n        .select('*', { count: 'exact', head: true })\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate);\n\n      // Get stock entries count\n      const { count: stockEntriesCount = 0 } = await supabase\n        .from('stock_entries')\n        .select('*', { count: 'exact', head: true })\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate);\n\n      // Process events\n      const eventCounts: Record<string, number> = {};\n      const userActivity: Record<\n        string,\n        { count: number; lastActivity: string }\n      > = {};\n      const dailyActivity: Record<string, number> = {};\n\n      events?.forEach(event => {\n        if (!event || !event.event_type || !event.created_at) {\n          return;\n        }\n\n        // Count event types\n        eventCounts[event.event_type] =\n          (eventCounts[event.event_type] || 0) + 1;\n\n        // Track user activity\n        if (event.user_id) {\n          if (!userActivity[event.user_id]) {\n            userActivity[event.user_id] = {\n              count: 0,\n              lastActivity: event.created_at,\n            };\n          }\n          userActivity[event.user_id].count += 1;\n          if (\n            new Date(event.created_at) >\n            new Date(userActivity[event.user_id].lastActivity)\n          ) {\n            userActivity[event.user_id].lastActivity = event.created_at;\n          }\n        }\n\n        // Track daily activity\n        const date = new Date(event.created_at).toDateString();\n        dailyActivity[date] = (dailyActivity[date] || 0) + 1;\n      });\n\n      const topEvents = Object.entries(eventCounts)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 10) as [string, number][];\n\n      return {\n        totalEvents: events?.length || 0,\n        activeUsers: Object.keys(userActivity).length,\n        totalOrders: ordersCount || 0,\n        productUpdates: stockEntriesCount || 0,\n        topEvents,\n        userActivity,\n        dailyActivity,\n      };\n    } catch (error) {\n      analyticsLogger.error('Error getting analytics summary:', error);\n      return {\n        totalEvents: 0,\n        activeUsers: 0,\n        totalOrders: 0,\n        productUpdates: 0,\n        topEvents: [],\n        userActivity: {},\n        dailyActivity: {},\n      };\n    }\n  }\n\n  /**\n   * Get order analytics\n   */\n  static async getOrderMetrics(\n    dateRange: AnalyticsDateRange\n  ): Promise<OrderMetrics> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      return {\n        totalOrders: 0,\n        totalOrderValue: 0,\n        averageOrderSize: 0,\n        ordersByStatus: {},\n        frequentlyOrderedItems: [],\n        orderTrends: {},\n      };\n    }\n\n    try {\n      // Get orders with items\n      const { data: orders } = await supabase\n        .from('orders')\n        .select(\n          `\n          *,\n          order_items(\n            *,\n            products(name)\n          )\n        `\n        )\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate);\n\n      const totalOrders = orders?.length || 0;\n      const totalOrderValue =\n        orders?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0;\n      const averageOrderSize =\n        totalOrders > 0 ? totalOrderValue / totalOrders : 0;\n\n      const ordersByStatus: Record<string, number> = {};\n      const itemCounts = new Map<\n        string,\n        {\n          productName: string;\n          totalQuantity: number;\n          orderCount: number;\n          productId: string;\n        }\n      >();\n      const orderTrends: Record<string, number> = {};\n\n      orders?.forEach(order => {\n        // Count by status\n        ordersByStatus[order.status] = (ordersByStatus[order.status] || 0) + 1;\n\n        // Count order trends by day\n        const date = new Date(order.created_at).toDateString();\n        orderTrends[date] = (orderTrends[date] || 0) + 1;\n\n        // Count item frequencies\n        order.order_items?.forEach((item: OrderItem) => {\n          const key = item.product_id;\n          const existing = itemCounts.get(key);\n          if (existing) {\n            existing.totalQuantity += item.quantity;\n            existing.orderCount += 1;\n          } else {\n            itemCounts.set(key, {\n              productName: item.products?.name || 'Unknown Product',\n              totalQuantity: item.quantity,\n              orderCount: 1,\n              productId: item.product_id,\n            });\n          }\n        });\n      });\n\n      const frequentlyOrderedItems = Array.from(itemCounts.values())\n        .sort((a, b) => b.totalQuantity - a.totalQuantity)\n        .slice(0, 10);\n\n      return {\n        totalOrders,\n        totalOrderValue,\n        averageOrderSize,\n        ordersByStatus,\n        frequentlyOrderedItems,\n        orderTrends,\n      };\n    } catch (error) {\n      analyticsLogger.error('Error getting order metrics:', error);\n      return {\n        totalOrders: 0,\n        totalOrderValue: 0,\n        averageOrderSize: 0,\n        ordersByStatus: {},\n        frequentlyOrderedItems: [],\n        orderTrends: {},\n      };\n    }\n  }\n\n  /**\n   * Get product analytics\n   */\n  static async getProductMetrics(\n    dateRange: AnalyticsDateRange\n  ): Promise<ProductMetrics> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      return {\n        totalUpdates: 0,\n        productsScanned: 0,\n        lowStockAlerts: 0,\n        stockEntryTrends: {},\n        mostUpdatedProducts: [],\n      };\n    }\n\n    try {\n      // Get stock entries\n      const { data: stockEntries } = await supabase\n        .from('stock_entries')\n        .select(\n          `\n          *,\n          products(name)\n        `\n        )\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate);\n\n      // Get low stock alerts\n      const { data: lowStockItems } = await supabase\n        .from('order_suggestions')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .in('urgency_level', ['high', 'critical'])\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate);\n\n      const stockLevelDTOs = stockEntries.map(entry =>\n        mapStockLevelToAnalyticsDTO(entry)\n      );\n      const totalUpdates = stockLevelDTOs.length;\n      const productsScanned = new Set(\n        stockLevelDTOs.map(entry => entry.productId)\n      ).size;\n      const lowStockAlerts = lowStockItems?.length || 0;\n\n      const productUpdateCounts = new Map<\n        string,\n        { productName: string; updateCount: number; productId: string }\n      >();\n      const stockEntryTrends: Record<string, number> = {};\n\n      stockLevelDTOs.forEach(entry => {\n        const key = entry.productId;\n        const existing = productUpdateCounts.get(key);\n        if (existing) {\n          existing.updateCount += 1;\n        } else {\n          productUpdateCounts.set(key, {\n            productName: entry.productName ?? 'Unknown Product',\n            updateCount: 1,\n            productId: entry.productId,\n          });\n        }\n\n        const date = entry.updatedAt\n          ? new Date(entry.updatedAt).toDateString()\n          : 'Unknown';\n        stockEntryTrends[date] = (stockEntryTrends[date] || 0) + 1;\n      });\n\n      const mostUpdatedProducts = Array.from(productUpdateCounts.values())\n        .sort((a, b) => b.updateCount - a.updateCount)\n        .slice(0, 10);\n\n      return {\n        totalUpdates,\n        productsScanned,\n        lowStockAlerts,\n        stockEntryTrends,\n        mostUpdatedProducts,\n      };\n    } catch (error) {\n      analyticsLogger.error('Error getting product metrics:', error);\n      return {\n        totalUpdates: 0,\n        productsScanned: 0,\n        lowStockAlerts: 0,\n        stockEntryTrends: {},\n        mostUpdatedProducts: [],\n      };\n    }\n  }\n\n  /**\n   * Get user activity metrics\n   */\n  static async getUserActivityMetrics(\n    dateRange: AnalyticsDateRange\n  ): Promise<UserActivityMetrics> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      return {\n        activeUsers: 0,\n        totalSessions: 0,\n        averageSessionDuration: 0,\n        usersByRole: {},\n        mostActiveUsers: [],\n        userList: [],\n      };\n    }\n\n    try {\n      // Get usage analytics\n      const { data: analytics } = await supabase\n        .from('usage_analytics')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .gte('created_at', dateRange.startDate)\n        .lte('created_at', dateRange.endDate)\n        .order('created_at', { ascending: false });\n\n      const events = analytics as UsageAnalytics[] | null;\n\n      const userMap = new Map<\n        string,\n        {\n          activity_count: number;\n          last_activity: string;\n          total_events: number;\n          sessions: Set<string>;\n        }\n      >();\n\n      events?.forEach(event => {\n        if (!event || !event.user_id) {\n          return;\n        }\n\n        const existing = userMap.get(event.user_id);\n        if (existing) {\n          existing.activity_count += 1;\n          existing.total_events += 1;\n          if (event.session_id) {\n            existing.sessions.add(event.session_id);\n          }\n          if (new Date(event.created_at) > new Date(existing.last_activity)) {\n            existing.last_activity = event.created_at;\n          }\n        } else {\n          userMap.set(event.user_id, {\n            activity_count: 1,\n            last_activity: event.created_at,\n            total_events: 1,\n            sessions: new Set(event.session_id ? [event.session_id] : []),\n          });\n        }\n      });\n\n      const userList = Array.from(userMap.entries()).map(([user_id, data]) => ({\n        user_id,\n        activity_count: data.activity_count,\n        last_activity: data.last_activity,\n        total_events: data.total_events,\n      }));\n\n      const totalSessions = Array.from(userMap.values()).reduce(\n        (sum, user) => sum + user.sessions.size,\n        0\n      );\n      const averageSessionDuration =\n        analytics?.length && totalSessions > 0\n          ? analytics.length / totalSessions\n          : 0;\n\n      return {\n        activeUsers: userMap.size,\n        totalSessions,\n        averageSessionDuration,\n        userList,\n        usersByRole: {},\n        mostActiveUsers: [],\n      };\n    } catch (error) {\n      analyticsLogger.error('Error getting user activity metrics:', error);\n      return {\n        activeUsers: 0,\n        totalSessions: 0,\n        averageSessionDuration: 0,\n        usersByRole: {},\n        mostActiveUsers: [],\n        userList: [],\n      };\n    }\n  }\n\n  /**\n   * Get low stock items\n   */\n  static async getLowStockItems(clinicId: string): Promise<LowStockItem[]> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: productsData } = await supabase\n        .from('products')\n        .select(\n          `\n          id,\n          name,\n          stock_levels:stock_levels(\n            id,\n            practice_id,\n            location_id,\n            current_quantity,\n            available_quantity,\n            reserved_quantity,\n            minimum_quantity,\n            practice_locations(name)\n          )\n        `\n        )\n        .eq('stock_levels.practice_id', clinicId)\n        .order('stock_levels.current_quantity', { ascending: true });\n\n      if (!productsData) {\n        return [];\n      }\n\n      const products = productsData\n        .map(product => {\n          const stockLevels = toArray(product.stock_levels).map(level =>\n            mapStockLevelRowToView(level)\n          );\n          const primaryStock = stockLevels[0];\n\n          if (!primaryStock) {\n            return null;\n          }\n\n          const currentQuantity = primaryStock.currentQuantity ?? 0;\n          const minimumQuantity = primaryStock.minimumQuantity ?? 0;\n\n          if (currentQuantity > minimumQuantity) {\n            return null;\n          }\n\n          return {\n            productId: product.id,\n            productName: product.name ?? 'Unknown product',\n            currentQuantity,\n            minimumQuantity,\n            locationId: primaryStock.locationId,\n            locationName: primaryStock.locationName ?? 'Unknown location',\n            availableQuantity: primaryStock.availableQuantity ?? 0,\n            reservedQuantity: primaryStock.reservedQuantity ?? 0,\n            preferredSupplierId: primaryStock.preferredSupplierId ?? null,\n            productSku: product.sku ?? null,\n            unitPrice: product.unit_price ?? null,\n          } satisfies LowStockItemDTO;\n        })\n        .filter((item): item is LowStockItemDTO => item !== null);\n\n      return products;\n    } catch (error) {\n      analyticsLogger.error('Error fetching low stock items:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get stock turnover rates\n   */\n  static async getStockTurnoverRates(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<StockTurnoverRate[]> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: stockData } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n          id,\n          product_id,\n          practice_id,\n          location_id,\n          current_quantity,\n          available_quantity,\n          reserved_quantity,\n          minimum_quantity,\n          location_name,\n          product_name,\n          stock_movements!inner(\n            movement_type,\n            quantity,\n            created_at,\n            products(*),\n            stock_levels!inner(location_id)\n          )\n        `\n        )\n        .eq('practice_id', clinicId)\n        .gte('stock_movements.created_at', startDate.toISOString())\n        .lte('stock_movements.created_at', endDate.toISOString());\n\n      const levels = (stockData as StockLevelWithMovementsRow[] | null) ?? [];\n\n      if (!levels.length) {\n        return [];\n      }\n\n      const metrics = new Map<\n        string,\n        {\n          productId: string;\n          productName: string;\n          totalUsed: number;\n          averageStock: number;\n        }\n      >();\n\n      levels.forEach(level => {\n        const productId = level.product_id;\n        const productName = level.products.name ?? 'Unknown product';\n        const currentQuantity = level.current_quantity ?? 0;\n\n        if (!metrics.has(productId)) {\n          metrics.set(productId, {\n            productId,\n            productName,\n            totalUsed: 0,\n            averageStock: currentQuantity,\n          });\n        }\n\n        const entry = metrics.get(productId);\n        if (!entry) {\n          return;\n        }\n\n        entry.averageStock = (entry.averageStock + currentQuantity) / 2;\n\n        const movements = toArray(level.stock_movements);\n\n        movements.forEach(movement => {\n          if (movement.movement_type === 'usage') {\n            const quantity = Math.abs(movement.quantity ?? 0);\n            entry.totalUsed += quantity;\n          }\n        });\n      });\n\n      return Array.from(metrics.values()).map(metric => ({\n        productId: metric.productId,\n        productName: metric.productName,\n        totalUsed: metric.totalUsed,\n        averageStock: metric.averageStock,\n        turnoverRate:\n          metric.averageStock > 0 ? metric.totalUsed / metric.averageStock : 0,\n      }));\n    } catch (error) {\n      analyticsLogger.error('Error calculating stock turnover rates:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get monthly usage trends\n   */\n  static async getMonthlyUsageTrends(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<MonthlyUsageTrends> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: entries } = await supabase\n        .from('stock_entries')\n        .select('*')\n        .eq('practice_id', clinicId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString());\n\n      const rows = (entries as StockEntryRow[] | null) ?? [];\n\n      const monthlyData: MonthlyUsageTrends = {};\n      rows.forEach(entry => {\n        const createdAt = new Date(entry.created_at);\n        const month = createdAt.getMonth();\n        const year = createdAt.getFullYear();\n        const key = `${year}-${month + 1}`;\n        const countedQuantity = entry.counted_quantity ?? 0;\n        monthlyData[key] = (monthlyData[key] ?? 0) + countedQuantity;\n      });\n\n      return monthlyData;\n    } catch (error) {\n      analyticsLogger.error('Error getting monthly usage trends:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get top used products\n   */\n  static async getTopUsedProducts(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date,\n    limit = 10\n  ): Promise<TopUsedProduct[]> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: entries } = await supabase\n        .from('stock_entries')\n        .select('*, products(name)')\n        .eq('practice_id', clinicId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString())\n        .order('counted_quantity', { ascending: false })\n        .limit(limit);\n\n      const rows = (entries as StockEntryRow[] | null) ?? [];\n\n      return rows.map(\n        entry =>\n          ({\n            productId: entry.product_id,\n            productName: entry.products?.name ?? 'Unknown',\n            totalUsed: entry.counted_quantity ?? 0,\n            usageCount: 1,\n          }) satisfies TopUsedProduct\n      );\n    } catch (error) {\n      analyticsLogger.error('Error getting top used products:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get cost savings analytics\n   */\n  static async getCostSavingsAnalytics(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<CostSavingsAnalytics> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: movements } = await supabase\n        .from('stock_movements')\n        .select(\n          `\n          *,\n          products!inner(price),\n          stock_levels!inner(practice_id)\n        `\n        )\n        .eq('stock_levels.practice_id', clinicId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString());\n\n      const rows = (movements as StockMovementRow[] | null) ?? [];\n\n      if (!rows.length) {\n        return {\n          total_savings: 0,\n          waste_reduction: 0,\n          efficiency_improvement: 0,\n          cost_per_unit_improvement: 0,\n        };\n      }\n\n      let totalWaste = 0;\n      let totalUsage = 0;\n      let totalValue = 0;\n\n      rows.forEach(movement => {\n        const quantity = Math.abs(movement.quantity ?? 0);\n        const price = movement.products?.price ?? 0;\n        totalValue += quantity * price;\n\n        if (movement.movement_type === 'waste') {\n          totalWaste += quantity;\n        } else if (movement.movement_type === 'usage') {\n          totalUsage += quantity;\n        }\n      });\n\n      const wasteReduction =\n        totalUsage > 0 ? (1 - totalWaste / totalUsage) * 100 : 0;\n      const efficiencyImprovement =\n        wasteReduction > 0 ? wasteReduction * 0.8 : 0;\n\n      return {\n        total_savings: totalValue * (wasteReduction / 100),\n        waste_reduction: wasteReduction,\n        efficiency_improvement: efficiencyImprovement,\n        cost_per_unit_improvement:\n          totalUsage > 0 ? (totalValue / totalUsage) * 0.1 : 0,\n      };\n    } catch (error) {\n      analyticsLogger.error('Error calculating cost savings:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get inventory value trends\n   */\n  static async getInventoryValueTrends(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<InventoryValueTrends> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: levels } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n          product_id,\n          product_name,\n          practice_id,\n          location_id,\n          current_quantity,\n          available_quantity,\n          reserved_quantity,\n          minimum_quantity,\n          created_at\n        `\n        )\n        .eq('practice_id', clinicId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString());\n\n      const rows = (levels as StockLevelView[] | null) ?? [];\n\n      const totalValue = rows.reduce((sum, level) => {\n        const available = level.available_quantity ?? 0;\n        const reserved = level.reserved_quantity ?? 0;\n        const quantity = available + reserved;\n        const price = 10; // Placeholder until pricing data is joined properly\n        return sum + quantity * price;\n      }, 0);\n\n      return {\n        current_value: totalValue,\n        trend_data: [{ date: new Date().toISOString(), value: totalValue }],\n      };\n    } catch (error) {\n      analyticsLogger.error('Error getting inventory value trends:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Predict future stock needs\n   */\n  static async predictStockNeeds(\n    clinicId: string\n  ): Promise<PredictedStockNeed[]> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: levels } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n          product_id,\n          product_name,\n          practice_id,\n          location_id,\n          current_quantity,\n          available_quantity,\n          reserved_quantity,\n          minimum_quantity\n        `\n        )\n        .eq('practice_id', clinicId);\n\n      const rows = (levels as StockLevelView[] | null) ?? [];\n\n      return rows.map(level => ({\n        productId: level.product_id,\n        productName: level.product_name ?? 'Unknown',\n        currentStock: level.current_quantity ?? 0,\n        predictedUsage: Math.floor(Math.random() * 10),\n        suggestedOrder: Math.max(0, Math.floor(Math.random() * 20)),\n      }));\n    } catch (error) {\n      analyticsLogger.error('Error predicting stock needs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get forecast accuracy\n   */\n  static async getForecastAccuracy(\n    clinicId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<ForecastAccuracy> {\n    if (!clinicId) {\n      throw new Error(t('analytics.clinicIdRequired'));\n    }\n\n    try {\n      const { data: movements } = await supabase\n        .from('stock_movements')\n        .select(\n          `\n          *,\n          products!inner(category),\n          stock_levels!inner(practice_id)\n        `\n        )\n        .eq('stock_levels.practice_id', clinicId)\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString())\n        .eq('movement_type', 'usage');\n\n      const rows = (movements as StockMovementRow[] | null) ?? [];\n\n      if (!rows.length) {\n        return {\n          overall_accuracy: 0,\n          category_accuracy: {\n            medical_supplies: 0,\n            pharmaceuticals: 0,\n            equipment: 0,\n          },\n          trend: 'insufficient_data',\n        };\n      }\n\n      const categoryStats = new Map<string, { total: number; count: number }>();\n\n      rows.forEach(movement => {\n        const category = movement.products?.category ?? 'other';\n        if (!categoryStats.has(category)) {\n          categoryStats.set(category, { total: 0, count: 0 });\n        }\n        const stats = categoryStats.get(category);\n        if (!stats) {\n          return;\n        }\n        stats.total += Math.abs(movement.quantity ?? 0);\n        stats.count += 1;\n      });\n\n      const categoryAccuracy: Record<string, number> = {};\n      let overallTotal = 0;\n      let overallCount = 0;\n\n      categoryStats.forEach((stats, category) => {\n        const avgUsage = stats.total / Math.max(stats.count, 1);\n        const relevantMovements = rows.filter(\n          movement => (movement.products?.category ?? 'other') === category\n        );\n        const variance =\n          relevantMovements.reduce((sum, movement) => {\n            const quantity = Math.abs(movement.quantity ?? 0);\n            return sum + Math.pow(quantity - avgUsage, 2);\n          }, 0) / Math.max(stats.count, 1);\n\n        const accuracy = Math.max(\n          0,\n          100 - (variance / Math.max(avgUsage, 1)) * 10\n        );\n        categoryAccuracy[category.toLowerCase().replace(/\\s+/g, '_')] =\n          accuracy;\n        overallTotal += accuracy;\n        overallCount += 1;\n      });\n\n      const overallAccuracy =\n        overallCount > 0 ? overallTotal / overallCount : 0;\n\n      return {\n        overall_accuracy: overallAccuracy,\n        category_accuracy: {\n          medical_supplies: categoryAccuracy.medical_supplies ?? 0,\n          pharmaceuticals: categoryAccuracy.pharmaceuticals ?? 0,\n          equipment: categoryAccuracy.equipment ?? 0,\n          ...categoryAccuracy,\n        },\n        trend:\n          overallAccuracy > 75\n            ? 'improving'\n            : overallAccuracy > 50\n              ? 'stable'\n              : 'needs_attention',\n      };\n    } catch (error) {\n      analyticsLogger.error('Error calculating forecast accuracy:', error);\n      throw error;\n    }\n  }\n\n  // Keep methods that are actually used in the codebase\n  async getUsageStats(): Promise<UsageAnalytics[]> {\n    try {\n      const { data: events } = await supabase\n        .from('events')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(100);\n      return (events as UsageAnalytics[] | null) ?? [];\n    } catch (error) {\n      analyticsLogger.error('Error getting usage stats:', error);\n      return [];\n    }\n  }\n\n  async trackScanEvent(\n    productId: string,\n    scanType: string,\n    metadata?: JsonRecord\n  ) {\n    return this.trackEvent('scan_event', {\n      product_id: productId,\n      scan_type: scanType,\n      ...(metadata ?? {}),\n    });\n  }\n\n  async flushEvents(): Promise<void> {\n    // Implementation kept simple for now\n  }\n\n  private startAutoFlush() {\n    this.flushTimer = setInterval(() => {\n      this.flushEvents();\n    }, 30000);\n  }\n\n  destroy() {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    this.flushEvents(); // Final flush\n  }\n}\n\n// Export an instance for compatibility with existing code\nexport const analyticsService = new AnalyticsService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\platform-dashboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [348, 351], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [348, 351], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 376,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 376,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10441, 10444], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10441, 10444], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 415,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 415,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11369, 11372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11369, 11372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 417,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 417,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11466, 11469], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11466, 11469], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 419,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 419,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11559, 11562], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11559, 11562], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 422,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 422,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11684, 11687], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11684, 11687], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 422,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 422,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11699, 11702], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11699, 11702], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 635,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 635,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17608, 17611], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17608, 17611], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '../supabase';\nimport { dashboardLogger } from '@/utils/logger';\nimport { t } from '@/utils/i18n-service';\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\n\nexport interface PlatformWidget {\n  id: string;\n  title: string;\n  type: 'metric' | 'chart' | 'list' | 'table' | 'system';\n  data: Record<string, any>;\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  visible: boolean;\n  loading?: boolean;\n  error?: string;\n}\n\nexport interface PlatformDashboardData {\n  widgets: PlatformWidget[];\n  systemInfo: {\n    version: string;\n    buildNumber: string;\n    lastDeployment: string;\n    uptime: string;\n    environment: string;\n  };\n  platformMetrics: {\n    totalPractices: number;\n    totalUsers: number;\n    activeToday: number;\n    totalEvents: number;\n    systemHealth: 'healthy' | 'warning' | 'critical';\n  };\n  quickActions: Array<{\n    id: string;\n    label: string;\n    icon: string;\n    route: string;\n    color: string;\n    permission?: string;\n  }>;\n}\n\nclass PlatformDashboardService {\n  private getWidgetConfig(): string[] {\n    return [\n      'system-health',\n      'version-info',\n      'platform-audit-logs',\n      'customer-management',\n      'api-integration-status',\n      'performance-metrics',\n      'database-status',\n      'error-monitoring',\n    ];\n  }\n\n  async getDashboardData(): Promise<PlatformDashboardData> {\n    try {\n      dashboardLogger.info('🌐 Loading platform dashboard');\n\n      const widgetIds = this.getWidgetConfig();\n\n      // Load system info\n      const systemInfo = await this.loadSystemInfo();\n\n      // Load platform metrics\n      const platformMetrics = await this.loadPlatformMetrics();\n\n      // Load platform widgets\n      const widgets = await this.loadWidgets(widgetIds);\n\n      // Load quick actions\n      const quickActions = this.getQuickActions();\n\n      return {\n        widgets,\n        systemInfo,\n        platformMetrics,\n        quickActions,\n      };\n    } catch (error) {\n      dashboardLogger.error(\n        'Error loading platform dashboard:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  private async loadSystemInfo() {\n    // This would typically come from environment variables or system APIs\n    const packageInfo = await import('../../../package.json');\n\n    return {\n      version: packageInfo.version || '2.1.0',\n      buildNumber: process.env.VITE_BUILD_NUMBER || '1234',\n      lastDeployment:\n        process.env.VITE_DEPLOYMENT_TIME || new Date().toISOString(),\n      uptime: this.getSystemUptime(),\n      environment: process.env.NODE_ENV || 'development',\n    };\n  }\n\n  private getSystemUptime(): string {\n    // In a real application, this would be calculated from deployment time\n    const uptimeMs = Date.now() - new Date('2024-01-01').getTime();\n    const days = Math.floor(uptimeMs / (1000 * 60 * 60 * 24));\n    const hours = Math.floor(\n      (uptimeMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n    );\n    return `${days}d ${hours}h`;\n  }\n\n  private async loadPlatformMetrics() {\n    try {\n      // Get real data from Supabase\n      const { count: totalPractices } = await supabase\n        .from('practices')\n        .select('id', { count: 'exact' });\n\n      const { count: totalUsers } = await supabase\n        .from('practice_members')\n        .select('user_id', { count: 'exact' });\n\n      const today = new Date().toISOString().split('T')[0];\n      const { count: activeToday } = await supabase\n        .from('usage_analytics')\n        .select('user_id', { count: 'exact' })\n        .gte('created_at', today);\n\n      const { count: totalEvents } = await supabase\n        .from('usage_analytics')\n        .select('id', { count: 'exact' })\n        .gte('created_at', today);\n\n      const { count: recentErrors } = await supabase\n        .from('activity_log')\n        .select('id', { count: 'exact' })\n        .ilike('activity_type', '%error%')\n        .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());\n\n      let systemHealth: 'healthy' | 'warning' | 'critical' = 'healthy';\n      if (recentErrors && recentErrors > 10) systemHealth = 'warning';\n      if (recentErrors && recentErrors > 50) systemHealth = 'critical';\n\n      return {\n        totalPractices: totalPractices || 0,\n        totalUsers: totalUsers || 0,\n        activeToday: activeToday || 0,\n        totalEvents: totalEvents || 0,\n        systemHealth,\n      };\n    } catch (error) {\n      dashboardLogger.error(\n        'Error loading platform metrics:',\n        error as Record<string, unknown>\n      );\n      return {\n        totalPractices: 0,\n        totalUsers: 0,\n        activeToday: 0,\n        totalEvents: 0,\n        systemHealth: 'critical' as const,\n      };\n    }\n  }\n\n  private async loadWidgets(widgetIds: string[]): Promise<PlatformWidget[]> {\n    const widgets: PlatformWidget[] = [];\n\n    for (let i = 0; i < widgetIds.length; i++) {\n      const widgetId = widgetIds[i];\n      if (!widgetId) continue; // Skip undefined widget IDs\n      \n      try {\n        const widget = await this.loadWidget(widgetId, i);\n        if (widget) {\n          widgets.push(widget);\n        }\n      } catch (error) {\n        ServiceErrorHandler.handle(\n          error as Error,\n          {\n            service: 'PlatformDashboardService',\n            operation: 'loadWidget',\n            metadata: { widgetId, position: i },\n          },\n          { rethrow: false, logLevel: 'error' }\n        );\n\n        // Add error widget\n        widgets.push({\n          id: widgetId,\n          title: this.getWidgetTitle(widgetId),\n          type: 'system',\n          data: { error: 'Failed to load widget data' },\n          size: 'medium',\n          position: i,\n          visible: true,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return widgets;\n  }\n\n  private async loadWidget(\n    widgetId: string,\n    position: number\n  ): Promise<PlatformWidget | null> {\n    const baseWidget = {\n      id: widgetId,\n      title: this.getWidgetTitle(widgetId),\n      position,\n      visible: true,\n      loading: false,\n    };\n\n    switch (widgetId) {\n      case 'system-health':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'large' as const,\n          data: await this.loadSystemHealth(),\n        };\n\n      case 'version-info':\n        return {\n          ...baseWidget,\n          type: 'system' as const,\n          size: 'medium' as const,\n          data: await this.loadVersionInfo(),\n        };\n\n      case 'platform-audit-logs':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'large' as const,\n          data: await this.loadPlatformAuditLogs(),\n        };\n\n      case 'customer-management':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'large' as const,\n          data: await this.loadCustomerManagement(),\n        };\n\n      case 'api-integration-status':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'medium' as const,\n          data: await this.loadApiIntegrationStatus(),\n        };\n\n      case 'performance-metrics':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'medium' as const,\n          data: await this.loadPerformanceMetrics(),\n        };\n\n      case 'database-status':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'small' as const,\n          data: await this.loadDatabaseStatus(),\n        };\n\n      case 'error-monitoring':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadErrorMonitoring(),\n        };\n\n      default:\n        return null;\n    }\n  }\n\n  // Platform widget data loaders\n  private async loadSystemHealth() {\n    const { data: recentErrors } = await supabase\n      .from('activity_log')\n      .select('activity_type, created_at')\n      .ilike('activity_type', '%error%')\n      .gte(\n        'created_at',\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: false });\n\n    const { data: practicesActive } = await supabase\n      .from('usage_analytics')\n      .select('practice_id')\n      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());\n\n    const activePractices = new Set(practicesActive?.map(p => p.practice_id))\n      .size;\n\n    // Check database connection health\n    const { data: dbHealth } = await supabase\n      .from('practices')\n      .select('id')\n      .limit(1);\n\n    return {\n      error_count_24h: recentErrors?.length || 0,\n      active_practices_1h: activePractices,\n      database_status: dbHealth ? 'connected' : 'disconnected',\n      overall_status:\n        recentErrors && recentErrors.length > 20 ? 'warning' : 'healthy',\n      last_check: new Date().toISOString(),\n    };\n  }\n\n  private async loadVersionInfo() {\n    const packageInfo = await import('../../../package.json');\n\n    return {\n      app_version: packageInfo.version || '2.1.0',\n      build_number: process.env.VITE_BUILD_NUMBER || '1234',\n      last_deployment:\n        process.env.VITE_DEPLOYMENT_TIME || new Date().toISOString(),\n      database_version: '15.4', // This would typically come from a query\n      environment: process.env.NODE_ENV || 'development',\n      dependencies: {\n        vue: packageInfo.dependencies?.vue || '3.4.0',\n        quasar: packageInfo.dependencies?.quasar || '2.14.0',\n        supabase:\n          packageInfo.dependencies?.['@supabase/supabase-js'] || '2.38.0',\n      },\n    };\n  }\n\n  private async loadPlatformAuditLogs() {\n    const { data } = await supabase\n      .from('activity_log')\n      .select(\n        `\n        activity_type,\n        description,\n        created_at,\n        practices!inner(name),\n        user_id\n      `\n      )\n      .in('activity_type', [\n        'user_created',\n        'practice_created',\n        'system_error',\n        'login_failed',\n      ])\n      .gte(\n        'created_at',\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: false })\n      .limit(50);\n\n    return {\n      items:\n        data?.map(log => ({\n          type: log.activity_type,\n          description: log.description,\n          practice_name: (log.practices as any)?.name || 'System',\n          user_id: log.user_id,\n          timestamp: log.created_at,\n          severity: log.activity_type.includes('error')\n            ? 'error'\n            : log.activity_type.includes('failed')\n              ? 'warning'\n              : 'info',\n        })) || [],\n    };\n  }\n\n  private async loadCustomerManagement() {\n    const { data } = await supabase\n      .from('practices')\n      .select(\n        `\n        name,\n        email,\n        created_at,\n        practice_members(user_id),\n        practice_locations(id),\n        usage_analytics(created_at)\n      `\n      )\n      .order('created_at', { ascending: false })\n      .limit(20);\n\n    return {\n      headers: [\n        'Practice',\n        'Email',\n        'Users',\n        'Locations',\n        'Last Activity',\n        'Created',\n      ],\n      rows:\n        data?.map(practice => {\n          const userCount = (practice.practice_members as any[])?.length || 0;\n          const locationCount =\n            (practice.practice_locations as any[])?.length || 0;\n          const lastActivity =\n            (practice.usage_analytics as any[])?.length > 0\n              ? new Date(\n                  Math.max(\n                    ...(practice.usage_analytics as any[]).map((a: any) =>\n                      new Date(a.created_at).getTime()\n                    )\n                  )\n                ).toLocaleDateString()\n              : 'Never';\n\n          return [\n            practice.name,\n            practice.email || 'N/A',\n            String(userCount),\n            String(locationCount),\n            lastActivity,\n            practice.created_at ? new Date(practice.created_at).toLocaleDateString() : 'N/A',\n          ];\n        }) || [],\n    };\n  }\n\n  private async loadApiIntegrationStatus() {\n    const { data } = await supabase\n      .from('suppliers')\n      .select('integration_type, order_method, sync_enabled, last_sync_at')\n      .neq('integration_type', 'manual');\n\n    // Group by integration type and method\n    const integrationStats: Record<\n      string,\n      {\n        total: number;\n        active: number;\n        recent_syncs: number;\n      }\n    > = {};\n\n    data?.forEach(supplier => {\n      const key = `${supplier.integration_type}-${supplier.order_method}`;\n      if (!integrationStats[key]) {\n        integrationStats[key] = { total: 0, active: 0, recent_syncs: 0 };\n      }\n\n      integrationStats[key].total++;\n      if (supplier.sync_enabled) integrationStats[key].active++;\n      if (\n        supplier.last_sync_at &&\n        new Date(supplier.last_sync_at) >\n          new Date(Date.now() - 24 * 60 * 60 * 1000)\n      ) {\n        integrationStats[key].recent_syncs++;\n      }\n    });\n\n    return {\n      headers: ['Integration', 'Total', 'Active', 'Recent Syncs', 'Health'],\n      rows: Object.entries(integrationStats).map(([key, stats]) => {\n        const health =\n          stats.active > 0\n            ? stats.recent_syncs / stats.active > 0.8\n              ? 'Good'\n              : 'Warning'\n            : 'Inactive';\n\n        return [\n          key.replace('-', ' + '),\n          stats.total,\n          stats.active,\n          stats.recent_syncs,\n          health,\n        ];\n      }),\n    };\n  }\n\n  private async loadPerformanceMetrics() {\n    // Get usage analytics for the last 7 days\n    const { data } = await supabase\n      .from('usage_analytics')\n      .select('created_at, event_type')\n      .gte(\n        'created_at',\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: true });\n\n    // Group by day\n    const dailyMetrics: Record<string, number> = {};\n    const last7Days: string[] = [];\n\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000)\n        .toISOString()\n        .split('T')[0];\n      if (date) {\n        last7Days.push(date);\n        dailyMetrics[date] = 0;\n      }\n    }\n\n    data?.forEach(event => {\n      if (event.created_at) {\n        const day = event.created_at.split('T')[0];\n        if (day && Object.prototype.hasOwnProperty.call(dailyMetrics, day)) {\n          const currentValue = dailyMetrics[day];\n          if (currentValue !== undefined) {\n            dailyMetrics[day] = currentValue + 1;\n          }\n        }\n      }\n    });\n\n    return {\n      chart_type: 'line',\n      labels: last7Days.map(date => new Date(date).toLocaleDateString()),\n      datasets: [\n        {\n          label: 'Daily Events',\n          data: last7Days.map(date => dailyMetrics[date]),\n          color: '#2196F3',\n        },\n      ],\n      total_events: Object.values(dailyMetrics).reduce(\n        (sum, val) => sum + val,\n        0\n      ),\n    };\n  }\n\n  private async loadDatabaseStatus() {\n    try {\n      // Simple connectivity test\n      const start = Date.now();\n      const { data: pingData, error: pingError } = await supabase\n        .from('practices')\n        .select('id')\n        .limit(1);\n      const responseTime = Date.now() - start;\n\n      // Optional RPC get_table_stats\n      let totalTables = 0;\n      let largestTable = 'unknown';\n      try {\n        const { data: tableStats } = await supabase.rpc('get_table_stats');\n        totalTables = tableStats?.length || 0;\n        largestTable = tableStats?.[0]?.table_name || 'unknown';\n      } catch (rpcError) {\n        ServiceErrorHandler.handle(\n          rpcError as Error,\n          {\n            service: 'PlatformDashboardService',\n            operation: 'get_table_stats',\n          },\n          { rethrow: false, logLevel: 'warn' }\n        );\n      }\n\n      return {\n        status: pingError ? 'error' : pingData ? 'connected' : 'disconnected',\n        response_time_ms: responseTime,\n        total_tables: totalTables,\n        largest_table: largestTable,\n        last_check: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        response_time_ms: null,\n        total_tables: 0,\n        largest_table: 'unknown',\n        last_check: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  private async loadErrorMonitoring() {\n    const { data } = await supabase\n      .from('activity_log')\n      .select(\n        `\n        activity_type,\n        description,\n        created_at,\n        practices!inner(name)\n      `\n      )\n      .ilike('activity_type', '%error%')\n      .gte(\n        'created_at',\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: false })\n      .limit(20);\n\n    // Group errors by type\n    const errorGroups: Record<\n      string,\n      { count: number; last_seen: string; practices: Set<string> }\n    > = {};\n\n    data?.forEach(error => {\n      const type = error.activity_type ?? 'unknown';\n      const createdAt = error.created_at ?? new Date().toISOString();\n      \n      if (!errorGroups[type]) {\n        errorGroups[type] = {\n          count: 0,\n          last_seen: createdAt,\n          practices: new Set(),\n        };\n      }\n\n      errorGroups[type].count++;\n      errorGroups[type].practices.add(\n        (error.practices as any)?.name || 'Unknown'\n      );\n\n      if (new Date(createdAt) > new Date(errorGroups[type].last_seen)) {\n        errorGroups[type].last_seen = createdAt;\n      }\n    });\n\n    return {\n      items: Object.entries(errorGroups)\n        .map(([type, info]) => ({\n          error_type: type,\n          count: info.count,\n          affected_practices: info.practices.size,\n          last_seen: info.last_seen,\n          severity:\n            info.count > 10 ? 'high' : info.count > 5 ? 'medium' : 'low',\n        }))\n        .sort((a, b) => b.count - a.count),\n    };\n  }\n\n  private getWidgetTitle(widgetId: string): string {\n    const titles: Record<string, string> = {\n      'system-health': t('platform.widgets.systemHealth'),\n      'version-info': t('platform.widgets.versionInfo'),\n      'platform-audit-logs': t('platform.widgets.auditLogs'),\n      'customer-management': t('platform.widgets.customerManagement'),\n      'api-integration-status': t('platform.widgets.apiIntegrationStatus'),\n      'performance-metrics': t('platform.widgets.performanceMetrics'),\n      'database-status': t('platform.widgets.databaseStatus'),\n      'error-monitoring': t('platform.widgets.errorMonitoring'),\n    };\n\n    return titles[widgetId] || widgetId;\n  }\n\n  private getQuickActions() {\n    return [\n      {\n        id: 'create-practice',\n        label: t('platform.quickActions.createPractice'),\n        icon: 'add_business',\n        route: '/platform/practices/create',\n        color: 'primary',\n      },\n      {\n        id: 'system-logs',\n        label: t('platform.quickActions.systemLogs'),\n        icon: 'description',\n        route: '/platform/logs',\n        color: 'info',\n      },\n      {\n        id: 'database-admin',\n        label: t('platform.quickActions.databaseAdmin'),\n        icon: 'storage',\n        route: '/platform/database',\n        color: 'warning',\n      },\n      {\n        id: 'api-documentation',\n        label: t('platform.quickActions.apiDocumentation'),\n        icon: 'api',\n        route: '/platform/api-docs',\n        color: 'indigo',\n      },\n      {\n        id: 'monitoring',\n        label: t('platform.quickActions.monitoring'),\n        icon: 'monitoring',\n        route: '/platform/monitoring',\n        color: 'red',\n      },\n      {\n        id: 'backup-restore',\n        label: t('platform.quickActions.backupRestore'),\n        icon: 'backup',\n        route: '/platform/backup',\n        color: 'green',\n      },\n    ];\n  }\n}\n\nexport const platformDashboardService = new PlatformDashboardService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\practice-dashboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RoleDashboardDefinition' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapStockLevelToDashboardDTO' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1167, 1170], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1167, 1170], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 232,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 232,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6602, 6605], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6602, 6605], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 313,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 313,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8955, 8958], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8955, 8958], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 605,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 605,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16627, 16630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16627, 16630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 641,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 641,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17731, 17734], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17731, 17734], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 642,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 642,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17780, 17783], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17780, 17783], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 674,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 674,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18614, 18617], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18614, 18617], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 703,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 703,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19420, 19423], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19420, 19423], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 704,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 704,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19474, 19477], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19474, 19477], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 797,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 797,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22217, 22220], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22217, 22220], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 851,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 851,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23614, 23617], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23614, 23617], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 923,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 923,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25653, 25656], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25653, 25656], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 930,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 930,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25861, 25864], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25861, 25864], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1014,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1014,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27978, 27981], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27978, 27981], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1048,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1048,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28916, 28919], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28916, 28919], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1100,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1100,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30392, 30395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30392, 30395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1235,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1235,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34854, 34857], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34854, 34857], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1236,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1236,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34917, 34920], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34917, 34920], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1258,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1258,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35563, 35566], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35563, 35566], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'practiceId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1323,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1323,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'practiceId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1355,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1355,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 23,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '../supabase';\nimport { dashboardLogger } from '@/utils/logger';\nimport { t } from '@/utils/i18n-service';\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\nimport {\n  roleDashboardConfig,\n  type RoleDashboardDefinition,\n} from './role-config';\nimport type { UserRole } from '@/types/permissions';\nimport type { AnalyticsStockLevelDTO } from '@/types/analytics';\nimport type { StockLevelView } from '@/types/inventory';\n\nconst mapStockLevelToDashboardDTO = (\n  entry: StockLevelView\n): AnalyticsStockLevelDTO => ({\n  productId: entry.productId,\n  locationId: entry.locationId,\n  currentQuantity: entry.currentQuantity ?? 0,\n  minimumQuantity: entry.minimumQuantity ?? 0,\n  reservedQuantity: entry.reservedQuantity ?? 0,\n  availableQuantity: entry.availableQuantity ?? 0,\n  productName: entry.productName ?? undefined,\n  locationName: entry.locationName ?? undefined,\n  preferredSupplierId: entry.preferredSupplierId ?? undefined,\n  updatedAt: entry.updatedAt ?? undefined,\n});\n\nexport interface PracticeWidget {\n  id: string;\n  title: string;\n  type: 'metric' | 'chart' | 'list' | 'alert' | 'table';\n  data: Record<string, any>;\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  visible: boolean;\n  loading?: boolean;\n  error?: string;\n}\n\nexport interface PracticeDashboardData {\n  widgets: PracticeWidget[];\n  metrics: {\n    totalProducts: number;\n    lowStockCount: number;\n    pendingOrders: number;\n    totalValue: number;\n    recentActivity: number;\n  };\n  quickActions: Array<{\n    id: string;\n    label: string;\n    icon: string;\n    route: string;\n    color: string;\n    type: string;\n    permission?: string;\n  }>;\n  alerts: Array<{\n    id: string;\n    type: 'warning' | 'error' | 'info' | 'success';\n    message: string;\n    action?: string;\n    actionLabel?: string;\n  }>;\n}\n\ntype RoleSummary = {\n  title: string;\n  subtitle: string;\n  widgets: string[];\n  color: string;\n  icon: string;\n};\n\nclass PracticeDashboardService {\n  /**\n   * Krijg role configuratie via de centrale role config service\n   */\n  getRoleConfig(role: UserRole): RoleSummary {\n    const config = roleDashboardConfig.getRoleConfig(role);\n\n    return {\n      title: t(config.titleKey),\n      subtitle: t(config.subtitleKey),\n      widgets: config.widgets.map(widget => widget.id),\n      color: config.color,\n      icon: config.icon,\n    };\n  }\n\n  /**\n   * Krijg widget configuratie via de centrale config\n   */\n  private getWidgetConfig(role: UserRole): string[] {\n    return roleDashboardConfig.getWidgetIds(role);\n  }\n\n  async getDashboardData(\n    role: UserRole,\n    practiceId: string\n  ): Promise<PracticeDashboardData> {\n    try {\n      dashboardLogger.info(\n        `🎯 Loading practice dashboard for role: \"${role}\", practice: \"${practiceId}\"`\n      );\n\n      const widgetIds = this.getWidgetConfig(role);\n\n      // Load base metrics\n      const metrics = await this.loadMetrics(practiceId);\n\n      // Load role-specific widgets\n      const widgets = await this.loadWidgets(widgetIds, practiceId, role);\n\n      // Load role-specific quick actions\n      const quickActions = this.getQuickActions(role);\n\n      // Load alerts\n      const alerts = await this.loadAlerts(practiceId, role);\n\n      return {\n        widgets,\n        metrics,\n        quickActions,\n        alerts,\n      };\n    } catch (error) {\n      dashboardLogger.error('Error loading practice dashboard:', error as Record<string, unknown>);\n      throw error;\n    }\n  }\n\n  private async loadMetrics(practiceId: string) {\n    try {\n      // 🚀 PERFORMANCE OPTIMIZATION: Use parallel queries instead of sequential\n      const [\n        stockLevelsResponse,\n        ordersResponse,\n        productsResponse,\n        inventoryValueResponse,\n        recentActivityResponse,\n      ] = await Promise.all([\n        // Stock levels for low stock calculation\n        supabase\n          .from('stock_levels')\n          .select('current_quantity, minimum_quantity')\n          .eq('practice_id', practiceId),\n\n        // Orders for pending count\n        supabase\n          .from('order_lists')\n          .select('id, status, total_value')\n          .eq('practice_id', practiceId)\n          .order('created_at', { ascending: false })\n          .limit(50),\n\n        // Products count\n        supabase\n          .from('products')\n          .select('id')\n          .eq('practice_id', practiceId)\n          .eq('active', true),\n\n        // Inventory value with JOIN optimization\n        supabase\n          .from('stock_levels')\n          .select(\n            `\n            current_quantity,\n            products!inner(price)\n          `\n          )\n          .eq('practice_id', practiceId),\n\n        // Recent activity count\n        supabase\n          .from('activity_log')\n          .select('id')\n          .eq('practice_id', practiceId)\n          .gte(\n            'created_at',\n            new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n          ),\n      ]);\n\n      // Check for errors\n      const { data: stockLevels, error: stockError } = stockLevelsResponse;\n      const { data: orders, error: ordersError } = ordersResponse;\n      const { data: products, error: productsError } = productsResponse;\n      const { data: inventoryValue, error: inventoryError } =\n        inventoryValueResponse;\n      const { data: recentActivity, error: activityError } =\n        recentActivityResponse;\n\n      if (stockError)\n        dashboardLogger.warn('Error fetching stock levels', {\n          error: stockError,\n        });\n      if (ordersError)\n        dashboardLogger.warn('Error fetching orders', {\n          error: ordersError,\n        });\n      if (productsError)\n        dashboardLogger.warn('Error fetching products', {\n          error: productsError,\n        });\n      if (inventoryError)\n        dashboardLogger.warn('Error fetching inventory value', {\n          error: inventoryError,\n        });\n      if (activityError)\n        dashboardLogger.warn('Error fetching recent activity', {\n          error: activityError,\n        });\n\n      // 🚀 PERFORMANCE: Calculate metrics from parallel data\n      const lowStockCount =\n        stockLevels?.filter(\n          stock =>\n            (stock.current_quantity ?? 0) <= (stock.minimum_quantity ?? 0)\n        ).length || 0;\n\n      const pendingOrders =\n        orders?.filter(\n          order => order.status && ['draft', 'active'].includes(order.status)\n        ).length || 0;\n\n      const totalProducts = products?.length || 0;\n\n      const totalValue =\n        inventoryValue?.reduce((total, item) => {\n          const price = (item.products as any)?.price || 0;\n          return total + (item.current_quantity ?? 0) * price;\n        }, 0) || 0;\n\n      return {\n        totalProducts,\n        lowStockCount,\n        pendingOrders,\n        totalValue: Math.round(totalValue),\n        recentActivity: recentActivity?.length || 0,\n      };\n    } catch (error) {\n      dashboardLogger.error('Error loading metrics:', error as Record<string, unknown>);\n      // Return fallback metrics\n      return {\n        totalProducts: 0,\n        lowStockCount: 0,\n        pendingOrders: 0,\n        totalValue: 0,\n        recentActivity: 0,\n      };\n    }\n  }\n\n  private async loadWidgets(\n    widgetIds: string[],\n    practiceId: string,\n    role: UserRole\n  ): Promise<PracticeWidget[]> {\n    const widgets: PracticeWidget[] = [];\n    const roleConfig = roleDashboardConfig.getRoleConfig(role);\n\n    for (let i = 0; i < widgetIds.length; i++) {\n      const widgetId = widgetIds[i];\n      if (!widgetId) continue;\n      try {\n        // Krijg widget config voor titel en eigenschappen\n        const widgetConfig = roleConfig.widgets.find(w => w.id === widgetId);\n        const widget = await this.loadWidget(\n          widgetId,\n          practiceId ?? '',\n          widgetConfig?.position || i,\n          widgetConfig\n        );\n        if (widget) {\n          widgets.push(widget);\n        }\n      } catch (error) {\n        ServiceErrorHandler.handle(\n          error as Error,\n          {\n            service: 'PracticeDashboardService',\n            operation: 'loadWidget',\n            practiceId,\n            metadata: { widgetId, role, position: i },\n          },\n          { rethrow: false, logLevel: 'error' }\n        );\n\n        // Add error widget\n        const widgetConfig = roleConfig.widgets.find(w => w.id === widgetId);\n        widgets.push({\n          id: widgetId,\n          title: t((widgetConfig?.titleKey ?? 'dashboard.widgets.error') as string),\n          type: 'alert',\n          data: { error: 'Failed to load widget data' },\n          size: widgetConfig?.size || 'medium',\n          position: widgetConfig?.position || i,\n          visible: true,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        });\n      }\n    }\n\n    return widgets;\n  }\n\n  private async loadWidget(\n    widgetId: string,\n    practiceId: string,\n    position: number,\n    widgetConfig?: any\n  ): Promise<PracticeWidget | null> {\n    const baseWidget = {\n      id: widgetId,\n      title: widgetConfig\n        ? t(widgetConfig.titleKey)\n        : this.getWidgetTitle(widgetId),\n      position,\n      visible: true,\n      loading: false,\n    };\n\n    switch (widgetId) {\n      case 'low-stock-alerts':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadLowStockAlerts(practiceId),\n        };\n\n      case 'expiring-products':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadExpiringProducts(practiceId),\n        };\n\n      case 'order-suggestions':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadOrderSuggestions(practiceId),\n        };\n\n      case 'active-order-lists':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'large' as const,\n          data: await this.loadActiveOrderLists(practiceId),\n        };\n\n      case 'pending-deliveries':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadPendingDeliveries(practiceId),\n        };\n\n      case 'stock-trends':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'large' as const,\n          data: await this.loadStockTrends(practiceId),\n        };\n\n      case 'supplier-performance':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'large' as const,\n          data: await this.loadSupplierPerformance(practiceId),\n        };\n\n      case 'cost-analysis':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'medium' as const,\n          data: await this.loadCostAnalysis(practiceId),\n        };\n\n      case 'error-alerts':\n        return {\n          ...baseWidget,\n          type: 'alert' as const,\n          size: 'medium' as const,\n          data: await this.loadErrorAlerts(practiceId),\n        };\n\n      case 'pending-orders':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'small' as const,\n          data: await this.loadPendingOrdersMetric(practiceId),\n        };\n\n      case 'inventory-value':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'medium' as const,\n          data: await this.loadInventoryValue(practiceId),\n        };\n\n      case 'batch-compliance':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'medium' as const,\n          data: await this.loadBatchCompliance(practiceId),\n        };\n\n      case 'supplier-contracts':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'large' as const,\n          data: await this.loadSupplierContracts(),\n        };\n\n      case 'stock-rotation':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'medium' as const,\n          data: await this.loadStockRotation(practiceId),\n        };\n\n      case 'audit-notifications':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadAuditNotifications(practiceId),\n        };\n\n      // LOGISTICS role widgets\n      case 'stock-movements':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadStockMovements(practiceId),\n        };\n\n      case 'location-overview':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'medium' as const,\n          data: await this.loadLocationOverview(practiceId),\n        };\n\n      case 'transport-status':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'small' as const,\n          data: await this.loadTransportStatus(practiceId),\n        };\n\n      // MEMBER role widgets\n      case 'stock-overview':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'medium' as const,\n          data: await this.loadStockOverview(practiceId),\n        };\n\n      case 'my-tasks':\n        return {\n          ...baseWidget,\n          type: 'list' as const,\n          size: 'medium' as const,\n          data: await this.loadMyTasks(practiceId),\n        };\n\n      // GUEST role widgets\n      case 'public-info':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'medium' as const,\n          data: await this.loadPublicInfo(practiceId),\n        };\n\n      // PLATFORM_OWNER role widgets\n      case 'system-overview':\n        return {\n          ...baseWidget,\n          type: 'metric' as const,\n          size: 'large' as const,\n          data: await this.loadSystemOverview(),\n        };\n\n      case 'user-analytics':\n        return {\n          ...baseWidget,\n          type: 'chart' as const,\n          size: 'medium' as const,\n          data: await this.loadUserAnalytics(),\n        };\n\n      case 'platform-health':\n        return {\n          ...baseWidget,\n          type: 'alert' as const,\n          size: 'medium' as const,\n          data: await this.loadPlatformHealth(),\n        };\n\n      case 'subscription-status':\n        return {\n          ...baseWidget,\n          type: 'table' as const,\n          size: 'large' as const,\n          data: await this.loadSubscriptionStatus(),\n        };\n\n      default:\n        return null;\n    }\n  }\n\n  // Widget data loaders - ASSISTANT WIDGETS\n  private async loadLowStockAlerts(practiceId: string) {\n    const { data, error } = await supabase\n      .from('stock_levels')\n      .select(\n        `\n        current_quantity,\n        minimum_quantity,\n        products!inner(name, category),\n        practice_locations!inner(name)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .order('current_quantity', { ascending: true })\n      .limit(10);\n\n    if (error) {\n      console.error('Error loading low stock alerts:', error);\n      return { items: [] };\n    }\n\n    // Map Supabase response to expected format\n    interface LowStockRow {\n      current_quantity: number | null;\n      minimum_quantity: number | null;\n      products: { name: string; category: string | null } | null;\n      practice_locations: { name: string } | null;\n    }\n\n    const items =\n      (data as LowStockRow[] | null)?.map(row => ({\n        name: row.products?.name ?? 'Unknown product',\n        category: row.products?.category ?? 'N/A',\n        current_quantity: row.current_quantity ?? 0,\n        minimum_quantity: row.minimum_quantity ?? 0,\n        location: row.practice_locations?.name ?? 'Unknown',\n      })) ?? [];\n\n    return {\n      items: items || [],\n    };\n  }\n\n  private async loadExpiringProducts(practiceId: string) {\n    const { data, error } = await supabase\n      .from('product_batches')\n      .select(\n        `\n        batch_number,\n        expiry_date,\n        current_quantity,\n        products!inner(name),\n        practice_locations!inner(name)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .lte(\n        'expiry_date',\n        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('expiry_date', { ascending: true })\n      .limit(10);\n\n    if (error) {\n      console.error('Error loading expiring products:', error);\n      return { items: [] };\n    }\n\n    return {\n      items:\n        data?.map((item: any) => ({\n          product_name: item.products?.name || 'Unknown Product',\n          batch_number: item.batch_number || 'N/A',\n          expiry_date: item.expiry_date || null,\n          quantity: item.current_quantity || 0,\n          location: item.practice_locations?.name || 'Unknown Location',\n          days_until_expiry: item.expiry_date\n            ? Math.ceil(\n                (new Date(item.expiry_date).getTime() - Date.now()) /\n                  (1000 * 60 * 60 * 24)\n              )\n            : 0,\n        })) || [],\n    };\n  }\n\n  private async loadOrderSuggestions(practiceId: string) {\n    const { data } = await supabase\n      .from('order_suggestions')\n      .select(\n        `\n        current_stock,\n        minimum_stock,\n        suggested_quantity,\n        urgency_level,\n        products!inner(name, category)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .gt('expires_at', new Date().toISOString())\n      .order('urgency_level', { ascending: false })\n      .limit(10);\n\n    return {\n      items:\n        data?.map(item => ({\n          product_name: (item.products as any).name,\n          category: (item.products as any).category,\n          current_stock: item.current_stock,\n          minimum_stock: item.minimum_stock,\n          suggested_quantity: item.suggested_quantity,\n          urgency: item.urgency_level,\n        })) || [],\n    };\n  }\n\n  private async loadActiveOrderLists(practiceId: string) {\n    const { data } = await supabase\n      .from('order_lists')\n      .select(\n        `\n        name,\n        status,\n        total_items,\n        total_value,\n        created_at,\n        suppliers(name)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .in('status', ['draft', 'active'])\n      .order('updated_at', { ascending: false })\n      .limit(10);\n\n    return {\n      headers: ['Name', 'Supplier', 'Items', 'Value', 'Status', 'Created'],\n      rows:\n        data?.map(item => [\n          item.name,\n          (item.suppliers as any)?.name || 'No supplier',\n          item.total_items,\n          `€${item.total_value}`,\n          item.status,\n          item.created_at ? new Date(item.created_at).toLocaleDateString() : 'N/A',\n        ]) || [],\n    };\n  }\n\n  private async loadPendingDeliveries(practiceId: string) {\n    const { data } = await supabase\n      .from('supplier_orders')\n      .select(\n        `\n        delivery_expected,\n        total_items,\n        total_value,\n        suppliers!inner(name),\n        order_lists!inner(name, practice_id)\n      `\n      )\n      .eq('order_lists.practice_id', practiceId)\n      .in('status', ['sent', 'confirmed'])\n      .order('delivery_expected', { ascending: true })\n      .limit(10);\n\n    return {\n      items:\n        data?.map(item => ({\n          supplier_name: (item.suppliers as any).name,\n          order_name: (item.order_lists as any).name,\n          expected_date: item.delivery_expected,\n          total_items: item.total_items,\n          total_value: item.total_value,\n          days_until_delivery: item.delivery_expected\n            ? Math.ceil(\n                (new Date(item.delivery_expected).getTime() - Date.now()) /\n                  (1000 * 60 * 60 * 24)\n              )\n            : null,\n        })) || [],\n    };\n  }\n\n  // Widget data loaders - MANAGER WIDGETS\n  private async loadStockTrends(practiceId: string) {\n    const { data } = await supabase\n      .from('stock_movements')\n      .select('created_at, movement_type, quantity_change')\n      .eq('practice_id', practiceId)\n      .gte(\n        'created_at',\n        new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: true });\n\n    // Group by week and movement type\n    const weeklyData: Record<string, Record<string, number>> = {};\n\n    data?.forEach(movement => {\n      const createdAt = movement.created_at;\n      const movementType = movement.movement_type;\n      if (!createdAt || !movementType) return;\n      const week: string = new Date(createdAt).toISOString().split('T')[0] ?? ''; // Simplified to daily for now\n      const type: string = movementType;\n      if (!weeklyData[week]) weeklyData[week] = {};\n      if (!weeklyData[week][type])\n        weeklyData[week][type] = 0;\n      weeklyData[week][type] += Number(\n        movement.quantity_change ?? 0\n      );\n    });\n\n    return {\n      chart_type: 'line',\n      labels: Object.keys(weeklyData).slice(-14), // Last 14 days\n      datasets: [\n        {\n          label: 'In',\n          data: Object.keys(weeklyData)\n            .slice(-14)\n            .map(week => weeklyData[week]?.['in'] ?? 0),\n          color: '#4CAF50',\n        },\n        {\n          label: 'Out',\n          data: Object.keys(weeklyData)\n            .slice(-14)\n            .map(week => Math.abs(weeklyData[week]?.['out'] ?? 0)),\n          color: '#F44336',\n        },\n      ],\n    };\n  }\n\n  private async loadSupplierPerformance(practiceId: string) {\n    try {\n      const { data, error } = await supabase.rpc('get_supplier_performance', {\n        practice_id_param: practiceId,\n      });\n\n      if (error) {\n        ServiceErrorHandler.handle(\n          error as Error,\n          {\n            service: 'PracticeDashboardService',\n            operation: 'loadSupplierPerformance',\n            practiceId,\n          },\n          { rethrow: false, logLevel: 'warn' }\n        );\n      }\n\n      return {\n        headers: [\n          'Supplier',\n          'Integration',\n          'Orders',\n          'Avg Delivery',\n          'Failed',\n          'Last Sync',\n        ],\n        rows:\n          data?.map((item: any) => [\n            item.supplier_name,\n            item.integration_type,\n            item.total_orders,\n            item.avg_delivery_days ? `${item.avg_delivery_days} days` : 'N/A',\n            item.failed_orders,\n            item.last_sync_at\n              ? new Date(item.last_sync_at).toLocaleDateString()\n              : 'Never',\n          ]) || [],\n      };\n    } catch (error) {\n      ServiceErrorHandler.handle(\n        error as Error,\n        {\n          service: 'PracticeDashboardService',\n          operation: 'loadSupplierPerformance',\n          practiceId,\n        },\n        { rethrow: false, logLevel: 'error' }\n      );\n\n      // Graceful empty state with headers\n      return {\n        headers: [\n          'Supplier',\n          'Integration',\n          'Orders',\n          'Avg Delivery',\n          'Failed',\n          'Last Sync',\n        ],\n        rows: [],\n      };\n    }\n  }\n\n  private async loadCostAnalysis(practiceId: string) {\n    const { data } = await supabase\n      .from('product_batches')\n      .select(\n        `\n        total_cost,\n        products!inner(category)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .gte(\n        'created_at',\n        new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString()\n      );\n\n    const categoryTotals: Record<string, number> = {};\n    data?.forEach(batch => {\n      const category = (batch.products as any).category || 'Unknown';\n      categoryTotals[category] =\n        (categoryTotals[category] || 0) + Number(batch.total_cost || 0);\n    });\n\n    return {\n      chart_type: 'doughnut',\n      labels: Object.keys(categoryTotals),\n      data: Object.values(categoryTotals),\n      total: Object.values(categoryTotals).reduce((sum, val) => sum + val, 0),\n    };\n  }\n\n  private async loadErrorAlerts(practiceId: string) {\n    const { data } = await supabase\n      .from('activity_log')\n      .select('activity_type, description, created_at')\n      .eq('practice_id', practiceId)\n      .ilike('activity_type', '%error%')\n      .gte(\n        'created_at',\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('created_at', { ascending: false })\n      .limit(5);\n\n    return {\n      alerts:\n        data?.map(alert => ({\n          type: 'error' as const,\n          title: alert.activity_type,\n          message: alert.description,\n          timestamp: alert.created_at,\n        })) || [],\n    };\n  }\n\n  private async loadPendingOrdersMetric(practiceId: string) {\n    const { data, count } = await supabase\n      .from('order_lists')\n      .select('total_value', { count: 'exact' })\n      .eq('practice_id', practiceId)\n      .in('status', ['draft', 'active']);\n\n    const totalValue =\n      data?.reduce((sum, order) => sum + Number(order.total_value || 0), 0) ||\n      0;\n\n    return {\n      count: count || 0,\n      total_value: totalValue,\n      trend: 'stable', // Could be calculated from historical data\n    };\n  }\n\n  // Widget data loaders - OWNER WIDGETS\n  private async loadInventoryValue(practiceId: string) {\n    const { data } = await supabase\n      .from('stock_levels')\n      .select(\n        `\n        current_quantity,\n        products!inner(price, category)\n      `\n      )\n      .eq('practice_id', practiceId);\n\n    let totalValue = 0;\n    const categoryValues: Record<string, number> = {};\n    let totalProducts = 0;\n\n    data?.forEach(item => {\n      const price = Number((item.products as any).price || 0);\n      const quantity = Number(item.current_quantity || 0);\n      const value = price * quantity;\n\n      totalValue += value;\n      totalProducts++;\n\n      const category = (item.products as any).category || 'Unknown';\n      categoryValues[category] = (categoryValues[category] || 0) + value;\n    });\n\n    return {\n      total_value: totalValue,\n      total_products: totalProducts,\n      category_breakdown: categoryValues,\n      average_value_per_product:\n        totalProducts > 0 ? totalValue / totalProducts : 0,\n    };\n  }\n\n  private async loadBatchCompliance(practiceId: string) {\n    const { data } = await supabase\n      .from('product_batches')\n      .select('expiry_date, quality_check_passed, status')\n      .eq('practice_id', practiceId)\n      .eq('status', 'active');\n\n    const now = new Date();\n    const thirtyDaysFromNow = new Date(\n      now.getTime() + 30 * 24 * 60 * 60 * 1000\n    );\n\n    let totalBatches = 0;\n    let expiringSoon = 0;\n    let expired = 0;\n    let qualityIssues = 0;\n\n    data?.forEach(batch => {\n      totalBatches++;\n\n      const expiryDate = new Date(batch.expiry_date);\n      if (expiryDate <= now) expired++;\n      else if (expiryDate <= thirtyDaysFromNow) expiringSoon++;\n\n      if (batch.quality_check_passed === false) qualityIssues++;\n    });\n\n    return {\n      total_batches: totalBatches,\n      expiring_soon: expiringSoon,\n      expired: expired,\n      quality_issues: qualityIssues,\n      compliance_rate:\n        totalBatches > 0\n          ? ((totalBatches - expired - qualityIssues) / totalBatches) * 100\n          : 100,\n    };\n  }\n\n  private async loadSupplierContracts() {\n    const { data } = await supabase\n      .from('suppliers')\n      .select(\n        `\n        name,\n        integration_type,\n        order_method,\n        last_sync_at,\n        minimum_order_amount,\n        payment_terms,\n        supplier_products(id)\n      `\n      )\n      .eq('is_active', true)\n      .limit(10);\n\n    return {\n      headers: [\n        'Supplier',\n        'Type',\n        'Method',\n        'Products',\n        'Min Order',\n        'Payment Terms',\n        'Last Sync',\n      ],\n      rows:\n        data?.map(supplier => [\n          supplier.name,\n          supplier.integration_type,\n          supplier.order_method,\n          (supplier.supplier_products as any[])?.length || 0,\n          `€${supplier.minimum_order_amount || 0}`,\n          `${supplier.payment_terms || 30} days`,\n          supplier.last_sync_at\n            ? new Date(supplier.last_sync_at).toLocaleDateString()\n            : 'Never',\n        ]) || [],\n    };\n  }\n\n  private async loadStockRotation(practiceId: string) {\n    const { data } = await supabase\n      .from('product_batches')\n      .select(\n        `\n        created_at,\n        received_date,\n        products!inner(category)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .eq('status', 'depleted')\n      .gte(\n        'created_at',\n        new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString()\n      );\n\n    const categoryRotation: Record<\n      string,\n      { total_days: number; count: number }\n    > = {};\n\n    data?.forEach(batch => {\n      if (!batch.created_at || !batch.received_date) return;\n      const category = (batch.products as any).category || 'Unknown';\n      const shelfLifeDays = Math.ceil(\n        (new Date(batch.created_at).getTime() -\n          new Date(batch.received_date).getTime()) /\n          (1000 * 60 * 60 * 24)\n      );\n\n      if (!categoryRotation[category]) {\n        categoryRotation[category] = { total_days: 0, count: 0 };\n      }\n\n      categoryRotation[category].total_days += shelfLifeDays;\n      categoryRotation[category].count++;\n    });\n\n    return {\n      chart_type: 'bar',\n      labels: Object.keys(categoryRotation),\n      data: Object.values(categoryRotation).map(cat =>\n        cat.count > 0 ? Math.round(cat.total_days / cat.count) : 0\n      ),\n      title: 'Average Shelf Life by Category (days)',\n    };\n  }\n\n  private async loadAuditNotifications(practiceId: string) {\n    const { data } = await supabase\n      .from('counting_sessions')\n      .select(\n        `\n        name,\n        status,\n        total_products_counted,\n        products_with_variance,\n        total_variance_value,\n        completed_at,\n        practice_locations!inner(name)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .eq('status', 'completed')\n      .gte(\n        'completed_at',\n        new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n      )\n      .order('completed_at', { ascending: false })\n      .limit(10);\n\n    return {\n      items:\n        data?.map(session => ({\n          session_name: session.name,\n          location: (session.practice_locations as any).name,\n          products_counted: session.total_products_counted,\n          variances: session.products_with_variance ?? 0,\n          variance_value: session.total_variance_value,\n          completed_at: session.completed_at,\n          status: (session.products_with_variance ?? 0) > 0 ? 'warning' : 'success',\n        })) || [],\n    };\n  }\n\n  private getWidgetTitle(widgetId: string): string {\n    const titles: Record<string, string> = {\n      'low-stock-alerts': t('dashboard.widgets.lowStockAlerts'),\n      'expiring-products': t('dashboard.widgets.expiringProducts'),\n      'order-suggestions': t('dashboard.widgets.orderSuggestions'),\n      'active-order-lists': t('dashboard.widgets.activeOrderLists'),\n      'pending-deliveries': t('dashboard.widgets.pendingDeliveries'),\n      'stock-trends': t('dashboard.widgets.stockTrends'),\n      'supplier-performance': t('dashboard.widgets.supplierPerformance'),\n      'cost-analysis': t('dashboard.widgets.costAnalysis'),\n      'error-alerts': t('dashboard.widgets.errorAlerts'),\n      'pending-orders': t('dashboard.widgets.pendingOrders'),\n      'inventory-value': t('dashboard.widgets.inventoryValue'),\n      'batch-compliance': t('dashboard.widgets.batchCompliance'),\n      'supplier-contracts': t('dashboard.widgets.supplierContracts'),\n      'stock-rotation': t('dashboard.widgets.stockRotation'),\n      'audit-notifications': t('dashboard.widgets.auditNotifications'),\n    };\n\n    return titles[widgetId] || widgetId;\n  }\n\n  private getQuickActions(role: UserRole) {\n    const quickActions = roleDashboardConfig.getQuickActions(role);\n\n    return quickActions.map(action => ({\n      id: action.id,\n      label: t(action.labelKey),\n      icon: action.icon,\n      route: action.route,\n      color: action.color,\n      type: action.type,\n    }));\n  }\n\n  private async loadAlerts(practiceId: string, role: UserRole) {\n    const alerts = [];\n\n    try {\n      // Low stock alert for all roles\n      const { data: lowStock } = await supabase\n        .from('stock_levels')\n        .select('id')\n        .eq('practice_id', practiceId)\n        .filter('current_quantity', 'lte', 'minimum_quantity')\n        .limit(1);\n\n      if (lowStock && lowStock.length > 0) {\n        alerts.push({\n          id: 'low-stock',\n          type: 'warning' as const,\n          message: t('dashboard.alerts.lowStockMessage'),\n          action: '/inventory/levels',\n          actionLabel: t('dashboard.alerts.viewStock'),\n        });\n      }\n\n      // Role-specific alerts\n      if (role === 'manager' || role === 'owner') {\n        const { data: failedOrders } = await supabase\n          .from('supplier_orders')\n          .select('id')\n          .eq('status', 'failed')\n          .limit(1);\n\n        if (failedOrders && failedOrders.length > 0) {\n          alerts.push({\n            id: 'failed-orders',\n            type: 'error' as const,\n            message: t('dashboard.alerts.failedOrdersMessage'),\n            action: '/orders',\n            actionLabel: t('dashboard.alerts.viewOrders'),\n          });\n        }\n      }\n\n      if (role === 'owner') {\n        const { data: expiredBatches } = await supabase\n          .from('product_batches')\n          .select('id')\n          .eq('practice_id', practiceId)\n          .lt('expiry_date', new Date().toISOString())\n          .eq('status', 'active')\n          .limit(1);\n\n        if (expiredBatches && expiredBatches.length > 0) {\n          alerts.push({\n            id: 'expired-batches',\n            type: 'error' as const,\n            message: t('dashboard.alerts.expiredBatchesMessage'),\n            action: '/inventory/batches',\n            actionLabel: t('dashboard.alerts.viewBatches'),\n          });\n        }\n      }\n    } catch (error) {\n      dashboardLogger.error('Error loading alerts:', error as Record<string, unknown>);\n    }\n\n    return alerts;\n  }\n\n  // Additional widget loaders for new roles\n\n  // LOGISTICS role widget loaders\n  private async loadStockMovements(practiceId: string) {\n    const { data } = await supabase\n      .from('stock_movements')\n      .select(\n        `\n        movement_type,\n        quantity_change,\n        reason,\n        created_at,\n        products!inner(name),\n        practice_locations!inner(name)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .order('created_at', { ascending: false })\n      .limit(10);\n\n    return {\n      items:\n        data?.map(movement => ({\n          product_name: (movement.products as any).name,\n          location: (movement.practice_locations as any).name,\n          movement_type: movement.movement_type,\n          quantity_change: movement.quantity_change,\n          reason: movement.reason || 'Manual adjustment',\n          timestamp: movement.created_at,\n        })) || [],\n    };\n  }\n\n  private async loadLocationOverview(practiceId: string) {\n    const { data } = await supabase\n      .from('stock_levels')\n      .select(\n        `\n        current_quantity,\n        practice_locations!inner(name)\n      `\n      )\n      .eq('practice_id', practiceId);\n\n    const locationTotals: Record<string, number> = {};\n    data?.forEach(item => {\n      const location = (item.practice_locations as any).name;\n      locationTotals[location] =\n        (locationTotals[location] || 0) + Number(item.current_quantity);\n    });\n\n    return {\n      chart_type: 'doughnut',\n      labels: Object.keys(locationTotals),\n      data: Object.values(locationTotals),\n      total: Object.values(locationTotals).reduce((sum, val) => sum + val, 0),\n    };\n  }\n\n  private async loadTransportStatus(practiceId: string) {\n    const { data } = await supabase\n      .from('supplier_orders')\n      .select(\n        `\n        status,\n        order_lists!inner(practice_id)\n      `\n      )\n      .eq('order_lists.practice_id', practiceId)\n      .in('status', ['sent', 'in_transit', 'delivered']);\n\n    const statusCounts =\n      data?.reduce((acc: Record<string, number>, order) => {\n        acc[order.status] = (acc[order.status] || 0) + 1;\n        return acc;\n      }, {}) || {};\n\n    return {\n      in_transit: statusCounts.in_transit || 0,\n      delivered_today: statusCounts.delivered || 0,\n      pending_delivery: statusCounts.sent || 0,\n      total_active: Object.values(statusCounts).reduce(\n        (sum: number, val) => sum + val,\n        0\n      ),\n    };\n  }\n\n  // MEMBER role widget loaders\n  private async loadStockOverview(practiceId: string) {\n    const { data } = await supabase\n      .from('stock_levels')\n      .select('current_quantity, minimum_quantity')\n      .eq('practice_id', practiceId);\n\n    const totalItems = data?.length || 0;\n    const lowStockItems =\n      data?.filter(\n        item => (item.current_quantity ?? 0) <= (item.minimum_quantity || 0)\n      ).length || 0;\n    const outOfStockItems =\n      data?.filter(item => (item.current_quantity ?? 0) <= 0).length || 0;\n\n    return {\n      total_items: totalItems,\n      low_stock_items: lowStockItems,\n      out_of_stock_items: outOfStockItems,\n      healthy_stock: totalItems - lowStockItems - outOfStockItems,\n    };\n  }\n\n  private async loadMyTasks(practiceId: string) {\n    // Deze zou gekoppeld kunnen worden aan een task systeem\n    // Voor nu simuleren we enkele basis taken\n    const tasks = [\n      {\n        id: 'count-location-1',\n        title: 'Voorraad tellen locatie 1',\n        priority: 'high',\n        due_date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\n        type: 'counting',\n      },\n      {\n        id: 'receive-order-123',\n        title: 'Bestelling #123 ontvangen',\n        priority: 'medium',\n        due_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        type: 'receiving',\n      },\n    ];\n\n    return {\n      items: tasks.map(task => ({\n        ...task,\n        days_until_due: Math.ceil(\n          (new Date(task.due_date).getTime() - Date.now()) /\n            (1000 * 60 * 60 * 24)\n        ),\n      })),\n    };\n  }\n\n  // GUEST role widget loaders\n  private async loadPublicInfo(practiceId: string) {\n    return {\n      practice_name: 'Demo Practice',\n      status: 'Active',\n      last_updated: new Date().toISOString(),\n      public_info: 'Welcome to our inventory system',\n    };\n  }\n\n  // PLATFORM_OWNER role widget loaders\n  private async loadSystemOverview() {\n    // Deze zouden echte platform metrics moeten zijn\n    return {\n      total_practices: 150,\n      active_users: 1200,\n      total_transactions: 50000,\n      system_uptime: 99.9,\n      storage_used: '85%',\n      api_calls_today: 25000,\n    };\n  }\n\n  private async loadUserAnalytics() {\n    // Simulatie van user analytics data\n    const lastWeek = Array.from({ length: 7 }, (_, i) => {\n      const date = new Date();\n      date.setDate(date.getDate() - (6 - i));\n      return date.toISOString().split('T')[0];\n    });\n\n    return {\n      chart_type: 'line',\n      labels: lastWeek,\n      datasets: [\n        {\n          label: 'Active Users',\n          data: [850, 920, 1100, 980, 1200, 1150, 1180],\n          color: '#2196F3',\n        },\n        {\n          label: 'New Registrations',\n          data: [12, 18, 25, 15, 30, 22, 28],\n          color: '#4CAF50',\n        },\n      ],\n    };\n  }\n\n  private async loadPlatformHealth() {\n    // Platform health check alerts\n    const alerts = [\n      {\n        type: 'success' as const,\n        title: 'System Status',\n        message: 'All systems operational',\n        timestamp: new Date().toISOString(),\n      },\n      {\n        type: 'warning' as const,\n        title: 'Database Performance',\n        message: 'Slightly elevated response times detected',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n      },\n    ];\n\n    return { alerts };\n  }\n\n  private async loadSubscriptionStatus() {\n    // Platform subscription overview\n    const subscriptions = [\n      {\n        practice_name: 'Practice A',\n        plan: 'Professional',\n        status: 'Active',\n        billing_period: 'Monthly',\n        amount: '€99',\n        next_billing: '2024-02-15',\n      },\n      {\n        practice_name: 'Practice B',\n        plan: 'Enterprise',\n        status: 'Active',\n        billing_period: 'Yearly',\n        amount: '€999',\n        next_billing: '2024-05-20',\n      },\n    ];\n\n    return {\n      headers: [\n        'Practice',\n        'Plan',\n        'Status',\n        'Billing',\n        'Amount',\n        'Next Billing',\n      ],\n      rows: subscriptions.map(sub => [\n        sub.practice_name,\n        sub.plan,\n        sub.status,\n        sub.billing_period,\n        sub.amount,\n        sub.next_billing,\n      ]),\n    };\n  }\n}\n\nexport const practiceDashboardService = new PracticeDashboardService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\role-config.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 504,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 504,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13241, 13244], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13241, 13244], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 506,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 506,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13311, 13314], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13311, 13314], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 507,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 507,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13358, 13361], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13358, 13361], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { t } from '@/utils/i18n-service';\nimport type { UserRole } from '@/types/permissions';\n\nexport interface WidgetConfig {\n  id: string;\n  type: 'metric' | 'chart' | 'list' | 'alert' | 'table';\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  visible: boolean;\n  titleKey: string;\n  permissions?: string[];\n}\n\nexport interface RoleDashboardDefinition {\n  role: UserRole;\n  titleKey: string;\n  subtitleKey: string;\n  icon: string;\n  color: string;\n  widgets: WidgetConfig[];\n  quickActions: QuickActionConfig[];\n}\n\nexport type RoleDashboardMap = Record<UserRole, RoleDashboardDefinition>;\n\nexport interface QuickActionConfig {\n  id: string;\n  labelKey: string;\n  icon: string;\n  route: string;\n  color: string;\n  type: string;\n  permissions?: string[];\n}\n\n/**\n * Centrale configuratie voor alle dashboard widgets en quick actions per rol\n */\nclass RoleDashboardConfig {\n  private configs: RoleDashboardMap = {\n    // ASSISTANT - Focus op dagelijkse voorraadtaken\n    assistant: {\n      role: 'assistant',\n      titleKey: 'dashboard.roles.assistant',\n      subtitleKey: 'dashboard.roles.assistantDescription',\n      icon: 'medical_services',\n      color: 'blue',\n      widgets: [\n        {\n          id: 'low-stock-alerts',\n          type: 'list',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.lowStockAlerts',\n        },\n        {\n          id: 'expiring-products',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.expiringProducts',\n        },\n        {\n          id: 'order-suggestions',\n          type: 'list',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.orderSuggestions',\n        },\n        {\n          id: 'active-order-lists',\n          type: 'table',\n          size: 'large',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.activeOrderLists',\n        },\n        {\n          id: 'pending-deliveries',\n          type: 'list',\n          size: 'medium',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingDeliveries',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'create-order',\n          labelKey: 'dashboard.quickActions.createOrder',\n          icon: 'add_shopping_cart',\n          route: '/orders/create',\n          color: 'success',\n          type: 'create',\n        },\n        {\n          id: 'count-stock',\n          labelKey: 'dashboard.quickActions.countStock',\n          icon: 'fact_check',\n          route: '/inventory/counting',\n          color: 'warning',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // MANAGER - Focus op analytics en beheer\n    manager: {\n      role: 'manager',\n      titleKey: 'dashboard.roles.manager',\n      subtitleKey: 'dashboard.roles.managerDescription',\n      icon: 'analytics',\n      color: 'purple',\n      widgets: [\n        {\n          id: 'stock-trends',\n          type: 'chart',\n          size: 'large',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockTrends',\n        },\n        {\n          id: 'supplier-performance',\n          type: 'table',\n          size: 'large',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.supplierPerformance',\n        },\n        {\n          id: 'cost-analysis',\n          type: 'chart',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.costAnalysis',\n        },\n        {\n          id: 'error-alerts',\n          type: 'alert',\n          size: 'medium',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.errorAlerts',\n        },\n        {\n          id: 'pending-orders',\n          type: 'metric',\n          size: 'small',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingOrders',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'view-analytics',\n          labelKey: 'dashboard.quickActions.viewAnalytics',\n          icon: 'analytics',\n          route: '/analytics',\n          color: 'purple',\n          type: 'analyze',\n        },\n        {\n          id: 'manage-suppliers',\n          labelKey: 'dashboard.quickActions.manageSuppliers',\n          icon: 'business',\n          route: '/suppliers',\n          color: 'indigo',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // OWNER - Focus op financiëen en compliance\n    owner: {\n      role: 'owner',\n      titleKey: 'dashboard.roles.owner',\n      subtitleKey: 'dashboard.roles.ownerDescription',\n      icon: 'admin_panel_settings',\n      color: 'green',\n      widgets: [\n        {\n          id: 'inventory-value',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.inventoryValue',\n        },\n        {\n          id: 'batch-compliance',\n          type: 'metric',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.batchCompliance',\n        },\n        {\n          id: 'supplier-contracts',\n          type: 'table',\n          size: 'large',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.supplierContracts',\n        },\n        {\n          id: 'stock-rotation',\n          type: 'chart',\n          size: 'medium',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockRotation',\n        },\n        {\n          id: 'audit-notifications',\n          type: 'list',\n          size: 'medium',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.auditNotifications',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'financial-reports',\n          labelKey: 'dashboard.quickActions.financialReports',\n          icon: 'account_balance',\n          route: '/reports/financial',\n          color: 'green',\n          type: 'analyze',\n        },\n        {\n          id: 'manage-users',\n          labelKey: 'dashboard.quickActions.manageUsers',\n          icon: 'people',\n          route: '/admin/users',\n          color: 'red',\n          type: 'settings',\n        },\n      ],\n    },\n\n    // LOGISTICS - Focus op bewegingen en leveringen\n    logistics: {\n      role: 'logistics',\n      titleKey: 'dashboard.roles.logistics',\n      subtitleKey: 'dashboard.roles.logisticsDescription',\n      icon: 'local_shipping',\n      color: 'orange',\n      widgets: [\n        {\n          id: 'pending-deliveries',\n          type: 'list',\n          size: 'large',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingDeliveries',\n        },\n        {\n          id: 'stock-movements',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockMovements',\n        },\n        {\n          id: 'location-overview',\n          type: 'chart',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.locationOverview',\n        },\n        {\n          id: 'transport-status',\n          type: 'metric',\n          size: 'small',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.transportStatus',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-movements',\n          labelKey: 'dashboard.quickActions.viewMovements',\n          icon: 'move_up',\n          route: '/inventory/movements',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'manage-locations',\n          labelKey: 'dashboard.quickActions.manageLocations',\n          icon: 'location_on',\n          route: '/inventory/locations',\n          color: 'orange',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // MEMBER - Beperkte toegang\n    member: {\n      role: 'member',\n      titleKey: 'dashboard.roles.member',\n      subtitleKey: 'dashboard.roles.memberDescription',\n      icon: 'person',\n      color: 'grey',\n      widgets: [\n        {\n          id: 'stock-overview',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockOverview',\n        },\n        {\n          id: 'my-tasks',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.myTasks',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n      ],\n    },\n\n    // GUEST - Zeer beperkte toegang\n    guest: {\n      role: 'guest',\n      titleKey: 'dashboard.roles.guest',\n      subtitleKey: 'dashboard.roles.guestDescription',\n      icon: 'visibility',\n      color: 'grey-5',\n      widgets: [\n        {\n          id: 'public-info',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.publicInfo',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'view-info',\n          labelKey: 'dashboard.quickActions.viewInfo',\n          icon: 'info',\n          route: '/info',\n          color: 'info',\n          type: 'view',\n        },\n      ],\n    },\n\n    // PLATFORM_OWNER - Geen widgets in normale dashboard, alleen redirect naar platform\n    platform_owner: {\n      role: 'platform_owner',\n      titleKey: 'dashboard.roles.platformOwner',\n      subtitleKey: 'dashboard.roles.platformOwnerDescription',\n      icon: 'settings',\n      color: 'deep-purple',\n      widgets: [], // Geen widgets - platform owners moeten naar /platform\n      quickActions: [\n        {\n          id: 'platform-dashboard',\n          labelKey: 'dashboard.quickActions.platformDashboard',\n          icon: 'dashboard',\n          route: '/platform',\n          color: 'deep-purple',\n          type: 'view',\n        },\n      ],\n    },\n  };\n\n  /**\n   * Krijg de volledige dashboard configuratie voor een rol\n   */\n  getRoleConfig(role: UserRole): RoleDashboardDefinition {\n    const config = this.configs[role];\n    if (!config) {\n      return this.configs.member;\n    }\n\n    return config;\n  }\n\n  /**\n   * Krijg de widgets voor een specifieke rol\n   */\n  getWidgetIds(role: UserRole): string[] {\n    const config = this.configs[role];\n    return config?.widgets.map(w => w.id) || [];\n  }\n\n  /**\n   * Krijg quick actions voor een specifieke rol\n   */\n  getQuickActions(role: UserRole): QuickActionConfig[] {\n    const config = this.configs[role];\n    return config?.quickActions || [];\n  }\n\n  /**\n   * Krijg rol opties voor demo switcher\n   */\n  getDemoRoleOptions() {\n    // Practice rollen voor normale gebruikers\n    const practiceRoles: UserRole[] = ['assistant', 'manager', 'owner'];\n\n    // In development mode ook platform_owner tonen voor testing\n    const isDevelopment =\n      process.env.NODE_ENV === 'development' ||\n      window.location.hostname === 'localhost';\n    const demoRoles = isDevelopment\n      ? [...practiceRoles, 'platform_owner']\n      : practiceRoles;\n\n    return demoRoles.map(role => ({\n      label: t((this.configs as any)[role].titleKey),\n      value: role,\n      icon: (this.configs as any)[role].icon,\n      color: (this.configs as any)[role].color,\n    }));\n  }\n\n  /**\n   * Krijg alle beschikbare widget types\n   */\n  getAllWidgetTypes(): string[] {\n    const types = new Set<string>();\n    Object.values(this.configs).forEach(config => {\n      config.widgets.forEach(widget => {\n        types.add(widget.type);\n      });\n    });\n    return Array.from(types);\n  }\n\n  /**\n   * Check of een rol toegang heeft tot een specifieke widget\n   */\n  hasWidgetAccess(role: UserRole, widgetId: string): boolean {\n    const config = this.configs[role];\n    return config?.widgets.some(w => w.id === widgetId && w.visible) || false;\n  }\n}\n\nexport const roleDashboardConfig = new RoleDashboardConfig();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\integration\\inventoryOrderIntegration.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2634, 2637], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2634, 2637], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 285,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 285,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9650, 9653], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9650, 9653], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 294,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 294,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10066, 10069], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10066, 10069], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalErrors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 300,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 321,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 321,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10862, 10865], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10862, 10865], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10887, 10890], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10887, 10890], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 323,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 323,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10919, 10922], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10919, 10922], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 324,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 324,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10945, 10948], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10945, 10948], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 325,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 325,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10976, 10979], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10976, 10979], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 326,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 326,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11006, 11009], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11006, 11009], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 366,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 366,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12323, 12326], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12323, 12326], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 386,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 386,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12777, 12780], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12777, 12780], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 405,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 405,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13279, 13282], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13279, 13282], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { centralOrderService } from '@/services/orderOrchestration/centralOrderService';\r\nimport { inventoryAutomationService } from '@/services/inventory/automationService';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { orderLogger, toLogData } from '@/utils/logger';\r\n\r\n/**\r\n * Integration Service for Inventory & Order Management\r\n *\r\n * This service provides high-level integration between:\r\n * - Inventory automation\r\n * - Order orchestration\r\n * - Real-time notifications\r\n * - Dashboard updates\r\n */\r\nexport class InventoryOrderIntegrationService {\r\n  /**\r\n   * Initialize automated inventory management for a practice\r\n   */\r\n  async initializeAutomation(practiceId: string): Promise<{\r\n    lowStockItems: number;\r\n    automationEnabled: boolean;\r\n    schedulesCreated: number;\r\n    notificationsEnabled: boolean;\r\n  }> {\r\n    try {\r\n      orderLogger.info(`Initializing automation for practice ${practiceId}`);\r\n\r\n      // 1. Run initial inventory health check\r\n      const healthCheck =\r\n        await inventoryAutomationService.runInventoryHealthCheck(practiceId);\r\n\r\n      // 2. Check if automation is already enabled\r\n      const { data: settings } = await supabase\r\n        .from('practice_inventory_settings')\r\n        .select('auto_reorder_enabled')\r\n        .eq('practice_id', practiceId)\r\n        .single();\r\n\r\n      let automationEnabled = settings?.auto_reorder_enabled || false;\r\n\r\n      // 3. Enable automation if not already enabled and there are actionable items\r\n      if (!automationEnabled && healthCheck.lowStockCount > 0) {\r\n        await supabase.from('practice_inventory_settings').upsert({\r\n          practice_id: practiceId,\r\n          auto_reorder_enabled: true,\r\n          low_stock_threshold_percent: 20,\r\n          notify_on_low_stock: true,\r\n          notify_on_stock_out: true,\r\n        });\r\n        automationEnabled = true;\r\n      }\r\n\r\n      // 4. Create default automation schedule if none exists\r\n      const { data: existingSchedules } = await supabase\r\n        .from('automation_schedules')\r\n        .select('id')\r\n        .eq('practice_id', practiceId);\r\n\r\n      let schedulesCreated = 0;\r\n      if (!existingSchedules?.length && automationEnabled) {\r\n        await supabase.from('automation_schedules').insert({\r\n          practice_id: practiceId,\r\n          name: 'Daily Low Stock Check',\r\n          description:\r\n            'Automatically check for low stock items and create orders',\r\n          schedule_type: 'daily',\r\n          schedule_time: '09:00',\r\n          auto_approve: false,\r\n          max_order_value: 1000,\r\n          min_urgency_level: 'medium',\r\n        } as any);\r\n        schedulesCreated = 1;\r\n      }\r\n\r\n      // 5. Create initial notifications for critical items\r\n      const criticalItems = await inventoryAutomationService.checkLowStockItems(\r\n        practiceId\r\n      );\r\n      const urgentItems = criticalItems.filter(\r\n        item => item.urgencyLevel === 'critical'\r\n      );\r\n\r\n      if (urgentItems.length > 0) {\r\n        await supabase.from('notifications').insert({\r\n          practice_id: practiceId,\r\n          title: 'Kritieke voorraadtekorten gedetecteerd',\r\n          message: `${urgentItems.length} producten zijn uitverkocht en hebben directe aandacht nodig`,\r\n          category: 'stock_alert',\r\n          priority: 'urgent',\r\n          action_url: '/inventory/levels',\r\n          action_label: 'Bekijk voorraad',\r\n        });\r\n      }\r\n\r\n      return {\r\n        lowStockItems: healthCheck.lowStockCount,\r\n        automationEnabled,\r\n        schedulesCreated,\r\n        notificationsEnabled: true,\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error initializing automation:', toLogData(error));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process a complete reorder workflow\r\n   */\r\n  async processCompleteReorderWorkflow(\r\n    practiceId: string,\r\n    options: {\r\n      locationId?: string;\r\n      autoApprove?: boolean;\r\n      maxOrderValue?: number;\r\n      urgencyFilter?: 'low' | 'medium' | 'high' | 'critical';\r\n    } = {}\r\n  ): Promise<{\r\n    itemsAnalyzed: number;\r\n    itemsToOrder: number;\r\n    ordersCreated: number;\r\n    totalValue: number;\r\n    status: 'success' | 'partial' | 'failed';\r\n    details: string[];\r\n  }> {\r\n    try {\r\n      orderLogger.info(\r\n        `Processing complete reorder workflow for practice ${practiceId}`\r\n      );\r\n\r\n      // 1. Generate reorder suggestions\r\n      const suggestions =\r\n        await inventoryAutomationService.generateReorderSuggestions(practiceId);\r\n\r\n      // 2. Apply filters\r\n      let filteredSuggestions = suggestions;\r\n\r\n      if (options.locationId) {\r\n        filteredSuggestions = filteredSuggestions.filter(\r\n          s => s.locationId === options.locationId\r\n        );\r\n      }\r\n\r\n      if (options.urgencyFilter) {\r\n        const urgencyLevels = ['low', 'medium', 'high', 'critical'];\r\n        const minIndex = urgencyLevels.indexOf(options.urgencyFilter);\r\n        filteredSuggestions = filteredSuggestions.filter(\r\n          s => urgencyLevels.indexOf(s.urgencyLevel) >= minIndex\r\n        );\r\n      }\r\n\r\n      if (filteredSuggestions.length === 0) {\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: 0,\r\n          ordersCreated: 0,\r\n          totalValue: 0,\r\n          status: 'success',\r\n          details: ['No items need reordering with current filters'],\r\n        };\r\n      }\r\n\r\n      // 3. Calculate total value and check approval requirements\r\n      const totalValue = filteredSuggestions.reduce(\r\n        (sum, item) => sum + item.suggestedQuantity * item.estimatedCost,\r\n        0\r\n      );\r\n\r\n      const needsApproval =\r\n        !options.autoApprove ||\r\n        (options.maxOrderValue && totalValue > options.maxOrderValue);\r\n\r\n      // 4. Transform suggestions to reorder format\r\n      const reorderItems = filteredSuggestions.map(suggestion => ({\r\n        product_id: suggestion.productId,\r\n        product_name: suggestion.productName,\r\n        sku: suggestion.sku,\r\n        location_id: suggestion.locationId,\r\n        location_name: suggestion.locationName,\r\n        current_stock: suggestion.currentQuantity,\r\n        minimum_stock: suggestion.minimumQuantity,\r\n        reorder_point: suggestion.reorderPoint,\r\n        calculated_order_quantity: suggestion.suggestedQuantity,\r\n        unit_price: suggestion.estimatedCost,\r\n        preferred_supplier_id: suggestion.preferredSupplierId,\r\n        preferred_supplier_name: suggestion.supplierName,\r\n        urgency_level: suggestion.urgencyLevel,\r\n        estimated_cost: suggestion.estimatedCost * suggestion.suggestedQuantity,\r\n        lead_time_days: suggestion.leadTimeDays,\r\n        practice_id: practiceId,\r\n        last_ordered_at: null,\r\n        stock_trend: 'decreasing',\r\n      }));\r\n\r\n      // 5. Process the order\r\n      if (needsApproval) {\r\n        // Create draft order for approval\r\n        const result = await centralOrderService.createMultiSupplierOrder(\r\n          reorderItems\r\n        );\r\n\r\n        // Create notification for approval\r\n        await supabase.from('notifications').insert({\r\n          practice_id: practiceId,\r\n          title: 'Bestelling wacht op goedkeuring',\r\n          message: `Automatische bestelling van €${totalValue.toFixed(\r\n            2\r\n          )} wacht op goedkeuring`,\r\n          category: 'order_update',\r\n          priority: 'normal',\r\n          action_url: '/orders',\r\n          action_label: 'Bekijk bestelling',\r\n        });\r\n\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: filteredSuggestions.length,\r\n          ordersCreated: result.supplierOrders.length,\r\n          totalValue,\r\n          status: 'success',\r\n          details: ['Order created and waiting for approval'],\r\n        };\r\n      } else {\r\n        // Process automatic order\r\n        const result = await centralOrderService.createMultiSupplierOrder(\r\n          reorderItems\r\n        );\r\n\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: filteredSuggestions.length,\r\n          ordersCreated: result.supplierOrders.length,\r\n          totalValue,\r\n          status: result.status,\r\n          details:\r\n            result.errors.length > 0\r\n              ? result.errors\r\n              : ['Orders processed successfully'],\r\n        };\r\n      }\r\n    } catch (error) {\r\n      orderLogger.error('Error in complete reorder workflow:', toLogData(error));\r\n      return {\r\n        itemsAnalyzed: 0,\r\n        itemsToOrder: 0,\r\n        ordersCreated: 0,\r\n        totalValue: 0,\r\n        status: 'failed',\r\n        details: [error instanceof Error ? error.message : 'Unknown error'],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor and process delivery updates\r\n   */\r\n  async processDeliveryUpdates(): Promise<{\r\n    ordersChecked: number;\r\n    deliveriesProcessed: number;\r\n    stockUpdates: number;\r\n    errors: string[];\r\n  }> {\r\n    try {\r\n      orderLogger.info('Processing delivery updates');\r\n\r\n      // 1. Process incoming deliveries\r\n      const deliveryResults =\r\n        await inventoryAutomationService.processIncomingDeliveries();\r\n\r\n      // 2. Check for overdue orders and send notifications\r\n      const { data: overdueOrders } = await supabase\r\n        .from('supplier_orders')\r\n        .select(\r\n          `\r\n          id,\r\n          delivery_expected,\r\n          suppliers(name)\r\n        `\r\n        )\r\n        .eq('status', 'shipped')\r\n        .lt('delivery_expected', new Date().toISOString().split('T')[0]);\r\n\r\n      // Create notifications for overdue orders\r\n      for (const order of overdueOrders || []) {\r\n        const orderAny = order as any;\r\n        await supabase.from('notifications').insert({\r\n          practice_id: orderAny.practice_id ?? '',\r\n          title: 'Bestelling is verlaat',\r\n          message: `Bestelling ${orderAny.id} had ${orderAny.delivery_expected} moeten aankomen`,\r\n          category: 'order_update',\r\n          priority: 'normal',\r\n          action_url: '/orders',\r\n          action_label: 'Bekijk bestelling',\r\n        } as any);\r\n      }\r\n\r\n      const successfulDeliveries = deliveryResults.filter(\r\n        r => r.stockUpdated\r\n      ).length;\r\n      const totalErrors = deliveryResults.reduce(\r\n        (sum, r) => sum + r.errors.length,\r\n        0\r\n      );\r\n\r\n      return {\r\n        ordersChecked: deliveryResults.length + (overdueOrders?.length || 0),\r\n        deliveriesProcessed: successfulDeliveries,\r\n        stockUpdates: successfulDeliveries,\r\n        errors: deliveryResults.flatMap(r => r.errors),\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error processing delivery updates:', toLogData(error));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive inventory dashboard data\r\n   */\r\n  async generateInventoryDashboardData(practiceId: string): Promise<{\r\n    healthCheck: any;\r\n    lowStockItems: any[];\r\n    reorderSuggestions: any[];\r\n    recentOrders: any[];\r\n    pendingDeliveries: any[];\r\n    automationStatus: any;\r\n  }> {\r\n    try {\r\n      orderLogger.info(\r\n        `Generating inventory dashboard data for practice ${practiceId}`\r\n      );\r\n\r\n      // Run all data collection in parallel for better performance\r\n      const [\r\n        healthCheck,\r\n        lowStockItems,\r\n        reorderSuggestions,\r\n        recentOrders,\r\n        pendingDeliveries,\r\n        automationSettings,\r\n      ] = await Promise.all([\r\n        inventoryAutomationService.runInventoryHealthCheck(practiceId),\r\n        inventoryAutomationService.checkLowStockItems(practiceId),\r\n        inventoryAutomationService.generateReorderSuggestions(practiceId),\r\n        this.getRecentOrders(practiceId),\r\n        this.getPendingDeliveries(practiceId),\r\n        this.getAutomationStatus(practiceId),\r\n      ]);\r\n\r\n      return {\r\n        healthCheck,\r\n        lowStockItems: lowStockItems.slice(0, 10), // Top 10 most urgent\r\n        reorderSuggestions: reorderSuggestions.slice(0, 10), // Top 10 suggestions\r\n        recentOrders,\r\n        pendingDeliveries,\r\n        automationStatus: automationSettings,\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error generating inventory dashboard data:', toLogData(error));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private async getRecentOrders(practiceId: string): Promise<any[]> {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        id,\r\n        order_reference,\r\n        status,\r\n        total_amount,\r\n        created_at,\r\n        suppliers(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    return data || [];\r\n  }\r\n\r\n  private async getPendingDeliveries(practiceId: string): Promise<any[]> {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        id,\r\n        order_reference,\r\n        estimated_delivery_date,\r\n        tracking_number,\r\n        suppliers(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .in('status', ['sent', 'confirmed', 'shipped'])\r\n      .order('estimated_delivery_date', { ascending: true });\r\n\r\n    return data || [];\r\n  }\r\n\r\n  private async getAutomationStatus(practiceId: string): Promise<any> {\r\n    const { data: settings } = await supabase\r\n      .from('practice_inventory_settings')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .single();\r\n\r\n    const { data: schedules } = await supabase\r\n      .from('automation_schedules')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .eq('enabled', true);\r\n\r\n    return {\r\n      autoReorderEnabled: settings?.auto_reorder_enabled || false,\r\n      notificationsEnabled: settings?.notify_on_low_stock || false,\r\n      activeSchedules: schedules?.length || 0,\r\n      lastRunAt: schedules?.[0]?.last_run_at,\r\n      nextRunAt: schedules?.[0]?.next_run_at,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const inventoryOrderIntegration = new InventoryOrderIntegrationService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\inventory\\automationService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1870, 1873], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1870, 1873], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2177, 2180], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2177, 2180], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2658, 2661], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2658, 2661], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9104, 9107], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9104, 9107], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 384,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 384,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12026, 12029], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12026, 12029], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { inventoryLogger } from '@/utils/logger';\nimport {\n  centralOrderService,\n  type AutoReorderConfig,\n} from '@/services/orderOrchestration/centralOrderService';\nimport { AnalyticsService } from '@/services/analytics';\nimport type { LowStockItemDTO } from '@/types/analytics';\n\nexport interface AutomationSchedule {\n  practiceId: string;\n  enabled: boolean;\n  scheduleType: 'daily' | 'weekly' | 'monthly';\n  scheduleTime: string; // HH:MM format\n  scheduleDays?: number[]; // 0-6, Sunday-Saturday for weekly\n  scheduleDate?: number; // 1-31 for monthly\n  lastRun?: string;\n  nextRun?: string;\n}\n\nexport interface DeliveryProcessingResult {\n  orderId: string;\n  itemsProcessed: number;\n  stockUpdated: boolean;\n  notificationSent: boolean;\n  errors: string[];\n}\n\n/**\n * Inventory Automation Service\n *\n * Handles automated inventory operations:\n * - Low stock detection and alerts\n * - Scheduled automatic reordering\n * - Delivery processing and stock updates\n * - Inventory analytics and reporting\n */\nexport class InventoryAutomationService {\n  /**\n   * Check for low stock items across all locations\n   */\n  async checkLowStockItems(\n    practiceId: string,\n    locationId?: string\n  ): Promise<\n    (LowStockItemDTO & {\n      urgencyLevel: 'low' | 'medium' | 'high' | 'critical';\n      daysOutOfStock?: number;\n    })[]\n  > {\n    const items = await AnalyticsService.getLowStockItems(practiceId);\n    const filteredItems = locationId\n      ? items.filter(item => item.locationId === locationId)\n      : items;\n\n    return filteredItems.map(item => {\n      const urgencyLevel = this.calculateUrgencyLevel(\n        item.currentQuantity,\n        item.minimumQuantity,\n        item.minimumQuantity\n      );\n\n      const daysOutOfStock =\n        item.currentQuantity <= 0\n          ? this.calculateDaysOutOfStock((item as any).lastMovementAt ?? new Date().toISOString())\n          : undefined;\n\n      return {\n        ...item,\n        urgencyLevel,\n        daysOutOfStock,\n      };\n    });\n  }\n\n  /**\n   * Generate reorder suggestions based on stock analysis\n   */\n  async generateReorderSuggestions(practiceId: string): Promise<any[]> {\n    try {\n      inventoryLogger.info(\n        `Generating reorder suggestions for practice ${practiceId}`\n      );\n\n      const lowStockItems = await this.checkLowStockItems(practiceId);\n\n      if (lowStockItems.length === 0) {\n        return [];\n      }\n\n      // Get supplier information for items with preferred suppliers\n      const supplierIds = lowStockItems\n        .map(item => item.preferredSupplierId)\n        .filter(Boolean) as string[];\n\n      let suppliers: any[] = [];\n      if (supplierIds.length > 0) {\n        const { data: supplierData } = await supabase\n          .from('suppliers')\n          .select('id, name, minimum_order_amount, lead_time_days')\n          .in('id', supplierIds);\n        suppliers = supplierData || [];\n      }\n\n      // Generate suggestions with supplier information\n      const suggestions = lowStockItems.map(item => {\n        const supplier = suppliers.find(s => s.id === item.preferredSupplierId);\n\n        // Calculate suggested order quantity\n        const suggestedQuantity = this.calculateOrderQuantity(\n          item.currentQuantity,\n          item.minimumQuantity,\n          item.minimumQuantity\n        );\n\n        return {\n          ...item,\n          suggestedQuantity,\n          supplierName: supplier?.name || 'No preferred supplier',\n          minimumOrderAmount: supplier?.minimum_order_amount || 0,\n          leadTimeDays: supplier?.lead_time_days || 7,\n          estimatedCost: suggestedQuantity * 10, // Placeholder - would need product pricing\n          priority: item.urgencyLevel === 'critical' ? 'urgent' : 'normal',\n        };\n      });\n\n      return suggestions;\n    } catch (error) {\n      inventoryLogger.error(\n        'Error generating reorder suggestions:',\n        error instanceof Error\n          ? { message: error.message, stack: error.stack }\n          : { error: String(error) }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule and execute automatic reorders\n   */\n  async scheduleAutomaticReorders(): Promise<void> {\n    try {\n      inventoryLogger.info('Running scheduled automatic reorders');\n\n      // Get all practices with automation enabled\n      const { data: practices, error } = await supabase\n        .from('practice_inventory_settings')\n        .select(\n          `\n          practice_id,\n          auto_reorder_enabled,\n          practices!inner(id, name)\n        `\n        )\n        .eq('auto_reorder_enabled', true);\n\n      if (error) throw error;\n\n      if (!practices?.length) {\n        inventoryLogger.info('No practices have automatic reordering enabled');\n        return;\n      }\n\n      // Process each practice\n      for (const practice of practices) {\n        try {\n          const config: AutoReorderConfig = {\n            practiceId: practice.practice_id,\n            enableLowStockReorder: true,\n            enableScheduledReorder: true,\n            approvalRequired: false, // For scheduled orders, we assume approval is not required\n            maxOrderValue: 1000, // Default limit for automatic orders\n          };\n\n          const result =\n            await centralOrderService.processAutomaticReorder(config);\n\n          if (result.status === 'success' && result.totalItems > 0) {\n            inventoryLogger.info(\n              `Successfully processed automatic reorder for ${practice.practices.name}: ` +\n                `${result.totalItems} items, €${result.totalValue.toFixed(2)}`\n            );\n\n            // Create success notification\n            await this.createAutomationNotification(\n              practice.practice_id,\n              'Automatische bestelling geplaatst',\n              `${\n                result.totalItems\n              } producten besteld voor €${result.totalValue.toFixed(2)}`,\n              'success'\n            );\n          } else if (result.errors.length > 0) {\n            inventoryLogger.warn(\n              `Partial success for automatic reorder for ${practice.practices.name}: ` +\n                `${result.errors.length} errors`\n            );\n\n            // Create warning notification\n            await this.createAutomationNotification(\n              practice.practice_id,\n              'Automatische bestelling gedeeltelijk mislukt',\n              `${result.errors.length} fouten opgetreden bij bestelling`,\n              'warning'\n            );\n          }\n        } catch (practiceError) {\n          inventoryLogger.error(\n            `Error processing automatic reorder for practice ${practice.practice_id}:`,\n            practiceError instanceof Error\n              ? { message: practiceError.message, stack: practiceError.stack }\n              : { error: String(practiceError) }\n          );\n\n          // Create error notification\n          await this.createAutomationNotification(\n            practice.practice_id,\n            'Automatische bestelling mislukt',\n            'Er is een fout opgetreden bij de automatische bestelling',\n            'error'\n          );\n        }\n      }\n    } catch (error) {\n      inventoryLogger.error(\n        'Error in scheduled automatic reorders:',\n        error instanceof Error\n          ? { message: error.message, stack: error.stack }\n          : { error: String(error) }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Process incoming deliveries and update stock\n   */\n  async processIncomingDeliveries(): Promise<DeliveryProcessingResult[]> {\n    try {\n      inventoryLogger.info('Processing incoming deliveries');\n\n      // Get orders that are marked as delivered but not yet processed\n      const { data: deliveredOrders, error } = await supabase\n        .from('supplier_orders')\n        .select(\n          `\n          id,\n          order_list_id,\n          supplier_id,\n          status,\n          delivery_expected,\n          delivery_confirmed_at,\n          tracking_info,\n          suppliers(name)\n        `\n        )\n        .eq('status', 'delivered');\n\n      if (error) throw error;\n\n      if (!deliveredOrders?.length) {\n        inventoryLogger.info('No delivered orders to process');\n        return [];\n      }\n\n      const results: DeliveryProcessingResult[] = [];\n\n      for (const order of deliveredOrders) {\n        try {\n          // Update stock for this order\n          await centralOrderService.updateStockAfterDelivery(order.id);\n\n          // Mark order as completed\n          await supabase\n            .from('supplier_orders')\n            .update({\n              status: 'completed',\n              updated_at: new Date().toISOString(),\n            })\n            .eq('id', order.id);\n\n          results.push({\n            orderId: order.id,\n            itemsProcessed: 0, // Would need to count items\n            stockUpdated: true,\n            notificationSent: true,\n            errors: [],\n          });\n\n          // Extract tracking number from tracking_info JSON if available\n          const trackingNumber = order.tracking_info\n            ? (order.tracking_info as any)?.trackingNumber || 'N/A'\n            : 'N/A';\n\n          inventoryLogger.info(\n            `Successfully processed delivery for order ${order.id} (tracking: ${trackingNumber}) ` +\n              `from ${order.suppliers?.name ?? 'Unknown supplier'}`\n          );\n        } catch (orderError) {\n          inventoryLogger.error(\n            `Error processing delivery for order ${order.id}:`,\n            orderError instanceof Error\n              ? { message: orderError.message, stack: orderError.stack }\n              : { error: String(orderError) }\n          );\n\n          results.push({\n            orderId: order.id,\n            itemsProcessed: 0,\n            stockUpdated: false,\n            notificationSent: false,\n            errors: [\n              orderError instanceof Error\n                ? orderError.message\n                : 'Unknown error',\n            ],\n          });\n        }\n      }\n\n      return results;\n    } catch (error) {\n      inventoryLogger.error(\n        'Error processing incoming deliveries:',\n        error instanceof Error\n          ? { message: error.message, stack: error.stack }\n          : { error: String(error) }\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Run comprehensive inventory health check\n   */\n  async runInventoryHealthCheck(practiceId: string): Promise<{\n    lowStockCount: number;\n    expiredBatchCount: number;\n    expiringBatchCount: number;\n    zeroStockCount: number;\n    overStockCount: number;\n    recommendations: string[];\n  }> {\n    try {\n      inventoryLogger.info(\n        `Running inventory health check for practice ${practiceId}`\n      );\n\n      // Check low stock items\n      const lowStockItems = await this.checkLowStockItems(practiceId);\n      const zeroStockItems = lowStockItems.filter(\n        item => item.currentQuantity <= 0\n      );\n\n      // Check expired batches\n      const { data: expiredBatches } = await supabase\n        .from('product_batches')\n        .select('id')\n        .eq('practice_id', practiceId)\n        .lt('expiry_date', new Date().toISOString().split('T')[0])\n        .eq('status', 'active');\n\n      // Check expiring batches (next 30 days)\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 30);\n\n      const { data: expiringBatches } = await supabase\n        .from('product_batches')\n        .select('id')\n        .eq('practice_id', practiceId)\n        .gte('expiry_date', new Date().toISOString().split('T')[0])\n        .lte('expiry_date', futureDate.toISOString().split('T')[0])\n        .eq('status', 'active');\n\n      // Check overstock items (above maximum quantity)\n      const { data: overStockData } = await supabase\n        .from('stock_levels')\n        .select('id, current_quantity, maximum_quantity')\n        .eq('practice_id', practiceId)\n        .not('maximum_quantity', 'is', null);\n      \n      const overStockItems = (overStockData || []).filter(\n        (item: any) => item.current_quantity > (item.maximum_quantity ?? 0)\n      );\n\n      // Generate recommendations\n      const recommendations = [];\n\n      if (lowStockItems.length > 0) {\n        recommendations.push(\n          `${lowStockItems.length} producten hebben lage voorraad en moeten worden besteld`\n        );\n      }\n\n      if (zeroStockItems.length > 0) {\n        recommendations.push(\n          `${zeroStockItems.length} producten zijn uitverkocht - prioriteit bestelling nodig`\n        );\n      }\n\n      if (expiredBatches?.length) {\n        recommendations.push(\n          `${expiredBatches.length} batches zijn verlopen en moeten worden weggegooid`\n        );\n      }\n\n      if (expiringBatches?.length) {\n        recommendations.push(\n          `${expiringBatches.length} batches verlopen binnen 30 dagen - gebruik eerst`\n        );\n      }\n\n      if (overStockItems?.length) {\n        recommendations.push(\n          `${overStockItems.length} producten hebben overvoorraad - overweeg minder te bestellen`\n        );\n      }\n\n      return {\n        lowStockCount: lowStockItems.length,\n        expiredBatchCount: expiredBatches?.length || 0,\n        expiringBatchCount: expiringBatches?.length || 0,\n        zeroStockCount: zeroStockItems.length,\n        overStockCount: overStockItems?.length || 0,\n        recommendations,\n      };\n    } catch (error) {\n      inventoryLogger.error(\n        'Error running inventory health check:',\n        error instanceof Error\n          ? { message: error.message, stack: error.stack }\n          : { error: String(error) }\n      );\n      throw error;\n    }\n  }\n\n  // Private helper methods\n\n  private calculateUrgencyLevel(\n    currentQuantity: number,\n    minimumQuantity: number,\n    reorderPoint: number\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    if (currentQuantity <= 0) return 'critical';\n    if (currentQuantity <= minimumQuantity / 2) return 'high';\n    if (currentQuantity <= minimumQuantity) return 'medium';\n    if (currentQuantity <= reorderPoint) return 'low';\n    return 'low';\n  }\n\n  private calculateDaysOutOfStock(lastMovementAt: string): number {\n    const lastMovement = new Date(lastMovementAt);\n    const now = new Date();\n    return Math.floor(\n      (now.getTime() - lastMovement.getTime()) / (1000 * 60 * 60 * 24)\n    );\n  }\n\n  private calculateOrderQuantity(\n    currentQuantity: number,\n    minimumQuantity: number,\n    reorderPoint: number\n  ): number {\n    // Order enough to reach double the minimum quantity, or at least the reorder point\n    const targetQuantity = Math.max(minimumQuantity * 2, reorderPoint);\n    return Math.max(targetQuantity - currentQuantity, minimumQuantity);\n  }\n\n  private async createAutomationNotification(\n    practiceId: string,\n    title: string,\n    message: string,\n    type: 'success' | 'warning' | 'error'\n  ): Promise<void> {\n    const priority =\n      type === 'error' ? 'high' : type === 'warning' ? 'normal' : 'low';\n\n    await supabase.from('notifications').insert({\n      practice_id: practiceId,\n      title,\n      message,\n      category: 'system_notification',\n      priority,\n      action_url: '/inventory/levels',\n      action_label: 'Bekijk voorraad',\n    });\n  }\n}\n\n// Export singleton instance\nexport const inventoryAutomationService = new InventoryAutomationService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\magento\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ServiceErrorHandler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2904, 2907], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2904, 2907], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'errorBody' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 169,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 587,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 587,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15145, 15148], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15145, 15148], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 641,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 641,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16749, 16752], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16749, 16752], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 642,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 642,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16804, 16807], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16804, 16807], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Enhanced Magento API service with full implementation\nimport {\n  handleApiError,\n  ServiceErrorHandler,\n  validateRequired,\n} from 'src/utils/service-error-handler';\nimport { supabase } from 'src/services/supabase';\nimport { useAuthStore } from 'src/stores/auth';\nimport type { MagentoConfig } from '@/types/magento';\n\nexport interface MagentoOrder {\n  id: number;\n  increment_id: string;\n  status: string;\n  created_at: string;\n  updated_at: string;\n  grand_total: number;\n  items: MagentoOrderItem[];\n  billing_address?: MagentoAddress;\n  shipping_address?: MagentoAddress;\n  payment?: MagentoPayment;\n}\n\nexport interface MagentoOrderItem {\n  id: number;\n  product_id: number;\n  name: string;\n  sku: string;\n  qty_ordered: number;\n  price: number;\n  product_type: string;\n}\n\nexport interface MagentoAddress {\n  firstname: string;\n  lastname: string;\n  company?: string;\n  street: string[];\n  city: string;\n  region: string;\n  postcode: string;\n  country_id: string;\n  telephone?: string;\n  email?: string;\n}\n\nexport interface MagentoPayment {\n  method: string;\n  amount_ordered: number;\n  currency_code: string;\n  transaction_id?: string;\n  additional_information?: string[];\n}\n\nexport interface MagentoInvoice {\n  id: number;\n  order_id: number;\n  increment_id: string;\n  created_at: string;\n  grand_total: number;\n  state: number;\n  items: MagentoInvoiceItem[];\n}\n\nexport interface MagentoInvoiceItem {\n  id: number;\n  name: string;\n  sku: string;\n  qty: number;\n  price: number;\n}\n\nexport interface MagentoProduct {\n  id: number;\n  sku: string;\n  name: string;\n  price: number;\n  status: number;\n  type_id: string;\n  weight?: number;\n  attribute_set_id: number;\n  custom_attributes?: MagentoCustomAttribute[];\n}\n\nexport interface MagentoCustomAttribute {\n  attribute_code: string;\n  value: string | number | boolean;\n}\n\nexport interface MagentoSearchCriteria {\n  filterGroups?: MagentoFilterGroup[];\n  sortOrders?: MagentoSortOrder[];\n  pageSize?: number;\n  currentPage?: number;\n}\n\nexport interface MagentoFilterGroup {\n  filters: MagentoFilter[];\n}\n\nexport interface MagentoFilter {\n  field: string;\n  value: string | number;\n  condition_type?: string;\n}\n\nexport interface MagentoSortOrder {\n  field: string;\n  direction: 'ASC' | 'DESC';\n}\n\nclass MagentoApiService {\n  private config: MagentoConfig | null = null;\n  private readonly DEFAULT_TIMEOUT = 30000;\n\n  /**\n   * Configure the Magento API service\n   */\n  configure(config: MagentoConfig): void {\n    validateRequired(\n      {\n        baseUrl: config.baseUrl,\n        token: config.token,\n      },\n      {\n        service: 'MagentoApiService',\n        operation: 'configure',\n      }\n    );\n\n    this.config = {\n      ...config,\n      timeout: config.timeout || this.DEFAULT_TIMEOUT,\n      storeCode: config.storeCode || 'default',\n    };\n  }\n\n  private async makeRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<any> {\n    if (!this.config) {\n      throw new Error('Magento API configuration is not initialized');\n    }\n\n    const url = `${this.config.baseUrl}/rest/V1${endpoint}`;\n\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(\n        () => controller.abort(),\n        this.config?.timeout ?? this.DEFAULT_TIMEOUT\n      );\n\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          Authorization: `Bearer ${this.config.token}`,\n          'Content-Type': 'application/json',\n          Store: this.config.storeCode || 'default',\n          ...options.headers,\n        },\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorBody = await response.text();\n        handleApiError(\n          new Error(`HTTP ${response.status}: ${response.statusText}`),\n          {\n            service: 'MagentoApiService',\n            operation: 'makeRequest',\n            metadata: {\n              endpoint,\n              method: options.method || 'GET',\n              status: response.status,\n            },\n          }\n        );\n      }\n\n      return response.json();\n    } catch (error) {\n      const err = error as Error;\n      if (err.name === 'AbortError') {\n        handleApiError(new Error('Request timeout'), {\n          service: 'MagentoApiService',\n          operation: 'makeRequest',\n          metadata: { endpoint, timeout: this.config.timeout },\n        });\n      }\n\n      handleApiError(err, {\n        service: 'MagentoApiService',\n        operation: 'makeRequest',\n        metadata: { endpoint, method: options.method || 'GET' },\n      });\n    }\n  }\n\n  /**\n   * Test the connection to Magento API\n   */\n  async testConnection(): Promise<{ success: boolean; message: string }> {\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        message: 'API not configured',\n      };\n    }\n\n    try {\n      // Test with a simple API call\n      await this.makeRequest('/store/storeConfigs');\n      return {\n        success: true,\n        message: 'Connection successful',\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error instanceof Error ? error.message : 'Connection failed',\n      };\n    }\n  }\n\n  /**\n   * Get connection status with detailed information\n   */\n  async getConnectionStatus(): Promise<{\n    configured: boolean;\n    connected: boolean;\n    message: string;\n    lastTested?: Date;\n  }> {\n    const configured = this.isConfigured();\n\n    if (!configured) {\n      return {\n        configured: false,\n        connected: false,\n        message: 'Not configured',\n      };\n    }\n\n    const connectionTest = await this.testConnection();\n\n    return {\n      configured: true,\n      connected: connectionTest.success,\n      message: connectionTest.message,\n      lastTested: new Date(),\n    };\n  }\n\n  /**\n   * Create search criteria helper\n   */\n  createSearchCriteria(options: {\n    filters?: Array<{\n      field: string;\n      value: string | number;\n      condition?: string;\n    }>;\n    sortBy?: string;\n    sortDirection?: 'ASC' | 'DESC';\n    pageSize?: number;\n    currentPage?: number;\n  }): MagentoSearchCriteria {\n    const criteria: MagentoSearchCriteria = {};\n\n    if (options.filters && options.filters.length > 0) {\n      criteria.filterGroups = [\n        {\n          filters: options.filters.map(filter => ({\n            field: filter.field,\n            value: filter.value,\n            condition_type: filter.condition || 'eq',\n          })),\n        },\n      ];\n    }\n\n    if (options.sortBy) {\n      criteria.sortOrders = [\n        {\n          field: options.sortBy,\n          direction: options.sortDirection || 'ASC',\n        },\n      ];\n    }\n\n    if (options.pageSize) {\n      criteria.pageSize = options.pageSize;\n    }\n\n    if (options.currentPage) {\n      criteria.currentPage = options.currentPage;\n    }\n\n    return criteria;\n  }\n\n  // Order management\n  async getOrders(\n    searchCriteria?: MagentoSearchCriteria\n  ): Promise<MagentoOrder[]> {\n    const endpoint = '/orders';\n    const params: string[] = [];\n    if (searchCriteria) {\n      if (\n        searchCriteria.filterGroups &&\n        searchCriteria.filterGroups.length > 0\n      ) {\n        params.push(\n          `searchCriteria[filter_groups]=${JSON.stringify(\n            searchCriteria.filterGroups\n          )}`\n        );\n      }\n      if (searchCriteria.sortOrders && searchCriteria.sortOrders.length > 0) {\n        params.push(\n          `searchCriteria[sort_orders]=${JSON.stringify(\n            searchCriteria.sortOrders\n          )}`\n        );\n      }\n      if (searchCriteria.pageSize) {\n        params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\n      }\n      if (searchCriteria.currentPage) {\n        params.push(\n          `searchCriteria[current_page]=${searchCriteria.currentPage}`\n        );\n      }\n    }\n    const queryString = params.length > 0 ? `?${params.join('&')}` : '';\n    return this.makeRequest(`${endpoint}${queryString}`);\n  }\n\n  async getOrder(orderId: string): Promise<MagentoOrder | null> {\n    return this.makeRequest(`/orders/${orderId}`);\n  }\n\n  async createOrder(orderData: MagentoOrder): Promise<MagentoOrder> {\n    return this.makeRequest('/orders', {\n      method: 'POST',\n      body: JSON.stringify({ entity: orderData }),\n    });\n  }\n\n  // Invoice management\n  async getInvoices(\n    searchCriteria?: MagentoSearchCriteria\n  ): Promise<MagentoInvoice[]> {\n    const endpoint = '/invoices';\n    const params: string[] = [];\n    if (searchCriteria) {\n      if (\n        searchCriteria.filterGroups &&\n        searchCriteria.filterGroups.length > 0\n      ) {\n        params.push(\n          `searchCriteria[filter_groups]=${JSON.stringify(\n            searchCriteria.filterGroups\n          )}`\n        );\n      }\n      if (searchCriteria.sortOrders && searchCriteria.sortOrders.length > 0) {\n        params.push(\n          `searchCriteria[sort_orders]=${JSON.stringify(\n            searchCriteria.sortOrders\n          )}`\n        );\n      }\n      if (searchCriteria.pageSize) {\n        params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\n      }\n      if (searchCriteria.currentPage) {\n        params.push(\n          `searchCriteria[current_page]=${searchCriteria.currentPage}`\n        );\n      }\n    }\n    const queryString = params.length > 0 ? `?${params.join('&')}` : '';\n    return this.makeRequest(`${endpoint}${queryString}`);\n  }\n\n  async getInvoice(invoiceId: string): Promise<MagentoInvoice | null> {\n    return this.makeRequest(`/invoices/${invoiceId}`);\n  }\n\n  // Product management\n  async getProducts(\n    searchCriteria?: MagentoSearchCriteria\n  ): Promise<MagentoProduct[]> {\n    // If Magento API is configured, try to use it first\n    if (this.isConfigured()) {\n      try {\n        const endpoint = '/products';\n        const params: string[] = [];\n        if (searchCriteria) {\n          if (\n            searchCriteria.filterGroups &&\n            searchCriteria.filterGroups.length > 0\n          ) {\n            params.push(\n              `searchCriteria[filter_groups]=${JSON.stringify(\n                searchCriteria.filterGroups\n              )}`\n            );\n          }\n          if (\n            searchCriteria.sortOrders &&\n            searchCriteria.sortOrders.length > 0\n          ) {\n            params.push(\n              `searchCriteria[sort_orders]=${JSON.stringify(\n                searchCriteria.sortOrders\n              )}`\n            );\n          }\n          if (searchCriteria.pageSize) {\n            params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\n          }\n          if (searchCriteria.currentPage) {\n            params.push(\n              `searchCriteria[current_page]=${searchCriteria.currentPage}`\n            );\n          }\n        }\n        const queryString = params.length > 0 ? `?${params.join('&')}` : '';\n        return this.makeRequest(`${endpoint}${queryString}`);\n      } catch (error) {\n        console.warn(\n          'Magento API failed, falling back to Supabase data:',\n          error\n        );\n      }\n    }\n\n    // Fallback to Supabase data\n    return magentoDataService.getProducts();\n  }\n\n  async getProduct(sku: string): Promise<MagentoProduct | null> {\n    // Try Magento API first, fallback to Supabase\n    if (this.isConfigured()) {\n      try {\n        return this.makeRequest(`/products/${encodeURIComponent(sku)}`);\n      } catch (error) {\n        console.warn(\n          'Magento API failed for single product, checking Supabase:',\n          error\n        );\n      }\n    }\n\n    // Fallback: search in Supabase products\n    const products = await magentoDataService.getProducts();\n    return products.find(p => p.sku === sku) || null;\n  }\n\n  // Utility methods\n  isConfigured(): boolean {\n    return !!(this.config?.baseUrl && this.config?.token);\n  }\n}\n\n// Export singleton instance\nexport const magentoApi = new MagentoApiService();\n\n// Utility functions for Magento integration\nexport const magentoUtils = {\n  formatOrderStatus(status: string): string {\n    const statusMap: Record<string, string> = {\n      pending: 'In behandeling',\n      processing: 'Wordt verwerkt',\n      shipped: 'Verzonden',\n      complete: 'Voltooid',\n      canceled: 'Geannuleerd',\n      refunded: 'Terugbetaald',\n    };\n\n    return statusMap[status] || status;\n  },\n\n  formatPrice(price: number): string {\n    return new Intl.NumberFormat('nl-NL', {\n      style: 'currency',\n      currency: 'EUR',\n    }).format(price);\n  },\n\n  formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString('nl-NL');\n  },\n};\n\n// Real data service for Magento-compatible queries\nexport const magentoDataService = {\n  /**\n   * Get orders from Supabase in Magento-compatible format\n   */\n  async getOrders(practiceId?: string): Promise<MagentoOrder[]> {\n    const authStore = useAuthStore();\n    const currentPracticeId = practiceId || authStore.clinicId;\n\n    if (!currentPracticeId) {\n      throw new Error('No practice ID available');\n    }\n\n    try {\n      const { data: orders, error } = await supabase\n        .from('orders')\n        .select(\n          `\n          *,\n          order_items (\n            *,\n            products (*)\n          )\n        `\n        )\n        .eq('practice_id', currentPracticeId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      return (\n        orders?.map(order => ({\n          id: parseInt(order.id) || 0,\n          increment_id: order.order_number || `ORD-${order.id}`,\n          status: this.mapOrderStatus(order.status ?? 'draft'),\n          created_at: order.created_at ?? new Date().toISOString(),\n          updated_at: order.updated_at ?? new Date().toISOString(),\n          grand_total:\n            order.order_items?.reduce(\n              (sum, item) => sum + (item.total_price || 0),\n              0\n            ) || 0,\n          items:\n            order.order_items?.map(item => ({\n              id: parseInt(item.id) || 0,\n              product_id: parseInt(item.product_id) || 0,\n              name: item.products?.name || '',\n              sku: item.products?.sku || '',\n              qty_ordered: item.quantity,\n              price: item.unit_price || 0,\n              product_type: 'simple',\n            })) || [],\n        })) || []\n      );\n    } catch (error) {\n      console.error('Error fetching orders for Magento:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Get products from Supabase in Magento-compatible format\n   */\n  async getProducts(practiceId?: string): Promise<MagentoProduct[]> {\n    const authStore = useAuthStore();\n    const currentPracticeId = practiceId || authStore.clinicId;\n\n    if (!currentPracticeId) {\n      throw new Error('No practice ID available');\n    }\n\n    try {\n      const { data: products, error } = await supabase\n        .from('products')\n        .select('*')\n        .eq('active', true)\n        .order('name');\n\n      if (error) throw error;\n\n      return (\n        products?.map(product => ({\n          id: parseInt(product.id) || 0,\n          sku: product.sku || '',\n          name: product.name || '',\n          price: parseFloat(String((product as any).unit_price || 0)),\n          status: product.active ? 1 : 0,\n          type_id: 'simple',\n        })) || []\n      ) as MagentoProduct[];\n    } catch (error) {\n      console.error('Error fetching products for Magento:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Get invoices from order_items joined with orders in Magento-compatible format\n   */\n  async getInvoices(practiceId?: string): Promise<MagentoInvoice[]> {\n    const authStore = useAuthStore();\n    const currentPracticeId = practiceId || authStore.clinicId;\n\n    if (!currentPracticeId) {\n      throw new Error('No practice ID available');\n    }\n\n    try {\n      const { data: orders, error } = await supabase\n        .from('orders')\n        .select(\n          `\n          *,\n          order_items (\n            *\n          )\n        `\n        )\n        .eq('practice_id', currentPracticeId)\n        .in('status', ['completed', 'delivered', 'invoiced'])\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      return (\n        orders?.map(order => ({\n          id: parseInt(order.id) || 0,\n          order_id: parseInt(order.id) || 0,\n          increment_id: `INV-${order.order_number || order.id}`,\n          created_at: order.updated_at || order.created_at || new Date().toISOString(),\n          grand_total:\n            order.order_items?.reduce(\n              (sum, item) => sum + (item.total_price || 0),\n              0\n            ) || 0,\n          state: 1,\n          items:\n            order.order_items?.map(item => ({\n              id: parseInt(item.id) || 0,\n              name: (item as any).products?.name || '',\n              sku: (item as any).products?.sku || '',\n              qty: item.quantity,\n              price: item.unit_price || 0,\n            })) || [],\n        })) || []\n      );\n    } catch (error) {\n      console.error('Error fetching invoices for Magento:', error);\n      return [];\n    }\n  },\n\n  /**\n   * Map internal order status to Magento-compatible status\n   */\n  mapOrderStatus(status: string): string {\n    const statusMap: Record<string, string> = {\n      draft: 'pending',\n      submitted: 'processing',\n      confirmed: 'processing',\n      shipped: 'shipped',\n      delivered: 'complete',\n      completed: 'complete',\n      cancelled: 'canceled',\n      refunded: 'refunded',\n    };\n    return statusMap[status] || 'pending';\n  },\n};\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\magicInvites.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2095, 2098], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2095, 2098], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 373,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 373,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11807, 11810], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11807, 11810], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'inviteId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 401,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 401,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12880, 12883], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12880, 12883], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 446,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 446,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13776, 13779], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13776, 13779], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\nimport type { Json } from '../types/supabase';\nimport type { Tables } from '../types/supabase.generated';\nimport { v4 as uuidv4 } from 'uuid';\n\n// 🎭 REVOLUTIONARY MAGIC INVITE SERVICE\n// The most innovative user management system ever created!\n\n// Boundary mapper: Supabase row → MagicInvite DTO\nfunction mapMagicInviteRow(row: Tables<'magic_invites'>): MagicInvite {\n  return {\n    id: row.id,\n    practice_id: row.practice_id,\n    magic_code: row.magic_code,\n    emoji_sequence: row.emoji_sequence ?? '',\n    color_theme: row.color_theme ?? '#3B82F6',\n    practice_avatar_seed: row.practice_avatar_seed ?? '',\n    target_role: row.target_role ?? 'member',\n    department: row.department ?? undefined,\n    location_access: (row.location_access as string[]) ?? [],\n    allow_guest_mode: row.allow_guest_mode ?? false,\n    guest_session_hours: row.guest_session_hours ?? 24,\n    auto_upgrade_to_member: row.auto_upgrade_to_member ?? false,\n    ai_role_suggestions: row.ai_role_suggestions,\n    contextual_welcome_message: row.contextual_welcome_message ?? undefined,\n    suggested_avatar_style: row.suggested_avatar_style ?? 'default',\n    qr_code_data: row.qr_code_data ?? undefined,\n    whatsapp_link: row.whatsapp_link ?? undefined,\n    deep_link: row.deep_link ?? '',\n    expires_at: row.expires_at ?? undefined,\n    max_uses: row.max_uses ?? 1,\n    current_uses: row.current_uses ?? 0,\n    auto_regenerate: row.auto_regenerate ?? false,\n    welcome_achievement: row.welcome_achievement ?? '',\n    onboarding_quest_enabled: row.onboarding_quest_enabled ?? false,\n    progress_rewards: row.progress_rewards,\n    created_by: row.created_by ?? '',\n    used_by: (row.used_by as string[]) ?? [],\n    shared_via: (row.shared_via as string[]) ?? [],\n    view_count: row.view_count ?? 0,\n    conversion_rate: row.conversion_rate ?? 0,\n    last_used_at: row.last_used_at ?? undefined,\n    created_at: row.created_at ?? '',\n    updated_at: row.updated_at ?? '',\n  };\n}\n\n// Boundary mapper: Supabase row → GuestSession DTO\nfunction mapGuestSessionRow(row: any): GuestSession {\n  // Note: GuestSession interface doesn't match guest_sessions table 1:1\n  // This is a best-effort mapping; consider updating the interface\n  return row as GuestSession;\n}\n\nexport interface MagicInvite {\n  id: string;\n  practice_id: string;\n  magic_code: string;\n  emoji_sequence: string;\n  color_theme: string;\n  practice_avatar_seed: string;\n  target_role: string;\n  department?: string;\n  location_access: string[];\n  allow_guest_mode: boolean;\n  guest_session_hours: number;\n  auto_upgrade_to_member: boolean;\n  ai_role_suggestions: Json;\n  contextual_welcome_message?: string;\n  suggested_avatar_style: string;\n  qr_code_data?: string;\n  whatsapp_link?: string;\n  deep_link: string;\n  expires_at?: string;\n  max_uses: number;\n  current_uses: number;\n  auto_regenerate: boolean;\n  welcome_achievement: string;\n  onboarding_quest_enabled: boolean;\n  progress_rewards: Json;\n  created_by: string;\n  used_by: string[];\n  shared_via: string[];\n  view_count: number;\n  conversion_rate: number;\n  last_used_at?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface GuestSession {\n  id: string;\n  magic_invite_id: string;\n  practice_id: string;\n  guest_name: string;\n  display_emoji: string;\n  session_color: string;\n  session_token: string;\n  expires_at: string;\n  is_active: boolean;\n  can_extend: boolean;\n  granted_permissions: Json;\n  accessible_locations: string[];\n  restricted_features: string[];\n  device_fingerprint: string;\n  ip_address: unknown;\n  user_agent: string;\n  timezone: string;\n  actions_performed: Json;\n  achievements_unlocked: string[];\n  upgrade_prompts_shown: number;\n  showed_upgrade_interest: boolean;\n  upgrade_trigger_action?: string;\n  converted_to_user_id?: string;\n  created_at: string;\n  updated_at: string;\n  last_activity_at: string;\n}\n\nexport interface CreateMagicInviteRequest {\n  practice_id: string;\n  target_role: string;\n  department?: string;\n  location_access?: string[];\n  max_uses?: number;\n  guest_session_hours?: number;\n  allow_guest_mode?: boolean;\n  emoji_sequence?: string;\n  color_theme?: string;\n  expires_in_days?: number;\n}\n\nexport interface CreateGuestSessionRequest {\n  magic_invite_id: string;\n  guest_name: string;\n  display_emoji?: string;\n  device_fingerprint: string;\n  ip_address?: string;\n  user_agent?: string;\n  timezone?: string;\n}\n\nexport class MagicInviteService {\n  // 🎨 GENERATE VISUAL MAGIC CODE\n  static async generateMagicCode(\n    practiceName: string,\n    department?: string,\n    style: 'friendly' | 'professional' | 'playful' = 'friendly'\n  ): Promise<string> {\n    try {\n      const { data, error } = await supabase.rpc('generate_magic_code', {\n        practice_name: practiceName,\n        department: department ?? undefined,\n        style,\n      });\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error generating magic code:', error);\n      // Fallback generation\n      const emojis = ['🏥', '💊', '🦷', '👩‍⚕️', '🔬', '🩺', '💉', '⚕️'];\n      const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\n      const cityPart = practiceName\n        .replace(/[^a-zA-Z]/g, '')\n        .toUpperCase()\n        .substring(0, 8);\n      const year = new Date().getFullYear();\n      return `${randomEmoji}${cityPart}✨${year}`;\n    }\n  }\n\n  // ✨ CREATE MAGIC INVITE\n  static async createMagicInvite(\n    request: CreateMagicInviteRequest\n  ): Promise<MagicInvite> {\n    try {\n      // Generate the magic code\n      const magicCode = await this.generateMagicCode(\n        'PRACTICE', // We'll get the actual practice name from the database\n        request.department\n      );\n\n      const inviteData = {\n        id: uuidv4(),\n        practice_id: request.practice_id,\n        magic_code: magicCode,\n        emoji_sequence: request.emoji_sequence || '🏥✨',\n        color_theme: request.color_theme || 'blue',\n        practice_avatar_seed: uuidv4().substring(0, 8),\n        target_role: request.target_role,\n        department: request.department,\n        location_access: request.location_access || [],\n        allow_guest_mode: request.allow_guest_mode ?? true,\n        guest_session_hours: request.guest_session_hours || 8,\n        auto_upgrade_to_member: false,\n        ai_role_suggestions: {},\n        suggested_avatar_style: 'medical',\n        deep_link: `remcura://join/${magicCode}`,\n        expires_at: request.expires_in_days\n          ? new Date(\n              Date.now() + request.expires_in_days * 24 * 60 * 60 * 1000\n            ).toISOString()\n          : null,\n        max_uses: request.max_uses || 1,\n        current_uses: 0,\n        auto_regenerate: false,\n        welcome_achievement: 'practice_explorer',\n        onboarding_quest_enabled: true,\n        progress_rewards: {},\n        used_by: [],\n        shared_via: [],\n        view_count: 0,\n        conversion_rate: 0,\n      };\n\n      const { data, error } = await supabase\n        .from('magic_invites')\n        .insert([inviteData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Generate QR code and WhatsApp link\n      await this.updateInviteLinks(data.id, magicCode);\n\n      return mapMagicInviteRow(data);\n    } catch (error) {\n      console.error('Error creating magic invite:', error);\n      throw new Error('Failed to create magic invite');\n    }\n  }\n\n  // 🔗 UPDATE INVITE LINKS (QR & WhatsApp)\n  static async updateInviteLinks(\n    inviteId: string,\n    magicCode: string\n  ): Promise<void> {\n    try {\n      const qrCodeData = `https://app.remcura.com/join/${magicCode}`;\n      const whatsappLink = `https://wa.me/?text=${encodeURIComponent(\n        `🏥 Je bent uitgenodigd voor Remcura!\\n\\nGebruik deze magische code: ${magicCode}\\n\\nDirect toegang: ${qrCodeData}`\n      )}`;\n\n      await supabase\n        .from('magic_invites')\n        .update({\n          qr_code_data: qrCodeData,\n          whatsapp_link: whatsappLink,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', inviteId);\n    } catch (error) {\n      console.error('Error updating invite links:', error);\n    }\n  }\n\n  // 🔍 VALIDATE MAGIC CODE\n  static async validateMagicCode(\n    magicCode: string\n  ): Promise<MagicInvite | null> {\n    try {\n      // Alternative approach: use any to completely bypass TypeScript issues\n      const query = supabase.from('magic_invites');\n      const result = await query\n        .select('*')\n        .eq('magic_code', magicCode)\n        .eq('is_active', true)\n        .maybeSingle();\n\n      const { data, error } = result;\n\n      if (error || !data) {\n        return null;\n      }\n\n      // Manual validation of complex conditions that were causing TypeScript issues\n      const currentTime = new Date();\n      const isNotExpired =\n        !data.expires_at || new Date(data.expires_at) > currentTime;\n      const hasUsesLeft = (data.max_uses || 0) > (data.current_uses || 0);\n\n      if (!isNotExpired || !hasUsesLeft) {\n        return null;\n      }\n\n      // Track view\n      await this.trackInviteView(data.id);\n\n      return data as MagicInvite;\n    } catch (error) {\n      console.error('Error validating magic code:', error);\n      return null;\n    }\n  }\n\n  // 🔄 INCREMENT INVITE USAGE\n  static async incrementInviteUsage(inviteId: string): Promise<void> {\n    try {\n      // First get the current uses count\n      const { data: currentInvite } = await supabase\n        .from('magic_invites')\n        .select('current_uses')\n        .eq('id', inviteId)\n        .single();\n\n      const newUses = (currentInvite?.current_uses || 0) + 1;\n\n      const { error } = await supabase\n        .from('magic_invites')\n        .update({\n          current_uses: newUses,\n          last_used_at: new Date().toISOString(),\n        })\n        .eq('id', inviteId);\n\n      if (error) {\n        console.error('Error incrementing invite usage:', error);\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error updating invite usage:', error);\n      throw error;\n    }\n  }\n\n  // 🎮 CREATE GUEST SESSION\n  static async createGuestSession(\n    request: CreateGuestSessionRequest\n  ): Promise<GuestSession> {\n    try {\n      // Generate unique session token\n      const sessionToken = uuidv4();\n\n      // Get invite details\n      const { data: invite } = await supabase\n        .from('magic_invites')\n        .select('*')\n        .eq('id', request.magic_invite_id)\n        .single();\n      if (!invite) throw new Error('Invalid invite');\n\n      const sessionData = {\n        id: uuidv4(),\n        magic_invite_id: request.magic_invite_id,\n        practice_id: invite.practice_id,\n        guest_name: request.guest_name,\n        display_emoji: request.display_emoji || '👤',\n        session_color: this.generateSessionColor(),\n        session_token: sessionToken,\n        expires_at: new Date(\n          Date.now() + (invite.guest_session_hours ?? 24) * 60 * 60 * 1000\n        ).toISOString(),\n        is_active: true,\n        can_extend: true,\n        granted_permissions: this.getGuestPermissions(invite.target_role ?? 'guest'),\n        accessible_locations: invite.location_access,\n        restricted_features: this.getRestrictedFeatures(invite.target_role ?? 'guest'),\n        device_fingerprint: request.device_fingerprint,\n        ip_address: request.ip_address || '',\n        user_agent: request.user_agent || '',\n        timezone: request.timezone || 'UTC',\n        actions_performed: {},\n        achievements_unlocked: [invite.welcome_achievement],\n        upgrade_prompts_shown: 0,\n        showed_upgrade_interest: false,\n        last_activity_at: new Date().toISOString(),\n      };\n\n      const { data, error } = await supabase\n        .from('guest_sessions')\n        .insert([sessionData as any])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Update invite usage\n      await this.incrementInviteUsage(request.magic_invite_id);\n\n      // Track conversion\n      await this.trackInviteAnalytics(\n        request.magic_invite_id,\n        invite.practice_id,\n        'guest_join',\n        {\n          guest_name: request.guest_name,\n          session_id: data.id,\n        }\n      );\n\n      return mapGuestSessionRow(data);\n    } catch (error) {\n      console.error('Error creating guest session:', error);\n      throw new Error('Failed to create guest session');\n    }\n  }\n\n  // 📊 ANALYTICS & TRACKING\n  static async trackInviteView(inviteId: string): Promise<void> {\n    try {\n      // TODO: Implement analytics tracking when the increment_invite_views RPC function is created\n      // Tracking invite view\n    } catch (error) {\n      console.error('Error tracking invite view:', error);\n    }\n  }\n\n  static async trackInviteAnalytics(\n    inviteId: string,\n    practiceId: string,\n    eventType: string,\n    eventData: Record<string, any> = {}\n  ): Promise<void> {\n    try {\n      // Invite analytics now handled by usage_analytics table\n      await supabase.from('usage_analytics').insert([\n        {\n          practice_id: practiceId,\n          event_type: `invite_${eventType}`,\n          event_data: { magic_invite_id: inviteId, ...eventData },\n          user_agent: navigator.userAgent,\n          device_type: this.getDeviceType(),\n          created_at: new Date().toISOString(),\n        },\n      ]);\n    } catch (error) {\n      console.error('Error tracking analytics:', error);\n    }\n  }\n\n  // 🎨 HELPER METHODS\n  static generateSessionColor(): string {\n    const colors = [\n      '#2196F3',\n      '#4CAF50',\n      '#FF9800',\n      '#9C27B0',\n      '#F44336',\n      '#009688',\n    ];\n    return colors[Math.floor(Math.random() * colors.length)] ?? '#2196F3';\n  }\n\n  static getGuestPermissions(role: string): Record<string, any> {\n    const basePermissions = {\n      view_inventory: true,\n      view_products: true,\n      view_locations: true,\n    };\n\n    switch (role) {\n      case 'admin':\n        return {\n          ...basePermissions,\n          edit_inventory: true,\n          manage_orders: true,\n          view_analytics: true,\n        };\n      case 'member':\n        return {\n          ...basePermissions,\n          edit_inventory: true,\n          create_orders: true,\n        };\n      default:\n        return basePermissions;\n    }\n  }\n\n  static getRestrictedFeatures(role: string): string[] {\n    const commonRestrictions = [\n      'user_management',\n      'system_settings',\n      'billing',\n    ];\n\n    switch (role) {\n      case 'guest':\n        return [...commonRestrictions, 'delete_data', 'export_data'];\n      case 'member':\n        return [...commonRestrictions, 'delete_data'];\n      default:\n        return commonRestrictions;\n    }\n  }\n\n  static getDeviceType(): string {\n    const userAgent = navigator.userAgent.toLowerCase();\n    if (userAgent.includes('mobile')) {\n      return 'mobile';\n    }\n    if (userAgent.includes('tablet')) {\n      return 'tablet';\n    }\n    return 'desktop';\n  }\n\n  // 📱 GET ACTIVE SESSIONS\n  static async getActiveSessions(practiceId: string): Promise<GuestSession[]> {\n    try {\n      const { data, error } = await supabase\n        .from('guest_sessions')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .eq('is_active', true)\n        .gt('expires_at', new Date().toISOString())\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return (data || []).map(mapGuestSessionRow);\n    } catch (error) {\n      console.error('Error getting active sessions:', error);\n      return [];\n    }\n  }\n\n  // 🔄 EXTEND GUEST SESSION\n  static async extendGuestSession(\n    sessionId: string,\n    additionalHours: number = 4\n  ): Promise<void> {\n    try {\n      const newExpiryTime = new Date(\n        Date.now() + additionalHours * 60 * 60 * 1000\n      ).toISOString();\n\n      await supabase\n        .from('guest_sessions')\n        .update({\n          expires_at: newExpiryTime,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', sessionId);\n    } catch (error) {\n      console.error('Error extending guest session:', error);\n      throw new Error('Failed to extend session');\n    }\n  }\n\n  // 🎯 GET PRACTICE INVITES\n  static async getPracticeInvites(practiceId: string): Promise<MagicInvite[]> {\n    try {\n      const { data, error } = await supabase\n        .from('magic_invites')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return (data || []).map(mapMagicInviteRow);\n    } catch (error) {\n      console.error('Error getting practice invites:', error);\n      return [];\n    }\n  }\n}\n\nexport default MagicInviteService;\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\monitoring.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'createStructuredLogger' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 232,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 232,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6301, 6304], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6301, 6304], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Monitoring and Error Tracking Service\n * Placeholder for production monitoring tools like Sentry, LogRocket, etc.\n */\n\nimport type { Router } from 'vue-router';\nimport { logger } from '@/utils/logger';\n\ntype StructuredLogger = ReturnType<typeof logger.createContext>;\n\nconst createStructuredLogger = (context: string) => {\n  const base = logger.createContext(context);\n  return {\n    info: (message: string, data?: Record<string, unknown>) =>\n      data ? base.structured(message, data) : base.info(message),\n    warn: (message: string, data?: Record<string, unknown>) =>\n      data ? base.structured(message, data) : base.warn(message),\n    error: (message: string, data?: Record<string, unknown>) =>\n      data ? base.structured(message, data) : base.error(message),\n  } as StructuredLogger;\n};\n\nexport interface MonitoringConfig {\n  dsn?: string;\n  environment: 'development' | 'staging' | 'production';\n  userId?: string;\n  version: string;\n}\n\nexport interface ErrorContext {\n  userId?: string;\n  userAgent?: string;\n  url?: string;\n  timestamp: string;\n  sessionId?: string;\n}\n\ninterface TrackingProperties {\n  [key: string]: string | number | boolean | undefined;\n}\n\nclass MonitoringService {\n  private config: MonitoringConfig | null = null;\n  private isInitialized = false;\n  private router: Router | null = null;\n\n  async initialize(config: MonitoringConfig, router?: Router): Promise<void> {\n    this.config = config;\n    this.router = router ?? null;\n\n    if (config.environment === 'production') {\n      await this.initializeSentry(config);\n    }\n\n    this.isInitialized = true;\n  }\n\n  captureError(error: Error, context?: ErrorContext): void {\n    if (!this.isInitialized || !this.config) {\n      // eslint-disable-next-line no-console\n      console.error('Monitoring service not initialized', error);\n      return;\n    }\n\n    if (this.config.environment !== 'production') {\n      // eslint-disable-next-line no-console\n      console.error('Captured error:', error, context);\n    }\n\n    if (this.config.environment === 'production') {\n      void this.sendToSentry(error, context);\n    }\n  }\n\n  private async sendToSentry(\n    error: Error,\n    context?: ErrorContext\n  ): Promise<void> {\n    if (!this.config) {\n      return;\n    }\n\n    try {\n      const Sentry = await import('@sentry/vue');\n\n      Sentry.withScope(scope => {\n        if (context?.userId) {\n          scope.setUser({ id: context.userId });\n        }\n\n        scope.setTag('environment', this.config?.environment ?? 'unknown');\n        scope.setContext('error_context', {\n          url:\n            context?.url ??\n            (typeof window !== 'undefined' ? window.location.href : undefined),\n          userAgent:\n            context?.userAgent ??\n            (typeof navigator !== 'undefined'\n              ? navigator.userAgent\n              : undefined),\n          timestamp: context?.timestamp ?? new Date().toISOString(),\n          sessionId: context?.sessionId,\n        });\n\n        Sentry.captureException(error);\n      });\n    } catch (sentryError) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to send error to Sentry:', sentryError);\n    }\n  }\n\n  trackEvent(eventName: string, properties?: TrackingProperties): void {\n    if (!this.isInitialized || !this.config) {\n      return;\n    }\n\n    if (this.config.environment !== 'production') {\n      // eslint-disable-next-line no-console\n      console.debug('Tracking event:', eventName, properties);\n    }\n\n    // Hook for production analytics services\n  }\n\n  setUserContext(user: { id: string; email?: string; role?: string }): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    if (this.config?.environment === 'production') {\n      void this.setSentryUser(user);\n    }\n  }\n\n  private async setSentryUser(user: {\n    id: string;\n    email?: string;\n    role?: string;\n  }): Promise<void> {\n    try {\n      const Sentry = await import('@sentry/vue');\n\n      const sentryUser: { id: string; email?: string; role?: string } = {\n        id: user.id,\n      };\n      if (user.email) {\n        sentryUser.email = user.email;\n      }\n      if (user.role) {\n        sentryUser.role = user.role;\n      }\n\n      Sentry.setUser(sentryUser);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to set Sentry user:', error);\n    }\n  }\n\n  addBreadcrumb(\n    message: string,\n    category?: string,\n    level?: 'info' | 'warning' | 'error'\n  ): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    if (this.config?.environment === 'production') {\n      void this.addSentryBreadcrumb(message, category, level);\n    }\n  }\n\n  private async addSentryBreadcrumb(\n    message: string,\n    category?: string,\n    level?: 'info' | 'warning' | 'error'\n  ): Promise<void> {\n    try {\n      const Sentry = await import('@sentry/vue');\n      Sentry.addBreadcrumb({\n        message,\n        category: category ?? 'custom',\n        level: level ?? 'info',\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to add Sentry breadcrumb:', error);\n    }\n  }\n\n  trackPerformance(metric: string, value: number, unit?: string): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    if (this.config?.environment !== 'production') {\n      // eslint-disable-next-line no-console\n      console.debug('Performance metric:', { metric, value, unit });\n    }\n  }\n\n  private async initializeSentry(config: MonitoringConfig): Promise<void> {\n    if (!config.dsn) {\n      // eslint-disable-next-line no-console\n      console.warn('Sentry DSN not provided for production environment');\n      return;\n    }\n\n    try {\n      const Sentry = await import('@sentry/vue');\n\n      const integrations: unknown[] = [];\n\n      try {\n        const { browserTracingIntegration } = await import('@sentry/vue');\n        integrations.push(\n          browserTracingIntegration({\n            router: this.router ?? undefined,\n          })\n        );\n      } catch (tracingError) {\n        // eslint-disable-next-line no-console\n        console.warn('Browser tracing not available:', tracingError);\n      }\n\n      Sentry.init({\n        dsn: config.dsn,\n        environment: config.environment,\n        release: config.version,\n        integrations: integrations as any,\n        tracesSampleRate: config.environment === 'production' ? 0.1 : 1.0,\n        beforeSend(event) {\n          if (config.environment !== 'production') {\n            return event;\n          }\n\n          const exception = event?.exception?.values?.[0]?.value ?? '';\n          if (\n            typeof exception === 'string' &&\n            exception.includes('Non-Error')\n          ) {\n            return null;\n          }\n\n          return event;\n        },\n      });\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to initialize Sentry:', error);\n    }\n  }\n}\n\nexport const monitoringService = new MonitoringService();\n\nexport async function initializeMonitoring(router?: Router): Promise<void> {\n  const config: MonitoringConfig = {\n    environment: import.meta.env.PROD ? 'production' : 'development',\n    version: '1.0.0',\n    ...(import.meta.env.VITE_SENTRY_DSN\n      ? { dsn: import.meta.env.VITE_SENTRY_DSN }\n      : {}),\n  };\n\n  await monitoringService.initialize(config, router);\n}\n\nexport const captureStructuredError = (\n  error: Error,\n  metadata: Record<string, unknown> = {}\n): void => {\n  monitoringService.captureError(error, {\n    timestamp: new Date().toISOString(),\n    ...metadata,\n  });\n};\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\notifications.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4976, 4979], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4976, 4979], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6465, 6468], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6465, 6468], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 275,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 275,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7494, 7497], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7494, 7497], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 348,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 348,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9383, 9386], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9383, 9386], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 373,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 373,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9957, 9960], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9957, 9960], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/services/supabase';\nimport type {\n  NotificationSettings,\n  NotificationSettingsInsert,\n  NotificationChannel,\n  NotificationType,\n} from '@/types/supabase';\nimport { useAuthStore } from '@/stores/auth';\nimport { notificationLogger } from 'src/utils/logger';\nimport { ref, reactive } from 'vue';\nimport type { NotificationMessage } from '@/types/notifications';\n\nexport class NotificationService {\n  private registration: ServiceWorkerRegistration | null = null;\n  private inAppNotifications = ref<NotificationMessage[]>([]);\n  private settings = reactive<Record<string, NotificationSettings>>({});\n\n  constructor() {\n    this.initializeServiceWorker();\n    this.loadNotificationSettings();\n  }\n\n  /**\n   * Initialize service worker for push notifications\n   */\n  private async initializeServiceWorker() {\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\n      try {\n        this.registration = await navigator.serviceWorker.register('/sw.js');\n        notificationLogger.info(\n          'Service Worker registered',\n          { registration: this.registration?.scope ?? 'unknown' }\n        );\n      } catch (error) {\n        notificationLogger.error('Service Worker registration failed', error as Record<string, unknown>);\n      }\n    }\n  }\n\n  /**\n   * Request push notification permission\n   */\n  async requestNotificationPermission(): Promise<NotificationPermission> {\n    if (!('Notification' in window)) {\n      throw new Error('This browser does not support notifications');\n    }\n\n    const permission = await Notification.requestPermission();\n\n    if (permission === 'granted') {\n      await this.subscribeToPushNotifications();\n    }\n\n    return permission;\n  }\n\n  /**\n   * Subscribe to push notifications\n   */\n  async subscribeToPushNotifications(): Promise<PushSubscription | null> {\n    if (!this.registration) {\n      throw new Error('Service worker not registered');\n    }\n\n    try {\n      // You would need to replace this with your actual VAPID public key\n      const vapidPublicKey = 'your-vapid-public-key';\n\n      const subscription = await this.registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: this.urlBase64ToUint8Array(vapidPublicKey),\n      });\n\n      // Store subscription in database\n      await this.storePushSubscription(subscription);\n\n      return subscription;\n    } catch (error) {\n      notificationLogger.error(\n        'Failed to subscribe to push notifications',\n        error as Record<string, unknown>\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Store push subscription in database\n   */\n  private async storePushSubscription(\n    subscription: PushSubscription\n  ): Promise<void> {\n    const authStore = useAuthStore();\n    const user = authStore.user;\n\n    if (!user) {\n      return;\n    }\n\n    const endpoint = subscription.endpoint;\n    const keys = subscription.getKey\n      ? {\n          p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')),\n          auth: this.arrayBufferToBase64(subscription.getKey('auth')),\n        }\n      : null;\n\n    const tokenData = {\n      user_id: user.id,\n      token: JSON.stringify({ endpoint, keys }),\n      platform: 'web',\n      is_active: true,\n    };\n\n    // TODO: Implement push_tokens functionality when push notifications are activated\n    notificationLogger.info(\n      'Push subscription stored (placeholder):',\n      tokenData\n    );\n  }\n\n  /**\n   * Send in-app notification\n   */\n  showInAppNotification(notification: NotificationMessage): void {\n    const id = crypto.randomUUID();\n    const notificationWithId = { ...notification, id };\n\n    this.inAppNotifications.value.unshift(notificationWithId);\n\n    // Auto-remove after 5 seconds unless requireInteraction is true\n    if (!notification.requireInteraction) {\n      setTimeout(() => {\n        this.removeInAppNotification(id);\n      }, 5000);\n    }\n  }\n\n  /**\n   * Remove in-app notification\n   */\n  removeInAppNotification(id: string): void {\n    const index = this.inAppNotifications.value.findIndex(n => n.id === id);\n    if (index !== -1) {\n      this.inAppNotifications.value.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all in-app notifications\n   */\n  clearAllInAppNotifications(): void {\n    this.inAppNotifications.value = [];\n  }\n\n  /**\n   * Get in-app notifications\n   */\n  getInAppNotifications() {\n    return this.inAppNotifications;\n  }\n\n  /**\n   * Send browser notification\n   */\n  async showBrowserNotification(\n    notification: NotificationMessage\n  ): Promise<void> {\n    if (Notification.permission !== 'granted') {\n      return;\n    }\n\n    const options: NotificationOptions = {\n      body: notification.body,\n      icon: notification.icon || '/icons/icon-192x192.png',\n      badge: notification.badge || '/icons/icon-192x192.png',\n      tag: notification.tag,\n      requireInteraction: notification.requireInteraction,\n      data: notification.data,\n      actions: notification.actions,\n    } as any; // actions is not standard NotificationOptions\n\n    new Notification(notification.title, options);\n  }\n\n  /**\n   * Send push notification (server-side would call this)\n   */\n  async sendPushNotification(\n    userId: string,\n    notification: NotificationMessage\n  ): Promise<void> {\n    // In a real implementation, this would be called from your backend\n    // Here we simulate it by showing a browser notification\n    const authStore = useAuthStore();\n    if (authStore.user?.id === userId) {\n      await this.showBrowserNotification(notification);\n    }\n  }\n\n  /**\n   * Load notification settings for current user\n   */\n  async loadNotificationSettings(): Promise<void> {\n    const authStore = useAuthStore();\n    const user = authStore.user;\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!user || !practiceId) {\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('notification_settings')\n      .select('*')\n      .eq('user_id', user.id)\n      .eq('practice_id', practiceId);\n\n    if (error) {\n      notificationLogger.error('Failed to load notification settings:', error);\n      return;\n    }\n\n    data?.forEach(setting => {\n      const key = `${setting.notification_type}_${setting.channel}`;\n      this.settings[key] = setting;\n    });\n  }\n\n  /**\n   * Update notification settings\n   */\n  async updateNotificationSetting(\n    notificationType: NotificationType,\n    channel: NotificationChannel,\n    isEnabled: boolean,\n    settings?: any\n  ): Promise<void> {\n    const authStore = useAuthStore();\n    const user = authStore.user;\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!user || !practiceId) {\n      return;\n    }\n\n    const settingData: NotificationSettingsInsert = {\n      user_id: user.id,\n      practice_id: practiceId,\n      notification_type: notificationType,\n      channel,\n      is_enabled: isEnabled,\n      settings: settings || {},\n    };\n\n    const { error } = await supabase\n      .from('notification_settings')\n      .upsert(settingData, {\n        onConflict: 'user_id,practice_id,notification_type,channel',\n        ignoreDuplicates: false,\n      });\n\n    if (error) {\n      notificationLogger.error('Failed to update notification setting:', error);\n      return;\n    }\n\n    // Update local cache\n    const key = `${notificationType}_${channel}`;\n    this.settings[key] = {\n      ...settingData,\n      id: crypto.randomUUID(),\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    } as any;\n  }\n\n  /**\n   * Check if notification is enabled\n   */\n  isNotificationEnabled(\n    notificationType: NotificationType,\n    channel: NotificationChannel\n  ): boolean {\n    const key = `${notificationType}_${channel}`;\n    return this.settings[key]?.is_enabled ?? true; // Default to enabled\n  }\n\n  /**\n   * Send stock alert notification\n   */\n  async sendStockAlert(\n    productName: string,\n    currentStock: number,\n    minimumStock: number\n  ): Promise<void> {\n    const notification: NotificationMessage = {\n      title: 'Voorraad Waarschuwing',\n      body: `${productName} heeft lage voorraad (${currentStock}/${minimumStock})`,\n      type: 'stock_alert',\n      icon: '/icons/warning.png',\n      tag: 'stock-alert',\n      requireInteraction: true,\n      data: { productName, currentStock, minimumStock },\n    };\n\n    if (this.isNotificationEnabled('stock_alert', 'in_app')) {\n      this.showInAppNotification(notification);\n    }\n\n    if (this.isNotificationEnabled('stock_alert', 'push')) {\n      await this.showBrowserNotification(notification);\n    }\n  }\n\n  /**\n   * Send order update notification\n   */\n  async sendOrderUpdate(\n    orderNumber: string,\n    status: string,\n    message?: string\n  ): Promise<void> {\n    const notification: NotificationMessage = {\n      title: 'Bestelling Update',\n      body: message || `Bestelling ${orderNumber} is ${status}`,\n      type: 'order_update',\n      icon: '/icons/order.png',\n      tag: `order-${orderNumber}`,\n      data: { orderNumber, status },\n    };\n\n    if (this.isNotificationEnabled('order_update', 'in_app')) {\n      this.showInAppNotification(notification);\n    }\n\n    if (this.isNotificationEnabled('order_update', 'push')) {\n      await this.showBrowserNotification(notification);\n    }\n  }\n\n  /**\n   * Send system notification\n   */\n  async sendSystemNotification(\n    title: string,\n    message: string,\n    data?: any\n  ): Promise<void> {\n    const notification: NotificationMessage = {\n      title,\n      body: message,\n      type: 'system_notification',\n      icon: '/icons/system.png',\n      data,\n    };\n\n    if (this.isNotificationEnabled('system_notification', 'in_app')) {\n      this.showInAppNotification(notification);\n    }\n\n    if (this.isNotificationEnabled('system_notification', 'push')) {\n      await this.showBrowserNotification(notification);\n    }\n  }\n\n  /**\n   * Send reminder notification\n   */\n  async sendReminder(\n    title: string,\n    message: string,\n    data?: any\n  ): Promise<void> {\n    const notification: NotificationMessage = {\n      title,\n      body: message,\n      type: 'reminder',\n      icon: '/icons/reminder.png',\n      requireInteraction: true,\n      data,\n    };\n\n    if (this.isNotificationEnabled('reminder', 'in_app')) {\n      this.showInAppNotification(notification);\n    }\n\n    if (this.isNotificationEnabled('reminder', 'push')) {\n      await this.showBrowserNotification(notification);\n    }\n  }\n\n  /**\n   * Schedule periodic stock checks\n   */\n  startStockMonitoring(): void {\n    // Check stock levels every hour\n    setInterval(\n      async () => {\n        await this.checkStockLevels();\n      },\n      60 * 60 * 1000\n    );\n\n    // Initial check\n    this.checkStockLevels();\n  }\n\n  /**\n   * Check stock levels and send alerts\n   */\n  private async checkStockLevels(): Promise<void> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!practiceId) {\n      return;\n    }\n\n    try {\n      const { data: lowStockItems, error } = await supabase\n        .from('product_list_items')\n        .select(\n          `\n          *,\n          products (name),\n          product_lists!inner (practice_id)\n        `\n        )\n        .eq('product_lists.practice_id', practiceId);\n        // TODO: Add filter for current_stock < minimum_stock when RLS supports raw expressions\n\n      if (error) {\n        notificationLogger.error('Failed to check stock levels:', error);\n        return;\n      }\n\n      for (const item of lowStockItems || []) {\n        await this.sendStockAlert(\n          item.products?.name || 'Unknown Product',\n          item.current_stock,\n          item.minimum_stock\n        );\n      }\n    } catch (error) {\n      notificationLogger.error('Stock monitoring error', error as Record<string, unknown>);\n    }\n  }\n\n  // Utility methods\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n    const base64 = (base64String + padding)\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n\n  private arrayBufferToBase64(buffer: ArrayBuffer | null): string {\n    if (!buffer) {\n      return '';\n    }\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i] ?? 0);\n    }\n    return window.btoa(binary);\n  }\n}\n\nexport const notificationService = new NotificationService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 182,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 182,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4839, 4842], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4839, 4842], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8475, 8478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8475, 8478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8518, 8521], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8518, 8521], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 334,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 334,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8870, 8873], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8870, 8873], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 335,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 335,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8913, 8916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8913, 8916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 347,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 347,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9229, 9232], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9229, 9232], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 348,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 348,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9272, 9275], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9272, 9275], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 492,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 492,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13052, 13055], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13052, 13055], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, reactive } from 'vue';\nimport { supabase } from '@/services/supabase';\nimport type {\n  Product,\n  ShoppingCartItem,\n} from '@/types/supabase';\nimport { useAuthStore } from '@/stores/auth';\nimport { offlineLogger } from 'src/utils/logger';\nimport { analyticsService } from './analytics';\nimport type { OfflineAction, OfflineData } from '@/types/offline';\n\nexport class OfflineService {\n  private isOnline = ref(navigator.onLine);\n  private offlineActions = ref<OfflineAction[]>([]);\n  private offlineData = reactive<OfflineData>({\n    bestellijsten: [],\n    bestellijst_items: [],\n    products: [],\n    shopping_carts: [],\n    shopping_cart_items: [],\n    last_sync: null,\n  });\n  private syncInProgress = ref(false);\n  private maxRetries = 3;\n  private syncInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    this.setupNetworkListeners();\n    this.loadOfflineData();\n    this.startPeriodicSync();\n  }\n\n  /**\n   * Setup network status listeners\n   */\n  private setupNetworkListeners(): void {\n    window.addEventListener('online', () => {\n      this.isOnline.value = true;\n      this.syncWhenOnline();\n    });\n\n    window.addEventListener('offline', () => {\n      this.isOnline.value = false;\n    });\n  }\n\n  /**\n   * Check if device is online\n   */\n  getOnlineStatus(): boolean {\n    return this.isOnline.value;\n  }\n\n  /**\n   * Sync data when coming back online\n   */\n  private async syncWhenOnline(): Promise<void> {\n    if (this.isOnline.value && !this.syncInProgress.value) {\n      await this.syncToServer();\n      await this.downloadLatestData();\n    }\n  }\n\n  /**\n   * Download latest data for offline use\n   */\n  async downloadLatestData(): Promise<void> {\n    if (!this.isOnline.value) {\n      return;\n    }\n\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!practiceId) {\n      return;\n    }\n\n    try {\n      // Download bestellijsten\n      const { data: bestellijsten, error: bestellijstenError } = await supabase\n        .from('product_lists')\n        .select('*')\n        .eq('practice_id', practiceId);\n\n      if (bestellijstenError) throw bestellijstenError;\n\n      // Download bestellijst items\n      const { data: items, error: itemsError } = await supabase\n        .from('product_list_items')\n        .select(\n          `\n          *,\n          product_lists!inner (practice_id)\n        `\n        )\n        .eq('product_lists.practice_id', practiceId);\n\n      if (itemsError) throw itemsError;\n\n      // Download products (only those in use)\n      const productIds = [\n        ...new Set(items?.map(item => item.product_id) || []),\n      ];\n      let products: Product[] = [];\n\n      if (productIds.length > 0) {\n        const { data: productsData, error: productsError } = await supabase\n          .from('products')\n          .select('*')\n          .in('id', productIds);\n\n        if (productsError) throw productsError;\n        products = productsData || [];\n      }\n\n      // Download shopping carts\n      const { data: carts, error: cartsError } = await supabase\n        .from('shopping_carts')\n        .select('*')\n        .eq('practice_id', practiceId);\n\n      if (cartsError) throw cartsError;\n\n      // Download shopping cart items\n      const cartIds = carts?.map(cart => cart.id) || [];\n      let cartItems: ShoppingCartItem[] = [];\n\n      if (cartIds.length > 0) {\n        const { data: cartItemsData, error: cartItemsError } = await supabase\n          .from('shopping_cart_items')\n          .select('*')\n          .in('cart_id', cartIds);\n\n        if (cartItemsError) throw cartItemsError;\n        cartItems = cartItemsData || [];\n      }\n\n      // Update offline data\n      this.offlineData.bestellijsten = bestellijsten || [];\n      this.offlineData.bestellijst_items =\n        items?.map(item => ({\n          ...item,\n          last_counted: item.last_counted,\n        })) || [];\n      this.offlineData.products = products;\n      this.offlineData.shopping_carts = carts || [];\n      this.offlineData.shopping_cart_items = cartItems;\n      this.offlineData.last_sync = new Date();\n\n      // Save to localStorage\n      this.saveOfflineData();\n\n      // Track analytics\n      analyticsService.trackEvent('offline_data_downloaded', {\n        bestellijsten_count: this.offlineData.bestellijsten.length,\n        items_count: this.offlineData.bestellijst_items.length,\n        products_count: this.offlineData.products.length,\n      });\n    } catch (error) {\n      offlineLogger.error(\n        'Failed to download offline data:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Get offline data\n   */\n  getOfflineData(): OfflineData {\n    return this.offlineData;\n  }\n\n  /**\n   * Add action to offline queue\n   */\n  addOfflineAction(\n    type: OfflineAction['type'],\n    table: string,\n    data: any\n  ): void {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n    const userId = authStore.user?.id;\n\n    if (!practiceId || !userId) {\n      offlineLogger.error('Cannot add offline action - no practice or user');\n      return;\n    }\n\n    const action: OfflineAction = {\n      id: crypto.randomUUID(),\n      type,\n      table,\n      data,\n      timestamp: new Date(),\n      retry_count: 0,\n      practice_id: practiceId,\n      user_id: userId,\n    };\n\n    this.offlineActions.value.push(action);\n    this.saveOfflineActions();\n\n    // Try to sync immediately if online\n    if (this.isOnline.value) {\n      this.syncToServer();\n    }\n  }\n\n  /**\n   * Sync offline actions to server\n   */\n  async syncToServer(): Promise<void> {\n    if (\n      !this.isOnline.value ||\n      this.syncInProgress.value ||\n      this.offlineActions.value.length === 0\n    ) {\n      return;\n    }\n\n    this.syncInProgress.value = true;\n\n    try {\n      offlineLogger.info(\n        `Syncing ${this.offlineActions.value.length} offline actions...`\n      );\n\n      const actionsToSync = [...this.offlineActions.value];\n      const syncedActions: string[] = [];\n      const failedActions: OfflineAction[] = [];\n\n      for (const action of actionsToSync) {\n        try {\n          await this.syncSingleAction(action);\n          syncedActions.push(action.id);\n        } catch (error) {\n          offlineLogger.error('Failed to sync action:', {\n            action,\n            error: error as Record<string, unknown>,\n          });\n\n          // Increment retry count\n          action.retry_count++;\n\n          if (action.retry_count >= this.maxRetries) {\n            offlineLogger.error('Max retries reached for action:', action);\n            // Remove from queue after max retries\n            syncedActions.push(action.id);\n          } else {\n            failedActions.push(action);\n          }\n        }\n      }\n\n      // Remove synced actions\n      this.offlineActions.value = this.offlineActions.value.filter(\n        action => !syncedActions.includes(action.id)\n      );\n\n      // Update failed actions with new retry counts\n      failedActions.forEach(failedAction => {\n        const index = this.offlineActions.value.findIndex(\n          a => a.id === failedAction.id\n        );\n        if (index !== -1) {\n          this.offlineActions.value[index] = failedAction;\n        }\n      });\n\n      this.saveOfflineActions();\n\n      offlineLogger.info(\n        `Sync completed. Synced: ${syncedActions.length}, Failed: ${failedActions.length}`\n      );\n\n      // Track analytics\n      analyticsService.trackEvent('offline_sync_completed', {\n        synced_count: syncedActions.length,\n        failed_count: failedActions.length,\n        remaining_count: this.offlineActions.value.length,\n      });\n    } catch (error) {\n      offlineLogger.error(\n        'Sync process failed:',\n        error as Record<string, unknown>\n      );\n    } finally {\n      this.syncInProgress.value = false;\n    }\n  }\n\n  /**\n   * Sync a single action to server\n   */\n  private async syncSingleAction(action: OfflineAction): Promise<void> {\n    switch (action.type) {\n      case 'create':\n        await this.syncCreateAction(action);\n        break;\n      case 'update':\n        await this.syncUpdateAction(action);\n        break;\n      case 'delete':\n        await this.syncDeleteAction(action);\n        break;\n      default:\n        throw new Error(`Unknown action type: ${action.type}`);\n    }\n  }\n\n  /**\n   * Sync create action\n   */\n  private async syncCreateAction(action: OfflineAction): Promise<void> {\n    const table = (supabase as any).from(action.table);\n    const result: any = await table.insert(action.data);\n    const { error } = result;\n\n    if (error) {\n      throw new Error(`Failed to sync create: ${error.message}`);\n    }\n  }\n\n  /**\n   * Sync update action\n   */\n  private async syncUpdateAction(action: OfflineAction): Promise<void> {\n    const { id, ...updateData } = action.data;\n\n    const table = (supabase as any).from(action.table);\n    const result: any = await table.update(updateData).eq('id', id);\n    const { error } = result;\n\n    if (error) {\n      throw new Error(`Failed to sync update: ${error.message}`);\n    }\n  }\n\n  /**\n   * Sync delete action\n   */\n  private async syncDeleteAction(action: OfflineAction): Promise<void> {\n    const table = (supabase as any).from(action.table);\n    const result: any = await table.delete().eq('id', action.data.id);\n    const { error } = result;\n\n    if (error) {\n      throw new Error(`Failed to sync delete: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update bestellijst item offline\n   */\n  updateBestellijstItemOffline(\n    itemId: string,\n    updates: Record<string, unknown>\n  ): void {\n    // Update local data\n    const index = this.offlineData.bestellijst_items.findIndex(\n      item => item.id === itemId\n    );\n    if (index !== -1) {\n      this.offlineData.bestellijst_items[index] = {\n        ...this.offlineData.bestellijst_items[index],\n        ...updates,\n        updated_at: new Date().toISOString(),\n      };\n      this.saveOfflineData();\n    }\n\n    // Add to sync queue\n    this.addOfflineAction('update', 'product_list_items', {\n      id: itemId,\n      ...updates,\n      updated_at: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Add product to cart offline\n   */\n  addToCartOffline(cartId: string, productId: string, quantity: number): void {\n    // Update local data\n    const existingItem = this.offlineData.shopping_cart_items.find(\n      item => item.cart_id === cartId && item.product_id === productId\n    );\n\n    if (existingItem) {\n      existingItem.quantity = (existingItem.quantity as number) + quantity;\n      existingItem.updated_at = new Date().toISOString();\n\n      this.addOfflineAction('update', 'shopping_cart_items', {\n        id: existingItem.id,\n        quantity: existingItem.quantity,\n        updated_at: existingItem.updated_at,\n      });\n    } else {\n      const newItem: ShoppingCartItem = {\n        id: crypto.randomUUID(),\n        cart_id: cartId,\n        product_id: productId,\n        quantity,\n        notes: null,\n        suggested_by: 'manual',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      this.offlineData.shopping_cart_items.push(newItem);\n      this.addOfflineAction('create', 'shopping_cart_items', newItem);\n    }\n\n    this.saveOfflineData();\n  }\n\n  /**\n   * Save offline data to localStorage\n   */\n  private saveOfflineData(): void {\n    try {\n      localStorage.setItem(\n        'remcura_offline_data',\n        JSON.stringify({\n          ...this.offlineData,\n          last_sync: this.offlineData.last_sync?.toISOString(),\n        })\n      );\n    } catch (error) {\n      offlineLogger.error(\n        'Failed to save offline data:',\n        error as Record<string, unknown>\n      );\n    }\n  }\n\n  /**\n   * Load offline data from localStorage\n   */\n  private loadOfflineData(): void {\n    try {\n      const saved = localStorage.getItem('remcura_offline_data');\n      if (saved) {\n        const data = JSON.parse(saved);\n        Object.assign(this.offlineData, {\n          ...data,\n          last_sync: data.last_sync ? new Date(data.last_sync) : null,\n        });\n      }\n    } catch (error) {\n      offlineLogger.error(\n        'Failed to load offline data:',\n        error as Record<string, unknown>\n      );\n    }\n  }\n\n  /**\n   * Save offline actions to localStorage\n   */\n  private saveOfflineActions(): void {\n    try {\n      localStorage.setItem(\n        'remcura_offline_actions',\n        JSON.stringify(\n          this.offlineActions.value.map(action => ({\n            ...action,\n            timestamp: action.timestamp.toISOString(),\n          }))\n        )\n      );\n    } catch (error) {\n      offlineLogger.error(\n        'Failed to save offline actions:',\n        error as Record<string, unknown>\n      );\n    }\n  }\n\n  /**\n   * Load offline actions from localStorage\n   */\n  private loadOfflineActions(): void {\n    try {\n      const saved = localStorage.getItem('remcura_offline_actions');\n      if (saved) {\n        const actions = JSON.parse(saved);\n        this.offlineActions.value = actions.map((action: any) => ({\n          ...action,\n          timestamp: new Date(action.timestamp),\n        }));\n      }\n    } catch (error) {\n      offlineLogger.error(\n        'Failed to load offline actions:',\n        error as Record<string, unknown>\n      );\n    }\n  }\n\n  /**\n   * Start periodic sync\n   */\n  private startPeriodicSync(): void {\n    // Sync every 5 minutes when online\n    this.syncInterval = setInterval(\n      () => {\n        if (this.isOnline.value && this.offlineActions.value.length > 0) {\n          this.syncToServer();\n        }\n      },\n      5 * 60 * 1000\n    );\n  }\n\n  /**\n   * Clear all offline data\n   */\n  clearOfflineData(): void {\n    this.offlineData.bestellijsten = [];\n    this.offlineData.bestellijst_items = [];\n    this.offlineData.products = [];\n    this.offlineData.shopping_carts = [];\n    this.offlineData.shopping_cart_items = [];\n    this.offlineData.last_sync = null;\n\n    this.offlineActions.value = [];\n\n    localStorage.removeItem('remcura_offline_data');\n    localStorage.removeItem('remcura_offline_actions');\n  }\n\n  /**\n   * Get pending sync count\n   */\n  getPendingSyncCount(): number {\n    return this.offlineActions.value.length;\n  }\n\n  /**\n   * Get sync status\n   */\n  getSyncStatus() {\n    return {\n      isOnline: this.isOnline.value,\n      syncInProgress: this.syncInProgress.value,\n      pendingActions: this.offlineActions.value.length,\n      lastSync: this.offlineData.last_sync,\n    };\n  }\n\n  /**\n   * Force sync now\n   */\n  async forceSyncNow(): Promise<void> {\n    if (this.isOnline.value) {\n      await this.syncToServer();\n      await this.downloadLatestData();\n    } else {\n      throw new Error('Cannot sync while offline');\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n      this.syncInterval = null;\n    }\n  }\n}\n\nexport const offlineService = new OfflineService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\action-queue.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [211, 214], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [211, 214], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1153, 1156], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1153, 1156], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 301,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 301,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7054, 7057], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7054, 7057], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport { ServiceErrorHandler } from 'src/utils/service-error-handler';\n\nexport interface OfflineAction {\n  id: string;\n  type: 'create' | 'update' | 'delete';\n  table: string;\n  data: any;\n  timestamp: Date;\n  retry_count: number;\n  practice_id: string;\n  user_id: string;\n  priority?: number; // Lower numbers = higher priority\n}\n\nexport interface ActionSyncResult {\n  success: boolean;\n  action: OfflineAction;\n  error?: Error;\n}\n\nexport interface ActionExecutor {\n  (action: OfflineAction): Promise<void>;\n}\n\nexport class ActionQueue {\n  private actions = ref<OfflineAction[]>([]);\n  private readonly maxRetries: number;\n  private readonly storageKey = 'offline_actions';\n  private executors: Map<string, ActionExecutor> = new Map();\n\n  constructor(maxRetries = 3) {\n    this.maxRetries = maxRetries;\n    this.loadFromStorage();\n  }\n\n  /**\n   * Register an executor for a specific table\n   */\n  registerExecutor(table: string, executor: ActionExecutor): void {\n    this.executors.set(table, executor);\n  }\n\n  /**\n   * Add action to the queue\n   */\n  addAction(\n    type: OfflineAction['type'],\n    table: string,\n    data: any,\n    practiceId: string,\n    userId: string,\n    priority = 5\n  ): string {\n    const action: OfflineAction = {\n      id: crypto.randomUUID(),\n      type,\n      table,\n      data,\n      timestamp: new Date(),\n      retry_count: 0,\n      practice_id: practiceId,\n      user_id: userId,\n      priority,\n    };\n\n    this.actions.value.push(action);\n    this.sortActionsByPriority();\n    this.saveToStorage();\n\n    // Offline action added - debug logging removed\n    return action.id;\n  }\n\n  /**\n   * Get all actions\n   */\n  get allActions() {\n    return this.actions.value;\n  }\n\n  /**\n   * Get actions count\n   */\n  get count(): number {\n    return this.actions.value.length;\n  }\n\n  /**\n   * Get failed actions (those that have reached max retries)\n   */\n  get failedActions(): OfflineAction[] {\n    return this.actions.value.filter(\n      action => action.retry_count >= this.maxRetries\n    );\n  }\n\n  /**\n   * Get pending actions (those that haven't reached max retries)\n   */\n  get pendingActions(): OfflineAction[] {\n    return this.actions.value.filter(\n      action => action.retry_count < this.maxRetries\n    );\n  }\n\n  /**\n   * Execute all pending actions\n   */\n  async executeAll(): Promise<ActionSyncResult[]> {\n    const results: ActionSyncResult[] = [];\n    const actionsToProcess = [...this.pendingActions];\n\n    for (const action of actionsToProcess) {\n      const result = await this.executeAction(action);\n      results.push(result);\n\n      if (result.success) {\n        this.removeAction(action.id);\n      } else {\n        this.incrementRetryCount(action.id);\n      }\n    }\n\n    this.saveToStorage();\n    return results;\n  }\n\n  /**\n   * Execute a single action\n   */\n  private async executeAction(\n    action: OfflineAction\n  ): Promise<ActionSyncResult> {\n    const executor = this.executors.get(action.table);\n\n    if (!executor) {\n      const error = new Error(\n        `No executor registered for action type: ${action.type}`\n      );\n      ServiceErrorHandler.handle(\n        error,\n        {\n          service: 'ActionQueue',\n          operation: 'executeAction',\n          practiceId: action.practice_id,\n          userId: action.user_id,\n          metadata: { actionId: action.id, table: action.table },\n        },\n        { rethrow: false }\n      );\n\n      return {\n        success: false,\n        action,\n        error,\n      };\n    }\n\n    try {\n      await executor(action);\n      return {\n        success: true,\n        action,\n      };\n    } catch (error) {\n      ServiceErrorHandler.handle(\n        error as Error,\n        {\n          service: 'ActionQueue',\n          operation: 'executeAction',\n          practiceId: action.practice_id,\n          userId: action.user_id,\n          metadata: {\n            actionId: action.id,\n            table: action.table,\n            retryCount: action.retry_count,\n          },\n        },\n        { rethrow: false }\n      );\n\n      return {\n        success: false,\n        action,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  }\n\n  /**\n   * Remove action from queue\n   */\n  removeAction(actionId: string): boolean {\n    const index = this.actions.value.findIndex(\n      action => action.id === actionId\n    );\n    if (index !== -1) {\n      this.actions.value.splice(index, 1);\n      this.saveToStorage();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Increment retry count for an action\n   */\n  private incrementRetryCount(actionId: string): void {\n    const action = this.actions.value.find(a => a.id === actionId);\n    if (action) {\n      action.retry_count++;\n\n      // If max retries reached, log it\n      if (action.retry_count >= this.maxRetries) {\n        console.error('Max retries reached for action:', action);\n        ServiceErrorHandler.handle(\n          new Error(`Action failed after ${this.maxRetries} retries`),\n          {\n            service: 'ActionQueue',\n            operation: 'incrementRetryCount',\n            practiceId: action.practice_id,\n            userId: action.user_id,\n            metadata: { actionId: action.id, table: action.table },\n          },\n          { rethrow: false, logLevel: 'warn' }\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear all actions\n   */\n  clear(): void {\n    this.actions.value = [];\n    this.saveToStorage();\n  }\n\n  /**\n   * Clear failed actions only\n   */\n  clearFailed(): void {\n    this.actions.value = this.actions.value.filter(\n      action => action.retry_count < this.maxRetries\n    );\n    this.saveToStorage();\n  }\n\n  /**\n   * Retry a specific action\n   */\n  retryAction(actionId: string): void {\n    const action = this.actions.value.find(a => a.id === actionId);\n    if (action) {\n      action.retry_count = 0;\n      this.saveToStorage();\n    }\n  }\n\n  /**\n   * Sort actions by priority (lower number = higher priority)\n   */\n  private sortActionsByPriority(): void {\n    this.actions.value.sort((a, b) => {\n      const priorityA = a.priority || 5;\n      const priorityB = b.priority || 5;\n\n      if (priorityA !== priorityB) {\n        return priorityA - priorityB;\n      }\n\n      // If same priority, sort by timestamp (older first)\n      return a.timestamp.getTime() - b.timestamp.getTime();\n    });\n  }\n\n  /**\n   * Save actions to localStorage\n   */\n  private saveToStorage(): void {\n    try {\n      const serializedActions = this.actions.value.map(action => ({\n        ...action,\n        timestamp: action.timestamp.toISOString(),\n      }));\n      localStorage.setItem(this.storageKey, JSON.stringify(serializedActions));\n    } catch (error) {\n      console.error('Failed to save actions to storage:', error);\n    }\n  }\n\n  /**\n   * Load actions from localStorage\n   */\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const parsedActions = JSON.parse(stored);\n        this.actions.value = parsedActions.map((action: any) => ({\n          ...action,\n          timestamp: new Date(action.timestamp),\n        }));\n        this.sortActionsByPriority();\n      }\n    } catch (error) {\n      console.error('Failed to load actions from storage:', error);\n      this.actions.value = [];\n    }\n  }\n}\n\n// Export singleton instance\nexport const actionQueue = new ActionQueue();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\data-sync.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1246, 1249], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1246, 1249], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3177, 3180], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3177, 3180], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3227, 3230], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3227, 3230], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 144,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 144,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3271, 3274], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3271, 3274], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3318, 3321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3318, 3321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3374, 3377], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3374, 3377], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4574, 4577], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4574, 4577], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 224,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 224,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5158, 5161], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5158, 5161], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 224,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 224,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5175, 5178], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5175, 5178], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { reactive } from 'vue';\nimport { supabase } from 'src/boot/supabase';\nimport { handleSupabaseError } from 'src/utils/service-error-handler';\nimport { analyticsService } from '../analytics';\nimport type {\n  Bestellijst,\n  BestellijstItem,\n  Product,\n  ShoppingCart,\n  ShoppingCartItem,\n} from 'src/types/supabase';\n\nexport interface OfflineData {\n  bestellijsten: Bestellijst[];\n  bestellijst_items: BestellijstItem[];\n  products: Product[];\n  shopping_carts: ShoppingCart[];\n  shopping_cart_items: ShoppingCartItem[];\n  last_sync: Date | null;\n}\n\nexport interface SyncProgress {\n  phase:\n    | 'bestellijsten'\n    | 'items'\n    | 'products'\n    | 'carts'\n    | 'cart_items'\n    | 'complete';\n  current: number;\n  total: number;\n  message: string;\n}\n\nexport type SyncProgressCallback = (progress: SyncProgress) => void;\n\nexport class DataSyncManager {\n  private data = reactive<OfflineData>({\n    bestellijsten: [],\n    bestellijst_items: [],\n    products: [],\n    shopping_carts: [],\n    shopping_cart_items: [],\n    last_sync: null,\n  });\n\n  private readonly storageKey = 'offline_data';\n  private syncInProgress = false;\n\n  constructor() {\n    this.loadFromStorage();\n  }\n\n  /**\n   * Get current offline data\n   */\n  get offlineData(): any {\n    return this.data;\n  }\n\n  /**\n   * Check if sync is in progress\n   */\n  get isSyncing(): boolean {\n    return this.syncInProgress;\n  }\n\n  /**\n   * Get last sync time\n   */\n  get lastSync(): Date | null {\n    return this.data.last_sync;\n  }\n\n  /**\n   * Download latest data for offline use\n   */\n  async downloadData(\n    practiceId: string,\n    onProgress?: SyncProgressCallback\n  ): Promise<void> {\n    if (this.syncInProgress) {\n      throw new Error('Sync already in progress');\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Downloading latest data for offline use\n\n      // Phase 1: Download bestellijsten\n      onProgress?.({\n        phase: 'bestellijsten',\n        current: 0,\n        total: 5,\n        message: 'Downloading order lists...',\n      });\n\n      const bestellijsten = await this.downloadBestellijsten(practiceId);\n\n      // Phase 2: Download bestellijst items\n      onProgress?.({\n        phase: 'items',\n        current: 1,\n        total: 5,\n        message: 'Downloading order list items...',\n      });\n\n      const items = await this.downloadBestellijstItems(practiceId);\n\n      // Phase 3: Download products\n      onProgress?.({\n        phase: 'products',\n        current: 2,\n        total: 5,\n        message: 'Downloading products...',\n      });\n\n      const products = await this.downloadProducts(items);\n\n      // Phase 4: Download shopping carts\n      onProgress?.({\n        phase: 'carts',\n        current: 3,\n        total: 5,\n        message: 'Downloading shopping carts...',\n      });\n\n      const carts = await this.downloadShoppingCarts(practiceId);\n\n      // Phase 5: Download shopping cart items\n      onProgress?.({\n        phase: 'cart_items',\n        current: 4,\n        total: 5,\n        message: 'Downloading cart items...',\n      });\n\n      const cartItems = await this.downloadCartItems(carts);\n\n      // Update data\n      this.data.bestellijsten = bestellijsten as any;\n      this.data.bestellijst_items = items as any;\n      this.data.products = products as any;\n      this.data.shopping_carts = carts as any;\n      this.data.shopping_cart_items = cartItems as any;\n      this.data.last_sync = new Date();\n\n      // Save to storage\n      this.saveToStorage();\n\n      onProgress?.({\n        phase: 'complete',\n        current: 5,\n        total: 5,\n        message: 'Sync complete',\n      });\n\n      // Offline data downloaded successfully\n\n      // Track analytics\n      analyticsService.trackEvent('offline_data_downloaded', {\n        bestellijsten_count: bestellijsten.length,\n        items_count: items.length,\n        products_count: products.length,\n        carts_count: carts.length,\n        cart_items_count: cartItems.length,\n      });\n    } catch (error) {\n      console.error('Failed to download offline data:', error);\n      throw error;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  /**\n   * Download bestellijsten\n   */\n  private async downloadBestellijsten(\n    practiceId: string\n  ): Promise<Bestellijst[]> {\n    const { data, error } = await supabase\n      .from('product_lists')\n      .select('*')\n      .eq('practice_id', practiceId);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'DataSyncManager',\n        operation: 'downloadBestellijsten',\n        practiceId,\n      });\n    }\n\n    return (data as any) || [];\n  }\n\n  /**\n   * Download bestellijst items\n   */\n  private async downloadBestellijstItems(\n    practiceId: string\n  ): Promise<BestellijstItem[]> {\n    const { data, error } = await supabase\n      .from('product_list_items')\n      .select(\n        `\n        *,\n        product_lists!inner (practice_id)\n      `\n      )\n      .eq('product_lists.practice_id', practiceId);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'DataSyncManager',\n        operation: 'downloadBestellijstItems',\n        practiceId,\n      });\n    }\n\n    return (\n      (data as any)?.map((item: any) => ({\n        ...item,\n        last_counted: item.last_counted,\n      })) || []\n    );\n  }\n\n  /**\n   * Download products (only those in use)\n   */\n  private async downloadProducts(items: BestellijstItem[]): Promise<Product[]> {\n    const productIds = [...new Set(items.map(item => item.product_id))];\n\n    if (productIds.length === 0) {\n      return [];\n    }\n\n    const { data, error } = await supabase\n      .from('products')\n      .select('*')\n      .in('id', productIds);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'DataSyncManager',\n        operation: 'downloadProducts',\n        metadata: { productCount: productIds.length },\n      });\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Download shopping carts\n   */\n  private async downloadShoppingCarts(\n    practiceId: string\n  ): Promise<ShoppingCart[]> {\n    const { data, error } = await supabase\n      .from('shopping_carts')\n      .select('*')\n      .eq('practice_id', practiceId);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'DataSyncManager',\n        operation: 'downloadShoppingCarts',\n        practiceId,\n      });\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Download shopping cart items\n   */\n  private async downloadCartItems(\n    carts: ShoppingCart[]\n  ): Promise<ShoppingCartItem[]> {\n    const cartIds = carts.map(cart => cart.id);\n\n    if (cartIds.length === 0) {\n      return [];\n    }\n\n    const { data, error } = await supabase\n      .from('shopping_cart_items')\n      .select('*')\n      .in('cart_id', cartIds);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'DataSyncManager',\n        operation: 'downloadCartItems',\n        metadata: { cartCount: cartIds.length },\n      });\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Clear all offline data\n   */\n  clearData(): void {\n    this.data.bestellijsten = [];\n    this.data.bestellijst_items = [];\n    this.data.products = [];\n    this.data.shopping_carts = [];\n    this.data.shopping_cart_items = [];\n    this.data.last_sync = null;\n\n    this.saveToStorage();\n  }\n\n  /**\n   * Get data statistics\n   */\n  getStats() {\n    return {\n      bestellijsten: this.data.bestellijsten.length,\n      items: this.data.bestellijst_items.length,\n      products: this.data.products.length,\n      carts: this.data.shopping_carts.length,\n      cartItems: this.data.shopping_cart_items.length,\n      lastSync: this.data.last_sync,\n      totalSize: this.calculateStorageSize(),\n    };\n  }\n\n  /**\n   * Calculate approximate storage size in bytes\n   */\n  private calculateStorageSize(): number {\n    try {\n      const serialized = JSON.stringify(this.data);\n      return new Blob([serialized]).size;\n    } catch {\n      return 0;\n    }\n  }\n\n  /**\n   * Save data to localStorage\n   */\n  private saveToStorage(): void {\n    try {\n      const serializedData = {\n        ...this.data,\n        last_sync: this.data.last_sync?.toISOString() || null,\n      };\n      localStorage.setItem(this.storageKey, JSON.stringify(serializedData));\n    } catch (error) {\n      console.error('Failed to save offline data to storage:', error);\n    }\n  }\n\n  /**\n   * Load data from localStorage\n   */\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const parsedData = JSON.parse(stored);\n\n        this.data.bestellijsten = parsedData.bestellijsten || [];\n        this.data.bestellijst_items = parsedData.bestellijst_items || [];\n        this.data.products = parsedData.products || [];\n        this.data.shopping_carts = parsedData.shopping_carts || [];\n        this.data.shopping_cart_items = parsedData.shopping_cart_items || [];\n        this.data.last_sync = parsedData.last_sync\n          ? new Date(parsedData.last_sync)\n          : null;\n      }\n    } catch (error) {\n      console.error('Failed to load offline data from storage:', error);\n      this.clearData();\n    }\n  }\n}\n\n// Export singleton instance\nexport const dataSyncManager = new DataSyncManager();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2097, 2100], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2097, 2100], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'successCount' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 156,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 156,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Vue imports removed - not used in this file\nimport { useAuthStore } from 'src/stores/auth';\nimport { networkMonitor, type NetworkStatus } from './network-monitor';\nimport { actionQueue, type OfflineAction } from './action-queue';\nimport { dataSyncManager, type SyncProgressCallback } from './data-sync';\nimport { supabase } from 'src/boot/supabase';\n\nexport interface OfflineServiceConfig {\n  autoSyncInterval?: number; // minutes\n  maxRetries?: number;\n  enablePeriodicSync?: boolean;\n}\n\nexport class OfflineService {\n  private config: OfflineServiceConfig;\n  private periodicSyncTimer: NodeJS.Timeout | null = null;\n\n  constructor(config: OfflineServiceConfig = {}) {\n    this.config = {\n      autoSyncInterval: 15, // Default 15 minutes\n      maxRetries: 3,\n      enablePeriodicSync: true,\n      ...config,\n    };\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the offline service\n   */\n  private initialize(): void {\n    // Setup network status listener\n    networkMonitor.addListener(this.handleNetworkChange.bind(this));\n\n    // Register action executors\n    this.registerActionExecutors();\n\n    // Start periodic sync if enabled\n    if (this.config.enablePeriodicSync) {\n      this.startPeriodicSync();\n    }\n  }\n\n  /**\n   * Get network status\n   */\n  get isOnline(): boolean {\n    return networkMonitor.isOnline;\n  }\n\n  /**\n   * Get reactive network status\n   */\n  get networkStatus() {\n    return networkMonitor.networkStatus;\n  }\n\n  /**\n   * Get offline data\n   */\n  get offlineData() {\n    return dataSyncManager.offlineData;\n  }\n\n  /**\n   * Get pending actions count\n   */\n  get pendingActionsCount(): number {\n    return actionQueue.count;\n  }\n\n  /**\n   * Get failed actions\n   */\n  get failedActions() {\n    return actionQueue.failedActions;\n  }\n\n  /**\n   * Get sync status\n   */\n  get isSyncing(): boolean {\n    return dataSyncManager.isSyncing;\n  }\n\n  /**\n   * Get last sync time\n   */\n  get lastSync(): Date | null {\n    return dataSyncManager.lastSync;\n  }\n\n  /**\n   * Add an offline action\n   */\n  addAction(\n    type: OfflineAction['type'],\n    table: string,\n    data: any,\n    priority = 5\n  ): string {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n    const userId = authStore.user?.id;\n\n    if (!practiceId || !userId) {\n      throw new Error('Cannot add offline action - no practice or user');\n    }\n\n    const actionId = actionQueue.addAction(\n      type,\n      table,\n      data,\n      practiceId,\n      userId,\n      priority\n    );\n\n    // Try to sync immediately if online\n    if (this.isOnline) {\n      this.syncActions();\n    }\n\n    return actionId;\n  }\n\n  /**\n   * Download latest data for offline use\n   */\n  async downloadData(onProgress?: SyncProgressCallback): Promise<void> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!practiceId) {\n      throw new Error('No practice selected for offline data download');\n    }\n\n    if (!this.isOnline) {\n      throw new Error('Cannot download data - device is offline');\n    }\n\n    await dataSyncManager.downloadData(practiceId, onProgress);\n  }\n\n  /**\n   * Sync pending actions to server\n   */\n  async syncActions(): Promise<boolean> {\n    if (!this.isOnline || actionQueue.count === 0) {\n      return false;\n    }\n\n    try {\n      const results = await actionQueue.executeAll();\n      const successCount = results.filter(r => r.success).length;\n      const failureCount = results.filter(r => !r.success).length;\n\n      // Sync completed - debug logging removed\n\n      return failureCount === 0;\n    } catch (error) {\n      console.error('Error during action sync:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Full sync - download data and sync actions\n   */\n  async fullSync(onProgress?: SyncProgressCallback): Promise<void> {\n    if (!this.isOnline) {\n      throw new Error('Cannot sync - device is offline');\n    }\n\n    // First sync actions\n    await this.syncActions();\n\n    // Then download latest data\n    await this.downloadData(onProgress);\n  }\n\n  /**\n   * Clear all offline data and actions\n   */\n  clearAll(): void {\n    dataSyncManager.clearData();\n    actionQueue.clear();\n  }\n\n  /**\n   * Retry failed actions\n   */\n  retryFailedActions(): void {\n    this.failedActions.forEach(action => {\n      actionQueue.retryAction(action.id);\n    });\n\n    if (this.isOnline) {\n      this.syncActions();\n    }\n  }\n\n  /**\n   * Get offline statistics\n   */\n  getStats() {\n    return {\n      network: {\n        isOnline: this.isOnline,\n        lastCheck: new Date(),\n      },\n      data: dataSyncManager.getStats(),\n      actions: {\n        pending: actionQueue.pendingActions.length,\n        failed: actionQueue.failedActions.length,\n        total: actionQueue.count,\n      },\n    };\n  }\n\n  /**\n   * Handle network status changes\n   */\n  private handleNetworkChange(status: NetworkStatus): void {\n    // Network status change handled\n\n    if (status === 'online') {\n      // When coming back online, sync actions and optionally refresh data\n      this.syncActions();\n    }\n  }\n\n  /**\n   * Register action executors for different tables\n   */\n  private registerActionExecutors(): void {\n    // Product list items executor\n    actionQueue.registerExecutor('product_list_items', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('product_list_items').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('product_list_items')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('product_list_items')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n\n    // Shopping cart items executor\n    actionQueue.registerExecutor('shopping_cart_items', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('shopping_cart_items').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('shopping_cart_items')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('shopping_cart_items')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n\n    // Shopping carts executor\n    actionQueue.registerExecutor('shopping_carts', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('shopping_carts').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('shopping_carts')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('shopping_carts')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Start periodic sync\n   */\n  private startPeriodicSync(): void {\n    if (this.periodicSyncTimer) {\n      clearInterval(this.periodicSyncTimer);\n    }\n\n    const intervalMs = (this.config.autoSyncInterval || 15) * 60 * 1000;\n\n    this.periodicSyncTimer = setInterval(() => {\n      if (this.isOnline && actionQueue.count > 0) {\n        // Periodic sync triggered\n        this.syncActions();\n      }\n    }, intervalMs);\n  }\n\n  /**\n   * Stop periodic sync\n   */\n  stopPeriodicSync(): void {\n    if (this.periodicSyncTimer) {\n      clearInterval(this.periodicSyncTimer);\n      this.periodicSyncTimer = null;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.stopPeriodicSync();\n    networkMonitor.cleanup();\n  }\n}\n\n// Export singleton instance\nexport const offlineService = new OfflineService();\n\n// Export types and submodules for direct access if needed\nexport { networkMonitor } from './network-monitor';\nexport { actionQueue } from './action-queue';\nexport { dataSyncManager } from './data-sync';\nexport type { OfflineAction, SyncProgressCallback };\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\network-monitor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'response' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\n\nexport type NetworkStatus = 'online' | 'offline';\n\nexport interface NetworkEventListener {\n  (status: NetworkStatus): void;\n}\n\nexport class NetworkMonitor {\n  private status = ref<NetworkStatus>(navigator.onLine ? 'online' : 'offline');\n  private listeners: Set<NetworkEventListener> = new Set();\n\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  /**\n   * Get current network status\n   */\n  get isOnline(): boolean {\n    return this.status.value === 'online';\n  }\n\n  /**\n   * Get reactive network status\n   */\n  get networkStatus() {\n    return this.status;\n  }\n\n  /**\n   * Add listener for network status changes\n   */\n  addListener(listener: NetworkEventListener): () => void {\n    this.listeners.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  /**\n   * Setup native event listeners\n   */\n  private setupEventListeners(): void {\n    const handleOnline = () => {\n      this.status.value = 'online';\n      this.notifyListeners('online');\n    };\n\n    const handleOffline = () => {\n      this.status.value = 'offline';\n      this.notifyListeners('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Cleanup function (can be called manually if needed)\n    this.cleanup = () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }\n\n  /**\n   * Notify all listeners of status change\n   */\n  private notifyListeners(status: NetworkStatus): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(status);\n      } catch (error) {\n        console.error('Error in network status listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  public cleanup = () => {\n    // Will be overwritten in setupEventListeners\n  };\n\n  /**\n   * Check actual network connectivity (beyond navigator.onLine)\n   */\n  async checkConnectivity(): Promise<boolean> {\n    if (!navigator.onLine) {\n      return false;\n    }\n\n    try {\n      // Try to fetch a small resource to verify actual connectivity\n      const response = await fetch('/ping', {\n        method: 'HEAD',\n        mode: 'no-cors',\n      });\n      return true;\n    } catch {\n      // If custom ping endpoint fails, try a well-known endpoint\n      try {\n        await fetch('https://httpbin.org/status/200', {\n          method: 'HEAD',\n          mode: 'no-cors',\n        });\n        return true;\n      } catch {\n        return false;\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const networkMonitor = new NetworkMonitor();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\orderOrchestration\\centralOrderService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useInventoryMovements' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ReorderSuggestion' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 76,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4516, 4519], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4516, 4519], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 297,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 297,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8321, 8324], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8321, 8324], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 301,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 301,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8532, 8535], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8532, 8535], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 453,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 453,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13118, 13121], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13118, 13121], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 471,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 471,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13759, 13762], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13759, 13762], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 505,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 505,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14813, 14816], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14813, 14816], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 514,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 514,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15164, 15167], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15164, 15167], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 580,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 580,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17109, 17112], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17109, 17112], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport {\n  useOrderListsSupplierSplitting,\n  type SupplierOrder,\n  type OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport { useInventoryMovements } from '@/stores/inventory/inventory-movements';\nimport type { ReorderSuggestion } from '@/stores/orderLists/orderLists-minmax';\nimport type { LowStockItemDTO } from '@/types/analytics';\nimport { AnalyticsService } from '@/services/analytics';\n\n// Extended ReorderSuggestion with additional fields used in this service\n// Independent interface - not extending ReorderSuggestion to avoid conflicts\ninterface ExtendedReorderSuggestion {\n  product_id: string;\n  product_name?: string;\n  sku?: string;\n  location_id?: string;\n  location_name?: string;\n  current_stock: number;\n  minimum_stock: number;\n  reorder_point: number | null;\n  calculated_order_quantity: number;\n  unit_price: number;\n  preferred_supplier_id?: string | null;\n  preferred_supplier_name?: string;\n  urgency_level: string;\n  estimated_cost?: number;\n  lead_time_days?: number;\n  practice_id?: string;\n  last_ordered_at?: string | null;\n  stock_trend?: string;\n}\n\nexport interface OrderResult {\n  orderId: string;\n  supplierOrders: SupplierOrder[];\n  sendingResults: OrderSendingResult[];\n  totalItems: number;\n  totalValue: number;\n  status: 'success' | 'partial' | 'failed';\n  errors: string[];\n}\n\nexport interface AutoReorderConfig {\n  practiceId: string;\n  locationId?: string;\n  enableLowStockReorder: boolean;\n  enableScheduledReorder: boolean;\n  maxOrderValue?: number;\n  approvalRequired: boolean;\n}\n\nexport interface OrderStatus {\n  orderId: string;\n  supplierOrderId: string;\n  supplierId: string;\n  supplierName: string;\n  status:\n    | 'pending'\n    | 'sent'\n    | 'confirmed'\n    | 'shipped'\n    | 'delivered'\n    | 'cancelled';\n  orderReference: string;\n  trackingNumber?: string;\n  estimatedDelivery?: string;\n  actualDelivery?: string;\n  lastUpdated: string;\n}\n\n/**\n * Central Order Orchestration Service\n *\n * This service provides a unified interface for:\n * - Automatic reorder processing\n * - Multi-supplier order creation and management\n * - Order status tracking\n * - Inventory updates after delivery\n */\nexport class CentralOrderService {\n  private supplierSplittingService = useOrderListsSupplierSplitting();\n\n  /**\n   * Process automatic reorder for a practice\n   * Analyzes stock levels and creates orders where needed\n   */\n  async processAutomaticReorder(\n    config: AutoReorderConfig\n  ): Promise<OrderResult> {\n    try {\n      orderLogger.info(\n        `Starting automatic reorder for practice ${config.practiceId}`\n      );\n\n      // 1. Get low stock items that need reordering\n      const lowStockItems = await this.getLowStockItems(\n        config.practiceId,\n        config.locationId\n      );\n\n      if (lowStockItems.length === 0) {\n        orderLogger.info('No items need reordering');\n        return {\n          orderId: '',\n          supplierOrders: [],\n          sendingResults: [],\n          totalItems: 0,\n          totalValue: 0,\n          status: 'success',\n          errors: [],\n        };\n      }\n\n      // 2. Generate reorder suggestions\n      const reorderSuggestions =\n        await this.generateReorderSuggestions(lowStockItems);\n\n      // 3. Check approval requirements\n      const totalValue = reorderSuggestions.reduce(\n        (sum, item) => sum + item.calculated_order_quantity * item.unit_price,\n        0\n      );\n\n      if (\n        config.approvalRequired ||\n        (config.maxOrderValue && totalValue > config.maxOrderValue)\n      ) {\n        // Create draft order list for approval\n        return await this.createDraftOrderForApproval(\n          config.practiceId,\n          reorderSuggestions\n        );\n      }\n\n      // 4. Process automatic order\n      return await this.createMultiSupplierOrder(reorderSuggestions);\n    } catch (error) {\n      orderLogger.error(\n        'Error in automatic reorder process:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Create multi-supplier order from reorder suggestions\n   */\n  async createMultiSupplierOrder(\n    items: ExtendedReorderSuggestion[]\n  ): Promise<OrderResult> {\n    try {\n      orderLogger.info(\n        `Creating multi-supplier order for ${items.length} items`\n      );\n\n      // 1. Split items by supplier\n      const splitResult =\n        await this.supplierSplittingService.splitOrderBySuppliers(items as any);\n\n      // 2. Send orders to suppliers\n      const sendingResults = await this.sendOrdersToSuppliers(\n        splitResult.supplier_orders\n      );\n\n      // 3. Record orders in database\n      await this.recordSupplierOrders(\n        splitResult.supplier_orders,\n        sendingResults\n      );\n\n      // 4. Update stock reservations\n      await this.updateStockReservations(items, 'reserve');\n\n      const totalItems = splitResult.supplier_orders.reduce(\n        (sum, order) => sum + order.total_items,\n        0\n      );\n      const totalValue = splitResult.supplier_orders.reduce(\n        (sum, order) => sum + (order.total_cost ?? 0),\n        0\n      );\n\n      const errors = sendingResults\n        .filter(result => result.status === 'failed')\n        .map(result => result.error_message || 'Unknown error');\n\n      return {\n        orderId: this.generateOrderId(),\n        supplierOrders: splitResult.supplier_orders,\n        sendingResults,\n        totalItems,\n        totalValue,\n        status:\n          errors.length === 0\n            ? 'success'\n            : errors.length < sendingResults.length\n              ? 'partial'\n              : 'failed',\n        errors,\n      };\n    } catch (error) {\n      orderLogger.error(\n        'Error creating multi-supplier order:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Send orders to multiple suppliers\n   */\n  async sendOrdersToSuppliers(\n    orders: SupplierOrder[]\n  ): Promise<OrderSendingResult[]> {\n    try {\n      const results =\n        await this.supplierSplittingService.sendOrdersToSuppliers(orders);\n\n      // Create notifications for successful orders\n      for (const result of results) {\n        const practiceId = orders[0]?.practice_id || '';\n        if (result.status === 'success') {\n          await this.createOrderNotification(\n            result.supplier_id,\n            result.supplier_name,\n            result.order_reference || '',\n            'success',\n            practiceId\n          );\n        } else if (result.status === 'failed') {\n          await this.createOrderNotification(\n            result.supplier_id,\n            result.supplier_name,\n            result.order_reference || '',\n            'error',\n            practiceId,\n            result.error_message ?? ''\n          );\n        }\n      }\n\n      return results;\n    } catch (error) {\n      orderLogger.error(\n        'Error sending orders to suppliers:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Track order status across suppliers\n   */\n  async trackOrderStatus(orderIds: string[]): Promise<OrderStatus[]> {\n    try {\n      // Boundary type for Supabase response - aligned with actual DB columns\n      interface SupplierOrderRow {\n        id: string;\n        status: string | null;\n        tracking_info: Record<string, unknown> | null;\n        delivery_expected: string | null;\n        delivery_confirmed_at: string | null;\n        updated_at: string | null;\n        suppliers: { id: string; name: string } | null;\n      }\n\n      const { data, error } = await supabase\n        .from('supplier_orders')\n        .select(\n          `\n          id,\n          status,\n          delivery_expected,\n          delivery_confirmed_at,\n          tracking_info,\n          updated_at,\n          suppliers(id, name)\n        `\n        )\n        .in('id', orderIds);\n\n      if (error) throw error;\n\n      return (((data as SupplierOrderRow[] | null) || []).map(order => ({\n        orderId: order.id,\n        supplierOrderId: order.id,\n        supplierId: order.suppliers?.id ?? '',\n        supplierName: order.suppliers?.name ?? 'Unknown',\n        status: order.status ?? 'unknown',\n        orderReference: order.id,\n        trackingNumber: (order.tracking_info as any)?.trackingNumber ?? null,\n        estimatedDelivery: order.delivery_expected ?? null,\n        actualDelivery: order.delivery_confirmed_at ?? null,\n        lastUpdated: order.updated_at ?? null,\n      })) as any);\n    } catch (error) {\n      orderLogger.error(\n        'Error tracking order status:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Update stock levels after delivery confirmation\n   * TODO: Implement once supplier_order_items table is available\n   */\n  async updateStockAfterDelivery(orderId: string): Promise<void> {\n    try {\n      orderLogger.info(`Updating stock after delivery for order ${orderId}`);\n\n      // TODO: This functionality requires supplier_order_items table\n      // which doesn't exist yet in the schema. Needs to be implemented\n      // when the proper schema is in place.\n      orderLogger.warn(\n        'updateStockAfterDelivery not yet implemented - requires supplier_order_items table',\n        { orderId }\n      );\n\n      return;\n\n      // Get order items - PLACEHOLDER CODE\n      /*\n      const { data: orderItemsResult, error } = await supabase\n        .from('supplier_order_items')\n        .select(\n          `\n          product_id,\n          quantity_ordered,\n          quantity_received\n        `\n        )\n        .eq('supplier_order_id', orderId);\n\n      if (error) throw error;\n\n      const orderItems = (orderItemsResult as any) ?? [];\n\n      for (const item of orderItems) {\n        // TODO: Implement stock update logic\n      }\n\n      // Update stock reservations (unreserve)\n      await this.updateStockReservations(\n        orderItems.map((item: any) => ({\n          product_id: item.product_id,\n          calculated_order_quantity: item.quantity_ordered,\n          practice_id: '', // TODO\n          location_id: '', // TODO\n        })) as ReorderSuggestion[],\n        'unreserve'\n      );\n      */\n\n      // Create notification\n      /*\n      await supabase.from('notifications').insert({\n        practice_id: '', // TODO\n        title: 'Bestelling ontvangen',\n        message: `Voorraad is bijgewerkt`,\n        category: 'order_update',\n        priority: 'normal',\n        action_url: '/inventory/levels',\n        action_label: 'Bekijk voorraad',\n      });\n\n      orderLogger.info('Successfully updated stock');\n      */\n    } catch (error) {\n      orderLogger.error(\n        'Error updating stock after delivery:',\n        error as Record<string, unknown>\n      );\n      throw error;\n    }\n  }\n\n  // Private helper methods\n\n  private async getLowStockItems(\n    practiceId: string,\n    locationId?: string\n  ): Promise<LowStockItemDTO[]> {\n    const lowStockItems = await AnalyticsService.getLowStockItems(practiceId);\n\n    if (locationId) {\n      return lowStockItems.filter(item => item.locationId === locationId);\n    }\n\n    return lowStockItems;\n  }\n\n  private async generateReorderSuggestions(\n    lowStockItems: LowStockItemDTO[]\n  ): Promise<ExtendedReorderSuggestion[]> {\n    return lowStockItems.map(item => ({\n      product_id: item.productId,\n      product_name: item.productName,\n      sku: item.productSku ?? '',\n      location_id: item.locationId ?? '',\n      location_name: item.locationName ?? '',\n      current_stock: item.currentQuantity,\n      minimum_stock: item.minimumQuantity,\n      reorder_point: null,\n      calculated_order_quantity: Math.max(\n        item.minimumQuantity * 2 - item.currentQuantity,\n        item.minimumQuantity\n      ),\n      unit_price: item.unitPrice ?? 0,\n      preferred_supplier_id: item.preferredSupplierId ?? null,\n      preferred_supplier_name: '', // Will be populated by supplier splitting\n      urgency_level:\n        item.currentQuantity <= 0\n          ? 'urgent'\n          : item.currentQuantity <= item.minimumQuantity / 2\n            ? 'high'\n            : 'medium',\n      estimated_cost: 0, // Will be calculated\n      lead_time_days: 7, // Default\n      practice_id: '', // Will be set by caller\n      last_ordered_at: null,\n      stock_trend: 'decreasing',\n    }));\n  }\n\n  private async createDraftOrderForApproval(\n    practiceId: string,\n    items: ExtendedReorderSuggestion[]\n  ): Promise<OrderResult> {\n    // Create draft order list for manual approval\n    const totalValue = items.reduce(\n      (sum, item) => sum + item.calculated_order_quantity * item.unit_price,\n      0\n    );\n\n    const { data: orderList, error } = await supabase\n      .from('order_lists')\n      .insert({\n        practice_id: practiceId,\n        location_id: items[0]?.location_id ?? '', // Use first item's location\n        name: `Auto-reorder ${new Date().toLocaleDateString()}`,\n        description: 'Automatic reorder requiring approval',\n        status: 'draft',\n        total_items: items.length,\n        total_value: totalValue,\n      } as any) // Cast to any due to optional field differences\n      .select()\n      .single();\n\n    if (error) throw error;\n    if (!orderList) throw new Error('Failed to create order list');\n\n    // Add items to order list\n    const orderItems = items.map(item => ({\n      order_list_id: orderList.id,\n      product_id: item.product_id,\n      current_stock: item.current_stock,\n      minimum_stock: item.minimum_stock,\n      suggested_quantity: item.calculated_order_quantity,\n      ordered_quantity: item.calculated_order_quantity,\n      unit_price: item.unit_price ?? 0,\n    }));\n\n    await supabase.from('order_list_items').insert(orderItems as any);\n\n    return {\n      orderId: orderList.id,\n      supplierOrders: [],\n      sendingResults: [],\n      totalItems: items.length,\n      totalValue: totalValue,\n      status: 'success',\n      errors: [],\n    };\n  }\n\n  private async recordSupplierOrders(\n    supplierOrders: SupplierOrder[],\n    sendingResults: OrderSendingResult[]\n  ): Promise<void> {\n    // Record orders in supplier_orders table for tracking\n    for (let i = 0; i < supplierOrders.length; i++) {\n      const order = supplierOrders[i];\n      const result = sendingResults[i];\n\n      if (!order || !result) {\n        orderLogger.warn('Skipping order record due to missing data', { i });\n        continue;\n      }\n\n      await supabase.from('supplier_orders').insert({\n        supplier_id: order.supplier_id,\n        order_list_id: null,\n        method_used: order.order_method,\n        sent_at: result.sent_at ?? new Date().toISOString(),\n        delivery_expected: order.estimated_delivery_date ?? null,\n        total_items: order.total_items ?? null,\n        total_value: (order as any).total_value ?? null,\n        response_data: {\n          status: result.status,\n          order_reference: result.order_reference ?? null,\n          tracking_info: result.tracking_info ?? null,\n          error: result.error_message ?? null,\n        },\n        status: result.status,\n        tracking_info: result.tracking_info ?? null,\n      } as any); // Cast to any due to complex types\n    }\n  }\n\n  private async updateStockReservations(\n    items: ExtendedReorderSuggestion[],\n    action: 'reserve' | 'unreserve'\n  ): Promise<void> {\n    for (const item of items) {\n      const quantityChange =\n        action === 'reserve'\n          ? item.calculated_order_quantity\n          : -item.calculated_order_quantity;\n\n      if (!item.location_id) {\n        orderLogger.warn('Skipping reservation update - no location_id', {\n          item,\n        });\n        continue;\n      }\n\n      // Get current stock level\n      const { data: stockLevel } = await supabase\n        .from('stock_levels')\n        .select('reserved_quantity')\n        .eq('product_id', item.product_id)\n        .eq('location_id', item.location_id)\n        .single();\n\n      const currentReserved = stockLevel?.reserved_quantity ?? 0;\n      const newReserved = currentReserved + quantityChange;\n\n      await supabase\n        .from('stock_levels')\n        .update({\n          reserved_quantity: Math.max(0, newReserved),\n        })\n        .eq('product_id', item.product_id)\n        .eq('location_id', item.location_id);\n    }\n  }\n\n  private async createOrderNotification(\n    supplierId: string,\n    supplierName: string,\n    orderReference: string,\n    type: 'success' | 'error',\n    practiceId: string,\n    errorMessage?: string\n  ): Promise<void> {\n    const title =\n      type === 'success' ? 'Bestelling verzonden' : 'Bestelling mislukt';\n\n    const message =\n      type === 'success'\n        ? `Bestelling ${orderReference} is succesvol verzonden naar ${supplierName}`\n        : `Bestelling naar ${supplierName} is mislukt: ${errorMessage}`;\n\n    await supabase.from('notifications').insert({\n      practice_id: practiceId,\n      title,\n      message,\n      category: 'order_update',\n      priority: type === 'error' ? 'high' : 'normal',\n      action_url: '/orders',\n      action_label: 'Bekijk bestellingen',\n    } as any); // Cast due to optional field differences\n  }\n\n  private generateOrderId(): string {\n    return `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n\n// Export singleton instance\nexport const centralOrderService = new CentralOrderService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\orderProcessing.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1192, 1195], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1192, 1195], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'emailBody' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 413,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 413,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 438,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 438,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11325, 11328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11325, 11328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 451,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 451,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11724, 11727], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11724, 11727], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 494,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 494,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12718, 12721], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12718, 12721], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/services/supabase';\nimport type {\n  Order,\n  OrderInsert,\n  OrderItemInsert,\n  OrderWithItems,\n} from '@/types/supabase';\nimport type { MagentoOrder } from '@/types/magento';\nimport { useAuthStore } from '@/stores/auth';\n\nexport class OrderProcessingService {\n  /**\n   * Create a new order from shopping cart\n   */\n  async createOrderFromCart(cartId: string, notes?: string): Promise<Order> {\n    const authStore = useAuthStore();\n    const user = authStore.user;\n    const practiceId = authStore.clinicId;\n\n    if (!user || !practiceId) {\n      throw new Error('User not authenticated or no practice selected');\n    }\n\n    // Get cart details\n    const { data: cart, error: cartError } = await supabase\n      .from('shopping_carts')\n      .select(\n        `\n        *,\n        shopping_cart_items (\n          *,\n          products (*)\n        )\n      `\n      )\n      .eq('id', cartId)\n      .single();\n\n    if (cartError || !cart) {\n      throw new Error('Shopping cart not found');\n    }\n\n    // Generate order number\n    const { data: orderNumber, error: numberError } = await supabase.rpc(\n      'generate_order_number',\n      { practice_uuid: practiceId } as any\n    );\n\n    if (numberError || !orderNumber) {\n      throw new Error('Failed to generate order number');\n    }\n\n    // Create order\n    const orderData: OrderInsert = {\n      practice_id: practiceId,\n      cart_id: cartId,\n      order_number: orderNumber,\n      status: 'draft',\n      notes: notes,\n      created_by: user.id,\n    };\n\n    const { data: order, error: orderError } = await supabase\n      .from('orders')\n      .insert(orderData)\n      .select()\n      .single();\n\n    if (orderError || !order) {\n      throw new Error('Failed to create order');\n    }\n\n    // Create order items from cart items\n    if (cart.shopping_cart_items && cart.shopping_cart_items.length > 0) {\n      const orderItems: OrderItemInsert[] = cart.shopping_cart_items.map(\n        item => ({\n          order_id: order.id,\n          product_id: item.product_id,\n          quantity: item.quantity,\n          unit_price: item.products?.price || 0,\n          total_price: (item.products?.price || 0) * item.quantity,\n          notes: item.notes,\n        })\n      );\n\n      const { error: itemsError } = await supabase\n        .from('order_items')\n        .insert(orderItems);\n\n      if (itemsError) {\n        throw new Error('Failed to create order items');\n      }\n    }\n\n    // Update cart status\n    await supabase\n      .from('shopping_carts')\n      .update({ status: 'ordered' })\n      .eq('id', cartId);\n\n    return order;\n  }\n\n  /**\n   * Get orders for current practice\n   */\n  async getOrders(filters?: {\n    status?: string;\n    supplier_id?: string;\n    date_from?: string;\n    date_to?: string;\n  }): Promise<OrderWithItems[]> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n\n    if (!practiceId) {\n      throw new Error('No practice selected');\n    }\n\n    let query = supabase\n      .from('orders')\n      .select(\n        `\n        *,\n        order_items (\n          *,\n          products (*)\n        ),\n        suppliers (*)\n      `\n      )\n      .eq('practice_id', practiceId)\n      .order('order_date', { ascending: false });\n\n    if (filters?.status) {\n      query = query.eq('status', filters.status);\n    }\n    if (filters?.supplier_id) {\n      query = query.eq('supplier_id', filters.supplier_id);\n    }\n    if (filters?.date_from) {\n      query = query.gte('order_date', filters.date_from);\n    }\n    if (filters?.date_to) {\n      query = query.lte('order_date', filters.date_to);\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      throw new Error('Failed to get orders');\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Update order status\n   */\n  async updateOrderStatus(\n    orderId: string,\n    status: string,\n    notes?: string\n  ): Promise<void> {\n    const updateData: Partial<Order> = {\n      status,\n      updated_at: new Date().toISOString(),\n    };\n    if (notes) {\n      updateData.notes = notes;\n    }\n\n    const { error } = await supabase\n      .from('orders')\n      .update(updateData)\n      .eq('id', orderId);\n\n    if (error) {\n      throw new Error('Failed to update order status');\n    }\n  }\n\n  /**\n   * Export order to CSV\n   */\n  async exportOrderToCSV(orderId: string): Promise<Blob> {\n    const orders = await this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    const csvHeaders = [\n      'Order Number',\n      'Product SKU',\n      'Product Name',\n      'Quantity',\n      'Unit Price',\n      'Total Price',\n      'Notes',\n    ];\n\n    const csvRows =\n      order.order_items?.map(item => [\n        order.order_number,\n        item.products?.sku || '',\n        item.products?.name || '',\n        item.quantity.toString(),\n        (item.unit_price || 0).toFixed(2),\n        (item.total_price || 0).toFixed(2),\n        item.notes || '',\n      ]) || [];\n\n    const csvContent = [\n      csvHeaders.join(','),\n      ...csvRows.map(row => row.map(field => `\"${field}\"`).join(',')),\n    ].join('\\n');\n\n    return new Blob([csvContent], { type: 'text/csv' });\n  }\n\n  /**\n   * Export multiple orders to CSV\n   */\n  async exportOrdersToCSV(orderIds: string[]): Promise<Blob> {\n    const orders = await this.getOrders();\n    const filteredOrders = orders.filter(o => orderIds.includes(o.id));\n\n    const csvHeaders = [\n      'Order Number',\n      'Order Date',\n      'Status',\n      'Supplier',\n      'Product SKU',\n      'Product Name',\n      'Quantity',\n      'Unit Price',\n      'Total Price',\n      'Order Notes',\n      'Item Notes',\n    ];\n\n    const csvRows: string[][] = [];\n\n    filteredOrders.forEach(order => {\n      if (order.order_items && order.order_items.length > 0) {\n        order.order_items.forEach(item => {\n          csvRows.push([\n            order.order_number,\n            order.order_date\n              ? new Date(order.order_date).toLocaleDateString()\n              : '',\n            order.status ?? '',\n            order.suppliers?.name || '',\n            item.products?.sku || '',\n            item.products?.name || '',\n            item.quantity.toString(),\n            (item.unit_price || 0).toFixed(2),\n            (item.total_price || 0).toFixed(2),\n            order.notes || '',\n            item.notes || '',\n          ]);\n        });\n      } else {\n        csvRows.push([\n          order.order_number,\n          order.order_date\n            ? new Date(order.order_date).toLocaleDateString()\n            : '',\n          order.status ?? '',\n          order.suppliers?.name || '',\n          '',\n          '',\n          '0',\n          '0.00',\n          '0.00',\n          order.notes || '',\n          '',\n        ]);\n      }\n    });\n\n    const csvContent = [\n      csvHeaders.join(','),\n      ...csvRows.map(row => row.map(field => `\"${field}\"`).join(',')),\n    ].join('\\n');\n\n    return new Blob([csvContent], { type: 'text/csv' });\n  }\n\n  /**\n   * Generate PDF for order\n   */\n  async generateOrderPDF(orderId: string): Promise<Blob> {\n    // For now, return HTML content that can be converted to PDF\n    // In a full implementation, you'd use a library like jsPDF or html2canvas\n    const orders = await this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    const htmlContent = this.generateOrderHTML(order);\n    return new Blob([htmlContent], { type: 'text/html' });\n  }\n\n  /**\n   * Generate HTML template for order\n   */\n  private generateOrderHTML(order: OrderWithItems): string {\n    const itemsHTML =\n      order.order_items\n        ?.map(\n          item => `\n      <tr>\n        <td>${item.products?.sku || ''}</td>\n        <td>${item.products?.name || ''}</td>\n        <td>${item.quantity}</td>\n        <td>€${(item.unit_price || 0).toFixed(2)}</td>\n        <td>€${(item.total_price || 0).toFixed(2)}</td>\n      </tr>\n    `\n        )\n        .join('') || '';\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Order ${order.order_number}</title>\n        <style>\n          body { font-family: Arial, sans-serif; margin: 20px; }\n          .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 20px; }\n          .order-info { margin-bottom: 20px; }\n          table { width: 100%; border-collapse: collapse; }\n          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n          th { background-color: #f2f2f2; }\n          .total { font-weight: bold; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Remcura - Bestelling</h1>\n          <p><strong>Order Number:</strong> ${order.order_number}</p>\n          <p><strong>Order Date:</strong> ${\n            order.order_date\n              ? new Date(order.order_date).toLocaleDateString()\n              : 'N/A'\n          }</p>\n          <p><strong>Status:</strong> ${order.status}</p>\n          ${\n            order.suppliers\n              ? `<p><strong>Supplier:</strong> ${order.suppliers.name}</p>`\n              : ''\n          }\n        </div>\n        \n        <div class=\"order-info\">\n          ${order.notes ? `<p><strong>Notes:</strong> ${order.notes}</p>` : ''}\n        </div>\n\n        <table>\n          <thead>\n            <tr>\n              <th>SKU</th>\n              <th>Product</th>\n              <th>Quantity</th>\n              <th>Unit Price</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${itemsHTML}\n          </tbody>\n          <tfoot>\n            <tr class=\"total\">\n              <td colspan=\"4\"><strong>Total Items:</strong></td>\n              <td><strong>${order.total_items}</strong></td>\n            </tr>\n            <tr class=\"total\">\n              <td colspan=\"4\"><strong>Total Amount:</strong></td>\n              <td><strong>€${(order.total_amount || 0).toFixed(2)}</strong></td>\n            </tr>\n          </tfoot>\n        </table>\n      </body>\n      </html>\n    `;\n  }\n\n  /**\n   * Send order via email\n   */\n  async sendOrderByEmail(\n    orderId: string,\n    recipientEmail: string,\n    subject?: string\n  ): Promise<void> {\n    // This would integrate with an email service like SendGrid, Mailgun, etc.\n    // For now, we'll simulate the functionality\n\n    const orders = await this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    const emailSubject = subject || `Order ${order.order_number} - Remcura`;\n    const emailBody = this.generateOrderHTML(order);\n\n    // In a real implementation, you would call your email service here\n    // Debug email logging removed for production\n\n    // Log the activity\n    await this.logActivity('order_emailed', {\n      order_id: orderId,\n      recipient: recipientEmail,\n      subject: emailSubject,\n    });\n  }\n\n  /**\n   * Submit order to Magento API\n   */\n  async submitOrderToMagento(orderId: string): Promise<MagentoOrder> {\n    const orders = await this.getOrders();\n    const order = orders.find(o => o.id === orderId);\n\n    if (!order) {\n      throw new Error('Order not found');\n    }\n\n    // Convert to Magento format\n    const magentoOrder: any = {\n      status: 'pending',\n      items:\n        order.order_items?.map(item => ({\n          sku: item.products?.sku || '',\n          qty_ordered: item.quantity,\n          price: item.unit_price || 0,\n          product_type: 'simple',\n        })) || [],\n    };\n\n    // In a real implementation, you would call the Magento API here\n    // For now, we'll simulate it\n    const simulatedResponse: any = {\n      ...magentoOrder,\n      id: Math.floor(Math.random() * 10000),\n      increment_id: `MAG-${Date.now()}`,\n    };\n\n    // Update order with Magento ID\n    await supabase\n      .from('orders')\n      .update({\n        magento_order_id: simulatedResponse.id,\n        status: 'submitted',\n      })\n      .eq('id', orderId);\n\n    // Log the activity\n    await this.logActivity('order_submitted_magento', {\n      order_id: orderId,\n      magento_order_id: simulatedResponse.id,\n    });\n\n    return simulatedResponse;\n  }\n\n  /**\n   * Download file helper\n   */\n  downloadFile(blob: Blob, filename: string): void {\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Log activity\n   */\n  private async logActivity(\n    activityType: string,\n    data: Record<string, any>\n  ): Promise<void> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.clinicId;\n    const userId = authStore.user?.id;\n\n    if (practiceId) {\n      await supabase.from('usage_analytics').insert({\n        practice_id: practiceId,\n        user_id: userId || null,\n        event_type: activityType,\n        event_data: data,\n      });\n    }\n  }\n}\n\nexport const orderProcessingService = new OrderProcessingService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\permanentUsers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1204, 1207], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1204, 1207], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 98,
        "column": 7,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 98,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": { "range": [2673, 2709], "text": "// @ts-expect-error - Json type complexity" },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 109,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 109,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3098, 3101], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3098, 3101], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 193,
        "column": 7,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 193,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [5749, 5820],
              "text": "// @ts-expect-error - Supabase type complexity with department null/undefined"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 364,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 364,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [10860, 10861], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 365,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 365,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [10891, 10892], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 366,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 366,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [10921, 10922], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\nimport { v4 as uuidv4 } from 'uuid';\nimport type { PermanentUser } from 'src/types/supabase';\nimport type { TablesInsert } from 'src/types/supabase.generated';\n\n// 🚀 PERMANENT USERS SERVICE\n// Handles the complete upgrade flow from guest to permanent team member\n\n// Extended interface with UI properties\nexport interface EnhancedPermanentUser extends PermanentUser {\n  initials?: string;\n  avatarColor?: string;\n  isOnline?: boolean;\n}\n\nexport interface CreatePermanentUserRequest {\n  practice_id: string;\n  invite_id: string;\n  full_name: string;\n  role: string;\n  department?: string;\n  login_method: 'magic_code' | 'email_password' | 'device_remember';\n  email?: string;\n  password?: string;\n  device_fingerprint?: string;\n}\n\nexport interface LoginResult {\n  success: boolean;\n  user?: PermanentUser;\n  session_token?: string;\n  login_method?: string;\n  error?: string;\n}\n\n// Remove duplicate interface - use from types\n\nexport class PermanentUserService {\n  // 🎯 DETECT LOGIN TYPE - Smart detection between invite codes and personal codes\n  static async detectLoginType(code: string): Promise<{\n    type: 'invite' | 'personal' | 'invalid';\n    data?: any;\n  }> {\n    try {\n      // First check if it's a personal magic code\n      const personalResult = await this.validatePersonalMagicCode(code);\n      if (personalResult.success) {\n        return { type: 'personal', data: personalResult.user };\n      }\n\n      // Then check if it's an invite code\n      const inviteResult = await this.validateInviteCode(code);\n      if (inviteResult.success) {\n        return { type: 'invite', data: inviteResult.invite };\n      }\n\n      return { type: 'invalid' };\n    } catch (error) {\n      console.error('Error detecting login type:', error);\n      return { type: 'invalid' };\n    }\n  }\n\n  // 🔐 VALIDATE PERSONAL MAGIC CODE\n  static async validatePersonalMagicCode(code: string): Promise<LoginResult> {\n    try {\n      const { data, error } = await supabase.rpc(\n        'validate_personal_magic_code',\n        {\n          magic_code: code,\n        }\n      );\n\n      if (error) throw error;\n\n      if (\n        data &&\n        typeof data === 'object' &&\n        'success' in data &&\n        data.success\n      ) {\n        // Create session token\n        const sessionToken = this.generateSessionToken();\n        await this.createUserSession(\n          data.user_id as string,\n          'magic_code',\n          sessionToken\n        );\n\n        return {\n          success: true,\n          user: data as PermanentUser,\n          session_token: sessionToken,\n          login_method: 'personal_magic_code',\n        };\n      }\n\n      // @ts-ignore - Json type complexity\n      return { success: false, error: data?.error || 'Invalid magic code' };\n    } catch (error) {\n      console.error('Error validating personal magic code:', error);\n      return { success: false, error: 'Invalid magic code' };\n    }\n  }\n\n  // 📧 VALIDATE INVITE CODE (existing magic invite)\n  static async validateInviteCode(code: string): Promise<{\n    success: boolean;\n    invite?: any;\n    error?: string;\n  }> {\n    try {\n      const { data, error } = await supabase\n        .from('magic_invites')\n        .select(\n          `\n          *,\n          practices!inner(id, name)\n        `\n        )\n        .eq('magic_code', code)\n        .eq('is_active', true)\n        .gt('max_uses', 'current_uses')\n        .or('expires_at.is.null,expires_at.gt.' + new Date().toISOString())\n        .single();\n\n      if (error || !data) {\n        return { success: false, error: 'Invalid or expired invite code' };\n      }\n\n      return { success: true, invite: data };\n    } catch (error) {\n      console.error('Error validating invite code:', error);\n      return { success: false, error: 'Invalid invite code' };\n    }\n  }\n\n  // ⚡ CREATE PERMANENT USER - The upgrade process\n  static async createPermanentUser(\n    request: CreatePermanentUserRequest\n  ): Promise<{\n    success: boolean;\n    user?: PermanentUser;\n    personal_code?: string;\n    error?: string;\n  }> {\n    try {\n      // Generate personal magic code if using magic_code method\n      let personalMagicCode = null;\n      if (request.login_method === 'magic_code') {\n        // Get practice name for code generation\n        const { data: practice } = await supabase\n          .from('practices')\n          .select('name')\n          .eq('id', request.practice_id)\n          .single();\n\n        personalMagicCode = await this.generatePersonalMagicCode(\n          request.full_name,\n          (practice && practice.name) || 'PRACTICE'\n        );\n      }\n\n      // Hash password if using email/password\n      let passwordHash = null;\n      if (request.login_method === 'email_password' && request.password) {\n        passwordHash = await this.hashPassword(request.password);\n      }\n\n      // Create the permanent user\n      const userData = {\n        id: uuidv4(),\n        practice_id: request.practice_id,\n        full_name: request.full_name,\n        email: request.email || null,\n        personal_magic_code: personalMagicCode,\n        magic_code_enabled: request.login_method === 'magic_code',\n        email_login_enabled: request.login_method === 'email_password',\n        password_hash: passwordHash,\n        device_remember_enabled: request.login_method === 'device_remember',\n        device_tokens: [], // JSON field for device authentication\n        role: request.role,\n        department: request.department || null,\n        permissions: {},\n        is_active: true,\n        login_count: 0,\n        preferred_login_method: request.login_method,\n        created_from_invite_id: request.invite_id,\n        timezone: 'Europe/Amsterdam',\n        language: 'nl',\n      };\n\n      // @ts-ignore - Supabase type complexity with department null/undefined\n      const { data: newUser, error } = await supabase\n        .from('permanent_users')\n        .insert([userData])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Mark invite as converted\n      await supabase\n        .from('magic_invites')\n        .update({\n          converted_to_user_id: newUser.id,\n          conversion_completed_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', request.invite_id);\n\n      // Create device token array entry if requested\n      if (\n        request.login_method === 'device_remember' &&\n        request.device_fingerprint\n      ) {\n        await supabase\n          .from('permanent_users')\n          .update({\n            device_tokens: [\n              {\n                fingerprint: request.device_fingerprint,\n                created_at: new Date().toISOString(),\n              },\n            ],\n          })\n          .eq('id', newUser.id);\n      }\n\n      return {\n        success: true,\n        user: newUser,\n        personal_code: personalMagicCode || '',\n      };\n    } catch (error) {\n      console.error('Error creating permanent user:', error);\n      return { success: false, error: 'Failed to create permanent user' };\n    }\n  }\n\n  // 🎲 GENERATE PERSONAL MAGIC CODE\n  static async generatePersonalMagicCode(\n    fullName: string | undefined,\n    practiceName: string\n  ): Promise<string> {\n    try {\n      const { data, error } = await supabase.rpc(\n        'generate_personal_magic_code',\n        {\n          user_name: fullName || 'USER',\n          practice_name: practiceName,\n        }\n      );\n\n      if (error) throw error;\n      return data as string;\n    } catch (error) {\n      console.error('Error generating personal magic code:', error);\n      // Fallback generation\n      const nameToUse: string = fullName ? fullName.toString() : 'USER';\n      const nameParts = nameToUse.split(' ');\n      const cleanName = (nameParts[0] || 'USER')\n        .toUpperCase()\n        .replace(/[^A-Z]/g, '');\n      const year = new Date().getFullYear();\n      return `🏥${cleanName}${year}`;\n    }\n  }\n\n  // 🔒 PASSWORD UTILITIES\n  static async hashPassword(password: string): Promise<string> {\n    // In a real implementation, use bcrypt or similar\n    // For now, just base64 encode (NOT SECURE - just for demo)\n    return btoa(password);\n  }\n\n  static async verifyPassword(\n    password: string,\n    hash: string\n  ): Promise<boolean> {\n    // In a real implementation, use bcrypt.compare\n    return btoa(password) === hash;\n  }\n\n  // 📱 DEVICE TOKEN MANAGEMENT - Now handled via permanent_users.device_tokens JSON field\n  // Legacy device_tokens table has been removed - functionality moved to user JSON field\n\n  // 🎫 SESSION MANAGEMENT\n  static generateSessionToken(): string {\n    return uuidv4() + '-' + Date.now();\n  }\n\n  static async createUserSession(\n    userId: string,\n    loginMethod: string,\n    sessionToken: string\n  ): Promise<void> {\n    try {\n      // Get practice_id from user\n      const { data: user } = await supabase\n        .from('permanent_users')\n        .select('practice_id')\n        .eq('id', userId)\n        .single();\n\n      const sessionData: TablesInsert<'user_sessions'> = {\n        id: uuidv4(),\n        user_id: userId,\n        practice_id: user?.practice_id ?? '',\n        session_token: sessionToken,\n        login_method: loginMethod,\n        device_fingerprint: this.getDeviceFingerprint(),\n        ip_address: await this.getClientIP(),\n        user_agent: navigator.userAgent,\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        is_active: true,\n      };\n\n      await supabase.from('user_sessions').insert([sessionData]);\n    } catch (error) {\n      console.error('Error creating user session:', error);\n    }\n  }\n\n  // 👥 GET PRACTICE TEAM\n  static async getPracticeTeam(\n    practiceId: string\n  ): Promise<EnhancedPermanentUser[]> {\n    try {\n      const { data, error } = await supabase\n        .from('permanent_users')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .eq('is_active', true)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return (data || []) as EnhancedPermanentUser[];\n    } catch (error) {\n      console.error('Error getting practice team:', error);\n      return [];\n    }\n  }\n\n  // 🔧 UTILITY FUNCTIONS\n  static getDeviceName(): string {\n    const userAgent = navigator.userAgent;\n    if (/iPhone|iPad|iPod/.test(userAgent)) {\n      return /iPad/.test(userAgent) ? 'iPad' : 'iPhone';\n    } else if (/Android/.test(userAgent)) {\n      return 'Android Device';\n    } else if (/Mac/.test(userAgent)) {\n      return 'Mac';\n    } else if (/Windows/.test(userAgent)) {\n      return 'Windows PC';\n    }\n    return 'Unknown Device';\n  }\n\n  static getDeviceFingerprint(): string {\n    // Simple device fingerprinting (in production, use a proper library)\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx!.textBaseline = 'top';\n    ctx!.font = '14px Arial';\n    ctx!.fillText('Device fingerprint', 2, 2);\n\n    const fingerprint = [\n      navigator.userAgent,\n      navigator.language,\n      screen.width + 'x' + screen.height,\n      new Date().getTimezoneOffset(),\n      canvas.toDataURL(),\n    ].join('|');\n\n    return btoa(fingerprint).substring(0, 32);\n  }\n\n  static generateTokenHash(): string {\n    return uuidv4().replace(/-/g, '');\n  }\n\n  static async getClientIP(): Promise<string> {\n    try {\n      const response = await fetch('https://api.ipify.org?format=json');\n      const data = await response.json();\n      return data.ip;\n    } catch {\n      return '0.0.0.0';\n    }\n  }\n\n  // 📧 EMAIL LOGIN\n  static async loginWithEmail(\n    email: string,\n    password: string\n  ): Promise<LoginResult> {\n    try {\n      const { data: user, error } = await supabase\n        .from('permanent_users')\n        .select('*')\n        .eq('email', email)\n        .eq('email_login_enabled', true)\n        .eq('is_active', true)\n        .single();\n\n      if (error || !user) {\n        return { success: false, error: 'Invalid email or password' };\n      }\n\n      const isValidPassword = await this.verifyPassword(\n        password,\n        user.password_hash || ''\n      );\n      if (!isValidPassword) {\n        return { success: false, error: 'Invalid email or password' };\n      }\n\n      // Update login stats\n      await supabase\n        .from('permanent_users')\n        .update({\n          last_login_at: new Date().toISOString(),\n          login_count: (user.login_count || 0) + 1,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', user.id);\n\n      // Create session\n      const sessionToken = this.generateSessionToken();\n      await this.createUserSession(user.id, 'email_password', sessionToken);\n\n      return {\n        success: true,\n        user: user as PermanentUser,\n        session_token: sessionToken,\n        login_method: 'email_password',\n      };\n    } catch (error) {\n      console.error('Error logging in with email:', error);\n      return { success: false, error: 'Login failed' };\n    }\n  }\n}\n\nexport default PermanentUserService;\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\permissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 148,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 148,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4399, 4402], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4399, 4402], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 149,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 149,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4452, 4455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4452, 4455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 271,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 271,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7835, 7838], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7835, 7838], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 272,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 272,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7888, 7891], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7888, 7891], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'authStore' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 362,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 362,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\nimport { useAuthStore } from 'src/stores/auth';\nimport type {\n  UserRole,\n  PermissionType,\n  ResourceType,\n  Permission,\n  RoleDefinition,\n} from '@/types/permissions';\nimport type { Database } from '@/types';\n\ntype PermissionRow =\n  Database['public']['Functions']['get_user_permissions']['Returns'][number];\n\nconst mapPermissionRow = (\n  row: PermissionRow,\n  resourceType: ResourceType\n): Permission => ({\n  permission_type: row.permission as PermissionType,\n  resource_type: resourceType,\n  resource_id: row.resource_id ?? undefined,\n  source: 'role',\n});\n\n// Role definitions for frontend display\nexport const ROLE_DEFINITIONS: Record<UserRole, RoleDefinition> = {\n  owner: {\n    role: 'owner',\n    displayName: 'Eigenaar',\n    description: 'Volledige toegang tot alle functies en instellingen',\n    permissions: [\n      { permission_type: 'admin', resource_type: 'all', source: 'role' },\n    ],\n  },\n  manager: {\n    role: 'manager',\n    displayName: 'Manager',\n    description: 'Operationele toegang tot producten, voorraad en bestellingen',\n    permissions: [\n      { permission_type: 'write', resource_type: 'products', source: 'role' },\n      { permission_type: 'write', resource_type: 'inventory', source: 'role' },\n      { permission_type: 'write', resource_type: 'orders', source: 'role' },\n      { permission_type: 'read', resource_type: 'analytics', source: 'role' },\n      { permission_type: 'read', resource_type: 'users', source: 'role' },\n    ],\n  },\n  assistant: {\n    role: 'assistant',\n    displayName: 'Assistent',\n    description: 'Algemene operationele toegang',\n    permissions: [\n      { permission_type: 'write', resource_type: 'products', source: 'role' },\n      { permission_type: 'write', resource_type: 'inventory', source: 'role' },\n      { permission_type: 'write', resource_type: 'orders', source: 'role' },\n      {\n        permission_type: 'read',\n        resource_type: 'analytics',\n        conditions: { basic_only: true },\n        source: 'role',\n      },\n    ],\n  },\n  logistics: {\n    role: 'logistics',\n    displayName: 'Logistiek',\n    description: 'Beperkt tot voorraadtelling en product viewing',\n    permissions: [\n      { permission_type: 'read', resource_type: 'products', source: 'role' },\n      {\n        permission_type: 'write',\n        resource_type: 'inventory',\n        conditions: { actions: ['count', 'adjust'] },\n        source: 'role',\n      },\n      { permission_type: 'read', resource_type: 'inventory', source: 'role' },\n    ],\n  },\n  member: {\n    role: 'member',\n    displayName: 'Lid',\n    description: 'Basistoegang tot producten en voorraad',\n    permissions: [\n      { permission_type: 'read', resource_type: 'products', source: 'role' },\n      { permission_type: 'read', resource_type: 'inventory', source: 'role' },\n      {\n        permission_type: 'write',\n        resource_type: 'orders',\n        conditions: { own_only: true },\n        source: 'role',\n      },\n    ],\n  },\n  guest: {\n    role: 'guest',\n    displayName: 'Gast',\n    description: 'Zeer beperkte toegang',\n    permissions: [\n      {\n        permission_type: 'read',\n        resource_type: 'products',\n        conditions: { limited: true },\n        source: 'role',\n      },\n      {\n        permission_type: 'read',\n        resource_type: 'inventory',\n        conditions: { limited: true },\n        source: 'role',\n      },\n    ],\n  },\n  platform_owner: {\n    role: 'platform_owner',\n    displayName: 'Platform Eigenaar',\n    description: 'Volledige platform en alle praktijk toegang',\n    permissions: [\n      { permission_type: 'admin', resource_type: 'all', source: 'role' },\n    ],\n  },\n};\n\nexport class PermissionService {\n  /**\n   * Check if current user has permission for a specific action\n   */\n  static async hasPermission(\n    permissionType: PermissionType,\n    resourceType: ResourceType,\n    resourceId?: string\n  ): Promise<boolean> {\n    const authStore = useAuthStore();\n    const userId = authStore.user?.id;\n    const practiceId = authStore.clinicId;\n\n    if (!userId) {\n      return false;\n    }\n\n    // Platform owner bypass\n    // Prefer backend check; fallback to app_metadata\n    try {\n      const { data: isPo } = await supabase.rpc('is_platform_owner');\n      if (isPo === true) return true;\n    } catch {\n      // ignore\n    }\n    const isPlatformOwnerFallback =\n      !!(authStore.user as any)?.app_metadata?.role &&\n      (authStore.user as any).app_metadata.role === 'platform_owner';\n    if (isPlatformOwnerFallback) return true;\n\n    // Practice owner bypass (treat practice owners as having all permissions)\n    if (practiceId) {\n      try {\n        const { data: membership } = await supabase\n          .from('practice_members')\n          .select('role')\n          .eq('practice_id', practiceId)\n          .eq('user_id', userId)\n          .single();\n\n        if (membership?.role === 'owner') {\n          return true;\n        }\n      } catch {\n        // Ignore and continue to explicit permission check\n      }\n    }\n\n    // If no practiceId (Magic Join users), grant basic read permissions\n    if (!practiceId) {\n      console.warn('No practice ID - applying magic join fallback permissions');\n      // Grant read access to basic resources for magic join users\n      if (\n        permissionType === 'read' &&\n        ['products', 'inventory'].includes(resourceType)\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    try {\n      const { data, error } = await supabase.rpc('check_user_permission_v2', {\n        p_user_id: userId,\n        p_practice_id: practiceId,\n        p_permission_type: permissionType,\n        p_resource_type: resourceType,\n        p_resource_id: resourceId,\n      });\n\n      if (error) {\n        console.error('Error checking permission:', error);\n        // Fallback: grant basic read permissions if RPC fails\n        if (\n          permissionType === 'read' &&\n          ['products', 'inventory'].includes(resourceType)\n        ) {\n          return true;\n        }\n        return false;\n      }\n\n      return data || false;\n    } catch (error) {\n      console.error('Error in hasPermission:', error);\n      // Fallback: grant basic read permissions if RPC fails\n      if (\n        permissionType === 'read' &&\n        ['products', 'inventory'].includes(resourceType)\n      ) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Get all effective permissions for current user\n   */\n  static async getUserPermissions(): Promise<Permission[]> {\n    const authStore = useAuthStore();\n    const userId = authStore.user?.id;\n    const practiceId = authStore.clinicId;\n\n    if (!userId || !practiceId) {\n      return [];\n    }\n\n    try {\n      const { data, error } = await supabase.rpc('get_user_permissions', {\n        user_id_param: userId,\n        practice_id_param: practiceId,\n      });\n\n      if (error) {\n        console.error('Error fetching user permissions:', error);\n        return [];\n      }\n\n      return (data ?? []).map(row =>\n        mapPermissionRow(\n          row,\n          row.permission === 'write_orders'\n            ? 'orders'\n            : ((row.permission as ResourceType | undefined) ?? 'products')\n        )\n      );\n    } catch (error) {\n      console.error('Error in getUserPermissions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get user's role in current practice\n   */\n  static async getUserRole(): Promise<UserRole | null> {\n    const authStore = useAuthStore();\n    const userId = authStore.user?.id;\n    const practiceId = authStore.clinicId;\n\n    // Platform owner from JWT/app_metadata\n    try {\n      const { data: isPo } = await supabase.rpc('is_platform_owner');\n      if (isPo === true) return 'platform_owner';\n    } catch {\n      // ignore\n    }\n    const isPlatformOwnerFallback =\n      !!(authStore.user as any)?.app_metadata?.role &&\n      (authStore.user as any).app_metadata.role === 'platform_owner';\n    if (isPlatformOwnerFallback) return 'platform_owner';\n\n    // If no practiceId, this might be a Magic Join user - give them guest access for now\n    if (!practiceId) {\n      console.warn(\n        'No practice ID found - granting guest access for magic join user'\n      );\n      return 'guest';\n    }\n\n    if (!userId) {\n      return null;\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('practice_members')\n        .select('role')\n        .eq('user_id', userId)\n        .eq('practice_id', practiceId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching user role:', error);\n        // If user not found in practice_members, might be magic join - give guest access\n        return 'guest';\n      }\n\n      return (data?.role as UserRole) || 'guest';\n    } catch (error) {\n      console.error('Error in getUserRole:', error);\n      return 'guest';\n    }\n  }\n\n  /**\n   * Check if user can perform specific actions based on role\n   */\n  static canCreateProducts(role: UserRole): boolean {\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\n  }\n\n  static canEditProducts(role: UserRole): boolean {\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\n  }\n\n  static canDeleteProducts(role: UserRole): boolean {\n    return ['owner', 'manager', 'platform_owner'].includes(role);\n  }\n\n  static canManageInventory(role: UserRole): boolean {\n    return [\n      'owner',\n      'manager',\n      'assistant',\n      'logistics',\n      'platform_owner',\n    ].includes(role);\n  }\n\n  static canViewAnalytics(role: UserRole): boolean {\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\n  }\n\n  static canManageUsers(role: UserRole): boolean {\n    return ['owner', 'manager', 'platform_owner'].includes(role);\n  }\n\n  static canSubmitOrders(role: UserRole): boolean {\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\n  }\n\n  /**\n   * Get role display information\n   */\n  static getRoleDefinition(role: UserRole): RoleDefinition {\n    return ROLE_DEFINITIONS[role];\n  }\n\n  /**\n   * Get all available roles\n   */\n  static getAllRoles(): RoleDefinition[] {\n    return Object.values(ROLE_DEFINITIONS);\n  }\n}\n\n// Composable for reactive permission checking\nexport function usePermissions() {\n  const authStore = useAuthStore();\n\n  const hasPermission = async (\n    permissionType: PermissionType,\n    resourceType: ResourceType,\n    resourceId?: string\n  ) => {\n    return PermissionService.hasPermission(\n      permissionType,\n      resourceType,\n      resourceId\n    );\n  };\n\n  const getUserRole = async () => {\n    return PermissionService.getUserRole();\n  };\n\n  const canCreateProducts = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canCreateProducts(role) : false;\n  };\n\n  const canEditProducts = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canEditProducts(role) : false;\n  };\n\n  const canDeleteProducts = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canDeleteProducts(role) : false;\n  };\n\n  const canManageInventory = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canManageInventory(role) : false;\n  };\n\n  const canViewAnalytics = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canViewAnalytics(role) : false;\n  };\n\n  const canManageUsers = async () => {\n    const role = await getUserRole();\n    return role ? PermissionService.canManageUsers(role) : false;\n  };\n\n  return {\n    hasPermission,\n    getUserRole,\n    canCreateProducts,\n    canEditProducts,\n    canDeleteProducts,\n    canManageInventory,\n    canViewAnalytics,\n    canManageUsers,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\safeUpdate.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\stockMovements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supabase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierAgnostic\\multiSupplierOrderListService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierOrder' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListDTO' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2157, 2160], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2157, 2160], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6309, 6312], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6309, 6312], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 285,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 285,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8988, 8991], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8988, 8991], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 341,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 341,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10630, 10633], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10630, 10633], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 390,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 390,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12025, 12028], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12025, 12028], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 423,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 423,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13018, 13021], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13018, 13021], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 442,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 442,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13607, 13610], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13607, 13610], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 580,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 580,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17964, 17967], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17964, 17967], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 605,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 605,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18788, 18791], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18788, 18791], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 699,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 699,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21393, 21396], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21393, 21396], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport type { SupplierOrder } from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { OrderListWithItems } from '@/types/stores';\nimport type {\n  OrderListDTO,\n  OrderListInsert,\n  OrderListItemDTO,\n  OrderListItemInsert,\n  OrderListItemRow,\n  OrderListRow,\n  ProductRow,\n  StockLevelRow,\n  SupplierProductRow,\n} from '@/types/inventory';\nimport {\n  mapOrderListItemRowToDTO,\n  mapOrderListRowToDTO,\n  mapStockLevelRowToView,\n} from '@/types/inventory';\n\ntype SupplierProductWithSupplier = SupplierProductRow & {\n  suppliers: { id: string; name: string } | null;\n};\n\nexport type SupplierAgnosticOrderList = OrderListWithItems;\n\nexport interface OrderListAnalytics {\n  total_items: number;\n  suppliers_count: number;\n  low_stock_items: number;\n  out_of_stock_items: number;\n  total_value: number;\n  avg_lead_time: number;\n  supplier_breakdown: Array<{\n    supplier_id: string;\n    supplier_name: string;\n    item_count: number;\n    total_value: number;\n    avg_lead_time: number;\n  }>;\n}\n\nexport class MultiSupplierOrderListService {\n  /**\n   * Create a new supplier-agnostic order list\n   */\n  async createOrderList(data: {\n    practice_id: string;\n    name: string;\n    description?: string;\n    location_id: string;\n    auto_reorder_enabled?: boolean;\n  }): Promise<SupplierAgnosticOrderList> {\n    try {\n      orderLogger.info('Creating new supplier-agnostic order list:', data.name);\n\n      const { data: orderList, error } = await supabase\n        .from('order_lists')\n        .insert<OrderListInsert>({\n          practice_id: data.practice_id,\n          name: data.name,\n          description: data.description ?? null,\n          location_id: data.location_id,\n          auto_reorder_enabled: data.auto_reorder_enabled ?? false,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      orderLogger.info('✅ Order list created successfully:', orderList.id);\n\n      return {\n        ...mapOrderListRowToDTO(orderList as OrderListRow),\n        items: [],\n      } satisfies SupplierAgnosticOrderList;\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to create order list:', error);\n      throw new Error(`Failed to create order list: ${error.message}`);\n    }\n  }\n\n  /**\n   * Add a product to an order list with supplier selection\n   */\n  async addProductToOrderList(\n    orderListId: string,\n    data: {\n      product_id: string;\n      supplier_id: string;\n      minimum_stock: number;\n      maximum_stock: number;\n      is_preferred_supplier?: boolean;\n    }\n  ): Promise<OrderListItemDTO> {\n    try {\n      orderLogger.info('Adding product to order list:', {\n        orderListId,\n        productId: data.product_id,\n      });\n\n      // Get product and supplier details\n      const [productResult, supplierProductResult, stockResult] =\n        await Promise.all([\n          supabase\n            .from('products')\n            .select('id, name, sku')\n            .eq('id', data.product_id)\n            .single<ProductRow>(),\n          supabase\n            .from('supplier_products')\n            .select(\n              `\n            supplier_sku,\n            cost_price,\n            currency,\n            lead_time_days,\n            supplier_id,\n            suppliers (id, name)\n          `\n            )\n            .eq('product_id', data.product_id)\n            .eq('supplier_id', data.supplier_id)\n            .single<SupplierProductWithSupplier>(),\n          supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('product_id', data.product_id)\n            .order('created_at', { ascending: false })\n            .limit(1)\n            .maybeSingle<StockLevelRow>(),\n        ]);\n\n      if (productResult.error) throw productResult.error;\n      if (supplierProductResult.error) throw supplierProductResult.error;\n\n      const product = productResult.data;\n      const supplierProduct = supplierProductResult.data;\n      const currentStock = stockResult.data\n        ? mapStockLevelRowToView(stockResult.data).currentQuantity\n        : null;\n\n      if (!product || !supplierProduct) {\n        throw new Error('Product or supplier product could not be loaded');\n      }\n\n      // Insert order list item\n      const { data: orderListItem, error } = await supabase\n        .from('order_list_items')\n        .insert<OrderListItemInsert>({\n          order_list_id: orderListId,\n          product_id: data.product_id,\n          supplier_product_id: supplierProduct.id,\n          preferred_supplier_id: data.supplier_id,\n          minimum_stock: data.minimum_stock,\n          maximum_stock: data.maximum_stock,\n          current_stock: currentStock,\n          unit_price: supplierProduct.cost_price,\n          ordered_quantity: data.minimum_stock,\n          suggested_quantity: data.minimum_stock,\n          total_price:\n            (supplierProduct.cost_price ?? 0) * Math.max(data.minimum_stock, 0),\n        })\n        .select(\n          `\n          *,\n          product:products(id, name, sku),\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\n          supplier:suppliers!order_list_items_preferred_supplier_id_fkey(id, name)\n        `\n        )\n        .single<OrderListItemRow>();\n\n      if (error) throw error;\n\n      orderLogger.info('✅ Product added to order list successfully');\n\n      const dto = mapOrderListItemRowToDTO(orderListItem);\n      return {\n        ...dto,\n        product: {\n          ...(dto.product ?? {}),\n          id: product.id,\n          name: product.name,\n          sku: product.sku,\n        } as OrderListItemDTO['product'],\n        supplier_product: supplierProduct\n          ? ({\n              ...(dto.supplier_product ?? {}),\n              id: supplierProduct.id,\n              supplier_id: supplierProduct.supplier_id,\n              supplier_sku: supplierProduct.supplier_sku ?? null,\n              cost_price: supplierProduct.cost_price ?? null,\n              currency: supplierProduct.currency ?? null,\n              lead_time_days: supplierProduct.lead_time_days ?? null,\n            } as OrderListItemDTO['supplier_product'])\n          : dto.supplier_product,\n      } satisfies OrderListItemDTO;\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to add product to order list:', error);\n      throw new Error(`Failed to add product to order list: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update supplier for an existing order list item\n   */\n  async updateItemSupplier(\n    itemId: string,\n    newSupplierId: string\n  ): Promise<OrderListItemDTO> {\n    try {\n      orderLogger.info('Updating supplier for order list item:', {\n        itemId,\n        newSupplierId,\n      });\n\n      // Get current item\n      const { data: currentItem, error: currentError } = await supabase\n        .from('order_list_items')\n        .select('product_id, order_list_id')\n        .eq('id', itemId)\n        .single();\n\n      if (currentError) throw currentError;\n\n      // Get new supplier product details\n      const { data: supplierProduct, error: supplierError } = await supabase\n        .from('supplier_products')\n        .select(\n          `\n          id,\n          supplier_sku,\n          cost_price,\n          currency,\n          lead_time_days,\n          supplier_id,\n          suppliers (id, name)\n        `\n        )\n        .eq('product_id', currentItem.product_id)\n        .eq('supplier_id', newSupplierId)\n        .single();\n\n      if (supplierError) throw supplierError;\n\n      // Update the item\n      const { data: updatedItem, error: updateError } = await supabase\n        .from('order_list_items')\n        .update({\n          supplier_product_id: supplierProduct.id,\n          preferred_supplier_id: newSupplierId,\n          unit_price: supplierProduct.cost_price,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', itemId)\n        .select(\n          `\n          *,\n          product:products(id, name, sku),\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\n          supplier:suppliers!order_list_items_preferred_supplier_id_fkey(id, name)\n        `\n        )\n        .single<OrderListItemRow>();\n\n      if (updateError) throw updateError;\n\n      orderLogger.info('✅ Supplier updated successfully');\n\n      const dto = mapOrderListItemRowToDTO(updatedItem);\n      return {\n        ...dto,\n        supplier_product: {\n          ...(dto.supplier_product ?? {}),\n          id: supplierProduct.id,\n          supplier_id: supplierProduct.supplier_id,\n          supplier_sku: supplierProduct.supplier_sku ?? null,\n          cost_price: supplierProduct.cost_price ?? null,\n          currency: supplierProduct.currency ?? null,\n          lead_time_days: supplierProduct.lead_time_days ?? null,\n        } as OrderListItemDTO['supplier_product'],\n      } satisfies OrderListItemDTO;\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to update item supplier:', error);\n      throw new Error(`Failed to update item supplier: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get alternative suppliers for a product\n   */\n  async getAlternativeSuppliers(productId: string): Promise<\n    Array<{\n      supplier_id: string;\n      supplier_name: string;\n      supplier_sku?: string;\n      cost_price: number;\n      currency: string;\n      lead_time_days: number;\n      is_available: boolean;\n      price_difference_percent: number;\n    }>\n  > {\n    try {\n      const { data: supplierProducts, error } = await supabase\n        .from('supplier_products')\n        .select(\n          `\n          supplier_id,\n          supplier_sku,\n          cost_price,\n          currency,\n          lead_time_days,\n          is_available,\n          suppliers (id, name)\n        `\n        )\n        .eq('product_id', productId)\n        .eq('is_available', true)\n        .order('cost_price', { ascending: true });\n\n      if (error) throw error;\n\n      const lowestPrice = supplierProducts[0]?.cost_price ?? 0;\n\n      return supplierProducts.map(sp => ({\n        supplier_id: sp.supplier_id,\n        supplier_name: sp.suppliers?.name ?? '',\n        supplier_sku: sp.supplier_sku ?? undefined,\n        cost_price: sp.cost_price ?? 0,\n        currency: sp.currency || 'EUR',\n        lead_time_days: sp.lead_time_days ?? 1,\n        is_available: sp.is_available ?? false,\n        price_difference_percent:\n          lowestPrice > 0 && sp.cost_price !== null\n            ? ((sp.cost_price - lowestPrice) / lowestPrice) * 100\n            : 0,\n      }));\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to get alternative suppliers:', error);\n      throw new Error(`Failed to get alternative suppliers: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get analytics for an order list\n   */\n  async getOrderListAnalytics(\n    orderListId: string\n  ): Promise<OrderListAnalytics> {\n    try {\n      const { data: items, error } = await supabase\n        .from('order_list_items')\n        .select(\n          `\n          minimum_stock,\n          maximum_stock,\n          current_stock,\n          unit_price,\n          lead_time_days,\n          suppliers (id, name)\n        `\n        )\n        .eq('order_list_id', orderListId);\n\n      if (error) throw error;\n\n      const totalItems = items.length;\n      const suppliersCount = new Set(\n        items\n          .map(item => item.suppliers?.id)\n          .filter((id): id is string => Boolean(id))\n      ).size;\n      const lowStockItems = items.filter(item => {\n        const current = item.current_stock ?? 0;\n        const minimum = item.minimum_stock ?? 0;\n        return current <= minimum;\n      }).length;\n      const outOfStockItems = items.filter(\n        item => (item.current_stock ?? 0) === 0\n      ).length;\n      const totalValue = items.reduce(\n        (sum, item) => sum + (item.unit_price ?? 0),\n        0\n      );\n      const avgLeadTime =\n        items.reduce(\n          (sum, item) => sum + ((item as any).supplier_product?.lead_time_days ?? 0),\n          0\n        ) / (totalItems || 1);\n\n      // Supplier breakdown\n      const supplierMap = new Map<\n        string,\n        {\n          supplier_id: string;\n          supplier_name: string;\n          item_count: number;\n          total_value: number;\n          total_lead_time: number;\n        }\n      >();\n      items.forEach(item => {\n        const supplierId = item.suppliers?.id;\n        if (!supplierId) {\n          return;\n        }\n        if (!supplierMap.has(supplierId)) {\n          supplierMap.set(supplierId, {\n            supplier_id: supplierId,\n            supplier_name: item.suppliers?.name ?? '',\n            item_count: 0,\n            total_value: 0,\n            total_lead_time: 0,\n          });\n        }\n        const supplier = supplierMap.get(supplierId);\n        if (!supplier) return;\n        supplier.item_count++;\n        supplier.total_value += item.unit_price ?? 0;\n        supplier.total_lead_time += (item as any).supplier_product?.lead_time_days ?? 0;\n      });\n\n      const supplierBreakdown = Array.from(supplierMap.values()).map(\n        supplier => ({\n          ...supplier,\n          avg_lead_time: supplier.total_lead_time / supplier.item_count,\n        })\n      );\n\n      return {\n        total_items: totalItems,\n        suppliers_count: suppliersCount,\n        low_stock_items: lowStockItems,\n        out_of_stock_items: outOfStockItems,\n        total_value: totalValue,\n        avg_lead_time: avgLeadTime || 0,\n        supplier_breakdown: supplierBreakdown,\n      };\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to get order list analytics:', error);\n      throw new Error(`Failed to get order list analytics: ${error.message}`);\n    }\n  }\n\n  /**\n   * Optimize supplier selection for better pricing and lead times\n   */\n  async optimizeSupplierSelection(\n    orderListId: string,\n    criteria: {\n      prioritize: 'price' | 'lead_time' | 'balanced';\n      max_price_increase_percent?: number;\n      max_lead_time_days?: number;\n    }\n  ): Promise<{\n    recommendations: Array<{\n      item_id: string;\n      current_supplier: string;\n      recommended_supplier: string;\n      price_savings: number;\n      lead_time_improvement: number;\n      reason: string;\n    }>;\n    total_savings: number;\n    avg_lead_time_improvement: number;\n  }> {\n    try {\n      orderLogger.info(\n        'Optimizing supplier selection for order list:',\n        orderListId\n      );\n\n      // Get current order list items\n      const { data: items, error: itemsError } = await supabase\n        .from('order_list_items')\n        .select(\n          `\n          id,\n          product_id,\n          supplier_product_id,\n          preferred_supplier_id,\n          unit_price,\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\n          suppliers (id, name, lead_time_days)\n        `\n        )\n        .eq('order_list_id', orderListId);\n\n      if (itemsError) throw itemsError;\n\n      const recommendations: Array<{\n        item_id: string;\n        current_supplier: string;\n        recommended_supplier: string;\n        price_savings: number;\n        lead_time_improvement: number;\n        reason: string;\n      }> = [];\n      let totalSavings = 0;\n      let totalLeadTimeImprovement = 0;\n\n      for (const item of items) {\n        const alternatives = await this.getAlternativeSuppliers(\n          item.product_id\n        );\n\n        if (alternatives.length <= 1) continue; // No alternatives\n\n        const currentPrice = item.unit_price ?? 0;\n        const currentLeadTime = item.supplier_product?.lead_time_days ?? 7;\n        const currentSupplierId =\n          item.preferred_supplier_id ??\n          item.supplier_product?.supplier_id ??\n          null;\n\n        let bestAlternative;\n\n        switch (criteria.prioritize) {\n          case 'price':\n            bestAlternative = alternatives\n              .filter(alt => alt.supplier_id !== currentSupplierId)\n              .filter(alt => alt.cost_price < currentPrice)\n              .sort((a, b) => a.cost_price - b.cost_price)[0];\n            break;\n\n          case 'lead_time':\n            bestAlternative = alternatives\n              .filter(alt => alt.supplier_id !== currentSupplierId)\n              .filter(alt => alt.lead_time_days < currentLeadTime)\n              .sort((a, b) => a.lead_time_days - b.lead_time_days)[0];\n            break;\n\n          case 'balanced':\n            bestAlternative = alternatives\n              .filter(alt => alt.supplier_id !== currentSupplierId)\n              .map(alt => ({\n                ...alt,\n                score:\n                  (currentPrice > 0\n                    ? ((currentPrice - alt.cost_price) / currentPrice) * 0.6\n                    : 0) +\n                  (currentLeadTime > 0\n                    ? ((currentLeadTime - alt.lead_time_days) /\n                        currentLeadTime) *\n                      0.4\n                    : 0),\n              }))\n              .filter(alt => alt.score > 0)\n              .sort((a, b) => b.score - a.score)[0];\n            break;\n        }\n\n        if (bestAlternative) {\n          const priceSavings = currentPrice - bestAlternative.cost_price;\n          const leadTimeImprovement =\n            currentLeadTime - bestAlternative.lead_time_days;\n\n          // Apply criteria filters\n          if (\n            criteria.max_price_increase_percent &&\n            priceSavings < 0 &&\n            Math.abs((priceSavings / currentPrice) * 100) >\n              criteria.max_price_increase_percent\n          ) {\n            continue;\n          }\n\n          if (\n            criteria.max_lead_time_days &&\n            bestAlternative.lead_time_days > criteria.max_lead_time_days\n          ) {\n            continue;\n          }\n\n          recommendations.push({\n            item_id: item.id,\n            current_supplier: (item.suppliers as any)?.name ?? 'Unknown',\n            recommended_supplier: bestAlternative.supplier_name,\n            price_savings: priceSavings,\n            lead_time_improvement: leadTimeImprovement,\n            reason:\n              priceSavings > 0\n                ? `Save €${priceSavings.toFixed(2)} per unit`\n                : `Improve lead time by ${leadTimeImprovement} days`,\n          });\n\n          totalSavings += priceSavings;\n          totalLeadTimeImprovement += leadTimeImprovement;\n        }\n      }\n\n      orderLogger.info('✅ Supplier optimization completed');\n\n      return {\n        recommendations,\n        total_savings: totalSavings,\n        avg_lead_time_improvement:\n          recommendations.length > 0\n            ? totalLeadTimeImprovement / recommendations.length\n            : 0,\n      };\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to optimize supplier selection:', error);\n      throw new Error(\n        `Failed to optimize supplier selection: ${error.message}`\n      );\n    }\n  }\n\n  /**\n   * Duplicate an order list to another department/location\n   */\n  async duplicateOrderList(\n    orderListId: string,\n    newData: {\n      name: string;\n      description?: string;\n      location_id: string;\n    }\n  ): Promise<SupplierAgnosticOrderList> {\n    try {\n      orderLogger.info('Duplicating order list:', orderListId);\n\n      // Get original order list\n      const { data: originalList, error: listError } = await supabase\n        .from('order_lists')\n        .select(\n          `\n          practice_id,\n          auto_reorder_enabled,\n          order_list_items (\n            product_id,\n            preferred_supplier_id,\n            minimum_stock,\n            maximum_stock,\n            is_preferred_supplier\n          )\n        `\n        )\n        .eq('id', orderListId)\n        .single<\n          OrderListRow & {\n            order_list_items: Array<\n              OrderListItemRow & {\n                preferred_supplier_id?: string | null;\n                supplier_id?: string | null;\n              }\n            >;\n          }\n        >();\n\n      if (listError) throw listError;\n\n      // Create new order list\n      if (!newData.location_id) {\n        throw new Error('Location is required to duplicate order list');\n      }\n\n      const newOrderList = await this.createOrderList({\n        practice_id: originalList.practice_id,\n        name: newData.name,\n        description: newData.description,\n        location_id: newData.location_id,\n        auto_reorder_enabled: originalList.auto_reorder_enabled ?? false,\n      });\n\n      // Copy all items\n      const itemPromises = originalList.order_list_items.map(item => {\n        const supplierId =\n          item.preferred_supplier_id ??\n          (item as { supplier_id?: string | null }).supplier_id ??\n          null;\n\n        if (!supplierId) {\n          return Promise.resolve(null);\n        }\n\n        return this.addProductToOrderList(newOrderList.id, {\n          product_id: item.product_id,\n          supplier_id: supplierId,\n          minimum_stock: item.minimum_stock ?? 0,\n          maximum_stock: item.maximum_stock ?? 0,\n        });\n      });\n\n      const items = (await Promise.all(itemPromises)).filter(\n        (item): item is OrderListItemDTO => item !== null\n      );\n\n      orderLogger.info('✅ Order list duplicated successfully');\n\n      return {\n        ...newOrderList,\n        items,\n      };\n    } catch (error: any) {\n      orderLogger.error('❌ Failed to duplicate order list:', error);\n      throw new Error(`Failed to duplicate order list: ${error.message}`);\n    }\n  }\n}\n\nexport const multiSupplierOrderListService =\n  new MultiSupplierOrderListService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\apiService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1434, 1437], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1434, 1437], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4500, 4503], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4500, 4503], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 343,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 343,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9885, 9888], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9885, 9888], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10340, 10343], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10340, 10343], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 411,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 411,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11696, 11699], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11696, 11699], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 440,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 440,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12377, 12380], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12377, 12380], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 522,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 522,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14615, 14618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14615, 14618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 584,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 584,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16226, 16229], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16226, 16229], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 607,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 607,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16814, 16817], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16814, 16817], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport { t } from '@/utils/i18n-service';\nimport type {\n  SupplierOrder,\n  OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { Tables } from '@/types';\n\nexport interface APIConfig {\n  api_endpoint: string;\n  api_key?: string;\n  api_username?: string;\n  api_password?: string;\n  api_token?: string;\n  api_format?: 'json' | 'xml' | 'form-data';\n  api_auth_type?: 'bearer' | 'basic' | 'api-key' | 'oauth2';\n  oauth2_config?: {\n    client_id?: string;\n    client_secret?: string;\n    token_endpoint?: string;\n    scope?: string;\n  };\n  webhook_url?: string;\n  test_mode?: boolean;\n  timeout_seconds?: number;\n  custom_headers?: Record<string, string>;\n}\n\nexport interface APIOrderPayload {\n  order_reference: string;\n  order_date: string;\n  requested_delivery_date?: string;\n  customer: {\n    id?: string;\n    name: string;\n    address: {\n      street: string;\n      city: string;\n      postal_code: string;\n      country: string;\n    };\n    contact?: {\n      email?: string;\n      phone?: string;\n    };\n  };\n  items: Array<{\n    sku: string;\n    name?: string;\n    quantity: number;\n    unit_price: number;\n    line_total: number;\n  }>;\n  totals: {\n    subtotal: number;\n    tax?: number;\n    shipping?: number;\n    total: number;\n    currency: string;\n  };\n  notes?: string;\n  metadata?: Record<string, any>;\n}\n\nexport class APIService {\n  private cache = new Map<string, { token: string; expires_at: number }>();\n\n  /**\n   * Send order via API\n   */\n  async sendOrderViaAPI(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> {\n    try {\n      orderLogger.info(\n        `Sending order ${orderReference} via API to supplier ${order.supplier_name}`\n      );\n\n      // Get supplier API configuration\n      const { data: supplier, error: supplierError } = await supabase\n        .from('suppliers')\n        .select('integration_config, name, code')\n        .eq('id', order.supplier_id)\n        .single<Tables<'suppliers'>>();\n\n      if (supplierError || !supplier) {\n        throw new Error(t('services.supplierIntegration.supplierNotFound'));\n      }\n\n      const rawConfig = supplier.integration_config;\n      if (\n        !rawConfig ||\n        typeof rawConfig !== 'object' ||\n        Array.isArray(rawConfig)\n      ) {\n        throw new Error(\n          t('services.supplierIntegration.apiEndpointNotConfigured')\n        );\n      }\n\n      const apiConfig = rawConfig as Partial<APIConfig>;\n\n      const apiEndpoint = apiConfig.api_endpoint;\n      if (typeof apiEndpoint !== 'string' || apiEndpoint.length === 0) {\n        throw new Error(\n          t('services.supplierIntegration.apiEndpointNotConfigured')\n        );\n      }\n\n      // Optional auth configuration\n      if (\n        apiConfig.api_auth_type === 'oauth2' &&\n        (!apiConfig.oauth2_config?.client_id ||\n          !apiConfig.oauth2_config.client_secret)\n      ) {\n        throw new Error(\n          t('services.supplierIntegration.oauth2ConfigurationIncomplete')\n        );\n      }\n\n      // Get practice details\n      const { data: practice, error: practiceError } = await supabase\n        .from('practices')\n        .select('name, address, city, postal_code, country, email, phone')\n        .eq('id', order.practice_id)\n        .single<Tables<'practices'>>();\n\n      if (practiceError || !practice) {\n        throw new Error(\n          t('services.supplierIntegration.practiceDetailsNotFound')\n        );\n      }\n\n      // Build API payload\n      const apiPayload = this.buildAPIPayload(order, orderReference, practice);\n\n      // Get authentication token if needed\n      const authHeaders = await this.getAuthHeaders(apiConfig as APIConfig);\n\n      // Send order to API\n      const response = await this.sendToAPI(\n        apiConfig as APIConfig,\n        apiPayload,\n        authHeaders\n      );\n\n      // Record the order\n      await this.recordSupplierOrder(order, orderReference, 'api', response);\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: response.success ? 'success' : 'failed',\n        method_used: 'api',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: response.success ? '' : (response.error ?? ''),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    } catch (error: any) {\n      orderLogger.error(\n        `API order sending failed for ${orderReference}:`,\n        error\n      );\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'failed',\n        method_used: 'api',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: error instanceof Error ? error.message : String(error),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    }\n  }\n\n  /**\n   * Build API payload from order data\n   */\n  private buildAPIPayload(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: Tables<'practices'>\n  ): APIOrderPayload {\n    const contact: { email?: string; phone?: string } = {};\n    if (practice.email) {\n      contact.email = practice.email;\n    }\n    if (practice.phone) {\n      contact.phone = practice.phone;\n    }\n\n    return {\n      order_reference: orderReference,\n      order_date: new Date().toISOString(),\n      requested_delivery_date: order.estimated_delivery_date,\n      customer: {\n        id: order.practice_id,\n        name: practice.name ?? '',\n        address: {\n          street: practice.address ?? '',\n          city: practice.city ?? '',\n          postal_code: practice.postal_code ?? '',\n          country: practice.country ?? 'NL',\n        },\n        ...(Object.keys(contact).length > 0 ? { contact } : {}),\n      },\n      items: order.items.map(item => ({\n        sku: item.supplier_sku || item.product_sku || '',\n        name: item.product_name ?? '',\n        quantity: item.quantity,\n        unit_price: item.unit_price ?? 0,\n        line_total: item.quantity * (item.unit_price ?? 0),\n      })),\n      totals: {\n        subtotal: order.items.reduce((sum, item) => sum + item.total_price, 0),\n        total:\n          order.items.reduce((sum, item) => sum + item.total_price, 0) +\n          (order.shipping_cost || 0),\n        currency: 'EUR',\n        shipping: order.shipping_cost ?? undefined,\n      },\n      notes: `Automated order from Remcura for ${practice.name ?? ''}`,\n      metadata: {\n        source: 'remcura',\n        practice_id: order.practice_id,\n        supplier_id: order.supplier_id,\n        created_at: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get authentication headers based on config\n   */\n  private async getAuthHeaders(\n    config: APIConfig\n  ): Promise<Record<string, string>> {\n    const headers: Record<string, string> = {};\n\n    // Add custom headers\n    if (config.custom_headers) {\n      Object.assign(headers, config.custom_headers);\n    }\n\n    switch (config.api_auth_type) {\n      case 'bearer':\n        if (config.api_token) {\n          headers['Authorization'] = `Bearer ${config.api_token}`;\n        } else if (config.oauth2_config) {\n          const token = await this.getOAuth2Token(config);\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        break;\n\n      case 'basic':\n        if (config.api_username && config.api_password) {\n          const auth = btoa(`${config.api_username}:${config.api_password}`);\n          headers['Authorization'] = `Basic ${auth}`;\n        }\n        break;\n\n      case 'api-key':\n        if (config.api_key) {\n          headers['X-API-Key'] = config.api_key;\n          // Some APIs use different header names\n          headers['Authorization'] = `ApiKey ${config.api_key}`;\n        }\n        break;\n\n      case 'oauth2': {\n        const token = await this.getOAuth2Token(config);\n        headers['Authorization'] = `Bearer ${token}`;\n        break;\n      }\n    }\n\n    return headers;\n  }\n\n  /**\n   * Get OAuth2 token (cached)\n   */\n  private async getOAuth2Token(config: APIConfig): Promise<string> {\n    if (\n      !config.oauth2_config?.client_id ||\n      !config.oauth2_config?.client_secret\n    ) {\n      throw new Error(\n        t('services.supplierIntegration.oauth2ConfigurationIncomplete')\n      );\n    }\n\n    const cacheKey = `${config.oauth2_config.client_id}_${config.oauth2_config.token_endpoint}`;\n    const cached = this.cache.get(cacheKey);\n\n    // Return cached token if still valid\n    if (cached && cached.expires_at > Date.now() + 60000) {\n      // 1 minute buffer\n      return cached.token;\n    }\n\n    try {\n      const tokenEndpoint =\n        config.oauth2_config.token_endpoint ||\n        `${config.api_endpoint}/oauth/token`;\n\n      const tokenResponse = await fetch(tokenEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'client_credentials',\n          client_id: config.oauth2_config.client_id,\n          client_secret: config.oauth2_config.client_secret,\n          scope: config.oauth2_config.scope || '',\n        }),\n      });\n\n      if (!tokenResponse.ok) {\n        throw new Error(\n          t('services.supplierIntegration.oauth2TokenRequestFailed', {\n            status: tokenResponse.status,\n          })\n        );\n      }\n\n      const tokenData = await tokenResponse.json();\n      const expiresAt = Date.now() + tokenData.expires_in * 1000 - 60000; // 1 minute buffer\n\n      // Cache the token\n      this.cache.set(cacheKey, {\n        token: tokenData.access_token,\n        expires_at: expiresAt,\n      });\n\n      return tokenData.access_token;\n    } catch (error: any) {\n      orderLogger.error('OAuth2 token acquisition failed:', error);\n      throw new Error(\n        t('services.supplierIntegration.oauth2AuthenticationFailed', {\n          error: error.message,\n        })\n      );\n    }\n  }\n\n  /**\n   * Send data to API endpoint\n   */\n  private async sendToAPI(\n    config: APIConfig,\n    payload: APIOrderPayload,\n    authHeaders: Record<string, string>\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\n    try {\n      const headers: Record<string, string> = {\n        ...authHeaders,\n      };\n\n      let body: string | FormData;\n\n      switch (config.api_format || 'json') {\n        case 'json':\n          headers['Content-Type'] = 'application/json';\n          body = JSON.stringify(payload);\n          break;\n\n        case 'xml':\n          headers['Content-Type'] = 'application/xml';\n          body = this.convertToXML(payload);\n          break;\n\n        case 'form-data': {\n          const formData = new FormData();\n          this.flattenObjectToFormData(payload, formData);\n          body = formData;\n          // Don't set Content-Type for FormData, browser will set it with boundary\n          break;\n        }\n\n        default:\n          throw new Error(\n            t('services.supplierIntegration.unsupportedApiFormat', {\n              format: config.api_format,\n            })\n          );\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(\n        () => controller.abort(),\n        (config.timeout_seconds || 30) * 1000\n      );\n\n      const response = await fetch(config.api_endpoint, {\n        method: 'POST',\n        headers,\n        body,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      const responseText = await response.text();\n      let responseData: any;\n\n      try {\n        responseData = JSON.parse(responseText);\n      } catch {\n        responseData = responseText;\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          t('services.supplierIntegration.apiResponseError', {\n            status: response.status,\n            response: responseText,\n          })\n        );\n      }\n\n      orderLogger.info(\n        `API order sent successfully, response: ${response.status}`\n      );\n\n      return {\n        success: true,\n        response: {\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: responseData,\n        },\n      };\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n        orderLogger.error('API request timed out');\n        return {\n          success: false,\n          error: 'Request timed out',\n        };\n      }\n\n      orderLogger.error(`API sending failed: ${error.message}`);\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Convert JSON payload to XML\n   */\n  private convertToXML(payload: APIOrderPayload): string {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Order>\n  <OrderReference>${payload.order_reference}</OrderReference>\n  <OrderDate>${payload.order_date}</OrderDate>\n  ${\n    payload.requested_delivery_date\n      ? `<RequestedDeliveryDate>${payload.requested_delivery_date}</RequestedDeliveryDate>`\n      : ''\n  }\n  <Customer>\n    <ID>${payload.customer.id}</ID>\n    <Name><![CDATA[${payload.customer.name}]]></Name>\n    <Address>\n      <Street><![CDATA[${payload.customer.address.street}]]></Street>\n      <City><![CDATA[${payload.customer.address.city}]]></City>\n      <PostalCode>${payload.customer.address.postal_code}</PostalCode>\n      <Country>${payload.customer.address.country}</Country>\n    </Address>\n    ${\n      payload.customer.contact?.email\n        ? `<Email>${payload.customer.contact.email}</Email>`\n        : ''\n    }\n    ${\n      payload.customer.contact?.phone\n        ? `<Phone>${payload.customer.contact.phone}</Phone>`\n        : ''\n    }\n  </Customer>\n  <Items>\n    ${payload.items\n      .map(\n        item => `\n    <Item>\n      <SKU>${item.sku}</SKU>\n      <Name><![CDATA[${item.name || ''}]]></Name>\n      <Quantity>${item.quantity}</Quantity>\n      <UnitPrice>${item.unit_price}</UnitPrice>\n      <LineTotal>${item.line_total}</LineTotal>\n    </Item>`\n      )\n      .join('')}\n  </Items>\n  <Totals>\n    <Subtotal>${payload.totals.subtotal}</Subtotal>\n    <Total>${payload.totals.total}</Total>\n    <Currency>${payload.totals.currency}</Currency>\n    ${\n      payload.totals.shipping\n        ? `<Shipping>${payload.totals.shipping}</Shipping>`\n        : ''\n    }\n  </Totals>\n  ${payload.notes ? `<Notes><![CDATA[${payload.notes}]]></Notes>` : ''}\n</Order>`;\n  }\n\n  /**\n   * Flatten object to FormData\n   */\n  private flattenObjectToFormData(\n    obj: any,\n    formData: FormData,\n    prefix = ''\n  ): void {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const formKey = prefix ? `${prefix}[${key}]` : key;\n        const value = obj[key];\n\n        if (\n          value !== null &&\n          typeof value === 'object' &&\n          !(value instanceof Date)\n        ) {\n          if (Array.isArray(value)) {\n            value.forEach((item, index) => {\n              this.flattenObjectToFormData(\n                item,\n                formData,\n                `${formKey}[${index}]`\n              );\n            });\n          } else {\n            this.flattenObjectToFormData(value, formData, formKey);\n          }\n        } else {\n          formData.append(formKey, value?.toString() || '');\n        }\n      }\n    }\n  }\n\n  /**\n   * Record order in supplier_orders table\n   */\n  private async recordSupplierOrder(\n    order: SupplierOrder,\n    orderReference: string,\n    method: string,\n    response: { success: boolean; error?: string; response?: unknown }\n  ): Promise<void> {\n    const subtotal = order.items.reduce(\n      (sum, item) => sum + item.total_price,\n      0\n    );\n    const total = subtotal + (order.shipping_cost || 0);\n\n    orderLogger.info('Supplier order recorded (simulation)', {\n      supplier_id: order.supplier_id,\n      order_reference: orderReference,\n      method,\n      success: response.success,\n      subtotal,\n      total,\n    });\n  }\n\n  /**\n   * Test API connection\n   */\n  async testAPIConnection(\n    config: APIConfig\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\n    try {\n      const headers = await this.getAuthHeaders(config);\n\n      // Try a simple GET request to test the connection\n      const testEndpoint =\n        config.api_endpoint.replace(/\\/orders?$/, '/health') ||\n        `${config.api_endpoint}/test`;\n\n      const response = await fetch(testEndpoint, {\n        method: 'GET',\n        headers,\n      });\n\n      const responseText = await response.text();\n\n      return {\n        success: response.ok,\n        response: {\n          status: response.status,\n          body: responseText,\n        },\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n}\n\nexport const apiService = new APIService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\ediService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 173,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 173,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5152, 5155], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5152, 5155], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 399,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 399,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12434, 12437], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12434, 12437], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 436,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 436,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13466, 13469], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13466, 13469], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 452,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 452,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13807, 13810], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13807, 13810], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport type {\n  SupplierOrder,\n  OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { Tables } from '@/types';\n\nexport interface EDIConfig {\n  edi_endpoint: string;\n  edi_partner_id: string;\n  edi_interchange_id?: string;\n  edi_test_mode?: boolean;\n  edi_username?: string;\n  edi_password?: string;\n  edi_format?: 'ORDERS' | 'X12_850' | 'EDIFACT_ORDERS';\n}\n\nexport interface EDIOrderItem {\n  line_number: number;\n  sku: string;\n  quantity: number;\n  unit_price: number;\n  description?: string;\n  uom?: string; // Unit of Measure\n}\n\nexport interface EDIOrder {\n  order_number: string;\n  order_date: string;\n  delivery_date?: string;\n  buyer_party: {\n    gln?: string;\n    name: string;\n    address: string;\n    city: string;\n    postal_code: string;\n    country: string;\n  };\n  supplier_party: {\n    gln?: string;\n    name: string;\n    edi_partner_id: string;\n  };\n  items: EDIOrderItem[];\n  currency: string;\n  total_amount: number;\n  notes?: string;\n}\n\nexport class EDIService {\n  /**\n   * Send order via EDI/XML\n   */\n  async sendOrderViaEDI(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> {\n    try {\n      orderLogger.info(\n        `Sending order ${orderReference} via EDI to supplier ${order.supplier_name}`\n      );\n\n      // Get supplier EDI configuration\n      const { data: supplier, error: supplierError } = await supabase\n        .from('suppliers')\n        .select('integration_config, name, code')\n        .eq('id', order.supplier_id)\n        .single<Tables<'suppliers'>>();\n\n      if (supplierError || !supplier) {\n        throw new Error('Supplier not found');\n      }\n\n      const rawConfig = supplier.integration_config;\n      if (\n        !rawConfig ||\n        typeof rawConfig !== 'object' ||\n        Array.isArray(rawConfig)\n      ) {\n        throw new Error('EDI configuration incomplete');\n      }\n\n      const ediConfig = rawConfig as Partial<EDIConfig>;\n      if (!ediConfig.edi_endpoint || !ediConfig.edi_partner_id) {\n        throw new Error('EDI configuration incomplete');\n      }\n\n      // Get practice details for buyer party\n      const { data: practice, error: practiceError } = await supabase\n        .from('practices')\n        .select('name, address, city, postal_code, country')\n        .eq('id', order.practice_id)\n        .single<Tables<'practices'>>();\n\n      if (practiceError || !practice) {\n        throw new Error('Practice details not found');\n      }\n\n      // Build EDI order\n      const ediOrder: EDIOrder = {\n        order_number: orderReference,\n        order_date: new Date().toISOString().split('T')[0] ?? '',\n        delivery_date: order.estimated_delivery_date,\n        buyer_party: {\n          gln:\n            (\n              supplier.integration_config as\n                | { buyer_gln?: string }\n                | null\n                | undefined\n            )?.buyer_gln ?? '',\n          name: practice.name ?? '',\n          address: practice.address ?? '',\n          city: practice.city ?? '',\n          postal_code: practice.postal_code ?? '',\n          country: practice.country ?? '',\n        },\n        supplier_party: {\n          gln: ediConfig.edi_partner_id,\n          name: supplier.name,\n          edi_partner_id: ediConfig.edi_partner_id,\n        },\n        items: order.items.map((item, index) => ({\n          line_number: index + 1,\n          sku: item.supplier_sku || item.product_sku || '',\n          quantity: item.quantity,\n          unit_price: item.unit_price ?? 0,\n          description: item.product_name ?? item.product_sku ?? '',\n          uom: 'PCE', // Default to pieces, could be configurable\n        })),\n        currency: 'EUR',\n        total_amount: order.items.reduce(\n          (sum, item) => sum + item.total_price,\n          0\n        ),\n        notes: `Automated order from Remcura for ${practice.name ?? ''}`,\n      };\n\n      // Generate XML based on EDI format\n      let xmlContent: string;\n      switch (ediConfig.edi_format || 'ORDERS') {\n        case 'EDIFACT_ORDERS':\n          xmlContent = this.generateEDIFACTXML(ediOrder);\n          break;\n        case 'X12_850':\n          xmlContent = this.generateX12XML(ediOrder);\n          break;\n        default:\n          xmlContent = this.generateGenericOrderXML(ediOrder);\n      }\n\n      // Send to EDI endpoint\n      const response = await this.sendToEDIEndpoint(\n        ediConfig as EDIConfig,\n        xmlContent,\n        orderReference\n      );\n\n      // Record the order in supplier_orders table\n      await this.recordSupplierOrder(order, orderReference, 'edi', response);\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: response.success ? 'success' : 'failed',\n        method_used: 'edi',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: response.success ? '' : (response.error ?? ''),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    } catch (error: any) {\n      orderLogger.error(\n        `EDI order sending failed for ${orderReference}:`,\n        error\n      );\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'failed',\n        method_used: 'edi',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: error instanceof Error ? error.message : String(error),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    }\n  }\n\n  /**\n   * Generate EDIFACT ORDERS D.96A XML\n   */\n  private generateEDIFACTXML(order: EDIOrder): string {\n    const timestamp = new Date()\n      .toISOString()\n      .replace(/[-:]/g, '')\n      .replace(/\\.\\d{3}Z/, '');\n\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<EDIFACT_ORDERS>\n  <UNH>\n    <MessageReferenceNumber>${order.order_number}</MessageReferenceNumber>\n    <MessageType>ORDERS</MessageType>\n    <Version>D</Version>\n    <Release>96A</Release>\n  </UNH>\n  <BGM>\n    <DocumentMessageName>220</DocumentMessageName>\n    <DocumentMessageNumber>${order.order_number}</DocumentMessageNumber>\n    <MessageFunction>9</MessageFunction>\n  </BGM>\n  <DTM>\n    <DateTimePeriod>\n      <DateTimePeriodQualifier>137</DateTimePeriodQualifier>\n      <DateTimePeriod>${timestamp}</DateTimePeriod>\n      <DateTimePeriodFormatQualifier>102</DateTimePeriodFormatQualifier>\n    </DateTimePeriod>\n  </DTM>\n  <NAD_BY>\n    <PartyQualifier>BY</PartyQualifier>\n    <PartyIdentificationDetails>\n      <PartyIdIdentification>${order.buyer_party.gln}</PartyIdIdentification>\n    </PartyIdentificationDetails>\n    <NameAndAddress>\n      <NameAndAddressLine>${order.buyer_party.name}</NameAndAddressLine>\n      <NameAndAddressLine>${order.buyer_party.address}</NameAndAddressLine>\n      <NameAndAddressLine>${order.buyer_party.postal_code} ${\n        order.buyer_party.city\n      }</NameAndAddressLine>\n      <CountryCode>${order.buyer_party.country}</CountryCode>\n    </NameAndAddress>\n  </NAD_BY>\n  <NAD_SU>\n    <PartyQualifier>SU</PartyQualifier>\n    <PartyIdentificationDetails>\n      <PartyIdIdentification>${order.supplier_party.gln}</PartyIdIdentification>\n    </PartyIdentificationDetails>\n  </NAD_SU>\n  ${order.items\n    .map(\n      item => `\n  <LIN>\n    <LineItemNumber>${item.line_number}</LineItemNumber>\n    <ItemNumberIdentification>\n      <ItemNumber>${item.sku}</ItemNumber>\n      <ItemNumberType>SA</ItemNumberType>\n    </ItemNumberIdentification>\n  </LIN>\n  <QTY>\n    <QuantityDetails>\n      <QuantityQualifier>21</QuantityQualifier>\n      <Quantity>${item.quantity}</Quantity>\n      <MeasureUnitQualifier>${item.uom}</MeasureUnitQualifier>\n    </QuantityDetails>\n  </QTY>\n  <PRI>\n    <PriceInformation>\n      <PriceQualifier>AAB</PriceQualifier>\n      <Price>${item.unit_price}</Price>\n      <PriceType>TU</PriceType>\n    </PriceInformation>\n  </PRI>`\n    )\n    .join('')}\n  <UNT>\n    <NumberOfSegments>${2 + order.items.length * 3}</NumberOfSegments>\n    <MessageReferenceNumber>${order.order_number}</MessageReferenceNumber>\n  </UNT>\n</EDIFACT_ORDERS>`;\n  }\n\n  /**\n   * Generate X12 850 (Purchase Order) XML\n   */\n  private generateX12XML(order: EDIOrder): string {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<X12_850>\n  <ST>\n    <TransactionSetIdentifierCode>850</TransactionSetIdentifierCode>\n    <TransactionSetControlNumber>${\n      order.order_number\n    }</TransactionSetControlNumber>\n  </ST>\n  <BEG>\n    <TransactionSetPurposeCode>00</TransactionSetPurposeCode>\n    <PurchaseOrderTypeCode>NE</PurchaseOrderTypeCode>\n    <PurchaseOrderNumber>${order.order_number}</PurchaseOrderNumber>\n    <Date>${order.order_date.replace(/-/g, '')}</Date>\n  </BEG>\n  <N1_BY>\n    <EntityIdentifierCode>BY</EntityIdentifierCode>\n    <Name>${order.buyer_party.name}</Name>\n    <IdentificationCodeQualifier>91</IdentificationCodeQualifier>\n    <IdentificationCode>${order.buyer_party.gln}</IdentificationCode>\n  </N1_BY>\n  <N3_BY>\n    <AddressInformation>${order.buyer_party.address}</AddressInformation>\n  </N3_BY>\n  <N4_BY>\n    <CityName>${order.buyer_party.city}</CityName>\n    <StateOrProvinceCode></StateOrProvinceCode>\n    <PostalCode>${order.buyer_party.postal_code}</PostalCode>\n    <CountryCode>${order.buyer_party.country}</CountryCode>\n  </N4_BY>\n  <N1_ST>\n    <EntityIdentifierCode>ST</EntityIdentifierCode>\n    <Name>${order.supplier_party.name}</Name>\n    <IdentificationCodeQualifier>91</IdentificationCodeQualifier>\n    <IdentificationCode>${order.supplier_party.gln}</IdentificationCode>\n  </N1_ST>\n  ${order.items\n    .map(\n      item => `\n  <PO1>\n    <AssignedIdentification>${item.line_number}</AssignedIdentification>\n    <QuantityOrdered>${item.quantity}</QuantityOrdered>\n    <UnitOrBasisForMeasurementCode>${item.uom}</UnitOrBasisForMeasurementCode>\n    <UnitPrice>${item.unit_price}</UnitPrice>\n    <BasisOfUnitPriceCode>PE</BasisOfUnitPriceCode>\n    <ProductServiceIdQualifier>SK</ProductServiceIdQualifier>\n    <ProductServiceId>${item.sku}</ProductServiceId>\n  </PO1>`\n    )\n    .join('')}\n  <CTT>\n    <NumberOfLineItems>${order.items.length}</NumberOfLineItems>\n  </CTT>\n  <SE>\n    <NumberOfIncludedSegments>${\n      4 + order.items.length\n    }</NumberOfIncludedSegments>\n    <TransactionSetControlNumber>${\n      order.order_number\n    }</TransactionSetControlNumber>\n  </SE>\n</X12_850>`;\n  }\n\n  /**\n   * Generate generic order XML for suppliers without specific EDI format\n   */\n  private generateGenericOrderXML(order: EDIOrder): string {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Order xmlns=\"http://www.remcura.nl/order/schema\">\n  <Header>\n    <OrderNumber>${order.order_number}</OrderNumber>\n    <OrderDate>${order.order_date}</OrderDate>\n    <Currency>${order.currency}</Currency>\n    <TotalAmount>${order.total_amount}</TotalAmount>\n    ${\n      order.delivery_date\n        ? `<RequestedDeliveryDate>${order.delivery_date}</RequestedDeliveryDate>`\n        : ''\n    }\n  </Header>\n  <BuyerParty>\n    <Name>${order.buyer_party.name}</Name>\n    <GLN>${order.buyer_party.gln}</GLN>\n    <Address>\n      <Street>${order.buyer_party.address}</Street>\n      <City>${order.buyer_party.city}</City>\n      <PostalCode>${order.buyer_party.postal_code}</PostalCode>\n      <Country>${order.buyer_party.country}</Country>\n    </Address>\n  </BuyerParty>\n  <SupplierParty>\n    <Name>${order.supplier_party.name}</Name>\n    <PartnerID>${order.supplier_party.edi_partner_id}</PartnerID>\n  </SupplierParty>\n  <OrderLines>\n    ${order.items\n      .map(\n        item => `\n    <OrderLine>\n      <LineNumber>${item.line_number}</LineNumber>\n      <SKU>${item.sku}</SKU>\n      <Description><![CDATA[${item.description || ''}]]></Description>\n      <Quantity>${item.quantity}</Quantity>\n      <UnitOfMeasure>${item.uom}</UnitOfMeasure>\n      <UnitPrice>${item.unit_price}</UnitPrice>\n      <LineTotal>${(item.quantity * item.unit_price).toFixed(2)}</LineTotal>\n    </OrderLine>`\n      )\n      .join('')}\n  </OrderLines>\n  ${order.notes ? `<Notes><![CDATA[${order.notes}]]></Notes>` : ''}\n</Order>`;\n  }\n\n  /**\n   * Send XML to EDI endpoint\n   */\n  private async sendToEDIEndpoint(\n    config: EDIConfig,\n    xmlContent: string,\n    orderReference: string\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\n    try {\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/xml',\n        'X-Order-Reference': orderReference,\n      };\n\n      // Add authentication if configured\n      if (config.edi_username && config.edi_password) {\n        const auth = btoa(`${config.edi_username}:${config.edi_password}`);\n        headers['Authorization'] = `Basic ${auth}`;\n      }\n\n      const response = await fetch(config.edi_endpoint, {\n        method: 'POST',\n        headers,\n        body: xmlContent,\n      });\n\n      const responseText = await response.text();\n\n      if (!response.ok) {\n        throw new Error(\n          `EDI endpoint returned ${response.status}: ${responseText}`\n        );\n      }\n\n      orderLogger.info(`EDI order ${orderReference} sent successfully`);\n\n      return {\n        success: true,\n        response: {\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: responseText,\n        },\n      };\n    } catch (error: any) {\n      orderLogger.error(`EDI sending failed: ${error.message}`);\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Record order in supplier_orders table\n   */\n  private async recordSupplierOrder(\n    order: SupplierOrder,\n    orderReference: string,\n    method: string,\n    response: any\n  ): Promise<void> {\n    const subtotal = order.items.reduce(\n      (sum, item) => sum + item.total_price,\n      0\n    );\n    const total = subtotal + (order.shipping_cost || 0);\n\n    orderLogger.info('Supplier order recorded (simulation)', {\n      supplier_id: order.supplier_id,\n      order_reference: orderReference,\n      method,\n      success: response.success,\n      subtotal,\n      total,\n    });\n  }\n}\n\nexport const ediService = new EDIService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\pdfService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3556, 3559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3556, 3559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4238, 4241], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4238, 4241], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 148,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 148,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4257, 4260], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4257, 4260], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12321, 12324], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12321, 12324], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 476,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 476,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12340, 12343], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12340, 12343], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 607,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 607,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16586, 16589], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16586, 16589], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 620,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 620,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16906, 16909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16906, 16909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport type {\n  SupplierOrder,\n  OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { Tables } from '@/types';\n\nexport interface PDFConfig {\n  email_template?: 'standard' | 'custom';\n  pdf_template?: 'standard' | 'custom';\n  email_subject_template?: string;\n  include_logos?: boolean;\n  include_terms?: boolean;\n  auto_send_email?: boolean;\n  cc_emails?: string[];\n  bcc_emails?: string[];\n  custom_css?: string;\n  footer_text?: string;\n}\n\nexport interface EmailTemplate {\n  subject: string;\n  body_html: string;\n  body_text: string;\n}\n\nexport class PDFService {\n  /**\n   * Send order via PDF (email with PDF attachment)\n   */\n  async sendOrderViaPDF(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> {\n    try {\n      orderLogger.info(\n        `Generating PDF order ${orderReference} for supplier ${order.supplier_name}`\n      );\n\n      // Get supplier and practice details\n      const [supplierResult, practiceResult] = await Promise.all([\n        supabase\n          .from('suppliers')\n          .select('integration_config, name, contact_email, contact_person')\n          .eq('id', order.supplier_id)\n          .single<Tables<'suppliers'>>(),\n        supabase\n          .from('practices')\n          .select(\n            'name, address, city, postal_code, country, contact_email, contact_phone, logo_url'\n          )\n          .eq('id', order.practice_id)\n          .single<Tables<'practices'>>(),\n      ]);\n\n      if (supplierResult.error || !supplierResult.data) {\n        throw new Error('Supplier not found');\n      }\n\n      if (practiceResult.error || !practiceResult.data) {\n        throw new Error('Practice details not found');\n      }\n\n      const supplier = supplierResult.data;\n      const practice = practiceResult.data;\n      const practiceName = practice.name ?? 'Onbekende praktijk';\n      const rawConfig = supplier.integration_config;\n      const pdfConfig: PDFConfig =\n        rawConfig && typeof rawConfig === 'object' && !Array.isArray(rawConfig)\n          ? (rawConfig as PDFConfig)\n          : {};\n\n      if (!supplier.contact_email) {\n        throw new Error('Supplier email not configured');\n      }\n\n      // Generate PDF content\n      const pdfHTML = this.generatePDFHTML(\n        order,\n        orderReference,\n        { ...practice, name: practiceName },\n        supplier,\n        pdfConfig\n      );\n\n      // Generate PDF using browser's print functionality (would need actual PDF generation in production)\n      const pdfBlob = await this.generatePDFBlob(pdfHTML);\n\n      // Prepare email\n      const emailTemplate = this.generateEmailTemplate(\n        order,\n        orderReference,\n        { ...practice, name: practiceName },\n        supplier,\n        pdfConfig\n      );\n\n      // Send email with PDF attachment\n      await this.sendEmail(\n        supplier.contact_email,\n        emailTemplate,\n        pdfBlob,\n        orderReference,\n        pdfConfig\n      );\n\n      // Record the order\n      await this.recordSupplierOrder(order, orderReference, 'pdf', {\n        success: true,\n      });\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'success',\n        method_used: 'pdf',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    } catch (error: any) {\n      orderLogger.error(\n        `PDF order sending failed for ${orderReference}:`,\n        error\n      );\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'failed',\n        method_used: 'pdf',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: error instanceof Error ? error.message : String(error),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    }\n  }\n\n  /**\n   * Generate PDF HTML content\n   */\n  private generatePDFHTML(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: any,\n    supplier: any,\n    config: PDFConfig\n  ): string {\n    const currentDate = new Date().toLocaleDateString('nl-NL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n\n    const practiceName = practice.name ?? 'Onbekende praktijk';\n\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Bestelling ${orderReference}</title>\n  <style>\n    ${this.getDefaultPDFStyles()}\n    ${config.custom_css || ''}\n  </style>\n</head>\n<body>\n  <div class=\"pdf-container\">\n    <!-- Header -->\n    <header class=\"order-header\">\n      <div class=\"header-left\">\n        ${\n          config.include_logos && practice.logo_url\n            ? `<img src=\"${practice.logo_url}\" alt=\"${practice.name}\" class=\"logo\">`\n            : ''\n        }\n        <div class=\"practice-info\">\n          <h1>${practiceName}</h1>\n          <div class=\"address\">\n            ${practice.address}<br>\n            ${practice.postal_code} ${practice.city}<br>\n            ${practice.country}\n          </div>\n          ${\n            practice.contact_email\n              ? `<div class=\"contact\">Email: ${practice.contact_email}</div>`\n              : ''\n          }\n          ${\n            practice.contact_phone\n              ? `<div class=\"contact\">Tel: ${practice.contact_phone}</div>`\n              : ''\n          }\n        </div>\n      </div>\n      <div class=\"header-right\">\n        <h2>BESTELLING</h2>\n        <div class=\"order-info\">\n          <div><strong>Bestelnummer:</strong> ${orderReference}</div>\n          <div><strong>Datum:</strong> ${currentDate}</div>\n          ${\n            order.estimated_delivery_date\n              ? `<div><strong>Gewenste leverdatum:</strong> ${new Date(\n                  order.estimated_delivery_date\n                ).toLocaleDateString('nl-NL')}</div>`\n              : ''\n          }\n        </div>\n      </div>\n    </header>\n\n    <!-- Supplier info -->\n    <section class=\"supplier-section\">\n      <h3>Leverancier</h3>\n      <div class=\"supplier-info\">\n        <strong>${supplier.name}</strong>\n        ${\n          supplier.contact_person ? `<br>T.a.v. ${supplier.contact_person}` : ''\n        }\n      </div>\n    </section>\n\n    <!-- Order items -->\n    <section class=\"items-section\">\n      <h3>Bestelde artikelen</h3>\n      <table class=\"items-table\">\n        <thead>\n          <tr>\n            <th>Artikel</th>\n            <th>SKU</th>\n            <th>Aantal</th>\n            <th>Prijs per stuk</th>\n            <th>Totaal</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${order.items\n            .map(\n              item => `\n          <tr>\n            <td>${item.product_name}</td>\n            <td>${item.supplier_sku || ''}</td>\n            <td>${item.quantity}</td>\n            <td>€${(item.unit_price ?? 0).toFixed(2)}</td>\n            <td>€${item.total_price.toFixed(2)}</td>\n          </tr>\n          `\n            )\n            .join('')}\n        </tbody>\n        <tfoot>\n          <tr class=\"total-row\">\n            <td colspan=\"3\"><strong>Totaal aantal artikelen:</strong></td>\n            <td><strong>${order.total_items}</strong></td>\n          <td><strong>€${order.items\n            .reduce((sum, item) => sum + item.total_price, 0)\n            .toFixed(2)}</strong></td>\n          </tr>\n          ${\n            order.shipping_cost\n              ? `\n          <tr>\n            <td colspan=\"4\">Verzendkosten</td>\n            <td>€${order.shipping_cost.toFixed(2)}</td>\n          </tr>\n          <tr class=\"grand-total\">\n            <td colspan=\"4\"><strong>Totaal inclusief verzending</strong></td>\n          <td><strong>€${(\n            order.items.reduce((sum, item) => sum + item.total_price, 0) +\n            order.shipping_cost\n          ).toFixed(2)}</strong></td>\n          </tr>\n          `\n              : ''\n          }\n        </tfoot>\n      </table>\n    </section>\n\n    <!-- Additional notes -->\n    <section class=\"notes-section\">\n      <h3>Opmerkingen</h3>\n      <p>Deze bestelling is automatisch gegenereerd door Remcura voor ${\n        practiceName\n      }.</p>\n      <p>Gelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.</p>\n    </section>\n\n    ${\n      config.include_terms\n        ? `\n    <section class=\"terms-section\">\n      <h3>Algemene voorwaarden</h3>\n      <p>Deze bestelling is onderworpen aan de algemene voorwaarden van ${practiceName} en de leverancier.</p>\n    </section>\n    `\n        : ''\n    }\n\n    <!-- Footer -->\n    <footer class=\"order-footer\">\n      ${\n        config.footer_text ||\n        `<p>Gegenereerd op ${new Date().toLocaleString(\n          'nl-NL'\n        )} door Remcura</p>`\n      }\n    </footer>\n  </div>\n</body>\n</html>`;\n  }\n\n  /**\n   * Get default PDF styles\n   */\n  private getDefaultPDFStyles(): string {\n    return `\n      * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n      }\n      \n      body {\n        font-family: Arial, sans-serif;\n        font-size: 12px;\n        line-height: 1.4;\n        color: #333;\n      }\n      \n      .pdf-container {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n      \n      .order-header {\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 30px;\n        padding-bottom: 20px;\n        border-bottom: 2px solid #2196F3;\n      }\n      \n      .logo {\n        max-height: 60px;\n        margin-bottom: 10px;\n      }\n      \n      .practice-info h1 {\n        font-size: 18px;\n        color: #2196F3;\n        margin-bottom: 10px;\n      }\n      \n      .address {\n        margin-bottom: 10px;\n      }\n      \n      .contact {\n        font-size: 11px;\n        color: #666;\n      }\n      \n      .header-right {\n        text-align: right;\n      }\n      \n      .header-right h2 {\n        font-size: 24px;\n        color: #2196F3;\n        margin-bottom: 15px;\n      }\n      \n      .order-info div {\n        margin-bottom: 5px;\n      }\n      \n      .supplier-section, .items-section, .notes-section, .terms-section {\n        margin-bottom: 25px;\n      }\n      \n      h3 {\n        font-size: 14px;\n        color: #2196F3;\n        margin-bottom: 10px;\n        border-bottom: 1px solid #e0e0e0;\n        padding-bottom: 5px;\n      }\n      \n      .items-table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-top: 10px;\n      }\n      \n      .items-table th,\n      .items-table td {\n        border: 1px solid #ddd;\n        padding: 8px;\n        text-align: left;\n      }\n      \n      .items-table th {\n        background-color: #f5f5f5;\n        font-weight: bold;\n      }\n      \n      .items-table td:nth-child(3),\n      .items-table td:nth-child(4),\n      .items-table td:nth-child(5) {\n        text-align: right;\n      }\n      \n      .total-row td {\n        background-color: #f9f9f9;\n        font-weight: bold;\n      }\n      \n      .grand-total td {\n        background-color: #2196F3;\n        color: white;\n        font-weight: bold;\n      }\n      \n      .notes-section p {\n        margin-bottom: 8px;\n      }\n      \n      .order-footer {\n        margin-top: 40px;\n        padding-top: 20px;\n        border-top: 1px solid #e0e0e0;\n        text-align: center;\n        font-size: 10px;\n        color: #666;\n      }\n      \n      @media print {\n        .pdf-container {\n          margin: 0;\n          padding: 0;\n        }\n        \n        body {\n          -webkit-print-color-adjust: exact;\n        }\n      }\n    `;\n  }\n\n  /**\n   * Generate PDF blob (simplified - in production use a proper PDF library)\n   */\n  private async generatePDFBlob(htmlContent: string): Promise<Blob> {\n    // This is a simplified approach. In a production environment, you would use:\n    // - Puppeteer for server-side PDF generation\n    // - jsPDF for client-side PDF generation\n    // - Or a PDF generation service\n\n    // For now, we'll return the HTML as a blob that can be printed to PDF\n    return new Blob([htmlContent], { type: 'text/html' });\n  }\n\n  /**\n   * Generate email template\n   */\n  private generateEmailTemplate(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: any,\n    supplier: any,\n    config: PDFConfig\n  ): EmailTemplate {\n    const defaultSubject = config.email_subject_template\n      ? config.email_subject_template\n          .replace('{order_reference}', orderReference)\n          .replace('{practice_name}', practice.name)\n          .replace('{supplier_name}', supplier.name)\n      : `Nieuwe bestelling ${orderReference} van ${practice.name}`;\n\n    const bodyHtml = `\n      <html>\n        <body style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\n          <h2>Nieuwe bestelling</h2>\n          \n          <p>Beste ${supplier.contact_person || supplier.name},</p>\n          \n          <p>Hierbij ontvangt u een nieuwe bestelling van <strong>${\n            practice.name\n          }</strong>.</p>\n          \n          <h3>Bestelling details:</h3>\n          <ul>\n            <li><strong>Bestelnummer:</strong> ${orderReference}</li>\n            <li><strong>Verzendinformatie:</strong> ${order.estimated_delivery_date ? `Verwachte levering op ${new Date(order.estimated_delivery_date).toLocaleDateString('nl-NL')}` : 'Geen informatie beschikbaar'}</li>\n            <li><strong>Totaal aantal artikelen:</strong> ${order.total_items}</li>\n            <li><strong>Totaalwaarde:</strong> €${order.items\n              .reduce((sum, item) => sum + item.total_price, 0)\n              .toFixed(2)}</li>\n            ${\n              order.shipping_cost\n                ? `<li><strong>Verzendkosten:</strong> €${order.shipping_cost.toFixed(2)}</li>`\n                : ''\n            }\n            ${\n              order.estimated_delivery_date\n                ? `<li><strong>Gewenste leverdatum:</strong> ${new Date(\n                    order.estimated_delivery_date\n                  ).toLocaleDateString('nl-NL')}</li>`\n                : ''\n            }\n          </ul>\n          \n          <p>Zie de bijgevoegde PDF voor alle details van de bestelling.</p>\n          \n          <p>Gelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.</p>\n          \n          <p>Met vriendelijke groet,<br>\n          ${practice.name}<br>\n          ${practice.contact_email || ''}</p>\n          \n          <hr>\n          <p style=\"font-size: 12px; color: #666;\">\n            Deze email is automatisch gegenereerd door Remcura.\n          </p>\n        </body>\n      </html>\n    `;\n\n    const bodyText = `\nNieuwe bestelling\n\nBeste ${supplier.contact_person || supplier.name},\n\nHierbij ontvangt u een nieuwe bestelling van ${practice.name}.\n\nBestelling details:\n- Bestelnummer: ${orderReference}\n- Datum: ${new Date().toLocaleDateString('nl-NL')}\n- Aantal artikelen: ${order.total_items}\n${\n  order.estimated_delivery_date\n    ? `- Gewenste leverdatum: ${new Date(\n        order.estimated_delivery_date\n      ).toLocaleDateString('nl-NL')}`\n    : ''\n}\n\nZie de bijgevoegde PDF voor alle details van de bestelling.\n\nGelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.\n\nMet vriendelijke groet,\n${practice.name}\n${practice.contact_email || ''}\n\n---\nDeze email is automatisch gegenereerd door Remcura.\n    `;\n\n    return {\n      subject: defaultSubject,\n      body_html: bodyHtml,\n      body_text: bodyText,\n    };\n  }\n\n  /**\n   * Send email with PDF attachment\n   */\n  private async sendEmail(\n    recipientEmail: string,\n    template: EmailTemplate,\n    pdfBlob: Blob,\n    orderReference: string,\n    config: PDFConfig\n  ): Promise<void> {\n    try {\n      // In a production environment, you would integrate with an email service like:\n      // - SendGrid\n      // - Mailgun\n      // - AWS SES\n      // - Or use Supabase Edge Functions for email sending\n\n      // For now, we'll simulate the email sending\n      orderLogger.info(\n        `Email sent to ${recipientEmail} with PDF attachment for order ${orderReference}`\n      );\n\n      // Create a download link for the PDF (for testing purposes)\n      const pdfUrl = URL.createObjectURL(pdfBlob);\n      console.log(`PDF download link: ${pdfUrl}`);\n\n      // Log email details\n      orderLogger.info('Email details:', {\n        to: recipientEmail,\n        cc: config.cc_emails || [],\n        bcc: config.bcc_emails || [],\n        subject: template.subject,\n        attachment: `order_${orderReference}.pdf`,\n      });\n    } catch (error: any) {\n      orderLogger.error('Email sending failed:', error);\n      throw new Error(`Failed to send email: ${error.message}`);\n    }\n  }\n\n  /**\n   * Record order in supplier_orders table\n   */\n  private async recordSupplierOrder(\n    order: SupplierOrder,\n    orderReference: string,\n    method: string,\n    response: any\n  ): Promise<void> {\n    orderLogger.info('Supplier order recorded (simulation)', {\n      supplier_id: order.supplier_id,\n      order_reference: orderReference,\n      method,\n      success: response.success,\n    });\n  }\n\n  /**\n   * Generate PDF for download (without sending email)\n   */\n  async generatePDFForDownload(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<Blob> {\n    // Get practice and supplier details\n    const [practiceResult, supplierResult] = await Promise.all([\n      supabase\n        .from('practices')\n        .select(\n          'name, address, city, postal_code, country, contact_email, contact_phone, logo_url'\n        )\n        .eq('id', order.practice_id)\n        .single(),\n      supabase\n        .from('suppliers')\n        .select('name, contact_person, integration_config')\n        .eq('id', order.supplier_id)\n        .single(),\n    ]);\n\n    if (practiceResult.error || supplierResult.error) {\n      throw new Error('Failed to fetch order details');\n    }\n\n    const practice = practiceResult.data;\n    const supplier = supplierResult.data;\n    const config = (supplier.integration_config as PDFConfig) || {};\n\n    const htmlContent = this.generatePDFHTML(\n      order,\n      orderReference,\n      practice,\n      supplier,\n      config\n    );\n    return this.generatePDFBlob(htmlContent);\n  }\n}\n\nexport const pdfService = new PDFService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\auth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\batch.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProductBatchWithDetails' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProductBatchWithDetailsView' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CreateBatchRequest' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapProductBatchRowToDetails' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'t' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapStockLevelRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3395, 3398], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3395, 3398], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3649, 3652], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3649, 3652], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3934, 3937], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3934, 3937], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 208,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 208,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6030, 6033], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6030, 6033], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6103, 6106], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6103, 6106], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 210,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 210,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6176, 6179], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6176, 6179], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 261,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 261,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7792, 7795], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7792, 7795], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 262,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 262,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7862, 7865], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7862, 7865], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 263,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 263,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7932, 7935], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7932, 7935], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 333,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 333,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10389, 10392], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10389, 10392], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 351,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 351,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11103, 11106], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11103, 11106], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 352,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 352,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11173, 11176], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11173, 11176], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 353,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 353,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11243, 11246], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11243, 11246], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 359,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 359,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11357, 11360], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11357, 11360], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 359,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 359,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11381, 11384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11381, 11384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 421,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 421,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13399, 13402], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13399, 13402], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 468,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 468,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15530, 15533], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15530, 15533], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 469,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 469,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15601, 15604], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15601, 15604], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 470,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 470,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15672, 15675], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15672, 15675], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 676,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 676,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21392, 21395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21392, 21395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\r\nimport { ref, computed } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport type {\r\n  ProductBatch,\r\n  ProductBatchWithDetails,\r\n  ProductBatchWithDetailsView,\r\n  CreateBatchRequest,\r\n  UpdateBatchRequest,\r\n  ExpiringBatch,\r\n  BatchMovement,\r\n} from '@/types/inventory';\r\nimport { mapProductBatchRowToDetails } from '@/types/inventory';\r\nimport type { Tables } from '@/types';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\nimport {\r\n  calculateBatchUrgency,\r\n  sortBatchesFIFO,\r\n  filterBatchesByUrgency,\r\n  validateBatchData,\r\n  areBatchNumbersSimilar,\r\n} from '@/utils/batch-helpers';\r\nimport { toArray } from '@/utils/array';\r\nimport { t } from '@/utils/i18n-service';\r\nimport {\r\n  mapProductBatchRow,\r\n  ProductBatchDTO,\r\n  mapStockLevelRow,\r\n} from '@/domain/inventory/bridge';\r\nimport {\r\n  toProductBatchInsert,\r\n  toProductBatchUpdate,\r\n} from '@/domain/inventory/payload';\r\n\r\ninterface ProductBatchFetchRow extends Tables<'product_batches'> {\r\n  product: { id: string; name: string | null; sku: string | null } | null;\r\n  location: { id: string; name: string | null } | null;\r\n  supplier: { id: string; name: string | null } | null;\r\n}\r\n\r\n// Type for get_fifo_batches RPC function result\r\ninterface FifoBatchResult {\r\n  batch_id: string;\r\n  batch_number: string;\r\n  expiry_date: string;\r\n  available_quantity: number;\r\n  use_quantity: number;\r\n  practice_id?: string;\r\n  product_id?: string;\r\n  location_id?: string;\r\n  supplier_id?: string | null;\r\n  received_date?: string;\r\n  current_quantity?: number;\r\n  reserved_quantity?: number;\r\n  unit_cost?: number | null;\r\n  total_cost?: number | null;\r\n  currency?: string | null;\r\n  status?: string | null;\r\n}\r\n\r\nexport const useBatchStore = defineStore('batch', () => {\r\n  const batches = ref<ProductBatchDTO[]>([]);\r\n  const expiringBatches = ref<ExpiringBatch[]>([]);\r\n  const fifoBatches = ref<ProductBatchDTO[]>([]);\r\n  const loading = ref(false);\r\n  const error = ref<string | null>(null);\r\n\r\n  const batchesByProduct = computed(\r\n    () => (productId: string) =>\r\n      batches.value.filter(batch => batch.productId === productId)\r\n  );\r\n  const batchesByLocation = computed(\r\n    () => (locationId: string) =>\r\n      batches.value.filter(batch => batch.locationId === locationId)\r\n  );\r\n\r\n  const expiredBatches = computed(() =>\r\n    batches.value.filter(batch => new Date(batch.expiryDate) < new Date())\r\n  );\r\n\r\n  const expiringBatchesCount = computed(() => {\r\n    const thirtyDaysFromNow = new Date();\r\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\r\n    return batches.value.filter(batch => {\r\n      const expiryDate = new Date(batch.expiryDate);\r\n      return expiryDate <= thirtyDaysFromNow && expiryDate > new Date();\r\n    }).length;\r\n  });\r\n\r\n  const lowStockBatches = computed(() =>\r\n    batches.value.filter(batch => batch.currentQuantity <= 10)\r\n  );\r\n\r\n  const totalValue = computed(() =>\r\n    batches.value.reduce((total, batch) => {\r\n      const unitCost = batch.unitCost || 0;\r\n      return total + batch.currentQuantity * unitCost;\r\n    }, 0)\r\n  );\r\n\r\n  const batchesSortedByFIFO = computed(() =>\r\n    sortBatchesFIFO(\r\n      batches.value.map(batch => ({\r\n        id: batch.id,\r\n        expiry_date: batch.expiryDate,\r\n        current_quantity: batch.currentQuantity,\r\n        created_at: batch.createdAt,\r\n      })) as any\r\n    )\r\n  );\r\n\r\n  const criticalBatches = computed(() =>\r\n    filterBatchesByUrgency(\r\n      batches.value.map(batch => ({\r\n        id: batch.id,\r\n        expiry_date: batch.expiryDate,\r\n        current_quantity: batch.currentQuantity,\r\n      })) as any,\r\n      ['critical', 'expired']\r\n    )\r\n  );\r\n\r\n  const warningBatches = computed(() =>\r\n    filterBatchesByUrgency(\r\n      batches.value.map(batch => ({\r\n        id: batch.id,\r\n        expiry_date: batch.expiryDate,\r\n        current_quantity: batch.currentQuantity,\r\n      })) as any,\r\n      ['warning', 'high']\r\n    )\r\n  );\r\n\r\n  const batchesWithUrgency = computed(() =>\r\n    batches.value.map(batch => ({\r\n      ...batch,\r\n      urgencyInfo: calculateBatchUrgency(batch.expiryDate),\r\n    }))\r\n  );\r\n\r\n  const batchesByUrgencyLevel = computed(() => {\r\n    const grouped: Record<string, ProductBatchDTO[]> = {\r\n      expired: [],\r\n      critical: [],\r\n      high: [],\r\n      warning: [],\r\n      low: [],\r\n      normal: [],\r\n    };\r\n\r\n    batches.value.forEach(batch => {\r\n      const urgency = calculateBatchUrgency(batch.expiryDate);\r\n      const level = urgency.level || 'normal';\r\n      if (grouped[level]) {\r\n        grouped[level].push(batch);\r\n      }\r\n    });\r\n\r\n    return grouped;\r\n  });\r\n\r\n  const fetchBatches = async (filters?: {\r\n    practiceId?: string;\r\n    productId?: string;\r\n    locationId?: string;\r\n    includeExpired?: boolean;\r\n  }) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      let query = supabase.from('product_batches').select(\r\n        `\r\n          *,\r\n          product:products!inner(id, name, sku),\r\n          location:practice_locations!inner(id, name),\r\n          supplier:suppliers(id, name)\r\n        `\r\n      );\r\n\r\n      if (filters?.practiceId) {\r\n        query = query.eq('practice_id', filters.practiceId);\r\n      } else {\r\n        query = query.is('practice_id', null);\r\n      }\r\n\r\n      if (filters?.productId) {\r\n        query = query.eq('product_id', filters.productId);\r\n      }\r\n\r\n      if (filters?.locationId) {\r\n        query = query.eq('location_id', filters.locationId);\r\n      }\r\n\r\n      if (!filters?.includeExpired) {\r\n        query = query.gte('expiry_date', new Date().toISOString());\r\n      }\r\n\r\n      query = query\r\n        .eq('status', 'active')\r\n        .order('expiry_date', { ascending: true });\r\n\r\n      const { data, error: fetchError } = await query;\r\n      if (fetchError) throw fetchError;\r\n\r\n      batches.value = toArray(data).map(batchRow =>\r\n        mapProductBatchRow(batchRow as ProductBatchFetchRow, {\r\n          product: (batchRow as ProductBatchFetchRow).product as any,\r\n          location: (batchRow as ProductBatchFetchRow).location as any,\r\n          supplier: (batchRow as ProductBatchFetchRow).supplier as any,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'fetchBatches',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchExpiringBatches = async (practiceId: string, daysAhead = 30) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { data, error: fetchError } = await supabase.rpc(\r\n        'get_expiring_batches',\r\n        {\r\n          p_practice_id: practiceId,\r\n          p_days_ahead: daysAhead,\r\n        }\r\n      );\r\n\r\n      if (fetchError) {\r\n        const today = new Date();\r\n        const until = new Date();\r\n        until.setDate(today.getDate() + daysAhead);\r\n        const { data: fallbackData, error: fbError } = await supabase\r\n          .from('product_batches')\r\n          .select(\r\n            `\r\n            *,\r\n            product:products!inner(id, name, sku),\r\n            location:practice_locations!inner(id, name),\r\n            supplier:suppliers(id, name)\r\n          `\r\n          )\r\n          .eq('practice_id', practiceId)\r\n          .lte('expiry_date', until.toISOString())\r\n          .gte('expiry_date', today.toISOString())\r\n          .order('expiry_date', { ascending: true });\r\n\r\n        if (fbError) throw fbError;\r\n\r\n        expiringBatches.value = toArray(fallbackData).map(row => {\r\n          const mapped = mapProductBatchRow(row as ProductBatchFetchRow, {\r\n            product: (row as ProductBatchFetchRow).product as any,\r\n            location: (row as ProductBatchFetchRow).location as any,\r\n            supplier: (row as ProductBatchFetchRow).supplier as any,\r\n          });\r\n          const diffDays = Math.ceil(\r\n            (new Date(mapped.expiryDate).getTime() - Date.now()) /\r\n              (1000 * 60 * 60 * 24)\r\n          );\r\n          let urgency: ExpiringBatch['urgency_level'] = 'normal';\r\n          if (diffDays < 0) urgency = 'expired';\r\n          else if (diffDays <= 7) urgency = 'critical';\r\n          else if (diffDays <= 14) urgency = 'warning';\r\n\r\n          return {\r\n            batch_id: mapped.id,\r\n            product_id: mapped.productId,\r\n            product_name: mapped.productName ?? '',\r\n            product_sku: mapped.productSku ?? '',\r\n            location_id: mapped.locationId,\r\n            location_name: mapped.locationName ?? '',\r\n            batch_number: mapped.batchNumber,\r\n            expiry_date: mapped.expiryDate,\r\n            current_quantity: mapped.currentQuantity,\r\n            days_until_expiry: diffDays,\r\n            urgency_level: urgency,\r\n          } satisfies ExpiringBatch;\r\n        });\r\n        return expiringBatches.value;\r\n      }\r\n\r\n      expiringBatches.value = (data ?? []).map(item => ({\r\n        batch_id: item.batch_id,\r\n        product_id: item.product_id,\r\n        product_name: item.product_name,\r\n        product_sku: item.product_sku,\r\n        location_id: item.location_id,\r\n        location_name: item.location_name,\r\n        batch_number: item.batch_number,\r\n        expiry_date: item.expiry_date,\r\n        current_quantity: item.current_quantity,\r\n        days_until_expiry: item.days_until_expiry,\r\n        urgency_level: item.urgency_level as 'warning' | 'high' | 'critical' | 'expired',\r\n      })) as ExpiringBatch[];\r\n      return expiringBatches.value;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'fetchExpiringBatches',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchFifoBatches = async (\r\n    productId: string,\r\n    locationId: string,\r\n    quantity: number\r\n  ) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { data, error: fetchError } = await supabase.rpc(\r\n        'get_fifo_batches',\r\n        {\r\n          p_product_id: productId,\r\n          p_location_id: locationId,\r\n          p_quantity_needed: quantity,\r\n        }\r\n      ) as { data: FifoBatchResult[] | null; error: any };\r\n\r\n      if (fetchError) {\r\n        const { data: rows, error: fbError } = await supabase\r\n          .from('product_batches')\r\n          .select(\r\n            '*, product:products(id, name, sku), location:practice_locations(id, name), supplier:suppliers(id, name)'\r\n          )\r\n          .eq('product_id', productId)\r\n          .eq('location_id', locationId)\r\n          .eq('status', 'active')\r\n          .gt('current_quantity', 0)\r\n          .order('expiry_date', { ascending: true });\r\n\r\n        if (fbError) throw fbError;\r\n\r\n        fifoBatches.value = toArray(rows).map(row =>\r\n          mapProductBatchRow(row as ProductBatchFetchRow, {\r\n            product: (row as ProductBatchFetchRow).product as any,\r\n            location: (row as ProductBatchFetchRow).location as any,\r\n            supplier: (row as ProductBatchFetchRow).supplier as any,\r\n          })\r\n        );\r\n        return fifoBatches.value;\r\n      }\r\n\r\n      fifoBatches.value = ((data as any) || []).map((entry: any) => ({\r\n        id: entry.batch_id,\r\n        practiceId: entry.practice_id,\r\n        productId: entry.product_id,\r\n        locationId: entry.location_id,\r\n        supplierId: entry.supplier_id ?? null,\r\n        batchNumber: entry.batch_number,\r\n        expiryDate: entry.expiry_date,\r\n        receivedDate: entry.received_date ?? entry.expiry_date,\r\n        currentQuantity: entry.available_quantity ?? entry.current_quantity,\r\n        reservedQuantity: entry.reserved_quantity ?? 0,\r\n        availableQuantity: entry.available_quantity ?? entry.current_quantity,\r\n        unitCost: entry.unit_cost ?? null,\r\n        totalCost: entry.total_cost ?? null,\r\n        currency: entry.currency ?? null,\r\n        status: entry.status ?? null,\r\n      }));\r\n      return fifoBatches.value;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'fetchFifoBatches',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const createBatch = async (request: Tables<'product_batches'>) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const payload = toProductBatchInsert(mapProductBatchRow(request));\r\n      const { data, error: insertError } = await supabase\r\n        .from('product_batches')\r\n        .insert(payload)\r\n        .select('*')\r\n        .single();\r\n\r\n      if (insertError) throw insertError;\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'createBatch',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const updateBatch = async (id: string, updates: UpdateBatchRequest) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const updatesAny = updates as any;\r\n      const practiceId = updatesAny.practice_id ?? undefined;\r\n      const mappedUpdate = toProductBatchUpdate(\r\n        mapProductBatchRow({\r\n          ...updates,\r\n          id,\r\n          practice_id: updatesAny.practice_id ?? '',\r\n          product_id: updatesAny.product_id ?? '',\r\n          location_id: updatesAny.location_id ?? '',\r\n          supplier_id: updatesAny.supplier_id ?? null,\r\n          batch_number: updatesAny.batch_number ?? '',\r\n          supplier_batch_number: updatesAny.supplier_batch_number ?? null,\r\n          expiry_date: updatesAny.expiry_date ?? '',\r\n          received_date: updatesAny.received_date ?? '',\r\n          initial_quantity: updatesAny.current_quantity ?? 0,\r\n          current_quantity: updatesAny.current_quantity ?? 0,\r\n          reserved_quantity: updatesAny.reserved_quantity ?? null,\r\n          available_quantity: updatesAny.available_quantity ?? null,\r\n          unit_cost: updatesAny.unit_cost ?? null,\r\n          total_cost: updatesAny.total_cost ?? null,\r\n          currency: updatesAny.currency ?? null,\r\n          status: updatesAny.status ?? null,\r\n          purchase_order_number: updatesAny.purchase_order_number ?? null,\r\n          invoice_number: updatesAny.invoice_number ?? null,\r\n          quality_check_passed: updatesAny.quality_check_passed ?? null,\r\n          quality_notes: updatesAny.quality_notes ?? null,\r\n          quarantine_until: updatesAny.quarantine_until ?? null,\r\n          created_at: null,\r\n          updated_at: null,\r\n        } as ProductBatch)\r\n      );\r\n\r\n      const { data, error: updateError } = await supabase\r\n        .from('product_batches')\r\n        .update(mappedUpdate)\r\n        .eq('id', id)\r\n        .eq(practiceId ? 'practice_id' : 'id', practiceId ? practiceId : id)\r\n        .select('*')\r\n        .single();\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      const index = batches.value.findIndex(batch => batch.id === id);\r\n      if (index !== -1) {\r\n        batches.value[index] = mapProductBatchRow(\r\n          data as ProductBatchFetchRow,\r\n          {\r\n            product: (data as ProductBatchFetchRow).product as any,\r\n            location: (data as ProductBatchFetchRow).location as any,\r\n            supplier: (data as ProductBatchFetchRow).supplier as any,\r\n          }\r\n        );\r\n      }\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'updateBatch',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const deleteBatch = async (batchId: string) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { error: deleteError } = await supabase\r\n        .from('product_batches')\r\n        .delete()\r\n        .eq('id', batchId);\r\n\r\n      if (deleteError) throw deleteError;\r\n\r\n      batches.value = batches.value.filter(batch => batch.id !== batchId);\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'deleteBatch',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const useBatch = async (movements: BatchMovement[]) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { data, error: rpcError } = await supabase.rpc(\r\n        'process_batch_stock_movement',\r\n        {\r\n          p_movements: JSON.stringify(movements),\r\n        }\r\n      );\r\n\r\n      if (rpcError) throw rpcError;\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'useBatch',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const getBatch = async (id: string) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { data, error: fetchError } = await supabase\r\n        .from('product_batches')\r\n        .select(\r\n          `\r\n          *,\r\n          product:products!inner(id, name, sku, category, brand, unit),\r\n          location:practice_locations!inner(id, name, code, location_type),\r\n          supplier:suppliers(id, name, code)\r\n        `\r\n        )\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'getBatch',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  // New enhanced actions\r\n  const searchBatches = async (searchTerm: string, practiceId: string) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      let query = supabase\r\n        .from('product_batches')\r\n        .select(\r\n          `\r\n          *,\r\n          product:products!inner(id, name, sku, category, brand, unit),\r\n          location:practice_locations!inner(id, name, code, location_type),\r\n          supplier:suppliers(id, name, code)\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId);\r\n\r\n      // Search in batch number, product name, or SKU\r\n      query = query.or(\r\n        `batch_number.ilike.%${searchTerm}%,supplier_batch_number.ilike.%${searchTerm}%,product.name.ilike.%${searchTerm}%,product.sku.ilike.%${searchTerm}%`\r\n      );\r\n\r\n      const { data, error: searchError } = await query\r\n        .eq('status', 'active')\r\n        .order('expiry_date', { ascending: true })\r\n        .limit(50);\r\n\r\n      if (searchError) throw searchError;\r\n\r\n      return data || [];\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'searchBatches',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const findSimilarBatches = (\r\n    batchNumber: string,\r\n    productId: string\r\n  ): ProductBatchDTO[] => {\r\n    return batches.value.filter(\r\n      batch =>\r\n        batch.productId === productId &&\r\n        areBatchNumbersSimilar(batch.batchNumber, batchNumber)\r\n    );\r\n  };\r\n\r\n  const validateNewBatch = (batchData: Tables<'product_batches'>) => {\r\n    const validationResult = validateBatchData({\r\n      batchNumber: batchData.batch_number,\r\n      expiryDate: batchData.expiry_date,\r\n      quantity: batchData.initial_quantity,\r\n    });\r\n\r\n    // Check for duplicate batch numbers\r\n    const existingBatch = batches.value.find(\r\n      batch =>\r\n        batch.productId === batchData.product_id &&\r\n        batch.batchNumber.toLowerCase() ===\r\n          batchData.batch_number.toLowerCase()\r\n    );\r\n\r\n    if (existingBatch) {\r\n      validationResult.errors.push('Batchnummer bestaat al voor dit product');\r\n      validationResult.isValid = false;\r\n    }\r\n\r\n    // Check for similar batch numbers\r\n    const similarBatches = findSimilarBatches(\r\n      batchData.batch_number,\r\n      batchData.product_id\r\n    );\r\n    if (similarBatches.length > 0) {\r\n      validationResult.warnings.push(\r\n        `Vergelijkbare batchnummers gevonden: ${similarBatches\r\n          .map(b => b.batchNumber)\r\n          .join(', ')}`\r\n      );\r\n    }\r\n\r\n    return validationResult;\r\n  };\r\n\r\n  const getFifoBatchSuggestion = (\r\n    productId: string,\r\n    locationId: string,\r\n    quantityNeeded: number\r\n  ) => {\r\n    const productBatches = batches.value.filter(\r\n      batch =>\r\n        batch.productId === productId &&\r\n        batch.locationId === locationId &&\r\n        batch.status === 'active' &&\r\n        batch.currentQuantity > 0\r\n    );\r\n\r\n    const sortedBatches = sortBatchesFIFO(productBatches as any);\r\n    const suggestion = [];\r\n    let remainingQuantity = quantityNeeded;\r\n\r\n    for (const batch of sortedBatches) {\r\n      if (remainingQuantity <= 0) break;\r\n\r\n      const quantityFromBatch = Math.min(\r\n        batch.currentQuantity,\r\n        remainingQuantity\r\n      );\r\n      suggestion.push({\r\n        batch,\r\n        quantity: quantityFromBatch,\r\n        urgencyInfo: calculateBatchUrgency(batch.expiry_date),\r\n      });\r\n\r\n      remainingQuantity -= quantityFromBatch;\r\n    }\r\n\r\n    return {\r\n      suggestion,\r\n      canFulfill: remainingQuantity <= 0,\r\n      shortfall: Math.max(0, remainingQuantity),\r\n    };\r\n  };\r\n\r\n  const getBatchHistory = async (batchId: string) => {\r\n    try {\r\n      loading.value = true;\r\n      error.value = null;\r\n\r\n      const { data, error: fetchError } = await supabase\r\n        .from('stock_movements')\r\n        .select(\r\n          `\r\n          id,\r\n          movement_type,\r\n          quantity_change,\r\n          reason,\r\n          created_at,\r\n          location:practice_locations(id, name),\r\n          product:products(id, name, sku)\r\n        `\r\n        )\r\n        .eq('batch_id', batchId)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      return data || [];\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'BatchStore',\r\n        operation: 'getBatchHistory',\r\n      });\r\n      error.value = handledError.message;\r\n      throw handledError;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    batches,\r\n    expiringBatches,\r\n    fifoBatches,\r\n    loading,\r\n    error,\r\n    batchesByProduct,\r\n    batchesByLocation,\r\n    expiredBatches,\r\n    expiringBatchesCount,\r\n    lowStockBatches,\r\n    totalValue,\r\n    batchesSortedByFIFO,\r\n    criticalBatches,\r\n    warningBatches,\r\n    batchesWithUrgency,\r\n    batchesByUrgencyLevel,\r\n    fetchBatches,\r\n    fetchExpiringBatches,\r\n    fetchFifoBatches,\r\n    createBatch,\r\n    updateBatch,\r\n    deleteBatch,\r\n    useBatch,\r\n    getBatch,\r\n    searchBatches,\r\n    findSimilarBatches,\r\n    validateNewBatch,\r\n    getFifoBatchSuggestion,\r\n    getBatchHistory,\r\n  };\r\n});\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\clinic.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\counting.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'notes' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 399,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 399,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { useAuthStore } from './auth';\nimport { countingLogger } from '@/utils/logger';\nimport { handleSupabaseError } from '@/utils/service-error-handler';\nimport { t as i18nT } from '@/utils/i18n-service';\nimport type { Tables, TablesInsert } from '@/types';\nimport type {\n  CountingSession,\n  CountingEntryDTO,\n  CountingProduct,\n  CountingStats,\n  StartCountingSessionRequest,\n} from '@/types/inventory';\n\nexport const useCountingStore = defineStore('counting', () => {\n  // State\n  const currentSession = ref<CountingSession | null>(null);\n  const countingEntries = ref<CountingEntryDTO[]>([]);\n  const availableProducts = ref<CountingProduct[]>([]);\n  const sessions = ref<CountingSession[]>([]);\n  const loading = ref(false);\n  const isCountingMode = ref(false);\n  const lastPostedMovementIds = ref<Record<string, string[]>>({});\n\n  // Auth store\n  const authStore = useAuthStore();\n\n  // Getters\n  const countingStats = computed((): CountingStats => {\n    if (!currentSession.value) {\n      return {\n        totalProducts: 0,\n        countedProducts: 0,\n        remainingProducts: 0,\n        discrepancies: 0,\n        progressPercentage: 0,\n      };\n    }\n\n    const totalProducts =\n      currentSession.value.total_products_counted ??\n      countingEntries.value.length;\n    const countedProducts = countingEntries.value.length;\n    const discrepancies = countingEntries.value.filter(\n      entry => Math.abs(entry.variance ?? 0) !== 0\n    ).length;\n\n    return {\n      totalProducts,\n      countedProducts,\n      remainingProducts: totalProducts - countedProducts,\n      discrepancies,\n      progressPercentage:\n        totalProducts > 0\n          ? Number(((countedProducts / totalProducts) * 100).toFixed(2))\n          : 0,\n    };\n  });\n\n  const entriesWithVariance = computed(() =>\n    countingEntries.value.filter(entry => Math.abs(entry.variance) > 0)\n  );\n\n  const entriesPendingVerification = computed(() =>\n    countingEntries.value.filter(\n      entry => entry.status === 'pending' || entry.status === 'discrepancy'\n    )\n  );\n\n  const nextProductToCount = computed(() => {\n    if (!availableProducts.value.length) {\n      return null;\n    }\n\n    const countedProductIds = countingEntries.value.map(\n      entry => entry.product_id\n    );\n    return (\n      availableProducts.value.find(\n        product => !countedProductIds.includes(product.id)\n      ) || null\n    );\n  });\n\n  // Actions\n  const startCountingSession = async (request: StartCountingSessionRequest) => {\n    try {\n      loading.value = true;\n\n      const primaryLocation = request.location_ids[0];\n      if (!primaryLocation) {\n        throw new Error(\n          'At least one location must be provided for counting session'\n        );\n      }\n\n      const { data: session, error: sessionError } = await supabase\n        .from('counting_sessions')\n        .insert([\n          {\n            practice_id: request.practice_id,\n            name: request.name,\n            location_id: primaryLocation,\n            started_by: authStore.user?.id ?? null,\n            status: 'in_progress',\n            count_all_products: request.session_type === 'full',\n            specific_product_ids: request.product_ids ?? null,\n            product_category_filter: request.category_filter ?? null,\n            created_at: new Date().toISOString(),\n          } satisfies TablesInsert<'counting_sessions'>,\n        ])\n        .select('*')\n        .single();\n\n      if (sessionError)\n        return handleSupabaseError(sessionError, {\n          service: 'countingStore',\n          operation: 'startCountingSession',\n          practiceId: request.practice_id,\n          metadata: {},\n        });\n\n      currentSession.value = session as CountingSession;\n      isCountingMode.value = true;\n\n      await fetchProductsForSession(session.id);\n\n      return session;\n    } catch (error) {\n      countingLogger.error('Error starting counting session', error as Error);\n      throw error;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const fetchProductsForSession = async (sessionId: string) => {\n    try {\n      const session =\n        currentSession.value || sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // Build query to get products for counting\n      let query = supabase\n        .from('stock_levels')\n        .select(\n          `\n          product_id,\n          location_id,\n          current_quantity,\n          last_counted_at,\n          location:practice_locations(name),\n          product:products(id, name, sku, category, brand, unit, image_url)\n        `\n        )\n        .eq('practice_id', session.practice_id)\n        .in('location_id', session.location_ids ?? []);\n\n      if (session.product_ids && session.product_ids.length > 0) {\n        query = query.in('product_id', session.product_ids);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      type StockLevelRow = {\n        product_id: string;\n        location_id: string;\n        current_quantity: number;\n        last_counted_at?: string | null;\n        location: { name: string | null };\n        product: {\n          id: string;\n          name: string;\n          sku: string;\n          category?: string | null;\n          brand?: string | null;\n          unit?: string | null;\n          image_url?: string | null;\n        };\n      };\n\n      const rows = (data ?? []) as StockLevelRow[];\n      availableProducts.value = rows.map(\n        item =>\n          ({\n            id: item.product.id,\n            name: item.product.name,\n            sku: item.product.sku,\n            currentSystemQuantity: item.current_quantity ?? 0,\n            locationName: item.location.name ?? '-',\n            category: item.product.category ?? undefined,\n            brand: item.product.brand ?? undefined,\n            unit: item.product.unit ?? undefined,\n            imageUrl: item.product.image_url ?? undefined,\n            lastCountedAt: item.last_counted_at ?? undefined,\n          }) satisfies CountingProduct\n      );\n\n      // Update session with product count\n      if (currentSession.value) {\n        await updateSession(session.id, {\n          total_products_counted: availableProducts.value.length,\n        });\n      }\n    } catch (error) {\n      countingLogger.error(\n        'Error fetching products for session',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const countProduct = async (\n    productId: string,\n    locationId: string,\n    countedQuantity: number,\n    options: {\n      countMethod?: 'manual' | 'barcode' | 'rfid';\n      confidenceLevel?: 'low' | 'medium' | 'high';\n      batchNumber?: string;\n      expiryDate?: string;\n      notes?: string;\n      photos?: string[];\n    } = {}\n  ) => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      // Get current system quantity\n      const { data: stockLevel, error: stockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', currentSession.value.practice_id)\n        .eq('location_id', locationId)\n        .eq('product_id', productId)\n        .single();\n\n      if (stockError)\n        return handleSupabaseError(stockError, {\n          service: 'countingStore',\n          operation: 'countProduct.fetchStockLevel',\n          practiceId: currentSession.value.practice_id,\n          metadata: { productId, locationId },\n        });\n\n      const systemQuantity =\n        (stockLevel as unknown as { current_quantity?: number } | null)\n          ?.current_quantity || 0;\n      const variance = countedQuantity - systemQuantity;\n\n      // Create counting entry\n      const payload: TablesInsert<'counting_entries'> = {\n        counting_session_id: currentSession.value.id,\n        practice_id: currentSession.value.practice_id,\n        location_id: locationId,\n        product_id: productId,\n        system_quantity: systemQuantity,\n        counted_quantity: countedQuantity,\n        counted_by: authStore.user?.id ?? null,\n        confidence_level: options.confidenceLevel ?? null,\n        batch_number: options.batchNumber ?? null,\n        expiry_date: options.expiryDate ?? null,\n        notes: options.notes ?? null,\n      };\n\n      const { data: entry, error: entryError } = await supabase\n        .from('counting_entries')\n        .insert([payload])\n        .select()\n        .single();\n\n      if (entryError)\n        return handleSupabaseError(entryError, {\n          service: 'countingStore',\n          operation: 'countProduct.insertEntry',\n          practiceId: currentSession.value.practice_id,\n          metadata: { sessionId: currentSession.value.id },\n        });\n\n      // Map DB row to app model\n      const newEntry = mapDbEntryToCountingEntry(entry);\n      countingEntries.value = [...countingEntries.value, newEntry];\n\n      // Update session progress based on actual counts\n      const newProductsCountedCount =\n        (currentSession.value.total_products_counted ?? 0) + 1;\n      const newDiscrepanciesCount =\n        Math.abs(variance) > 0\n          ? (currentSession.value.products_with_variance ?? 0) + 1\n          : (currentSession.value.products_with_variance ?? 0);\n\n      await updateSession(currentSession.value.id, {\n        total_products_counted: newProductsCountedCount,\n        products_with_variance: newDiscrepanciesCount,\n      });\n\n      return newEntry;\n    } catch (error) {\n      countingLogger.error('Error counting product:', error as Error);\n      throw error;\n    }\n  };\n\n  const updateCountingEntry = async (\n    entryId: string,\n    updates: Partial<Tables<'counting_entries'>>\n  ) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_entries')\n        .update(updates)\n        .eq('id', entryId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      const index = countingEntries.value.findIndex(\n        entry => entry.id === entryId\n      );\n      if (index >= 0) {\n        countingEntries.value[index] = mapDbEntryToCountingEntry(data);\n      }\n\n      return mapDbEntryToCountingEntry(data);\n    } catch (error) {\n      countingLogger.error('Error updating counting entry:', error as Error);\n      throw error;\n    }\n  };\n\n  const completeCountingSession = async () => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      await updateSession(currentSession.value.id, {\n        status: 'completed',\n        completed_at: new Date().toISOString(),\n        completed_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      isCountingMode.value = false;\n      return true;\n    } catch (error) {\n      countingLogger.error(\n        'Error completing counting session:',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const approveCountingSession = async (sessionId: string) => {\n    try {\n      await updateSession(sessionId, {\n        status: 'approved',\n        approved_at: new Date().toISOString(),\n        approved_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      // If auto_adjust_stock is enabled, apply all count adjustments\n      const session = sessions.value.find(s => s.id === sessionId);\n      if (\n        session &&\n        (session as CountingSession & { auto_adjust_stock?: boolean })\n          .auto_adjust_stock\n      ) {\n        await applyCountAdjustments(sessionId);\n      }\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error approving counting session:', error as Error);\n      throw error;\n    }\n  };\n\n  type CountingEntryRow = Tables<'counting_entries'>;\n  type CountingEntryWithRelations = CountingEntryRow & {\n    location?: { name?: string | null };\n    product?: { name?: string | null; sku?: string | null };\n  };\n\n  function mapDbEntryToCountingEntry(\n    row: CountingEntryWithRelations\n  ): CountingEntryDTO {\n    const systemQuantity = row.system_quantity ?? 0;\n    const countedQuantity = row.counted_quantity ?? 0;\n    const varianceQuantity = row.variance_quantity ?? 0;\n    const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n\n    return {\n      id: row.id,\n      session_id: row.counting_session_id,\n      practice_id: row.practice_id,\n      location_id: row.location_id,\n      product_id: row.product_id,\n      system_quantity: systemQuantity,\n      counted_quantity: countedQuantity,\n      variance: varianceQuantity,\n      confidence_level:\n        (row.confidence_level as 'low' | 'medium' | 'high') ?? null,\n      counted_by: row.counted_by ?? null,\n      counted_at: row.counted_at ?? null,\n      verified_by: row.verified_by ?? null,\n      verified_at: row.verified_at ?? null,\n      notes: row.notes ?? null,\n      batch_number: row.batch_number ?? null,\n      expiry_date: row.expiry_date ?? null,\n      created_at: row.created_at ?? null,\n      updated_at: row.updated_at ?? null,\n      status: Math.abs(varianceQuantity) > 0 ? 'discrepancy' : 'verified',\n      location_name: row.location?.name ?? null,\n      product_name: row.product?.name ?? null,\n      product_sku: row.product?.sku ?? null,\n    } satisfies CountingEntryDTO;\n  }\n\n  const applyCountAdjustments = async (sessionId: string) => {\n    try {\n      const session = sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // Get all entries with variances\n      const { data: entries, error } = await supabase\n        .from('counting_entries')\n        .select('*')\n        .eq('counting_session_id', sessionId)\n        .neq('variance_quantity', 0);\n\n      if (error) throw error;\n\n      // Apply each adjustment using the stock update function\n      for (const entry of entries || []) {\n        const varianceQuantity = entry.variance_quantity ?? 0;\n        const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n        try {\n          await supabase.rpc('update_stock_level', {\n            p_practice_id: entry.practice_id,\n            p_location_id: entry.location_id,\n            p_product_id: entry.product_id,\n            p_quantity_change: entry.variance_quantity ?? 0,\n            p_movement_type: 'count',\n            p_performed_by: authStore.user?.id ?? '',\n            p_reference_type: 'counting_session',\n            p_reference_id: sessionId,\n            p_reason_code: 'inventory_count',\n            p_notes: notes,\n          });\n        } catch (rpcError) {\n          // Fallback: manual movement + stock level update\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.loadLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const levelRow = level as { current_quantity?: number } | null;\n          const beforeQty = levelRow?.current_quantity ?? 0;\n          const afterQty = beforeQty + (entry.variance_quantity as number);\n\n          const { error: mvErr } = await supabase\n            .from('stock_movements')\n            .insert([\n              {\n                practice_id: entry.practice_id,\n                location_id: entry.location_id,\n                product_id: entry.product_id,\n                movement_type: 'count',\n                quantity_change: entry.variance_quantity as number,\n                quantity_before: beforeQty,\n                quantity_after: afterQty,\n                reference_type: 'counting_session',\n                reference_id: sessionId,\n                reason_code: 'count_correction',\n                notes,\n                performed_by: authStore.user?.id ?? entry.practice_id,\n              },\n            ]);\n          if (mvErr)\n            handleSupabaseError(mvErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.insertMovement',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.updateLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error applying count adjustments:', error as Error);\n      throw error;\n    }\n  };\n\n  const updateSession = async (\n    sessionId: string,\n    updates: Partial<CountingSession>\n  ) => {\n    try {\n      const practiceId =\n        currentSession.value?.practice_id ||\n        authStore.userProfile?.clinic_id ||\n        '';\n      // Enforce practice_id guard on update\n      const { safeUpdateByIdAndPractice } = await import(\n        '@/services/safeUpdate'\n      );\n      const data = await safeUpdateByIdAndPractice<\n        CountingSession & Record<string, unknown>\n      >('counting_sessions', sessionId, practiceId, {\n        ...updates,\n      });\n\n      if (!data) throw new Error('Failed to update counting session');\n\n      if (currentSession.value?.id === sessionId) {\n        currentSession.value = data as unknown as CountingSession;\n      }\n\n      const index = sessions.value.findIndex(s => s.id === sessionId);\n      if (index >= 0) {\n        sessions.value[index] = data as unknown as CountingSession;\n      }\n\n      return data as unknown as CountingSession;\n    } catch (error) {\n      countingLogger.error('Error updating session:', error as Error);\n      throw error;\n    }\n  };\n\n  const fetchSessions = async (practiceId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_sessions')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .order('created_at', { ascending: false });\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchSessions',\n          practiceId: practiceId,\n          metadata: {},\n        });\n\n      sessions.value = (data as unknown as CountingSession[]) || [];\n    } catch (error) {\n      countingLogger.error('Error fetching counting sessions:', error as Error);\n      throw error;\n    }\n  };\n\n  const fetchSessionById = async (\n    practiceId: string,\n    sessionId: string\n  ): Promise<CountingSession | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_sessions')\n        .select('*')\n        .eq('id', sessionId)\n        .eq('practice_id', practiceId)\n        .single();\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchSessionById',\n          practiceId: practiceId,\n          metadata: { sessionId },\n        });\n\n      currentSession.value = (data as unknown as CountingSession) || null;\n      return currentSession.value;\n    } catch (error) {\n      countingLogger.error(\n        'Error fetching counting session by id:',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const fetchCountingEntries = async (sessionId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_entries')\n        .select(\n          `\n          *,\n          location:practice_locations(name),\n          product:products(name, sku)\n        `\n        )\n        .eq('counting_session_id', sessionId)\n        .order('created_at', { ascending: false });\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchCountingEntries',\n          ...(currentSession.value?.practice_id\n            ? { practiceId: currentSession.value.practice_id }\n            : {}),\n          metadata: { sessionId },\n        });\n\n      type CountingEntryWithRelations = CountingEntryRow & {\n        location?: { name?: string | null };\n        product?: { name?: string | null; sku?: string | null };\n      };\n      const rows = (data ?? []) as CountingEntryWithRelations[];\n      countingEntries.value = rows.map(row => {\n        const entry = mapDbEntryToCountingEntry(row);\n        if (row.location?.name) {\n          entry.location_name = row.location.name;\n        }\n        if (row.product?.name) {\n          entry.product_name = row.product.name;\n        }\n        if (row.product?.sku) {\n          entry.product_sku = row.product.sku;\n        }\n        return entry;\n      });\n    } catch (error) {\n      countingLogger.error('Error fetching counting entries:', error as Error);\n      throw error;\n    }\n  };\n\n  const postCountingSession = async (\n    sessionId: string\n  ): Promise<{ movementIds: string[] }> => {\n    try {\n      // Ensure session loaded\n      const session =\n        currentSession.value || sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // If approval is required, move to review (completed) without posting\n      if (\n        session.status !== 'approved' &&\n        (session as CountingSession & { require_approval?: boolean })\n          .require_approval\n      ) {\n        await updateSession(sessionId, {\n          status: 'completed',\n          completed_at: new Date().toISOString(),\n          completed_by: authStore.user?.id ?? null,\n        } satisfies Partial<Tables<'counting_sessions'>>);\n        return { movementIds: [] };\n      }\n\n      // Baseline existing movement IDs for this session\n      const { data: beforeMovements, error: beforeErr } = await supabase\n        .from('stock_movements')\n        .select('id')\n        .eq('reference_type', 'counting_session')\n        .eq('reference_id', sessionId);\n      if (beforeErr)\n        handleSupabaseError(beforeErr, {\n          service: 'countingStore',\n          operation: 'post.beforeMovements',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      // Load entries with variance\n      const { data: entries, error: entriesErr } = await supabase\n        .from('counting_entries')\n        .select('*')\n        .eq('counting_session_id', sessionId)\n        .neq('variance_quantity', 0);\n      if (entriesErr)\n        handleSupabaseError(entriesErr, {\n          service: 'countingStore',\n          operation: 'post.fetchEntries',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      for (const entry of entries || []) {\n        const varianceQuantity = entry.variance_quantity ?? 0;\n        const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n        try {\n          await supabase.rpc('update_stock_level', {\n            p_practice_id: entry.practice_id,\n            p_location_id: entry.location_id,\n            p_product_id: entry.product_id,\n            p_quantity_change: entry.variance_quantity ?? 0,\n            p_movement_type: 'count',\n            p_performed_by: authStore.user?.id ?? entry.practice_id,\n            p_reference_type: 'counting_session',\n            p_reference_id: sessionId,\n            p_reason_code: 'count_correction',\n            p_notes: notes,\n          });\n        } catch (rpcError) {\n          // Fallback: manual movement + stock level update\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.loadLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const levelRow = level as { current_quantity?: number } | null;\n          const beforeQty = levelRow?.current_quantity ?? 0;\n          const afterQty = beforeQty + (entry.variance_quantity as number);\n\n          const { error: mvErr } = await supabase\n            .from('stock_movements')\n            .insert([\n              {\n                practice_id: entry.practice_id,\n                location_id: entry.location_id,\n                product_id: entry.product_id,\n                movement_type: 'count',\n                quantity_change: entry.variance_quantity as number,\n                quantity_before: beforeQty,\n                quantity_after: afterQty,\n                reference_type: 'counting_session',\n                reference_id: sessionId,\n                reason_code: 'count_correction',\n                notes,\n                performed_by: authStore.user?.id ?? entry.practice_id,\n              },\n            ]);\n          if (mvErr)\n            handleSupabaseError(mvErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.insertMovement',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.updateLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      // Get new movement IDs\n      const { data: afterMovements, error: afterErr } = await supabase\n        .from('stock_movements')\n        .select('id')\n        .eq('reference_type', 'counting_session')\n        .eq('reference_id', sessionId);\n      if (afterErr)\n        handleSupabaseError(afterErr, {\n          service: 'countingStore',\n          operation: 'post.afterMovements',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      const beforeIds = new Set((beforeMovements ?? []).map(m => m.id));\n      const newIds = (afterMovements ?? [])\n        .map(m => m.id)\n        .filter(id => !beforeIds.has(id));\n\n      lastPostedMovementIds.value[sessionId] = newIds as string[];\n\n      // Mark session as approved/posted\n      await updateSession(sessionId, {\n        status: 'approved',\n        approved_at: new Date().toISOString(),\n        approved_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      return { movementIds: newIds };\n    } catch (error) {\n      countingLogger.error('Error posting counting session:', error as Error);\n      throw error;\n    }\n  };\n\n  const undoLastPosting = async (sessionId: string): Promise<boolean> => {\n    try {\n      const ids = lastPostedMovementIds.value[sessionId] || [];\n      if (!ids.length) return false;\n\n      // Load movements details\n      const { data: movements, error: movementsErr } = await supabase\n        .from('stock_movements')\n        .select('*')\n        .in('id', ids);\n      if (movementsErr)\n        handleSupabaseError(movementsErr, {\n          service: 'countingStore',\n          operation: 'undo.loadMovements',\n          practiceId: currentSession.value?.practice_id ?? '',\n          metadata: { sessionId },\n        });\n\n      // Reverse stock by applying negative of quantity_change\n      const movementRows = movements ?? [];\n      for (const mv of movementRows) {\n        try {\n          await supabase.rpc('update_stock_level', {\n            p_practice_id: mv.practice_id,\n            p_location_id: mv.location_id,\n            p_product_id: mv.product_id,\n            p_quantity_change: -mv.quantity_change,\n            p_movement_type: 'correction',\n            p_performed_by: authStore.user?.id ?? mv.practice_id,\n            p_reference_type: 'counting_session',\n            p_reference_id: sessionId,\n            p_reason_code: 'count_correction',\n            p_notes: 'Undo counting post',\n          });\n        } catch (rpcError) {\n          // Fallback: directly adjust stock_levels\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', mv.practice_id)\n            .eq('location_id', mv.location_id)\n            .eq('product_id', mv.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'undo.fallback.loadLevel',\n              practiceId: mv.practice_id,\n              metadata: { sessionId },\n            });\n          const beforeQty =\n            (level as unknown as { current_quantity?: number } | null)\n              ?.current_quantity || 0;\n          const afterQty = beforeQty - (mv.quantity_change as number);\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', mv.practice_id)\n            .eq('location_id', mv.location_id)\n            .eq('product_id', mv.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'undo.fallback.updateLevel',\n              practiceId: mv.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      // Delete original movements\n      const { error: delErr } = await supabase\n        .from('stock_movements')\n        .delete()\n        .in('id', ids);\n      if (delErr)\n        handleSupabaseError(delErr, {\n          service: 'countingStore',\n          operation: 'undo.deleteMovements',\n          practiceId: currentSession.value?.practice_id ?? '',\n          metadata: { sessionId },\n        });\n\n      // Re-open the session\n      await updateSession(sessionId, {\n        status: 'in_progress',\n      });\n\n      delete lastPostedMovementIds.value[sessionId];\n      return true;\n    } catch (error) {\n      countingLogger.error('Error undoing posting:', error as Error);\n      throw error;\n    }\n  };\n\n  const cancelCountingSession = async () => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      await updateSession(currentSession.value.id, {\n        status: 'cancelled',\n      });\n\n      currentSession.value = null;\n      isCountingMode.value = false;\n      countingEntries.value = [];\n      availableProducts.value = [];\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error canceling counting session:', error as Error);\n      throw error;\n    }\n  };\n\n  return {\n    // State\n    currentSession,\n    countingEntries,\n    availableProducts,\n    sessions,\n    loading,\n    isCountingMode,\n    lastPostedMovementIds,\n\n    // Getters\n    countingStats,\n    entriesWithVariance,\n    entriesPendingVerification,\n    nextProductToCount,\n\n    // Actions\n    startCountingSession,\n    fetchProductsForSession,\n    countProduct,\n    updateCountingEntry,\n    completeCountingSession,\n    approveCountingSession,\n    applyCountAdjustments,\n    updateSession,\n    fetchSessions,\n    fetchSessionById,\n    fetchCountingEntries,\n    cancelCountingSession,\n    postCountingSession,\n    undoLastPosting,\n  };\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-alerts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-core.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-movements.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockMovement' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MovementQueryRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport type { Ref } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { inventoryLogger } from '@/utils/logger';\nimport type {\n  StockMovement,\n  StockMovementInsert,\n  StockUpdateRequest,\n  MovementWithRelations,\n  MovementType,\n  MovementQueryRow,\n} from '@/types/inventory';\n\n// Using shared MovementWithRelations from types\n\nexport function useInventoryMovements(\n  currentPracticeId: Ref<string | null>,\n  currentUserId: Ref<string | null>\n) {\n  // State\n  const stockMovements = ref<MovementWithRelations[]>([]);\n  const stockMovementsTotal = ref<number>(0);\n  const movementsLoading = ref<boolean>(false);\n\n  // Actions - pure inventory operations only\n  const updateStockLevel = async (request: StockUpdateRequest) => {\n    try {\n      // Validate required fields\n      if (!request.practice_id || !request.location_id || !request.product_id) {\n        throw new Error('Missing required fields for stock update');\n      }\n\n      if (request.quantity_change === 0) {\n        throw new Error('Quantity change cannot be zero');\n      }\n\n      // Get current stock level with retry logic for race conditions\n      let currentStock = 0;\n      let retryCount = 0;\n      const maxRetries = 3;\n\n      while (retryCount < maxRetries) {\n        try {\n          const { data: stockLevel, error: stockError } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', request.practice_id)\n            .eq('location_id', request.location_id)\n            .eq('product_id', request.product_id)\n            .maybeSingle();\n\n          if (stockError && stockError.code !== 'PGRST116') {\n            throw stockError;\n          }\n\n          currentStock = stockLevel?.current_quantity ?? 0;\n          break;\n        } catch (fetchError: unknown) {\n          retryCount += 1;\n          if (retryCount >= maxRetries) {\n            inventoryLogger.error(\n              'Failed to get current stock after retries:',\n              {\n                error:\n                  fetchError instanceof Error\n                    ? fetchError.message\n                    : String(fetchError),\n              }\n            );\n            throw new Error('Unable to fetch current stock level');\n          }\n          await new Promise(resolve => setTimeout(resolve, 100 * retryCount));\n        }\n      }\n\n      const newQuantity = currentStock + request.quantity_change;\n\n      // Validate that new quantity is not negative if not allowed\n      if (newQuantity < 0) {\n        throw new Error('Insufficient stock for this operation');\n      }\n\n      // Create stock movement record first (this serves as our audit trail)\n      const movementData: StockMovementInsert = {\n        practice_id: request.practice_id,\n        location_id: request.location_id,\n        product_id: request.product_id,\n        movement_type: request.movement_type,\n        quantity_change: request.quantity_change,\n        quantity_before: currentStock,\n        quantity_after: newQuantity,\n        reference_type: 'manual_adjustment',\n        reason: request.reason_code ?? null,\n        notes: request.notes ?? null,\n        batch_id: null,\n        batch_number: null,\n        expiry_date: null,\n      };\n\n      // Add created_by only if we have a valid user\n      const userId = currentUserId.value;\n      if (userId && userId !== '550e8400-e29b-41d4-a716-446655440001') {\n        // Only add created_by for real users, not demo user\n        movementData.created_by = userId;\n      }\n\n      const { data: insertedMovement, error: movementError } = await supabase\n        .from('stock_movements')\n        .insert(movementData)\n        .select()\n        .single();\n\n      if (movementError) {\n        inventoryLogger.error('Error creating stock movement:', {\n          error: movementError.message,\n          code: movementError.code,\n        });\n        throw movementError;\n      }\n\n      // Stock level is automatically updated by database triggers\n      // No need for manual upsert anymore\n\n      // Refresh data to reflect changes\n      await fetchStockMovements(request.practice_id);\n\n      return insertedMovement;\n    } catch (error: unknown) {\n      inventoryLogger.error('Error updating stock level:', {\n        error: error instanceof Error ? error.message : String(error),\n        practiceId: request.practice_id,\n        locationId: request.location_id,\n        productId: request.product_id,\n      });\n      throw error;\n    }\n  };\n\n  const fetchStockMovements = async (\n    practiceId: string,\n    options?: {\n      page?: number;\n      rowsPerPage?: number;\n      sortBy?: string;\n      descending?: boolean;\n      filters?: {\n        dateRange?: { start?: string; end?: string };\n        location_id?: string;\n        movement_type?: MovementType;\n        product_search?: string;\n      };\n    }\n  ) => {\n    try {\n      movementsLoading.value = true;\n      const page = options?.page ?? 1;\n      const rowsPerPage = options?.rowsPerPage ?? 25;\n      const sortBy = options?.sortBy ?? 'created_at';\n      const descending = options?.descending ?? true;\n\n      const from = (page - 1) * rowsPerPage;\n      const to = from + rowsPerPage - 1;\n\n      let query = supabase\n        .from('stock_movements')\n        .select(\n          `\n          id, practice_id, location_id, product_id, movement_type, quantity_change, quantity_before, quantity_after, reason, notes, created_at,\n          product:products(id, name, sku),\n          location:practice_locations(id, name)\n        `,\n          { count: 'exact' }\n        )\n        .eq('practice_id', practiceId)\n        .order(sortBy, { ascending: !descending })\n        .range(from, to);\n\n      // Filters\n      const f = options?.filters;\n      if (f?.location_id) {\n        query = query.eq('location_id', f.location_id);\n      }\n      if (f?.movement_type) {\n        query = query.eq('movement_type', f.movement_type);\n      }\n      if (f?.dateRange?.start) {\n        query = query.gte('created_at', f.dateRange.start);\n      }\n      if (f?.dateRange?.end) {\n        query = query.lte('created_at', f.dateRange.end);\n      }\n      if (f?.product_search) {\n        const term = `%${f.product_search}%`;\n        // OR match on product name or sku in the joined products table\n        query = query.or(`name.ilike.${term},sku.ilike.${term}`, {\n          foreignTable: 'products',\n        });\n      }\n\n      const { data, error, count } = await query;\n      if (error) throw error;\n\n      const mappedData = (data ?? []).map(row => ({\n        id: row.id,\n        practice_id: row.practice_id,\n        location_id: row.location_id,\n        product_id: row.product_id,\n        movement_type: row.movement_type as MovementType,\n        quantity_change: row.quantity_change,\n        quantity_before: row.quantity_before,\n        quantity_after: row.quantity_after,\n        reason: row.reason ?? null,\n        notes: row.notes ?? null,\n        created_at: row.created_at ?? null,\n        product: row.product ?? null,\n        location: row.location ?? null,\n      }));\n\n      stockMovements.value = mappedData as MovementWithRelations[];\n      stockMovementsTotal.value = count ?? 0;\n    } catch (error) {\n      inventoryLogger.error('Error fetching stock movements:', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    } finally {\n      movementsLoading.value = false;\n    }\n  };\n\n  const transferStock = async (\n    practiceId: string,\n    productId: string,\n    fromLocationId: string,\n    toLocationId: string,\n    quantity: number,\n    notes?: string\n  ) => {\n    try {\n      // Get current stock at source location\n      const { data: fromStockData, error: fromStockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', practiceId)\n        .eq('location_id', fromLocationId)\n        .eq('product_id', productId)\n        .maybeSingle();\n\n      if (fromStockError && fromStockError.code !== 'PGRST116') {\n        throw fromStockError;\n      }\n\n      const { data: toStockData, error: toStockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', practiceId)\n        .eq('location_id', toLocationId)\n        .eq('product_id', productId)\n        .maybeSingle();\n\n      if (toStockError && toStockError.code !== 'PGRST116') {\n        throw toStockError;\n      }\n\n      const fromCurrentStock = fromStockData?.current_quantity ?? 0;\n      const toCurrentStock = toStockData?.current_quantity ?? 0;\n\n      // Create transfer out movement\n      await supabase.from('stock_movements').insert({\n        practice_id: practiceId,\n        location_id: fromLocationId,\n        product_id: productId,\n        movement_type: 'transfer',\n        quantity_change: -quantity,\n        quantity_before: fromCurrentStock,\n        quantity_after: fromCurrentStock - quantity,\n        reference_type: 'transfer',\n        notes: notes || `Transfer to ${toLocationId}`,\n        created_by: currentUserId.value || '',\n      });\n\n      // Create transfer in movement\n      await supabase.from('stock_movements').insert({\n        practice_id: practiceId,\n        location_id: toLocationId,\n        product_id: productId,\n        movement_type: 'transfer',\n        quantity_change: quantity,\n        quantity_before: toCurrentStock,\n        quantity_after: toCurrentStock + quantity,\n        reference_type: 'transfer',\n        notes: notes || `Transfer from ${fromLocationId}`,\n        created_by: currentUserId.value || '',\n      });\n\n      // Update stock levels for both locations\n      await supabase.from('stock_levels').upsert(\n        [\n          {\n            practice_id: practiceId,\n            location_id: fromLocationId,\n            product_id: productId,\n            current_quantity: fromCurrentStock - quantity,\n            updated_at: new Date().toISOString(),\n          },\n          {\n            practice_id: practiceId,\n            location_id: toLocationId,\n            product_id: productId,\n            current_quantity: toCurrentStock + quantity,\n            updated_at: new Date().toISOString(),\n          },\n        ],\n        {\n          onConflict: 'practice_id,location_id,product_id',\n        }\n      );\n\n      // Refresh movements\n      await fetchStockMovements(practiceId);\n    } catch (error) {\n      inventoryLogger.error('Error transferring stock', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const executeStockTransfer = async (transferData: {\n    from_location_id: string;\n    to_location_id: string;\n    product_id: string;\n    quantity: number;\n    reason?: string;\n    notes?: string;\n  }) => {\n    const practiceId = currentPracticeId.value;\n\n    if (!practiceId) {\n      throw new Error('No practice selected for transfer');\n    }\n\n    try {\n      await transferStock(\n        practiceId,\n        transferData.product_id,\n        transferData.from_location_id,\n        transferData.to_location_id,\n        transferData.quantity,\n        transferData.notes\n      );\n    } catch (error) {\n      inventoryLogger.error('Error executing stock transfer:', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  return {\n    // State\n    stockMovements,\n    stockMovementsTotal,\n    movementsLoading,\n\n    // Actions\n    updateStockLevel,\n    fetchStockMovements,\n    transferStock,\n    executeStockTransfer,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-realtime.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleStockMovementUpdate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1769, 1772], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1769, 1772], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 86,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 86,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2494, 2497], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2494, 2497], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, onUnmounted, type Ref } from 'vue';\nimport { realtimeService } from '@/boot/supabase';\nimport { inventoryLogger } from '@/utils/logger';\nimport type { StockLevelRow, StockMovementRow } from '@/types/inventory';\nimport type { RealtimeChannel } from '@supabase/supabase-js';\n\nexport function useInventoryRealtime(\n  currentPracticeId: Ref<string | null>,\n  lastSyncAt: Ref<Date | null>,\n  fetchStockMovements?: (practiceId: string) => Promise<void>\n) {\n  // Real-time state\n  const realtimeConnected = ref(false);\n  const inventoryChannel = ref<RealtimeChannel | null>(null);\n\n  // Real-time functions\n  const handleStockLevelUpdate = async (payload: {\n    eventType: string;\n    new: StockLevelRow;\n    old: StockLevelRow;\n  }) => {\n    const practiceId = currentPracticeId.value;\n    if (!practiceId) {\n      return;\n    }\n\n    inventoryLogger.info('🔄 Stock level changed, refreshing data...');\n\n    if (payload.eventType === 'INSERT' && fetchStockMovements) {\n      const currentId = currentPracticeId.value;\n      if (currentId) {\n        inventoryLogger.info('📈 New stock movement, refreshing...');\n        await fetchStockMovements(currentId);\n      }\n    }\n  };\n\n  const handleStockMovementUpdate = async (payload: {\n    eventType: string;\n    new: StockMovementRow;\n    old: StockMovementRow;\n  }) => {\n    const practiceId = currentPracticeId.value;\n    if (!practiceId || !fetchStockMovements) {\n      return;\n    }\n\n    if (payload.eventType === 'INSERT') {\n      inventoryLogger.info('📈 New stock movement, refreshing...');\n      await fetchStockMovements(practiceId);\n    }\n  };\n\n  const startRealtimeSubscription = (practiceId: string) => {\n    if (inventoryChannel.value) {\n      void realtimeService.unsubscribe(inventoryChannel.value as any);\n    }\n\n    inventoryLogger.info(\n      '🔄 Starting real-time inventory subscription for practice:',\n      practiceId\n    );\n\n    inventoryChannel.value = realtimeService.subscribeToStockLevels(\n      practiceId,\n      payload => {\n        if (!payload.new) {\n          return;\n        }\n\n        handleStockLevelUpdate({\n          eventType: payload.eventType,\n          new: payload.new as StockLevelRow,\n          old: (payload.old ?? {}) as StockLevelRow,\n        });\n\n        lastSyncAt.value = new Date();\n      }\n    );\n\n    realtimeConnected.value = true;\n  };\n\n  const stopRealtimeSubscription = async () => {\n    if (inventoryChannel.value) {\n      await realtimeService.unsubscribe(inventoryChannel.value as any);\n      inventoryChannel.value = null;\n    }\n\n    realtimeConnected.value = false;\n    inventoryLogger.info('❌ Stopped real-time inventory subscription');\n  };\n\n  // Auto-start real-time when practice is available\n  const initializeRealtime = () => {\n    const practiceId = currentPracticeId.value;\n    if (practiceId && !realtimeConnected.value) {\n      startRealtimeSubscription(practiceId);\n    }\n  };\n\n  // Cleanup on unmount\n  onUnmounted(() => {\n    void stopRealtimeSubscription();\n  });\n\n  return {\n    // State\n    realtimeConnected,\n\n    // Actions\n    startRealtimeSubscription,\n    stopRealtimeSubscription,\n    initializeRealtime,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [722, 725], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [722, 725], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [794, 797], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [794, 797], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\nimport { useOrderListsCore } from './orderLists-core';\nimport { useOrderListsItems } from './orderLists-items';\nimport { useOrderListsIntegration } from './orderLists-integration';\nimport { useOrderListsMinMax } from './orderLists-minmax';\nimport { useOrderListsSupplierSplitting } from './orderLists-supplier-splitting';\nimport { useOrderListsRealtime } from './orderLists-realtime';\n\nexport type {\n  OrderListWithItems,\n  CreateOrderListRequest,\n  UpdateOrderListRequest,\n  AddOrderListItemRequest,\n} from '@/types/stores';\n\nexport const useOrderListsStore = defineStore('orderLists', () => {\n  const core = useOrderListsCore();\n  const items = useOrderListsItems(core.orderLists as any);\n  const integration = useOrderListsIntegration(core.orderLists as any);\n\n  const minmax = useOrderListsMinMax();\n  const supplierSplitting = useOrderListsSupplierSplitting();\n  const realtime = useOrderListsRealtime();\n\n  return {\n    orderLists: core.orderLists,\n    loading: core.loading,\n    saving: core.saving,\n\n    getOrderListById: core.getOrderListById,\n    getOrderListsBySupplier: core.getOrderListsBySupplier,\n    getOrderListsByStatus: core.getOrderListsByStatus,\n    orderListStats: core.orderListStats,\n\n    fetchOrderLists: core.fetchOrderLists,\n    createOrderList: core.createOrderList,\n    updateOrderList: core.updateOrderList,\n    deleteOrderList: core.deleteOrderList,\n    changeOrderListStatus: core.changeOrderListStatus,\n\n    addOrderListItem: items.addOrderListItem,\n    removeOrderListItem: items.removeOrderListItem,\n    updateOrderListItem: items.updateOrderListItem,\n\n    duplicateOrderList: integration.duplicateOrderList,\n    addToCart: integration.addToCart,\n    autoFillFromStockLevels: integration.autoFillFromStockLevels,\n\n    orderSuggestions: minmax.reorderSuggestions,\n    loadingOrderSuggestions: minmax.loading,\n    generateOrderSuggestions: minmax.refreshReorderSuggestions,\n    applyOrderSuggestions: minmax.createOrdersFromAdvice,\n    clearOrderSuggestions: () => {\n      minmax.reorderSuggestions.value = [];\n    },\n\n    splitOrderBySuppliers: supplierSplitting.splitOrderBySuppliers,\n    sendOrdersToSuppliers: supplierSplitting.sendOrdersToSuppliers,\n\n    setupRealtime: realtime.setupRealtime,\n    teardownRealtime: realtime.teardownRealtime,\n  };\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-core.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListDTO' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListItemInsert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1082, 1085], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1082, 1085], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1237, 1240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1237, 1240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1412, 1415], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1412, 1415], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2901, 2904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2901, 2904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2922, 2925], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2922, 2925], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 78,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 81,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3113, 3116], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3113, 3116], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 178,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 178,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4981, 4984], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4981, 4984], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6942, 6945], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6942, 6945], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6956, 6959], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6956, 6959], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 321,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 321,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9459, 9462], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9459, 9462], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { useAuthStore } from '../auth';\nimport { useSuppliersStore } from '../suppliers';\nimport { createLogger } from '@/utils/logger';\nimport {\n  OrderListRow,\n  OrderListItemRow,\n  OrderListStatus,\n  OrderListDTO,\n  OrderListItemDTO,\n  OrderListInsert,\n  OrderListItemInsert,\n  mapOrderListRowToDTO,\n  mapOrderListItemRowToDTO,\n} from '@/types/inventory';\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\nimport type {\n  OrderListWithItems,\n  CreateOrderListRequest,\n  UpdateOrderListRequest,\n} from '@/types/stores';\nimport type { Tables } from '@/types';\n\nconst log = createLogger('OrderListsCore');\n\nexport function useOrderListsCore() {\n  // State\n  const orderLists = ref<OrderListWithItems[]>([]);\n  const loading = ref(false);\n  const saving = ref(false);\n\n  // Dependencies\n  const authStore = useAuthStore();\n  const suppliersStore = useSuppliersStore();\n\n  // Getters\n  const getOrderListById = computed(() => {\n    return (id: string) => orderLists.value.find((list: any) => list.id === id);\n  });\n\n  const getOrderListsBySupplier = computed(() => {\n    return (supplierId: string) =>\n      orderLists.value.filter((list: any) => list.supplier_id === supplierId);\n  });\n\n  const getOrderListsByStatus = computed(() => {\n    return (status: OrderListStatus) =>\n      orderLists.value.filter((list: any) => list.status === status);\n  });\n\n  const orderListStats = computed(() => {\n    const stats: Record<OrderListStatus, number> = {\n      draft: 0,\n      active: 0,\n      submitted: 0,\n      completed: 0,\n      cancelled: 0,\n    };\n\n    orderLists.value.forEach(list => {\n      const status: OrderListStatus = list.status ?? 'draft';\n      stats[status] = (stats[status] ?? 0) + 1;\n    });\n\n    return {\n      total: orderLists.value.length,\n      ...stats,\n    };\n  });\n\n  // Actions\n  const fetchOrderLists = async (practiceId: string) => {\n    loading.value = true;\n    try {\n      const { data, error } = await supabase\n        .from('order_lists')\n        .select(\n          `\n          *,\n          supplier:suppliers(*),\n          items:order_list_items(\n            *,\n            product:products(*),\n            supplier_product:supplier_products(*),\n            reorder_suggestion:reorder_suggestions(*)\n          )\n        `\n        )\n        .eq('practice_id', practiceId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      const orderListsWithRelations = (data ?? []) as Array<\n        OrderListRow & {\n          supplier: Tables<'suppliers'> | null;\n          items: Array<\n            OrderListItemRow & {\n              product: Tables<'products'> | null;\n              supplier_product: Tables<'supplier_products'> | null;\n            }\n          > | null;\n        }\n      >;\n\n      orderLists.value = (orderListsWithRelations as any).map((orderList: any) => {\n        const dto = mapOrderListRowToDTO(orderList);\n        dto.supplier = orderList.supplier ?? null;\n        const items: OrderListItemDTO[] = (orderList.items ?? []).map((item: any) => {\n          const itemDto = mapOrderListItemRowToDTO(item);\n          itemDto.product = item.product ?? null;\n          itemDto.supplier_product = item.supplier_product ?? null;\n          return itemDto;\n        });\n\n        return {\n          ...dto,\n          items,\n        } satisfies OrderListWithItems;\n      });\n    } catch (err: unknown) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'fetchOrderLists',\n        practiceId,\n      });\n      log.error('Error fetching order lists', {\n        error: handledError.message,\n        practiceId,\n      });\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createOrderList = async (\n    request: CreateOrderListRequest\n  ): Promise<OrderListWithItems> => {\n    saving.value = true;\n    try {\n      const orderListData: OrderListInsert = {\n        practice_id: request.practice_id,\n        location_id: request.location_id,\n        supplier_id: request.supplier_id ?? null,\n        name: request.name,\n        description: request.description ?? null,\n        status: request.status ?? 'draft',\n        total_items: 0,\n        total_value: 0,\n        min_order_value: null,\n        created_by: authStore.user?.id ?? null,\n      };\n\n      const { data, error } = await supabase\n        .from('order_lists')\n        .insert(orderListData)\n        .select(\n          `\n          *,\n          supplier:suppliers(*)\n        `\n        )\n        .single();\n\n      if (error) throw error;\n\n      const createdDto = mapOrderListRowToDTO(data as OrderListRow);\n      createdDto.supplier =\n        (data as { supplier?: Tables<'suppliers'> | null }).supplier ?? null;\n\n      const createdOrderList: OrderListWithItems = {\n        ...createdDto,\n        items: [],\n      };\n\n      (orderLists.value as any).unshift(createdOrderList);\n      return createdOrderList;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'createOrderList',\n        practiceId: request.practice_id,\n        metadata: { request },\n      });\n      log.error('Error creating order list', {\n        error: handledError.message,\n        practiceId: request.practice_id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const updateOrderList = async (\n    request: UpdateOrderListRequest\n  ): Promise<void> => {\n    saving.value = true;\n    try {\n      const updatePayload: Partial<OrderListRow> = {\n        updated_at: new Date().toISOString(),\n      };\n      if (request.name !== undefined) updatePayload.name = request.name;\n      if (request.description !== undefined)\n        updatePayload.description = request.description;\n      if (request.supplier_id !== undefined)\n        updatePayload.supplier_id = request.supplier_id;\n      if (request.location_id !== undefined)\n        updatePayload.location_id = request.location_id;\n\n      const { error } = await supabase\n        .from('order_lists')\n        .update(updatePayload)\n        .eq('id', request.id)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const index = orderLists.value.findIndex(list => list.id === request.id);\n      if (index !== -1) {\n        const orderList = orderLists.value[index];\n        if (!orderList) {\n          return;\n        }\n\n        if (request.name !== undefined) orderList.name = request.name;\n        if (request.description !== undefined)\n          orderList.description = request.description;\n        if (request.supplier_id !== undefined) {\n          orderList.supplier_id = request.supplier_id;\n          orderList.supplier =\n            (suppliersStore.suppliers as any).find((s: any) => s.id === request.supplier_id) ??\n            null;\n        }\n        if (request.location_id !== undefined) {\n          orderList.location_id = request.location_id;\n        }\n        orderList.updated_at =\n          updatePayload.updated_at ?? new Date().toISOString();\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'updateOrderList',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { request },\n      });\n      log.error('Error updating order list', {\n        error: handledError.message,\n        orderListId: request.id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const deleteOrderList = async (id: string): Promise<void> => {\n    saving.value = true;\n    try {\n      const { error } = await supabase\n        .from('order_lists')\n        .delete()\n        .eq('id', id)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const index = orderLists.value.findIndex(list => list.id === id);\n      if (index !== -1) {\n        orderLists.value.splice(index, 1);\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'deleteOrderList',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { orderListId: id },\n      });\n      log.error('Error deleting order list', {\n        error: handledError.message,\n        orderListId: id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const changeOrderListStatus = async (\n    orderListId: string,\n    status: OrderListStatus\n  ): Promise<void> => {\n    try {\n      saving.value = true;\n\n      // Prepare update data\n      const updateData: Partial<OrderListRow> = {\n        status,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Add submission specific fields\n      if (status === 'submitted') {\n        // No submitted fields in schema; future enhancement could persist elsewhere\n      }\n\n      const { error } = await supabase\n        .from('order_lists')\n        .update(updateData)\n        .eq('id', orderListId)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const orderList = orderLists.value.find((list: any) => list.id === orderListId);\n      if (orderList) {\n        orderList.status = status;\n        orderList.updated_at = updateData.updated_at ?? orderList.updated_at;\n        // Submitted metadata not persisted – leaving local fields unchanged\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'changeOrderListStatus',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { orderListId, status },\n      });\n      log.error('Error changing order list status', {\n        error: handledError.message,\n        orderListId,\n        status,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  return {\n    // State\n    orderLists,\n    loading,\n    saving,\n\n    // Getters\n    getOrderListById,\n    getOrderListsBySupplier,\n    getOrderListsByStatus,\n    orderListStats,\n\n    // Actions\n    fetchOrderLists,\n    createOrderList,\n    updateOrderList,\n    deleteOrderList,\n    changeOrderListStatus,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-integration.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 145,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 145,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4686, 4689], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4686, 4689], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4733, 4736], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4733, 4736], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, type Ref } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { useAuthStore } from '../auth';\r\nimport { useProductsStore } from '../products';\r\nimport { createLogger } from '@/utils/logger';\r\nimport type {\r\n  OrderListStatus,\r\n  OrderListDTO,\r\n  OrderListItemDTO,\r\n  OrderListInsert,\r\n  OrderListItemInsert,\r\n  OrderListRow,\r\n} from '@/types/inventory';\r\nimport { mapOrderListRowToDTO } from '@/types/inventory';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\nimport type { OrderListWithItems } from '@/types/stores';\r\n\r\nconst log = createLogger('OrderListsIntegration');\r\n\r\nexport function useOrderListsIntegration(\r\n  orderLists: Ref<OrderListWithItems[]>\r\n) {\r\n  // State\r\n  const saving = ref(false);\r\n\r\n  // Dependencies\r\n  const authStore = useAuthStore();\r\n  const productsStore = useProductsStore();\r\n\r\n  const duplicateOrderList = async (\r\n    originalId: string,\r\n    newName: string\r\n  ): Promise<OrderListWithItems> => {\r\n    saving.value = true;\r\n    try {\r\n      const original = orderLists.value.find(\r\n        (list: OrderListWithItems) => list.id === originalId\r\n      );\r\n      if (!original) throw new Error('Original order list not found');\r\n\r\n      const insertPayload: OrderListInsert = {\r\n        practice_id: original.practice_id,\r\n        location_id: original.location_id,\r\n        supplier_id: original.supplier_id,\r\n        name: newName,\r\n        description: original.description ?? null,\r\n        status: 'draft',\r\n        total_items: 0,\r\n        total_value: 0,\r\n        min_order_value: null,\r\n        created_by: authStore.user?.id ?? null,\r\n      };\r\n\r\n      const { data: newOrderList, error: orderListError } = await supabase\r\n        .from('order_lists')\r\n        .insert(insertPayload)\r\n        .select(\r\n          `\r\n          *,\r\n          supplier:suppliers(*)\r\n        `\r\n        )\r\n        .single();\r\n\r\n      if (orderListError) throw orderListError;\r\n\r\n      // Duplicate items if any exist\r\n      if (original.items.length > 0) {\r\n        const itemsToCreate: OrderListItemInsert[] = original.items.map(\r\n          item => ({\r\n            order_list_id: (newOrderList as OrderListRow).id,\r\n            product_id: item.product_id,\r\n            supplier_product_id: item.supplier_product_id ?? null,\r\n            suggested_quantity:\r\n              item.suggested_quantity ?? item.ordered_quantity ?? 0,\r\n            ordered_quantity:\r\n              item.ordered_quantity ?? item.suggested_quantity ?? 0,\r\n            unit_price: item.unit_price ?? null,\r\n            total_price:\r\n              (item.ordered_quantity ?? item.suggested_quantity ?? 0) *\r\n              (item.unit_price ?? 0),\r\n            notes: item.notes ?? null,\r\n          })\r\n        );\r\n\r\n        const { error: itemsError } = await supabase\r\n          .from('order_list_items')\r\n          .insert(itemsToCreate);\r\n\r\n        if (itemsError) throw itemsError;\r\n      }\r\n\r\n      const dto: OrderListDTO = {\r\n        ...mapOrderListRowToDTO(newOrderList as OrderListRow),\r\n        total_items: original.items.length,\r\n        total_cost: (newOrderList as OrderListRow).total_value ?? 0,\r\n        supplier:\r\n          (newOrderList as { supplier?: OrderListDTO['supplier'] }).supplier ??\r\n          null,\r\n      };\r\n\r\n      const newOrderListWithItems: OrderListWithItems = {\r\n        ...dto,\r\n        items: original.items.map(item => ({\r\n          ...item,\r\n          order_list_id: dto.id,\r\n        })) as OrderListItemDTO[],\r\n      };\r\n\r\n      orderLists.value.unshift(newOrderListWithItems);\r\n      log.info('Order list duplicated', {\r\n        newOrderListId: newOrderList.id,\r\n      });\r\n      return newOrderListWithItems;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'duplicateOrderList',\r\n        metadata: { originalId, newName },\r\n      });\r\n      log.error('Error duplicating order list', {\r\n        error: handledError.message,\r\n        originalId,\r\n      });\r\n      throw handledError;\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  const addToCart = async (orderListId: string): Promise<void> => {\r\n    try {\r\n      const orderList = orderLists.value.find(\r\n        (list: OrderListWithItems) => list.id === orderListId\r\n      );\r\n      if (!orderList) throw new Error('Order list not found');\r\n\r\n      // Clear existing cart\r\n      productsStore.clearCart();\r\n\r\n      // Add all items to cart\r\n      for (const item of orderList.items) {\r\n        const product = productsStore.getProductById(item.product_id);\r\n        if (product) {\r\n          const supplierProduct = (product as any).supplierProducts?.find(\r\n            (sp: any) => sp.id === item.supplier_product_id\r\n          );\r\n          productsStore.addToCart(\r\n            product,\r\n            item.suggested_quantity ?? item.ordered_quantity ?? 0,\r\n            supplierProduct?.supplier_id\r\n          );\r\n        }\r\n      }\r\n      log.info('Adding order list to cart', {\r\n        orderListId,\r\n      });\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'addToCart',\r\n        metadata: { orderListId },\r\n      });\r\n      log.error('Error adding order list to cart', {\r\n        error: handledError.message,\r\n        orderListId,\r\n      });\r\n      throw handledError;\r\n    }\r\n  };\r\n\r\n  const autoFillFromStockLevels = async (): Promise<void> => {\r\n    saving.value = true;\r\n    try {\r\n      log.info('Auto-fill from stock levels not yet implemented');\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'autoFillFromStockLevels',\r\n        metadata: {},\r\n      });\r\n      log.error('Error auto-filling order list', {\r\n        error: handledError.message,\r\n      });\r\n      throw handledError;\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    // State\r\n    saving,\r\n\r\n    // Actions\r\n    duplicateOrderList,\r\n    addToCart,\r\n    autoFillFromStockLevels,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-items.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1049, 1052], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1049, 1052], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1092, 1095], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1092, 1095], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Ref } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { useProductsStore } from '../products';\r\nimport { createLogger } from '@/utils/logger';\r\nimport type {\r\n  OrderListItemDTO,\r\n  OrderListItemInsert,\r\n  OrderListItemRow,\r\n} from '@/types/inventory';\r\nimport { mapOrderListItemRowToDTO } from '@/types/inventory';\r\nimport type { Tables } from '@/types';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\nimport type {\r\n  OrderListWithItems,\r\n  AddOrderListItemRequest,\r\n} from '@/types/stores';\r\n\r\nconst log = createLogger('OrderListsItems');\r\n\r\nexport function useOrderListsItems(orderLists: Ref<OrderListWithItems[]>) {\r\n  // Dependencies\r\n  const productsStore = useProductsStore();\r\n\r\n  const addOrderListItem = async (\r\n    request: AddOrderListItemRequest\r\n  ): Promise<void> => {\r\n    try {\r\n      const product = productsStore.getProductById(request.product_id);\r\n      if (!product) {\r\n        throw new Error('Product not found');\r\n      }\r\n\r\n      const supplierProduct = (product as any).supplierProducts?.find(\r\n        (sp: any) => sp.id === request.supplier_product_id\r\n      );\r\n\r\n      if (!supplierProduct) {\r\n        throw new Error('Supplier product not found');\r\n      }\r\n\r\n      const itemData: OrderListItemInsert = {\r\n        order_list_id: request.order_list_id,\r\n        product_id: request.product_id,\r\n        supplier_product_id: request.supplier_product_id ?? null,\r\n        suggested_quantity: request.requested_quantity,\r\n        ordered_quantity: request.requested_quantity,\r\n        unit_price:\r\n          supplierProduct.list_price ?? supplierProduct.cost_price ?? 0,\r\n        total_price:\r\n          request.requested_quantity *\r\n          (supplierProduct.list_price ?? supplierProduct.cost_price ?? 0),\r\n        notes: request.notes ?? null,\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('order_list_items')\r\n        .insert(itemData)\r\n        .select(\r\n          `\r\n          *,\r\n          product:products(*),\r\n          supplier_product:supplier_products(*)\r\n        `\r\n        )\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      const orderListIndex = orderLists.value.findIndex(\r\n        (list: OrderListWithItems) => list.id === request.order_list_id\r\n      );\r\n      if (orderListIndex === -1) {\r\n        return;\r\n      }\r\n\r\n      const targetList = orderLists.value[orderListIndex];\r\n      if (!targetList) return;\r\n      const newItemRow = data as OrderListItemRow & {\r\n        product: Tables<'products'> | null;\r\n        supplier_product: Tables<'supplier_products'> | null;\r\n      };\r\n      const newItem = mapOrderListItemRowToDTO(newItemRow);\r\n      newItem.product = newItemRow.product ?? null;\r\n      newItem.supplier_product = newItemRow.supplier_product ?? null;\r\n\r\n      targetList.items.push(newItem);\r\n      updateOrderListTotals(targetList.id);\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'addOrderListItem',\r\n        metadata: { request },\r\n      });\r\n      log.error('Error adding order list item', {\r\n        error: handledError.message,\r\n        orderListId: request.order_list_id,\r\n      });\r\n      throw handledError;\r\n    }\r\n  };\r\n\r\n  const removeOrderListItem = async (itemId: string): Promise<void> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('order_list_items')\r\n        .delete()\r\n        .eq('id', itemId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      for (const orderList of orderLists.value) {\r\n        const itemIndex = orderList.items.findIndex(\r\n          (item: OrderListItemDTO) => item.id === itemId\r\n        );\r\n        if (itemIndex !== -1) {\r\n          orderList.items.splice(itemIndex, 1);\r\n          updateOrderListTotals(orderList.id);\r\n          break;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'removeOrderListItem',\r\n        metadata: { itemId },\r\n      });\r\n      log.error('Error removing order list item', {\r\n        error: handledError.message,\r\n        itemId,\r\n      });\r\n      throw handledError;\r\n    }\r\n  };\r\n\r\n  const updateOrderListItem = async (\r\n    itemId: string,\r\n    updates: { requested_quantity?: number; notes?: string }\r\n  ): Promise<void> => {\r\n    try {\r\n      const updateData: Partial<OrderListItemRow> = {};\r\n      if (updates.requested_quantity !== undefined) {\r\n        updateData.suggested_quantity = updates.requested_quantity;\r\n        updateData.ordered_quantity = updates.requested_quantity;\r\n      }\r\n      if (updates.notes !== undefined) {\r\n        updateData.notes = updates.notes;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('order_list_items')\r\n        .update(updateData)\r\n        .eq('id', itemId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      for (const orderList of orderLists.value) {\r\n        const item = orderList.items.find(\r\n          (item: OrderListItemDTO) => item.id === itemId\r\n        );\r\n        if (item) {\r\n          if (updates.requested_quantity !== undefined) {\r\n            item.suggested_quantity = updates.requested_quantity;\r\n            item.ordered_quantity = updates.requested_quantity;\r\n            const unit = item.unit_price ?? 0;\r\n            item.total_price = unit * updates.requested_quantity;\r\n          }\r\n          if (updates.notes !== undefined) item.notes = updates.notes;\r\n          updateOrderListTotals(orderList.id);\r\n          break;\r\n        }\r\n      }\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'updateOrderListItem',\r\n        metadata: { itemId, updates },\r\n      });\r\n      log.error('Error updating order list item', {\r\n        error: handledError.message,\r\n        itemId,\r\n      });\r\n      throw handledError;\r\n    }\r\n  };\r\n\r\n  const updateOrderListTotals = async (orderListId: string): Promise<void> => {\r\n    const orderList = orderLists.value.find(\r\n      (list: OrderListWithItems) => list.id === orderListId\r\n    );\r\n    if (!orderList) {\r\n      return;\r\n    }\r\n\r\n    const totalItems = orderList.items.reduce(\r\n      (sum: number, item: OrderListItemDTO) => sum + item.suggested_quantity,\r\n      0\r\n    );\r\n    const totalValue = orderList.items.reduce(\r\n      (sum: number, item: OrderListItemDTO) => sum + (item.total_price ?? 0),\r\n      0\r\n    );\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('order_lists')\r\n        .update({\r\n          total_items: totalItems,\r\n          total_cost: totalValue,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', orderListId);\r\n\r\n      if (error) throw error;\r\n\r\n      orderList.total_items = totalItems;\r\n      orderList.total_cost = totalValue;\r\n      orderList.updated_at = new Date().toISOString();\r\n    } catch (err) {\r\n      log.error('Error updating order list totals', {\r\n        error: err instanceof Error ? err.message : String(err),\r\n        orderListId,\r\n      });\r\n    }\r\n  };\r\n\r\n  return {\r\n    // Actions\r\n    addOrderListItem,\r\n    removeOrderListItem,\r\n    updateOrderListItem,\r\n    updateOrderListTotals,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-minmax.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4451, 4454], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4451, 4454], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reason' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 219,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed, onUnmounted } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { orderLogger, createLogger } from '@/utils/logger';\nimport type { UrgencyLevel, OrderListInsert, OrderListItemInsert } from '@/types/inventory';\n\n// Min/Max specific types\nexport interface MinMaxItem {\n  id: string;\n  order_list_id: string;\n  product_id: string;\n  minimum_stock: number;\n  maximum_stock: number;\n  current_stock: number;\n  reorder_point: number;\n  preferred_supplier_id?: string;\n  alternative_suppliers: string[];\n  last_order_date?: string;\n  last_order_quantity: number;\n  average_consumption: number;\n  lead_time_days: number;\n  urgency_level: 'low' | 'normal' | 'high' | 'critical';\n  auto_suggest_enabled: boolean;\n  manual_override: boolean;\n  override_reason?: string;\n}\n\nexport interface ReorderSuggestion {\n  id: string;\n  order_list_id: string;\n  product_id: string;\n  current_stock: number;\n  minimum_stock: number;\n  maximum_stock: number;\n  reorder_point: number;\n  suggested_quantity: number;\n  urgency_level: UrgencyLevel;\n  stock_status:\n    | 'out_of_stock'\n    | 'below_minimum'\n    | 'reorder_needed'\n    | 'overstocked'\n    | 'in_range';\n  calculated_order_quantity: number;\n  product_name: string;\n  product_sku: string;\n  product_unit: string;\n  list_name: string;\n  practice_id: string;\n  location_id: string;\n  location_name?: string | null;\n  preferred_unit_price: number;\n  min_order_qty: number;\n  preferred_supplier_name: string;\n  preferred_supplier_id?: string;\n}\n\nexport interface OrderAdvice {\n  total_items_to_order: number;\n  total_estimated_cost: number;\n  items_by_urgency: {\n    critical: ReorderSuggestion[];\n    high: ReorderSuggestion[];\n    normal: ReorderSuggestion[];\n    low: ReorderSuggestion[];\n  };\n  suppliers_involved: string[];\n  estimated_delivery_dates: Record<string, string>;\n}\n\nconst normalizeUrgency = (value: string | null): UrgencyLevel => {\n  switch (value) {\n    case 'critical':\n    case 'high':\n    case 'medium':\n    case 'low':\n      return value;\n    default:\n      return 'low';\n  }\n};\n\nexport function useOrderListsMinMax() {\n  // Event emitter for store communication\n  // const eventEmitter = createEventEmitter('order-lists-minmax'); // This line is removed as per the edit hint.\n\n  // Current practice ID (from auth events)\n  const currentPracticeId = ref<string | null>(null);\n\n  // State\n  const reorderSuggestions = ref<ReorderSuggestion[]>([]);\n  const loading = ref(false);\n  const lastCalculationAt = ref<Date | null>(null);\n\n  const log = createLogger('OrderListsMinMax');\n\n  // Set up event listeners for auth changes\n  // The eventEmitter.on calls are removed as per the edit hint.\n  // The original code had eventEmitter.on(StoreEventsOrderLists.USER_LOGGED_IN, ...)\n  // and eventEmitter.on(StoreEventsOrderLists.USER_LOGGED_OUT, ...).\n  // Since eventEmitter is removed, these listeners are also removed.\n\n  // Clean up listeners\n  onUnmounted(() => {\n    // The unsubscribeAuth and unsubscribeLogout functions are removed as per the edit hint.\n    // The original code had them, but they relied on eventEmitter.\n  });\n\n  // Computed properties for order advice\n  const orderAdvice = computed((): OrderAdvice => {\n    const itemsToOrder = reorderSuggestions.value.filter(\n      item =>\n        item.calculated_order_quantity > 0 &&\n        item.stock_status !== 'in_range' &&\n        item.stock_status !== 'overstocked'\n    );\n\n    const itemsByUrgency = {\n      critical: itemsToOrder.filter(item => item.urgency_level === 'critical'),\n      high: itemsToOrder.filter(item => item.urgency_level === 'high'),\n      normal: itemsToOrder.filter(item => item.urgency_level === 'medium'),\n      low: itemsToOrder.filter(item => item.urgency_level === 'low'),\n    };\n\n    const suppliersInvolved = [\n      ...new Set(\n        itemsToOrder.map(item => item.preferred_supplier_name).filter(Boolean)\n      ),\n    ];\n\n    const totalEstimatedCost = itemsToOrder.reduce(\n      (sum, item) =>\n        sum + item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\n      0\n    );\n\n    // Estimate delivery dates based on lead times (simplified)\n    const estimatedDeliveryDates: Record<string, string> = {};\n    suppliersInvolved.forEach(supplier => {\n      const supplierItems = itemsToOrder.filter(\n        item => item.preferred_supplier_name === supplier\n      );\n      const maxLeadTime = Math.max(\n        ...supplierItems.map(item => (item as any).lead_time_days ?? 7)\n      );\n      const deliveryDate = new Date();\n      deliveryDate.setDate(deliveryDate.getDate() + maxLeadTime);\n      estimatedDeliveryDates[supplier] = (\n        deliveryDate.toISOString().split('T')[0] ??\n        new Date().toISOString().split('T')[0]\n      ) as string;\n    });\n\n    return {\n      total_items_to_order: itemsToOrder.length,\n      total_estimated_cost: totalEstimatedCost,\n      items_by_urgency: itemsByUrgency,\n      suppliers_involved: suppliersInvolved,\n      estimated_delivery_dates: estimatedDeliveryDates,\n    };\n  });\n\n  const criticalItemsCount = computed(\n    () =>\n      reorderSuggestions.value.filter(\n        item =>\n          item.urgency_level === 'critical' &&\n          item.calculated_order_quantity > 0\n      ).length\n  );\n\n  const itemsBelowMinimum = computed(\n    () =>\n      reorderSuggestions.value.filter(\n        item =>\n          item.stock_status === 'below_minimum' ||\n          item.stock_status === 'out_of_stock'\n      ).length\n  );\n\n  // Actions\n  const refreshReorderSuggestions = async (practiceId: string) => {\n    loading.value = true;\n    try {\n      log.info('Fetching reorder suggestions for practice', { practiceId });\n\n      const { data, error } = await supabase\n        .from('reorder_suggestions')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .order('urgency_level', { ascending: false })\n        .order('stock_status', { ascending: true });\n\n      if (error) throw error;\n\n      reorderSuggestions.value = (data || []).map(suggestion => ({\n        ...suggestion,\n        urgency_level: normalizeUrgency(suggestion.urgency_level),\n      })) as ReorderSuggestion[];\n      lastCalculationAt.value = new Date();\n\n      // TODO: emit event when order suggestion updates are centralized\n\n      log.info(\n        `✅ Loaded ${reorderSuggestions.value.length} reorder suggestions`\n      );\n    } catch (error) {\n      log.error('Error fetching reorder suggestions', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const updateStockLevel = async (\n    itemId: string,\n    newStockLevel: number,\n    reason?: string\n  ) => {\n    try {\n      log.info(`Updating stock level for item ${itemId} to ${newStockLevel}`);\n\n      // Update the item's current stock\n      const { error } = await supabase\n        .from('order_list_items')\n        .update({\n          current_stock: newStockLevel,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', itemId);\n\n      if (error) throw error;\n\n      // Update local state\n      const item = reorderSuggestions.value.find(s => s.id === itemId);\n      if (item) {\n        item.current_stock = newStockLevel;\n\n        // Recalculate stock status and order quantity\n        if (newStockLevel <= 0) {\n          item.stock_status = 'out_of_stock';\n          item.calculated_order_quantity = item.maximum_stock;\n        } else if (newStockLevel <= item.minimum_stock) {\n          item.stock_status = 'below_minimum';\n          item.calculated_order_quantity = item.maximum_stock - newStockLevel;\n        } else if (\n          newStockLevel <= (item.reorder_point || item.minimum_stock * 1.2)\n        ) {\n          item.stock_status = 'reorder_needed';\n          item.calculated_order_quantity = Math.max(\n            item.maximum_stock - newStockLevel,\n            item.minimum_stock\n          );\n        } else if (newStockLevel >= item.maximum_stock) {\n          item.stock_status = 'overstocked';\n          item.calculated_order_quantity = 0;\n        } else {\n          item.stock_status = 'in_range';\n          item.calculated_order_quantity = 0;\n        }\n      }\n\n      log.info(`✅ Stock level updated successfully`);\n\n      // TODO: emit order list stock level update once new event map is defined\n    } catch (error) {\n      log.error('Error updating stock level', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const createOrdersFromAdvice = async (selectedItems?: string[]) => {\n    try {\n      const itemsToOrder = selectedItems\n        ? reorderSuggestions.value.filter(item =>\n            selectedItems.includes(item.id)\n          )\n        : reorderSuggestions.value.filter(\n            item => item.calculated_order_quantity > 0\n          );\n\n      if (itemsToOrder.length === 0) {\n        throw new Error('No items selected for ordering');\n      }\n\n      // Group items by supplier\n      const ordersBySupplier = new Map<string, ReorderSuggestion[]>();\n\n      itemsToOrder.forEach(item => {\n        const supplierId = item.preferred_supplier_name || 'unassigned';\n        const currentItems = ordersBySupplier.get(supplierId);\n        if (currentItems) {\n          currentItems.push(item);\n        } else {\n          ordersBySupplier.set(supplierId, [item]);\n        }\n      });\n\n      const createdOrders: Array<{\n        orderList: { id: string };\n        itemCount: number;\n        supplier: string;\n      }> = [];\n\n      // Create separate order lists per supplier\n      for (const [supplierName, items] of ordersBySupplier) {\n        const practiceId = currentPracticeId.value;\n        if (!practiceId) {\n          throw new Error('Geen praktijk geselecteerd');\n        }\n\n        const orderData: OrderListInsert = {\n          practice_id: practiceId,\n          location_id: 'default',\n          name: `Auto-order ${supplierName} - ${new Date().toLocaleDateString()}`,\n          description: `Automatisch gegenereerde bestelling gebaseerd op min/max niveaus`,\n          status: 'draft',\n          supplier_id: null,\n          total_items: items.length,\n          created_by: null,\n        };\n\n        const { data: newOrderList, error: orderError } = await supabase\n          .from('order_lists')\n          .insert(orderData)\n          .select()\n          .single();\n\n        if (orderError) throw orderError;\n\n        const orderItems: OrderListItemInsert[] = items.map(item => ({\n          order_list_id: newOrderList.id,\n          product_id: item.product_id,\n          supplier_product_id: item.preferred_supplier_id ?? null,\n          suggested_quantity: item.calculated_order_quantity,\n          ordered_quantity: item.calculated_order_quantity,\n          unit_price: item.preferred_unit_price ?? 0,\n          total_price:\n            item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\n          status: 'pending',\n          notes: `Auto-suggested: ${item.stock_status}`,\n        }));\n\n        const { error: itemsError } = await supabase\n          .from('order_list_items')\n          .insert(orderItems);\n\n        if (itemsError) throw itemsError;\n\n        createdOrders.push({\n          orderList: newOrderList,\n          itemCount: items.length,\n          supplier: supplierName,\n        });\n\n        log.info(\n          `✅ Created order for ${supplierName} with ${items.length} items`\n        );\n      }\n\n      return createdOrders;\n    } catch (error) {\n      log.error('Error creating orders from advice', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const updateMinMaxLevels = async (\n    itemId: string,\n    minStock: number,\n    maxStock: number,\n    reorderPoint?: number\n  ) => {\n    try {\n      const updateData = {\n        minimum_stock: minStock,\n        maximum_stock: maxStock,\n        reorder_point: reorderPoint || minStock * 1.2,\n        updated_at: new Date().toISOString(),\n      };\n\n      const { error } = await supabase\n        .from('order_list_items')\n        .update(updateData)\n        .eq('id', itemId);\n\n      if (error) throw error;\n\n      // Update local state\n      const item = reorderSuggestions.value.find(s => s.id === itemId);\n      if (item) {\n        item.minimum_stock = minStock;\n        item.maximum_stock = maxStock;\n        item.reorder_point = reorderPoint || minStock * 1.2;\n      }\n\n      log.info(`✅ Updated min/max levels for item ${itemId}`);\n    } catch (error) {\n      log.error('Error updating min/max levels', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  return {\n    // State\n    reorderSuggestions,\n    loading,\n    lastCalculationAt,\n    currentPracticeId,\n\n    // Computed\n    orderAdvice,\n    criticalItemsCount,\n    itemsBelowMinimum,\n\n    // Actions\n    refreshReorderSuggestions,\n    updateStockLevel,\n    createOrdersFromAdvice,\n    updateMinMaxLevels,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-realtime.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresInsertPayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresUpdatePayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresDeletePayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimeEventType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 44,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListItemRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockLevelRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 51,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierOrderRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 57,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3813, 3816], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3813, 3816], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4098, 4101], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4098, 4101], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, onUnmounted } from 'vue';\nimport { realtimeService } from '@/boot/supabase';\nimport { createLogger } from '@/utils/logger';\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\nimport type { OrderListWithItems } from '@/types/stores';\nimport type {\n  RealtimePostgresChangesPayload,\n  RealtimePostgresInsertPayload,\n  RealtimePostgresUpdatePayload,\n  RealtimePostgresDeletePayload,\n} from '@supabase/supabase-js';\nimport type { Tables } from '@/types';\nimport type { RealtimeChannel } from '@supabase/supabase-js';\n\nconst orderLoggerWithContext = createLogger('OrderListsRealtime');\nconst infoLog = (message: string, data?: Record<string, unknown>): void =>\n  data\n    ? orderLoggerWithContext.structured(message, data)\n    : orderLoggerWithContext.info(message);\nconst errorLog = (message: string, data?: Record<string, unknown>): void =>\n  data\n    ? orderLoggerWithContext.structured(message, data)\n    : orderLoggerWithContext.error(message);\n\nexport function useOrderListsRealtime() {\n  // Event emitter for store communication\n  const eventEmitter = createEventEmitter('order-lists-realtime');\n\n  // Real-time state\n  const realtimeConnected = ref(false);\n  const orderListsChannel = ref<RealtimeChannel | null>(null);\n  const orderListItemsChannel = ref<RealtimeChannel | null>(null);\n  const stockLevelsChannel = ref<RealtimeChannel | null>(null);\n  const supplierOrdersChannel = ref<RealtimeChannel | null>(null);\n  const lastSyncAt = ref<Date | null>(null);\n\n  // Configuration for external functions\n  const currentPracticeId = ref<string | null>(null);\n  let refreshOrderLists: ((practiceId: string) => Promise<void>) | null = null;\n  let refreshReorderSuggestions:\n    | ((practiceId: string) => Promise<void>)\n    | null = null;\n\n  type RealtimeEventType = 'INSERT' | 'UPDATE' | 'DELETE';\n  type OrderListItemRecord = {\n    id: string;\n    minimum_stock: number | null;\n    maximum_stock: number | null;\n    current_stock: number | null;\n  };\n  type StockLevelRecord = {\n    product_id: string;\n    location_id: string;\n    current_quantity: number;\n    minimum_quantity: number | null;\n  };\n  type SupplierOrderRecord = {\n    id: string;\n    status: string;\n  };\n\n  type OrderListPayload = RealtimePostgresChangesPayload<Tables<'order_lists'>>;\n  type OrderListItemPayload = RealtimePostgresChangesPayload<\n    Tables<'order_list_items'>\n  >;\n  type StockLevelPayload = RealtimePostgresChangesPayload<\n    Tables<'stock_levels'>\n  >;\n  type SupplierOrderPayload = RealtimePostgresChangesPayload<\n    Tables<'supplier_orders'>\n  >;\n\n  // Real-time functions\n  const startRealtimeSubscriptions = (practiceId: string) => {\n    infoLog('Realtime: starting subscriptions', { practiceId });\n\n    try {\n      // Subscribe to order lists changes\n      orderListsChannel.value = realtimeService.subscribeToOrderLists(\n        practiceId,\n        handleOrderListChange\n      );\n\n      orderListItemsChannel.value = realtimeService.subscribeToOrderListItems(\n        handleOrderListItemChange\n      );\n\n      stockLevelsChannel.value = realtimeService.subscribeToStockLevels(\n        practiceId,\n        handleStockLevelChange\n      );\n\n      supplierOrdersChannel.value = realtimeService.subscribeToSupplierOrders(\n        handleSupplierOrderChange\n      );\n\n      realtimeConnected.value = true;\n      infoLog('Realtime: subscriptions started');\n    } catch (error) {\n      errorLog('❌ Failed to start real-time subscriptions', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      realtimeConnected.value = false;\n    }\n  };\n\n  const stopRealtimeSubscriptions = async () => {\n    infoLog('Realtime: stopping subscriptions');\n\n    try {\n      if (orderListsChannel.value) {\n        await realtimeService.unsubscribe(orderListsChannel.value as any);\n        orderListsChannel.value = null;\n      }\n\n      for (const channelRef of [\n        orderListItemsChannel,\n        stockLevelsChannel,\n        supplierOrdersChannel,\n      ]) {\n        if (channelRef.value) {\n          await realtimeService.unsubscribe(channelRef.value as any);\n          channelRef.value = null;\n        }\n      }\n\n      realtimeConnected.value = false;\n      infoLog('Realtime: subscriptions stopped');\n    } catch (error) {\n      errorLog('Error stopping real-time subscriptions', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  };\n\n  // Event handlers\n  const handleOrderListChange = async (payload: OrderListPayload) => {\n    const { eventType } = payload;\n    const newRow = payload.new as Tables<'order_lists'> | null;\n    const oldRow = payload.old as Tables<'order_lists'> | null;\n\n    infoLog('Realtime: order list update', {\n      eventType,\n      name: newRow?.name,\n    });\n\n    const practiceId = currentPracticeId.value;\n    if (!practiceId) return;\n\n    try {\n      switch (eventType) {\n        case 'INSERT':\n          if (newRow) {\n            infoLog('Realtime: order list created', {\n              name: newRow.name,\n            });\n            await eventEmitter.emit(StoreEvents.ORDER_CREATED, {\n              orderList: { id: newRow.id } as OrderListWithItems,\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n\n        case 'UPDATE':\n          if (newRow) {\n            infoLog('Realtime: order list updated', {\n              name: newRow.name,\n            });\n            await eventEmitter.emit(StoreEvents.ORDER_UPDATED, {\n              orderList: { id: newRow.id } as OrderListWithItems,\n              oldOrderList: oldRow\n                ? ({ id: oldRow.id } as OrderListWithItems)\n                : null,\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n\n        case 'DELETE':\n          if (oldRow) {\n            infoLog('Realtime: order list deleted', {\n              name: oldRow.name,\n            });\n            await eventEmitter.emit(StoreEvents.ORDER_DELETED, {\n              orderListId: oldRow.id,\n              timestamp: new Date().toISOString(),\n            });\n          }\n          break;\n      }\n\n      // Refresh order lists to get latest data\n      if (refreshOrderLists) {\n        await refreshOrderLists(practiceId);\n      }\n      await eventEmitter.emit(StoreEvents.DATA_REFRESH_COMPLETED, {\n        scope: 'order_lists',\n        practiceId,\n        timestamp: new Date().toISOString(),\n      });\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      errorLog('Error handling order list change', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  };\n\n  const handleOrderListItemChange = async (payload: OrderListItemPayload) => {\n    const { eventType } = payload;\n    const newRow = payload.new as Tables<'order_list_items'> | null;\n    const oldRow = payload.old as Tables<'order_list_items'> | null;\n\n    infoLog('Realtime: order list item update', {\n      eventType,\n    });\n\n    const practiceId = currentPracticeId.value;\n    if (!practiceId) return;\n\n    try {\n      // When order list items change, we need to:\n      // 1. Refresh the affected order list\n      // 2. Potentially update reorder suggestions\n\n      if (eventType === 'UPDATE' && newRow && oldRow) {\n        // Check if min/max values changed\n        const minMaxChanged =\n          newRow.minimum_stock !== oldRow.minimum_stock ||\n          newRow.maximum_stock !== oldRow.maximum_stock ||\n          newRow.current_stock !== oldRow.current_stock;\n\n        if (minMaxChanged) {\n          infoLog('Realtime: inventory thresholds updated', {\n            itemId: newRow.id,\n          });\n          if (refreshReorderSuggestions) {\n            await refreshReorderSuggestions(practiceId);\n          }\n\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\n            scope: 'reorder_suggestions',\n            practiceId,\n            itemId: newRow.id,\n            timestamp: new Date().toISOString(),\n          });\n        }\n      }\n\n      // Always refresh order lists for any item change\n      if (refreshOrderLists) {\n        await refreshOrderLists(practiceId);\n      }\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      errorLog('Error handling order list item change', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  };\n\n  const handleStockLevelChange = async (payload: StockLevelPayload) => {\n    const { eventType } = payload;\n    const newRow = payload.new as Tables<'stock_levels'> | null;\n    const oldRow = payload.old as Tables<'stock_levels'> | null;\n\n    infoLog('Realtime: stock level update', {\n      eventType,\n    });\n\n    const practiceId = currentPracticeId.value;\n    if (!practiceId) return;\n\n    try {\n      if (eventType === 'UPDATE' && newRow && oldRow) {\n        const quantityChanged =\n          newRow.current_quantity !== oldRow.current_quantity;\n\n        if (quantityChanged) {\n          infoLog('Realtime: stock quantity changed', {\n            productId: newRow.product_id,\n            locationId: newRow.location_id,\n          });\n\n          // Emit stock level updated event\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\n            scope: 'stock_levels',\n            productId: newRow.product_id,\n            locationId: newRow.location_id,\n            changeType: 'quantity_change',\n            timestamp: new Date().toISOString(),\n          });\n\n          // Check if this triggers low stock alert\n          const minQuantity = newRow.minimum_quantity ?? 0;\n          if (\n            (newRow.current_quantity ?? 0) <= minQuantity &&\n            (oldRow.current_quantity ?? 0) > minQuantity\n          ) {\n            await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\n              scope: 'low_stock_alert',\n              productId: newRow.product_id,\n              locationId: newRow.location_id,\n              currentQuantity: newRow.current_quantity ?? 0,\n              minimumQuantity: minQuantity,\n              timestamp: new Date().toISOString(),\n            });\n          }\n\n          // Refresh reorder suggestions\n          if (refreshReorderSuggestions) {\n            await refreshReorderSuggestions(practiceId);\n          }\n\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_COMPLETED, {\n            scope: 'order_suggestions',\n            practiceId,\n            itemId: newRow.product_id,\n            changeType: 'stock_updated',\n            timestamp: new Date().toISOString(),\n          });\n        }\n      }\n\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      errorLog('Error handling stock level change', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  };\n\n  const handleSupplierOrderChange = async (payload: SupplierOrderPayload) => {\n    const { eventType } = payload;\n    const newRow = payload.new as Tables<'supplier_orders'> | null;\n    const oldRow = payload.old as Tables<'supplier_orders'> | null;\n\n    infoLog('Realtime: supplier order update', {\n      eventType,\n    });\n\n    try {\n      if (eventType === 'UPDATE' && newRow && oldRow) {\n        const statusChanged = newRow.status !== oldRow.status;\n\n        if (statusChanged) {\n          infoLog('Realtime: supplier order status changed', {\n            orderId: newRow.id,\n            from: oldRow.status,\n            to: newRow.status,\n          });\n\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\n            scope: 'supplier_orders',\n            orderId: newRow.id,\n            oldStatus: oldRow.status,\n            newStatus: newRow.status,\n            timestamp: new Date().toISOString(),\n          });\n\n          if (newRow.status === 'delivered') {\n            infoLog('Realtime: supplier order delivered', {\n              orderId: newRow.id,\n            });\n\n            const practiceId = currentPracticeId.value;\n            if (practiceId) {\n              setTimeout(async () => {\n                try {\n                  if (refreshReorderSuggestions) {\n                    await refreshReorderSuggestions(practiceId);\n                  }\n                  if (refreshOrderLists) {\n                    await refreshOrderLists(practiceId);\n                  }\n                } catch (refreshError) {\n                  errorLog('Error during post-delivery refresh', {\n                    error:\n                      refreshError instanceof Error\n                        ? refreshError.message\n                        : String(refreshError),\n                  });\n                }\n              }, 1000);\n            }\n          }\n        }\n      }\n\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      errorLog('Error handling supplier order change', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  };\n\n  // Periodic sync function (backup for real-time)\n  const periodicSync = ref<ReturnType<typeof setInterval> | null>(null);\n\n  const startPeriodicSync = (practiceId: string, intervalMs = 60000) => {\n    stopPeriodicSync();\n\n    periodicSync.value = setInterval(async () => {\n      if (!realtimeConnected.value) {\n        infoLog('🔄 Periodic sync: real-time disconnected, syncing data');\n        try {\n          const promises = [];\n          if (refreshOrderLists) {\n            promises.push(refreshOrderLists(practiceId));\n          }\n          if (refreshReorderSuggestions) {\n            promises.push(refreshReorderSuggestions(practiceId));\n          }\n          await Promise.all(promises);\n          lastSyncAt.value = new Date();\n        } catch (error) {\n          errorLog('Periodic sync failed', {\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n      }\n    }, intervalMs);\n\n    infoLog(`⏰ Started periodic sync every ${intervalMs}ms`);\n  };\n\n  const stopPeriodicSync = () => {\n    if (periodicSync.value) {\n      clearInterval(periodicSync.value);\n      periodicSync.value = null;\n      infoLog('⏰ Stopped periodic sync');\n    }\n  };\n\n  // Connection health monitoring\n  const connectionHealth = ref<'healthy' | 'warning' | 'error'>('healthy');\n  const lastConnectionCheck = ref<Date | null>(null);\n\n  const checkConnectionHealth = () => {\n    const now = new Date();\n    lastConnectionCheck.value = now;\n\n    if (!realtimeConnected.value) {\n      connectionHealth.value = 'error';\n      return;\n    }\n\n    if (lastSyncAt.value) {\n      const timeSinceLastSync = now.getTime() - lastSyncAt.value.getTime();\n      const maxSyncAge = 5 * 60 * 1000; // 5 minutes\n\n      if (timeSinceLastSync > maxSyncAge) {\n        connectionHealth.value = 'warning';\n        infoLog(\n          '⚠️ Real-time connection health warning: no sync in 5+ minutes'\n        );\n      } else {\n        connectionHealth.value = 'healthy';\n      }\n    }\n  };\n\n  // Start health monitoring\n  const healthCheckInterval = setInterval(checkConnectionHealth, 30000); // Every 30 seconds\n\n  // Cleanup\n  onUnmounted(() => {\n    void stopRealtimeSubscriptions();\n    stopPeriodicSync();\n    clearInterval(healthCheckInterval);\n  });\n\n  // Setup and teardown functions for external configuration\n  const setupRealtime = (config: {\n    practiceId: string;\n    refreshOrderListsFn: (practiceId: string) => Promise<void>;\n    refreshReorderSuggestionsFn: (practiceId: string) => Promise<void>;\n    enablePeriodicSync?: boolean;\n    syncIntervalMs?: number;\n  }) => {\n    infoLog('🚀 Setting up real-time order lists system');\n\n    // Configure external functions\n    currentPracticeId.value = config.practiceId;\n    refreshOrderLists = config.refreshOrderListsFn;\n    refreshReorderSuggestions = config.refreshReorderSuggestionsFn;\n\n    // Start real-time subscriptions\n    startRealtimeSubscriptions(config.practiceId);\n\n    // Start periodic sync if enabled\n    if (config.enablePeriodicSync !== false) {\n      startPeriodicSync(config.practiceId, config.syncIntervalMs);\n    }\n\n    infoLog('✅ Real-time order lists system configured');\n  };\n\n  const teardownRealtime = () => {\n    infoLog('🛑 Tearing down real-time order lists system');\n\n    stopRealtimeSubscriptions();\n    stopPeriodicSync();\n\n    // Clear configuration\n    currentPracticeId.value = null;\n    refreshOrderLists = null;\n    refreshReorderSuggestions = null;\n\n    infoLog('✅ Real-time order lists system torn down');\n  };\n\n  return {\n    // State\n    realtimeConnected,\n    lastSyncAt,\n    connectionHealth,\n    lastConnectionCheck,\n\n    // Actions\n    startRealtimeSubscriptions,\n    stopRealtimeSubscriptions,\n    startPeriodicSync,\n    stopPeriodicSync,\n    checkConnectionHealth,\n    setupRealtime,\n    teardownRealtime,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-supplier-splitting.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { orderLogger, createLogger } from '@/utils/logger';\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\nimport type { ReorderSuggestion } from './orderLists-minmax';\nimport type { UrgencyLevel } from '@/types/inventory';\n\nconst normalizeUrgency = (value: string | null | undefined): UrgencyLevel => {\n  switch (value) {\n    case 'critical':\n    case 'high':\n    case 'medium':\n    case 'low':\n      return value;\n    default:\n      return 'low';\n  }\n};\n\nexport interface SupplierOrder {\n  practice_id: string;\n  location_id: string;\n  supplier_id: string;\n  supplier_name: string;\n  supplier_code: string;\n  items: OrderItemForSupplier[];\n  total_items: number;\n  total_cost: number;\n  estimated_delivery_date: string;\n  earliest_delivery_date: string;\n  latest_delivery_date: string;\n  order_method: 'email' | 'api' | 'pdf' | 'manual';\n  minimum_order_amount: number;\n  shipping_cost: number;\n  free_shipping_threshold: number;\n  payment_terms: number;\n  lead_time_days: number;\n}\n\nexport interface OrderItemForSupplier {\n  product_id: string;\n  product_name: string;\n  product_sku: string;\n  supplier_sku: string;\n  quantity: number;\n  unit_price: number;\n  total_price: number;\n  minimum_order_quantity: number | null;\n  order_multiple: number | null;\n  urgency_level: UrgencyLevel;\n  notes?: string | null;\n}\n\nexport interface SplitOrderResult {\n  supplier_orders: SupplierOrder[];\n  items_without_supplier: OrderItemForSupplier[];\n  total_suppliers: number;\n  total_estimated_cost: number;\n  earliest_delivery_date: string;\n  latest_delivery_date: string;\n  shipping_optimization_suggestions: string[];\n}\n\nexport interface OrderSendingResult {\n  supplier_id: string;\n  supplier_name: string;\n  status: 'success' | 'failed' | 'pending';\n  method_used: string;\n  order_reference?: string;\n  tracking_info?: Record<string, unknown>;\n  error_message?: string;\n  sent_at?: string;\n  delivery_expected?: string;\n}\n\nconst supplierLog = createLogger('SupplierSplit');\nconst infoLog = (message: string, data?: Record<string, unknown>): void =>\n  data ? supplierLog.structured(message, data) : supplierLog.info(message);\nconst warnLog = (message: string, data?: Record<string, unknown>): void =>\n  data ? supplierLog.structured(message, data) : supplierLog.warn(message);\nconst errorLog = (message: string, data?: Record<string, unknown>): void =>\n  data ? supplierLog.structured(message, data) : supplierLog.error(message);\n\nexport function useOrderListsSupplierSplitting() {\n  // Event emitter for store communication\n  const eventEmitter = createEventEmitter('order-lists-supplier-splitting');\n\n  // State\n  const splittingProgress = ref<{\n    current: number;\n    total: number;\n    status: string;\n  } | null>(null);\n  const sendingProgress = ref<{\n    current: number;\n    total: number;\n    status: string;\n  } | null>(null);\n\n  // Actions\n  const splitOrderBySuppliers = async (\n    items: ReorderSuggestion[]\n  ): Promise<SplitOrderResult> => {\n    splittingProgress.value = {\n      current: 0,\n      total: items.length,\n      status: 'Analyzing items...',\n    };\n\n    try {\n      infoLog('Starting supplier splitting', {\n        itemCount: items.length,\n      });\n\n      // Get all suppliers involved\n      const supplierIds = [\n        ...new Set(\n          items.map(item => item.preferred_supplier_name).filter(Boolean)\n        ),\n      ];\n\n      splittingProgress.value = {\n        current: 10,\n        total: 100,\n        status: 'Fetching supplier details...',\n      };\n\n      // Fetch full supplier details\n      const { error: suppliersError } = await supabase\n        .from('suppliers')\n        .select('id')\n        .in('name', supplierIds);\n\n      if (suppliersError) throw suppliersError;\n\n      splittingProgress.value = {\n        current: 30,\n        total: 100,\n        status: 'Fetching supplier products...',\n      };\n\n      // Fetch supplier-specific product details\n      const productIds = items.map(item => item.product_id);\n      const { data: supplierProducts, error: supplierProductsError } =\n        await supabase\n          .from('supplier_products')\n          .select(\n            `\n          *,\n          supplier:suppliers(id, name, code, order_method, minimum_order_amount, shipping_cost, free_shipping_threshold, payment_terms),\n          product:products(id, name, sku)\n        `\n          )\n          .in('product_id', productIds);\n\n      if (supplierProductsError) throw supplierProductsError;\n\n      splittingProgress.value = {\n        current: 50,\n        total: 100,\n        status: 'Creating supplier orders...',\n      };\n\n      const supplierOrdersMap = new Map<string, SupplierOrder>();\n      const itemsWithoutSupplier: OrderItemForSupplier[] = [];\n\n      // Process each item\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (!item) {\n          continue;\n        }\n        splittingProgress.value = {\n          current: 50 + (i / items.length) * 40,\n          total: 100,\n          status: `Processing ${item.product_name}...`,\n        };\n\n        // Find supplier product details\n        const supplierProduct = (supplierProducts ?? []).find(\n          sp =>\n            sp.product_id === item.product_id &&\n            sp.supplier?.name === item.preferred_supplier_name\n        );\n\n        if (!supplierProduct || !supplierProduct.supplier) {\n          // Item has no supplier assignment\n          itemsWithoutSupplier.push({\n            product_id: item.product_id,\n            product_name: item.product_name,\n            product_sku: item.product_sku,\n            supplier_sku: '',\n            quantity: item.calculated_order_quantity,\n            unit_price: item.preferred_unit_price ?? 0,\n            total_price:\n              item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\n            minimum_order_quantity: 1,\n            order_multiple: 1,\n            urgency_level: normalizeUrgency(item.urgency_level),\n            notes: 'No supplier assigned',\n          });\n          continue;\n        }\n\n        const supplier = supplierProduct.supplier;\n        const supplierId = supplier.id;\n\n        // Initialize supplier order if not exists\n        if (!supplierOrdersMap.has(supplierId)) {\n          const estimatedDeliveryDate = new Date();\n          estimatedDeliveryDate.setDate(\n            estimatedDeliveryDate.getDate() +\n              (supplierProduct.lead_time_days ?? 7)\n          );\n\n          supplierOrdersMap.set(supplierId, {\n            practice_id: item.practice_id,\n            location_id: item.location_id ?? '',\n            supplier_id: supplierId,\n            supplier_name: supplier.name,\n            supplier_code: supplier.code ?? supplierId,\n            items: [],\n            total_items: 0,\n            total_cost: 0,\n            estimated_delivery_date:\n              estimatedDeliveryDate.toISOString().split('T')[0] ?? '',\n            earliest_delivery_date:\n              estimatedDeliveryDate.toISOString().split('T')[0] ?? '',\n            latest_delivery_date:\n              estimatedDeliveryDate.toISOString().split('T')[0] ?? '',\n            order_method:\n              (supplier.order_method as SupplierOrder['order_method']) ??\n              'manual',\n            minimum_order_amount: supplier.minimum_order_amount ?? 0,\n            shipping_cost: supplier.shipping_cost ?? 0,\n            free_shipping_threshold: supplier.free_shipping_threshold ?? 0,\n            payment_terms: supplier.payment_terms ?? 30,\n            lead_time_days: supplierProduct.lead_time_days ?? 7,\n          });\n        }\n\n        const supplierOrder = supplierOrdersMap.get(supplierId);\n        if (!supplierOrder) {\n          warnLog('Supplier order missing after initialization', {\n            supplierId,\n          });\n          continue;\n        }\n\n        const earliestDate = new Date();\n        earliestDate.setDate(\n          earliestDate.getDate() + (supplierProduct.lead_time_days ?? 7)\n        );\n\n        const latestDate = new Date(earliestDate);\n        latestDate.setDate(latestDate.getDate() + 3);\n\n        supplierOrder.earliest_delivery_date = (earliestDate\n          .toISOString()\n          .split('T')[0] ?? '')  as string;\n\n        supplierOrder.latest_delivery_date = (latestDate\n          .toISOString()\n          .split('T')[0] ?? '') as string;\n\n        // Adjust quantity based on supplier constraints\n        let adjustedQuantity = item.calculated_order_quantity;\n\n        // Apply minimum order quantity\n        if (\n          supplierProduct.minimum_order_quantity !== null &&\n          supplierProduct.minimum_order_quantity !== undefined &&\n          adjustedQuantity < supplierProduct.minimum_order_quantity\n        ) {\n          adjustedQuantity = supplierProduct.minimum_order_quantity;\n        }\n\n        // Apply order multiple\n        if (\n          supplierProduct.order_multiple !== null &&\n          supplierProduct.order_multiple !== undefined &&\n          supplierProduct.order_multiple > 1\n        ) {\n          adjustedQuantity =\n            Math.ceil(adjustedQuantity / supplierProduct.order_multiple) *\n            supplierProduct.order_multiple;\n        }\n\n        const orderItem: OrderItemForSupplier = {\n          product_id: item.product_id,\n          product_name: item.product_name,\n          product_sku: item.product_sku,\n          supplier_sku: supplierProduct.supplier_sku || '',\n          quantity: adjustedQuantity,\n          unit_price:\n            supplierProduct.cost_price ?? item.preferred_unit_price ?? 0,\n          total_price:\n            adjustedQuantity *\n            (supplierProduct.cost_price ?? item.preferred_unit_price ?? 0),\n          minimum_order_quantity: supplierProduct.minimum_order_quantity ?? 1,\n          order_multiple: supplierProduct.order_multiple ?? 1,\n          urgency_level: normalizeUrgency(item.urgency_level),\n          notes:\n            adjustedQuantity !== item.calculated_order_quantity\n              ? `Adjusted from ${item.calculated_order_quantity} due to supplier constraints`\n              : null,\n        } satisfies OrderItemForSupplier;\n\n        supplierOrder.items.push(orderItem);\n        supplierOrder.total_items += 1;\n        supplierOrder.total_cost += orderItem.total_price;\n      }\n\n      splittingProgress.value = {\n        current: 90,\n        total: 100,\n        status: 'Optimizing orders...',\n      };\n\n      // Convert map to array and optimize\n      const supplierOrders = Array.from(supplierOrdersMap.values());\n      const totalCost = supplierOrders.reduce(\n        (sum, order) => sum + order.total_cost,\n        0\n      );\n\n      const deliveryTimes = supplierOrders\n        .map(order => Date.parse(order.estimated_delivery_date))\n        .filter(time => Number.isFinite(time));\n\n      const fallbackDate = (new Date().toISOString().split('T')[0] ?? '') as string;\n      const earliestDelivery = deliveryTimes.length\n        ? (new Date(Math.min(...deliveryTimes)).toISOString().split('T')[0] ?? '') as string\n        : fallbackDate;\n\n      const latestDelivery = deliveryTimes.length\n        ? (new Date(Math.max(...deliveryTimes)).toISOString().split('T')[0] ?? '') as string\n        : fallbackDate;\n\n      infoLog('Supplier splitting completed', {\n        supplierCount: supplierOrders.length,\n        withoutSupplier: itemsWithoutSupplier.length,\n        totalCost,\n        earliestDelivery,\n        latestDelivery,\n      });\n\n      return {\n        supplier_orders: supplierOrders,\n        items_without_supplier: itemsWithoutSupplier,\n        total_suppliers: supplierOrders.length,\n        total_estimated_cost: totalCost,\n        earliest_delivery_date: earliestDelivery,\n        latest_delivery_date: latestDelivery,\n        shipping_optimization_suggestions: [],\n      };\n    } catch (error) {\n      splittingProgress.value = null;\n      errorLog('Error splitting order by suppliers', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const sendOrdersToSuppliers = async (\n    supplierOrders: SupplierOrder[]\n  ): Promise<OrderSendingResult[]> => {\n    sendingProgress.value = {\n      current: 0,\n      total: supplierOrders.length,\n      status: 'Preparing to send orders...',\n    };\n\n    const results: OrderSendingResult[] = [];\n\n    try {\n      for (let i = 0; i < supplierOrders.length; i++) {\n        const order = supplierOrders[i];\n        if (!order) {\n          continue;\n        }\n        sendingProgress.value = {\n          current: i,\n          total: supplierOrders.length,\n          status: `Sending order to ${order.supplier_name}...`,\n        };\n\n        try {\n          const result = await sendOrderToSupplier(order);\n          results.push(result);\n\n          infoLog('Order sent to supplier', {\n            supplier: order.supplier_name,\n            method: result.method_used,\n          });\n        } catch (error) {\n          const failedResult: OrderSendingResult = {\n            supplier_id: order.supplier_id,\n            supplier_name: order.supplier_name,\n            status: 'failed',\n            method_used: order.order_method,\n            error_message:\n              error instanceof Error ? error.message : 'Unknown error',\n            sent_at: new Date().toISOString(),\n            delivery_expected: order.estimated_delivery_date,\n          };\n          results.push(failedResult);\n\n          errorLog('Failed to send order to supplier', {\n            supplier: order.supplier_name,\n            error: error instanceof Error ? error.message : String(error),\n          });\n        }\n\n        if (i < supplierOrders.length - 1) {\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      }\n\n      sendingProgress.value = {\n        current: supplierOrders.length,\n        total: supplierOrders.length,\n        status: 'All orders processed!',\n      };\n\n      const successCount = results.filter(r => r.status === 'success').length;\n      const failedCount = results.filter(r => r.status === 'failed').length;\n\n      await eventEmitter.emit(StoreEvents.ORDERS_SENT_TO_SUPPLIERS, {\n        totalOrders: supplierOrders.length,\n        successCount,\n        failedCount,\n        timestamp: new Date().toISOString(),\n      });\n\n      setTimeout(() => {\n        sendingProgress.value = null;\n      }, 3000);\n\n      return results;\n    } catch (error) {\n      sendingProgress.value = null;\n      errorLog('Error sending orders to suppliers', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const sendOrderToSupplier = async (\n    order: SupplierOrder\n  ): Promise<OrderSendingResult> => {\n    const orderReference = `ORD-${Date.now()}-${order.supplier_code}`;\n\n    switch (order.order_method) {\n      case 'api':\n        return sendOrderViaAPI(order, orderReference);\n      case 'email':\n        return sendOrderViaEmail(order, orderReference);\n      case 'pdf':\n        return sendOrderViaPDF(order, orderReference);\n      default:\n        return {\n          supplier_id: order.supplier_id,\n          supplier_name: order.supplier_name,\n          status: 'pending',\n          method_used: 'manual',\n          order_reference: orderReference,\n          sent_at: new Date().toISOString(),\n        };\n    }\n  };\n\n  const sendOrderViaAPI = async (\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> => {\n    const { apiService } = await import(\n      '@/services/supplierIntegration/apiService'\n    );\n    return apiService.sendOrderViaAPI(order, orderReference);\n  };\n\n  const sendOrderViaEmail = async (\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> => {\n    // For email orders, we use the PDF service which sends via email\n    const { pdfService } = await import(\n      '@/services/supplierIntegration/pdfService'\n    );\n    return pdfService.sendOrderViaPDF(order, orderReference);\n  };\n\n  const sendOrderViaPDF = async (\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> => {\n    const { pdfService } = await import(\n      '@/services/supplierIntegration/pdfService'\n    );\n    return pdfService.sendOrderViaPDF(order, orderReference);\n  };\n\n  // Helper functions - removed as they are now handled by dedicated services\n\n  return {\n    // State\n    splittingProgress,\n    sendingProgress,\n\n    // Actions\n    splitOrderBySuppliers,\n    sendOrdersToSuppliers,\n    sendOrderToSupplier,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-cart.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-core.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'productLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Database' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AnalyticsSummary' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierProduct' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'warnLog' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6582, 6585], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6582, 6585], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'determineStockStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 226,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 226,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 354,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 354,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10484, 10487], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10484, 10487], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed, onUnmounted } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { productLogger, createLogger } from '@/utils/logger';\r\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\r\nimport type { UserLoggedInPayload } from '@/types/events';\r\nimport { useApiCache } from '@/composables/useCache';\r\nimport type {\r\n  ProductRow,\r\n  ProductWithStock,\r\n  ProductCategory,\r\n  ProductFilter,\r\n  StockLevelRow,\r\n} from '@/types/inventory';\r\nimport type { Database } from '@/types';\r\nimport type { AnalyticsSummary } from '@/types/analytics';\r\nimport type { SupplierProduct } from '@/types/supplier';\r\n\r\n// RPC response interface for get_products_with_stock_levels\r\n\r\nexport function useProductsCore() {\r\n  // Event emitter for store communication\r\n  const eventEmitter = createEventEmitter('products-core');\r\n\r\n  // ✅ PERFORMANCE OPTIMIZATION: API Cache for faster data loading\r\n  const cache = useApiCache();\r\n\r\n  // Current practice ID (from auth events)\r\n  const currentPracticeId = ref<string | null>(null);\r\n\r\n  // State\r\n  const products = ref<ProductWithStock[]>([]);\r\n  const categories = ref<ProductCategory[]>([]);\r\n  const loading = ref(false);\r\n  const lastSyncAt = ref<Date | null>(null);\r\n  const filters = ref<ProductFilter>({\r\n    search: '',\r\n    category: '',\r\n    supplier: '',\r\n    stock_status: 'all',\r\n    sort_by: 'name',\r\n    sort_order: 'asc',\r\n  });\r\n\r\n  const productLog = createLogger('Products');\r\n  const infoLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.info(message);\r\n  const warnLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.warn(message);\r\n  const errorLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.error(message);\r\n\r\n  // Set up event listeners for auth changes\r\n  const unsubscribeAuth = eventEmitter.on<UserLoggedInPayload>(\r\n    StoreEvents.USER_LOGGED_IN,\r\n    async data => {\r\n      currentPracticeId.value = data.clinicId ?? null;\r\n      infoLog('Auth changed, auto-loading products', {\r\n        clinicId: data.clinicId,\r\n      });\r\n\r\n      if (data.clinicId) {\r\n        await fetchProducts(data.clinicId);\r\n      }\r\n    }\r\n  );\r\n\r\n  const unsubscribeLogout = eventEmitter.on(StoreEvents.USER_LOGGED_OUT, () => {\r\n    currentPracticeId.value = null;\r\n    products.value = [];\r\n    categories.value = [];\r\n    errorLog('User logged out, product data cleared');\r\n  });\r\n\r\n  // Clean up listeners\r\n  onUnmounted(() => {\r\n    unsubscribeAuth();\r\n    unsubscribeLogout();\r\n  });\r\n\r\n  // Core getters\r\n  const productStats = computed(() => {\r\n    const stats = {\r\n      total: products.value.length,\r\n      inStock: 0,\r\n      lowStock: 0,\r\n      outOfStock: 0,\r\n    };\r\n\r\n    products.value.forEach(product => {\r\n      const totalStock =\r\n        product.stockLevels?.reduce(\r\n          (sum, level) => sum + level.currentQuantity,\r\n          0\r\n        ) ?? 0;\r\n      const minimumStock = 0;\r\n\r\n      if (totalStock > minimumStock) {\r\n        stats.inStock += 1;\r\n      } else if (totalStock > 0) {\r\n        stats.lowStock += 1;\r\n      } else {\r\n        stats.outOfStock += 1;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  });\r\n\r\n  const availableCategories = computed(() => {\r\n    const categorySet = new Set(\r\n      products.value.map(p => p.category).filter(Boolean)\r\n    );\r\n    return Array.from(categorySet).sort();\r\n  });\r\n\r\n  const availableCountries = computed(() => {\r\n    const countrySet = new Set(\r\n      products.value.map(p => p.countryOfOrigin).filter(Boolean)\r\n    );\r\n    return Array.from(countrySet).sort();\r\n  });\r\n\r\n  const availableGpcCodes = computed(() => {\r\n    const gpcSet = new Set(\r\n      products.value\r\n        .map(p => p.gpcBrickCode)\r\n        .filter((code): code is string => Boolean(code))\r\n    );\r\n    return Array.from(gpcSet).sort();\r\n  });\r\n\r\n  const availableLifecycleStatuses = computed(() => {\r\n    const statusSet = new Set(\r\n      products.value\r\n        .map(p => p.lifecycleStatus)\r\n        .filter((status): status is string => Boolean(status))\r\n    );\r\n    return Array.from(statusSet).sort();\r\n  });\r\n\r\n  // Core actions\r\n  const fetchProducts = async (practiceId: string, forceRefresh = false) => {\r\n    if (loading.value) {\r\n      return;\r\n    }\r\n\r\n    const cacheKey = `products:${practiceId}`;\r\n    if (!forceRefresh) {\r\n      const cachedProducts = cache.get(cacheKey) as ProductWithStock[] | null;\r\n      if (cachedProducts && cachedProducts.length > 0) {\r\n        products.value = cachedProducts;\r\n        infoLog('Using cached products', {\r\n          practiceId,\r\n          count: cachedProducts.length,\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    loading.value = true;\r\n\r\n    try {\r\n      infoLog('Fetching products from Supabase');\r\n\r\n      const supabaseProducts = await fetchProductsFromSupabase(practiceId);\r\n      products.value = supabaseProducts as unknown as ProductWithStock[];\r\n      lastSyncAt.value = new Date();\r\n\r\n      cache.set(cacheKey, supabaseProducts, 5 * 60 * 1000);\r\n      infoLog('Products loaded successfully', {\r\n        total: supabaseProducts.length,\r\n        practiceId,\r\n      });\r\n    } catch (error) {\r\n      errorLog('Failed to fetch products', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchProductsFromSupabase = async (\r\n    practiceId: string\r\n  ): Promise<(ProductRow & { stock_levels: StockLevelRow[] | null })[]> => {\r\n    try {\r\n      const { data: productRows, error: productsError } = await supabase\r\n        .from('products')\r\n        .select(\r\n          `\r\n          *,\r\n          stock_levels(id, practice_id, product_id, location_id, current_quantity, reserved_quantity, minimum_quantity, maximum_quantity, reorder_point, preferred_supplier_id, last_counted_at, last_movement_at, last_ordered_at),\r\n          supplier_products(id, supplier_id, supplier_name, supplier_sku, cost_price, currency, lead_time_days, is_preferred)\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId);\r\n\r\n      if (productsError) {\r\n        errorLog('Fallback product query failed', {\r\n          error: productsError.message,\r\n        });\r\n        throw productsError;\r\n      }\r\n\r\n      const rows = (productRows ?? []) as Array<\r\n        ProductRow & {\r\n          stock_levels: StockLevelRow[] | null;\r\n          supplier_products: any[] | null;\r\n        }\r\n      >;\r\n\r\n      infoLog('Fallback product query succeeded', {\r\n        count: rows.length,\r\n      });\r\n\r\n      return rows;\r\n    } catch (error) {\r\n      errorLog('Error fetching products from Supabase', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const determineStockStatus = (\r\n    current: number,\r\n    minimum: number\r\n  ): 'in_stock' | 'low_stock' | 'out_of_stock' => {\r\n    if (current <= 0) return 'out_of_stock';\r\n    if (current < minimum) return 'low_stock';\r\n    return 'in_stock';\r\n  };\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .select('category')\r\n        .not('category', 'is', null);\r\n\r\n      if (error) throw error;\r\n\r\n      const uniqueCategories = Array.from(\r\n        new Set(\r\n          (data ?? [])\r\n            .map(item => item.category)\r\n            .filter((cat): cat is string => Boolean(cat))\r\n        )\r\n      );\r\n\r\n      categories.value = uniqueCategories.map(\r\n        cat =>\r\n          ({\r\n            id: cat,\r\n            name: cat,\r\n            description: '',\r\n            parent_id: undefined,\r\n            sort_order: 0,\r\n            is_active: true,\r\n          }) satisfies ProductCategory\r\n      );\r\n    } catch (error) {\r\n      errorLog('Error fetching categories', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const refreshData = async (practiceId: string) => {\r\n    try {\r\n      await Promise.all([fetchProducts(practiceId), fetchCategories()]);\r\n    } catch (error) {\r\n      errorLog('Error refreshing product data', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // CRUD operations\r\n  const createProduct = async (productData: ProductRow) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .insert(productData)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      errorLog('Error creating product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateProduct = async (productId: string, updates: ProductRow) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .update(updates)\r\n        .eq('id', productId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      errorLog('Error updating product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteProduct = async (productId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('products')\r\n        .delete()\r\n        .eq('id', productId);\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      errorLog('Error deleting product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Utility functions\r\n  const getProductById = (id: string): ProductWithStock | undefined => {\r\n    return products.value.find(p => p.id === id);\r\n  };\r\n\r\n  const getProductBySku = (sku: string): ProductWithStock | undefined => {\r\n    return products.value.find(p => p.sku === sku);\r\n  };\r\n\r\n  const requiresBatchTracking = (productId: string): boolean => {\r\n    const product = getProductById(productId);\r\n    return product?.requiresBatchTracking || false;\r\n  };\r\n\r\n  const batchTrackedProducts = computed(() => {\r\n    return products.value.filter(p => p.requiresBatchTracking);\r\n  });\r\n\r\n  const manualStockProducts = computed(() =>\r\n    products.value.filter(product => (product as any).batchStatus === 'manual_stock')\r\n  );\r\n\r\n  return {\r\n    // State\r\n    products,\r\n    categories,\r\n    loading,\r\n    lastSyncAt,\r\n    filters,\r\n\r\n    // Getters\r\n    productStats,\r\n    availableCategories,\r\n    availableCountries,\r\n    availableGpcCodes,\r\n    availableLifecycleStatuses,\r\n    batchTrackedProducts,\r\n    manualStockProducts,\r\n\r\n    // Actions\r\n    fetchProducts,\r\n    fetchCategories,\r\n    refreshData,\r\n    createProduct,\r\n    updateProduct,\r\n    deleteProduct,\r\n    getProductById,\r\n    getProductBySku,\r\n    requiresBatchTracking,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-inventory.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 231,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 231,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7341, 7344], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7341, 7344], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { computed, type Ref } from 'vue';\r\nimport type { ProductWithStock, StockAlert } from '@/types/inventory';\r\n\r\nconst calculateTotalStock = (product: ProductWithStock): number =>\r\n  product.stockLevels?.reduce((sum, level) => sum + level.currentQuantity, 0) ??\r\n  0;\r\n\r\nconst resolveMinimumStock = (product: ProductWithStock): number =>\r\n  product.minimumStock ?? 0;\r\n\r\nexport function useProductsInventory(products: Ref<ProductWithStock[]>) {\r\n  const totalStockValue = computed(() =>\r\n    products.value.reduce((total, product) => {\r\n      const productValue =\r\n        product.stockLevels?.reduce((sum, level) => {\r\n          return sum + level.currentQuantity * (product.unitPrice ?? 0);\r\n        }, 0) ?? 0;\r\n      return total + productValue;\r\n    }, 0)\r\n  );\r\n\r\n  const lowStockProducts = computed(() =>\r\n    products.value.filter(product => {\r\n      const totalStock = calculateTotalStock(product);\r\n      const minStock = resolveMinimumStock(product);\r\n      return totalStock > 0 && totalStock <= minStock;\r\n    })\r\n  );\r\n\r\n  const outOfStockProducts = computed(() =>\r\n    products.value.filter(product => calculateTotalStock(product) <= 0)\r\n  );\r\n\r\n  const stockStatusSummary = computed(() => {\r\n    const summary = {\r\n      in_stock: 0,\r\n      low_stock: 0,\r\n      out_of_stock: 0,\r\n      total_products: products.value.length,\r\n      total_value: totalStockValue.value,\r\n    };\r\n\r\n    products.value.forEach(product => {\r\n      const totalStock = calculateTotalStock(product);\r\n      const minStock = resolveMinimumStock(product);\r\n\r\n      if (totalStock <= 0) {\r\n        summary.out_of_stock += 1;\r\n      } else if (totalStock <= minStock) {\r\n        summary.low_stock += 1;\r\n      } else {\r\n        summary.in_stock += 1;\r\n      }\r\n    });\r\n\r\n    return summary;\r\n  });\r\n\r\n  const criticalStockAlerts = computed((): StockAlert[] => {\r\n    const alerts: StockAlert[] = [];\r\n\r\n    products.value.forEach(product => {\r\n      product.stockLevels?.forEach(stockLevel => {\r\n        const currentStock = stockLevel.currentQuantity ?? 0;\r\n        const minimumStock =\r\n          stockLevel.minimumQuantity ?? product.minimumStock ?? 0;\r\n\r\n        if (currentStock <= 0) {\r\n          alerts.push({\r\n            id: `${product.id}-${stockLevel.locationId}`,\r\n            type: 'out_of_stock',\r\n            severity: 'critical',\r\n            product_id: product.id,\r\n            product_name: product.name,\r\n            product_sku: product.sku,\r\n            location_id: stockLevel.locationId,\r\n            location_name: stockLevel.locationName ?? 'Unknown Location',\r\n            current_stock: currentStock,\r\n            minimum_stock: minimumStock,\r\n            message: `${product.name} is out of stock`,\r\n            created_at: new Date().toISOString(),\r\n          });\r\n        } else if (currentStock <= minimumStock) {\r\n          alerts.push({\r\n            id: `${product.id}-${stockLevel.locationId}`,\r\n            type: 'low_stock',\r\n            severity: 'warning',\r\n            product_id: product.id,\r\n            product_name: product.name,\r\n            product_sku: product.sku,\r\n            location_id: stockLevel.locationId,\r\n            location_name: stockLevel.locationName ?? 'Unknown Location',\r\n            current_stock: currentStock,\r\n            minimum_stock: minimumStock,\r\n            message: `${product.name} is running low (${currentStock} remaining)`,\r\n            created_at: new Date().toISOString(),\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return alerts.sort((a, b) => {\r\n      if (a.severity !== b.severity) {\r\n        return a.severity === 'critical' ? -1 : 1;\r\n      }\r\n      return a.current_stock - b.current_stock;\r\n    });\r\n  });\r\n\r\n  const productsNeedingReorder = computed(() =>\r\n    products.value.filter(product => {\r\n      const totalStock = calculateTotalStock(product);\r\n      const reorderLevel = product.reorderLevel ?? product.minimumStock ?? 0;\r\n      return totalStock <= reorderLevel;\r\n    })\r\n  );\r\n\r\n  const inventoryMetrics = computed(() => {\r\n    const metrics = {\r\n      totalProducts: products.value.length,\r\n      totalStockValue: totalStockValue.value,\r\n      averageStockValue: 0,\r\n      stockDistribution: {\r\n        in_stock: 0,\r\n        low_stock: 0,\r\n        out_of_stock: 0,\r\n      },\r\n      categoryBreakdown: new Map<string, number>(),\r\n      supplierBreakdown: new Map<string, number>(),\r\n    };\r\n\r\n    metrics.averageStockValue =\r\n      metrics.totalProducts > 0\r\n        ? metrics.totalStockValue / metrics.totalProducts\r\n        : 0;\r\n\r\n    products.value.forEach(product => {\r\n      const totalStock = calculateTotalStock(product);\r\n      const productValue = totalStock * (product.unitPrice ?? 0);\r\n      const minStock = resolveMinimumStock(product);\r\n\r\n      if (totalStock <= 0) {\r\n        metrics.stockDistribution.out_of_stock += 1;\r\n      } else if (totalStock <= minStock) {\r\n        metrics.stockDistribution.low_stock += 1;\r\n      } else {\r\n        metrics.stockDistribution.in_stock += 1;\r\n      }\r\n\r\n      if (product.category) {\r\n        const currentCategoryValue =\r\n          metrics.categoryBreakdown.get(product.category) ?? 0;\r\n        metrics.categoryBreakdown.set(\r\n          product.category,\r\n          currentCategoryValue + productValue\r\n        );\r\n      }\r\n\r\n      if (product.supplier?.name) {\r\n        const currentSupplierValue =\r\n          metrics.supplierBreakdown.get(product.supplier.name) ?? 0;\r\n        metrics.supplierBreakdown.set(\r\n          product.supplier.name,\r\n          currentSupplierValue + productValue\r\n        );\r\n      }\r\n    });\r\n\r\n    return metrics;\r\n  });\r\n\r\n  const topCategoriesByValue = computed(() => {\r\n    const categoryMap = new Map<\r\n      string,\r\n      { name: string; value: number; count: number }\r\n    >();\r\n\r\n    products.value.forEach(product => {\r\n      if (product.category) {\r\n        const totalStock = calculateTotalStock(product);\r\n        const productValue = totalStock * (product.unitPrice ?? 0);\r\n\r\n        const existing = categoryMap.get(product.category) ?? {\r\n          name: product.category,\r\n          value: 0,\r\n          count: 0,\r\n        };\r\n        existing.value += productValue;\r\n        existing.count += 1;\r\n        categoryMap.set(product.category, existing);\r\n      }\r\n    });\r\n\r\n    return Array.from(categoryMap.values())\r\n      .sort((a, b) => b.value - a.value)\r\n      .slice(0, 10);\r\n  });\r\n\r\n  const topProductsByValue = computed(() =>\r\n    products.value\r\n      .map(product => {\r\n        const totalStock = calculateTotalStock(product);\r\n        const productValue = totalStock * (product.unitPrice ?? 0);\r\n\r\n        return {\r\n          id: product.id,\r\n          name: product.name,\r\n          value: productValue,\r\n          sku: product.sku,\r\n          category: product.category,\r\n        };\r\n      })\r\n      .sort((a, b) => (b.value ?? 0) - (a.value ?? 0))\r\n      .slice(0, 20)\r\n  );\r\n\r\n  const productsApproachingExpiry = computed(() => {\r\n    const expiringProducts: Array<{\r\n      product: ProductWithStock;\r\n      batch_number?: string;\r\n      expiry_date: string;\r\n      days_until_expiry: number;\r\n    }> = [];\r\n\r\n    const today = new Date();\r\n    const thirtyDaysFromNow = new Date(\r\n      today.getTime() + 30 * 24 * 60 * 60 * 1000\r\n    );\r\n\r\n    products.value.forEach(product => {\r\n      const productAny = product as any;\r\n      if (!product.batches?.length && !productAny.expiry_date) {\r\n        return;\r\n      }\r\n\r\n      product.batches?.forEach(batch => {\r\n        const expiryDate = new Date(batch.expiry_date);\r\n        if (expiryDate <= thirtyDaysFromNow && expiryDate >= today) {\r\n          const daysUntilExpiry = Math.ceil(\r\n            (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\r\n          );\r\n          expiringProducts.push({\r\n            product,\r\n            batch_number: batch.batch_number,\r\n            expiry_date: batch.expiry_date,\r\n            days_until_expiry: daysUntilExpiry,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (productAny.expiry_date) {\r\n        const directExpiry = new Date(productAny.expiry_date);\r\n        if (directExpiry <= thirtyDaysFromNow && directExpiry >= today) {\r\n          const daysUntilExpiry = Math.ceil(\r\n            (directExpiry.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\r\n          );\r\n          expiringProducts.push({\r\n            product,\r\n            expiry_date: productAny.expiry_date,\r\n            days_until_expiry: daysUntilExpiry,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return expiringProducts.sort(\r\n      (a, b) => a.days_until_expiry - b.days_until_expiry\r\n    );\r\n  });\r\n\r\n  return {\r\n    totalStockValue,\r\n    lowStockProducts,\r\n    outOfStockProducts,\r\n    stockStatusSummary,\r\n    criticalStockAlerts,\r\n    productsNeedingReorder,\r\n    inventoryMetrics,\r\n    topCategoriesByValue,\r\n    topProductsByValue,\r\n    productsApproachingExpiry,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\suppliers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1965, 1968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1965, 1968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 59,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 59,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2087, 2090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2087, 2090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2218, 2221], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2218, 2221], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3079, 3082], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3079, 3082], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 95,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 95,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3101, 3104], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3101, 3104], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 134,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 134,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4285, 4288], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4285, 4288], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4333, 4336], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4333, 4336], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5143, 5146], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5143, 5146], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5217, 5220], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5217, 5220], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 187,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 187,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5804, 5807], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5804, 5807], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 187,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 187,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5820, 5823], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5820, 5823], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 271,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 271,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8795, 8798], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8795, 8798], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { createLogger } from '@/utils/logger';\nimport type {\n  SupplierView,\n  SupplierProduct,\n  SupplierRow,\n  SupplierProductRow,\n  SupplierProductInsert,\n  SupplierProductUpdate,\n  CreateSupplierRequest,\n} from '@/types/inventory';\nimport { useAuthStore } from '@/stores/auth';\n\nconst mapSupplierRowToView = (row: SupplierRow): SupplierView => ({\n  id: row.id,\n  name: row.name,\n  code: row.code,\n  contact_email: row.contact_email ?? null,\n  contact_phone: row.contact_phone ?? null,\n  contact_person: row.contact_person ?? null,\n  address: row.address ?? null,\n  city: row.city ?? null,\n  postal_code: row.postal_code ?? null,\n  country: row.country ?? null,\n  website: row.website ?? null,\n  vat_number: row.vat_number ?? null,\n  business_registration: row.business_registration ?? null,\n  payment_terms: row.payment_terms ?? null,\n  minimum_order_amount: row.minimum_order_amount ?? null,\n  shipping_cost: row.shipping_cost ?? null,\n  free_shipping_threshold: row.free_shipping_threshold ?? null,\n  api_endpoint: row.api_endpoint ?? null,\n  api_type: row.api_type ?? null,\n  sync_enabled: row.sync_enabled ?? null,\n  is_active: row.is_active ?? null,\n  preferred_order_day: row.preferred_order_day ?? null,\n  order_cutoff_time: row.order_cutoff_time ?? null,\n  created_at: row.created_at ?? null,\n  updated_at: row.updated_at ?? null,\n}) as SupplierView;\n\nexport const useSuppliersStore = defineStore('suppliers', () => {\n  const log = createLogger('SuppliersStore');\n  const authStore = useAuthStore();\n  const practiceId = computed(() => authStore.userProfile?.clinic_id ?? null);\n\n  const suppliers = ref<SupplierView[]>([]);\n  const supplierProducts = ref<SupplierProduct[]>([]);\n  const loading = ref(false);\n  const lastSyncAt = ref<Date | null>(null);\n\n  const activeSuppliers = computed(() =>\n    suppliers.value.filter((supplier: any) => supplier.is_active)\n  );\n\n  const suppliersWithSyncEnabled = computed(() =>\n    suppliers.value.filter((supplier: any) => supplier.sync_enabled)\n  );\n\n  const getSupplierById = computed(\n    () => (id: string) => suppliers.value.find((supplier: any) => supplier.id === id)\n  );\n\n  const getSupplierProductsBySupplier = computed(\n    () => (supplierId: string) =>\n      supplierProducts.value.filter(sp => sp.supplier_id === supplierId)\n  );\n\n  const getSupplierProductsForProduct = computed(\n    () => (productId: string) =>\n      supplierProducts.value.filter(sp => sp.product_id === productId)\n  );\n\n  const ensurePractice = () => {\n    if (!practiceId.value) {\n      throw new Error('No practice selected');\n    }\n    return practiceId.value;\n  };\n\n  const fetchSuppliers = async () => {\n    loading.value = true;\n    try {\n      const currentPracticeId = ensurePractice();\n      const { data, error } = await supabase\n        .from('suppliers')\n        .select('*')\n        .eq('practice_id', currentPracticeId)\n        .order('name');\n\n      if (error) throw error;\n\n      suppliers.value = ((data as any) ?? []).map((row: any) =>\n        mapSupplierRowToView(row as SupplierRow)\n      );\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      log.error('Error fetching suppliers', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createSupplier = async (supplierData: CreateSupplierRequest) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { data, error } = await supabase\n        .from('suppliers')\n        .insert([\n          {\n            ...supplierData,\n            payment_terms: supplierData.payment_terms ?? 30,\n            minimum_order_amount: supplierData.minimum_order_amount ?? 0,\n            shipping_cost: supplierData.shipping_cost ?? 0,\n            sync_enabled: false,\n            is_active: true,\n            country: supplierData.country ?? 'Netherlands',\n            practice_id: currentPracticeId,\n          },\n        ])\n        .select()\n        .single();\n\n      if (error) throw error;\n      if (!data) {\n        throw new Error('Failed to create supplier');\n      }\n\n      const newSupplier = mapSupplierRowToView((data as any) as SupplierRow);\n      (suppliers.value as any).push(newSupplier);\n      return newSupplier;\n    } catch (error) {\n      log.error('Error creating supplier', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const updateSupplier = async (id: string, updates: Partial<SupplierView>) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { data, error } = await supabase\n        .from('suppliers')\n        .update(updates)\n        .eq('id', id)\n        .eq('practice_id', currentPracticeId)\n        .select()\n        .single();\n\n      if (error) throw error;\n      if (!data) {\n        throw new Error('Failed to update supplier');\n      }\n\n      const index = suppliers.value.findIndex(s => s.id === id);\n      const updatedSupplier = mapSupplierRowToView((data as any) as SupplierRow);\n      if (index >= 0) {\n        (suppliers.value as any)[index] = updatedSupplier;\n      }\n\n      return updatedSupplier;\n    } catch (error) {\n      log.error('Error updating supplier', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const deleteSupplier = async (id: string) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { error } = await supabase\n        .from('suppliers')\n        .delete()\n        .eq('id', id)\n        .eq('practice_id', currentPracticeId);\n\n      if (error) throw error;\n\n      suppliers.value = (suppliers.value as any).filter((s: any) => s.id !== id);\n    } catch (error) {\n      log.error('Error deleting supplier', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const fetchSupplierProducts = async (supplierId?: string) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      let query = supabase\n        .from('supplier_products')\n        .select(\n          `\n          *,\n          supplier:suppliers(name, code),\n          product:products(name, sku, category, brand)\n        `\n        )\n        .eq('practice_id', currentPracticeId)\n        .order('supplier_name');\n\n      if (supplierId) {\n        query = query.eq('supplier_id', supplierId);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      supplierProducts.value = (\n        (data as SupplierProductRow[] | null) ?? []\n      ).map(\n        row =>\n          ({\n            ...row,\n            cost_price: row.cost_price ?? null,\n            currency: row.currency ?? null,\n            list_price: row.list_price ?? null,\n            minimum_order_quantity: row.minimum_order_quantity ?? null,\n            order_multiple: row.order_multiple ?? null,\n            is_available: row.is_available ?? null,\n            is_preferred: row.is_preferred ?? null,\n            lead_time_days: row.lead_time_days ?? null,\n            gtin: row.gtin ?? null,\n            supplier_name: row.supplier_name ?? null,\n            created_at: row.created_at ?? null,\n            updated_at: row.updated_at ?? null,\n          }) satisfies SupplierProduct\n      );\n    } catch (error) {\n      log.error('Error fetching supplier products', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const createSupplierProduct = async (\n    supplierProductData: SupplierProductInsert\n  ) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { data, error } = await supabase\n        .from('supplier_products')\n        .insert([\n          {\n            practice_id: currentPracticeId,\n            supplier_id: supplierProductData.supplier_id,\n            product_id: supplierProductData.product_id,\n            list_price: supplierProductData.list_price ?? null,\n            cost_price: supplierProductData.cost_price ?? null,\n            currency: supplierProductData.currency ?? null,\n            minimum_order_quantity:\n              supplierProductData.minimum_order_quantity ?? null,\n            order_multiple: supplierProductData.order_multiple ?? null,\n            is_available: supplierProductData.is_available ?? null,\n            lead_time_days: supplierProductData.lead_time_days ?? null,\n            is_preferred: supplierProductData.is_preferred ?? null,\n            gtin: supplierProductData.gtin ?? null,\n            supplier_name: supplierProductData.supplier_name ?? null,\n            supplier_sku: supplierProductData.supplier_sku,\n          } as any,\n        ])\n        .select()\n        .single<SupplierProductRow>();\n\n      if (error) throw error;\n      if (!data) {\n        throw new Error('Failed to create supplier product');\n      }\n\n      const mapped = {\n        ...data,\n        list_price: data.list_price ?? null,\n        cost_price: data.cost_price ?? null,\n        currency: data.currency ?? null,\n        minimum_order_quantity: data.minimum_order_quantity ?? null,\n        order_multiple: data.order_multiple ?? null,\n        is_available: data.is_available ?? null,\n        is_preferred: data.is_preferred ?? null,\n        lead_time_days: data.lead_time_days ?? null,\n        gtin: data.gtin ?? null,\n        created_at: data.created_at ?? null,\n        updated_at: data.updated_at ?? null,\n      } satisfies SupplierProduct;\n\n      supplierProducts.value.push(mapped);\n      return mapped;\n    } catch (error) {\n      log.error('Error creating supplier product', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const updateSupplierProduct = async (\n    id: string,\n    updates: Partial<SupplierProduct>\n  ) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { data, error } = await supabase\n        .from('supplier_products')\n        .update({\n          cost_price: updates.cost_price ?? null,\n          currency: updates.currency ?? null,\n          list_price: updates.list_price ?? null,\n          minimum_order_quantity: updates.minimum_order_quantity ?? null,\n          order_multiple: updates.order_multiple ?? null,\n          is_available: updates.is_available ?? null,\n          is_preferred: updates.is_preferred ?? null,\n          lead_time_days: updates.lead_time_days ?? null,\n          gtin: updates.gtin ?? null,\n          supplier_name: updates.supplier_name ?? null,\n          supplier_sku: updates.supplier_sku,\n          updated_at: new Date().toISOString(),\n        } satisfies SupplierProductUpdate)\n        .eq('id', id)\n        .eq('practice_id', currentPracticeId)\n        .select()\n        .single<SupplierProductRow>();\n\n      if (error) throw error;\n      if (!data) {\n        throw new Error('Failed to update supplier product');\n      }\n\n      const index = supplierProducts.value.findIndex(sp => sp.id === id);\n      if (index >= 0) {\n        supplierProducts.value[index] = {\n          ...data,\n          list_price: data.list_price ?? null,\n          cost_price: data.cost_price ?? null,\n          currency: data.currency ?? null,\n          minimum_order_quantity: data.minimum_order_quantity ?? null,\n          order_multiple: data.order_multiple ?? null,\n          is_available: data.is_available ?? null,\n          is_preferred: data.is_preferred ?? null,\n          lead_time_days: data.lead_time_days ?? null,\n          gtin: data.gtin ?? null,\n          created_at: data.created_at ?? null,\n          updated_at: data.updated_at ?? null,\n        } satisfies SupplierProduct;\n      }\n\n      return supplierProducts.value[index];\n    } catch (error) {\n      log.error('Error updating supplier product', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const deleteSupplierProduct = async (id: string) => {\n    try {\n      const currentPracticeId = ensurePractice();\n      const { error } = await supabase\n        .from('supplier_products')\n        .delete()\n        .eq('id', id)\n        .eq('practice_id', currentPracticeId);\n\n      if (error) throw error;\n\n      supplierProducts.value = supplierProducts.value.filter(\n        sp => sp.id !== id\n      );\n    } catch (error) {\n      log.error('Error deleting supplier product', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const findBestSupplierForProduct = (productId: string) => {\n    const productSuppliers = supplierProducts.value.filter(\n      sp => sp.product_id === productId && sp.is_available\n    );\n\n    if (productSuppliers.length === 0) {\n      return null;\n    }\n\n    return productSuppliers.slice().sort((a, b) => {\n      if (a.list_price !== b.list_price) {\n        return (a.list_price ?? 0) - (b.list_price ?? 0);\n      }\n      return (a.lead_time_days ?? 0) - (b.lead_time_days ?? 0);\n    })[0];\n  };\n\n  const syncSupplierData = async (supplierId: string) => {\n    try {\n      ensurePractice();\n      // Sync supplier products and metadata if needed\n      await fetchSupplierProducts(supplierId);\n      lastSyncAt.value = new Date();\n    } catch (error) {\n      log.error('Error syncing supplier data', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  return {\n    suppliers,\n    supplierProducts,\n    loading,\n    lastSyncAt,\n    activeSuppliers,\n    suppliersWithSyncEnabled,\n    getSupplierById,\n    getSupplierProductsBySupplier,\n    getSupplierProductsForProduct,\n    fetchSuppliers,\n    createSupplier,\n    updateSupplier,\n    deleteSupplier,\n    fetchSupplierProducts,\n    createSupplierProduct,\n    updateSupplierProduct,\n    deleteSupplierProduct,\n    findBestSupplierForProduct,\n    syncSupplierData,\n  };\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\analytics.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2282, 2285], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2282, 2285], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2318, 2321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2318, 2321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export interface LowStockItemDTO {\n  productId: string;\n  productName: string;\n  currentQuantity: number;\n  minimumQuantity: number;\n  locationId?: string;\n  locationName?: string;\n  availableQuantity?: number;\n  reservedQuantity?: number;\n  preferredSupplierId?: string | null;\n  lastMovementAt?: string | null;\n  productSku?: string | null;\n  unitPrice?: number | null;\n}\n\nexport interface StockTurnoverRateDTO {\n  productId: string;\n  productName: string;\n  totalUsed: number;\n  averageStock: number;\n  turnoverRate: number;\n}\n\nexport interface TopUsedProductDTO {\n  productId: string;\n  productName: string;\n  totalUsed: number;\n  usageCount: number;\n}\n// Analytics and metrics types\nexport interface AnalyticsDateRange {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface AnalyticsSummary {\n  totalEvents: number;\n  activeUsers: number;\n  totalOrders: number;\n  productUpdates: number;\n  topEvents: [string, number][];\n  userActivity: Record<string, { count: number; lastActivity: string }>;\n  dailyActivity: Record<string, number>;\n}\n\nexport interface OrderMetrics {\n  totalOrders: number;\n  totalOrderValue: number;\n  averageOrderSize: number;\n  ordersByStatus: Record<string, number>;\n  frequentlyOrderedItems: Array<{\n    productName: string;\n    totalQuantity: number;\n    orderCount: number;\n    productId: string;\n  }>;\n  orderTrends: Record<string, number>;\n}\n\nexport interface ProductMetrics {\n  totalUpdates: number;\n  productsScanned: number;\n  lowStockAlerts: number;\n  stockEntryTrends: Record<string, number>;\n  mostUpdatedProducts: Array<{\n    productName: string;\n    updateCount: number;\n    productId: string;\n  }>;\n}\n\nexport interface UserActivityMetrics {\n  activeUsers: number;\n  totalSessions: number;\n  averageSessionDuration: number;\n  usersByRole: Record<string, number>;\n  mostActiveUsers: Array<{\n    userId: string;\n    sessionCount: number;\n    totalDuration: number;\n    practiceName?: string;\n  }>;\n  userList?: Array<{\n    userId: string;\n    activityCount: number;\n    lastActivity: string;\n    totalEvents: number;\n  }>;\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  practice_id: string;\n  user_id?: string;\n  user_email?: string;\n  action: string;\n  resource_type: string;\n  resource_id?: string;\n  old_values?: Record<string, any>;\n  new_values?: Record<string, any>;\n  ip_address?: string;\n  user_agent?: string;\n  timestamp: string;\n  success: boolean;\n  error_message?: string;\n}\n\nexport interface UsageAnalytics {\n  id: string;\n  practiceId: string;\n  userId: string | null;\n  locationId: string | null;\n  eventType: string;\n  eventData: Record<string, unknown> | null;\n  sessionId: string | null;\n  userAgent: string | null;\n  ipAddress: string | null;\n  createdAt: string;\n}\n\nexport interface AnalyticsStockLevelDTO {\n  productId: string;\n  locationId: string;\n  currentQuantity: number;\n  minimumQuantity: number;\n  reservedQuantity: number;\n  availableQuantity: number;\n  productName?: string;\n  locationName?: string;\n  preferredSupplierId?: string | null;\n  updatedAt?: string | null;\n}\n\nexport interface OrderListStatusDTO {\n  id: string;\n  practiceId: string;\n  supplierId: string | null;\n  status: string | null;\n  totalItems: number;\n  totalCost: number;\n  updatedAt: string | null;\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\events.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\i18n.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\inventory.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Json' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1056,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1056,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30939, 30942], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30939, 30942], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1064,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1064,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31182, 31185], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31182, 31185], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1065,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1065,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31234, 31237], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31234, 31237], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1066,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1066,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31288, 31291], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31288, 31291], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1067,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1067,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31343, 31346], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31343, 31346], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1068,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1068,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31399, 31402], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31399, 31402], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1069,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1069,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31452, 31455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31452, 31455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1070,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1070,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31501, 31504], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31501, 31504], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1071,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1071,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31551, 31554], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31551, 31554], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1080,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1080,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [31940, 31943], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [31940, 31943], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1081,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1081,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32012, 32015], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32012, 32015], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1082,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1082,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32086, 32089], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32086, 32089], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1083,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1083,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32161, 32164], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32161, 32164], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1084,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1084,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32237, 32240], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32237, 32240], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1085,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1085,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32310, 32313], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32310, 32313], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1086,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1086,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32379, 32382], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32379, 32382], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1087,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1087,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32449, 32452], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32449, 32452], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1090,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1090,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [32506, 32509], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [32506, 32509], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1313,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1313,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [38703, 38706], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [38703, 38706], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type {\n  Tables,\n  TablesInsert,\n  TablesUpdate,\n  Json,\n} from './supabase.generated';\nimport type { Database } from './supabase.generated';\n\ntype PracticeLocationRow = Tables<'practice_locations'>;\ntype ProductRowRaw = Tables<'products'>;\ntype SupplierRowRaw = Tables<'suppliers'>;\n\nconst resolveNullableNumber = (\n  value: number | null | undefined\n): number | null => (typeof value === 'number' ? value : null);\n\nconst resolveRelation = <T>(maybeRelation: T | undefined | null): T | null =>\n  maybeRelation ?? null;\n\ntype ProductBatchRowWithRelations = ProductBatch & {\n  product?: ProductRowRaw | null;\n  supplier?: SupplierRowRaw | null;\n  location?: PracticeLocationRow | null;\n  total_cost?: number | null;\n};\nexport type ProductBatchRow = ProductBatchRowWithRelations;\n\ntype StockLevelRowWithRelations = StockLevelRow & {\n  products?: ProductRowRaw | null;\n  practice_locations?: PracticeLocationRow | null;\n};\nexport type StockLevelRowWithRelationsAlias = StockLevelRowWithRelations;\n\ninterface SimpleProductView {\n  id: string;\n  sku: string | null;\n  name: string | null;\n}\n\ninterface SimpleSupplierView {\n  id: string;\n  name: string | null;\n}\n\ninterface SimpleLocationView {\n  id: string;\n  code: string | null;\n  name: string | null;\n}\n\ninterface StockMetricsView {\n  onHand: number;\n  available: number | null;\n  reserved: number | null;\n  minimum: number | null;\n  maximum: number | null;\n  reorderPoint: number | null;\n}\n\ninterface SupplierProductView {\n  id: string;\n  supplier: SimpleSupplierView;\n  supplierSku: string | null;\n  costPrice: number | null;\n  listPrice: number | null;\n  currency: string | null;\n  leadTimeDays: number | null;\n  isPreferred: boolean | null;\n  raw: SupplierProductRow;\n}\n\nexport const mapProductBatchRowToDetails = (\n  row: ProductBatch | ProductBatchRowWithRelations\n): ProductBatchWithDetails => {\n  const withRelations: ProductBatchRowWithRelations = row;\n  const resolvedProduct = resolveRelation(withRelations.product);\n  const resolvedSupplier = resolveRelation(withRelations.supplier);\n  const resolvedLocation = resolveRelation(withRelations.location);\n\n  // Calculate urgency fields\n  const daysUntilExpiry = Math.ceil(\n    (new Date(row.expiry_date).getTime() - Date.now()) / (1000 * 60 * 60 * 24)\n  );\n\n  let urgencyLevel:\n    | 'normal'\n    | 'low'\n    | 'warning'\n    | 'high'\n    | 'critical'\n    | 'expired' = 'normal';\n  if (daysUntilExpiry < 0) {\n    urgencyLevel = 'expired';\n  } else if (daysUntilExpiry <= 7) {\n    urgencyLevel = 'critical';\n  } else if (daysUntilExpiry <= 30) {\n    urgencyLevel = 'high';\n  } else if (daysUntilExpiry <= 90) {\n    urgencyLevel = 'warning';\n  } else if (daysUntilExpiry <= 180) {\n    urgencyLevel = 'low';\n  }\n\n  const legacy: ProductBatchLegacyView = {\n    id: row.id,\n    practice_id: row.practice_id,\n    product_id: row.product_id,\n    location_id: row.location_id,\n    supplier_id: row.supplier_id ?? null,\n    batch_number: row.batch_number,\n    expiry_date: row.expiry_date,\n    current_quantity: row.current_quantity,\n    available_quantity: row.available_quantity ?? null,\n    reserved_quantity: row.reserved_quantity ?? null,\n    unit_cost: row.unit_cost ?? null,\n    total_cost: resolveNullableNumber(withRelations.total_cost),\n    product_name: resolvedProduct?.name ?? null,\n    product_sku: resolvedProduct?.sku ?? null,\n    product_category: resolvedProduct?.category ?? null,\n    location_name: resolvedLocation?.name ?? null,\n    location_code: resolvedLocation?.code ?? null,\n    location_type: resolvedLocation?.location_type ?? null,\n    supplier_name: resolvedSupplier?.name ?? null,\n  };\n\n  return {\n    id: row.id,\n    practiceId: row.practice_id,\n    productId: row.product_id,\n    locationId: row.location_id,\n    supplierId: row.supplier_id ?? resolvedSupplier?.id ?? null,\n    batchNumber: row.batch_number,\n    expiryDate: row.expiry_date,\n    currentQuantity: row.current_quantity,\n    availableQuantity: row.available_quantity ?? null,\n    reservedQuantity: row.reserved_quantity ?? null,\n    unitCost: row.unit_cost ?? null,\n    totalCost: resolveNullableNumber(withRelations.total_cost),\n    productName: legacy.product_name,\n    productSku: legacy.product_sku,\n    productCategory: legacy.product_category,\n    locationName: legacy.location_name,\n    locationCode: legacy.location_code,\n    locationType: legacy.location_type,\n    supplierName: legacy.supplier_name,\n    product: resolvedProduct\n      ? {\n          id: resolvedProduct.id,\n          sku: resolvedProduct.sku ?? null,\n          name: resolvedProduct.name ?? legacy.product_name,\n        }\n      : null,\n    supplier: resolvedSupplier\n      ? {\n          id: resolvedSupplier.id,\n          name: resolvedSupplier.name ?? legacy.supplier_name,\n        }\n      : null,\n    location: resolvedLocation\n      ? {\n          id: resolvedLocation.id,\n          code: resolvedLocation.code ?? legacy.location_code,\n          name: resolvedLocation.name ?? legacy.location_name,\n        }\n      : null,\n    stock: {\n      onHand: row.current_quantity,\n      reserved: row.reserved_quantity ?? null,\n      available: row.available_quantity ?? null,\n      minimum: null, // Not available on batch records\n      maximum: null, // Not available on batch records\n      reorderPoint: null, // Not available on batch records\n    },\n    urgencyLevel,\n    daysUntilExpiry,\n    legacy,\n    raw: withRelations,\n    // Deprecated snake_case properties (for backward compatibility)\n    practice_id: row.practice_id,\n    product_id: row.product_id,\n    location_id: row.location_id,\n    supplier_id: row.supplier_id ?? resolvedSupplier?.id ?? null,\n    batch_number: row.batch_number,\n    expiry_date: row.expiry_date,\n    current_quantity: row.current_quantity,\n    available_quantity: row.available_quantity ?? null,\n    reserved_quantity: row.reserved_quantity ?? null,\n    unit_cost: row.unit_cost ?? null,\n    total_cost: resolveNullableNumber(withRelations.total_cost),\n    product_name: legacy.product_name,\n    product_sku: legacy.product_sku,\n    product_category: legacy.product_category,\n    location_name: legacy.location_name,\n    location_code: legacy.location_code,\n    location_type: legacy.location_type,\n    supplier_name: legacy.supplier_name,\n  };\n};\n\nexport const mapProductBatchRowToView = (\n  row: ProductBatch | ProductBatchRowWithRelations\n): ProductBatchWithDetails => mapProductBatchRowToDetails(row);\nexport type PracticeRow = Tables<'practices'>;\nexport type PracticeInsert = TablesInsert<'practices'>;\nexport type PracticeUpdate = TablesUpdate<'practices'>;\n\nexport type Supplier = Tables<'suppliers'>;\nexport type SupplierRow = Tables<'suppliers'>;\nexport type SupplierView = SupplierRow & {\n  contact_email: string | null;\n  contact_phone: string | null;\n  contact_person: string | null;\n  address: string | null;\n  city: string | null;\n  postal_code: string | null;\n  country: string | null;\n  website: string | null;\n  payment_terms: number | null;\n  minimum_order_amount: number | null;\n  shipping_cost: number | null;\n  free_shipping_threshold: number | null;\n  api_endpoint: string | null;\n  api_type: string | null;\n  sync_enabled: boolean | null;\n  is_active: boolean | null;\n  preferred_order_day: number | null;\n  order_cutoff_time: string | null;\n};\n\nexport type SupplierInsert = TablesInsert<'suppliers'>;\nexport type SupplierUpdate = TablesUpdate<'suppliers'>;\n\nexport type SupplierProduct = Tables<'supplier_products'>;\nexport type SupplierProductRow = Tables<'supplier_products'>;\nexport type SupplierProductInsert = TablesInsert<'supplier_products'>;\nexport type SupplierProductUpdate = TablesUpdate<'supplier_products'>;\n\nexport type PracticeLocation = Tables<'practice_locations'>;\nexport type PracticeLocationInsert = TablesInsert<'practice_locations'>;\nexport type PracticeLocationUpdate = TablesUpdate<'practice_locations'>;\n\nexport type OrderAdviceResult =\n  Database['public']['Functions']['get_order_advice']['Returns'];\n\nexport type PracticeMemberRow = Tables<'practice_members'>;\nexport type PracticeMemberInsert = TablesInsert<'practice_members'>;\nexport type PracticeMemberUpdate = TablesUpdate<'practice_members'>;\n\nexport type OrderListRow = Tables<'order_lists'>;\nexport type OrderListInsert = TablesInsert<'order_lists'>;\nexport type OrderListUpdate = TablesUpdate<'order_lists'>;\n\nexport type ProductRow = Tables<'products'>;\n\nexport type ProductBatch = Tables<'product_batches'>;\n\nexport interface ProductBatchWithDetails {\n  id: string;\n  practiceId: string;\n  productId: string;\n  locationId: string;\n  supplierId: string | null;\n  batchNumber: string;\n  expiryDate: string;\n  currentQuantity: number;\n  availableQuantity: number | null;\n  reservedQuantity: number | null;\n  unitCost: number | null;\n  totalCost: number | null;\n  productName: string | null;\n  productSku: string | null;\n  productCategory: string | null;\n  locationName: string | null;\n  locationCode: string | null;\n  locationType: string | null;\n  supplierName: string | null;\n  product: SimpleProductView | null;\n  supplier: SimpleSupplierView | null;\n  location: SimpleLocationView | null;\n  stock: StockMetricsView;\n  legacy: ProductBatchLegacyView;\n  raw?: ProductBatchRowWithRelations;\n  // Computed fields\n  urgencyLevel: 'normal' | 'low' | 'warning' | 'high' | 'critical' | 'expired';\n  daysUntilExpiry: number;\n  /** @deprecated use practiceId */\n  practice_id: string;\n  /** @deprecated use productId */\n  product_id: string;\n  /** @deprecated use locationId */\n  location_id: string;\n  /** @deprecated use supplierId */\n  supplier_id: string | null;\n  /** @deprecated use batchNumber */\n  batch_number: string;\n  /** @deprecated use expiryDate */\n  expiry_date: string;\n  /** @deprecated use currentQuantity */\n  current_quantity: number;\n  /** @deprecated use availableQuantity */\n  available_quantity: number | null;\n  /** @deprecated use reservedQuantity */\n  reserved_quantity: number | null;\n  /** @deprecated use unitCost */\n  unit_cost: number | null;\n  /** @deprecated use totalCost */\n  total_cost: number | null;\n  /** @deprecated use productName */\n  product_name: string | null;\n  /** @deprecated use productSku */\n  product_sku: string | null;\n  /** @deprecated use productCategory */\n  product_category: string | null;\n  /** @deprecated use locationName */\n  location_name: string | null;\n  /** @deprecated use locationCode */\n  location_code: string | null;\n  /** @deprecated use locationType */\n  location_type: string | null;\n  /** @deprecated use supplierName */\n  supplier_name: string | null;\n}\n\nexport interface ProductBatchLegacyView {\n  /** @deprecated use camelCase fields */\n  id: string;\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  supplier_id: string | null;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  available_quantity: number | null;\n  reserved_quantity: number | null;\n  unit_cost: number | null;\n  total_cost: number | null;\n  product_name: string | null;\n  product_sku: string | null;\n  product_category: string | null;\n  location_name: string | null;\n  location_code: string | null;\n  location_type: string | null;\n  supplier_name: string | null;\n  /** @deprecated use camelCase fields */\n  practiceId?: string;\n  /** @deprecated use camelCase fields */\n  productId?: string;\n  /** @deprecated use camelCase fields */\n  locationId?: string;\n  /** @deprecated use camelCase fields */\n  supplierId?: string | null;\n  /** @deprecated use camelCase fields */\n  batchNumber?: string;\n  /** @deprecated use camelCase fields */\n  expiryDate?: string;\n  /** @deprecated use camelCase fields */\n  currentQuantity?: number;\n  /** @deprecated use camelCase fields */\n  availableQuantity?: number | null;\n  /** @deprecated use camelCase fields */\n  reservedQuantity?: number | null;\n  /** @deprecated use camelCase fields */\n  unitCost?: number | null;\n  /** @deprecated use camelCase fields */\n  totalCost?: number | null;\n  /** @deprecated use camelCase fields */\n  productName?: string | null;\n  /** @deprecated use camelCase fields */\n  productSku?: string | null;\n  /** @deprecated use camelCase fields */\n  productCategory?: string | null;\n  /** @deprecated use camelCase fields */\n  locationName?: string | null;\n  /** @deprecated use camelCase fields */\n  locationCode?: string | null;\n  /** @deprecated use camelCase fields */\n  locationType?: string | null;\n  /** @deprecated use camelCase fields */\n  supplierName?: string | null;\n}\n\nexport type ProductBatchWithDetailsView = ProductBatchWithDetails & {\n  days_until_expiry: number | null;\n  daysUntilExpiry: number | null;\n  urgency_level?: ExpiryUrgencyLevel;\n  urgencyLevel?: ExpiryUrgencyLevel;\n};\n\nexport interface BatchMovement {\n  batch_id: string;\n  batch_number: string;\n  quantity_used: number;\n  expiry_date: string;\n}\n\nexport interface FifoBatch {\n  batch_id: string;\n  batch_number: string;\n  available_quantity: number;\n  expiry_date: string;\n  use_quantity: number;\n}\n\nexport interface ExpiringBatch {\n  batch_id: string;\n  product_id: string;\n  product_name: string;\n  product_sku: string;\n  location_id: string;\n  location_name: string;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  days_until_expiry: number;\n  urgency_level: 'normal' | 'warning' | 'critical' | 'expired';\n}\n\nexport type StockLevelRow = Tables<'stock_levels'>;\n\nexport interface StockLevelView {\n  id: string;\n  practiceId: string;\n  productId: string;\n  locationId: string;\n  currentQuantity: number;\n  availableQuantity: number;\n  reservedQuantity: number;\n  minimumQuantity: number;\n  maximumQuantity: number | null;\n  reorderPoint: number | null;\n  preferredSupplierId: string | null;\n  preferredSupplierName: string | null;\n  lastCountedAt: string | null;\n  lastMovementAt: string | null;\n  lastOrderedAt: string | null;\n  locationName: string | null;\n  productName: string | null;\n  stockStatus: string | null;\n  averageConsumption: number | null;\n  reorderRecommendation: number | null;\n  priority: string | null;\n  createdAt: string | null;\n  updatedAt: string | null;\n  legacy: StockLevelLegacyView;\n  raw?: StockLevelRowWithRelations;\n}\n\nexport interface StockLevelLegacyView {\n  /** @deprecated use camelCase fields */\n  id: string;\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  current_quantity: number;\n  available_quantity: number;\n  reserved_quantity: number;\n  minimum_quantity: number;\n  maximum_quantity: number | null;\n  reorder_point: number | null;\n  preferred_supplier_id: string | null;\n  preferred_supplier_name: string | null;\n  last_counted_at: string | null;\n  last_movement_at: string | null;\n  last_ordered_at: string | null;\n  location_name: string | null;\n  product_name: string | null;\n  stock_status: string | null;\n  average_consumption: number | null;\n  reorder_recommendation: number | null;\n  priority: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n}\n\nexport const mapStockLevelRowToView = (\n  row: StockLevelRow | StockLevelRowWithRelations\n): StockLevelView => {\n  const extended = row as StockLevelRowWithRelations;\n  const locationName = extended.practice_locations?.name ?? null;\n  const productName = extended.products?.name ?? null;\n  const stockStatus = null; // Computed field not available on row\n  const averageConsumption = null; // Computed field not available on row\n  const reorderRecommendation = null; // Computed field not available on row\n  const priority = null; // Computed field not available on row\n  const preferredSupplierName = null; // Would need supplier join\n\n  return {\n    id: row.id,\n    practiceId: row.practice_id,\n    productId: row.product_id,\n    locationId: row.location_id,\n    currentQuantity: row.current_quantity ?? 0,\n    availableQuantity: row.available_quantity ?? 0,\n    reservedQuantity: row.reserved_quantity ?? 0,\n    minimumQuantity: row.minimum_quantity ?? 0,\n    maximumQuantity: row.maximum_quantity ?? null,\n    reorderPoint: row.reorder_point ?? null,\n    preferredSupplierId: row.preferred_supplier_id ?? null,\n    preferredSupplierName,\n    lastCountedAt: row.last_counted_at ?? null,\n    lastMovementAt: row.last_movement_at ?? null,\n    lastOrderedAt: row.last_ordered_at ?? null,\n    locationName,\n    productName,\n    stockStatus,\n    averageConsumption,\n    reorderRecommendation,\n    priority,\n    createdAt: row.created_at ?? null,\n    updatedAt: row.updated_at ?? null,\n    legacy: {\n      id: row.id,\n      practice_id: row.practice_id,\n      product_id: row.product_id,\n      location_id: row.location_id,\n      current_quantity: row.current_quantity ?? 0,\n      available_quantity: row.available_quantity ?? 0,\n      reserved_quantity: row.reserved_quantity ?? 0,\n      minimum_quantity: row.minimum_quantity ?? 0,\n      maximum_quantity: row.maximum_quantity ?? null,\n      reorder_point: row.reorder_point ?? null,\n      preferred_supplier_id: row.preferred_supplier_id ?? null,\n      preferred_supplier_name: preferredSupplierName,\n      last_counted_at: row.last_counted_at ?? null,\n      last_movement_at: row.last_movement_at ?? null,\n      last_ordered_at: row.last_ordered_at ?? null,\n      location_name: locationName,\n      product_name: productName,\n      stock_status: stockStatus,\n      average_consumption: averageConsumption,\n      reorder_recommendation: reorderRecommendation,\n      priority,\n      created_at: row.created_at ?? null,\n      updated_at: row.updated_at ?? null,\n    },\n    raw: extended,\n  };\n};\n\nexport type StockMovement = Tables<'stock_movements'>;\n\nexport type StockMovementInsert = TablesInsert<'stock_movements'>;\n\nexport type StockMovementUpdate = TablesUpdate<'stock_movements'>;\n\nexport type StockMovementRow = Tables<'stock_movements'>;\n\nexport type MovementWithRelations = StockMovementRow & {\n  product?: Pick<\n    Tables<'products'>,\n    'id' | 'name' | 'sku' | 'category' | 'brand' | 'unit'\n  > | null;\n  location?: Pick<\n    Tables<'practice_locations'>,\n    'id' | 'name' | 'location_type'\n  > | null;\n  from_location?: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n  to_location?: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n};\n\nexport type MovementQueryRow = Tables<'stock_movements'> & {\n  product: Pick<Tables<'products'>, 'id' | 'name' | 'sku'> | null;\n  location: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n};\n\nexport type CountingSession = Tables<'counting_sessions'> & {\n  location_ids?: string[];\n  product_ids?: string[];\n  total_discrepancy_value?: number | null;\n};\n\nexport type CountingEntry = Tables<'counting_entries'>;\n\nexport type OrderListItemRow = Tables<'order_list_items'>;\nexport type OrderListItemInsert = TablesInsert<'order_list_items'>;\nexport type OrderListItemUpdate = TablesUpdate<'order_list_items'>;\n\nexport type OrderListStatus = Database['public']['Enums']['order_list_status'];\n\nexport type OrderListItemStatus = OrderListItemRow['status'];\n\nexport interface OrderListDTO {\n  id: string;\n  practice_id: string;\n  location_id: string;\n  supplier_id: string | null;\n  name: string;\n  description: string | null;\n  status: OrderListStatus | null;\n  total_items: number;\n  total_cost: number;\n  min_order_value: number | null;\n  created_at: string | null;\n  updated_at: string | null;\n  created_by: string | null;\n  submitted_at: string | null;\n  submitted_by: string | null;\n  supplier: Tables<'suppliers'> | null;\n}\n\nexport interface OrderListItemDTO {\n  id: string;\n  order_list_id: string;\n  product_id: string;\n  supplier_product_id: string | null;\n  suggested_quantity: number;\n  ordered_quantity: number;\n  unit_price: number | null;\n  total_price: number | null;\n  status: string | null;\n  notes: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  product: Tables<'products'> | null;\n  supplier_product: Tables<'supplier_products'> | null;\n}\n\n// Type unions\nexport type MovementType =\n  | 'count'\n  | 'receipt'\n  | 'usage'\n  | 'transfer'\n  | 'adjustment'\n  | 'waste'\n  | 'order_received'\n  | 'consumption'\n  | 'expired'\n  | 'manual_adjustment'\n  | 'correction';\n\nexport type ReasonCode =\n  | 'normal_usage'\n  | 'expired'\n  | 'damaged'\n  | 'lost'\n  | 'found'\n  | 'transfer_in'\n  | 'transfer_out'\n  | 'adjustment'\n  | 'count_correction';\n\nexport type OrderListWorkflowStatus =\n  | 'draft'\n  | 'ready'\n  | 'submitted'\n  | 'confirmed'\n  | 'delivered'\n  | 'cancelled';\n\nexport type UrgencyLevel = 'low' | 'medium' | 'high' | 'critical';\n\nexport type BatchStatus = 'active' | 'depleted' | 'expired' | 'recalled';\n\nexport type ExpiryUrgencyLevel = 'normal' | 'warning' | 'critical' | 'expired';\n\n// Enhanced types with relationships\nexport interface StockLevelWithDetails extends StockLevelView {\n  location?: PracticeLocation;\n  product?: {\n    id: string;\n    name: string;\n    sku: string;\n    category?: string;\n    brand?: string;\n    unit?: string;\n  };\n  preferred_supplier?: Supplier | null;\n}\n\nexport interface OrderSuggestion {\n  product_id: string;\n  product_name: string;\n  product_sku: string;\n  location_id: string;\n  location_name: string;\n  current_stock: number;\n  minimum_stock: number;\n  suggested_quantity: number;\n  preferred_supplier_id: string | null;\n  supplier_name: string | null;\n  urgency_level: UrgencyLevel | null;\n  days_until_stockout: number | null;\n  productName?: string;\n  productSku?: string;\n  locationName?: string;\n  currentStock?: number;\n  minimumStock?: number;\n  suggestedQuantity?: number;\n  preferredSupplierId?: string | null;\n  supplierName?: string | null;\n  urgencyLevel?: UrgencyLevel | null;\n  daysUntilStockout?: number | null;\n}\n\nexport interface StockAlert {\n  id: string;\n  type:\n    | 'out_of_stock'\n    | 'low_stock'\n    | 'overstock'\n    | 'expired'\n    | 'expiring_soon';\n  severity?: 'critical' | 'warning' | 'info';\n  product_id: string;\n  product_name?: string;\n  product_sku?: string;\n  location_id: string;\n  location_name?: string;\n  current_stock: number;\n  minimum_stock?: number;\n  threshold_quantity?: number;\n  batch_number?: string;\n  expiry_date?: string;\n  days_until_expiry?: number;\n  message: string;\n  title?: string;\n  suggested_action?: string;\n  created_at: string;\n}\n\n// Form types for API operations\nexport interface CreateSupplierRequest {\n  name: string;\n  code: string;\n  contact_email?: string;\n  contact_phone?: string;\n  contact_person?: string;\n  address?: string;\n  city?: string;\n  postal_code?: string;\n  country?: string;\n  website?: string;\n  payment_terms?: number;\n  minimum_order_amount?: number;\n  shipping_cost?: number;\n  notes?: string;\n}\n\nexport interface CreateLocationRequest {\n  practice_id: string;\n  name: string;\n  code: string;\n  description?: string;\n  location_type:\n    | 'storage'\n    | 'treatment'\n    | 'emergency'\n    | 'mobile'\n    | 'warehouse'\n    | 'clinic'\n    | 'drop_point';\n  address?: string;\n  floor_level?: string;\n  room_number?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  is_main_location?: boolean;\n  requires_counting?: boolean;\n  allows_negative_stock?: boolean;\n}\n\nexport interface UpdateLocationRequest {\n  id: string;\n  practice_id: string;\n  name?: string;\n  code?: string;\n  description?: string;\n  location_type?:\n    | 'storage'\n    | 'treatment'\n    | 'emergency'\n    | 'mobile'\n    | 'warehouse'\n    | 'clinic'\n    | 'drop_point';\n  address?: string;\n  floor_level?: string;\n  room_number?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  is_main_location?: boolean;\n  requires_counting?: boolean;\n  allows_negative_stock?: boolean;\n  restricted_access?: boolean;\n  access_code?: string;\n  responsible_user_id?: string;\n}\n\nexport interface StockUpdateRequest {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  quantity_change: number;\n  movement_type: MovementType;\n  reference_type?: string;\n  reference_id?: string;\n  reason_code?: ReasonCode;\n  notes?: string;\n  batch_number?: string;\n  expiry_date?: string;\n  use_fifo?: boolean;\n}\n\nexport interface CreateBatchRequest {\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  batch_number: string;\n  supplier_batch_number?: string;\n  expiry_date: string;\n  received_date?: string;\n  initial_quantity: number;\n  unit_cost?: number;\n  currency?: string;\n  supplier_id?: string;\n  purchase_order_number?: string;\n  invoice_number?: string;\n  quality_check_passed?: boolean;\n  quality_notes?: string;\n}\n\nexport interface UpdateBatchRequest {\n  id: string;\n  practice_id: string;\n  current_quantity?: number;\n  reserved_quantity?: number;\n  unit_cost?: number;\n  status?: BatchStatus;\n  quality_check_passed?: boolean;\n  quality_notes?: string;\n  quarantine_until?: string;\n}\n\nexport interface BatchStockMovementRequest {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  quantity_change: number;\n  movement_type: MovementType;\n  batch_movements: BatchMovement[];\n  reason_code?: ReasonCode;\n  notes?: string;\n}\n\nexport interface StartCountingSessionRequest {\n  practice_id: string;\n  name: string;\n  session_type: 'full' | 'partial' | 'spot_check' | 'cycle';\n  location_ids: string[];\n  product_ids?: string[];\n  category_filter?: string;\n  allow_negative_counts?: boolean;\n  require_approval?: boolean;\n  auto_adjust_stock?: boolean;\n  notes?: string;\n}\n\n// Mobile-optimized types for counting interface\nexport interface CountingProduct {\n  id: string;\n  name: string;\n  sku: string;\n  category?: string;\n  brand?: string;\n  unit?: string;\n  currentSystemQuantity: number;\n  lastCountedAt?: string;\n  locationName: string;\n  barcode?: string;\n  imageUrl?: string;\n}\n\nexport interface CountingStats {\n  totalProducts: number;\n  countedProducts: number;\n  remainingProducts: number;\n  discrepancies: number;\n  progressPercentage: number;\n}\n\n// Analytics types\nexport interface InventoryKPI {\n  totalSkuCount: number;\n  totalStockValue: number;\n  lowStockItems: number;\n  outOfStockItems: number;\n  stockTurnoverRate: number;\n  averageDaysToStockout: number;\n  topMovingProducts: Array<{\n    productId: string;\n    productName: string;\n    movementCount: number;\n    totalQuantityMoved: number;\n  }>;\n  stockAccuracyPercentage: number;\n  lastFullCountDate: string | null;\n}\n\nexport interface LocationPerformance {\n  locationId: string;\n  locationName: string;\n  totalProducts: number;\n  stockAccuracy: number;\n  avgCountFrequencyDays: number;\n  lastCountedAt?: string;\n  criticalItemsCount: number;\n}\n\n// Product-related types for ProductsPage\nexport type ProductWithRelations = ProductRow & {\n  stock_levels?: StockLevelRow[] | null;\n  supplier_products?: SupplierProductRow[] | null;\n};\n\nexport interface ProductWithStock {\n  id: string;\n  practiceId: string;\n  sku: string;\n  name: string;\n  category: string | null;\n  brand: string | null;\n  unit: string | null;\n  totalStock: number;\n  availableStock: number;\n  reservedStock: number;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  reorderLevel: number | null;\n  unitPrice: number | null;\n  lowestPrice: number | null;\n  supplier: SimpleSupplierView | null;\n  stockLevels: StockLevelView[];\n  supplierProducts: SupplierProductView[];\n  batches: ProductBatchSummary[];\n  legacy: ProductLegacyView;\n  netContentValue?: number | null;\n  netContentUom?: string | null;\n  netWeight?: number | null;\n  grossWeight?: number | null;\n  gtin?: string | null;\n  gpcBrickCode?: string | null;\n  countryOfOrigin?: string | null;\n  productLifecycleStatus?: string | null;\n  lifecycleStatus?: string | null; // Alias for productLifecycleStatus\n  imageUrl?: string | null;\n  requiresBatchTracking?: boolean | null;\n  baseUnitIndicator?: boolean | null;\n  orderableUnitIndicator?: boolean | null;\n  despatchUnitIndicator?: boolean | null;\n  effectiveFromDate?: string | null;\n  effectiveToDate?: string | null;\n  description?: string | null;\n  createdAt?: string | null;\n  updatedAt?: string | null;\n  barcode?: string | null;\n  preferredSupplierId?: string | null;\n  minimumStock?: number | null;\n  // Legacy snake_case aliases for backward compatibility\n  stock_status?: 'in_stock' | 'low_stock' | 'out_of_stock';\n  minimum_stock?: number | null;\n  maximum_stock?: number | null;\n  raw?: ProductWithRelations;\n}\n\nexport interface ProductLegacyView {\n  totalStock: number;\n  availableStock: number;\n  reservedStock: number;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  reorderLevel?: number | null;\n  supplierId?: string | null;\n  supplierName?: string | null;\n  supplierCode?: string | null;\n  supplierPhone?: string | null;\n  supplierEmail?: string | null;\n  expiryDate?: string | null;\n  gs1Status?: 'complete' | 'incomplete' | null;\n  batchStatus?: 'batch_tracked' | 'manual_stock' | null;\n  /** @deprecated use camelCase fields */\n  total_stock?: number;\n  /** @deprecated use camelCase fields */\n  available_stock?: number;\n  /** @deprecated use camelCase fields */\n  reserved_stock?: number;\n  /** @deprecated use camelCase fields */\n  stock_status?: 'in_stock' | 'low_stock' | 'out_of_stock';\n  /** @deprecated use camelCase fields */\n  reorder_level?: number | null;\n  /** @deprecated use camelCase fields */\n  supplier_id?: string | null;\n  /** @deprecated use camelCase fields */\n  supplier_name?: string | null;\n  /** @deprecated use camelCase fields */\n  supplier_code?: string | null;\n  /** @deprecated use camelCase fields */\n  supplier_phone?: string | null;\n  /** @deprecated use camelCase fields */\n  supplier_email?: string | null;\n  /** @deprecated use camelCase fields */\n  expiry_date?: string | null;\n  /** @deprecated use camelCase fields */\n  gs1_status?: 'complete' | 'incomplete' | null;\n  /** @deprecated use camelCase fields */\n  batch_status?: 'batch_tracked' | 'manual_stock' | null;\n}\n\nexport const determineStockStatus = (\n  current: number,\n  minimum: number\n): 'in_stock' | 'low_stock' | 'out_of_stock' => {\n  if (current <= 0) return 'out_of_stock';\n  if (current < minimum) return 'low_stock';\n  return 'in_stock';\n};\n\nexport const mapProductRowToView = (\n  row: ProductWithRelations\n): ProductWithStock => {\n  const supplierProducts: SupplierProductView[] = (\n    row.supplier_products ?? []\n  ).map(product => ({\n    id: product.id,\n    supplier: {\n      id: product.supplier_id,\n      name: product.supplier_name ?? null,\n    },\n    supplierSku: product.supplier_sku ?? null,\n    costPrice: product.cost_price ?? null,\n    listPrice: product.list_price ?? null,\n    currency: product.currency ?? null,\n    leadTimeDays: product.lead_time_days ?? null,\n    isPreferred: product.is_preferred ?? null,\n    raw: product,\n  }));\n\n  const stockLevels = (row.stock_levels ?? []).map(level =>\n    mapStockLevelRowToView(level)\n  );\n\n  const totalStock = stockLevels.reduce(\n    (sum, level) => sum + level.currentQuantity,\n    0\n  );\n\n  const availableStock = stockLevels.reduce(\n    (sum, level) => sum + level.availableQuantity,\n    0\n  );\n\n  const reservedStock = stockLevels.reduce(\n    (sum, level) => sum + level.reservedQuantity,\n    0\n  );\n\n  const minimumStock = (row as any).minimum_stock ?? null;\n\n  const legacy: ProductLegacyView = {\n    totalStock,\n    availableStock,\n    reservedStock,\n    status: determineStockStatus(totalStock, minimumStock ?? 0),\n    reorderLevel: minimumStock,\n    supplierId: (row as any).supplier_id ?? null,\n    supplierName: (row as any).supplier_name ?? null,\n    supplierCode: (row as any).supplier_code ?? null,\n    supplierPhone: (row as any).supplier_phone ?? null,\n    supplierEmail: (row as any).supplier_email ?? null,\n    expiryDate: (row as any).expiry_date ?? null,\n    gs1Status: (row as any).gs1_status ?? null,\n    batchStatus: (row as any).batch_status ?? null,\n    /** @deprecated */ total_stock: totalStock,\n    /** @deprecated */ available_stock: availableStock,\n    /** @deprecated */ reserved_stock: reservedStock,\n    /** @deprecated */ stock_status: determineStockStatus(\n      totalStock,\n      minimumStock ?? 0\n    ),\n    /** @deprecated */ reorder_level: minimumStock,\n    /** @deprecated */ supplier_id: (row as any).supplier_id ?? null,\n    /** @deprecated */ supplier_name: (row as any).supplier_name ?? null,\n    /** @deprecated */ supplier_code: (row as any).supplier_code ?? null,\n    /** @deprecated */ supplier_phone: (row as any).supplier_phone ?? null,\n    /** @deprecated */ supplier_email: (row as any).supplier_email ?? null,\n    /** @deprecated */ expiry_date: (row as any).expiry_date ?? null,\n    /** @deprecated */ gs1_status: (row as any).gs1_status ?? null,\n    /** @deprecated */ batch_status: (row as any).batch_status ?? null,\n  };\n\n  const rowAny = row as any;\n  const preferredSupplierId =\n    stockLevels[0]?.preferredSupplierId ?? rowAny.preferred_supplier_id ?? null;\n  const maximumStock =\n    rowAny.maximum_stock ?? stockLevels[0]?.maximumQuantity ?? null;\n\n  return {\n    id: row.id,\n    practiceId: rowAny.practice_id ?? row.id,\n    sku: row.sku,\n    name: row.name,\n    category: row.category ?? null,\n    brand: row.brand ?? null,\n    unit: row.unit ?? null,\n    totalStock,\n    availableStock,\n    reservedStock,\n    status: legacy.status,\n    reorderLevel: minimumStock,\n    unitPrice: rowAny.unit_price ?? null,\n    lowestPrice: rowAny.lowest_price ?? null,\n    supplier: rowAny.supplier_id\n      ? { id: rowAny.supplier_id, name: rowAny.supplier_name ?? null }\n      : null,\n    stockLevels,\n    supplierProducts,\n    batches: [],\n    description: row.description ?? null,\n    createdAt: row.created_at ?? null,\n    updatedAt: row.updated_at ?? null,\n    requiresBatchTracking: row.requires_batch_tracking ?? null,\n    productLifecycleStatus: row.product_lifecycle_status ?? null,\n    lifecycleStatus: row.product_lifecycle_status ?? null, // Alias\n    gpcBrickCode: row.gpc_brick_code ?? null,\n    countryOfOrigin: row.country_of_origin ?? null,\n    imageUrl: row.image_url ?? null,\n    barcode: row.barcode ?? null,\n    gtin: row.gtin ?? null,\n    baseUnitIndicator: row.base_unit_indicator ?? null,\n    orderableUnitIndicator: row.orderable_unit_indicator ?? null,\n    despatchUnitIndicator: row.despatch_unit_indicator ?? null,\n    effectiveFromDate: row.effective_from_date ?? null,\n    effectiveToDate: row.effective_to_date ?? null,\n    netContentValue: row.net_content_value ?? null,\n    netContentUom: row.net_content_uom ?? null,\n    netWeight: row.net_weight ?? null,\n    grossWeight: row.gross_weight ?? null,\n    preferredSupplierId,\n    minimumStock,\n    // Legacy snake_case aliases\n    stock_status: legacy.status,\n    minimum_stock: minimumStock,\n    maximum_stock: maximumStock,\n    legacy,\n    raw: row,\n  };\n};\n\nexport interface LocationSummary {\n  id: string;\n  name: string;\n}\n\nexport interface StockTransferRequest {\n  practice_id: string;\n  product_id: string;\n  from_location_id: string;\n  to_location_id: string;\n  quantity: number;\n  reason: string;\n  notes?: string;\n  batch_id?: string | null;\n}\n\nexport interface ProductBatchSummary {\n  id: string;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  urgency: ExpiryUrgencyLevel;\n}\n\nexport interface ProductCategory {\n  id: string;\n  name: string;\n  description?: string;\n  parent_id?: string;\n  sort_order: number;\n  is_active: boolean;\n}\n\nexport interface ProductFilter {\n  search?: string;\n  category?: string;\n  supplier?: string;\n  stock_status?: string;\n  sort_by?: 'name' | 'price' | 'stock' | 'category' | 'sku' | 'last_updated';\n  sort_order?: 'asc' | 'desc';\n\n  // GS1 Filters\n  gtin?: string;\n  country_of_origin?: string;\n  gpc_brick_code?: string;\n  lifecycle_status?: string;\n  orderable_only?: boolean;\n}\n\nexport interface CartItem {\n  product_id: string;\n  product: ProductRow;\n  quantity: number;\n  unit_price?: number;\n  supplier_id?: string;\n  notes?: string;\n}\n\nexport interface OrderListCart {\n  id?: string;\n  name: string;\n  supplier_id?: string;\n  items: CartItem[];\n  total_items: number;\n  estimated_total?: number;\n  notes?: string;\n}\n\n// Unified stock view interface for consolidated stock information\nexport interface UnifiedStockView {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n\n  // Product details\n  product_name: string;\n  product_sku: string;\n  product_category: string | null;\n  product_brand: string | null;\n  product_unit: string | null;\n  product_price: number | null;\n  requires_batch_tracking: boolean;\n\n  // Location details\n  location_name: string;\n  location_code: string;\n  location_type: string;\n\n  // Stock quantities\n  current_quantity: number;\n  reserved_quantity: number;\n  available_quantity: number;\n\n  // Stock status\n  stock_status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  minimum_quantity: number;\n  maximum_quantity: number | null;\n  reorder_point: number | null;\n  preferred_supplier_id: string | null;\n  last_counted_at: string | null;\n\n  // Tracking\n  last_movement_at: string;\n  stock_source: 'batch' | 'manual';\n  calculated_at: string;\n}\n\nexport interface CountingEntryDTO {\n  id: string;\n  session_id: string;\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  system_quantity: number;\n  counted_quantity: number;\n  variance: number;\n  confidence_level?: 'low' | 'medium' | 'high' | null;\n  counted_by: string | null;\n  counted_at: string | null;\n  verified_by: string | null;\n  verified_at: string | null;\n  notes: string | null;\n  batch_number: string | null;\n  expiry_date: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  status: 'discrepancy' | 'verified' | 'pending';\n  location_name?: string | null;\n  product_name?: string | null;\n  product_sku?: string | null;\n}\n\nexport const mapOrderListRowToDTO = (row: OrderListRow): OrderListDTO => ({\n  id: row.id,\n  practice_id: row.practice_id,\n  location_id: row.location_id,\n  supplier_id: row.supplier_id ?? null,\n  name: row.name,\n  description: row.description ?? null,\n  status: row.status ?? null,\n  total_items: row.total_items ?? 0,\n  total_cost: row.total_value ?? 0,\n  min_order_value: row.min_order_value ?? null,\n  created_at: row.created_at ?? null,\n  updated_at: row.updated_at ?? null,\n  created_by: row.created_by ?? null,\n  submitted_at: (row as { submitted_at?: string | null }).submitted_at ?? null,\n  submitted_by: (row as { submitted_by?: string | null }).submitted_by ?? null,\n  supplier: null,\n});\n\nexport const mapOrderListItemRowToDTO = (\n  row: OrderListItemRow\n): OrderListItemDTO => ({\n  id: row.id,\n  order_list_id: row.order_list_id,\n  product_id: row.product_id,\n  supplier_product_id: row.supplier_product_id ?? null,\n  suggested_quantity: row.suggested_quantity ?? 0,\n  ordered_quantity: row.ordered_quantity ?? 0,\n  unit_price: row.unit_price ?? null,\n  total_price: row.total_price ?? null,\n  status: row.status ?? null,\n  notes: row.notes ?? null,\n  created_at: row.created_at ?? null,\n  updated_at: (row as any).updated_at ?? null,\n  product: null,\n  supplier_product: null,\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\logging.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\magento.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 94,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 94,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1901, 1904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1901, 1904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2199, 2202], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2199, 2202], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Magento integration types\nexport interface MagentoConfig {\n  baseUrl: string;\n  adminToken: string;\n  token?: string; // Alias for adminToken, used by API service\n  storeId?: number;\n  storeCode?: string; // Store view code\n  timeout?: number;\n}\n\nexport interface MagentoOrder {\n  entity_id: number;\n  increment_id: string;\n  state: string;\n  status: string;\n  customer_email: string;\n  customer_firstname: string;\n  customer_lastname: string;\n  grand_total: number;\n  created_at: string;\n  updated_at: string;\n  items: MagentoOrderItem[];\n  billing_address: MagentoAddress;\n  shipping_address: MagentoAddress;\n  payment: MagentoPayment;\n}\n\nexport interface MagentoOrderItem {\n  item_id: number;\n  product_id: number;\n  sku: string;\n  name: string;\n  qty_ordered: number;\n  qty_shipped: number;\n  qty_invoiced: number;\n  price: number;\n  row_total: number;\n}\n\nexport interface MagentoAddress {\n  entity_id: number;\n  firstname: string;\n  lastname: string;\n  street: string[];\n  city: string;\n  region: string;\n  postcode: string;\n  country_id: string;\n  telephone: string;\n  email?: string;\n}\n\nexport interface MagentoPayment {\n  method: string;\n  amount_ordered: number;\n  amount_paid: number;\n  base_amount_ordered: number;\n  base_amount_paid: number;\n}\n\nexport interface MagentoInvoice {\n  entity_id: number;\n  order_id: number;\n  increment_id: string;\n  state: number;\n  grand_total: number;\n  created_at: string;\n  items: MagentoInvoiceItem[];\n}\n\nexport interface MagentoInvoiceItem {\n  entity_id: number;\n  sku: string;\n  name: string;\n  qty: number;\n  price: number;\n  row_total: number;\n}\n\nexport interface MagentoProduct {\n  id: number;\n  sku: string;\n  name: string;\n  price: number;\n  status: number;\n  visibility: number;\n  type_id: string;\n  weight: number;\n  custom_attributes: MagentoCustomAttribute[];\n}\n\nexport interface MagentoCustomAttribute {\n  attribute_code: string;\n  value: any;\n}\n\nexport interface MagentoSearchCriteria {\n  filterGroups: MagentoFilterGroup[];\n  sortOrders?: MagentoSortOrder[];\n  pageSize?: number;\n  currentPage?: number;\n}\n\nexport interface MagentoFilterGroup {\n  filters: MagentoFilter[];\n}\n\nexport interface MagentoFilter {\n  field: string;\n  value: any;\n  condition_type: string;\n}\n\nexport interface MagentoSortOrder {\n  field: string;\n  direction: 'ASC' | 'DESC';\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\network.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\offline.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\permissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [497, 500], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [497, 500], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// User roles and permissions types\nexport type UserRole =\n  | 'owner'\n  | 'manager'\n  | 'assistant'\n  | 'logistics'\n  | 'member'\n  | 'guest'\n  | 'platform_owner';\nexport type PermissionType = 'read' | 'write' | 'admin';\nexport type ResourceType =\n  | 'products'\n  | 'inventory'\n  | 'orders'\n  | 'analytics'\n  | 'users'\n  | 'practice'\n  | 'all';\n\nexport interface Permission {\n  permission_type: PermissionType;\n  resource_type: ResourceType;\n  resource_id?: string;\n  conditions?: Record<string, any>;\n  source: 'role' | 'user';\n}\n\nexport interface RoleDefinition {\n  role: UserRole;\n  displayName: string;\n  description: string;\n  permissions: Permission[];\n}\n\nexport interface PermissionCheck {\n  permission_type: PermissionType;\n  resource_type: ResourceType;\n  resource_id?: string;\n  practice_id?: string;\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\scanner.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\stores.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\supplier.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\ui.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\validation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [115, 118], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [115, 118], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [179, 182], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [179, 182], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Form validation types\nimport type { Ref, ComputedRef } from 'vue';\n\nexport interface ValidationRule {\n  (value: any): boolean | string;\n}\n\nexport interface FieldValidation<T = any> {\n  value: Ref<T>;\n  rules: ValidationRule[];\n  error: Ref<string>;\n  isValid: ComputedRef<boolean>;\n  validate: () => boolean;\n  clear: () => void;\n  // Deprecated properties (kept for backward compatibility)\n  message?: string;\n  required?: boolean;\n  immediate?: boolean;\n}\n\nexport interface FormValidationState {\n  valid: boolean;\n  errors: Record<string, string[]>;\n  touched: Record<string, boolean>;\n}\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: string[];\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\array.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\batch-helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 326,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 326,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8107, 8110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8107, 8110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 326,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 326,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8140, 8143], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8140, 8143], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 327,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 327,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8216, 8219], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8216, 8219], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 327,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 327,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8249, 8252], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8249, 8252], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { ProductBatchWithDetails } from 'src/types/inventory';\n\n/**\n * Batch validation and formatting utilities\n */\n\nexport interface BatchValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\nexport interface BatchUrgencyInfo {\n  level: 'normal' | 'low' | 'warning' | 'high' | 'critical' | 'expired';\n  daysUntilExpiry: number;\n  color: string;\n  icon: string;\n  message: string;\n}\n\n/**\n * Validates batch number format\n */\nexport const validateBatchNumber = (\n  batchNumber: string\n): BatchValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!batchNumber || batchNumber.trim().length === 0) {\n    errors.push('Batchnummer is verplicht');\n  } else {\n    const trimmed = batchNumber.trim();\n\n    // Check minimum length\n    if (trimmed.length < 3) {\n      errors.push('Batchnummer moet minimaal 3 karakters bevatten');\n    }\n\n    // Check maximum length\n    if (trimmed.length > 50) {\n      errors.push('Batchnummer mag maximaal 50 karakters bevatten');\n    }\n\n    // Check for invalid characters (allow alphanumeric, hyphens, underscores)\n    const validPattern = /^[a-zA-Z0-9\\-_]+$/;\n    if (!validPattern.test(trimmed)) {\n      errors.push(\n        'Batchnummer mag alleen letters, cijfers, streepjes en underscores bevatten'\n      );\n    }\n\n    // Check for common format patterns and warn if unusual\n    const commonPatterns = [\n      /^\\d{4,}$/, // All numbers\n      /^[A-Z]{2,}\\d{2,}$/, // Letters followed by numbers\n      /^\\d{2,}[A-Z]{2,}$/, // Numbers followed by letters\n      /^[A-Z]\\d+-[A-Z]\\d+$/, // Letter-number-dash-letter-number\n    ];\n\n    const matchesCommonPattern = commonPatterns.some(pattern =>\n      pattern.test(trimmed)\n    );\n    if (!matchesCommonPattern) {\n      warnings.push('Batchnummer heeft een ongebruikelijk formaat');\n    }\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validates expiry date\n */\nexport const validateExpiryDate = (\n  expiryDate: string | Date\n): BatchValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (!expiryDate) {\n    errors.push('Vervaldatum is verplicht');\n    return { isValid: false, errors, warnings };\n  }\n\n  const date =\n    typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  // Check if date is valid\n  if (isNaN(date.getTime())) {\n    errors.push('Ongeldige vervaldatum');\n    return { isValid: false, errors, warnings };\n  }\n\n  // Check if date is in the past\n  if (date < today) {\n    errors.push('Vervaldatum kan niet in het verleden liggen');\n  }\n\n  // Check if date is too far in the future (more than 10 years)\n  const maxDate = new Date(today);\n  maxDate.setFullYear(maxDate.getFullYear() + 10);\n  if (date > maxDate) {\n    warnings.push('Vervaldatum is erg ver in de toekomst');\n  }\n\n  // Check if date is very soon (within 30 days)\n  const thirtyDaysFromNow = new Date(today);\n  thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n  if (date <= thirtyDaysFromNow && date >= today) {\n    warnings.push('Vervaldatum is binnen 30 dagen');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Validates batch quantity\n */\nexport const validateBatchQuantity = (\n  quantity: number,\n  allowZero: boolean = false\n): BatchValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  if (quantity === null || quantity === undefined) {\n    errors.push('Hoeveelheid is verplicht');\n    return { isValid: false, errors, warnings };\n  }\n\n  if (isNaN(quantity)) {\n    errors.push('Hoeveelheid moet een geldig getal zijn');\n    return { isValid: false, errors, warnings };\n  }\n\n  if (!allowZero && quantity <= 0) {\n    errors.push('Hoeveelheid moet groter zijn dan 0');\n  } else if (allowZero && quantity < 0) {\n    errors.push('Hoeveelheid mag niet negatief zijn');\n  }\n\n  // Check for very large quantities\n  if (quantity > 999999) {\n    warnings.push('Zeer grote hoeveelheid gedetecteerd');\n  }\n\n  // Check for decimal places in what should be whole numbers\n  if (quantity % 1 !== 0 && quantity < 100) {\n    warnings.push(\n      'Fractionele hoeveelheden kunnen ongewenst zijn voor dit product'\n    );\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n\n/**\n * Calculates batch urgency information based on expiry date\n */\nexport const calculateBatchUrgency = (\n  expiryDate: string | Date\n): BatchUrgencyInfo => {\n  const date =\n    typeof expiryDate === 'string' ? new Date(expiryDate) : expiryDate;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const daysUntilExpiry = Math.ceil(\n    (date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\n  );\n\n  if (daysUntilExpiry < 0) {\n    return {\n      level: 'expired',\n      daysUntilExpiry,\n      color: 'negative',\n      icon: 'error',\n      message: 'Verlopen',\n    };\n  }\n\n  if (daysUntilExpiry === 0) {\n    return {\n      level: 'critical',\n      daysUntilExpiry,\n      color: 'negative',\n      icon: 'warning',\n      message: 'Verloopt vandaag',\n    };\n  }\n\n  if (daysUntilExpiry <= 7) {\n    return {\n      level: 'critical',\n      daysUntilExpiry,\n      color: 'negative',\n      icon: 'warning',\n      message: `Verloopt over ${daysUntilExpiry} dag${\n        daysUntilExpiry > 1 ? 'en' : ''\n      }`,\n    };\n  }\n\n  if (daysUntilExpiry <= 14) {\n    return {\n      level: 'high',\n      daysUntilExpiry,\n      color: 'warning',\n      icon: 'schedule',\n      message: `Verloopt over ${daysUntilExpiry} dagen`,\n    };\n  }\n\n  if (daysUntilExpiry <= 30) {\n    return {\n      level: 'warning',\n      daysUntilExpiry,\n      color: 'orange',\n      icon: 'schedule',\n      message: `Verloopt over ${daysUntilExpiry} dagen`,\n    };\n  }\n\n  if (daysUntilExpiry <= 90) {\n    return {\n      level: 'low',\n      daysUntilExpiry,\n      color: 'info',\n      icon: 'info',\n      message: `Verloopt over ${daysUntilExpiry} dagen`,\n    };\n  }\n\n  return {\n    level: 'normal',\n    daysUntilExpiry,\n    color: 'positive',\n    icon: 'check_circle',\n    message: `Verloopt over ${daysUntilExpiry} dagen`,\n  };\n};\n\n/**\n * Formats batch number for display\n */\nexport const formatBatchNumber = (\n  batchNumber: string,\n  maxLength?: number\n): string => {\n  if (!batchNumber) return '-';\n\n  const trimmed = batchNumber.trim().toUpperCase();\n\n  if (maxLength && trimmed.length > maxLength) {\n    return trimmed.substring(0, maxLength - 3) + '...';\n  }\n\n  return trimmed;\n};\n\n/**\n * Formats batch quantity with unit\n */\nexport const formatBatchQuantity = (quantity: number, unit: string): string => {\n  if (quantity === null || quantity === undefined) return '-';\n\n  // Format with appropriate decimal places\n  let formattedQuantity: string;\n  if (quantity % 1 === 0) {\n    formattedQuantity = quantity.toString();\n  } else if (quantity < 10) {\n    formattedQuantity = quantity.toFixed(2);\n  } else {\n    formattedQuantity = quantity.toFixed(1);\n  }\n\n  return `${formattedQuantity} ${unit || ''}`.trim();\n};\n\n/**\n * Generates a suggested batch number based on product info and date\n */\nexport const generateSuggestedBatchNumber = (\n  productSku: string,\n  date?: Date\n): string => {\n  const now = date || new Date();\n  const year = now.getFullYear().toString().slice(-2);\n  const month = (now.getMonth() + 1).toString().padStart(2, '0');\n  const day = now.getDate().toString().padStart(2, '0');\n\n  // Take first 3 characters of SKU if available\n  const skuPrefix = productSku ? productSku.slice(0, 3).toUpperCase() : 'BAT';\n\n  return `${skuPrefix}${year}${month}${day}`;\n};\n\n/**\n * Sorts batches by FIFO order (first to expire first)\n */\nexport const sortBatchesFIFO = (\n  batches: ProductBatchWithDetails[]\n): ProductBatchWithDetails[] => {\n  return [...batches].sort((a, b) => {\n    // First by expiry date\n    const dateComparison =\n      new Date(a.expiry_date).getTime() - new Date(b.expiry_date).getTime();\n    if (dateComparison !== 0) return dateComparison;\n\n    // Then by received date (older first)\n    const receivedA = new Date((a.raw as any)?.received_date ?? (a.raw as any)?.created_at ?? '').getTime();\n    const receivedB = new Date((b.raw as any)?.received_date ?? (b.raw as any)?.created_at ?? '').getTime();\n    return receivedA - receivedB;\n  });\n};\n\n/**\n * Filters batches by urgency level\n */\nexport const filterBatchesByUrgency = (\n  batches: ProductBatchWithDetails[],\n  urgencyLevels: BatchUrgencyInfo['level'][]\n): ProductBatchWithDetails[] => {\n  return batches.filter(batch => {\n    const urgency = calculateBatchUrgency(batch.expiry_date);\n    return urgencyLevels.includes(urgency.level);\n  });\n};\n\n/**\n * Checks if two batch numbers are similar (for duplicate detection)\n */\nexport const areBatchNumbersSimilar = (\n  batchNumber1: string,\n  batchNumber2: string\n): boolean => {\n  if (!batchNumber1 || !batchNumber2) return false;\n\n  const clean1 = batchNumber1.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n  const clean2 = batchNumber2.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n  // Exact match\n  if (clean1 === clean2) return true;\n\n  // Very similar (one character difference)\n  if (Math.abs(clean1.length - clean2.length) <= 1) {\n    let differences = 0;\n    const maxLength = Math.max(clean1.length, clean2.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      if (clean1[i] !== clean2[i]) {\n        differences++;\n        if (differences > 1) return false;\n      }\n    }\n\n    return differences <= 1;\n  }\n\n  return false;\n};\n\n/**\n * Validates complete batch data\n */\nexport const validateBatchData = (batchData: {\n  batchNumber: string;\n  expiryDate: string | Date;\n  quantity: number;\n  allowZeroQuantity?: boolean;\n}): BatchValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Validate batch number\n  const batchNumberValidation = validateBatchNumber(batchData.batchNumber);\n  errors.push(...batchNumberValidation.errors);\n  warnings.push(...batchNumberValidation.warnings);\n\n  // Validate expiry date\n  const expiryValidation = validateExpiryDate(batchData.expiryDate);\n  errors.push(...expiryValidation.errors);\n  warnings.push(...expiryValidation.warnings);\n\n  // Validate quantity\n  const quantityValidation = validateBatchQuantity(\n    batchData.quantity,\n    batchData.allowZeroQuantity\n  );\n  errors.push(...quantityValidation.errors);\n  warnings.push(...quantityValidation.warnings);\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n};\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\date.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\error-handler.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LogData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Notify } from 'quasar';\nimport type { AppError, LogData } from '@/types/logging';\n\nexport class ErrorHandler {\n  static handle(error: Error | AppError, context?: string): void {\n    const appError = this.normalizeError(error, context);\n\n    console.error(\n      `[${appError.context ?? 'Unknown'}]`,\n      appError.originalError ?? appError\n    );\n\n    Notify.create({\n      type: 'negative',\n      message: appError.message,\n      position: 'top',\n      timeout: 5000,\n      actions: [\n        {\n          icon: 'close',\n          color: 'white',\n          round: true,\n          handler: () => {\n            /* dismiss */\n          },\n        },\n      ],\n    });\n  }\n\n  static normalizeError(error: Error | AppError, context?: string): AppError {\n    if (\n      'message' in error &&\n      typeof error.message === 'string' &&\n      !('stack' in error)\n    ) {\n      const appError = error as AppError;\n      return {\n        ...appError,\n        context: context ?? appError.context ?? 'Unknown',\n      };\n    }\n\n    return {\n      message: this.getErrorMessage(error as Error),\n      context: context ?? 'Unknown',\n      originalError: error as Error,\n      timestamp: new Date(),\n    };\n  }\n\n  static getErrorMessage(error: Error): string {\n    if (error.message.includes('JWT')) {\n      return 'Je sessie is verlopen. Log opnieuw in.';\n    }\n\n    if (error.message.includes('duplicate key')) {\n      return 'Dit item bestaat al.';\n    }\n\n    if (error.message.includes('foreign key')) {\n      return 'Dit item kan niet worden verwijderd omdat het in gebruik is.';\n    }\n\n    if (error.message.includes('not found')) {\n      return 'Het opgevraagde item werd niet gevonden.';\n    }\n\n    return error.message || 'Er is een onbekende fout opgetreden.';\n  }\n}\n\nexport function useErrorHandler() {\n  return {\n    handleError: (error: Error | AppError, context?: string) =>\n      ErrorHandler.handle(error, context),\n    getErrorMessage: (error: Error) => ErrorHandler.getErrorMessage(error),\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\eventBus.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\i18n-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\logger.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2298, 2301], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2298, 2301], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Production-ready logging utility\n * Replaces console.log statements with environment-aware logging\n */\n\nimport type { LogLevel, LogData } from '@/types/logging';\n\nclass Logger {\n  private isDevelopment = import.meta.env.DEV;\n  private isProduction = import.meta.env.PROD;\n\n  debug(message: string, context?: string, data?: LogData): void {\n    if (this.isDevelopment) {\n      console.debug(\n        `[DEBUG${context ? ` ${context}` : ''}]`,\n        message,\n        data ?? ''\n      );\n    }\n  }\n\n  info(message: string, context?: string, data?: LogData): void {\n    if (this.isDevelopment) {\n      console.info(\n        `[INFO${context ? ` ${context}` : ''}]`,\n        message,\n        data ?? ''\n      );\n    }\n\n    this.sendToMonitoring('info', message, context, data);\n  }\n\n  warn(message: string, context?: string, data?: LogData): void {\n    console.warn(`[WARN${context ? ` ${context}` : ''}]`, message, data ?? '');\n    this.sendToMonitoring('warn', message, context, data);\n  }\n\n  error(message: string, context?: string, error?: Error | LogData): void {\n    console.error(\n      `[ERROR${context ? ` ${context}` : ''}]`,\n      message,\n      error ?? ''\n    );\n    this.sendToMonitoring('error', message, context, error ?? undefined);\n  }\n\n  private sendToMonitoring(\n    _level: LogLevel,\n    _message: string,\n    _context?: string,\n    _data?: LogData\n  ): void {\n    if (!this.isProduction) {\n      return;\n    }\n  }\n\n  createContext(context: string) {\n    const warn = (message: string, data?: LogData) =>\n      this.warn(message, context, data);\n    const info = (message: string, data?: LogData) =>\n      this.info(message, context, data);\n    const debug = (message: string, data?: LogData) =>\n      this.debug(message, context, data);\n    const error = (message: string, error?: Error | LogData) =>\n      this.error(message, context, error);\n\n    const structured = (message: string, data?: Record<string, unknown>) =>\n      this.info(message, context, data);\n\n    return { debug, info, warn, error, structured };\n  }\n}\n\n/**\n * Convert unknown values to LogData format\n * Safely handles Error objects, unknown types, and complex objects\n */\nexport function toLogData(value: unknown): Record<string, unknown> {\n  if (value instanceof Error) {\n    const errorAny = value as any;\n    return {\n      name: value.name,\n      message: value.message,\n      stack: value.stack,\n      ...(errorAny.cause && { cause: String(errorAny.cause) }),\n    };\n  }\n\n  if (typeof value === 'object' && value !== null) {\n    // Already an object, just cast it\n    return value as Record<string, unknown>;\n  }\n\n  // Primitive or null/undefined\n  return { value: String(value) };\n}\n\n// Export singleton instance\nexport const logger = new Logger();\n\n// Export contextual loggers for common modules\nexport const authLogger = logger.createContext('AUTH');\nexport const apiLogger = logger.createContext('API');\nexport const routerLogger = logger.createContext('ROUTER');\nexport const serviceWorkerLogger = logger.createContext('SW');\n\n// Store loggers\nexport const productLogger = logger.createContext('PRODUCTS');\nexport const inventoryLogger = logger.createContext('INVENTORY');\nexport const orderLogger = logger.createContext('ORDERS');\nexport const supplierLogger = logger.createContext('SUPPLIERS');\nexport const countingLogger = logger.createContext('COUNTING');\nexport const batchLogger = logger.createContext('BATCH');\nexport const clinicLogger = logger.createContext('CLINIC');\n\n// Service loggers\nexport const analyticsLogger = logger.createContext('ANALYTICS');\nexport const dashboardLogger = logger.createContext('DASHBOARD');\nexport const magentoLogger = logger.createContext('MAGENTO');\nexport const offlineLogger = logger.createContext('OFFLINE');\nexport const notificationLogger = logger.createContext('NOTIFICATIONS');\n\n// Export helper for creating contextual loggers on demand\nexport const createLogger = (context: string) => logger.createContext(context);\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\service-error-handler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\viewmodels\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  }
]
