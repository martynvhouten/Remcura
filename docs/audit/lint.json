[
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\App.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\i18n.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\pinia.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\supabase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\boot\\theme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BarcodeScanner.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"position\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 24,
        "fix": {
          "range": [60, 141],
          "text": "position=\"standard\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"persistent\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 15,
        "fix": {
          "range": [60, 157],
          "text": "persistent\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    position=\"standard\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"maximized\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 14,
        "fix": {
          "range": [60, 172],
          "text": "maximized\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    position=\"standard\"\r\n    persistent"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"transition-show\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 31,
        "fix": {
          "range": [60, 204],
          "text": "transition-show=\"slide-up\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    position=\"standard\"\r\n    persistent\r\n    maximized"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"transition-hide\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 33,
        "fix": {
          "range": [60, 238],
          "text": "transition-hide=\"slide-down\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    position=\"standard\"\r\n    persistent\r\n    maximized\r\n    transition-show=\"slide-up\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 38,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 38,
        "endColumn": 40,
        "fix": { "range": [1042, 1104], "text": ":title=\"$t('common.close')\"\r\n            @click=\"closeScanner\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 65,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 65,
        "endColumn": 38,
        "fix": {
          "range": [1968, 2032],
          "text": ":loading=\"initializing\"\r\n              @click=\"initializeCamera\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 82,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 82,
        "endColumn": 38,
        "fix": {
          "range": [2587, 2651],
          "text": ":loading=\"initializing\"\r\n              @click=\"initializeCamera\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@keyup.enter\".",
        "line": 151,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 151,
        "endColumn": 32,
        "fix": {
          "range": [4977, 5043],
          "text": "class=\"q-mb-md\"\r\n                @keyup.enter=\"processManualInput\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 161,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 161,
        "endColumn": 44,
        "fix": {
          "range": [5294, 5366],
          "text": ":disable=\"!manualInput\"\r\n                    @click=\"processManualInput\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 179,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 179,
        "endColumn": 28,
        "fix": { "range": [5835, 5885], "text": "class=\"q-mr-auto\"\r\n          @click=\"closeScanner\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 188,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 188,
        "endColumn": 38,
        "fix": { "range": [6064, 6124], "text": ":disable=\"!canSwitchCamera\"\r\n          @click=\"switchCamera\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 189,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 189,
        "endColumn": 26,
        "fix": {
          "range": [6064, 6151],
          "text": "class=\"q-mr-sm\"\r\n          @click=\"switchCamera\"\r\n          :disable=\"!canSwitchCamera\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 198,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 198,
        "endColumn": 31,
        "fix": { "range": [6351, 6403], "text": ":disable=\"!hasFlash\"\r\n          @click=\"toggleFlash\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 286,
        "column": 24,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 286,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 306,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 306,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9339, 9342], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9339, 9342], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 338,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 338,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10355, 10358], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10355, 10358], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 351,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 351,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10710, 10713], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10710, 10713], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 429,
        "column": 48,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 429,
        "endColumn": 67
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 430,
        "column": 32,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 430,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [12875, 12876], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 504,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 504,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14728, 14731], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14728, 14731], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 14,
    "source": "<template>\r\n  <q-dialog\r\n    :model-value=\"modelValue\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    position=\"standard\"\r\n    persistent\r\n    maximized\r\n    transition-show=\"slide-up\"\r\n    transition-hide=\"slide-down\"\r\n  >\r\n    <q-card class=\"scanner-card\">\r\n      <!-- Header -->\r\n      <q-card-section class=\"scanner-header\">\r\n        <div class=\"header-content\">\r\n          <div class=\"title-section\">\r\n            <q-icon\r\n              name=\"qr_code_scanner\"\r\n              size=\"md\"\r\n              color=\"white\"\r\n              class=\"q-mr-sm\"\r\n            />\r\n            <div>\r\n              <div class=\"text-h6 text-white\">\r\n                {{ $t('barcodeScanner.title') }}\r\n              </div>\r\n              <div class=\"text-caption text-white opacity-80\">\r\n                {{ $t('barcodeScanner.subtitle') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <q-btn\r\n            flat\r\n            round\r\n            dense\r\n            icon=\"close\"\r\n            color=\"white\"\r\n            @click=\"closeScanner\"\r\n            :title=\"$t('common.close')\"\r\n          />\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Camera Section -->\r\n      <q-card-section class=\"scanner-body\">\r\n        <!-- Camera Preview -->\r\n        <div class=\"camera-container\">\r\n          <div v-if=\"!cameraPermission\" class=\"permission-prompt\">\r\n            <q-icon\r\n              name=\"camera_alt\"\r\n              size=\"4rem\"\r\n              color=\"grey-5\"\r\n              class=\"q-mb-md\"\r\n            />\r\n            <div class=\"text-h6 q-mb-sm\">\r\n              {{ $t('barcodeScanner.cameraPermission') }}\r\n            </div>\r\n            <div class=\"text-body2 text-grey-6 q-mb-lg text-center\">\r\n              {{ $t('barcodeScanner.permissionDescription') }}\r\n            </div>\r\n            <q-btn\r\n              color=\"primary\"\r\n              icon=\"camera_alt\"\r\n              ::label=\"$t('barcodeScanner.scanLabel')\"\r\n              @click=\"initializeCamera\"\r\n              :loading=\"initializing\"\r\n            />\r\n          </div>\r\n\r\n          <div v-else-if=\"error\" class=\"error-state\">\r\n            <q-icon name=\"error\" size=\"4rem\" color=\"negative\" class=\"q-mb-md\" />\r\n            <div class=\"text-h6 q-mb-sm text-negative\">\r\n              {{ $t('barcodeScanner.error') }}\r\n            </div>\r\n            <div class=\"text-body2 text-grey-6 q-mb-lg text-center\">\r\n              {{ error }}\r\n            </div>\r\n            <q-btn\r\n              color=\"primary\"\r\n              icon=\"refresh\"\r\n              :label=\"$t('common.retry')\"\r\n              @click=\"initializeCamera\"\r\n              :loading=\"initializing\"\r\n            />\r\n          </div>\r\n\r\n          <div v-else class=\"camera-view\">\r\n            <!-- Video Element -->\r\n            <video\r\n              ref=\"videoElement\"\r\n              autoplay\r\n              playsinline\r\n              muted\r\n              class=\"camera-video\"\r\n              :class=\"{ 'camera-active': cameraActive }\"\r\n            />\r\n\r\n            <!-- Scanning Overlay -->\r\n            <div class=\"scanning-overlay\">\r\n              <!-- Scanning Frame -->\r\n              <div class=\"scan-frame\">\r\n                <div class=\"scan-corners\">\r\n                  <div class=\"corner corner-tl\"></div>\r\n                  <div class=\"corner corner-tr\"></div>\r\n                  <div class=\"corner corner-bl\"></div>\r\n                  <div class=\"corner corner-br\"></div>\r\n                </div>\r\n                <div v-if=\"scanning\" class=\"scan-line\"></div>\r\n              </div>\r\n\r\n              <!-- Instructions -->\r\n              <div class=\"scan-instructions\">\r\n                <div class=\"instruction-text\">\r\n                  {{\r\n                    scanning\r\n                      ? $t('barcodeScanner.scanning')\r\n                      : $t('barcodeScanner.instructions')\r\n                  }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Results -->\r\n            <div v-if=\"lastScanResult\" class=\"scan-result\">\r\n              <q-chip\r\n                :color=\"lastScanResult.valid ? 'positive' : 'warning'\"\r\n                :text-color=\"lastScanResult.valid ? 'white' : 'dark'\"\r\n                :icon=\"lastScanResult.valid ? 'check' : 'warning'\"\r\n                ::label=\"$t('barcodeScanner.scanLabel')\"\r\n                size=\"lg\"\r\n                class=\"result-chip\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Manual Input Section -->\r\n        <div class=\"manual-input-section\">\r\n          <q-expansion-item\r\n            icon=\"keyboard\"\r\n            ::label=\"$t('barcodeScanner.scanLabel')\"\r\n            class=\"manual-input-expander\"\r\n          >\r\n            <div class=\"manual-input-content\">\r\n              <q-input\r\n                v-model=\"manualInput\"\r\n                :placeholder=\"$t('barcodeScanner.enterBarcode')\"\r\n                outlined\r\n                dense\r\n                clearable\r\n                @keyup.enter=\"processManualInput\"\r\n                class=\"q-mb-md\"\r\n              >\r\n                <template #append>\r\n                  <q-btn\r\n                    flat\r\n                    dense\r\n                    round\r\n                    icon=\"send\"\r\n                    color=\"primary\"\r\n                    @click=\"processManualInput\"\r\n                    :disable=\"!manualInput\"\r\n                  />\r\n                </template>\r\n              </q-input>\r\n              <div class=\"text-caption text-grey-6\">\r\n                {{ $t('barcodeScanner.manualInputHelp') }}\r\n              </div>\r\n            </div>\r\n          </q-expansion-item>\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Footer Actions -->\r\n      <q-card-actions class=\"scanner-footer\">\r\n        <q-btn\r\n          flat\r\n          :label=\"$t('common.cancel')\"\r\n          @click=\"closeScanner\"\r\n          class=\"q-mr-auto\"\r\n        />\r\n\r\n        <q-btn\r\n          v-if=\"cameraActive\"\r\n          flat\r\n          icon=\"flip_camera_android\"\r\n          ::label=\"$t('barcodeScanner.scanLabel')\"\r\n          @click=\"switchCamera\"\r\n          :disable=\"!canSwitchCamera\"\r\n          class=\"q-mr-sm\"\r\n        />\r\n\r\n        <q-btn\r\n          v-if=\"cameraActive\"\r\n          flat\r\n          :icon=\"flashEnabled ? 'flash_off' : 'flash_on'\"\r\n          ::label=\"$t('barcodeScanner.scanLabel')\"\r\n          @click=\"toggleFlash\"\r\n          :disable=\"!hasFlash\"\r\n        />\r\n      </q-card-actions>\r\n    </q-card>\r\n  </q-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, onMounted, onUnmounted, watch, nextTick } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n\r\n  // Types\r\n  interface ScanResult {\r\n    code: string;\r\n    valid: boolean;\r\n    format?: string | undefined;\r\n  }\r\n\r\n  interface BarcodeDetector {\r\n    detect(imageSource: ImageBitmapSource): Promise<DetectedBarcode[]>;\r\n  }\r\n\r\n  interface DetectedBarcode {\r\n    rawValue: string;\r\n    format: string;\r\n    boundingBox: DOMRectReadOnly;\r\n    cornerPoints: { x: number; y: number }[];\r\n  }\r\n\r\n  // Props & Emits\r\n  const props = defineProps<{\r\n    modelValue: boolean;\r\n  }>();\r\n\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    scan: [code: string];\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n\r\n  // State\r\n  const videoElement = ref<HTMLVideoElement | null>(null);\r\n  const cameraPermission = ref(false);\r\n  const cameraActive = ref(false);\r\n  const scanning = ref(false);\r\n  const initializing = ref(false);\r\n  const error = ref<string | null>(null);\r\n  const currentStream = ref<MediaStream | null>(null);\r\n  const scanInterval = ref<number | null>(null);\r\n  const lastScanResult = ref<ScanResult | null>(null);\r\n  const manualInput = ref('');\r\n\r\n  // Camera capabilities\r\n  const canSwitchCamera = ref(false);\r\n  const hasFlash = ref(false);\r\n  const flashEnabled = ref(false);\r\n  const currentFacingMode = ref<'user' | 'environment'>('environment');\r\n\r\n  // Barcode detector\r\n  let barcodeDetector: BarcodeDetector | null = null;\r\n\r\n  // GTIN Validation\r\n  const isValidGTIN = (code: string): boolean => {\r\n    if (!code) {\r\n      return false;\r\n    }\r\n    const cleanCode = code.trim().replace(/\\D/g, '');\r\n\r\n    // GTIN can be 8, 12, 13, or 14 digits\r\n    const gtinRegex = /^(\\d{8}|\\d{12}|\\d{13}|\\d{14})$/;\r\n    if (!gtinRegex.test(cleanCode)) {\r\n      return false;\r\n    }\r\n\r\n    // Check digit validation for GTIN-13 and GTIN-14\r\n    if (cleanCode.length === 13 || cleanCode.length === 14) {\r\n      return validateGTINCheckDigit(cleanCode);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const validateGTINCheckDigit = (gtin: string): boolean => {\r\n    const digits = gtin.split('').map(Number);\r\n    const checkDigit = digits.pop()!;\r\n\r\n    let sum = 0;\r\n    for (let i = 0; i < digits.length; i++) {\r\n      const weight = (digits.length - i) % 2 === 0 ? 1 : 3;\r\n      sum += digits[i] * weight;\r\n    }\r\n\r\n    const calculatedCheckDigit = (10 - (sum % 10)) % 10;\r\n    return calculatedCheckDigit === checkDigit;\r\n  };\r\n\r\n  // Camera initialization\r\n  const initializeCamera = async () => {\r\n    initializing.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      // Check if BarcodeDetector is supported\r\n      if ('BarcodeDetector' in window) {\r\n        const BarcodeDetectorClass = (window as any).BarcodeDetector;\r\n        const formats = await BarcodeDetectorClass?.getSupportedFormats();\r\n        if (formats.includes('ean_13') || formats.includes('code_128')) {\r\n          barcodeDetector = new BarcodeDetectorClass({\r\n            formats: [\r\n              'ean_8',\r\n              'ean_13',\r\n              'code_128',\r\n              'code_39',\r\n              'upc_a',\r\n              'upc_e',\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      // Request camera permission\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          facingMode: currentFacingMode.value,\r\n          width: { ideal: 1280 },\r\n          height: { ideal: 720 },\r\n        },\r\n      });\r\n\r\n      currentStream.value = stream;\r\n      cameraPermission.value = true;\r\n\r\n      // Check camera capabilities\r\n      const videoTrack = stream.getVideoTracks()[0];\r\n      if (videoTrack) {\r\n        const capabilities = videoTrack.getCapabilities();\r\n        hasFlash.value = !!(capabilities as any).torch;\r\n      }\r\n\r\n      canSwitchCamera.value = await checkMultipleCameras();\r\n\r\n      // Set up video element\r\n      await nextTick();\r\n      if (videoElement.value) {\r\n        videoElement.value.srcObject = stream;\r\n        await videoElement.value.play();\r\n        cameraActive.value = true;\r\n        startScanning();\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Camera initialization failed:', err);\r\n      error.value =\r\n        err.name === 'NotAllowedError'\r\n          ? t('barcodeScanner.permissionDenied')\r\n          : err.name === 'NotFoundError'\r\n            ? t('barcodeScanner.noCameraFound')\r\n            : t('barcodeScanner.cameraError');\r\n    } finally {\r\n      initializing.value = false;\r\n    }\r\n  };\r\n\r\n  const checkMultipleCameras = async (): Promise<boolean> => {\r\n    try {\r\n      const devices = await navigator.mediaDevices.enumerateDevices();\r\n      const videoDevices = devices.filter(\r\n        device => device.kind === 'videoinput'\r\n      );\r\n      return videoDevices.length > 1;\r\n    } catch {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const startScanning = () => {\r\n    if (!cameraActive.value || scanning.value) {\r\n      return;\r\n    }\r\n\r\n    scanning.value = true;\r\n\r\n    scanInterval.value = window.setInterval(async () => {\r\n      if (!videoElement.value || !cameraActive.value) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        await scanFrame();\r\n      } catch (err) {\r\n        console.warn('Scan frame error:', err);\r\n      }\r\n    }, 250); // Scan every 250ms\r\n  };\r\n\r\n  const scanFrame = async () => {\r\n    if (\r\n      !videoElement.value ||\r\n      !barcodeDetector ||\r\n      !videoElement.value.videoWidth\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create canvas to capture frame\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) {\r\n        return;\r\n      }\r\n\r\n      canvas.width = videoElement.value.videoWidth;\r\n      canvas.height = videoElement.value.videoHeight;\r\n      ctx.drawImage(videoElement.value, 0, 0);\r\n\r\n      // Detect barcodes\r\n      const barcodes = await barcodeDetector.detect(canvas);\r\n\r\n      if (barcodes.length > 0) {\r\n        const barcode = barcodes[0];\r\n        if (barcode) {\r\n          processScanResult(barcode.rawValue, barcode.format);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      // Fallback: try image bitmap approach\r\n      try {\r\n        const bitmap = await createImageBitmap(videoElement.value!);\r\n        const barcodes = await barcodeDetector!.detect(bitmap);\r\n\r\n        if (barcodes.length > 0) {\r\n          const barcode = barcodes[0];\r\n          if (barcode) {\r\n            processScanResult(barcode.rawValue, barcode.format);\r\n          }\r\n        }\r\n      } catch (fallbackErr) {\r\n        console.warn('Barcode detection failed:', fallbackErr);\r\n      }\r\n    }\r\n  };\r\n\r\n  const processScanResult = (code: string, format?: string) => {\r\n    const valid = isValidGTIN(code);\r\n\r\n    lastScanResult.value = { code, valid, format: format || undefined };\r\n\r\n    if (valid) {\r\n      // Valid GTIN found\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('barcodeScanner.validGtin', { gtin: code }),\r\n        icon: 'check_circle',\r\n        position: 'top',\r\n        timeout: 2000,\r\n      });\r\n\r\n      emit('scan', code);\r\n      closeScanner();\r\n    } else {\r\n      // Invalid format\r\n      $q.notify({\r\n        type: 'warning',\r\n        message: t('barcodeScanner.invalidFormat', { code }),\r\n        icon: 'warning',\r\n        position: 'top',\r\n        timeout: 3000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const processManualInput = () => {\r\n    if (!manualInput.value.trim()) {\r\n      return;\r\n    }\r\n\r\n    const code = manualInput.value.trim();\r\n    processScanResult(code);\r\n    manualInput.value = '';\r\n  };\r\n\r\n  const switchCamera = async () => {\r\n    if (!canSwitchCamera.value) {\r\n      return;\r\n    }\r\n\r\n    currentFacingMode.value =\r\n      currentFacingMode.value === 'user' ? 'environment' : 'user';\r\n\r\n    await stopCamera();\r\n    await initializeCamera();\r\n  };\r\n\r\n  const toggleFlash = async () => {\r\n    if (!hasFlash.value || !currentStream.value) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const videoTrack = currentStream.value.getVideoTracks()[0];\r\n      if (videoTrack) {\r\n        await videoTrack.applyConstraints({\r\n          advanced: [{ torch: !flashEnabled.value } as any],\r\n        });\r\n        flashEnabled.value = !flashEnabled.value;\r\n      }\r\n    } catch (err) {\r\n      console.warn('Flash toggle failed:', err);\r\n    }\r\n  };\r\n\r\n  const stopCamera = async () => {\r\n    scanning.value = false;\r\n    cameraActive.value = false;\r\n\r\n    if (scanInterval.value) {\r\n      clearInterval(scanInterval.value);\r\n      scanInterval.value = null;\r\n    }\r\n\r\n    if (currentStream.value) {\r\n      currentStream.value.getTracks().forEach(track => track.stop());\r\n      currentStream.value = null;\r\n    }\r\n\r\n    if (videoElement.value) {\r\n      videoElement.value.srcObject = null;\r\n    }\r\n  };\r\n\r\n  const closeScanner = async () => {\r\n    await stopCamera();\r\n    lastScanResult.value = null;\r\n    error.value = null;\r\n    emit('update:modelValue', false);\r\n  };\r\n\r\n  // Watchers\r\n  watch(\r\n    () => props.modelValue,\r\n    async newVal => {\r\n      if (newVal && !cameraActive.value) {\r\n        await initializeCamera();\r\n      } else if (!newVal) {\r\n        await stopCamera();\r\n      }\r\n    }\r\n  );\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    if (props.modelValue) {\r\n      initializeCamera();\r\n    }\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    stopCamera();\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .scanner-card {\r\n    height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    background: black;\r\n  }\r\n\r\n  .scanner-header {\r\n    background: linear-gradient(\r\n      135deg,\r\n      var(--q-primary) 0%,\r\n      var(--q-secondary) 100%\r\n    );\r\n    padding: 1rem;\r\n    flex-shrink: 0;\r\n\r\n    .header-content {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      .title-section {\r\n        display: flex;\r\n        align-items: center;\r\n      }\r\n    }\r\n  }\r\n\r\n  .scanner-body {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0;\r\n    background: black;\r\n  }\r\n\r\n  .camera-container {\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: relative;\r\n  }\r\n\r\n  .permission-prompt,\r\n  .error-state {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 2rem;\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n\r\n  .camera-view {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .camera-video {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    transform: scaleX(-1); // Mirror effect for front camera\r\n\r\n    &.camera-active {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  .scanning-overlay {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    pointer-events: none;\r\n  }\r\n\r\n  .scan-frame {\r\n    position: relative;\r\n    width: 280px;\r\n    height: 280px;\r\n    border: 2px solid rgba(255, 255, 255, 0.3);\r\n    border-radius: 12px;\r\n\r\n    .scan-corners {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n\r\n      .corner {\r\n        position: absolute;\r\n        width: 30px;\r\n        height: 30px;\r\n        border: 3px solid var(--q-primary);\r\n\r\n        &.corner-tl {\r\n          top: -3px;\r\n          left: -3px;\r\n          border-right: none;\r\n          border-bottom: none;\r\n          border-radius: 12px 0 0 0;\r\n        }\r\n\r\n        &.corner-tr {\r\n          top: -3px;\r\n          right: -3px;\r\n          border-left: none;\r\n          border-bottom: none;\r\n          border-radius: 0 12px 0 0;\r\n        }\r\n\r\n        &.corner-bl {\r\n          bottom: -3px;\r\n          left: -3px;\r\n          border-right: none;\r\n          border-top: none;\r\n          border-radius: 0 0 0 12px;\r\n        }\r\n\r\n        &.corner-br {\r\n          bottom: -3px;\r\n          right: -3px;\r\n          border-left: none;\r\n          border-top: none;\r\n          border-radius: 0 0 12px 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    .scan-line {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      height: 2px;\r\n      background: linear-gradient(\r\n        90deg,\r\n        transparent,\r\n        var(--q-primary),\r\n        transparent\r\n      );\r\n      animation: scan-line 2s ease-in-out infinite;\r\n    }\r\n  }\r\n\r\n  @keyframes scan-line {\r\n    0% {\r\n      top: 0;\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      top: calc(100% - 2px);\r\n      opacity: 0.8;\r\n    }\r\n    100% {\r\n      top: 0;\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  .scan-instructions {\r\n    margin-top: 2rem;\r\n    text-align: center;\r\n    color: white;\r\n    background: rgba(0, 0, 0, 0.7);\r\n    padding: 1rem 1.5rem;\r\n    border-radius: 8px;\r\n    backdrop-filter: blur(10px);\r\n\r\n    .instruction-text {\r\n      font-size: 1rem;\r\n      font-weight: 500;\r\n    }\r\n  }\r\n\r\n  .scan-result {\r\n    position: absolute;\r\n    bottom: 2rem;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n\r\n    .result-chip {\r\n      font-size: 1.1rem;\r\n      padding: 0.5rem 1rem;\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n\r\n  .manual-input-section {\r\n    padding: 1rem;\r\n    background: rgba(255, 255, 255, 0.05);\r\n    backdrop-filter: blur(10px);\r\n\r\n    .manual-input-expander {\r\n      color: white;\r\n    }\r\n\r\n    .manual-input-content {\r\n      padding-top: 1rem;\r\n      color: white;\r\n    }\r\n  }\r\n\r\n  .scanner-footer {\r\n    background: rgba(0, 0, 0, 0.8);\r\n    backdrop-filter: blur(10px);\r\n    padding: 1rem;\r\n    color: white;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  // Mobile optimizations\r\n  @media (max-width: 768px) {\r\n    .scan-frame {\r\n      width: 240px;\r\n      height: 240px;\r\n    }\r\n\r\n    .scan-instructions {\r\n      margin-top: 1rem;\r\n      padding: 0.75rem 1rem;\r\n\r\n      .instruction-text {\r\n        font-size: 0.9rem;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchInput.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@update:model-value\".",
        "line": 16,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 35,
        "fix": {
          "range": [434, 507],
          "text": ":loading=\"productsLoading\"\r\n        @update:model-value=\"onProductChange\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 47,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 47,
        "endColumn": 43,
        "fix": {
          "range": [1393, 1464],
          "text": ":title=\"$t('batch.scanBatch')\"\r\n            @click=\"openBarcodeScanner\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'modelValue' requires default value to be set.",
        "line": 164,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 170,
        "endColumn": 7
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'locationId' requires default value to be set.",
        "line": 173,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 173,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\r\n  <div class=\"batch-input-container\">\r\n    <div class=\"batch-input-wrapper\">\r\n      <!-- Product Selection -->\r\n      <BaseSelect\r\n        v-model=\"selectedProduct\"\r\n        :options=\"productOptions\"\r\n        option-value=\"id\"\r\n        option-label=\"display_name\"\r\n        :label=\"$t('product.product')\"\r\n        :placeholder=\"$t('product.selectProduct')\"\r\n        filterable\r\n        clearable\r\n        required\r\n        @update:model-value=\"onProductChange\"\r\n        :loading=\"productsLoading\"\r\n      >\r\n        <template #option=\"{ option, selected, focused }\">\r\n          <q-item v-bind=\"{ selected, focused }\" clickable>\r\n            <q-item-section>\r\n              <q-item-label>{{ option.name }}</q-item-label>\r\n              <q-item-label caption\r\n                >{{ option.sku }} • {{ option.category }}</q-item-label\r\n              >\r\n            </q-item-section>\r\n          </q-item>\r\n        </template>\r\n      </BaseSelect>\r\n\r\n      <!-- Batch Number Input -->\r\n      <q-input\r\n        v-model=\"batchNumber\"\r\n        :label=\"$t('batch.batchNumber')\"\r\n        :placeholder=\"$t('batch.enterBatchNumber')\"\r\n        outlined\r\n        dense\r\n        :rules=\"[requiredRule]\"\r\n        @blur=\"onBatchNumberChange\"\r\n      >\r\n        <template #append>\r\n          <q-btn\r\n            flat\r\n            round\r\n            dense\r\n            icon=\"qr_code_scanner\"\r\n            @click=\"openBarcodeScanner\"\r\n            :title=\"$t('batch.scanBatch')\"\r\n          />\r\n        </template>\r\n      </q-input>\r\n\r\n      <!-- Expiry Date -->\r\n      <q-input\r\n        v-model=\"expiryDate\"\r\n        :label=\"$t('batch.expiryDate')\"\r\n        type=\"date\"\r\n        outlined\r\n        dense\r\n        :rules=\"[requiredRule, validateExpiryDate]\"\r\n      />\r\n\r\n      <!-- Quantity Input -->\r\n      <q-input\r\n        v-model.number=\"quantity\"\r\n        :label=\"$t('product.quantity')\"\r\n        type=\"number\"\r\n        min=\"0\"\r\n        step=\"1\"\r\n        outlined\r\n        dense\r\n        :rules=\"[requiredRule, validateQuantity]\"\r\n      >\r\n        <template #append>\r\n          <span class=\"text-caption\">{{ selectedProduct?.unit || '' }}</span>\r\n        </template>\r\n      </q-input>\r\n\r\n      <!-- Existing Batch Selection (if found) -->\r\n      <div v-if=\"existingBatches.length > 0\" class=\"existing-batches\">\r\n        <div class=\"text-subtitle2 q-mb-md\">\r\n          {{ $t('batch.existingBatches') }}\r\n        </div>\r\n        <q-card\r\n          v-for=\"batch in existingBatches\"\r\n          :key=\"batch.id\"\r\n          flat\r\n          bordered\r\n          class=\"batch-card\"\r\n        >\r\n          <q-card-section class=\"q-pa-sm\">\r\n            <div class=\"flex justify-between items-center\">\r\n              <div>\r\n                <div class=\"text-weight-medium\">{{ batch.batch_number }}</div>\r\n                <div class=\"text-caption text-grey-6\">\r\n                  {{ $t('batch.expires') }}:\r\n                  {{ formatDate(batch.expiry_date) }} •\r\n                  {{ $t('product.quantity') }}: {{ batch.current_quantity }}\r\n                </div>\r\n              </div>\r\n              <q-btn\r\n                flat\r\n                dense\r\n                color=\"primary\"\r\n                :label=\"$t('batch.useBatch')\"\r\n                @click=\"selectExistingBatch(batch)\"\r\n              />\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n\r\n      <!-- View Mode -->\r\n      <div v-if=\"viewMode === 'lite'\" class=\"batch-summary\">\r\n        <q-card flat bordered>\r\n          <q-card-section class=\"q-pa-md\">\r\n            <div class=\"text-subtitle2 q-mb-sm\">\r\n              {{ $t('batch.batchSummary') }}\r\n            </div>\r\n            <div class=\"summary-row\">\r\n              <span>{{ $t('product.product') }}:</span>\r\n              <span>{{ selectedProduct?.name || '-' }}</span>\r\n            </div>\r\n            <div class=\"summary-row\">\r\n              <span>{{ $t('batch.batchNumber') }}:</span>\r\n              <span>{{ batchNumber || '-' }}</span>\r\n            </div>\r\n            <div class=\"summary-row\">\r\n              <span>{{ $t('batch.expiryDate') }}:</span>\r\n              <span>{{ expiryDate ? formatDate(expiryDate) : '-' }}</span>\r\n            </div>\r\n            <div class=\"summary-row\">\r\n              <span>{{ $t('product.quantity') }}:</span>\r\n              <span>{{ quantity || 0 }} {{ selectedProduct?.unit || '' }}</span>\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Barcode Scanner Dialog -->\r\n    <q-dialog v-model=\"showScanner\" max-width=\"500px\">\r\n      <BarcodeScanner v-model=\"showScanner\" @scan=\"onBarcodeScanned\" />\r\n    </q-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch, defineAsyncComponent } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n  import { useProductStore } from 'src/stores/product';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import BaseSelect from 'src/components/base/BaseSelect.vue';\r\n  import type { ProductBatchWithDetails, ProductWithStock } from 'src/types/inventory';\r\n  import { useFormatting } from 'src/composables/useFormatting';\r\n\r\n  // Lazy load barcode scanner\r\n  const BarcodeScanner = defineAsyncComponent(\r\n    () => import('src/components/BarcodeScanner.vue')\r\n  );\r\n\r\n  interface Props {\r\n    modelValue?: {\r\n      productId?: string;\r\n      batchNumber?: string;\r\n      expiryDate?: string;\r\n      quantity?: number;\r\n      batchId?: string;\r\n    };\r\n    viewMode?: 'lite' | 'full';\r\n    required?: boolean;\r\n    locationId?: string;\r\n  }\r\n\r\n  interface Emits {\r\n    (\r\n      e: 'update:modelValue',\r\n      value: {\r\n        productId?: string;\r\n        batchNumber?: string;\r\n        expiryDate?: string;\r\n        quantity?: number;\r\n        batchId?: string;\r\n        isExistingBatch?: boolean;\r\n      }\r\n    ): void;\r\n    (e: 'batch-selected', batch: ProductBatchWithDetails): void;\r\n    (e: 'validation-changed', isValid: boolean): void;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    viewMode: 'full',\r\n    required: true,\r\n  });\r\n\r\n  const emit = defineEmits<Emits>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n  const productStore = useProductStore();\r\n  const authStore = useAuthStore();\r\n  const { formatDate } = useFormatting();\r\n\r\n  // Reactive state\r\n  const selectedProduct = ref<ProductWithStock | null>(null);\r\n  const batchNumber = ref('');\r\n  const expiryDate = ref('');\r\n  const quantity = ref<number | null>(null);\r\n  const existingBatches = ref<ProductBatchWithDetails[]>([]);\r\n  const showScanner = ref(false);\r\n  const productsLoading = ref(false);\r\n\r\n  // Computed\r\n  const productOptions = computed(() => {\r\n    return productStore.products.map(product => ({\r\n      ...product,\r\n      label: `${product.name} (${product.sku})`,\r\n      value: product.id,\r\n    }));\r\n  });\r\n\r\n  const isValid = computed(() => {\r\n    if (!props.required) return true;\r\n    return !!(\r\n      selectedProduct.value &&\r\n      batchNumber.value &&\r\n      expiryDate.value &&\r\n      quantity.value\r\n    );\r\n  });\r\n\r\n  // Validation rules\r\n  const requiredRule = (val: string | number) =>\r\n    (!!val && val !== '') || t('validation.required');\r\n\r\n  const validateExpiryDate = (val: string) => {\r\n    if (!val) return props.required ? t('validation.required') : true;\r\n    const date = new Date(val);\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    return date >= today || t('batch.expiryDatePastError');\r\n  };\r\n\r\n  const validateQuantity = (val: number) => {\r\n    if (!val && props.required) return t('validation.required');\r\n    return val > 0 || t('validation.positiveNumber');\r\n  };\r\n\r\n  // Methods\r\n  const onProductChange = async (product: ProductWithStock | null) => {\r\n    selectedProduct.value = product;\r\n    existingBatches.value = [];\r\n\r\n    if (product && batchNumber.value) {\r\n      await searchExistingBatches();\r\n    }\r\n\r\n    emitValue();\r\n  };\r\n\r\n  const onBatchNumberChange = async () => {\r\n    if (selectedProduct.value && batchNumber.value) {\r\n      await searchExistingBatches();\r\n    }\r\n    emitValue();\r\n  };\r\n\r\n  const searchExistingBatches = async () => {\r\n    if (!selectedProduct.value || !batchNumber.value) return;\r\n\r\n    try {\r\n      const practiceId = authStore.clinicId;\r\n      if (!practiceId) return;\r\n\r\n      // Search for existing batches with the same product and batch number\r\n      const batches = batchStore\r\n        .batchesByProduct(selectedProduct.value.id)\r\n        .filter(batch =>\r\n          batch.batch_number\r\n            .toLowerCase()\r\n            .includes(batchNumber.value.toLowerCase())\r\n        );\r\n\r\n      existingBatches.value = batches;\r\n    } catch (error) {\r\n      console.error('Error searching existing batches:', error);\r\n    }\r\n  };\r\n\r\n  const selectExistingBatch = (batch: ProductBatchWithDetails) => {\r\n    batchNumber.value = batch.batch_number;\r\n    expiryDate.value = batch.expiry_date;\r\n    quantity.value = batch.current_quantity;\r\n\r\n    const value = {\r\n      productId: selectedProduct.value?.id,\r\n      batchNumber: batch.batch_number,\r\n      expiryDate: batch.expiry_date,\r\n      quantity: quantity.value,\r\n      batchId: batch.id,\r\n      isExistingBatch: true,\r\n    };\r\n\r\n    emit('update:modelValue', value);\r\n    emit('batch-selected', batch);\r\n  };\r\n\r\n  const openBarcodeScanner = () => {\r\n    showScanner.value = true;\r\n  };\r\n\r\n  const onBarcodeScanned = async (scannedCode: string) => {\r\n    showScanner.value = false;\r\n    batchNumber.value = scannedCode;\r\n\r\n    // Try to find existing batch\r\n    if (selectedProduct.value) {\r\n      await searchExistingBatches();\r\n\r\n      // If exact match found, auto-select it\r\n      const exactMatch = existingBatches.value.find(\r\n        batch => batch.batch_number === scannedCode\r\n      );\r\n\r\n      if (exactMatch) {\r\n        selectExistingBatch(exactMatch);\r\n      }\r\n    }\r\n\r\n    emitValue();\r\n  };\r\n\r\n  const emitValue = () => {\r\n    const value = {\r\n      productId: selectedProduct.value?.id,\r\n      batchNumber: batchNumber.value,\r\n      expiryDate: expiryDate.value,\r\n      quantity: quantity.value || undefined,\r\n      batchId: undefined,\r\n      isExistingBatch: false,\r\n    };\r\n\r\n    emit('update:modelValue', value);\r\n  };\r\n\r\n  // Watch for validation changes\r\n  watch(isValid, valid => {\r\n    emit('validation-changed', valid);\r\n  });\r\n\r\n  // Watch for prop changes\r\n  watch(\r\n    () => props.modelValue,\r\n    newValue => {\r\n      if (newValue) {\r\n        if (newValue.productId) {\r\n          const product = productStore.products.find(\r\n            p => p.id === newValue.productId\r\n          );\r\n          selectedProduct.value = product || null;\r\n        }\r\n        batchNumber.value = newValue.batchNumber || '';\r\n        expiryDate.value = newValue.expiryDate || '';\r\n        quantity.value = newValue.quantity || null;\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n\r\n  // Load products on mount\r\n  const loadProducts = async () => {\r\n    try {\r\n      productsLoading.value = true;\r\n      const practiceId = authStore.clinicId;\r\n      if (practiceId) {\r\n        await productStore.fetchProducts({ practiceId });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading products:', error);\r\n    } finally {\r\n      productsLoading.value = false;\r\n    }\r\n  };\r\n\r\n  // Initialize\r\n  loadProducts();\r\n</script>\r\n\r\n<style scoped>\r\n  .batch-input-container {\r\n    width: 100%;\r\n  }\r\n\r\n  .batch-input-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 16px;\r\n  }\r\n\r\n  .existing-batches {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  .batch-card {\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .batch-summary {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  .summary-row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .summary-row:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .batch-input-wrapper {\r\n      gap: 12px;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchOverview.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 47,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 47,
        "endColumn": 30,
        "fix": { "range": [1225, 1238], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 54,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 54,
        "endColumn": 30,
        "fix": { "range": [1513, 1526], "text": "#action" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-product' instead of 'v-slot:body-cell-product'.",
        "line": 79,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 79,
        "endColumn": 51,
        "fix": { "range": [2180, 2204], "text": "#body-cell-product" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-batchNumber' instead of 'v-slot:body-cell-batchNumber'.",
        "line": 98,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 98,
        "endColumn": 55,
        "fix": { "range": [2865, 2893], "text": "#body-cell-batchNumber" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-location' instead of 'v-slot:body-cell-location'.",
        "line": 117,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 117,
        "endColumn": 52,
        "fix": { "range": [3540, 3565], "text": "#body-cell-location" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-quantity' instead of 'v-slot:body-cell-quantity'.",
        "line": 130,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 130,
        "endColumn": 52,
        "fix": { "range": [3948, 3973], "text": "#body-cell-quantity" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-expiry' instead of 'v-slot:body-cell-expiry'.",
        "line": 156,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 156,
        "endColumn": 50,
        "fix": { "range": [4927, 4950], "text": "#body-cell-expiry" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 186,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 186,
        "endColumn": 50,
        "fix": { "range": [5931, 5954], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 199,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 199,
        "endColumn": 51,
        "fix": { "range": [6326, 6350], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 220,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 220,
        "endColumn": 60,
        "fix": {
          "range": [6922, 7011],
          "text": ":disable=\"props.row.availableQuantity <= 0\"\r\n                @click=\"useBatch(props.row)\""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 586,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 586,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16961, 16964], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16961, 16964], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 10,
    "source": "<template>\r\n  <div class=\"batch-overview\">\r\n    <!-- Header with actions -->\r\n    <div class=\"row items-center q-mb-md\">\r\n      <div class=\"text-h6\">{{ $t('batch.batchOverview') }}</div>\r\n      <q-space />\r\n\r\n      <!-- Filter controls -->\r\n      <div class=\"row q-gutter-sm\">\r\n        <q-select\r\n          v-model=\"filters.location\"\r\n          :options=\"locationOptions\"\r\n          :label=\"$t('location.location')\"\r\n          clearable\r\n          dense\r\n          outlined\r\n          style=\"min-width: 150px\"\r\n          @update:model-value=\"applyFilters\"\r\n        />\r\n\r\n        <q-select\r\n          v-model=\"filters.urgency\"\r\n          :options=\"urgencyOptions\"\r\n          :label=\"$t('batch.urgencyLevel')\"\r\n          clearable\r\n          dense\r\n          outlined\r\n          style=\"min-width: 120px\"\r\n          @update:model-value=\"applyFilters\"\r\n        />\r\n\r\n        <q-btn\r\n          icon=\"add\"\r\n          color=\"primary\"\r\n          :label=\"$t('batch.addBatch')\"\r\n          @click=\"showAddBatchDialog = true\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Expiry alerts banner -->\r\n    <q-banner\r\n      v-if=\"expiryAlerts.length > 0\"\r\n      class=\"bg-orange text-white q-mb-md\"\r\n      rounded\r\n    >\r\n      <template v-slot:avatar>\r\n        <q-icon name=\"warning\" />\r\n      </template>\r\n      <div class=\"text-weight-medium\">{{ $t('batch.expiryAlert') }}</div>\r\n      <div class=\"text-caption\">\r\n        {{ $t('batch.batchesExpiringSoon', { count: expiryAlerts.length }) }}\r\n      </div>\r\n      <template v-slot:action>\r\n        <q-btn\r\n          flat\r\n          color=\"white\"\r\n          :label=\"$t('batch.viewExpiring')\"\r\n          @click=\"showExpiringOnly = !showExpiringOnly\"\r\n        />\r\n      </template>\r\n    </q-banner>\r\n\r\n    <!-- Main table -->\r\n    <div class=\"medical-table\">\r\n      <q-table\r\n        :rows=\"filteredBatches\"\r\n        :columns=\"columns\"\r\n        :loading=\"loading\"\r\n        :pagination=\"{ rowsPerPage: 50 }\"\r\n        row-key=\"id\"\r\n        class=\"batch-table\"\r\n        :no-data-label=\"$t('batch.noBatchesFound')\"\r\n        flat\r\n        bordered\r\n        separator=\"cell\"\r\n      >\r\n        <!-- Product column with grouping -->\r\n        <template v-slot:body-cell-product=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"row items-center\">\r\n              <q-avatar size=\"32px\" class=\"q-mr-sm\">\r\n                <q-icon name=\"medical_services\" color=\"primary\" />\r\n              </q-avatar>\r\n              <div>\r\n                <div class=\"text-weight-medium\">\r\n                  {{ props.row.productName }}\r\n                </div>\r\n                <div class=\"text-caption text-grey\">\r\n                  {{ props.row.productSku }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Batch number column with scanner icon -->\r\n        <template v-slot:body-cell-batchNumber=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"row items-center\">\r\n              <q-icon name=\"qr_code\" class=\"q-mr-xs text-grey icon-size-sm\" />\r\n              <span class=\"text-weight-medium\">{{\r\n                props.row.batchNumber\r\n              }}</span>\r\n            </div>\r\n            <div\r\n              v-if=\"props.row.supplierBatchNumber\"\r\n              class=\"text-caption text-grey\"\r\n            >\r\n              {{ $t('batch.supplierBatch') }}:\r\n              {{ props.row.supplierBatchNumber }}\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Location column -->\r\n        <template v-slot:body-cell-location=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              :color=\"getLocationColor(props.row.locationType)\"\r\n              text-color=\"white\"\r\n              size=\"sm\"\r\n            >\r\n              {{ props.row.locationName }}\r\n            </q-chip>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Quantity column with progress bar -->\r\n        <template v-slot:body-cell-quantity=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"text-weight-medium\">\r\n              {{ formatQuantity(props.row.currentQuantity) }}\r\n              <span class=\"text-grey\"\r\n                >/ {{ formatQuantity(props.row.initialQuantity) }}</span\r\n              >\r\n            </div>\r\n            <q-linear-progress\r\n              :value=\"props.row.currentQuantity / props.row.initialQuantity\"\r\n              size=\"4px\"\r\n              :color=\"\r\n                getQuantityColor(\r\n                  props.row.currentQuantity / props.row.initialQuantity\r\n                )\r\n              \"\r\n              class=\"q-mt-xs\"\r\n            />\r\n            <div class=\"text-caption text-grey\">\r\n              {{ $t('batch.available') }}:\r\n              {{ formatQuantity(props.row.availableQuantity) }}\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Expiry date column with urgency indicators -->\r\n        <template v-slot:body-cell-expiry=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"row items-center\">\r\n              <q-icon\r\n                :name=\"getExpiryIcon(props.row.urgencyLevel)\"\r\n                :color=\"getExpiryColor(props.row.urgencyLevel)\"\r\n                size=\"16px\"\r\n                class=\"q-mr-xs\"\r\n              />\r\n              <div>\r\n                <div class=\"text-weight-medium\">\r\n                  {{ formatDate(props.row.expiryDate) }}\r\n                </div>\r\n                <div\r\n                  class=\"text-caption\"\r\n                  :class=\"getExpiryTextClass(props.row.urgencyLevel)\"\r\n                >\r\n                  {{\r\n                    getExpiryText(\r\n                      props.row.daysUntilExpiry,\r\n                      props.row.urgencyLevel\r\n                    )\r\n                  }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Status column -->\r\n        <template v-slot:body-cell-status=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              :color=\"getStatusColor(props.row.status)\"\r\n              text-color=\"white\"\r\n              size=\"sm\"\r\n            >\r\n              {{ $t(`batch.status.${props.row.status}`) }}\r\n            </q-chip>\r\n          </q-td>\r\n        </template>\r\n\r\n        <!-- Actions column -->\r\n        <template v-slot:body-cell-actions=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"row q-gutter-xs\">\r\n              <q-btn\r\n                icon=\"edit\"\r\n                size=\"sm\"\r\n                flat\r\n                round\r\n                color=\"primary\"\r\n                @click=\"editBatch(props.row)\"\r\n              >\r\n                <q-tooltip>{{ $t('common.edit') }}</q-tooltip>\r\n              </q-btn>\r\n\r\n              <q-btn\r\n                icon=\"move_down\"\r\n                size=\"sm\"\r\n                flat\r\n                round\r\n                color=\"green\"\r\n                @click=\"useBatch(props.row)\"\r\n                :disable=\"props.row.availableQuantity <= 0\"\r\n              >\r\n                <q-tooltip>{{ $t('batch.useBatch') }}</q-tooltip>\r\n              </q-btn>\r\n\r\n              <q-btn\r\n                v-if=\"props.row.status === 'active'\"\r\n                icon=\"block\"\r\n                size=\"sm\"\r\n                flat\r\n                round\r\n                color=\"orange\"\r\n                @click=\"quarantineBatch(props.row)\"\r\n              >\r\n                <q-tooltip>{{ $t('batch.quarantine') }}</q-tooltip>\r\n              </q-btn>\r\n\r\n              <q-btn\r\n                icon=\"more_vert\"\r\n                size=\"sm\"\r\n                flat\r\n                round\r\n                @click=\"showBatchDetails(props.row)\"\r\n              >\r\n                <q-tooltip>{{ $t('common.moreActions') }}</q-tooltip>\r\n              </q-btn>\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n      </q-table>\r\n    </div>\r\n\r\n    <!-- Add Batch Dialog -->\r\n    <q-dialog v-model=\"showAddBatchDialog\" max-width=\"900px\">\r\n      <BatchRegistrationForm\r\n        @close=\"showAddBatchDialog = false\"\r\n        @success=\"onBatchAdded\"\r\n      />\r\n    </q-dialog>\r\n\r\n    <!-- Batch Details Dialog -->\r\n    <BaseDialog\r\n      v-model=\"showDetailsDialog\"\r\n      :title=\"selectedBatch?.batchNumber || ''\"\r\n      :subtitle=\"selectedBatch?.productName || ''\"\r\n      icon=\"inventory_2\"\r\n      size=\"md\"\r\n      @close=\"showDetailsDialog = false\"\r\n    >\r\n      <div v-if=\"selectedBatch\" class=\"batch-details-content\">\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col\">\r\n            <div class=\"detail-item\">\r\n              <div class=\"detail-label\">{{ $t('batch.quantity') }}</div>\r\n              <div class=\"detail-value\">\r\n                {{ selectedBatch.currentQuantity }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col\">\r\n            <div class=\"detail-item\">\r\n              <div class=\"detail-label\">{{ $t('batch.expiryDate') }}</div>\r\n              <div class=\"detail-value\">\r\n                {{ formatDate(selectedBatch.expiryDate) }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <template #actions>\r\n        <q-btn\r\n          flat\r\n          :label=\"$t('common.close')\"\r\n          color=\"primary\"\r\n          @click=\"showDetailsDialog = false\"\r\n        />\r\n      </template>\r\n    </BaseDialog>\r\n\r\n    <!-- Use Batch Dialog -->\r\n    <q-dialog v-model=\"showUseBatchDialog\" max-width=\"500px\">\r\n      <UseBatchDialog\r\n        v-if=\"selectedBatch\"\r\n        :batch=\"selectedBatch\"\r\n        @close=\"showUseBatchDialog = false\"\r\n        @used=\"onBatchUsed\"\r\n      />\r\n    </q-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar, date } from 'quasar';\r\n  import { useBatchStore } from '@/stores/batch';\r\n  import { useClinicStore } from '@/stores/clinic';\r\n  import { useAuthStore } from '@/stores/auth';\r\n  import BatchRegistrationForm from './BatchRegistrationForm.vue';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import UseBatchDialog from './UseBatchDialog.vue';\r\n  import type { ProductBatchWithDetails } from '@/types/inventory';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n  const clinicStore = useClinicStore();\r\n  const authStore = useAuthStore();\r\n\r\n  // State\r\n  const loading = ref(false);\r\n  const showAddBatchDialog = ref(false);\r\n  const showDetailsDialog = ref(false);\r\n  const showUseBatchDialog = ref(false);\r\n  const showExpiringOnly = ref(false);\r\n  const selectedBatch = ref<ProductBatchWithDetails | null>(null);\r\n\r\n  // Filters\r\n  const filters = ref({\r\n    location: null as string | null,\r\n    urgency: null as string | null,\r\n    search: '',\r\n  });\r\n\r\n  // Computed\r\n  const columns = computed(() => [\r\n    {\r\n      name: 'product',\r\n      label: t('product.product'),\r\n      align: 'left',\r\n      sortable: true,\r\n      field: 'productName',\r\n    },\r\n    {\r\n      name: 'batchNumber',\r\n      label: t('batch.batchNumber'),\r\n      align: 'left',\r\n      sortable: true,\r\n      field: 'batchNumber',\r\n    },\r\n    {\r\n      name: 'location',\r\n      label: t('location.location'),\r\n      align: 'left',\r\n      sortable: true,\r\n      field: 'locationName',\r\n    },\r\n    {\r\n      name: 'quantity',\r\n      label: t('inventory.quantity'),\r\n      align: 'right',\r\n      sortable: true,\r\n      field: 'currentQuantity',\r\n    },\r\n    {\r\n      name: 'expiry',\r\n      label: t('batch.expiryDate'),\r\n      align: 'left',\r\n      sortable: true,\r\n      field: 'expiryDate',\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: t('common.status'),\r\n      align: 'center',\r\n      sortable: true,\r\n      field: 'status',\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('common.actions'),\r\n      align: 'center',\r\n    },\r\n  ]);\r\n\r\n  const locationOptions = computed(() => [\r\n    { label: t('common.all'), value: null },\r\n    ...clinicStore.locations.map(location => ({\r\n      label: location.name,\r\n      value: location.id,\r\n    })),\r\n  ]);\r\n\r\n  const urgencyOptions = computed(() => [\r\n    { label: t('common.all'), value: null },\r\n    { label: t('batch.urgency.expired'), value: 'expired' },\r\n    { label: t('batch.urgency.critical'), value: 'critical' },\r\n    { label: t('batch.urgency.warning'), value: 'warning' },\r\n    { label: t('batch.urgency.normal'), value: 'normal' },\r\n  ]);\r\n\r\n  const expiryAlerts = computed(() => {\r\n    return batchStore.expiringBatches.filter(\r\n      batch =>\r\n        batch.urgency_level === 'critical' || batch.urgency_level === 'expired'\r\n    );\r\n  });\r\n\r\n  const filteredBatches = computed(() => {\r\n    let batches = [...batchStore.batches];\r\n\r\n    // Apply expiry filter\r\n    if (showExpiringOnly.value) {\r\n      batches = batches.filter(batch =>\r\n        ['expired', 'critical', 'warning'].includes(\r\n          batch.urgencyLevel || 'normal'\r\n        )\r\n      );\r\n    }\r\n\r\n    // Apply location filter\r\n    if (filters.value.location) {\r\n      batches = batches.filter(\r\n        batch => batch.location_id === filters.value.location\r\n      );\r\n    }\r\n\r\n    // Apply urgency filter\r\n    if (filters.value.urgency) {\r\n      batches = batches.filter(\r\n        batch => batch.urgency_level === filters.value.urgency\r\n      );\r\n    }\r\n\r\n    // Sort by expiry date (FIFO)\r\n    batches.sort((a, b) => {\r\n      const dateA = new Date(a.expiry_date).getTime();\r\n      const dateB = new Date(b.expiry_date).getTime();\r\n      return dateA - dateB;\r\n    });\r\n\r\n    return batches;\r\n  });\r\n\r\n  // Methods\r\n  const formatDate = (dateStr: string) => {\r\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\r\n  };\r\n\r\n  const formatQuantity = (quantity: number | null | undefined) => {\r\n    if (quantity === null || quantity === undefined || isNaN(quantity)) {\r\n      return '0';\r\n    }\r\n    return quantity.toLocaleString(undefined, {\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 3,\r\n    });\r\n  };\r\n\r\n  const getLocationColor = (type: string) => {\r\n    const colors = {\r\n      storage: 'blue',\r\n      emergency: 'red',\r\n      treatment: 'green',\r\n      default: 'grey',\r\n    };\r\n    return colors[type] || colors.default;\r\n  };\r\n\r\n  const getQuantityColor = (ratio: number) => {\r\n    if (ratio > 0.5) {\r\n      return 'green';\r\n    }\r\n    if (ratio > 0.2) {\r\n      return 'orange';\r\n    }\r\n    return 'red';\r\n  };\r\n\r\n  const getExpiryIcon = (urgency: string) => {\r\n    const icons = {\r\n      expired: 'error',\r\n      critical: 'warning',\r\n      warning: 'schedule',\r\n      normal: 'check_circle',\r\n    };\r\n    return icons[urgency] || 'check_circle';\r\n  };\r\n\r\n  const getExpiryColor = (urgency: string) => {\r\n    const colors = {\r\n      expired: 'red',\r\n      critical: 'deep-orange',\r\n      warning: 'amber',\r\n      normal: 'green',\r\n    };\r\n    return colors[urgency] || 'green';\r\n  };\r\n\r\n  const getExpiryTextClass = (urgency: string) => {\r\n    const classes = {\r\n      expired: 'text-red',\r\n      critical: 'text-deep-orange',\r\n      warning: 'text-amber-8',\r\n      normal: 'text-green',\r\n    };\r\n    return classes[urgency] || 'text-green';\r\n  };\r\n\r\n  const getExpiryText = (days: number, urgency: string) => {\r\n    if (urgency === 'expired') {\r\n      return t('batch.expiredDaysAgo', { days: Math.abs(days) });\r\n    } else if (days === 0) {\r\n      return t('batch.expiresToday');\r\n    } else if (days === 1) {\r\n      return t('batch.expiresTomorrow');\r\n    } else {\r\n      return t('batch.expiresInDays', { days });\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors = {\r\n      active: 'green',\r\n      expired: 'red',\r\n      depleted: 'grey',\r\n      recalled: 'deep-orange',\r\n      quarantine: 'amber',\r\n    };\r\n    return colors[status] || 'grey';\r\n  };\r\n\r\n  const applyFilters = () => {\r\n    // Filters are reactive, so this just triggers recomputation\r\n  };\r\n\r\n  const editBatch = (batch: ProductBatchWithDetails) => {\r\n    selectedBatch.value = batch;\r\n    showDetailsDialog.value = true;\r\n  };\r\n\r\n  const useBatch = (batch: ProductBatchWithDetails) => {\r\n    selectedBatch.value = batch;\r\n    showUseBatchDialog.value = true;\r\n  };\r\n\r\n  const quarantineBatch = async (batch: ProductBatchWithDetails) => {\r\n    try {\r\n      const clinicId = authStore.clinicId;\r\n      if (!clinicId) {\r\n        throw new Error($t('batchoverv.noclinicidavailable'));\r\n      }\r\n      await batchStore.updateBatch({\r\n        id: batch.id,\r\n        practice_id: clinicId,\r\n        status: 'quarantine',\r\n      });\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('batch.quarantineSuccess'),\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failed'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const showBatchDetails = (batch: ProductBatchWithDetails) => {\r\n    selectedBatch.value = batch;\r\n    showDetailsDialog.value = true;\r\n  };\r\n\r\n  const onBatchAdded = (batch: any) => {\r\n    showAddBatchDialog.value = false;\r\n    loadBatches();\r\n  };\r\n\r\n  const onBatchUpdated = () => {\r\n    showDetailsDialog.value = false;\r\n    loadBatches();\r\n  };\r\n\r\n  const onBatchUsed = () => {\r\n    showUseBatchDialog.value = false;\r\n    loadBatches();\r\n  };\r\n\r\n  const loadBatches = async () => {\r\n    try {\r\n      loading.value = true;\r\n      const clinicId = authStore.clinicId;\r\n      if (!clinicId) {\r\n        throw new Error($t('batchoverv.noclinicidavailable'));\r\n      }\r\n      await Promise.all([\r\n        batchStore.fetchBatches(clinicId),\r\n        batchStore.fetchExpiringBatches(clinicId),\r\n      ]);\r\n    } catch (error) {\r\n      console.error(t('errors.failedToLoadData'), error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failedToLoadData'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    await Promise.all([loadBatches(), clinicStore.fetchLocations()]);\r\n  });\r\n</script>\r\n\r\n<style scoped>\r\n  .batch-overview {\r\n    padding: 16px;\r\n  }\r\n\r\n  /* Table styling now handled by global medical-table class */\r\n\r\n  .batch-details-content {\r\n    .detail-item {\r\n      .detail-label {\r\n        font-size: var(--text-sm);\r\n        color: var(--neutral-600);\r\n        margin-bottom: var(--space-1);\r\n        font-weight: var(--font-weight-medium);\r\n      }\r\n\r\n      .detail-value {\r\n        font-size: var(--text-base);\r\n        color: var(--neutral-900);\r\n        font-weight: var(--font-weight-semibold);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Dark mode adjustments */\r\n  body.body--dark {\r\n    .batch-details-content {\r\n      .detail-item {\r\n        .detail-label {\r\n          color: var(--neutral-400);\r\n        }\r\n\r\n        .detail-value {\r\n          color: var(--neutral-100);\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchRegistrationForm.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 17,
        "column": 34,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 53,
        "fix": { "range": [395, 433], "text": "class=\"q-gutter-md\" @submit=\"onSubmit\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":rules\" should go before \"@filter\".",
        "line": 33,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 33,
        "endColumn": 40,
        "fix": { "range": [926, 990], "text": ":rules=\"[rules.required]\"\n              @filter=\"filterProducts\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"emit-value\" should go before \"@filter\".",
        "line": 34,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 34,
        "endColumn": 25,
        "fix": {
          "range": [926, 1015],
          "text": "emit-value\n              @filter=\"filterProducts\"\n              :rules=\"[rules.required]\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"map-options\" should go before \"@filter\".",
        "line": 35,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 35,
        "endColumn": 26,
        "fix": {
          "range": [926, 1041],
          "text": "map-options\n              @filter=\"filterProducts\"\n              :rules=\"[rules.required]\"\n              emit-value"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#option' instead of 'v-slot:option'.",
        "line": 37,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 37,
        "endColumn": 46,
        "fix": { "range": [1080, 1093], "text": "#option" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 77,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 77,
        "endColumn": 39,
        "fix": { "range": [2412, 2426], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 90,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 90,
        "endColumn": 39,
        "fix": { "range": [2802, 2816], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 109,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 109,
        "endColumn": 39,
        "fix": { "range": [3364, 3378], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 122,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 122,
        "endColumn": 39,
        "fix": { "range": [3743, 3757], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 145,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 145,
        "endColumn": 39,
        "fix": { "range": [4425, 4439], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 160,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 160,
        "endColumn": 39,
        "fix": { "range": [4855, 4869], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 184,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 184,
        "endColumn": 31,
        "fix": { "range": [5449, 5498], "text": ":disable=\"loading\"\n            @click=\"resetForm\"" }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'prefilledProductId' requires default value to be set.",
        "line": 212,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 212,
        "endColumn": 33
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'prefilledLocationId' requires default value to be set.",
        "line": 213,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 213,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 222,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 222,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6477, 6480], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6477, 6480], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 235,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 235,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6796, 6799], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6796, 6799], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 12,
    "source": "<template>\n  <q-card class=\"batch-registration-card\">\n    <q-card-section class=\"row items-center q-pb-none\">\n      <div class=\"text-h6\">{{ $t('batch.registerNewBatch') }}</div>\n      <q-space />\n      <q-btn\n        v-if=\"!embedded\"\n        icon=\"close\"\n        flat\n        round\n        dense\n        @click=\"$emit('close')\"\n      />\n    </q-card-section>\n\n    <q-card-section>\n      <q-form @submit=\"onSubmit\" class=\"q-gutter-md\">\n        <!-- Product Selection -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-select\n              v-model=\"form.product_id\"\n              :options=\"productOptions\"\n              option-value=\"id\"\n              option-label=\"name\"\n              :label=\"$t('product.product')\"\n              use-input\n              hide-selected\n              fill-input\n              input-debounce=\"0\"\n              :loading=\"loadingProducts\"\n              @filter=\"filterProducts\"\n              :rules=\"[rules.required]\"\n              emit-value\n              map-options\n            >\n              <template v-slot:option=\"scope\">\n                <q-item v-bind=\"scope.itemProps\">\n                  <q-item-section>\n                    <q-item-label>{{ scope.opt.name }}</q-item-label>\n                    <q-item-label caption>{{ scope.opt.sku }}</q-item-label>\n                  </q-item-section>\n                </q-item>\n              </template>\n            </q-select>\n          </div>\n\n          <!-- Location Selection -->\n          <div class=\"col-12 col-md-6\">\n            <q-select\n              v-model=\"form.location_id\"\n              :options=\"locationOptions\"\n              option-value=\"id\"\n              option-label=\"name\"\n              :label=\"$t('location.location')\"\n              :rules=\"[rules.required]\"\n              emit-value\n              map-options\n            />\n          </div>\n        </div>\n\n        <!-- Batch Information -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.batch_number\"\n              :label=\"$t('batch.batchNumber')\"\n              :rules=\"[\n                val => !!val || $t('validation.required'),\n                val =>\n                  val.length >= 3 || $t('validation.minLength', { min: 3 }),\n              ]\"\n              counter\n              maxlength=\"100\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"qr_code_scanner\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.supplier_batch_number\"\n              :label=\"$t('batch.supplierBatchNumber')\"\n              counter\n              maxlength=\"100\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"business\" />\n              </template>\n            </q-input>\n          </div>\n        </div>\n\n        <!-- Dates -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.expiry_date\"\n              :label=\"$t('batch.expiryDate')\"\n              type=\"date\"\n              :rules=\"[\n                val => !!val || $t('validation.required'),\n                val => validateExpiryDate(val),\n              ]\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"event\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <q-input\n              v-model=\"form.received_date\"\n              :label=\"$t('batch.receivedDate')\"\n              type=\"date\"\n              :rules=\"[rules.required]\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"inbox\" />\n              </template>\n            </q-input>\n          </div>\n        </div>\n\n        <!-- Quantities -->\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-4\">\n            <q-input\n              v-model.number=\"form.initial_quantity\"\n              :label=\"$t('batch.initialQuantity')\"\n              type=\"number\"\n              step=\"0.001\"\n              min=\"0\"\n              :rules=\"[\n                val =>\n                  (val !== null && val !== undefined) ||\n                  $t('validation.required'),\n                rules.positive,\n              ]\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"inventory\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-4\">\n            <q-input\n              v-model.number=\"form.unit_cost\"\n              :label=\"$t('batch.unitCost')\"\n              type=\"number\"\n              step=\"0.01\"\n              min=\"0\"\n              :suffix=\"form.currency\"\n            >\n              <template v-slot:prepend>\n                <q-icon name=\"euro\" />\n              </template>\n            </q-input>\n          </div>\n\n          <div class=\"col-12 col-md-4\">\n            <q-select\n              v-model=\"form.currency\"\n              :options=\"currencyOptions\"\n              :label=\"$t('batch.currency')\"\n              emit-value\n              map-options\n            />\n          </div>\n        </div>\n\n        <!-- Form Actions -->\n        <div class=\"row q-gutter-sm q-mt-lg\">\n          <q-btn\n            :label=\"$t('common.cancel')\"\n            color=\"grey\"\n            flat\n            @click=\"resetForm\"\n            :disable=\"loading\"\n          />\n          <q-space />\n          <q-btn\n            :label=\"$t('batch.registerBatch')\"\n            color=\"primary\"\n            type=\"submit\"\n            :loading=\"loading\"\n            icon=\"add_circle\"\n          />\n        </div>\n      </q-form>\n    </q-card-section>\n  </q-card>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useBatchStore } from 'src/stores/batch';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useFormValidation } from 'src/composables/useFormValidation';\n  import type { CreateBatchRequest } from 'src/types/inventory';\n\n  // Props & Emits\n  interface Props {\n    embedded?: boolean;\n    prefilledProductId?: string;\n    prefilledLocationId?: string;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    embedded: false,\n  });\n\n  const emit = defineEmits<{\n    close: [];\n    success: [batch: any];\n  }>();\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const batchStore = useBatchStore();\n  const authStore = useAuthStore();\n  const { rules, patterns } = useFormValidation();\n\n  // State\n  const loading = ref(false);\n  const loadingProducts = ref(false);\n  const productOptions = ref<any[]>([]);\n\n  // Form data - using a form type that's compatible with CreateBatchRequest\n  interface BatchFormData {\n    practice_id: string;\n    product_id: string;\n    location_id: string;\n    batch_number: string;\n    supplier_batch_number: string;\n    expiry_date: string;\n    received_date: string;\n    initial_quantity: number;\n    unit_cost: number;\n    currency: string;\n    purchase_order_number: string;\n    invoice_number: string;\n    quality_check_passed: boolean;\n    quality_notes: string;\n  }\n\n  const form = ref<BatchFormData>({\n    practice_id: 'demo-practice',\n    product_id: (props.prefilledProductId ?? '') as string,\n    location_id: (props.prefilledLocationId ?? '') as string,\n    batch_number: '',\n    supplier_batch_number: '',\n    expiry_date: '',\n    received_date: new Date().toISOString().substring(0, 10),\n    initial_quantity: 0,\n    unit_cost: 0,\n    currency: 'EUR',\n    purchase_order_number: '',\n    invoice_number: '',\n    quality_check_passed: true,\n    quality_notes: '',\n  });\n\n  // Computed\n  const locationOptions = computed(() => [\n    { id: '1', name: t('location.sampleData.mainWarehouse.name') },\n    { id: '2', name: t('location.samples.emergencyStock') },\n    { id: '3', name: t('location.sampleData.treatmentRoom.name') },\n  ]);\n\n  const currencyOptions = computed(() => [\n    { label: t('currencies.eur'), value: 'EUR' },\n    { label: t('currencies.usd'), value: 'USD' },\n    { label: t('currencies.gbp'), value: 'GBP' },\n  ]);\n\n  // Methods\n  const validateExpiryDate = (value: string) => {\n    if (!value) return t('validation.required');\n\n    const expiryDate = new Date(value);\n    const today = new Date();\n\n    if (expiryDate < today) {\n      return t('batch.validation.expiryDateInPast');\n    }\n\n    return true;\n  };\n\n  const filterProducts = (val: string, update: (cb: () => void) => void) => {\n    // Product filtering logic\n    update(() => {\n      productOptions.value = [];\n    });\n  };\n\n  const resetForm = () => {\n    form.value = {\n      practice_id: 'demo-practice',\n      product_id: (props.prefilledProductId ?? '') as string,\n      location_id: (props.prefilledLocationId ?? '') as string,\n      batch_number: '',\n      supplier_batch_number: '',\n      expiry_date: '',\n      received_date: new Date().toISOString().substring(0, 10),\n      initial_quantity: 0,\n      unit_cost: 0,\n      currency: 'EUR',\n      purchase_order_number: '',\n      invoice_number: '',\n      quality_check_passed: true,\n      quality_notes: '',\n    };\n  };\n\n  const onSubmit = async () => {\n    try {\n      loading.value = true;\n\n      const batchData: CreateBatchRequest = {\n        practice_id: form.value.practice_id,\n        product_id: form.value.product_id,\n        location_id: form.value.location_id,\n        batch_number: form.value.batch_number,\n        expiry_date: form.value.expiry_date,\n        initial_quantity: form.value.initial_quantity,\n        ...(form.value.supplier_batch_number && {\n          supplier_batch_number: form.value.supplier_batch_number,\n        }),\n        ...(form.value.received_date && {\n          received_date: form.value.received_date,\n        }),\n        ...(form.value.unit_cost !== undefined && {\n          unit_cost: form.value.unit_cost,\n        }),\n        ...(form.value.currency && { currency: form.value.currency }),\n        ...(form.value.purchase_order_number && {\n          purchase_order_number: form.value.purchase_order_number,\n        }),\n        ...(form.value.invoice_number && {\n          invoice_number: form.value.invoice_number,\n        }),\n        ...(form.value.quality_check_passed !== undefined && {\n          quality_check_passed: form.value.quality_check_passed,\n        }),\n        ...(form.value.quality_notes && {\n          quality_notes: form.value.quality_notes,\n        }),\n      };\n\n      const newBatch = await batchStore.createBatch(batchData);\n\n      $q.notify({\n        type: 'positive',\n        message: t('batch.batchRegisteredSuccessfully'),\n      });\n\n      emit('success', newBatch);\n\n      if (!props.embedded) {\n        emit('close');\n      } else {\n        resetForm();\n      }\n    } catch (error) {\n      console.error(t('errors.failedToRegisterBatch'), error);\n      $q.notify({\n        type: 'negative',\n        message: t('errors.failedToRegisterBatch'),\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    // Load initial data\n  });\n</script>\n\n<style scoped>\n  .batch-registration-card {\n    min-width: 600px;\n    max-width: 900px;\n  }\n\n  @media (max-width: 768px) {\n    .batch-registration-card {\n      min-width: 100%;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\BatchReports.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [504, 578],
          "text": "class=\"report-item\"\r\n                @click=\"selectedReport = report.type\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 87,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 87,
        "endColumn": 38,
        "fix": { "range": [2864, 2926], "text": ":loading=\"generating\"\r\n                @click=\"generateReport\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6332, 6335], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6332, 6335], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 589,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 589,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18404, 18407], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18404, 18407], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\r\n  <div class=\"batch-reports\">\r\n    <div class=\"row q-gutter-md\">\r\n      <!-- Report Selection -->\r\n      <div class=\"col-12 col-md-4\">\r\n        <q-card>\r\n          <q-card-section>\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.selectReport') }}</div>\r\n\r\n            <q-list>\r\n              <q-item\r\n                v-for=\"report in reportTypes\"\r\n                :key=\"report.type\"\r\n                clickable\r\n                :active=\"selectedReport === report.type\"\r\n                @click=\"selectedReport = report.type\"\r\n                class=\"report-item\"\r\n              >\r\n                <q-item-section avatar>\r\n                  <q-icon :name=\"report.icon\" :color=\"report.color\" />\r\n                </q-item-section>\r\n                <q-item-section>\r\n                  <q-item-label>{{ report.title }}</q-item-label>\r\n                  <q-item-label caption>{{ report.description }}</q-item-label>\r\n                </q-item-section>\r\n              </q-item>\r\n            </q-list>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n\r\n      <!-- Report Configuration -->\r\n      <div class=\"col-12 col-md-8\">\r\n        <q-card>\r\n          <q-card-section>\r\n            <div class=\"text-h6 q-mb-md\">{{ getReportTitle() }}</div>\r\n\r\n            <!-- Date Range Selection -->\r\n            <div class=\"row q-gutter-md q-mb-md\">\r\n              <div class=\"col-6\">\r\n                <q-input\r\n                  v-model=\"dateRange.from\"\r\n                  :label=\"$t('common.fromDate')\"\r\n                  type=\"date\"\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <q-input\r\n                  v-model=\"dateRange.to\"\r\n                  :label=\"$t('common.toDate')\"\r\n                  type=\"date\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Additional Filters -->\r\n            <div class=\"row q-gutter-md q-mb-md\">\r\n              <div class=\"col-6\">\r\n                <q-select\r\n                  v-model=\"filters.location\"\r\n                  :options=\"locationOptions\"\r\n                  :label=\"$t('location.location')\"\r\n                  clearable\r\n                  emit-value\r\n                  map-options\r\n                />\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <q-select\r\n                  v-model=\"filters.status\"\r\n                  :options=\"statusOptions\"\r\n                  :label=\"$t('common.status')\"\r\n                  clearable\r\n                  emit-value\r\n                  map-options\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Generate Report Button -->\r\n            <div class=\"row q-gutter-sm\">\r\n              <q-btn\r\n                color=\"primary\"\r\n                icon=\"assessment\"\r\n                :label=\"$t('batch.generateReport')\"\r\n                @click=\"generateReport\"\r\n                :loading=\"generating\"\r\n              />\r\n\r\n              <q-btn\r\n                v-if=\"reportData.length\"\r\n                color=\"green\"\r\n                icon=\"download\"\r\n                :label=\"$t('batch.exportReport')\"\r\n                @click=\"exportReport\"\r\n              />\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Report Results -->\r\n    <div v-if=\"reportData.length\" class=\"q-mt-lg\">\r\n      <q-card>\r\n        <q-card-section>\r\n          <div class=\"text-h6 q-mb-md\">{{ $t('batch.reportResults') }}</div>\r\n\r\n          <!-- Summary Cards -->\r\n          <div class=\"row q-gutter-md q-mb-lg\">\r\n            <div class=\"col-12 col-md-3\">\r\n              <q-card flat bordered>\r\n                <q-card-section class=\"text-center\">\r\n                  <div class=\"text-h4 text-primary\">\r\n                    {{ summary.totalBatches }}\r\n                  </div>\r\n                  <div class=\"text-caption\">{{ $t('batch.totalBatches') }}</div>\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n\r\n            <div class=\"col-12 col-md-3\">\r\n              <q-card flat bordered>\r\n                <q-card-section class=\"text-center\">\r\n                  <div class=\"text-h4 text-red\">\r\n                    {{ summary.expiredBatches }}\r\n                  </div>\r\n                  <div class=\"text-caption\">\r\n                    {{ $t('batch.expiredBatches') }}\r\n                  </div>\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n\r\n            <div class=\"col-12 col-md-3\">\r\n              <q-card flat bordered>\r\n                <q-card-section class=\"text-center\">\r\n                  <div class=\"text-h4 text-orange\">\r\n                    {{ summary.expiringSoon }}\r\n                  </div>\r\n                  <div class=\"text-caption\">{{ $t('batch.expiringSoon') }}</div>\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n\r\n            <div class=\"col-12 col-md-3\">\r\n              <q-card flat bordered>\r\n                <q-card-section class=\"text-center\">\r\n                  <div class=\"text-h4 text-green\">\r\n                    {{ formatCurrency(summary.totalValue) }}\r\n                  </div>\r\n                  <div class=\"text-caption\">{{ $t('batch.totalValue') }}</div>\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Report Table -->\r\n          <div class=\"medical-table\">\r\n            <q-table\r\n              :rows=\"reportData\"\r\n              :columns=\"reportColumns\"\r\n              :pagination=\"{ rowsPerPage: 25 }\"\r\n              row-key=\"id\"\r\n              flat\r\n              bordered\r\n              separator=\"cell\"\r\n            />\r\n          </div>\r\n        </q-card-section>\r\n      </q-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { supabase } from 'src/boot/supabase';\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n  const authStore = useAuthStore();\r\n\r\n  // State\r\n  const selectedReport = ref('expiry-analysis');\r\n  const generating = ref(false);\r\n  const reportData = ref<any[]>([]);\r\n\r\n  const dateRange = ref({\r\n    from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .split('T')[0],\r\n    to: new Date().toISOString().split('T')[0],\r\n  });\r\n\r\n  const filters = ref({\r\n    location: null,\r\n    status: null,\r\n  });\r\n\r\n  // Computed\r\n  const reportTypes = computed(() => [\r\n    {\r\n      type: 'expiry-analysis',\r\n      title: t('batch.expiryAnalysis'),\r\n      description: t('batch.expiryAnalysisDesc'),\r\n      icon: 'schedule',\r\n      color: 'orange',\r\n    },\r\n    {\r\n      type: 'batch-usage',\r\n      title: t('batch.batchUsage'),\r\n      description: t('batch.batchUsageDesc'),\r\n      icon: 'trending_down',\r\n      color: 'blue',\r\n    },\r\n    {\r\n      type: 'fifo-compliance',\r\n      title: t('batch.fifoCompliance'),\r\n      description: t('batch.fifoComplianceDesc'),\r\n      icon: 'trending_up',\r\n      color: 'green',\r\n    },\r\n    {\r\n      type: 'batch-costs',\r\n      title: t('batch.batchCosts'),\r\n      description: t('batch.batchCostsDesc'),\r\n      icon: 'euro',\r\n      color: 'purple',\r\n    },\r\n  ]);\r\n\r\n  const locationOptions = computed(() => [\r\n    { label: t('common.allLocations'), value: null },\r\n    { label: t('location.sampleData.mainWarehouse.name'), value: 'storage' },\r\n    { label: t('location.samples.emergencyStock'), value: 'emergency' },\r\n  ]);\r\n\r\n  const statusOptions = computed(() => [\r\n    { label: t('common.allStatuses'), value: null },\r\n    { label: t('batch.status.active'), value: 'active' },\r\n    { label: t('batch.status.expired'), value: 'expired' },\r\n    { label: t('batch.status.depleted'), value: 'depleted' },\r\n  ]);\r\n\r\n  const reportColumns = computed(() => {\r\n    const baseColumns = [\r\n      {\r\n        name: 'batchNumber',\r\n        label: t('batch.batchNumber'),\r\n        field: 'batchNumber',\r\n        align: 'left',\r\n      },\r\n      {\r\n        name: 'productName',\r\n        label: t('product.product'),\r\n        field: 'productName',\r\n        align: 'left',\r\n      },\r\n      {\r\n        name: 'locationName',\r\n        label: t('location.location'),\r\n        field: 'locationName',\r\n        align: 'left',\r\n      },\r\n    ];\r\n\r\n    // Add specific columns based on report type\r\n    if (selectedReport.value === 'expiry-analysis') {\r\n      baseColumns.push(\r\n        {\r\n          name: 'expiryDate',\r\n          label: t('batch.expiryDate'),\r\n          field: 'expiryDate',\r\n          align: 'left',\r\n        },\r\n        {\r\n          name: 'daysUntilExpiry',\r\n          label: t('batch.daysUntilExpiry'),\r\n          field: 'daysUntilExpiry',\r\n          align: 'center',\r\n        }\r\n      );\r\n    }\r\n\r\n    return baseColumns;\r\n  });\r\n\r\n  const summary = computed(() => {\r\n    if (!reportData.value.length) {\r\n      return {\r\n        totalBatches: 0,\r\n        expiredBatches: 0,\r\n        expiringSoon: 0,\r\n        totalValue: 0,\r\n      };\r\n    }\r\n\r\n    return {\r\n      totalBatches: reportData.value.length,\r\n      expiredBatches: reportData.value.filter(b => b.daysUntilExpiry < 0)\r\n        .length,\r\n      expiringSoon: reportData.value.filter(\r\n        b => b.daysUntilExpiry >= 0 && b.daysUntilExpiry <= 30\r\n      ).length,\r\n      totalValue: reportData.value.reduce(\r\n        (sum, b) => sum + (b.currentQuantity * b.unitCost || 0),\r\n        0\r\n      ),\r\n    };\r\n  });\r\n\r\n  // Methods\r\n  const getReportTitle = () => {\r\n    const report = reportTypes.value.find(r => r.type === selectedReport.value);\r\n    return report?.title || t('batch.reportConfiguration');\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  const generateReport = async () => {\r\n    try {\r\n      generating.value = true;\r\n\r\n      const practiceId = authStore.clinicId || authStore.selectedPractice?.id;\r\n      if (!practiceId) {\r\n        throw new Error('No practice selected');\r\n      }\r\n\r\n      let query = supabase\r\n        .from('product_batches')\r\n        .select(\r\n          `\r\n          id,\r\n          batch_number,\r\n          expiry_date,\r\n          received_date,\r\n          current_quantity,\r\n          unit_cost,\r\n          status,\r\n          products!inner(name, sku),\r\n          practice_locations!inner(name)\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId);\r\n\r\n      // Apply date range filter\r\n      if (dateRange.value.from) {\r\n        query = query.gte('expiry_date', dateRange.value.from);\r\n      }\r\n      if (dateRange.value.to) {\r\n        query = query.lte('expiry_date', dateRange.value.to);\r\n      }\r\n\r\n      // Apply report type specific filters\r\n      switch (selectedReport.value) {\r\n        case 'expiry-analysis': {\r\n          // Show batches expiring in next 90 days\r\n          const futureDate = new Date();\r\n          futureDate.setDate(futureDate.getDate() + 90);\r\n          query = query.lte(\r\n            'expiry_date',\r\n            futureDate.toISOString().split('T')[0]\r\n          );\r\n          break;\r\n        }\r\n\r\n        case 'low-stock':\r\n          query = query.lt('current_quantity', 10); // Batches with low quantity\r\n          break;\r\n\r\n        case 'expired':\r\n          query = query.lt(\r\n            'expiry_date',\r\n            new Date().toISOString().split('T')[0]\r\n          );\r\n          break;\r\n      }\r\n\r\n      // Apply additional filters\r\n      if (filters.value.status) {\r\n        query = query.eq('status', filters.value.status);\r\n      }\r\n\r\n      const { data, error } = await query.order('expiry_date', {\r\n        ascending: true,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Transform data for display\r\n      const transformedData = (data || []).map(batch => {\r\n        const expiryDate = new Date(batch.expiry_date);\r\n        const today = new Date();\r\n        const daysUntilExpiry = Math.ceil(\r\n          (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\r\n        );\r\n\r\n        return {\r\n          id: batch.id,\r\n          batchNumber: batch.batch_number,\r\n          productName: batch.products?.name || 'Unknown Product',\r\n          productSku: batch.products?.sku || '',\r\n          locationName: batch.practice_locations?.name || 'Unknown Location',\r\n          expiryDate: batch.expiry_date,\r\n          receivedDate: batch.received_date,\r\n          daysUntilExpiry,\r\n          currentQuantity: batch.current_quantity,\r\n          unitCost: batch.unit_cost || 0,\r\n          status: batch.status,\r\n          urgencyLevel:\r\n            daysUntilExpiry < 0\r\n              ? 'expired'\r\n              : daysUntilExpiry <= 7\r\n              ? 'critical'\r\n              : daysUntilExpiry <= 30\r\n              ? 'warning'\r\n              : 'normal',\r\n        };\r\n      });\r\n\r\n      reportData.value = transformedData;\r\n\r\n      // If no real data, create sample batches for demo\r\n      if (transformedData.length === 0) {\r\n        await createSampleBatches(practiceId);\r\n        // Retry the query\r\n        const { data: retryData } = await query;\r\n        const retryTransformed = (retryData || []).map(batch => {\r\n          const expiryDate = new Date(batch.expiry_date);\r\n          const today = new Date();\r\n          const daysUntilExpiry = Math.ceil(\r\n            (expiryDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)\r\n          );\r\n\r\n          return {\r\n            id: batch.id,\r\n            batchNumber: batch.batch_number,\r\n            productName: batch.products?.name || 'Unknown Product',\r\n            productSku: batch.products?.sku || '',\r\n            locationName: batch.practice_locations?.name || 'Unknown Location',\r\n            expiryDate: batch.expiry_date,\r\n            receivedDate: batch.received_date,\r\n            daysUntilExpiry,\r\n            currentQuantity: batch.current_quantity,\r\n            unitCost: batch.unit_cost || 0,\r\n            status: batch.status,\r\n            urgencyLevel:\r\n              daysUntilExpiry < 0\r\n                ? 'expired'\r\n                : daysUntilExpiry <= 7\r\n                ? 'critical'\r\n                : daysUntilExpiry <= 30\r\n                ? 'warning'\r\n                : 'normal',\r\n          };\r\n        });\r\n        reportData.value = retryTransformed;\r\n      }\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('batch.reportGenerated'),\r\n      });\r\n    } catch (error) {\r\n      console.error(t('errors.failedToGenerateReport'), error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failedToGenerateReport'),\r\n      });\r\n\r\n      // Fallback to mock data if database fails\r\n      reportData.value = createFallbackData();\r\n    } finally {\r\n      generating.value = false;\r\n    }\r\n  };\r\n\r\n  const createSampleBatches = async (practiceId: string) => {\r\n    try {\r\n      // Get some products and locations first\r\n      const { data: products } = await supabase\r\n        .from('products')\r\n        .select('id, name')\r\n        .eq('practice_id', practiceId)\r\n        .limit(3);\r\n\r\n      const { data: locations } = await supabase\r\n        .from('practice_locations')\r\n        .select('id, name')\r\n        .eq('practice_id', practiceId)\r\n        .limit(2);\r\n\r\n      if (!products?.length || !locations?.length) {\r\n        return; // Can't create samples without products/locations\r\n      }\r\n\r\n      const sampleBatches = [];\r\n      for (let i = 0; i < 5; i++) {\r\n        const product = products[i % products.length];\r\n        const location = locations[i % locations.length];\r\n        const daysOffset = (i - 2) * 30; // Some expired, some future\r\n        const expiryDate = new Date();\r\n        expiryDate.setDate(expiryDate.getDate() + daysOffset);\r\n\r\n        sampleBatches.push({\r\n          practice_id: practiceId,\r\n          product_id: product.id,\r\n          location_id: location.id,\r\n          batch_number: `BATCH-${String(i + 1).padStart(3, '0')}`,\r\n          expiry_date: expiryDate.toISOString().split('T')[0],\r\n          received_date: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .split('T')[0], // 60 days ago\r\n          initial_quantity: Math.floor(Math.random() * 100) + 20,\r\n          current_quantity: Math.floor(Math.random() * 50) + 5,\r\n          unit_cost: Math.random() * 50 + 5,\r\n          status: 'active',\r\n        });\r\n      }\r\n\r\n      await supabase.from('product_batches').insert(sampleBatches);\r\n    } catch (error) {\r\n      console.error('Error creating sample batches:', error);\r\n    }\r\n  };\r\n\r\n  const createFallbackData = () => {\r\n    return Array.from({ length: 8 }, (_, i) => ({\r\n      id: i + 1,\r\n      batchNumber: `BATCH-${String(i + 1).padStart(3, '0')}`,\r\n      productName: `Sample Product ${i + 1}`,\r\n      productSku: `PROD-${String(i + 1).padStart(3, '0')}`,\r\n      locationName: i % 2 === 0 ? 'Hoofdlocatie' : 'Behandelkamer 1',\r\n      expiryDate: new Date(Date.now() + (i - 3) * 24 * 60 * 60 * 1000)\r\n        .toISOString()\r\n        .split('T')[0],\r\n      receivedDate: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000)\r\n        .toISOString()\r\n        .split('T')[0],\r\n      daysUntilExpiry: i - 3,\r\n      currentQuantity: Math.floor(Math.random() * 100) + 10,\r\n      unitCost: Math.random() * 50 + 5,\r\n      status: 'active',\r\n      urgencyLevel:\r\n        i <= 1\r\n          ? 'expired'\r\n          : i <= 3\r\n          ? 'critical'\r\n          : i <= 5\r\n          ? 'warning'\r\n          : 'normal',\r\n    }));\r\n  };\r\n\r\n  const exportReport = () => {\r\n    // Export report as CSV\r\n    const csvData = reportData.value.map(row => ({\r\n      [t('batch.batchNumber')]: row.batchNumber,\r\n      [t('product.product')]: row.productName,\r\n      [t('location.location')]: row.locationName,\r\n      [t('batch.expiryDate')]: row.expiryDate,\r\n      [t('batch.daysUntilExpiry')]: row.daysUntilExpiry,\r\n      [t('batch.currentQuantity')]: row.currentQuantity,\r\n      [t('batch.unitCost')]: row.unitCost,\r\n    }));\r\n\r\n    const csv = convertToCSV(csvData);\r\n    downloadCSV(csv, `batch-report-${selectedReport.value}.csv`);\r\n\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('batch.reportExported'),\r\n    });\r\n  };\r\n\r\n  const convertToCSV = (data: any[]) => {\r\n    if (!data.length) {\r\n      return '';\r\n    }\r\n\r\n    const headers = Object.keys(data[0]);\r\n    const csvHeaders = headers.join(',');\r\n    const csvRows = data.map(row =>\r\n      headers.map(header => `\"${row[header] || ''}\"`).join(',')\r\n    );\r\n\r\n    return [csvHeaders, ...csvRows].join('\\n');\r\n  };\r\n\r\n  const downloadCSV = (csv: string, filename: string) => {\r\n    const blob = new Blob([csv], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = filename;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  .batch-reports {\r\n    padding: 16px;\r\n  }\r\n\r\n  .report-item {\r\n    border-radius: 8px;\r\n    margin-bottom: 4px;\r\n  }\r\n\r\n  .report-item.q-item--active {\r\n    background-color: var(--q-primary);\r\n    color: white;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\CountryFlag.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\EmptyBatchDetailCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\ExpiringBatchesList.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-urgency' instead of 'v-slot:body-cell-urgency'.",
        "line": 13,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 13,
        "endColumn": 51,
        "fix": { "range": [321, 345], "text": "#body-cell-urgency" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 25,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 25,
        "endColumn": 51,
        "fix": { "range": [698, 722], "text": "#body-cell-actions" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\r\n  <div class=\"expiring-batches-list\">\r\n    <div class=\"medical-table\">\r\n      <q-table\r\n        :rows=\"batches\"\r\n        :columns=\"columns\"\r\n        row-key=\"batchId\"\r\n        :no-data-label=\"$t('batch.noExpiringBatches')\"\r\n        flat\r\n        bordered\r\n        separator=\"cell\"\r\n      >\r\n        <template v-slot:body-cell-urgency=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              :color=\"getUrgencyColor(props.row.urgencyLevel)\"\r\n              text-color=\"white\"\r\n              size=\"sm\"\r\n            >\r\n              {{ $t(`batch.urgency.${props.row.urgencyLevel}`) }}\r\n            </q-chip>\r\n          </q-td>\r\n        </template>\r\n\r\n        <template v-slot:body-cell-actions=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-btn\r\n              icon=\"visibility\"\r\n              size=\"sm\"\r\n              flat\r\n              round\r\n              color=\"primary\"\r\n              @click=\"$emit('batch-selected', props.row)\"\r\n            >\r\n              <q-tooltip>{{ $t('common.view') }}</q-tooltip>\r\n            </q-btn>\r\n          </q-td>\r\n        </template>\r\n      </q-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import type { ExpiringBatch } from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    batches: ExpiringBatch[];\r\n  }\r\n\r\n  defineProps<Props>();\r\n  defineEmits<{\r\n    'batch-selected': [batch: ExpiringBatch];\r\n  }>();\r\n\r\n  const { t } = useI18n();\r\n\r\n  const columns = computed(() => [\r\n    {\r\n      name: 'productName',\r\n      label: t('product.product'),\r\n      field: 'productName',\r\n      align: 'left' as const,\r\n    },\r\n    {\r\n      name: 'batchNumber',\r\n      label: t('batch.batchNumber'),\r\n      field: 'batchNumber',\r\n      align: 'left' as const,\r\n    },\r\n    {\r\n      name: 'locationName',\r\n      label: t('location.location'),\r\n      field: 'locationName',\r\n      align: 'left' as const,\r\n    },\r\n    {\r\n      name: 'currentQuantity',\r\n      label: t('inventory.quantity'),\r\n      field: 'currentQuantity',\r\n      align: 'right' as const,\r\n    },\r\n    {\r\n      name: 'daysUntilExpiry',\r\n      label: t('batch.daysUntilExpiry'),\r\n      field: 'daysUntilExpiry',\r\n      align: 'center' as const,\r\n    },\r\n    {\r\n      name: 'urgency',\r\n      label: t('batch.urgencyLevel'),\r\n      field: 'urgencyLevel',\r\n      align: 'center' as const,\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('common.actions'),\r\n      align: 'center' as const,\r\n    },\r\n  ]);\r\n\r\n  const getUrgencyColor = (urgency: keyof typeof colors | string) => {\r\n    const colors = {\r\n      expired: 'red',\r\n      critical: 'deep-orange',\r\n      warning: 'amber',\r\n      normal: 'green',\r\n    } as const;\r\n    return colors[urgency as keyof typeof colors] || 'grey';\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  .expiring-batches-list {\r\n    padding: 16px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\FifoBatchManager.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 10,
        "column": 50,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 69,
        "fix": { "range": [306, 354], "text": "class=\"q-gutter-md\" @submit=\"generateSuggestion\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 108,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 108,
        "endColumn": 29,
        "fix": { "range": [3704, 3758], "text": "icon=\"check\"\r\n                @click=\"applySuggestion\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 109,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 109,
        "endColumn": 35,
        "fix": {
          "range": [3704, 3794],
          "text": "class=\"full-width\"\r\n                @click=\"applySuggestion\"\r\n                icon=\"check\""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 126,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 126,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4196, 4199], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4196, 4199], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4381, 4384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4381, 4384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\r\n  <div class=\"fifo-batch-manager\">\r\n    <div class=\"row q-gutter-md\">\r\n      <!-- FIFO Suggestion Form -->\r\n      <div class=\"col-12 col-md-6\">\r\n        <q-card>\r\n          <q-card-section>\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoSuggestion') }}</div>\r\n\r\n            <q-form @submit=\"generateSuggestion\" class=\"q-gutter-md\">\r\n              <q-select\r\n                v-model=\"form.productId\"\r\n                :options=\"productOptions\"\r\n                option-value=\"id\"\r\n                option-label=\"name\"\r\n                :label=\"$t('product.product')\"\r\n                :rules=\"[val => !!val || $t('validation.required')]\"\r\n                emit-value\r\n                map-options\r\n              />\r\n\r\n              <q-select\r\n                v-model=\"form.locationId\"\r\n                :options=\"locationOptions\"\r\n                option-value=\"id\"\r\n                option-label=\"name\"\r\n                :label=\"$t('location.location')\"\r\n                :rules=\"[val => !!val || $t('validation.required')]\"\r\n                emit-value\r\n                map-options\r\n              />\r\n\r\n              <q-input\r\n                v-model.number=\"form.requestedQuantity\"\r\n                :label=\"$t('batch.requestedQuantity')\"\r\n                type=\"number\"\r\n                step=\"0.001\"\r\n                min=\"0\"\r\n                :rules=\"[val => val > 0 || $t('validation.mustBePositive')]\"\r\n              />\r\n\r\n              <q-btn\r\n                type=\"submit\"\r\n                color=\"primary\"\r\n                :label=\"$t('batch.generateFifoSuggestion')\"\r\n                :loading=\"loading\"\r\n                icon=\"trending_up\"\r\n              />\r\n            </q-form>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n\r\n      <!-- FIFO Results -->\r\n      <div class=\"col-12 col-md-6\">\r\n        <q-card>\r\n          <q-card-section>\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoResults') }}</div>\r\n\r\n            <div\r\n              v-if=\"!fifoResults.length\"\r\n              class=\"text-center text-grey q-py-lg\"\r\n            >\r\n              <q-icon name=\"trending_up\" size=\"48px\" class=\"q-mb-md\" />\r\n              <div>{{ $t('batch.noFifoResults') }}</div>\r\n            </div>\r\n\r\n            <q-list v-else>\r\n              <q-item\r\n                v-for=\"(result, index) in fifoResults\"\r\n                :key=\"index\"\r\n                class=\"fifo-result-item\"\r\n              >\r\n                <q-item-section avatar>\r\n                  <q-avatar color=\"primary\" text-color=\"white\">\r\n                    {{ index + 1 }}\r\n                  </q-avatar>\r\n                </q-item-section>\r\n\r\n                <q-item-section>\r\n                  <q-item-label>{{ result.batchNumber }}</q-item-label>\r\n                  <q-item-label caption>\r\n                    {{ $t('batch.useQuantity') }}: {{ result.useQuantity }}\r\n                  </q-item-label>\r\n                  <q-item-label caption>\r\n                    {{ $t('batch.expiryDate') }}:\r\n                    {{ formatDate(result.expiryDate) }}\r\n                  </q-item-label>\r\n                </q-item-section>\r\n\r\n                <q-item-section side>\r\n                  <q-chip\r\n                    :color=\"getExpiryColor(result.daysUntilExpiry)\"\r\n                    text-color=\"white\"\r\n                    size=\"sm\"\r\n                  >\r\n                    {{ result.daysUntilExpiry }}d\r\n                  </q-chip>\r\n                </q-item-section>\r\n              </q-item>\r\n            </q-list>\r\n\r\n            <div v-if=\"fifoResults.length\" class=\"q-mt-md\">\r\n              <q-btn\r\n                color=\"green\"\r\n                :label=\"$t('batch.applyFifoSuggestion')\"\r\n                @click=\"applySuggestion\"\r\n                icon=\"check\"\r\n                class=\"full-width\"\r\n              />\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar, date } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n\r\n  const emit = defineEmits<{\r\n    'suggestion-generated': [results: any[]];\r\n  }>();\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n\r\n  // State\r\n  const loading = ref(false);\r\n  const fifoResults = ref<any[]>([]);\r\n\r\n  const form = ref({\r\n    productId: '',\r\n    locationId: '',\r\n    requestedQuantity: 0,\r\n  });\r\n\r\n  // Mock options for now\r\n  const productOptions = ref([\r\n    { id: '1', name: t('product.samples.syringeBD') },\r\n    { id: '2', name: t('product.samples.needleBD') },\r\n  ]);\r\n\r\n  const locationOptions = ref([\r\n    { id: '1', name: t('location.sampleData.mainWarehouse.name') },\r\n    { id: '2', name: t('location.samples.emergencyStock') },\r\n  ]);\r\n\r\n  // Methods\r\n  const formatDate = (dateStr: string) => {\r\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\r\n  };\r\n\r\n  const getExpiryColor = (days: number) => {\r\n    if (days < 0) return 'red';\r\n    if (days <= 7) return 'deep-orange';\r\n    if (days <= 30) return 'amber';\r\n    return 'green';\r\n  };\r\n\r\n  const generateSuggestion = async () => {\r\n    try {\r\n      loading.value = true;\r\n\r\n      // Call the FIFO function from our batch store\r\n      const results = await batchStore.getFifoBatches(\r\n        form.value.productId,\r\n        form.value.locationId,\r\n        form.value.requestedQuantity\r\n      );\r\n\r\n      fifoResults.value = results.map((result, index) => ({\r\n        ...result,\r\n        daysUntilExpiry: Math.ceil(\r\n          (new Date(result.expiryDate).getTime() - Date.now()) /\r\n            (1000 * 60 * 60 * 24)\r\n        ),\r\n      }));\r\n\r\n      emit('suggestion-generated', fifoResults.value);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('batch.fifoSuggestionGenerated'),\r\n      });\r\n    } catch (error) {\r\n      console.error(t('errors.failedToGenerateSuggestion'), error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failedToGenerateSuggestion'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const applySuggestion = () => {\r\n    $q.dialog({\r\n      title: t('batch.confirmFifoApplication'),\r\n      message: t('batch.confirmFifoMessage'),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(() => {\r\n      // Apply the FIFO suggestion\r\n      // This would typically create stock movements for each batch\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('batch.fifoAppliedSuccessfully'),\r\n      });\r\n\r\n      // Reset form\r\n      form.value = {\r\n        productId: '',\r\n        locationId: '',\r\n        requestedQuantity: 0,\r\n      };\r\n      fifoResults.value = [];\r\n    });\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  .fifo-batch-manager {\r\n    padding: 16px;\r\n  }\r\n\r\n  .fifo-result-item {\r\n    border: 1px solid #e0e0e0;\r\n    border-radius: 8px;\r\n    margin-bottom: 8px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\PageLayout.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'backgroundColor' requires default value to be set.",
        "line": 33,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 33,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <q-page :class=\"pageClasses\">\r\n    <div class=\"page-layout-container\">\r\n      <!-- Page Header Slot -->\r\n      <div v-if=\"hasHeader\" class=\"page-header-section\">\r\n        <slot name=\"header\" />\r\n      </div>\r\n\r\n      <!-- Main Content -->\r\n      <div class=\"page-content-section\">\r\n        <slot />\r\n      </div>\r\n\r\n      <!-- Page Footer Slot -->\r\n      <div v-if=\"hasFooter\" class=\"page-footer-section\">\r\n        <slot name=\"footer\" />\r\n      </div>\r\n    </div>\r\n  </q-page>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed, useSlots } from 'vue';\r\n\r\n  interface Props {\r\n    maxWidth?: string | number;\r\n    padding?: string;\r\n    verticalSpacing?: string;\r\n    fullWidth?: boolean;\r\n    noTopPadding?: boolean;\r\n    noBottomPadding?: boolean;\r\n    noHorizontalPadding?: boolean;\r\n    backgroundColor?: string;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    maxWidth: '1400px',\r\n    padding: 'lg',\r\n    verticalSpacing: 'lg',\r\n    fullWidth: false,\r\n    noTopPadding: false,\r\n    noBottomPadding: false,\r\n    noHorizontalPadding: false,\r\n  });\r\n\r\n  const slots = useSlots();\r\n\r\n  const hasHeader = computed(() => !!slots.header);\r\n  const hasFooter = computed(() => !!slots.footer);\r\n\r\n  const pageClasses = computed(() => {\r\n    const classes = ['page-layout'];\r\n\r\n    if (!props.noTopPadding && !props.noBottomPadding) {\r\n      classes.push(`q-py-${props.verticalSpacing}`);\r\n    } else {\r\n      if (!props.noTopPadding) classes.push(`q-pt-${props.verticalSpacing}`);\r\n      if (!props.noBottomPadding) classes.push(`q-pb-${props.verticalSpacing}`);\r\n    }\r\n\r\n    // Remove horizontal padding from Quasar classes - we handle it in CSS\r\n    // if (!props.noHorizontalPadding) {\r\n    //   classes.push(`q-px-${props.padding}`)\r\n    // }\r\n\r\n    return classes;\r\n  });\r\n\r\n  const containerStyles = computed(() => {\r\n    const styles: Record<string, string> = {};\r\n\r\n    if (!props.fullWidth) {\r\n      if (typeof props.maxWidth === 'number') {\r\n        styles.maxWidth = `${props.maxWidth}px`;\r\n      } else {\r\n        styles.maxWidth = props.maxWidth;\r\n      }\r\n    }\r\n\r\n    if (props.backgroundColor) {\r\n      styles.backgroundColor = props.backgroundColor;\r\n    }\r\n\r\n    return styles;\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .page-layout {\r\n    min-height: 100%;\r\n\r\n    .page-layout-container {\r\n      max-width: v-bind('containerStyles.maxWidth');\r\n      margin: 0 auto;\r\n      width: 100%;\r\n      background-color: v-bind('containerStyles.backgroundColor');\r\n      box-sizing: border-box; // Ensure padding is included in width calculation\r\n      overflow-x: hidden; // Prevent horizontal scroll only on the container\r\n\r\n      // Apply consistent horizontal padding\r\n      padding-left: var(--space-6);\r\n      padding-right: var(--space-6);\r\n\r\n      @media (max-width: 1280px) {\r\n        padding-left: var(--space-4);\r\n        padding-right: var(--space-4);\r\n      }\r\n\r\n      @media (max-width: 640px) {\r\n        padding-left: var(--space-3);\r\n        padding-right: var(--space-3);\r\n      }\r\n    }\r\n\r\n    .page-header-section {\r\n      margin-bottom: var(--space-8);\r\n\r\n      @media (max-width: 768px) {\r\n        margin-bottom: var(--space-6);\r\n      }\r\n    }\r\n\r\n    .page-content-section {\r\n      flex: 1;\r\n\r\n      // Ensure proper spacing between content elements\r\n      > * + * {\r\n        margin-top: var(--space-6);\r\n\r\n        @media (max-width: 768px) {\r\n          margin-top: var(--space-4);\r\n        }\r\n      }\r\n    }\r\n\r\n    .page-footer-section {\r\n      margin-top: var(--space-8);\r\n\r\n      @media (max-width: 768px) {\r\n        margin-top: var(--space-6);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Ensure proper containment without breaking scroll behavior\r\n  .page-layout {\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n\r\n    // Ensure content doesn't exceed container width\r\n    .page-content-section {\r\n      width: 100%;\r\n      max-width: 100%;\r\n\r\n      // Apply to direct children to prevent overflow\r\n      > * {\r\n        max-width: 100%;\r\n        box-sizing: border-box;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\PageTitle.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":id\" should go before \"class\".",
        "line": 17,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 77,
        "fix": {
          "range": [477, 573],
          "text": ":id=\"`page-title-${title.replace(/\\s+/g, '-').toLowerCase()}`\"\r\n              class=\"page-title\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 74,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 74,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 75,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 75,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'badge' requires default value to be set.",
        "line": 78,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 78,
        "endColumn": 20
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'meta' requires default value to be set.",
        "line": 80,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 80,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2405, 2408], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2405, 2408], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\r\n  <div class=\"page-title-component animate-fade-in\">\r\n    <div class=\"page-title-content\">\r\n      <div class=\"title-section\">\r\n        <div class=\"title-wrapper\">\r\n          <q-icon\r\n            v-if=\"props.icon\"\r\n            :name=\"props.icon\"\r\n            :size=\"props.iconSize\"\r\n            :color=\"props.iconColor\"\r\n            class=\"title-icon\"\r\n            aria-hidden=\"true\"\r\n          />\r\n          <div class=\"title-text\">\r\n            <h1\r\n              class=\"page-title\"\r\n              :id=\"`page-title-${title.replace(/\\s+/g, '-').toLowerCase()}`\"\r\n            >\r\n              {{ props.title }}\r\n            </h1>\r\n            <p v-if=\"props.subtitle\" class=\"page-subtitle\">\r\n              {{ props.subtitle }}\r\n            </p>\r\n          </div>\r\n          <q-badge\r\n            v-if=\"props.badge\"\r\n            :color=\"props.badgeColor\"\r\n            :label=\"props.badge\"\r\n            class=\"title-badge\"\r\n            :aria-label=\"`Status: ${props.badge}`\"\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          v-if=\"props.meta && props.meta.length > 0\"\r\n          class=\"title-meta\"\r\n          role=\"list\"\r\n          :aria-label=\"$t('common.accessibility.pageMetadata')\"\r\n        >\r\n          <div\r\n            v-for=\"(item, index) in props.meta\"\r\n            :key=\"index\"\r\n            class=\"meta-item\"\r\n            role=\"listitem\"\r\n          >\r\n            <q-icon :name=\"item.icon\" size=\"16px\" aria-hidden=\"true\" />\r\n            <span>{{ item.text }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div\r\n        v-if=\"slots.actions\"\r\n        class=\"title-actions\"\r\n        role=\"group\"\r\n        :aria-label=\"$t('common.accessibility.pageActions')\"\r\n      >\r\n        <slot name=\"actions\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  // No additional imports needed for this component\r\n\r\n  interface MetaItem {\r\n    icon: string;\r\n    text: string;\r\n  }\r\n\r\n  interface Props {\r\n    title: string;\r\n    subtitle?: string;\r\n    icon?: string;\r\n    iconSize?: string;\r\n    iconColor?: string;\r\n    badge?: string;\r\n    badgeColor?: string;\r\n    meta?: MetaItem[];\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    iconSize: '24px',\r\n    iconColor: 'primary',\r\n    badgeColor: 'primary',\r\n  });\r\n\r\n  // Define slots using defineSlots instead of useSlots\r\n  const slots = defineSlots<{\r\n    actions?: () => any;\r\n  }>();\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .page-title-component {\r\n    margin-bottom: var(--space-8);\r\n\r\n    .page-title-content {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: flex-start;\r\n      gap: var(--space-6);\r\n      flex-wrap: wrap;\r\n\r\n      @media (max-width: 768px) {\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        gap: var(--space-4);\r\n      }\r\n    }\r\n\r\n    .title-section {\r\n      flex: 1;\r\n      min-width: 0;\r\n    }\r\n\r\n    .title-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-3);\r\n      margin-bottom: var(--space-2);\r\n\r\n      .title-icon {\r\n        flex-shrink: 0;\r\n        align-self: flex-start;\r\n        margin-top: 2px;\r\n        // Font size handled by centralized icon system in app.scss\r\n      }\r\n\r\n      .title-text {\r\n        flex: 1;\r\n        min-width: 0;\r\n      }\r\n\r\n      .title-badge {\r\n        align-self: flex-start;\r\n        margin-top: var(--space-1);\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    .page-title {\r\n      font-size: var(--text-3xl);\r\n      font-weight: var(--font-weight-bold);\r\n      line-height: var(--leading-tight);\r\n      color: var(--neutral-900);\r\n      margin: 0;\r\n      margin-bottom: var(--space-1);\r\n      letter-spacing: -0.025em;\r\n\r\n      @media (max-width: 768px) {\r\n        font-size: var(--text-2xl);\r\n      }\r\n    }\r\n\r\n    .page-subtitle {\r\n      font-size: var(--text-base);\r\n      font-weight: var(--font-weight-normal);\r\n      line-height: var(--leading-relaxed);\r\n      color: var(--neutral-600);\r\n      margin: 0;\r\n      max-width: 60ch;\r\n\r\n      @media (max-width: 768px) {\r\n        font-size: var(--text-sm);\r\n      }\r\n    }\r\n\r\n    .title-meta {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-6);\r\n      margin-top: var(--space-3);\r\n      flex-wrap: wrap;\r\n\r\n      @media (max-width: 640px) {\r\n        gap: var(--space-4);\r\n      }\r\n\r\n      .meta-item {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: var(--space-2);\r\n        font-size: var(--text-sm);\r\n        font-weight: var(--font-weight-medium);\r\n        color: var(--neutral-600);\r\n\r\n        .q-icon {\r\n          color: var(--brand-primary);\r\n        }\r\n      }\r\n    }\r\n\r\n    .title-actions {\r\n      display: flex;\r\n      align-items: flex-start;\r\n      gap: var(--space-3);\r\n      flex-wrap: wrap;\r\n      padding-top: 8px; // Move buttons down slightly\r\n\r\n      @media (max-width: 768px) {\r\n        width: 100%;\r\n        justify-content: flex-start;\r\n        padding-top: 12px; // More space on mobile\r\n      }\r\n\r\n      @media (max-width: 480px) {\r\n        :deep(.q-btn) {\r\n          flex: 1;\r\n          min-width: 120px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode styles\r\n  body.body--dark {\r\n    .page-title {\r\n      color: var(--neutral-900);\r\n    }\r\n\r\n    .page-subtitle {\r\n      color: var(--neutral-600);\r\n    }\r\n\r\n    .meta-item {\r\n      color: var(--neutral-600);\r\n    }\r\n  }\r\n\r\n  // Animation\r\n  @keyframes fade-in {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(10px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n\r\n  .animate-fade-in {\r\n    animation: fade-in 0.3s ease-out;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenColorPicker.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@input\".",
        "line": 9,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 28,
        "fix": {
          "range": [198, 268],
          "text": "class=\"color-input\"\r\n        @input=\"updateValue($event.target.value)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@blur\".",
        "line": 16,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 27,
        "fix": { "range": [404, 453], "text": "class=\"color-text\"\r\n        @blur=\"validateColor\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":placeholder\" should go before \"@blur\".",
        "line": 17,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [404, 490],
          "text": ":placeholder=\"token.cssVar\"\r\n        @blur=\"validateColor\"\r\n        class=\"color-text\""
        }
      },
      {
        "ruleId": "vue/no-mutating-props",
        "severity": 2,
        "message": "Unexpected mutation of \"token\" prop.",
        "line": 47,
        "column": 3,
        "nodeType": "AssignmentExpression",
        "messageId": "unexpectedMutation",
        "endLine": 47,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\r\n  <div class=\"token-color-picker\">\r\n    <label>{{ token.name }}</label>\r\n    <div class=\"color-input-wrapper\">\r\n      <input\r\n        type=\"color\"\r\n        :value=\"token.value\"\r\n        @input=\"updateValue($event.target.value)\"\r\n        class=\"color-input\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        :value=\"token.value\"\r\n        @input=\"updateValue($event.target.value)\"\r\n        @blur=\"validateColor\"\r\n        class=\"color-text\"\r\n        :placeholder=\"token.cssVar\"\r\n      />\r\n    </div>\r\n    <div v-if=\"token.description\" class=\"token-description\">\r\n      {{ token.description }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\ninterface Token {\r\n  name: string;\r\n  cssVar: string;\r\n  value: string;\r\n  type: 'color' | 'size' | 'number';\r\n  description?: string;\r\n}\r\n\r\ninterface Props {\r\n  token: Token;\r\n}\r\n\r\ninterface Emits {\r\n  (e: 'update', cssVar: string, value: string): void;\r\n}\r\n\r\nconst props = defineProps<Props>();\r\nconst emit = defineEmits<Emits>();\r\n\r\nfunction updateValue(value: string) {\r\n  props.token.value = value;\r\n  emit('update', props.token.cssVar, value);\r\n}\r\n\r\nfunction validateColor(event: Event) {\r\n  const value = (event.target as HTMLInputElement).value;\r\n  // Basic hex color validation\r\n  if (!/^#[0-9A-F]{6}$/i.test(value)) {\r\n    // Reset to previous valid value if invalid\r\n    (event.target as HTMLInputElement).value = props.token.value;\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.token-color-picker {\r\n  .color-input-wrapper {\r\n    display: flex;\r\n    gap: var(--space-2);\r\n    margin-top: var(--space-2);\r\n  }\r\n\r\n  .color-input {\r\n    width: 40px;\r\n    height: 32px;\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-sm);\r\n    cursor: pointer;\r\n  }\r\n\r\n  .color-text {\r\n    flex: 1;\r\n    padding: var(--space-2);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-sm);\r\n    font-family: var(--font-family-mono);\r\n    font-size: var(--text-sm);\r\n  }\r\n\r\n  label {\r\n    font-size: var(--text-sm);\r\n    font-weight: var(--font-weight-medium);\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .token-description {\r\n    font-size: var(--text-xs);\r\n    color: var(--text-tertiary);\r\n    margin-top: var(--space-1);\r\n  }\r\n}\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenInspector.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 11,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 33,
        "fix": { "range": [241, 295], "text": ":disable=\"!hasChanges\"\r\n          @click=\"resetTokens\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":color\" should go before \"@click\".",
        "line": 20,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 20,
        "endColumn": 54,
        "fix": {
          "range": [491, 572],
          "text": ":color=\"isPersistent ? 'positive' : 'grey'\"\r\n          @click=\"togglePersistence\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\r\n  <div class=\"token-inspector\">\r\n    <div class=\"inspector-header\">\r\n      <h3>🎨 Token Inspector</h3>\r\n      <div class=\"inspector-controls\">\r\n        <q-btn\r\n          flat\r\n          dense\r\n          icon=\"refresh\"\r\n          @click=\"resetTokens\"\r\n          :disable=\"!hasChanges\"\r\n        >\r\n          <q-tooltip>Reset to defaults</q-tooltip>\r\n        </q-btn>\r\n        <q-btn\r\n          flat\r\n          dense\r\n          :icon=\"isPersistent ? 'save' : 'save_alt'\"\r\n          @click=\"togglePersistence\"\r\n          :color=\"isPersistent ? 'positive' : 'grey'\"\r\n        >\r\n          <q-tooltip>{{ isPersistent ? 'Auto-save enabled' : 'Enable auto-save' }}</q-tooltip>\r\n        </q-btn>\r\n        <q-btn\r\n          flat\r\n          dense\r\n          :icon=\"isExpanded ? 'expand_less' : 'expand_more'\"\r\n          @click=\"isExpanded = !isExpanded\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"isExpanded\" class=\"inspector-content\">\r\n      <!-- Brand Colors -->\r\n      <div class=\"token-group\">\r\n        <h4>Brand Colors</h4>\r\n        <div class=\"token-grid\">\r\n          <TokenColorPicker\r\n            v-for=\"token in brandTokens\"\r\n            :key=\"token.name\"\r\n            :token=\"token\"\r\n            @update=\"updateToken\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Semantic Colors -->\r\n      <div class=\"token-group\">\r\n        <h4>Semantic Colors</h4>\r\n        <div class=\"token-grid\">\r\n          <TokenColorPicker\r\n            v-for=\"token in semanticTokens\"\r\n            :key=\"token.name\"\r\n            :token=\"token\"\r\n            @update=\"updateToken\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Spacing -->\r\n      <div class=\"token-group\">\r\n        <h4>Spacing</h4>\r\n        <div class=\"token-grid\">\r\n          <TokenSlider\r\n            v-for=\"token in spacingTokens\"\r\n            :key=\"token.name\"\r\n            :token=\"token\"\r\n            @update=\"updateToken\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Typography -->\r\n      <div class=\"token-group\">\r\n        <h4>Typography</h4>\r\n        <div class=\"token-grid\">\r\n          <TokenSlider\r\n            v-for=\"token in typographyTokens\"\r\n            :key=\"token.name\"\r\n            :token=\"token\"\r\n            @update=\"updateToken\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Border Radius -->\r\n      <div class=\"token-group\">\r\n        <h4>Border Radius</h4>\r\n        <div class=\"token-grid\">\r\n          <TokenSlider\r\n            v-for=\"token in radiusTokens\"\r\n            :key=\"token.name\"\r\n            :token=\"token\"\r\n            @update=\"updateToken\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Live Preview -->\r\n      <div class=\"token-group\">\r\n        <h4>Live Preview</h4>\r\n        <div class=\"preview-grid\">\r\n          <!-- Button Preview -->\r\n          <div class=\"preview-item\">\r\n            <h5>Buttons</h5>\r\n            <div class=\"preview-buttons\">\r\n              <q-btn color=\"primary\" label=\"Primary\" />\r\n              <q-btn outline color=\"primary\" label=\"Outline\" />\r\n              <q-btn flat color=\"primary\" label=\"Flat\" />\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Card Preview -->\r\n          <div class=\"preview-item\">\r\n            <h5>Card</h5>\r\n            <div class=\"preview-card\">\r\n              <div class=\"card-header\">\r\n                <h6>Sample Card</h6>\r\n                <p>This card updates with your token changes</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Form Preview -->\r\n          <div class=\"preview-item\">\r\n            <h5>Form Controls</h5>\r\n            <div class=\"preview-form\">\r\n              <q-input\r\n                outlined\r\n                label=\"Sample Input\"\r\n                placeholder=\"Type here...\"\r\n                style=\"margin-bottom: 12px\"\r\n              />\r\n              <q-select\r\n                outlined\r\n                label=\"Sample Select\"\r\n                :options=\"['Option 1', 'Option 2']\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, onMounted } from 'vue';\r\n  import TokenColorPicker from './TokenColorPicker.vue';\r\n  import TokenSlider from './TokenSlider.vue';\r\n\r\ninterface Token {\r\n  name: string;\r\n  cssVar: string;\r\n  value: string;\r\n  type: 'color' | 'size' | 'number';\r\n  min?: number;\r\n  max?: number;\r\n  unit?: string;\r\n  description?: string;\r\n}\r\n\r\nconst isExpanded = ref(true);\r\nconst isPersistent = ref(false);\r\nconst hasChanges = ref(false);\r\nconst originalValues = ref<Record<string, string>>({});\r\n\r\n// Define token categories\r\nconst brandTokens = ref<Token[]>([\r\n  { name: 'Primary', cssVar: '--brand-primary', value: '#1e3a8a', type: 'color', description: 'Main brand color' },\r\n  { name: 'Secondary', cssVar: '--brand-secondary', value: '#0f766e', type: 'color', description: 'Secondary brand color' },\r\n  { name: 'Accent', cssVar: '--brand-accent', value: '#0d9488', type: 'color', description: 'Accent color' },\r\n]);\r\n\r\nconst semanticTokens = ref<Token[]>([\r\n  { name: 'Success', cssVar: '--brand-success', value: '#065f46', type: 'color' },\r\n  { name: 'Warning', cssVar: '--brand-warning', value: '#d97706', type: 'color' },\r\n  { name: 'Danger', cssVar: '--brand-danger', value: '#b91c1c', type: 'color' },\r\n  { name: 'Info', cssVar: '--brand-info', value: '#1e40af', type: 'color' },\r\n]);\r\n\r\nconst spacingTokens = ref<Token[]>([\r\n  { name: 'Space 2', cssVar: '--space-2', value: '8', type: 'size', min: 2, max: 32, unit: 'px' },\r\n  { name: 'Space 3', cssVar: '--space-3', value: '12', type: 'size', min: 4, max: 48, unit: 'px' },\r\n  { name: 'Space 4', cssVar: '--space-4', value: '16', type: 'size', min: 8, max: 64, unit: 'px' },\r\n  { name: 'Space 6', cssVar: '--space-6', value: '24', type: 'size', min: 12, max: 96, unit: 'px' },\r\n]);\r\n\r\nconst typographyTokens = ref<Token[]>([\r\n  { name: 'Text Base', cssVar: '--text-base', value: '16', type: 'size', min: 12, max: 24, unit: 'px' },\r\n  { name: 'Text SM', cssVar: '--text-sm', value: '14', type: 'size', min: 10, max: 20, unit: 'px' },\r\n  { name: 'Text LG', cssVar: '--text-lg', value: '18', type: 'size', min: 14, max: 28, unit: 'px' },\r\n  { name: 'Text XL', cssVar: '--text-xl', value: '20', type: 'size', min: 16, max: 32, unit: 'px' },\r\n]);\r\n\r\nconst radiusTokens = ref<Token[]>([\r\n  { name: 'Radius SM', cssVar: '--radius-sm', value: '4', type: 'size', min: 0, max: 24, unit: 'px' },\r\n  { name: 'Radius MD', cssVar: '--radius-md', value: '12', type: 'size', min: 0, max: 32, unit: 'px' },\r\n  { name: 'Radius LG', cssVar: '--radius-lg', value: '12', type: 'size', min: 0, max: 32, unit: 'px' },\r\n  { name: 'Radius XL', cssVar: '--radius-xl', value: '16', type: 'size', min: 0, max: 48, unit: 'px' },\r\n]);\r\n\r\n// Get current CSS variable value\r\nfunction getCurrentValue(cssVar: string): string {\r\n  return getComputedStyle(document.documentElement).getPropertyValue(cssVar).trim();\r\n}\r\n\r\n// Update token value\r\nfunction updateToken(cssVar: string, value: string) {\r\n  document.documentElement.style.setProperty(cssVar, value);\r\n  hasChanges.value = true;\r\n  \r\n  if (isPersistent.value) {\r\n    saveToLocalStorage();\r\n  }\r\n}\r\n\r\n// Reset all tokens to original values\r\nfunction resetTokens() {\r\n  Object.entries(originalValues.value).forEach(([cssVar, value]) => {\r\n    document.documentElement.style.setProperty(cssVar, value);\r\n  });\r\n  \r\n  // Update token objects with original values\r\n  [...brandTokens.value, ...semanticTokens.value, ...spacingTokens.value, ...typographyTokens.value, ...radiusTokens.value]\r\n    .forEach(token => {\r\n      token.value = originalValues.value[token.cssVar] || token.value;\r\n    });\r\n  \r\n  hasChanges.value = false;\r\n  \r\n  if (isPersistent.value) {\r\n    localStorage.removeItem('remcura-token-overrides');\r\n  }\r\n}\r\n\r\n// Toggle persistence\r\nfunction togglePersistence() {\r\n  isPersistent.value = !isPersistent.value;\r\n  \r\n  if (isPersistent.value) {\r\n    saveToLocalStorage();\r\n  } else {\r\n    localStorage.removeItem('remcura-token-overrides');\r\n  }\r\n}\r\n\r\n// Save current overrides to localStorage\r\nfunction saveToLocalStorage() {\r\n  const overrides: Record<string, string> = {};\r\n  \r\n  [...brandTokens.value, ...semanticTokens.value, ...spacingTokens.value, ...typographyTokens.value, ...radiusTokens.value]\r\n    .forEach(token => {\r\n      const currentValue = getCurrentValue(token.cssVar);\r\n      if (currentValue && currentValue !== originalValues.value[token.cssVar]) {\r\n        overrides[token.cssVar] = currentValue;\r\n      }\r\n    });\r\n  \r\n  localStorage.setItem('remcura-token-overrides', JSON.stringify(overrides));\r\n}\r\n\r\n// Load overrides from localStorage\r\nfunction loadFromLocalStorage() {\r\n  const stored = localStorage.getItem('remcura-token-overrides');\r\n  if (stored) {\r\n    try {\r\n      const overrides = JSON.parse(stored);\r\n      Object.entries(overrides).forEach(([cssVar, value]) => {\r\n        document.documentElement.style.setProperty(cssVar, value as string);\r\n      });\r\n      isPersistent.value = true;\r\n      hasChanges.value = Object.keys(overrides).length > 0;\r\n    } catch (e) {\r\n      console.warn('Failed to load token overrides from localStorage:', e);\r\n    }\r\n  }\r\n}\r\n\r\n// Initialize component\r\nonMounted(() => {\r\n  // Store original values\r\n  [...brandTokens.value, ...semanticTokens.value, ...spacingTokens.value, ...typographyTokens.value, ...radiusTokens.value]\r\n    .forEach(token => {\r\n      const currentValue = getCurrentValue(token.cssVar);\r\n      originalValues.value[token.cssVar] = currentValue || token.value;\r\n      \r\n      // Update token value with current CSS value if different\r\n      if (currentValue && currentValue !== token.value) {\r\n        token.value = currentValue;\r\n      }\r\n    });\r\n  \r\n  // Load any saved overrides\r\n  loadFromLocalStorage();\r\n});\r\n  // Initialize component\r\n  onMounted(() => {\r\n    // Store original values\r\n    [...brandTokens.value, ...semanticTokens.value, ...spacingTokens.value, ...typographyTokens.value, ...radiusTokens.value]\r\n      .forEach(token => {\r\n        const currentValue = getCurrentValue(token.cssVar);\r\n        originalValues.value[token.cssVar] = currentValue || token.value;\r\n        \r\n        // Update token value with current CSS value if different\r\n        if (currentValue && currentValue !== token.value) {\r\n          token.value = currentValue;\r\n        }\r\n      });\r\n    \r\n    // Load any saved overrides\r\n    loadFromLocalStorage();\r\n  });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.token-inspector {\r\n  background: var(--bg-secondary);\r\n  border: 1px solid var(--border-primary);\r\n  border-radius: var(--radius-lg);\r\n  overflow: hidden;\r\n  box-shadow: var(--shadow-sm);\r\n}\r\n\r\n.inspector-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: var(--space-4);\r\n  background: var(--bg-primary);\r\n  border-bottom: 1px solid var(--border-primary);\r\n\r\n  h3 {\r\n    margin: 0;\r\n    font-size: var(--text-lg);\r\n    font-weight: var(--font-weight-semibold);\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .inspector-controls {\r\n    display: flex;\r\n    gap: var(--space-2);\r\n  }\r\n}\r\n\r\n.inspector-content {\r\n  padding: var(--space-4);\r\n  max-height: 600px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.token-group {\r\n  margin-bottom: var(--space-6);\r\n\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  h4 {\r\n    margin: 0 0 var(--space-3) 0;\r\n    font-size: var(--text-base);\r\n    font-weight: var(--font-weight-semibold);\r\n    color: var(--text-primary);\r\n    border-bottom: 1px solid var(--border-primary);\r\n    padding-bottom: var(--space-2);\r\n  }\r\n}\r\n\r\n.token-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: var(--space-4);\r\n}\r\n\r\n.token-color-picker {\r\n  .color-input-wrapper {\r\n    display: flex;\r\n    gap: var(--space-2);\r\n    margin-top: var(--space-2);\r\n  }\r\n\r\n  .color-input {\r\n    width: 40px;\r\n    height: 32px;\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-sm);\r\n    cursor: pointer;\r\n  }\r\n\r\n  .color-text {\r\n    flex: 1;\r\n    padding: var(--space-2);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-sm);\r\n    font-family: var(--font-family-mono);\r\n    font-size: var(--text-sm);\r\n  }\r\n\r\n  label {\r\n    font-size: var(--text-sm);\r\n    font-weight: var(--font-weight-medium);\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .token-description {\r\n    font-size: var(--text-xs);\r\n    color: var(--text-tertiary);\r\n    margin-top: var(--space-1);\r\n  }\r\n}\r\n\r\n.token-slider {\r\n  label {\r\n    display: block;\r\n    font-size: var(--text-sm);\r\n    font-weight: var(--font-weight-medium);\r\n    color: var(--text-primary);\r\n    margin-bottom: var(--space-2);\r\n  }\r\n\r\n  .slider-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n  }\r\n\r\n  .token-range {\r\n    flex: 1;\r\n  }\r\n\r\n  .value-display {\r\n    font-family: var(--font-family-mono);\r\n    font-size: var(--text-sm);\r\n    color: var(--text-secondary);\r\n    min-width: 60px;\r\n    text-align: right;\r\n  }\r\n}\r\n\r\n.preview-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: var(--space-4);\r\n}\r\n\r\n.preview-item {\r\n  h5 {\r\n    margin: 0 0 var(--space-3) 0;\r\n    font-size: var(--text-sm);\r\n    font-weight: var(--font-weight-semibold);\r\n    color: var(--text-primary);\r\n  }\r\n}\r\n\r\n.preview-buttons {\r\n  display: flex;\r\n  gap: var(--space-2);\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.preview-card {\r\n  background: var(--bg-secondary);\r\n  border: 1px solid var(--border-primary);\r\n  border-radius: var(--radius-lg);\r\n  padding: var(--space-4);\r\n  box-shadow: var(--shadow-sm);\r\n\r\n  .card-header {\r\n    h6 {\r\n      margin: 0 0 var(--space-2) 0;\r\n      font-size: var(--text-base);\r\n      font-weight: var(--font-weight-semibold);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    p {\r\n      margin: 0;\r\n      font-size: var(--text-sm);\r\n      color: var(--text-secondary);\r\n    }\r\n  }\r\n}\r\n\r\n.preview-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: var(--space-3);\r\n}\r\n\r\n// Dark mode adjustments\r\nhtml.dark {\r\n  .token-inspector {\r\n    .color-input,\r\n    .color-text {\r\n      background: var(--bg-tertiary);\r\n      color: var(--text-primary);\r\n    }\r\n  }\r\n}\r\n\r\n// Responsive adjustments\r\n@media (max-width: 768px) {\r\n  .token-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .preview-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .inspector-content {\r\n    max-height: 400px;\r\n  }\r\n}\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\TokenSlider.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":min\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 30,
        "fix": { "range": [175, 239], "text": ":min=\"token.min || 0\"\r\n        @update:model-value=\"updateValue\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":max\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 32,
        "fix": {
          "range": [175, 272],
          "text": ":max=\"token.max || 100\"\r\n        @update:model-value=\"updateValue\"\r\n        :min=\"token.min || 0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":step\" should go before \"@update:model-value\".",
        "line": 10,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 18,
        "fix": {
          "range": [175, 291],
          "text": ":step=\"1\"\r\n        @update:model-value=\"updateValue\"\r\n        :min=\"token.min || 0\"\r\n        :max=\"token.max || 100\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@update:model-value\".",
        "line": 11,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 24,
        "fix": {
          "range": [175, 316],
          "text": "color=\"primary\"\r\n        @update:model-value=\"updateValue\"\r\n        :min=\"token.min || 0\"\r\n        :max=\"token.max || 100\"\r\n        :step=\"1\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@update:model-value\".",
        "line": 12,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 28,
        "fix": {
          "range": [175, 345],
          "text": "class=\"token-range\"\r\n        @update:model-value=\"updateValue\"\r\n        :min=\"token.min || 0\"\r\n        :max=\"token.max || 100\"\r\n        :step=\"1\"\r\n        color=\"primary\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "<template>\r\n  <div class=\"token-slider\">\r\n    <label>{{ token.name }}</label>\r\n    <div class=\"slider-wrapper\">\r\n      <q-slider\r\n        :model-value=\"numericValue\"\r\n        @update:model-value=\"updateValue\"\r\n        :min=\"token.min || 0\"\r\n        :max=\"token.max || 100\"\r\n        :step=\"1\"\r\n        color=\"primary\"\r\n        class=\"token-range\"\r\n      />\r\n      <div class=\"value-display\">\r\n        {{ token.value }}{{ token.unit || '' }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\n\r\ninterface Token {\r\n  name: string;\r\n  cssVar: string;\r\n  value: string;\r\n  type: 'color' | 'size' | 'number';\r\n  min?: number;\r\n  max?: number;\r\n  unit?: string;\r\n}\r\n\r\ninterface Props {\r\n  token: Token;\r\n}\r\n\r\ninterface Emits {\r\n  (e: 'update', cssVar: string, value: string): void;\r\n}\r\n\r\nconst props = defineProps<Props>();\r\nconst emit = defineEmits<Emits>();\r\n\r\nconst numericValue = computed(() => {\r\n  return parseInt(props.token.value) || 0;\r\n});\r\n\r\nfunction updateValue(value: number) {\r\n  const newValue = value.toString();\r\n  const cssValue = props.token.unit ? `${newValue}${props.token.unit}` : newValue;\r\n  emit('update', props.token.cssVar, cssValue);\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.token-slider {\r\n  label {\r\n    display: block;\r\n    font-size: var(--text-sm);\r\n    font-weight: var(--font-weight-medium);\r\n    color: var(--text-primary);\r\n    margin-bottom: var(--space-2);\r\n  }\r\n\r\n  .slider-wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-3);\r\n  }\r\n\r\n  .token-range {\r\n    flex: 1;\r\n  }\r\n\r\n  .value-display {\r\n    font-family: var(--font-family-mono);\r\n    font-size: var(--text-sm);\r\n    color: var(--text-secondary);\r\n    min-width: 60px;\r\n    text-align: right;\r\n  }\r\n}\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\UseBatchDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 50,
        "column": 34,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 50,
        "endColumn": 53,
        "fix": { "range": [1844, 1882], "text": "class=\"q-gutter-md\" @submit=\"onSubmit\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 67,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 67,
        "endColumn": 39,
        "fix": { "range": [2497, 2511], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#append' instead of 'v-slot:append'.",
        "line": 70,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 70,
        "endColumn": 38,
        "fix": { "range": [2614, 2627], "text": "#append" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 76,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 76,
        "endColumn": 28,
        "fix": {
          "range": [2758, 2835],
          "text": "size=\"sm\"\r\n                  @click=\"form.quantity = batch.availableQuantity\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 105,
        "column": 47,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 105,
        "endColumn": 71,
        "fix": { "range": [3644, 3684], "text": "v-if=\"form.quantity > 0\" class=\"q-pa-md\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 158,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 158,
        "endColumn": 31,
        "fix": { "range": [5475, 5530], "text": ":disable=\"loading\"\r\n            @click=\"$emit('close')\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "<template>\r\n  <q-card class=\"use-batch-dialog\">\r\n    <q-card-section class=\"row items-center q-pb-none\">\r\n      <div class=\"text-h6\">{{ $t('batch.useBatch') }}</div>\r\n      <q-space />\r\n      <q-btn icon=\"close\" flat round dense @click=\"$emit('close')\" />\r\n    </q-card-section>\r\n\r\n    <q-card-section>\r\n      <!-- Batch Information -->\r\n      <div class=\"batch-info q-mb-lg\">\r\n        <q-card flat bordered class=\"q-pa-md\">\r\n          <div class=\"text-subtitle2 text-grey q-mb-sm\">\r\n            {{ $t('batch.batchInformation') }}\r\n          </div>\r\n          <div class=\"row q-gutter-md\">\r\n            <div class=\"col-12 col-md-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.batchNumber') }}\r\n              </div>\r\n              <div class=\"text-weight-medium\">{{ batch.batchNumber }}</div>\r\n            </div>\r\n            <div class=\"col-12 col-md-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('product.product') }}\r\n              </div>\r\n              <div class=\"text-weight-medium\">{{ batch.productName }}</div>\r\n            </div>\r\n            <div class=\"col-12 col-md-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.availableQuantity') }}\r\n              </div>\r\n              <div class=\"text-weight-medium text-green\">\r\n                {{ formatQuantity(batch.availableQuantity) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"col-12 col-md-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.expiryDate') }}\r\n              </div>\r\n              <div class=\"text-weight-medium\">\r\n                {{ formatDate(batch.expiryDate) }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-card>\r\n      </div>\r\n\r\n      <!-- Usage Form -->\r\n      <q-form @submit=\"onSubmit\" class=\"q-gutter-md\">\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col-12 col-md-6\">\r\n            <q-input\r\n              v-model.number=\"form.quantity\"\r\n              :label=\"$t('batch.quantityToUse')\"\r\n              type=\"number\"\r\n              step=\"0.001\"\r\n              min=\"0\"\r\n              :max=\"batch.availableQuantity\"\r\n              :rules=\"[\r\n                val => val > 0 || $t('validation.mustBePositive'),\r\n                val =>\r\n                  val <= batch.availableQuantity ||\r\n                  $t('batch.validation.exceededAvailable'),\r\n              ]\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"remove_circle\" />\r\n              </template>\r\n              <template v-slot:append>\r\n                <q-btn\r\n                  flat\r\n                  dense\r\n                  icon=\"select_all\"\r\n                  @click=\"form.quantity = batch.availableQuantity\"\r\n                  size=\"sm\"\r\n                >\r\n                  <q-tooltip>{{ $t('batch.useAll') }}</q-tooltip>\r\n                </q-btn>\r\n              </template>\r\n            </q-input>\r\n          </div>\r\n\r\n          <div class=\"col-12 col-md-6\">\r\n            <q-select\r\n              v-model=\"form.reason\"\r\n              :options=\"reasonOptions\"\r\n              :label=\"$t('batch.usageReason')\"\r\n              :rules=\"[val => !!val || $t('validation.required')]\"\r\n              emit-value\r\n              map-options\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <q-input\r\n          v-model=\"form.notes\"\r\n          :label=\"$t('batch.usageNotes')\"\r\n          type=\"textarea\"\r\n          rows=\"3\"\r\n          :hint=\"$t('batch.usageNotesHint')\"\r\n        />\r\n\r\n        <!-- Usage Summary -->\r\n        <q-card flat bordered class=\"q-pa-md\" v-if=\"form.quantity > 0\">\r\n          <div class=\"text-subtitle2 text-grey q-mb-sm\">\r\n            {{ $t('batch.usageSummary') }}\r\n          </div>\r\n          <div class=\"row q-gutter-md\">\r\n            <div class=\"col-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.quantityUsed') }}\r\n              </div>\r\n              <div class=\"text-h6 text-red\">\r\n                -{{ formatQuantity(form.quantity) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.remainingQuantity') }}\r\n              </div>\r\n              <div class=\"text-h6 text-green\">\r\n                {{ formatQuantity(batch.availableQuantity - form.quantity) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.costImpact') }}\r\n              </div>\r\n              <div class=\"text-h6\">\r\n                {{ formatCurrency(form.quantity * batch.unitCost || 0) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"col-6\">\r\n              <div class=\"text-caption text-grey\">\r\n                {{ $t('batch.newStatus') }}\r\n              </div>\r\n              <div class=\"text-h6\">\r\n                <q-chip\r\n                  :color=\"getNewStatusColor()\"\r\n                  text-color=\"white\"\r\n                  size=\"sm\"\r\n                >\r\n                  {{ getNewStatusText() }}\r\n                </q-chip>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-card>\r\n\r\n        <!-- Form Actions -->\r\n        <div class=\"row q-gutter-sm q-mt-lg\">\r\n          <q-btn\r\n            :label=\"$t('common.cancel')\"\r\n            color=\"grey\"\r\n            flat\r\n            @click=\"$emit('close')\"\r\n            :disable=\"loading\"\r\n          />\r\n          <q-space />\r\n          <q-btn\r\n            :label=\"$t('batch.confirmUsage')\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            :loading=\"loading\"\r\n            icon=\"check\"\r\n          />\r\n        </div>\r\n      </q-form>\r\n    </q-card-section>\r\n  </q-card>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar, date } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n  import type { ProductBatchWithDetails } from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    batch: ProductBatchWithDetails;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  const emit = defineEmits<{\r\n    close: [];\r\n    used: [batch: ProductBatchWithDetails, quantity: number];\r\n  }>();\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n\r\n  // State\r\n  const loading = ref(false);\r\n\r\n  const form = ref({\r\n    quantity: 0,\r\n    reason: '',\r\n    notes: '',\r\n  });\r\n\r\n  // Computed\r\n  const reasonOptions = computed(() => [\r\n    { label: t('batch.usage.consumption'), value: 'consumption' },\r\n    { label: t('batch.usage.expired'), value: 'expired' },\r\n    { label: t('batch.usage.damaged'), value: 'damaged' },\r\n    { label: t('batch.usage.transfer'), value: 'transfer' },\r\n    { label: t('batch.usage.adjustment'), value: 'adjustment' },\r\n    { label: t('batch.usage.other'), value: 'other' },\r\n  ]);\r\n\r\n  // Methods\r\n  const formatDate = (dateStr: string) => {\r\n    return date.formatDate(dateStr, 'DD/MM/YYYY');\r\n  };\r\n\r\n  const formatQuantity = (quantity: number) => {\r\n    return quantity.toLocaleString(undefined, {\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 3,\r\n    });\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: props.batch.currency || 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  const getNewStatusColor = () => {\r\n    const remaining = props.batch.availableQuantity - form.value.quantity;\r\n    if (remaining <= 0) return 'grey';\r\n    return 'green';\r\n  };\r\n\r\n  const getNewStatusText = () => {\r\n    const remaining = props.batch.availableQuantity - form.value.quantity;\r\n    if (remaining <= 0) return t('batch.status.depleted');\r\n    return t('batch.status.active');\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      loading.value = true;\r\n\r\n      // Create stock movement record\r\n      const stockMovement = {\r\n        productId: props.batch.productId,\r\n        locationId: props.batch.locationId,\r\n        batchId: props.batch.id,\r\n        movementType: 'consumption',\r\n        quantityChange: -form.value.quantity,\r\n        quantityBefore: props.batch.currentQuantity,\r\n        quantityAfter: props.batch.currentQuantity - form.value.quantity,\r\n        referenceType: 'manual_usage',\r\n        notes: form.value.notes,\r\n        reason: form.value.reason,\r\n      };\r\n\r\n      // Process the batch usage\r\n      await batchStore.processStockMovement(stockMovement);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('batch.batchUsedSuccessfully'),\r\n        actions: [\r\n          {\r\n            label: t('common.dismiss'),\r\n            color: 'white',\r\n          },\r\n        ],\r\n      });\r\n\r\n      emit('used', props.batch, form.value.quantity);\r\n    } catch (error) {\r\n      console.error('Failed to use batch:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failedToUseBatch'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n</script>\r\n\r\n<style scoped>\r\n  .use-batch-dialog {\r\n    min-width: 600px;\r\n    max-width: 800px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .use-batch-dialog {\r\n      min-width: 100%;\r\n    }\r\n  }\r\n\r\n  .batch-info {\r\n    background: rgba(0, 0, 0, 0.02);\r\n    border-radius: 8px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\DemoResetCard.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 41,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 41,
        "endColumn": 33,
        "fix": { "range": [1197, 1252], "text": ":loading=\"resetting\"\n            @click=\"resetDemoData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 42,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 42,
        "endColumn": 28,
        "fix": {
          "range": [1197, 1280],
          "text": "color=\"warning\"\n            @click=\"resetDemoData\"\n            :loading=\"resetting\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 43,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 43,
        "endColumn": 27,
        "fix": {
          "range": [1197, 1307],
          "text": "icon=\"refresh\"\n            @click=\"resetDemoData\"\n            :loading=\"resetting\"\n            color=\"warning\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 44,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 42,
        "fix": {
          "range": [1197, 1349],
          "text": ":label=\"$t('demo.resetData')\"\n            @click=\"resetDemoData\"\n            :loading=\"resetting\"\n            color=\"warning\"\n            icon=\"refresh\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 45,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 45,
        "endColumn": 30,
        "fix": {
          "range": [1197, 1379],
          "text": "class=\"reset-btn\"\n            @click=\"resetDemoData\"\n            :loading=\"resetting\"\n            color=\"warning\"\n            icon=\"refresh\"\n            :label=\"$t('demo.resetData')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 46,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 46,
        "endColumn": 33,
        "fix": {
          "range": [1197, 1412],
          "text": ":disable=\"resetting\"\n            @click=\"resetDemoData\"\n            :loading=\"resetting\"\n            color=\"warning\"\n            icon=\"refresh\"\n            :label=\"$t('demo.resetData')\"\n            class=\"reset-btn\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "<template>\n  <BaseCard class=\"demo-reset-card\">\n    <template #header>\n      <div class=\"card-header-content\">\n        <div class=\"card-title-section\">\n          <q-icon name=\"refresh\" color=\"warning\" size=\"24px\" />\n          <div>\n            <h3 class=\"card-title\">{{ $t('demo.resetData') }}</h3>\n            <p class=\"card-subtitle\">{{ $t('demo.limitations') }}</p>\n          </div>\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <div class=\"demo-content\">\n        <div class=\"demo-info\">\n          <q-banner\n            class=\"demo-banner\"\n            icon=\"info\"\n            color=\"info\"\n            text-color=\"white\"\n          >\n            <div class=\"banner-content\">\n              <div class=\"banner-title\">{{ $t('demo.practice') }}</div>\n              <div class=\"banner-subtitle\">\n                {{ $t('demo.practiceDescription') }}\n              </div>\n            </div>\n          </q-banner>\n\n          <div class=\"demo-limitations\">\n            <q-icon name=\"warning\" color=\"amber\" size=\"20px\" />\n            <span>{{ $t('demo.limitationsText') }}</span>\n          </div>\n        </div>\n\n        <div class=\"demo-actions\">\n          <q-btn\n            @click=\"resetDemoData\"\n            :loading=\"resetting\"\n            color=\"warning\"\n            icon=\"refresh\"\n            :label=\"$t('demo.resetData')\"\n            class=\"reset-btn\"\n            :disable=\"resetting\"\n          />\n\n          <div class=\"reset-info\">\n            <q-icon name=\"info_outline\" color=\"grey-6\" size=\"16px\" />\n            <span class=\"reset-info-text\">\n              {{ $t('demo.resetInfo') }}\n            </span>\n          </div>\n        </div>\n      </div>\n    </template>\n  </BaseCard>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { BaseCard } from '../cards';\n  import { useAuthStore } from '../../stores/auth';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const authStore = useAuthStore();\n\n  // Reactive state\n  const resetting = ref(false);\n\n  // Methods\n  const resetDemoData = async () => {\n    // Only allow demo user to reset\n    if (authStore.userEmail !== 'demo@remcura.com') {\n      $q.notify({\n        type: 'negative',\n        message: t('demo.onlyDemoUserCanReset'),\n        position: 'top',\n      });\n      return;\n    }\n\n    // Confirmation dialog\n    $q.dialog({\n      title: t('demo.resetData'),\n      message: t('demo.resetDataConfirm'),\n      cancel: {\n        label: t('common.cancel'),\n        color: 'grey',\n      },\n      ok: {\n        label: t('demo.resetData'),\n        color: 'warning',\n      },\n      persistent: true,\n    }).onOk(async () => {\n      try {\n        resetting.value = true;\n\n        // Call reset function via MCP or API\n        const response = await fetch('/api/demo/reset', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${authStore.session?.access_token}`,\n          },\n        });\n\n        if (response.ok) {\n          $q.notify({\n            type: 'positive',\n            message: t('demo.resetDataSuccess'),\n            position: 'top',\n            timeout: 5000,\n          });\n\n          // Refresh the page to reload fresh data\n          setTimeout(() => {\n            window.location.reload();\n          }, 2000);\n        } else {\n          throw new Error($t('demoresetc.resetfailed'));\n        }\n      } catch (error) {\n        console.error('Demo reset error:', error);\n        $q.notify({\n          type: 'negative',\n          message: t('demo.resetDataError'),\n          position: 'top',\n        });\n      } finally {\n        resetting.value = false;\n      }\n    });\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .demo-reset-card {\n    border-left: 4px solid var(--q-warning);\n\n    .demo-content {\n      display: flex;\n      flex-direction: column;\n      gap: var(--space-6);\n    }\n\n    .demo-info {\n      display: flex;\n      flex-direction: column;\n      gap: var(--space-4);\n    }\n\n    .demo-banner {\n      border-radius: var(--border-radius-lg);\n\n      .banner-content {\n        .banner-title {\n          font-weight: 600;\n          font-size: 1.1rem;\n          margin-bottom: var(--space-1);\n        }\n\n        .banner-subtitle {\n          opacity: 0.9;\n        }\n      }\n    }\n\n    .demo-limitations {\n      display: flex;\n      align-items: center;\n      gap: var(--space-2);\n      padding: var(--space-3);\n      background: rgba(255, 193, 7, 0.1);\n      border: 1px solid rgba(255, 193, 7, 0.3);\n      border-radius: var(--border-radius-md);\n      font-size: 0.9rem;\n      color: var(--q-amber-8);\n    }\n\n    .demo-actions {\n      display: flex;\n      flex-direction: column;\n      align-items: flex-start;\n      gap: var(--space-3);\n\n      .reset-btn {\n        padding: var(--space-3) var(--space-6);\n        font-weight: 600;\n      }\n\n      .reset-info {\n        display: flex;\n        align-items: center;\n        gap: var(--space-2);\n\n        .reset-info-text {\n          font-size: 0.85rem;\n          color: var(--q-grey-6);\n        }\n      }\n    }\n  }\n\n  .body--dark {\n    .demo-limitations {\n      background: rgba(255, 193, 7, 0.15);\n      color: var(--q-amber-6);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\MagicInviteManager.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 85,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 85,
        "endColumn": 36,
        "fix": { "range": [2921, 2981], "text": ":loading=\"generating\"\r\n              @click=\"generateInvite\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 86,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 86,
        "endColumn": 35,
        "fix": {
          "range": [2921, 3017],
          "text": "class=\"generate-btn\"\r\n              @click=\"generateInvite\"\r\n              :loading=\"generating\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":tooltip\" should go before \"@click\".",
        "line": 115,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 115,
        "endColumn": 43,
        "fix": { "range": [3791, 3852], "text": ":tooltip=\"$t('common.copy')\"\r\n              @click=\"copyCode\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 140,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 140,
        "endColumn": 25,
        "fix": { "range": [4556, 4607], "text": "unelevated\r\n              @click=\"shareViaWhatsApp\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 147,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 147,
        "endColumn": 25,
        "fix": { "range": [4769, 4814], "text": "unelevated\r\n              @click=\"showQRCode\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 154,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 154,
        "endColumn": 25,
        "fix": { "range": [4980, 5028], "text": "unelevated\r\n              @click=\"shareViaEmail\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":tooltip\" should go before \"@click\".",
        "line": 194,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 194,
        "endColumn": 46,
        "fix": {
          "range": [6174, 6249],
          "text": ":tooltip=\"$t('common.share')\"\r\n                @click=\"shareInvite(invite)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":tooltip\" should go before \"@click\".",
        "line": 202,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 202,
        "endColumn": 47,
        "fix": {
          "range": [6417, 6494],
          "text": ":tooltip=\"$t('common.delete')\"\r\n                @click=\"deleteInvite(invite)\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "<template>\r\n  <div class=\"magic-invite-manager\">\r\n    <!-- Simple Header -->\r\n    <div class=\"header-section\">\r\n      <h3 class=\"section-title\">\r\n        <q-icon name=\"auto_awesome\" class=\"q-mr-sm\" />\r\n        {{ $t('magicInvite.simpleTitle') }}\r\n      </h3>\r\n      <p class=\"section-description\">\r\n        {{ $t('magicInvite.simpleDescription') }}\r\n      </p>\r\n    </div>\r\n\r\n    <!-- How it Works -->\r\n    <q-card class=\"how-it-works-card q-mb-lg\" flat bordered>\r\n      <q-card-section>\r\n        <div class=\"text-h6 q-mb-md\">{{ $t('magicInvite.howItWorks') }}</div>\r\n        <div class=\"steps-grid\">\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">1</div>\r\n            <div class=\"step-content\">\r\n              <div class=\"step-title\">{{ $t('magicInvite.stepCreate') }}</div>\r\n              <div class=\"step-description\">\r\n                {{ $t('magicInvite.stepCreateDetail') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">2</div>\r\n            <div class=\"step-content\">\r\n              <div class=\"step-title\">{{ $t('magicInvite.stepShare') }}</div>\r\n              <div class=\"step-description\">\r\n                {{ $t('magicInvite.stepShareDetail') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">3</div>\r\n            <div class=\"step-content\">\r\n              <div class=\"step-title\">{{ $t('magicInvite.stepJoin') }}</div>\r\n              <div class=\"step-description\">\r\n                {{ $t('magicInvite.stepJoinDetail') }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- Quick Invite -->\r\n    <q-card class=\"invite-card q-mb-lg\" flat bordered>\r\n      <q-card-section>\r\n        <div class=\"text-h6 q-mb-md\">{{ $t('magicInvite.createInvite') }}</div>\r\n\r\n        <div class=\"invite-form\">\r\n          <div class=\"row q-gutter-md\">\r\n            <div class=\"col-md-6 col-12\">\r\n              <q-select\r\n                v-model=\"newInvite.role\"\r\n                :options=\"roleOptions\"\r\n                :label=\"$t('magicInvite.whoAreYouInviting')\"\r\n                outlined\r\n                emit-value\r\n                map-options\r\n              />\r\n            </div>\r\n            <div class=\"col-md-6 col-12\">\r\n              <q-input\r\n                v-model=\"newInvite.department\"\r\n                :label=\"$t('magicInvite.department')\"\r\n                :placeholder=\"$t('magicInvite.departmentPlaceholder')\"\r\n                outlined\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"generate-section q-mt-lg\">\r\n            <q-btn\r\n              :label=\"$t('magicInvite.generateInviteCode')\"\r\n              color=\"primary\"\r\n              size=\"lg\"\r\n              icon=\"auto_awesome\"\r\n              unelevated\r\n              @click=\"generateInvite\"\r\n              :loading=\"generating\"\r\n              class=\"generate-btn\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- Generated Invite -->\r\n    <q-card\r\n      v-if=\"generatedInvite\"\r\n      class=\"generated-invite-card q-mb-lg\"\r\n      flat\r\n      bordered\r\n    >\r\n      <q-card-section>\r\n        <div class=\"text-h6 q-mb-md text-positive\">\r\n          {{ $t('magicInvite.inviteReady') }}\r\n        </div>\r\n\r\n        <div class=\"invite-display\">\r\n          <!-- The Magic Code -->\r\n          <div class=\"magic-code-display\">\r\n            <div class=\"code-label\">{{ $t('magicInvite.shareThisCode') }}</div>\r\n            <div class=\"magic-code\">{{ generatedInvite.magic_code }}</div>\r\n            <q-btn\r\n              icon=\"content_copy\"\r\n              flat\r\n              round\r\n              @click=\"copyCode\"\r\n              :tooltip=\"$t('common.copy')\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Share Instructions -->\r\n          <div class=\"share-instructions\">\r\n            <div class=\"instruction-title\">\r\n              {{ $t('magicInvite.tellThem') }}\r\n            </div>\r\n            <div class=\"instruction-text\">\r\n              \"{{\r\n                $t('magicInvite.shareMessage', {\r\n                  code: generatedInvite.magic_code,\r\n                })\r\n              }}\"\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Share Buttons -->\r\n          <div class=\"share-buttons\">\r\n            <q-btn\r\n              :label=\"$t('magicInvite.shareWhatsApp')\"\r\n              color=\"positive\"\r\n              icon=\"message\"\r\n              @click=\"shareViaWhatsApp\"\r\n              unelevated\r\n            />\r\n            <q-btn\r\n              :label=\"$t('magicInvite.showQR')\"\r\n              color=\"primary\"\r\n              icon=\"qr_code\"\r\n              @click=\"showQRCode\"\r\n              unelevated\r\n            />\r\n            <q-btn\r\n              :label=\"$t('magicInvite.shareEmail')\"\r\n              color=\"secondary\"\r\n              icon=\"email\"\r\n              @click=\"shareViaEmail\"\r\n              unelevated\r\n            />\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- Active Invites (Simplified) -->\r\n    <q-card\r\n      v-if=\"activeInvites.length > 0\"\r\n      class=\"active-invites-card\"\r\n      flat\r\n      bordered\r\n    >\r\n      <q-card-section>\r\n        <div class=\"text-h6 q-mb-md\">\r\n          {{ $t('magicInvite.activeInvites') }}\r\n          <q-chip :label=\"activeInvites.length\" color=\"primary\" />\r\n        </div>\r\n\r\n        <div class=\"invites-list\">\r\n          <div\r\n            v-for=\"invite in activeInvites\"\r\n            :key=\"invite.id\"\r\n            class=\"invite-item\"\r\n          >\r\n            <div class=\"invite-info\">\r\n              <div class=\"invite-code\">{{ invite.magic_code }}</div>\r\n              <div class=\"invite-details\">\r\n                {{ invite.department || invite.target_role }} •\r\n                {{ $t('magicInvite.created') }}\r\n                {{ formatDate(invite.created_at) }}\r\n              </div>\r\n            </div>\r\n            <div class=\"invite-actions\">\r\n              <q-btn\r\n                icon=\"share\"\r\n                flat\r\n                round\r\n                @click=\"shareInvite(invite)\"\r\n                :tooltip=\"$t('common.share')\"\r\n              />\r\n              <q-btn\r\n                icon=\"delete\"\r\n                flat\r\n                round\r\n                color=\"negative\"\r\n                @click=\"deleteInvite(invite)\"\r\n                :tooltip=\"$t('common.delete')\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- QR Code Dialog -->\r\n    <q-dialog v-model=\"showQRDialog\">\r\n      <q-card style=\"width: 300px\">\r\n        <q-card-section class=\"text-center\">\r\n          <div class=\"text-h6 q-mb-md\">{{ $t('magicInvite.qrCode') }}</div>\r\n          <div class=\"qr-code-container\">\r\n            <q-img\r\n              :src=\"qrCodeUrl\"\r\n              width=\"200px\"\r\n              height=\"200px\"\r\n              class=\"qr-image\"\r\n            />\r\n          </div>\r\n          <div class=\"qr-instructions q-mt-md\">\r\n            {{ $t('magicInvite.qrInstructions') }}\r\n          </div>\r\n        </q-card-section>\r\n        <q-card-actions align=\"center\">\r\n          <q-btn\r\n            flat\r\n            :label=\"$t('common.close')\"\r\n            @click=\"showQRDialog = false\"\r\n          />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n\r\n  // Types\r\n  interface MagicInvite {\r\n    id: string;\r\n    magic_code: string;\r\n    target_role: string;\r\n    department: string;\r\n    created_at: string;\r\n  }\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const authStore = useAuthStore();\r\n\r\n  // State\r\n  const generating = ref(false);\r\n  const showQRDialog = ref(false);\r\n  const activeInvites = ref<MagicInvite[]>([]);\r\n  const generatedInvite = ref<MagicInvite | null>(null);\r\n\r\n  // Form\r\n  const newInvite = ref({\r\n    role: 'member',\r\n    department: '',\r\n  });\r\n\r\n  // Options\r\n  const roleOptions = [\r\n    { label: t('magicInvite.doctorNurse'), value: 'member' },\r\n    { label: t('magicInvite.assistant'), value: 'assistant' },\r\n    { label: t('magicInvite.admin'), value: 'admin' },\r\n    { label: t('magicInvite.temporary'), value: 'guest' },\r\n  ];\r\n\r\n  // Computed\r\n  const qrCodeUrl = computed(() => {\r\n    if (!generatedInvite.value) {\r\n      return '';\r\n    }\r\n    const joinUrl = `${window.location.origin}/join/${generatedInvite.value.magic_code}`;\r\n    return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(\r\n      joinUrl\r\n    )}`;\r\n  });\r\n\r\n  // Methods\r\n  const generateInvite = async () => {\r\n    generating.value = true;\r\n\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n\r\n      // Generate a simple, readable code\r\n      const practice = authStore.selectedPractice?.name || 'KLINIEK';\r\n      const cleanPractice = practice\r\n        .replace(/[^A-Z]/gi, '')\r\n        .toUpperCase()\r\n        .substring(0, 8);\r\n      const year = new Date().getFullYear();\r\n      const emoji =\r\n        newInvite.value.role === 'member'\r\n          ? '🏥'\r\n          : newInvite.value.role === 'admin'\r\n            ? '👩‍⚕️'\r\n            : '💊';\r\n\r\n      generatedInvite.value = {\r\n        id: Date.now().toString(),\r\n        magic_code: `${emoji}${cleanPractice}✨${year}`,\r\n        target_role: newInvite.value.role,\r\n        department: newInvite.value.department,\r\n        created_at: new Date().toISOString(),\r\n      };\r\n\r\n      // Add to active invites\r\n      activeInvites.value.unshift({ ...generatedInvite.value });\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('magicInvite.inviteCreated'),\r\n        position: 'top-right',\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicInvite.createError'),\r\n        position: 'top-right',\r\n      });\r\n    } finally {\r\n      generating.value = false;\r\n    }\r\n  };\r\n\r\n  const copyCode = () => {\r\n    if (!generatedInvite.value) {\r\n      return;\r\n    }\r\n    navigator.clipboard.writeText(generatedInvite.value.magic_code);\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('magicInvite.codeCopied'),\r\n      position: 'top-right',\r\n    });\r\n  };\r\n\r\n  const shareViaWhatsApp = () => {\r\n    if (!generatedInvite.value) {\r\n      return;\r\n    }\r\n    const code = generatedInvite.value.magic_code;\r\n    const message = t('magicInvite.whatsappMessage', {\r\n      code,\r\n      url: `${window.location.origin}/join`,\r\n    });\r\n    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(message)}`;\r\n    window.open(whatsappUrl, '_blank');\r\n  };\r\n\r\n  const shareViaEmail = () => {\r\n    if (!generatedInvite.value) {\r\n      return;\r\n    }\r\n    const code = generatedInvite.value.magic_code;\r\n    const subject = t('magicInvite.emailSubject');\r\n    const body = t('magicInvite.emailMessage', {\r\n      code,\r\n      url: `${window.location.origin}/join`,\r\n    });\r\n\r\n    const mailtoUrl = `mailto:?subject=${encodeURIComponent(\r\n      subject\r\n    )}&body=${encodeURIComponent(body)}`;\r\n    window.open(mailtoUrl);\r\n  };\r\n\r\n  const showQRCode = () => {\r\n    showQRDialog.value = true;\r\n  };\r\n\r\n  const shareInvite = (invite: MagicInvite) => {\r\n    generatedInvite.value = invite;\r\n    shareViaWhatsApp();\r\n  };\r\n\r\n  const deleteInvite = (invite: MagicInvite) => {\r\n    $q.dialog({\r\n      title: t('magicInvite.deleteInvite'),\r\n      message: t('magicInvite.deleteConfirm', { code: invite.magic_code }),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(() => {\r\n      activeInvites.value = activeInvites.value.filter(\r\n        (i: MagicInvite) => i.id !== invite.id\r\n      );\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('magicInvite.inviteDeleted'),\r\n      });\r\n    });\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString();\r\n  };\r\n\r\n  onMounted(() => {\r\n    // Load existing invites\r\n    // This would normally be an API call\r\n  });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .magic-invite-manager {\r\n    .header-section {\r\n      text-align: center;\r\n      margin-bottom: 2rem;\r\n\r\n      .section-title {\r\n        margin: 0 0 0.5rem;\r\n        color: #1976d2;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n      }\r\n\r\n      .section-description {\r\n        color: #666;\r\n        margin: 0;\r\n        font-size: 1.1rem;\r\n      }\r\n    }\r\n\r\n    .how-it-works-card {\r\n      border-radius: 12px;\r\n\r\n      .steps-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n        gap: 1.5rem;\r\n\r\n        .step {\r\n          text-align: center;\r\n\r\n          .step-number {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            background: #1976d2;\r\n            color: white;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-weight: 600;\r\n            font-size: 1.2rem;\r\n            margin: 0 auto 1rem;\r\n          }\r\n\r\n          .step-title {\r\n            font-weight: 600;\r\n            color: #1976d2;\r\n            margin-bottom: 0.5rem;\r\n          }\r\n\r\n          .step-description {\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n            line-height: 1.4;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .invite-card {\r\n      border-radius: 12px;\r\n\r\n      .invite-form {\r\n        .generate-section {\r\n          text-align: center;\r\n\r\n          .generate-btn {\r\n            padding: 1rem 2rem;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            border-radius: 12px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .generated-invite-card {\r\n      border-radius: 12px;\r\n      border: 2px solid #4caf50;\r\n\r\n      .invite-display {\r\n        .magic-code-display {\r\n          text-align: center;\r\n          padding: 1.5rem;\r\n          background: #f8f9fa;\r\n          border-radius: 12px;\r\n          margin-bottom: 1.5rem;\r\n          position: relative;\r\n\r\n          .code-label {\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n            margin-bottom: 0.5rem;\r\n          }\r\n\r\n          .magic-code {\r\n            font-size: 2rem;\r\n            font-weight: 600;\r\n            color: #1976d2;\r\n            margin-bottom: 0.5rem;\r\n            font-family: monospace;\r\n          }\r\n        }\r\n\r\n        .share-instructions {\r\n          text-align: center;\r\n          margin-bottom: 1.5rem;\r\n          padding: 1rem;\r\n          background: #e3f2fd;\r\n          border-radius: 8px;\r\n\r\n          .instruction-title {\r\n            font-weight: 600;\r\n            color: #1976d2;\r\n            margin-bottom: 0.5rem;\r\n          }\r\n\r\n          .instruction-text {\r\n            font-style: italic;\r\n            color: #666;\r\n          }\r\n        }\r\n\r\n        .share-buttons {\r\n          display: flex;\r\n          gap: 1rem;\r\n          justify-content: center;\r\n          flex-wrap: wrap;\r\n        }\r\n      }\r\n    }\r\n\r\n    .active-invites-card {\r\n      border-radius: 12px;\r\n\r\n      .invites-list {\r\n        .invite-item {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          padding: 1rem;\r\n          border: 1px solid #eee;\r\n          border-radius: 8px;\r\n          margin-bottom: 0.5rem;\r\n\r\n          .invite-info {\r\n            flex: 1;\r\n\r\n            .invite-code {\r\n              font-weight: 600;\r\n              color: #1976d2;\r\n              font-family: monospace;\r\n            }\r\n\r\n            .invite-details {\r\n              color: #666;\r\n              font-size: 0.9rem;\r\n              margin-top: 0.25rem;\r\n            }\r\n          }\r\n\r\n          .invite-actions {\r\n            display: flex;\r\n            gap: 0.5rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .qr-code-container {\r\n      display: flex;\r\n      justify-content: center;\r\n\r\n      .qr-image {\r\n        border: 2px solid #eee;\r\n        border-radius: 8px;\r\n      }\r\n    }\r\n\r\n    .qr-instructions {\r\n      color: #666;\r\n      font-size: 0.9rem;\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .magic-invite-manager {\r\n      .steps-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .share-buttons {\r\n        flex-direction: column;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\admin\\TeamOverview.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":class\" should go before \"@click\".",
        "line": 111,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 114,
        "endColumn": 23,
        "fix": {
          "range": [4055, 4262],
          "text": ":class=\"{\r\n                      'text-negative': member.is_active,\r\n                      'text-positive': !member.is_active,\r\n                    }\"\r\n                    @click=\"toggleMemberStatus(member)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click.stop\".",
        "line": 162,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 162,
        "endColumn": 57,
        "fix": {
          "range": [6019, 6112],
          "text": ":disable=\"!member.personal_magic_code\"\r\n                  @click.stop=\"copyMagicCode(member)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \":label\".",
        "line": 298,
        "column": 51,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 298,
        "endColumn": 64,
        "fix": { "range": [10845, 10886], "text": "v-close-popup :label=\"$t('common.close')\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11393, 11396], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11393, 11396], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11473, 11476], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11473, 11476], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 339,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 339,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12051, 12054], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12051, 12054], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\r\n  <q-card class=\"team-overview-card\" flat bordered>\r\n    <q-card-section class=\"team-header\">\r\n      <div class=\"header-content\">\r\n        <div class=\"title-section\">\r\n          <q-icon name=\"group\" size=\"2rem\" color=\"primary\" />\r\n          <div>\r\n            <h3 class=\"section-title\">{{ $t('admin.teamOverview') }}</h3>\r\n            <p class=\"section-subtitle\">\r\n              {{ $t('admin.teamOverviewSubtitle') }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div class=\"header-stats\">\r\n          <div class=\"stat\">\r\n            <div class=\"stat-number\">{{ totalMembers }}</div>\r\n            <div class=\"stat-label\">{{ $t('admin.totalMembers') }}</div>\r\n          </div>\r\n          <div class=\"stat\">\r\n            <div class=\"stat-number\">{{ onlineMembers }}</div>\r\n            <div class=\"stat-label\">{{ $t('admin.onlineNow') }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </q-card-section>\r\n\r\n    <!-- Team Members List -->\r\n    <q-card-section class=\"team-list\">\r\n      <div v-if=\"loading\" class=\"loading-state\">\r\n        <q-spinner-dots size=\"2rem\" color=\"primary\" />\r\n        <p>{{ $t('admin.loadingTeam') }}</p>\r\n      </div>\r\n\r\n      <div v-else-if=\"teamMembers.length === 0\" class=\"empty-state\">\r\n        <q-icon name=\"group_off\" size=\"4rem\" color=\"grey-5\" />\r\n        <h4>{{ $t('admin.noTeamMembers') }}</h4>\r\n        <p>{{ $t('admin.noTeamMembersDescription') }}</p>\r\n      </div>\r\n\r\n      <div v-else class=\"members-grid\">\r\n        <q-card\r\n          v-for=\"member in teamMembers\"\r\n          :key=\"member.id\"\r\n          class=\"member-card\"\r\n          :class=\"{\r\n            online: member.isOnline,\r\n            offline: !member.isOnline,\r\n          }\"\r\n        >\r\n          <!-- Member Header -->\r\n          <q-card-section class=\"member-header\">\r\n            <div class=\"member-avatar\">\r\n              <q-avatar\r\n                size=\"48px\"\r\n                :color=\"member.avatarColor\"\r\n                text-color=\"white\"\r\n              >\r\n                <span v-if=\"!member.avatar_url\">{{ member.initials }}</span>\r\n                <img v-else :src=\"member.avatar_url\" />\r\n              </q-avatar>\r\n              <div\r\n                class=\"status-indicator\"\r\n                :class=\"{ online: member.isOnline }\"\r\n              ></div>\r\n            </div>\r\n            <div class=\"member-info\">\r\n              <h4 class=\"member-name\">{{ member.full_name }}</h4>\r\n              <div class=\"member-role\">\r\n                <q-chip\r\n                  :color=\"getRoleColor(member.role)\"\r\n                  text-color=\"white\"\r\n                  size=\"sm\"\r\n                >\r\n                  {{ $t(`roles.${member.role}`) }}\r\n                </q-chip>\r\n              </div>\r\n              <div v-if=\"member.department\" class=\"member-department\">\r\n                <q-icon name=\"apartment\" size=\"sm\" />\r\n                <span>{{ member.department }}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"member-actions\">\r\n              <q-btn-dropdown\r\n                flat\r\n                round\r\n                icon=\"more_vert\"\r\n                size=\"sm\"\r\n                :disable=\"member.role === 'owner'\"\r\n              >\r\n                <q-list>\r\n                  <q-item clickable @click=\"viewMember(member)\">\r\n                    <q-item-section avatar>\r\n                      <q-icon name=\"visibility\" />\r\n                    </q-item-section>\r\n                    <q-item-section>{{\r\n                      $t('admin.viewProfile')\r\n                    }}</q-item-section>\r\n                  </q-item>\r\n                  <q-item clickable @click=\"editMember(member)\">\r\n                    <q-item-section avatar>\r\n                      <q-icon name=\"edit\" />\r\n                    </q-item-section>\r\n                    <q-item-section>{{\r\n                      $t('admin.editMember')\r\n                    }}</q-item-section>\r\n                  </q-item>\r\n                  <q-separator />\r\n                  <q-item\r\n                    clickable\r\n                    @click=\"toggleMemberStatus(member)\"\r\n                    :class=\"{\r\n                      'text-negative': member.is_active,\r\n                      'text-positive': !member.is_active,\r\n                    }\"\r\n                  >\r\n                    <q-item-section avatar>\r\n                      <q-icon\r\n                        :name=\"member.is_active ? 'person_off' : 'person'\"\r\n                      />\r\n                    </q-item-section>\r\n                    <q-item-section>\r\n                      {{\r\n                        member.is_active\r\n                          ? $t('admin.deactivate')\r\n                          : $t('admin.activate')\r\n                      }}\r\n                    </q-item-section>\r\n                  </q-item>\r\n                </q-list>\r\n              </q-btn-dropdown>\r\n            </div>\r\n          </q-card-section>\r\n\r\n          <!-- Login Methods -->\r\n          <q-card-section class=\"login-methods\">\r\n            <div class=\"methods-header\">\r\n              <q-icon name=\"login\" size=\"sm\" />\r\n              <span>{{ $t('admin.loginMethods') }}</span>\r\n            </div>\r\n            <div class=\"methods-list\">\r\n              <!-- Magic Code Method -->\r\n              <div\r\n                v-if=\"member.magic_code_enabled\"\r\n                class=\"method-item magic-code\"\r\n                @click=\"showPersonalCode(member)\"\r\n              >\r\n                <div class=\"method-icon\">\r\n                  <q-icon name=\"auto_awesome\" color=\"primary\" />\r\n                </div>\r\n                <div class=\"method-info\">\r\n                  <div class=\"method-name\">{{ $t('admin.magicCode') }}</div>\r\n                  <div class=\"method-detail\">\r\n                    {{ member.personal_magic_code || '🏥LOADING...' }}\r\n                  </div>\r\n                </div>\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  icon=\"content_copy\"\r\n                  size=\"sm\"\r\n                  @click.stop=\"copyMagicCode(member)\"\r\n                  :disable=\"!member.personal_magic_code\"\r\n                />\r\n              </div>\r\n\r\n              <!-- Email/Password Method -->\r\n              <div\r\n                v-if=\"member.email_login_enabled\"\r\n                class=\"method-item email-login\"\r\n              >\r\n                <div class=\"method-icon\">\r\n                  <q-icon name=\"email\" color=\"secondary\" />\r\n                </div>\r\n                <div class=\"method-info\">\r\n                  <div class=\"method-name\">{{ $t('admin.emailPassword') }}</div>\r\n                  <div class=\"method-detail\">{{ member.email }}</div>\r\n                </div>\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  icon=\"lock_reset\"\r\n                  size=\"sm\"\r\n                  @click=\"resetPassword(member)\"\r\n                />\r\n              </div>\r\n\r\n              <!-- Device Remember Method -->\r\n              <div\r\n                v-if=\"member.device_remember_enabled\"\r\n                class=\"method-item device-remember\"\r\n              >\r\n                <div class=\"method-icon\">\r\n                  <q-icon name=\"devices\" color=\"accent\" />\r\n                </div>\r\n                <div class=\"method-info\">\r\n                  <div class=\"method-name\">\r\n                    {{ $t('admin.deviceRemember') }}\r\n                  </div>\r\n                  <div class=\"method-detail\">\r\n                    {{\r\n                      $t('admin.trustedDevices', {\r\n                        count: member.device_tokens?.length || 0,\r\n                      })\r\n                    }}\r\n                  </div>\r\n                </div>\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  icon=\"manage_accounts\"\r\n                  size=\"sm\"\r\n                  @click=\"manageDevices(member)\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n\r\n          <!-- Activity Information -->\r\n          <q-card-section class=\"member-activity\">\r\n            <div class=\"activity-grid\">\r\n              <div class=\"activity-stat\">\r\n                <q-icon name=\"schedule\" size=\"sm\" />\r\n                <div>\r\n                  <div class=\"stat-label\">{{ $t('admin.lastLogin') }}</div>\r\n                  <div class=\"stat-value\">\r\n                    {{ formatLastLogin(member.last_login_at || undefined) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"activity-stat\">\r\n                <q-icon name=\"trending_up\" size=\"sm\" />\r\n                <div>\r\n                  <div class=\"stat-label\">{{ $t('admin.loginCount') }}</div>\r\n                  <div class=\"stat-value\">{{ member.login_count || 0 }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"activity-stat\">\r\n                <q-icon name=\"favorite_border\" size=\"sm\" />\r\n                <div>\r\n                  <div class=\"stat-label\">\r\n                    {{ $t('admin.preferredMethod') }}\r\n                  </div>\r\n                  <div class=\"stat-value\">\r\n                    {{ $t(`admin.${member.preferred_login_method}`) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n\r\n          <!-- Quick Actions -->\r\n          <q-card-actions class=\"member-quick-actions\">\r\n            <q-btn\r\n              flat\r\n              :label=\"$t('admin.sendMessage')\"\r\n              icon=\"message\"\r\n              size=\"sm\"\r\n              @click=\"sendMessage(member)\"\r\n            />\r\n            <q-btn\r\n              flat\r\n              :label=\"$t('admin.viewSessions')\"\r\n              icon=\"history\"\r\n              size=\"sm\"\r\n              @click=\"viewSessions(member)\"\r\n            />\r\n          </q-card-actions>\r\n        </q-card>\r\n      </div>\r\n    </q-card-section>\r\n\r\n    <!-- Personal Code Dialog -->\r\n    <q-dialog v-model=\"showCodeDialog\">\r\n      <q-card style=\"min-width: 350px\">\r\n        <q-card-section>\r\n          <div class=\"text-h6\">{{ $t('admin.personalMagicCode') }}</div>\r\n          <div class=\"text-subtitle2\">{{ selectedMember?.full_name }}</div>\r\n        </q-card-section>\r\n\r\n        <q-card-section class=\"text-center\">\r\n          <div class=\"magic-code-display\">\r\n            <div class=\"code-text\">\r\n              {{ selectedMember?.personal_magic_code }}\r\n            </div>\r\n            <q-btn\r\n              flat\r\n              icon=\"content_copy\"\r\n              :label=\"$t('common.copy')\"\r\n              @click=\"copyMagicCode(selectedMember)\"\r\n            />\r\n          </div>\r\n          <p class=\"code-explanation\">\r\n            {{ $t('admin.magicCodeExplanation') }}\r\n          </p>\r\n        </q-card-section>\r\n\r\n        <q-card-actions align=\"right\">\r\n          <q-btn flat :label=\"$t('common.close')\" v-close-popup />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n  </q-card>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import {\r\n    PermanentUserService,\r\n    type EnhancedPermanentUser,\r\n  } from 'src/services/permanentUsers';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n\r\n  // State\r\n  const loading = ref(true);\r\n  const teamMembers = ref<any[]>([]);\r\n  const showCodeDialog = ref(false);\r\n  const selectedMember = ref<any>(null);\r\n\r\n  // Computed\r\n  const totalMembers = computed(() => teamMembers.value.length);\r\n  const onlineMembers = computed(\r\n    () => teamMembers.value.filter(m => m.isOnline).length\r\n  );\r\n\r\n  // Methods\r\n  const loadTeamMembers = async () => {\r\n    loading.value = true;\r\n    try {\r\n      // Mock practice ID - in real app, get from auth store\r\n      const practiceId = 'mock-practice-id';\r\n      const members = await PermanentUserService.getPracticeTeam(practiceId);\r\n\r\n      // Enhance members with additional UI data\r\n      teamMembers.value = members.map((member: any) => ({\r\n        ...member,\r\n        initials: getInitials(member.full_name || ''),\r\n        avatarColor: getAvatarColor(member.full_name || ''),\r\n        isOnline: isRecentlyActive(member.last_login_at),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error loading team members:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('admin.loadTeamError'),\r\n        position: 'top-right',\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const getInitials = (fullName: string): string => {\r\n    return fullName\r\n      .split(' ')\r\n      .map(name => name.charAt(0))\r\n      .join('')\r\n      .toUpperCase()\r\n      .substring(0, 2);\r\n  };\r\n\r\n  const getAvatarColor = (fullName: string): string => {\r\n    const colors = [\r\n      'primary',\r\n      'secondary',\r\n      'accent',\r\n      'positive',\r\n      'negative',\r\n      'info',\r\n      'warning',\r\n    ];\r\n    const index = fullName.charCodeAt(0) % colors.length;\r\n    return colors[index] || 'primary';\r\n  };\r\n\r\n  const isRecentlyActive = (lastLogin?: string): boolean => {\r\n    if (!lastLogin) {\r\n      return false;\r\n    }\r\n    const lastLoginDate = new Date(lastLogin);\r\n    const now = new Date();\r\n    const diffInMinutes =\r\n      (now.getTime() - lastLoginDate.getTime()) / (1000 * 60);\r\n    return diffInMinutes < 30; // Online if active in last 30 minutes\r\n  };\r\n\r\n  const getRoleColor = (role: string): string => {\r\n    const roleColors: Record<string, string> = {\r\n      owner: 'red',\r\n      admin: 'purple',\r\n      manager: 'indigo',\r\n      assistant: 'blue',\r\n      member: 'teal',\r\n    };\r\n    return roleColors[role] || 'grey';\r\n  };\r\n\r\n  const formatLastLogin = (lastLogin?: string): string => {\r\n    if (!lastLogin) {\r\n      return t('admin.never');\r\n    }\r\n\r\n    const date = new Date(lastLogin);\r\n    const now = new Date();\r\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\r\n\r\n    if (diffInHours < 1) {\r\n      const minutes = Math.floor(diffInHours * 60);\r\n      return t('admin.minutesAgo', { count: minutes });\r\n    } else if (diffInHours < 24) {\r\n      const hours = Math.floor(diffInHours);\r\n      return t('admin.hoursAgo', { count: hours });\r\n    } else {\r\n      const days = Math.floor(diffInHours / 24);\r\n      return t('admin.daysAgo', { count: days });\r\n    }\r\n  };\r\n\r\n  // Actions\r\n  const viewMember = (member: EnhancedPermanentUser) => {\r\n    // Viewing member details\r\n    // TODO: Implement member profile view\r\n  };\r\n\r\n  const editMember = (member: EnhancedPermanentUser) => {\r\n    // Editing member\r\n    // TODO: Implement member editing\r\n  };\r\n\r\n  const toggleMemberStatus = async (member: EnhancedPermanentUser) => {\r\n    try {\r\n      const action = member.is_active ? 'deactivate' : 'activate';\r\n      const confirmed = await new Promise(resolve => {\r\n        $q.dialog({\r\n          title: t(\r\n            `admin.confirm${action.charAt(0).toUpperCase() + action.slice(1)}`\r\n          ),\r\n          message: t(\r\n            `admin.confirm${\r\n              action.charAt(0).toUpperCase() + action.slice(1)\r\n            }Message`,\r\n            { name: member.full_name }\r\n          ),\r\n          cancel: true,\r\n          persistent: true,\r\n        })\r\n          .onOk(() => resolve(true))\r\n          .onCancel(() => resolve(false));\r\n      });\r\n\r\n      if (confirmed) {\r\n        // TODO: Implement status toggle\r\n        member.is_active = !member.is_active;\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t(`admin.${action}Success`, { name: member.full_name }),\r\n          position: 'top-right',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('admin.statusChangeError'),\r\n        position: 'top-right',\r\n      });\r\n    }\r\n  };\r\n\r\n  const showPersonalCode = (member: EnhancedPermanentUser) => {\r\n    selectedMember.value = member;\r\n    showCodeDialog.value = true;\r\n  };\r\n\r\n  const copyMagicCode = async (member: EnhancedPermanentUser | null) => {\r\n    if (!member?.personal_magic_code) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(member.personal_magic_code);\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('admin.codeCopied'),\r\n        position: 'top-right',\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('admin.copyError'),\r\n        position: 'top-right',\r\n      });\r\n    }\r\n  };\r\n\r\n  const resetPassword = (member: EnhancedPermanentUser) => {\r\n    // Reset password for member\r\n    // TODO: Implement password reset\r\n  };\r\n\r\n  const manageDevices = (member: EnhancedPermanentUser) => {\r\n    // Manage devices for member\r\n    // TODO: Implement device management\r\n  };\r\n\r\n  const sendMessage = (member: EnhancedPermanentUser) => {\r\n    // Send message to member\r\n    // TODO: Implement messaging\r\n  };\r\n\r\n  const viewSessions = (member: EnhancedPermanentUser) => {\r\n    // View sessions for member\r\n    // TODO: Implement session history\r\n  };\r\n\r\n  onMounted(() => {\r\n    loadTeamMembers();\r\n  });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .team-overview-card {\r\n    .team-header {\r\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n\r\n      .header-content {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .title-section {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 1rem;\r\n\r\n          .section-title {\r\n            margin: 0;\r\n            color: #1976d2;\r\n            font-size: 1.5rem;\r\n          }\r\n\r\n          .section-subtitle {\r\n            margin: 0;\r\n            color: #666;\r\n          }\r\n        }\r\n\r\n        .header-stats {\r\n          display: flex;\r\n          gap: 2rem;\r\n\r\n          .stat {\r\n            text-align: center;\r\n\r\n            .stat-number {\r\n              font-size: 1.5rem;\r\n              font-weight: 600;\r\n              color: #1976d2;\r\n            }\r\n\r\n            .stat-label {\r\n              font-size: 0.9rem;\r\n              color: #666;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .team-list {\r\n      .loading-state,\r\n      .empty-state {\r\n        text-align: center;\r\n        padding: 3rem;\r\n        color: #666;\r\n\r\n        h4 {\r\n          margin: 1rem 0 0.5rem;\r\n        }\r\n\r\n        p {\r\n          margin: 0;\r\n        }\r\n      }\r\n\r\n      .members-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n        gap: 1.5rem;\r\n\r\n        .member-card {\r\n          border-radius: 12px;\r\n          border: 2px solid transparent;\r\n          transition: all 0.3s ease;\r\n\r\n          &.online {\r\n            border-color: #4caf50;\r\n            box-shadow: 0 2px 12px rgba(76, 175, 80, 0.15);\r\n          }\r\n\r\n          &:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n          }\r\n\r\n          .member-header {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 1rem;\r\n            padding: 1rem;\r\n\r\n            .member-avatar {\r\n              position: relative;\r\n\r\n              .status-indicator {\r\n                position: absolute;\r\n                bottom: 0;\r\n                right: 0;\r\n                width: 12px;\r\n                height: 12px;\r\n                border-radius: 50%;\r\n                background: #ccc;\r\n                border: 2px solid white;\r\n\r\n                &.online {\r\n                  background: #4caf50;\r\n                }\r\n              }\r\n            }\r\n\r\n            .member-info {\r\n              flex: 1;\r\n\r\n              .member-name {\r\n                margin: 0 0 0.25rem;\r\n                font-size: 1.1rem;\r\n                color: #1976d2;\r\n              }\r\n\r\n              .member-role {\r\n                margin-bottom: 0.25rem;\r\n              }\r\n\r\n              .member-department {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.25rem;\r\n                color: #666;\r\n                font-size: 0.9rem;\r\n              }\r\n            }\r\n          }\r\n\r\n          .login-methods {\r\n            padding: 0 1rem 1rem;\r\n\r\n            .methods-header {\r\n              display: flex;\r\n              align-items: center;\r\n              gap: 0.5rem;\r\n              margin-bottom: 0.75rem;\r\n              color: #666;\r\n              font-weight: 500;\r\n              font-size: 0.9rem;\r\n            }\r\n\r\n            .methods-list {\r\n              .method-item {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.75rem;\r\n                padding: 0.5rem;\r\n                border-radius: 8px;\r\n                margin-bottom: 0.5rem;\r\n                cursor: pointer;\r\n                transition: background-color 0.2s;\r\n\r\n                &:hover {\r\n                  background: #f5f5f5;\r\n                }\r\n\r\n                .method-icon {\r\n                  width: 32px;\r\n                  display: flex;\r\n                  justify-content: center;\r\n                }\r\n\r\n                .method-info {\r\n                  flex: 1;\r\n\r\n                  .method-name {\r\n                    font-weight: 500;\r\n                    font-size: 0.9rem;\r\n                  }\r\n\r\n                  .method-detail {\r\n                    color: #666;\r\n                    font-size: 0.8rem;\r\n                    font-family: monospace;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          .member-activity {\r\n            padding: 0 1rem 1rem;\r\n\r\n            .activity-grid {\r\n              display: grid;\r\n              grid-template-columns: repeat(3, 1fr);\r\n              gap: 1rem;\r\n\r\n              .activity-stat {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.5rem;\r\n\r\n                .stat-label {\r\n                  font-size: 0.8rem;\r\n                  color: #666;\r\n                }\r\n\r\n                .stat-value {\r\n                  font-size: 0.9rem;\r\n                  font-weight: 500;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          .member-quick-actions {\r\n            padding: 0.5rem 1rem 1rem;\r\n            justify-content: space-between;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .magic-code-display {\r\n      background: #f5f5f5;\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      margin-bottom: 1rem;\r\n\r\n      .code-text {\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n        color: #1976d2;\r\n        font-family: monospace;\r\n        margin-bottom: 0.5rem;\r\n      }\r\n    }\r\n\r\n    .code-explanation {\r\n      color: #666;\r\n      font-size: 0.9rem;\r\n      line-height: 1.4;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .team-overview-card {\r\n      .team-header .header-content {\r\n        flex-direction: column;\r\n        gap: 1rem;\r\n        text-align: center;\r\n      }\r\n\r\n      .members-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\auth\\UpgradeToMemberDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"clickable\" should go before \"@click\".",
        "line": 49,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 49,
        "endColumn": 22,
        "fix": { "range": [1604, 1662], "text": "clickable\r\n            @click=\"selectOption('magic_code')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"clickable\" should go before \"@click\".",
        "line": 100,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 100,
        "endColumn": 22,
        "fix": { "range": [3675, 3737], "text": "clickable\r\n            @click=\"selectOption('email_password')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 114,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 114,
        "endColumn": 59,
        "fix": {
          "range": [4207, 4287],
          "text": "v-if=\"selectedOption === 'email_password'\"\r\n                class=\"form-preview\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"clickable\" should go before \"@click\".",
        "line": 164,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 164,
        "endColumn": 22,
        "fix": { "range": [6114, 6177], "text": "clickable\r\n            @click=\"selectOption('device_remember')\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 223,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 223,
        "endColumn": 37,
        "fix": { "range": [8421, 8435], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 241,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 241,
        "endColumn": 31,
        "fix": {
          "range": [8905, 8968],
          "text": "class=\"create-btn\"\r\n            @click=\"createPermanentAccount\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 248,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 248,
        "endColumn": 30,
        "fix": { "range": [9106, 9161], "text": "class=\"guest-btn\"\r\n            @click=\"continueAsGuest\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 264,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 264,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9499, 9502], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9499, 9502], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 265,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 265,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9519, 9522], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9519, 9522], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 271,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 271,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9679, 9682], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9679, 9682], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "<template>\r\n  <q-dialog\r\n    v-model=\"showDialog\"\r\n    persistent\r\n    maximized\r\n    transition-show=\"slide-up\"\r\n    transition-hide=\"slide-down\"\r\n    class=\"upgrade-dialog\"\r\n  >\r\n    <q-card class=\"upgrade-card\">\r\n      <!-- Header -->\r\n      <q-card-section class=\"upgrade-header text-center\">\r\n        <div class=\"celebration-icon\">\r\n          <q-icon name=\"celebration\" size=\"4rem\" color=\"primary\" />\r\n        </div>\r\n        <h2 class=\"upgrade-title\">{{ $t('upgrade.welcomeToTeam') }}</h2>\r\n        <p class=\"upgrade-subtitle\">\r\n          {{\r\n            $t('upgrade.subtitle', {\r\n              role: invite.target_role,\r\n              practice: practice.name,\r\n            })\r\n          }}\r\n        </p>\r\n        <div class=\"upgrade-benefits\">\r\n          <div class=\"benefit\">\r\n            <q-icon name=\"check_circle\" color=\"positive\" />\r\n            <span>{{ $t('upgrade.benefit1') }}</span>\r\n          </div>\r\n          <div class=\"benefit\">\r\n            <q-icon name=\"check_circle\" color=\"positive\" />\r\n            <span>{{ $t('upgrade.benefit2') }}</span>\r\n          </div>\r\n          <div class=\"benefit\">\r\n            <q-icon name=\"check_circle\" color=\"positive\" />\r\n            <span>{{ $t('upgrade.benefit3') }}</span>\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Options -->\r\n      <q-card-section class=\"upgrade-options\">\r\n        <div class=\"options-grid\">\r\n          <!-- Option 1: Personal Magic Code -->\r\n          <q-card\r\n            class=\"option-card magic-code-option\"\r\n            :class=\"{ selected: selectedOption === 'magic_code' }\"\r\n            @click=\"selectOption('magic_code')\"\r\n            clickable\r\n          >\r\n            <q-card-section class=\"text-center\">\r\n              <div class=\"option-icon\">\r\n                <q-icon name=\"auto_awesome\" size=\"3rem\" color=\"primary\" />\r\n              </div>\r\n              <h3 class=\"option-title\">{{ $t('upgrade.magicCodeTitle') }}</h3>\r\n              <p class=\"option-description\">\r\n                {{ $t('upgrade.magicCodeDescription') }}\r\n              </p>\r\n\r\n              <!-- Preview -->\r\n              <div class=\"code-preview\">\r\n                <div class=\"preview-label\">\r\n                  {{ $t('upgrade.yourPersonalCode') }}\r\n                </div>\r\n                <div class=\"preview-code\">{{ previewMagicCode }}</div>\r\n              </div>\r\n\r\n              <!-- Benefits -->\r\n              <div class=\"option-benefits\">\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"flash_on\" size=\"sm\" color=\"orange\" />\r\n                  <span>{{ $t('upgrade.magicBenefit1') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"memory\" size=\"sm\" color=\"blue\" />\r\n                  <span>{{ $t('upgrade.magicBenefit2') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"devices\" size=\"sm\" color=\"green\" />\r\n                  <span>{{ $t('upgrade.magicBenefit3') }}</span>\r\n                </div>\r\n              </div>\r\n            </q-card-section>\r\n            <q-card-section class=\"option-footer\">\r\n              <q-btn\r\n                :label=\"$t('upgrade.chooseThis')\"\r\n                color=\"primary\"\r\n                unelevated\r\n                class=\"full-width\"\r\n                :class=\"{ 'selected-btn': selectedOption === 'magic_code' }\"\r\n              />\r\n            </q-card-section>\r\n          </q-card>\r\n\r\n          <!-- Option 2: Email + Password -->\r\n          <q-card\r\n            class=\"option-card email-option\"\r\n            :class=\"{ selected: selectedOption === 'email_password' }\"\r\n            @click=\"selectOption('email_password')\"\r\n            clickable\r\n          >\r\n            <q-card-section class=\"text-center\">\r\n              <div class=\"option-icon\">\r\n                <q-icon name=\"email\" size=\"3rem\" color=\"secondary\" />\r\n              </div>\r\n              <h3 class=\"option-title\">{{ $t('upgrade.emailTitle') }}</h3>\r\n              <p class=\"option-description\">\r\n                {{ $t('upgrade.emailDescription') }}\r\n              </p>\r\n\r\n              <!-- Form Preview -->\r\n              <div\r\n                class=\"form-preview\"\r\n                v-if=\"selectedOption === 'email_password'\"\r\n              >\r\n                <q-input\r\n                  v-model=\"emailForm.email\"\r\n                  :label=\"$t('upgrade.yourEmail')\"\r\n                  outlined\r\n                  dense\r\n                  class=\"q-mb-sm\"\r\n                />\r\n                <q-input\r\n                  v-model=\"emailForm.password\"\r\n                  :label=\"$t('upgrade.choosePassword')\"\r\n                  type=\"password\"\r\n                  outlined\r\n                  dense\r\n                />\r\n              </div>\r\n\r\n              <!-- Benefits -->\r\n              <div class=\"option-benefits\">\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"security\" size=\"sm\" color=\"green\" />\r\n                  <span>{{ $t('upgrade.emailBenefit1') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"familiar\" size=\"sm\" color=\"blue\" />\r\n                  <span>{{ $t('upgrade.emailBenefit2') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"sync\" size=\"sm\" color=\"purple\" />\r\n                  <span>{{ $t('upgrade.emailBenefit3') }}</span>\r\n                </div>\r\n              </div>\r\n            </q-card-section>\r\n            <q-card-section class=\"option-footer\">\r\n              <q-btn\r\n                :label=\"$t('upgrade.chooseThis')\"\r\n                color=\"secondary\"\r\n                unelevated\r\n                class=\"full-width\"\r\n                :class=\"{ 'selected-btn': selectedOption === 'email_password' }\"\r\n              />\r\n            </q-card-section>\r\n          </q-card>\r\n\r\n          <!-- Option 3: Device Remember -->\r\n          <q-card\r\n            class=\"option-card device-option\"\r\n            :class=\"{ selected: selectedOption === 'device_remember' }\"\r\n            @click=\"selectOption('device_remember')\"\r\n            clickable\r\n          >\r\n            <q-card-section class=\"text-center\">\r\n              <div class=\"option-icon\">\r\n                <q-icon name=\"devices\" size=\"3rem\" color=\"accent\" />\r\n              </div>\r\n              <h3 class=\"option-title\">{{ $t('upgrade.deviceTitle') }}</h3>\r\n              <p class=\"option-description\">\r\n                {{ $t('upgrade.deviceDescription') }}\r\n              </p>\r\n\r\n              <!-- Device Info -->\r\n              <div class=\"device-info\">\r\n                <div class=\"device-name\">{{ deviceInfo.name }}</div>\r\n                <div class=\"device-type\">{{ deviceInfo.type }}</div>\r\n              </div>\r\n\r\n              <!-- Benefits -->\r\n              <div class=\"option-benefits\">\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"bolt\" size=\"sm\" color=\"orange\" />\r\n                  <span>{{ $t('upgrade.deviceBenefit1') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"lock\" size=\"sm\" color=\"green\" />\r\n                  <span>{{ $t('upgrade.deviceBenefit2') }}</span>\r\n                </div>\r\n                <div class=\"mini-benefit\">\r\n                  <q-icon name=\"refresh\" size=\"sm\" color=\"blue\" />\r\n                  <span>{{ $t('upgrade.deviceBenefit3') }}</span>\r\n                </div>\r\n              </div>\r\n            </q-card-section>\r\n            <q-card-section class=\"option-footer\">\r\n              <q-btn\r\n                :label=\"$t('upgrade.chooseThis')\"\r\n                color=\"accent\"\r\n                unelevated\r\n                class=\"full-width\"\r\n                :class=\"{\r\n                  'selected-btn': selectedOption === 'device_remember',\r\n                }\"\r\n              />\r\n            </q-card-section>\r\n          </q-card>\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Name Input (Always Required) -->\r\n      <q-card-section class=\"name-section\">\r\n        <div class=\"name-input-container\">\r\n          <q-input\r\n            v-model=\"userName\"\r\n            :label=\"$t('upgrade.yourFullName')\"\r\n            outlined\r\n            size=\"lg\"\r\n            class=\"name-input\"\r\n            :rules=\"[val => !!val || $t('upgrade.nameRequired')]\"\r\n          >\r\n            <template v-slot:prepend>\r\n              <q-icon name=\"person\" />\r\n            </template>\r\n          </q-input>\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Actions -->\r\n      <q-card-actions class=\"upgrade-actions\">\r\n        <div class=\"actions-container\">\r\n          <q-btn\r\n            :label=\"$t('upgrade.createAccount')\"\r\n            color=\"primary\"\r\n            size=\"lg\"\r\n            unelevated\r\n            :loading=\"creating\"\r\n            :disable=\"!canCreate\"\r\n            @click=\"createPermanentAccount\"\r\n            class=\"create-btn\"\r\n          />\r\n          <q-btn\r\n            :label=\"$t('upgrade.stayGuest')\"\r\n            flat\r\n            color=\"grey-7\"\r\n            @click=\"continueAsGuest\"\r\n            class=\"guest-btn\"\r\n          />\r\n        </div>\r\n      </q-card-actions>\r\n    </q-card>\r\n  </q-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n\r\n  // Props & Emits\r\n  interface Props {\r\n    modelValue: boolean;\r\n    invite: any;\r\n    practice: any;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    'upgrade-completed': [result: any];\r\n    'continue-as-guest': [];\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n\r\n  // State\r\n  const showDialog = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const selectedOption = ref('magic_code'); // Default to magic code\r\n  const userName = ref('');\r\n  const creating = ref(false);\r\n\r\n  // Email form data\r\n  const emailForm = ref({\r\n    email: '',\r\n    password: '',\r\n  });\r\n\r\n  // Device info\r\n  const deviceInfo = ref({\r\n    name: t('device.thisDevice'),\r\n    type: t('device.unknown'),\r\n  });\r\n\r\n  // Computed\r\n  const previewMagicCode = computed(() => {\r\n    if (!userName.value) {\r\n      return t('upgrade.previewCode');\r\n    }\r\n    const cleanName = userName.value\r\n      .split(' ')[0]\r\n      .toUpperCase()\r\n      .replace(/[^A-Z]/g, '');\r\n    return `🏥${cleanName}2024`;\r\n  });\r\n\r\n  const canCreate = computed(() => {\r\n    if (!userName.value) {\r\n      return false;\r\n    }\r\n\r\n    if (selectedOption.value === 'email_password') {\r\n      return emailForm.value.email && emailForm.value.password.length >= 6;\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  // Methods\r\n  const selectOption = (option: string) => {\r\n    selectedOption.value = option;\r\n  };\r\n\r\n  const createPermanentAccount = async () => {\r\n    creating.value = true;\r\n\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      const accountData = {\r\n        name: userName.value,\r\n        method: selectedOption.value,\r\n        personalCode:\r\n          selectedOption.value === 'magic_code' ? previewMagicCode.value : null,\r\n        email:\r\n          selectedOption.value === 'email_password'\r\n            ? emailForm.value.email\r\n            : null,\r\n      };\r\n\r\n      emit('upgrade-completed', accountData);\r\n      showDialog.value = false;\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('upgrade.accountCreated'),\r\n        position: 'top-right',\r\n        timeout: 5000,\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('upgrade.createError'),\r\n        position: 'top-right',\r\n      });\r\n    } finally {\r\n      creating.value = false;\r\n    }\r\n  };\r\n\r\n  const continueAsGuest = () => {\r\n    emit('continue-as-guest');\r\n    showDialog.value = false;\r\n  };\r\n\r\n  const detectDevice = () => {\r\n    const userAgent = navigator.userAgent;\r\n    let deviceName = 'Deze browser';\r\n    let deviceType = 'Desktop';\r\n\r\n    if (/iPhone|iPad|iPod/.test(userAgent)) {\r\n      deviceType = 'iOS';\r\n      deviceName = /iPad/.test(userAgent) ? 'iPad' : 'iPhone';\r\n    } else if (/Android/.test(userAgent)) {\r\n      deviceType = 'Android';\r\n      deviceName = 'Android apparaat';\r\n    } else if (/Mac/.test(userAgent)) {\r\n      deviceName = 'Mac';\r\n    } else if (/Windows/.test(userAgent)) {\r\n      deviceName = 'Windows PC';\r\n    }\r\n\r\n    deviceInfo.value = { name: deviceName, type: deviceType };\r\n  };\r\n\r\n  onMounted(() => {\r\n    detectDevice();\r\n  });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .upgrade-dialog {\r\n    .upgrade-card {\r\n      width: 100%;\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n\r\n      .upgrade-header {\r\n        background: linear-gradient(135deg, #1976d2, #42a5f5);\r\n        color: white;\r\n        padding: 3rem 2rem;\r\n\r\n        .celebration-icon {\r\n          margin-bottom: 1rem;\r\n        }\r\n\r\n        .upgrade-title {\r\n          margin: 0 0 1rem;\r\n          font-size: 2.5rem;\r\n          font-weight: 700;\r\n        }\r\n\r\n        .upgrade-subtitle {\r\n          font-size: 1.2rem;\r\n          margin: 0 0 2rem;\r\n          opacity: 0.9;\r\n        }\r\n\r\n        .upgrade-benefits {\r\n          display: flex;\r\n          justify-content: center;\r\n          gap: 2rem;\r\n          flex-wrap: wrap;\r\n\r\n          .benefit {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 0.5rem;\r\n            font-weight: 500;\r\n          }\r\n        }\r\n      }\r\n\r\n      .upgrade-options {\r\n        padding: 3rem 2rem;\r\n\r\n        .options-grid {\r\n          display: grid;\r\n          grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\r\n          gap: 2rem;\r\n          max-width: 1000px;\r\n          margin: 0 auto;\r\n\r\n          .option-card {\r\n            border: 2px solid transparent;\r\n            transition: all 0.3s ease;\r\n            cursor: pointer;\r\n            min-height: 400px;\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            &:hover {\r\n              transform: translateY(-4px);\r\n              box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\r\n            }\r\n\r\n            &.selected {\r\n              border-color: #1976d2;\r\n              transform: translateY(-4px);\r\n              box-shadow: 0 8px 25px rgba(25, 118, 210, 0.3);\r\n            }\r\n\r\n            .option-icon {\r\n              margin-bottom: 1rem;\r\n            }\r\n\r\n            .option-title {\r\n              margin: 0 0 1rem;\r\n              color: #1976d2;\r\n              font-size: 1.3rem;\r\n            }\r\n\r\n            .option-description {\r\n              color: #666;\r\n              margin: 0 0 1.5rem;\r\n              line-height: 1.5;\r\n            }\r\n\r\n            .code-preview {\r\n              background: #f5f5f5;\r\n              border-radius: 8px;\r\n              padding: 1rem;\r\n              margin-bottom: 1.5rem;\r\n\r\n              .preview-label {\r\n                font-size: 0.9rem;\r\n                color: #666;\r\n                margin-bottom: 0.5rem;\r\n              }\r\n\r\n              .preview-code {\r\n                font-size: 1.5rem;\r\n                font-weight: 600;\r\n                color: #1976d2;\r\n                font-family: monospace;\r\n              }\r\n            }\r\n\r\n            .form-preview {\r\n              margin-bottom: 1.5rem;\r\n            }\r\n\r\n            .device-info {\r\n              background: #f5f5f5;\r\n              border-radius: 8px;\r\n              padding: 1rem;\r\n              margin-bottom: 1.5rem;\r\n\r\n              .device-name {\r\n                font-weight: 600;\r\n                color: #1976d2;\r\n              }\r\n\r\n              .device-type {\r\n                font-size: 0.9rem;\r\n                color: #666;\r\n              }\r\n            }\r\n\r\n            .option-benefits {\r\n              .mini-benefit {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.5rem;\r\n                margin-bottom: 0.5rem;\r\n                font-size: 0.9rem;\r\n                color: #666;\r\n              }\r\n            }\r\n\r\n            .option-footer {\r\n              margin-top: auto;\r\n\r\n              .selected-btn {\r\n                background: #1976d2;\r\n                color: white;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .name-section {\r\n        background: #f8f9fa;\r\n        padding: 2rem;\r\n\r\n        .name-input-container {\r\n          max-width: 400px;\r\n          margin: 0 auto;\r\n\r\n          .name-input {\r\n            :deep(.q-field__control) {\r\n              height: 60px;\r\n              font-size: 1.1rem;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      .upgrade-actions {\r\n        padding: 2rem;\r\n        background: white;\r\n\r\n        .actions-container {\r\n          display: flex;\r\n          flex-direction: column;\r\n          gap: 1rem;\r\n          max-width: 400px;\r\n          margin: 0 auto;\r\n\r\n          .create-btn {\r\n            height: 60px;\r\n            font-size: 1.1rem;\r\n            font-weight: 600;\r\n            border-radius: 12px;\r\n          }\r\n\r\n          .guest-btn {\r\n            padding: 1rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .upgrade-dialog {\r\n      .upgrade-card {\r\n        .upgrade-header {\r\n          padding: 2rem 1rem;\r\n\r\n          .upgrade-title {\r\n            font-size: 2rem;\r\n          }\r\n\r\n          .upgrade-benefits {\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n          }\r\n        }\r\n\r\n        .upgrade-options {\r\n          padding: 2rem 1rem;\r\n\r\n          .options-grid {\r\n            grid-template-columns: 1fr;\r\n            gap: 1.5rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\BaseDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":persistent\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 29,
        "fix": {
          "range": [57, 142],
          "text": ":persistent=\"persistent\"\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":maximized\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 54,
        "fix": {
          "range": [57, 196],
          "text": ":maximized=\"isMobile && !preventMobileFullscreen\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":position\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 25,
        "fix": {
          "range": [57, 221],
          "text": ":position=\"position\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":full-width\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 28,
        "fix": {
          "range": [57, 249],
          "text": ":full-width=\"fullWidth\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":transition-show\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 38,
        "fix": {
          "range": [57, 287],
          "text": ":transition-show=\"transitionShow\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":transition-hide\" should go before \"@update:model-value\".",
        "line": 10,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 38,
        "fix": {
          "range": [57, 325],
          "text": ":transition-hide=\"transitionHide\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":class\" should go before \"@update:model-value\".",
        "line": 11,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 25,
        "fix": {
          "range": [57, 350],
          "text": ":class=\"dialogClass\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"role\" should go before \"@update:model-value\".",
        "line": 12,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 18,
        "fix": {
          "range": [57, 368],
          "text": "role=\"dialog\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-labelledby\" should go before \"@update:model-value\".",
        "line": 13,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 31,
        "fix": {
          "range": [57, 399],
          "text": ":aria-labelledby=\"titleId\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\"\n    role=\"dialog\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-describedby\" should go before \"@update:model-value\".",
        "line": 14,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 14,
        "endColumn": 35,
        "fix": {
          "range": [57, 434],
          "text": ":aria-describedby=\"subtitleId\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\"\n    role=\"dialog\"\n    :aria-labelledby=\"titleId\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-modal\" should go before \"@update:model-value\".",
        "line": 15,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 15,
        "endColumn": 22,
        "fix": {
          "range": [57, 456],
          "text": "aria-modal=\"true\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\"\n    role=\"dialog\"\n    :aria-labelledby=\"titleId\"\n    :aria-describedby=\"subtitleId\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"ref\" should go before \"@keydown\".",
        "line": 20,
        "column": 52,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 20,
        "endColumn": 67,
        "fix": { "range": [559, 595], "text": "ref=\"dialogRef\" @keydown=\"onKeyDown\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":id\" should go before \"class\".",
        "line": 71,
        "column": 36,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 71,
        "endColumn": 49,
        "fix": { "range": [2260, 2292], "text": ":id=\"titleId\" class=\"dlg__title\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":id\" should go before \"class\".",
        "line": 72,
        "column": 54,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 72,
        "endColumn": 70,
        "fix": { "range": [2341, 2379], "text": ":id=\"subtitleId\" class=\"dlg__subtitle\"" }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'title' requires default value to be set.",
        "line": 179,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 179,
        "endColumn": 20
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 182,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 182,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 185,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 185,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'headerClass' requires default value to be set.",
        "line": 215,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 215,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'contentClass' requires default value to be set.",
        "line": 218,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 218,
        "endColumn": 38
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'footerClass' requires default value to be set.",
        "line": 221,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 221,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'dialogClass' requires default value to be set.",
        "line": 224,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 224,
        "endColumn": 37
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'loadingText' requires default value to be set.",
        "line": 242,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 242,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'primaryAction' requires default value to be set.",
        "line": 248,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 248,
        "endColumn": 34
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'secondaryAction' requires default value to be set.",
        "line": 251,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 251,
        "endColumn": 36
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'steps' requires default value to be set.",
        "line": 257,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 257,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'confirmCloseMessage' requires default value to be set.",
        "line": 272,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 272,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 14,
    "source": "<template>\n  <q-dialog\n    :model-value=\"modelValue\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :persistent=\"persistent\"\n    :maximized=\"isMobile && !preventMobileFullscreen\"\n    :position=\"position\"\n    :full-width=\"fullWidth\"\n    :transition-show=\"transitionShow\"\n    :transition-hide=\"transitionHide\"\n    :class=\"dialogClass\"\n    role=\"dialog\"\n    :aria-labelledby=\"titleId\"\n    :aria-describedby=\"subtitleId\"\n    aria-modal=\"true\"\n    @show=\"onShow\"\n    @hide=\"onHide\"\n    @escape-key=\"onEscapeKey\"\n  >\n    <div :class=\"cardClasses\" @keydown=\"onKeyDown\" ref=\"dialogRef\">\n      <!-- Loading Overlay -->\n      <div v-if=\"loading\" class=\"dlg__loading-overlay\">\n        <div class=\"loading-spinner\"></div>\n        <p class=\"loading-text\">{{ loadingText || $t('common.loading') }}</p>\n      </div>\n\n      <!-- Step Indicator (for multi-step dialogs) -->\n      <div v-if=\"showSteps && steps && steps.length > 1\" class=\"dialog-steps\">\n        <div class=\"steps-container\">\n          <div\n            v-for=\"(step, index) in steps\"\n            :key=\"index\"\n            :class=\"[\n              'step-item',\n              {\n                'step-active': index === currentStep,\n                'step-completed': index < currentStep,\n                'step-disabled': index > currentStep,\n              },\n            ]\"\n          >\n            <div class=\"step-indicator\">\n              <q-icon\n                v-if=\"index < currentStep\"\n                name=\"check\"\n                class=\"icon-size-sm\"\n              />\n              <span v-else>{{ index + 1 }}</span>\n            </div>\n            <span class=\"step-label\">{{ step.label }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dialog Header -->\n      <header\n        v-if=\"hasHeader\"\n        class=\"dlg__header\"\n        :class=\"[headerClass, headerVariantClass, statusColorClass]\"\n      >\n        <template v-if=\"slots.header\">\n          <slot name=\"header\" />\n        </template>\n        <div v-else class=\"header-content\">\n          <div v-if=\"icon\" class=\"header-icon-container\">\n            <div class=\"header-icon\">\n              <q-icon :name=\"icon\" :size=\"iconSize\" />\n            </div>\n          </div>\n          <div class=\"header-text\">\n            <h1 class=\"dlg__title\" :id=\"titleId\">{{ title }}</h1>\n            <p v-if=\"subtitle\" class=\"dlg__subtitle\" :id=\"subtitleId\">\n              {{ subtitle }}\n            </p>\n          </div>\n          <q-btn\n            v-if=\"closable\"\n            flat\n            round\n            dense\n            icon=\"close\"\n            class=\"close-btn\"\n            :aria-label=\"$t('common.closeDialog') || 'Close dialog'\"\n            :disable=\"isCloseDisabled\"\n            @click=\"onClose\"\n          />\n        </div>\n      </header>\n\n      <!-- Dialog Content -->\n      <main class=\"dlg__body\" :class=\"contentClass\">\n        <slot />\n      </main>\n\n      <!-- Dialog Footer -->\n      <footer\n        v-if=\"hasActions || primaryAction || secondaryAction\"\n        class=\"dlg__footer\"\n        :class=\"footerClass\"\n      >\n        <!-- Custom Actions Slot -->\n        <div v-if=\"hasActions\" class=\"custom-actions\">\n          <slot name=\"actions\" :loading=\"loading\" :disabled=\"actionsDisabled\" />\n        </div>\n\n        <!-- Standard Actions -->\n        <div v-else class=\"standard-actions\">\n          <!-- Secondary Action -->\n          <q-btn\n            v-if=\"secondaryAction\"\n            :label=\"secondaryAction.label\"\n            :icon=\"secondaryAction.icon\"\n            :disable=\"isSecondaryDisabled\"\n            flat\n            @click=\"onSecondaryAction\"\n          />\n\n          <!-- Primary Action -->\n          <q-btn\n            v-if=\"primaryAction\"\n            :label=\"primaryAction.label\"\n            :icon=\"primaryAction.icon\"\n            :loading=\"primaryActionLoading\"\n            :disable=\"isPrimaryDisabled\"\n            unelevated\n            color=\"primary\"\n            @click=\"onPrimaryAction\"\n          />\n        </div>\n      </footer>\n    </div>\n  </q-dialog>\n</template>\n\n<script setup lang=\"ts\">\n  import {\n    computed,\n    useSlots,\n    ref,\n    nextTick,\n    onMounted,\n    onUnmounted,\n  } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n\n  /**\n   * BaseDialog Component - Enterprise-grade dialog system\n   *\n   * Features:\n   * - Responsive design (mobile fullscreen, desktop modal)\n   * - Keyboard navigation (Enter/Escape)\n   * - Loading states and async actions\n   * - Multi-step wizard support\n   * - Dirty state checking\n   * - Focus management\n   * - Status colors and variants\n   * - Consistent with app design system\n   */\n\n  interface DialogStep {\n    label: string;\n    completed?: boolean;\n  }\n\n  interface DialogAction {\n    label: string;\n    icon?: string;\n    class?: string;\n    disabled?: boolean;\n    loading?: boolean;\n  }\n\n  interface Props {\n    /** Dialog visibility state */\n    modelValue: boolean;\n\n    /** Dialog title */\n    title?: string;\n\n    /** Dialog subtitle */\n    subtitle?: string;\n\n    /** Header icon */\n    icon?: string;\n\n    /** Icon size */\n    iconSize?: string;\n\n    /** Prevent closing on backdrop click */\n    persistent?: boolean;\n\n    /** Force maximized state */\n    maximized?: boolean;\n\n    /** Prevent mobile fullscreen behavior */\n    preventMobileFullscreen?: boolean;\n\n    /** Dialog position */\n    position?: 'standard' | 'top' | 'right' | 'bottom' | 'left';\n\n    /** Full width dialog */\n    fullWidth?: boolean;\n\n    /** Show transition */\n    transitionShow?: string;\n\n    /** Hide transition */\n    transitionHide?: string;\n\n    /** Show close button */\n    closable?: boolean;\n\n    /** Header CSS classes */\n    headerClass?: string | string[];\n\n    /** Content CSS classes */\n    contentClass?: string | string[];\n\n    /** Footer CSS classes */\n    footerClass?: string | string[];\n\n    /** Dialog CSS classes */\n    dialogClass?: string | string[];\n\n    /** Visual variant */\n    variant?: 'standard' | 'modern' | 'glass' | 'elegant' | 'minimal';\n\n    /** Dialog size */\n    size?: 'sm' | 'md' | 'lg' | 'xl' | 'full';\n\n    /** Header variant */\n    headerVariant?: 'gradient' | 'solid' | 'minimal' | 'glass';\n\n    /** Status color for header */\n    statusColor?: 'primary' | 'success' | 'warning' | 'danger' | 'info';\n\n    /** Loading state */\n    loading?: boolean;\n\n    /** Loading text */\n    loadingText?: string;\n\n    /** Disable all actions */\n    actionsDisabled?: boolean;\n\n    /** Primary action configuration */\n    primaryAction?: DialogAction;\n\n    /** Secondary action configuration */\n    secondaryAction?: DialogAction;\n\n    /** Primary action loading state */\n    primaryActionLoading?: boolean;\n\n    /** Steps for wizard dialogs */\n    steps?: DialogStep[];\n\n    /** Current step index */\n    currentStep?: number;\n\n    /** Show step indicator */\n    showSteps?: boolean;\n\n    /** Auto-focus first input */\n    autoFocus?: boolean;\n\n    /** Check for unsaved changes */\n    isDirty?: boolean;\n\n    /** Confirm close message */\n    confirmCloseMessage?: string;\n\n    /** Enable keyboard shortcuts */\n    keyboardShortcuts?: boolean;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'close'): void;\n    (e: 'primary-action'): void;\n    (e: 'secondary-action'): void;\n    (e: 'show'): void;\n    (e: 'hide'): void;\n    (e: 'escape'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    persistent: false,\n    maximized: false,\n    preventMobileFullscreen: false,\n    position: 'standard',\n    fullWidth: false,\n    transitionShow: 'jump-up',\n    transitionHide: 'jump-down',\n    closable: true,\n    iconSize: '24px',\n    variant: 'elegant',\n    size: 'md',\n    headerVariant: 'solid',\n    statusColor: 'primary',\n    loading: false,\n    actionsDisabled: false,\n    primaryActionLoading: false,\n    currentStep: 0,\n    showSteps: false,\n    autoFocus: true,\n    isDirty: false,\n    keyboardShortcuts: true,\n  });\n\n  const emit = defineEmits<Emits>();\n  const slots = useSlots();\n  const { t } = useI18n();\n  const $q = useQuasar();\n\n  // Reactive references\n  const dialogRef = ref<HTMLElement>();\n\n  // Computed properties\n  const titleId = computed(\n    () => `dialog-title-${Math.random().toString(36).substr(2, 9)}`\n  );\n  const subtitleId = computed(\n    () => `dialog-subtitle-${Math.random().toString(36).substr(2, 9)}`\n  );\n\n  const isMobile = computed(() => $q.screen.lt.md);\n\n  const hasHeader = computed(\n    () => !!(props.title || props.subtitle || props.icon || slots.header)\n  );\n  const hasActions = computed(() => !!slots.actions);\n\n  const cardClasses = computed(() => {\n    const classes = ['dlg'];\n\n    // Size classes using new unified system\n    classes.push(`dlg--${props.size}`);\n\n    // Loading state\n    if (props.loading) {\n      classes.push('dlg--loading');\n    }\n\n    // Mobile fullscreen handled by CSS media queries\n    // No need for JavaScript-based mobile detection\n\n    return classes;\n  });\n\n  const headerVariantClass = computed(() => `header-${props.headerVariant}`);\n  const statusColorClass = computed(() => `header-${props.statusColor}`);\n  const iconVariantClass = computed(() => `icon-${props.headerVariant}`);\n\n  // Normalized disabled states for native buttons (boolean, not undefined)\n  const isCloseDisabled = computed(\n    () => Boolean(props.loading || props.actionsDisabled)\n  );\n  const isPrimaryDisabled = computed(\n    () => Boolean(props.loading || props.actionsDisabled || props.primaryAction?.disabled)\n  );\n  const isSecondaryDisabled = computed(\n    () => Boolean(props.loading || props.actionsDisabled || props.secondaryAction?.disabled)\n  );\n\n  // Methods\n  const onShow = () => {\n    emit('show');\n\n    if (props.autoFocus) {\n      nextTick(() => {\n        focusFirstInput();\n      });\n    }\n  };\n\n  const onHide = () => {\n    emit('hide');\n  };\n\n  const onClose = async () => {\n    if (props.isDirty && props.confirmCloseMessage) {\n      const confirmed = await showConfirmDialog(props.confirmCloseMessage);\n      if (!confirmed) return;\n    }\n\n    emit('close');\n    emit('update:modelValue', false);\n  };\n\n  const onPrimaryAction = () => {\n    emit('primary-action');\n  };\n\n  const onSecondaryAction = () => {\n    emit('secondary-action');\n  };\n\n  const onEscapeKey = () => {\n    if (props.keyboardShortcuts && !props.persistent) {\n      emit('escape');\n      onClose();\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (!props.keyboardShortcuts || props.loading) return;\n\n    // Enter key - trigger primary action\n    if (event.key === 'Enter' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      if (props.primaryAction && !props.primaryAction.disabled) {\n        onPrimaryAction();\n      }\n    }\n  };\n\n  const focusFirstInput = () => {\n    const firstInput = dialogRef.value?.querySelector(\n      'input, textarea, select, [tabindex=\"0\"]'\n    ) as HTMLElement;\n    if (firstInput) {\n      firstInput.focus();\n    }\n  };\n\n  const showConfirmDialog = (message: string): Promise<boolean> => {\n    return new Promise(resolve => {\n      $q.dialog({\n        title: t('common.confirmClose'),\n        message,\n        cancel: true,\n        persistent: true,\n      })\n        .onOk(() => {\n          resolve(true);\n        })\n        .onCancel(() => {\n          resolve(false);\n        });\n    });\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    // Add global keyboard listeners if needed\n  });\n\n  onUnmounted(() => {\n    // Cleanup global listeners\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // BASEDIALOG - USES UNIFIED DIALOG SYSTEM\n  // Component-specific styles only, shared styles in _dialogs.scss\n  // ===================================================================\n\n  // Step indicator for wizard dialogs\n  .dialog-steps {\n    background: var(--surface);\n    border-bottom: var(--dlg-border);\n    padding: var(--dlg-pad);\n\n    .steps-container {\n      display: flex;\n      justify-content: center;\n      gap: var(--dlg-gap);\n      max-width: 600px;\n      margin: 0 auto;\n\n      .step-item {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n        font-size: 14px;\n        font-weight: 500;\n        color: var(--text-muted);\n        font-family: var(--font-family);\n\n        &.step-active {\n          color: var(--brand-primary);\n        }\n\n        &.step-completed {\n          color: var(--brand-success);\n        }\n\n        .step-indicator {\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 12px;\n          font-weight: 600;\n          background: var(--neutral-200);\n          color: var(--text-muted);\n          font-family: var(--font-family);\n        }\n\n        &.step-active .step-indicator {\n          background: var(--brand-primary);\n          color: white;\n        }\n\n        &.step-completed .step-indicator {\n          background: var(--brand-success);\n          color: white;\n        }\n      }\n    }\n\n    @media (max-width: 640px) {\n      .steps-container {\n        gap: 8px;\n\n        .step-label {\n          display: none;\n        }\n      }\n    }\n  }\n\n  // Header variant styles (colors only, layout handled by unified system)\n  .dlg__header {\n    // Header variants\n    &.header-gradient {\n      background: linear-gradient(135deg, var(--brand-primary) 0%, var(--brand-primary-light) 100%);\n      color: white;\n      border-bottom: none;\n    }\n\n    &.header-solid {\n      background: var(--brand-primary);\n      color: white;\n      border-bottom: none;\n    }\n\n    &.header-minimal {\n      background: transparent;\n      color: var(--text);\n    }\n\n    &.header-glass {\n      background: rgba(255, 255, 255, 0.8);\n      backdrop-filter: blur(12px);\n      color: var(--text);\n    }\n\n    // Status colors\n    &.header-success {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-success);\n      }\n    }\n\n    &.header-warning {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-warning);\n      }\n    }\n\n    &.header-danger {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-danger);\n      }\n    }\n\n    &.header-info {\n      &.header-solid,\n      &.header-gradient {\n        background: var(--brand-info);\n      }\n    }\n\n    .header-content {\n      .header-icon-container {\n        .header-icon {\n          background: rgba(255, 255, 255, 0.2);\n          color: currentColor;\n        }\n      }\n    }\n  }\n\n  // Dark mode adaptations for component-specific styles\n  body.body--dark {\n    .dialog-steps {\n      background: var(--surface);\n      border-bottom: var(--dlg-border);\n    }\n\n    .dlg__header {\n      &.header-minimal {\n        color: var(--text);\n      }\n\n      &.header-glass {\n        background: rgba(0, 0, 0, 0.8);\n        color: var(--text);\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\ConfirmDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 19,
        "fix": {
          "range": [59, 134],
          "text": ":title=\"title\"\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 17,
        "fix": {
          "range": [59, 151],
          "text": ":icon=\"icon\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":size\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 17,
        "fix": {
          "range": [59, 168],
          "text": ":size=\"size\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":variant\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 29,
        "fix": {
          "range": [59, 197],
          "text": ":variant=\"dialogVariant\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":header-variant\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 36,
        "fix": {
          "range": [59, 233],
          "text": ":header-variant=\"headerVariant\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@update:model-value\".",
        "line": 10,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 23,
        "fix": {
          "range": [59, 256],
          "text": ":loading=\"loading\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"persistent\" should go before \"@update:model-value\".",
        "line": 11,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 15,
        "fix": {
          "range": [59, 271],
          "text": "persistent\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 61,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 61,
        "endColumn": 29,
        "fix": { "range": [1790, 1840], "text": ":disable=\"loading\"\n          @click=\"handleCancel\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 70,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 70,
        "endColumn": 44,
        "fix": {
          "range": [2014, 2080],
          "text": ":disable=\"loading || !canConfirm\"\n          @click=\"handleConfirm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@click\".",
        "line": 71,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 71,
        "endColumn": 36,
        "fix": {
          "range": [2014, 2116],
          "text": ":icon=\"confirmButtonIcon\"\n          @click=\"handleConfirm\"\n          :disable=\"loading || !canConfirm\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'details' requires default value to be set.",
        "line": 87,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 87,
        "endColumn": 22
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'warningText' requires default value to be set.",
        "line": 89,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 89,
        "endColumn": 26
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'consequences' requires default value to be set.",
        "line": 90,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 90,
        "endColumn": 29
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'confirmButtonIcon' requires default value to be set.",
        "line": 95,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 95,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 10,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    persistent\n    @close=\"handleCancel\"\n  >\n    <!-- Message Content -->\n    <div class=\"confirm-dialog-content\">\n      <!-- Main message -->\n      <div class=\"message\">{{ message }}</div>\n\n      <!-- Additional details -->\n      <div v-if=\"details\" class=\"details\">{{ details }}</div>\n\n      <!-- Warning/Info content -->\n      <div v-if=\"type !== 'default'\" class=\"alert-section\">\n        <q-banner :class=\"alertClasses\" :icon=\"alertIcon\">\n          <div v-if=\"warningText\" class=\"alert-text\">{{ warningText }}</div>\n          <ul\n            v-if=\"consequences && consequences.length > 0\"\n            class=\"consequences-list\"\n          >\n            <li v-for=\"consequence in consequences\" :key=\"consequence\">\n              {{ consequence }}\n            </li>\n          </ul>\n        </q-banner>\n      </div>\n\n      <!-- Input field for verification -->\n      <div v-if=\"requiresTextConfirmation\" class=\"verification-section\">\n        <p class=\"verification-prompt\">{{ verificationPrompt }}</p>\n        <q-input\n          v-model=\"verificationText\"\n          :placeholder=\"verificationPlaceholder\"\n          outlined\n          dense\n          :error=\"verificationError\"\n          :error-message=\"verificationErrorMessage\"\n          @input=\"handleVerificationInput\"\n        />\n      </div>\n    </div>\n\n    <!-- Dialog Actions -->\n    <template #actions>\n      <div class=\"confirm-dialog-actions\">\n        <!-- Cancel button -->\n        <q-btn\n          :label=\"cancelButtonText\"\n          color=\"grey-7\"\n          flat\n          @click=\"handleCancel\"\n          :disable=\"loading\"\n        />\n\n        <!-- Confirm button -->\n        <q-btn\n          :label=\"confirmButtonText\"\n          :color=\"confirmButtonColor\"\n          :loading=\"loading\"\n          @click=\"handleConfirm\"\n          :disable=\"loading || !canConfirm\"\n          :icon=\"confirmButtonIcon\"\n        />\n      </div>\n    </template>\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref, watch } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import BaseDialog from './BaseDialog.vue';\n\n  interface Props {\n    modelValue: boolean;\n    title: string;\n    message: string;\n    details?: string;\n    type?: 'default' | 'warning' | 'danger' | 'info';\n    warningText?: string;\n    consequences?: string[];\n    loading?: boolean;\n    cancelButtonText?: string;\n    confirmButtonText?: string;\n    confirmButtonColor?: string;\n    confirmButtonIcon?: string;\n    size?: 'sm' | 'md' | 'lg';\n    requiresTextConfirmation?: boolean;\n    verificationPrompt?: string;\n    verificationPlaceholder?: string;\n    verificationMatch?: string;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'confirm'): void;\n    (e: 'cancel'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    type: 'default',\n    loading: false,\n    cancelButtonText: '',\n    confirmButtonText: '',\n    confirmButtonColor: 'primary',\n    size: 'sm',\n    requiresTextConfirmation: false,\n    verificationPrompt: '',\n    verificationPlaceholder: '',\n    verificationMatch: '',\n  });\n\n  const emit = defineEmits<Emits>();\n  const { t } = useI18n();\n\n  // Internal state\n  const verificationText = ref('');\n  const verificationError = ref(false);\n\n  // Computed properties\n  const icon = computed(() => {\n    if (props.type === 'warning') return 'warning';\n    if (props.type === 'danger') return 'error';\n    if (props.type === 'info') return 'info';\n    return 'help';\n  });\n\n  const alertIcon = computed(() => {\n    if (props.type === 'warning') return 'warning';\n    if (props.type === 'danger') return 'dangerous';\n    if (props.type === 'info') return 'info';\n    return 'help';\n  });\n\n  const alertClasses = computed(() => {\n    const classes = ['text-white'];\n    if (props.type === 'warning') classes.push('bg-warning');\n    if (props.type === 'danger') classes.push('bg-negative');\n    if (props.type === 'info') classes.push('bg-info');\n    return classes;\n  });\n\n  const computedCancelButtonText = computed(\n    () => props.cancelButtonText || t('common.cancel')\n  );\n\n  const computedConfirmButtonText = computed(() => {\n    if (props.confirmButtonText) return props.confirmButtonText;\n    if (props.type === 'danger') return t('common.delete');\n    return t('common.confirm');\n  });\n\n  const computedConfirmButtonColor = computed(() => {\n    if (props.confirmButtonColor !== 'primary') return props.confirmButtonColor;\n    if (props.type === 'danger') return 'negative';\n    if (props.type === 'warning') return 'warning';\n    return 'primary';\n  });\n\n  const verificationPrompt = computed(\n    () =>\n      props.verificationPrompt ||\n      t('common.typeToConfirm', { text: props.verificationMatch })\n  );\n\n  const verificationPlaceholder = computed(\n    () => props.verificationPlaceholder || props.verificationMatch\n  );\n\n  const verificationErrorMessage = computed(() =>\n    t('validation.textMustMatch', { text: props.verificationMatch })\n  );\n\n  const canConfirm = computed(() => {\n    if (props.requiresTextConfirmation) {\n      return (\n        verificationText.value === props.verificationMatch &&\n        !verificationError.value\n      );\n    }\n    return true;\n  });\n\n  const dialogVariant = computed(() => {\n    if (props.type === 'danger') return 'elegant';\n    if (props.type === 'warning') return 'modern';\n    return 'elegant';\n  });\n\n  const headerVariant = computed(() => {\n    if (props.type === 'danger') return 'gradient';\n    if (props.type === 'warning') return 'solid';\n    return 'gradient';\n  });\n\n  // Methods\n  const handleConfirm = () => {\n    if (canConfirm.value && !props.loading) {\n      emit('confirm');\n    }\n  };\n\n  const handleCancel = () => {\n    emit('cancel');\n    emit('update:modelValue', false);\n  };\n\n  const handleVerificationInput = () => {\n    if (props.requiresTextConfirmation && props.verificationMatch) {\n      verificationError.value =\n        verificationText.value !== props.verificationMatch &&\n        verificationText.value.length > 0;\n    }\n  };\n\n  // Reset verification when dialog opens/closes\n  watch(\n    () => props.modelValue,\n    newVal => {\n      if (newVal) {\n        verificationText.value = '';\n        verificationError.value = false;\n      }\n    }\n  );\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // Confirm dialog styles\n  // ===================================================================\n\n  .confirm-dialog-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n\n    .message {\n      font-size: 18px;\n      line-height: 1.6;\n      color: var(--neutral-800);\n      font-weight: var(--font-weight-medium);\n      letter-spacing: -0.01em;\n    }\n\n    .details {\n      font-size: var(--text-base);\n      line-height: 1.5;\n      color: var(--neutral-600);\n      background: var(--neutral-50);\n      padding: var(--space-4);\n      border-radius: 12px;\n      border-left: 4px solid var(--brand-primary);\n    }\n\n    .alert-section {\n      :deep(.q-banner) {\n        border-radius: 16px;\n        padding: var(--space-5);\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        border: none;\n\n        &.bg-warning {\n          background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n        }\n\n        &.bg-negative {\n          background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);\n        }\n\n        &.bg-info {\n          background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);\n        }\n      }\n\n      .alert-text {\n        font-weight: var(--font-weight-semibold);\n        font-size: var(--text-base);\n        margin-bottom: var(--space-3);\n        line-height: 1.5;\n      }\n\n      .consequences-list {\n        margin: 0;\n        padding-left: var(--space-5);\n\n        li {\n          margin-bottom: var(--space-2);\n          font-size: var(--text-sm);\n          line-height: 1.4;\n\n          &:last-child {\n            margin-bottom: 0;\n          }\n        }\n      }\n    }\n\n    .verification-section {\n      background: var(--neutral-50);\n      padding: var(--space-5);\n      border-radius: 16px;\n      border: 2px solid var(--neutral-200);\n\n      .verification-prompt {\n        font-size: var(--text-base);\n        color: var(--neutral-700);\n        margin-bottom: var(--space-4);\n        font-weight: var(--font-weight-medium);\n        line-height: 1.5;\n      }\n\n      // Field styling handled by global field system\n    }\n  }\n\n  .confirm-dialog-actions {\n    display: flex;\n    gap: var(--space-4);\n    justify-content: flex-end;\n    margin-top: var(--space-2);\n\n    :deep(.q-btn) {\n      min-width: 140px;\n      height: var(--control-height-md);\n      border-radius: 14px;\n      font-weight: var(--font-weight-semibold);\n      font-size: var(--text-base);\n      letter-spacing: 0.01em;\n      text-transform: none;\n      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n      &:hover {\n        transform: translateY(-2px);\n        box-shadow: var(--shadow-lg);\n      }\n\n      &:active {\n        transform: translateY(0);\n      }\n\n      // Cancel button styling\n      &[color='grey-7'] {\n        background: var(--neutral-100);\n        color: var(--neutral-700);\n        border: 2px solid var(--neutral-200);\n\n        &:hover {\n          background: var(--neutral-200);\n          border-color: var(--neutral-300);\n        }\n      }\n\n      // Primary button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-primary {\n        background: linear-gradient(\n          135deg,\n          var(--brand-primary) 0%,\n          var(--brand-primary-light) 100%\n        );\n        box-shadow: var(--shadow-md);\n      }\n\n      // Danger button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-negative {\n        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);\n        box-shadow: var(--shadow-md);\n      }\n\n      // Warning button enhancements\n      &.q-btn--unelevated.q-btn--rectangle.bg-warning {\n        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);\n        box-shadow: var(--shadow-md);\n      }\n    }\n\n    @media (max-width: 640px) {\n      flex-direction: column-reverse;\n      gap: var(--space-3);\n\n      :deep(.q-btn) {\n        width: 100%;\n        min-width: auto;\n      }\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE ADAPTATIONS\n  // ===================================================================\n\n  body.body--dark {\n    .confirm-dialog-content {\n      .message {\n        color: var(--neutral-100);\n      }\n\n      .details {\n        color: var(--neutral-300);\n        background: var(--neutral-800);\n        border-left-color: var(--brand-primary-light);\n      }\n\n      .verification-section {\n        background: var(--neutral-800);\n        border-color: var(--neutral-700);\n\n        .verification-prompt {\n          color: var(--neutral-200);\n        }\n\n        :deep(.q-field) {\n          .q-field__control {\n            background: var(--neutral-900);\n            border-color: var(--neutral-600);\n            color: var(--neutral-100);\n\n            &:hover {\n              border-color: var(--brand-primary-light);\n            }\n          }\n\n          &.q-field--focused .q-field__control {\n            border-color: var(--brand-primary-light);\n            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);\n          }\n        }\n      }\n    }\n\n    .confirm-dialog-actions {\n      :deep(.q-btn) {\n        // Cancel button dark mode\n        &[color='grey-7'] {\n          background: var(--neutral-700);\n          color: var(--neutral-200);\n          border-color: var(--neutral-600);\n\n          &:hover {\n            background: var(--neutral-600);\n            border-color: var(--neutral-500);\n          }\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // ACCESSIBILITY ENHANCEMENTS\n  // ===================================================================\n\n  .confirm-dialog-content {\n    .verification-section {\n      :deep(.q-field) {\n        .q-field__control {\n          &:focus-within {\n            outline: 2px solid var(--brand-primary);\n            outline-offset: 2px;\n          }\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\FormDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 19,
        "fix": {
          "range": [59, 134],
          "text": ":title=\"title\"\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":subtitle\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 25,
        "fix": {
          "range": [59, 159],
          "text": ":subtitle=\"subtitle\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 17,
        "fix": {
          "range": [59, 176],
          "text": ":icon=\"icon\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":size\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 17,
        "fix": {
          "range": [59, 193],
          "text": ":size=\"size\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":variant\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 29,
        "fix": {
          "range": [59, 222],
          "text": ":variant=\"dialogVariant\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":header-variant\" should go before \"@update:model-value\".",
        "line": 10,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 36,
        "fix": {
          "range": [59, 258],
          "text": ":header-variant=\"headerVariant\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@update:model-value\".",
        "line": 11,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 23,
        "fix": {
          "range": [59, 281],
          "text": ":loading=\"loading\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading-text\" should go before \"@update:model-value\".",
        "line": 12,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 32,
        "fix": {
          "range": [59, 313],
          "text": ":loading-text=\"loadingText\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":persistent\" should go before \"@update:model-value\".",
        "line": 13,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 40,
        "fix": {
          "range": [59, 353],
          "text": ":persistent=\"persistent || loading\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    :loading-text=\"loadingText\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":closable\" should go before \"@update:model-value\".",
        "line": 14,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 14,
        "endColumn": 25,
        "fix": {
          "range": [59, 378],
          "text": ":closable=\"!loading\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    :loading-text=\"loadingText\"\n    :persistent=\"persistent || loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@reset\".",
        "line": 21,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 21,
        "endColumn": 36,
        "fix": { "range": [489, 545], "text": "class=\"form-dialog-content\"\n        @reset=\"handleReset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-live\" should go before \"@reset\".",
        "line": 22,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 27,
        "fix": {
          "range": [489, 572],
          "text": "aria-live=\"polite\"\n        @reset=\"handleReset\"\n        class=\"form-dialog-content\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 60,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 60,
        "endColumn": 31,
        "fix": { "range": [1622, 1673], "text": ":disable=\"loading\"\n            @click=\"handleReset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 69,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 69,
        "endColumn": 31,
        "fix": { "range": [1832, 1884], "text": ":disable=\"loading\"\n            @click=\"handleCancel\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 79,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 79,
        "endColumn": 45,
        "fix": {
          "range": [2081, 2147],
          "text": ":disable=\"loading || !canSubmit\"\n            @click=\"handleSubmit\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@click\".",
        "line": 80,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 80,
        "endColumn": 37,
        "fix": {
          "range": [2081, 2184],
          "text": ":icon=\"submitButtonIcon\"\n            @click=\"handleSubmit\"\n            :disable=\"loading || !canSubmit\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'subtitle' requires default value to be set.",
        "line": 96,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 96,
        "endColumn": 23
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'icon' requires default value to be set.",
        "line": 97,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 97,
        "endColumn": 19
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'submitButtonIcon' requires default value to be set.",
        "line": 107,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 107,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 16,
    "source": "<template>\n  <BaseDialog\n    :model-value=\"modelValue\"\n    @update:model-value=\"$emit('update:modelValue', $event)\"\n    :title=\"title\"\n    :subtitle=\"subtitle\"\n    :icon=\"icon\"\n    :size=\"size\"\n    :variant=\"dialogVariant\"\n    :header-variant=\"headerVariant\"\n    :loading=\"loading\"\n    :loading-text=\"loadingText\"\n    :persistent=\"persistent || loading\"\n    :closable=\"!loading\"\n    @close=\"handleClose\"\n    >\n    <!-- Form Content -->\n      <q-form\n        @submit=\"handleSubmit\"\n        @reset=\"handleReset\"\n        class=\"form-dialog-content\"\n        aria-live=\"polite\"\n      >\n      <slot />\n\n      <!-- Form validation errors summary -->\n        <div\n          v-if=\"showErrorSummary && formErrors.length > 0\"\n          class=\"dlg__error-summary\"\n          role=\"alert\"\n          aria-live=\"assertive\"\n        >\n          <div class=\"error-title\">\n            {{ $t('validation.formErrors') }}\n          </div>\n          <ul class=\"error-list\">\n            <li v-for=\"error in formErrors\" :key=\"error\">{{ error }}</li>\n          </ul>\n        </div>\n    </q-form>\n\n    <!-- Dialog Actions -->\n    <template #actions>\n      <div class=\"form-dialog-actions\">\n        <!-- Loading indicator -->\n        <div v-if=\"loading\" class=\"loading-indicator\">\n          <q-spinner-dots size=\"md\" />\n          <span class=\"loading-text\">{{ loadingText }}</span>\n        </div>\n\n        <!-- Action buttons -->\n        <div v-else class=\"action-buttons\">\n          <!-- Reset button -->\n          <q-btn\n            v-if=\"showResetButton\"\n            :label=\"resetButtonText\"\n            color=\"grey-7\"\n            flat\n            @click=\"handleReset\"\n            :disable=\"loading\"\n          />\n\n          <!-- Cancel button -->\n          <q-btn\n            :label=\"cancelButtonText\"\n            color=\"grey-7\"\n            flat\n            @click=\"handleCancel\"\n            :disable=\"loading\"\n          />\n\n          <!-- Submit button -->\n          <q-btn\n            :label=\"submitButtonText\"\n            unelevated\n            color=\"primary\"\n            :loading=\"loading\"\n            @click=\"handleSubmit\"\n            :disable=\"loading || !canSubmit\"\n            :icon=\"submitButtonIcon\"\n          />\n        </div>\n      </div>\n    </template>\n  </BaseDialog>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed, ref } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import BaseDialog from './BaseDialog.vue';\n\n  interface Props {\n    modelValue: boolean;\n    title: string;\n    subtitle?: string;\n    icon?: string;\n    size?: 'sm' | 'md' | 'lg' | 'xl';\n    persistent?: boolean;\n    loading?: boolean;\n    loadingText?: string;\n    showResetButton?: boolean;\n    resetButtonText?: string;\n    cancelButtonText?: string;\n    submitButtonText?: string;\n    submitButtonColor?: string;\n    submitButtonIcon?: string;\n    canSubmit?: boolean;\n    formErrors?: string[];\n    showErrorSummary?: boolean;\n    confirmBeforeClose?: boolean;\n    confirmCloseMessage?: string;\n  }\n\n  interface Emits {\n    (e: 'update:modelValue', value: boolean): void;\n    (e: 'submit'): void;\n    (e: 'cancel'): void;\n    (e: 'reset'): void;\n    (e: 'close'): void;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    size: 'md',\n    persistent: false,\n    loading: false,\n    loadingText: 'Processing...',\n    showResetButton: false,\n    resetButtonText: '',\n    cancelButtonText: '',\n    submitButtonText: '',\n    submitButtonColor: 'primary',\n    canSubmit: true,\n    formErrors: () => [],\n    showErrorSummary: true,\n    confirmBeforeClose: false,\n    confirmCloseMessage: '',\n  });\n\n  const emit = defineEmits<Emits>();\n  const { t } = useI18n();\n\n  // Internal state\n  const hasUnsavedChanges = ref(false);\n\n  // Computed properties\n  const computedResetButtonText = computed(\n    () => props.resetButtonText || t('common.reset')\n  );\n\n  const computedCancelButtonText = computed(\n    () => props.cancelButtonText || t('common.cancel')\n  );\n\n  const computedSubmitButtonText = computed(\n    () => props.submitButtonText || t('common.save')\n  );\n\n  const computedConfirmCloseMessage = computed(\n    () => props.confirmCloseMessage || t('common.confirmClose')\n  );\n\n  const dialogVariant = computed(() => 'elegant');\n  const headerVariant = computed(() => 'solid');\n\n  // Methods\n  const handleSubmit = () => {\n    if (!props.loading && props.canSubmit) {\n      emit('submit');\n    }\n  };\n\n  const handleCancel = () => {\n    if (props.confirmBeforeClose && hasUnsavedChanges.value) {\n      confirmClose(() => {\n        emit('cancel');\n        emit('update:modelValue', false);\n      });\n    } else {\n      emit('cancel');\n      emit('update:modelValue', false);\n    }\n  };\n\n  const handleReset = () => {\n    emit('reset');\n    hasUnsavedChanges.value = false;\n  };\n\n  const handleClose = () => {\n    if (props.confirmBeforeClose && hasUnsavedChanges.value) {\n      confirmClose(() => {\n        emit('close');\n        emit('update:modelValue', false);\n      });\n    } else {\n      emit('close');\n      emit('update:modelValue', false);\n    }\n  };\n\n  const confirmClose = (onConfirm: () => void) => {\n    // TODO: Use Quasar's Dialog plugin for confirmation\n    // For now, use browser confirm\n    if (confirm(computedConfirmCloseMessage.value)) {\n      onConfirm();\n    }\n  };\n\n  // Track changes\n  const markAsChanged = () => {\n    hasUnsavedChanges.value = true;\n  };\n\n  // Expose methods for parent components\n  defineExpose({\n    markAsChanged,\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // FORMDIALOG - USES UNIFIED DIALOG SYSTEM\n  // Component-specific styles only, shared styles in _dialogs.scss\n  // ===================================================================\n\n  .form-dialog-content {\n    display: flex;\n    flex-direction: column;\n    gap: var(--dlg-gap);\n  }\n\n  /* Form Grid helpers with token-driven spacing */\n  :global(.form-grid) {\n    display: grid;\n    grid-template-columns: repeat(12, minmax(0, 1fr));\n    gap: var(--dlg-gap);\n  }\n\n  :global(.col-12) { grid-column: span 12 / span 12; }\n  :global(.col-6) { grid-column: span 12 / span 12; }\n  :global(.col-4) { grid-column: span 12 / span 12; }\n  :global(.col-3) { grid-column: span 12 / span 12; }\n\n  @media (min-width: 768px) {\n    :global(.col-6) { grid-column: span 6 / span 6; }\n    :global(.col-4) { grid-column: span 6 / span 6; }\n    :global(.col-3) { grid-column: span 6 / span 6; }\n  }\n\n  @media (min-width: 1024px) {\n    :global(.col-4) { grid-column: span 4 / span 4; }\n    :global(.col-3) { grid-column: span 3 / span 3; }\n  }\n\n  .form-dialog-actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    margin-top: var(--space-2);\n\n    .loading-indicator {\n      display: flex;\n      align-items: center;\n      gap: var(--space-4);\n      color: var(--neutral-600);\n      background: var(--neutral-50);\n      padding: var(--space-4) var(--space-6);\n      border-radius: 16px;\n      border: 2px solid var(--neutral-200);\n\n      .loading-text {\n        font-size: var(--text-base);\n        font-weight: var(--font-weight-medium);\n      }\n\n      :deep(.q-spinner-dots) {\n        font-size: 32px;\n      }\n    }\n\n    .action-buttons {\n      display: flex;\n      gap: var(--space-4);\n      margin-left: auto;\n\n      // Reset button styling\n      :deep(.q-btn[color='grey-7']) {\n        background: var(--neutral-100);\n        color: var(--neutral-700);\n        border: 2px solid var(--neutral-200);\n\n        &:hover {\n          background: var(--neutral-200);\n          border-color: var(--neutral-300);\n        }\n      }\n\n      @media (max-width: 640px) {\n        flex-direction: column-reverse;\n        width: 100%;\n        margin-left: 0;\n        gap: var(--space-3);\n\n        :deep(.q-btn) {\n          width: 100%;\n          min-width: auto;\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE ADAPTATIONS\n  // ===================================================================\n\n  body.body--dark {\n    .form-dialog-content {\n      :deep(.q-field) {\n        .q-field__control {\n          background: var(--neutral-900);\n          border-color: var(--neutral-600);\n          color: var(--neutral-100);\n\n          &:hover {\n            border-color: var(--brand-primary-light);\n          }\n        }\n\n        &.q-field--focused .q-field__control {\n          border-color: var(--brand-primary-light);\n          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);\n        }\n\n        &.q-field--error .q-field__control {\n          background: rgba(220, 38, 38, 0.1);\n        }\n\n        .q-field__label {\n          color: var(--neutral-300);\n        }\n      }\n\n      :deep(.q-checkbox),\n      :deep(.q-radio) {\n        .q-checkbox__inner,\n        .q-radio__inner {\n          border-color: var(--neutral-500);\n          background: var(--neutral-800);\n\n          &:hover {\n            border-color: var(--brand-primary-light);\n          }\n        }\n\n        &.q-checkbox--checked .q-checkbox__inner,\n        &.q-radio--checked .q-radio__inner {\n          background: var(--brand-primary-light);\n          border-color: var(--brand-primary-light);\n        }\n      }\n    }\n\n    .form-dialog-actions {\n      .loading-indicator {\n        background: var(--neutral-800);\n        border-color: var(--neutral-700);\n        color: var(--neutral-300);\n      }\n\n      .action-buttons {\n        :deep(.q-btn[color='grey-7']) {\n          background: var(--neutral-700);\n          color: var(--neutral-200);\n          border-color: var(--neutral-600);\n\n          &:hover {\n            background: var(--neutral-600);\n            border-color: var(--neutral-500);\n          }\n        }\n      }\n    }\n  }\n\n  // ===================================================================\n  // RESPONSIVE DESIGN\n  // ===================================================================\n\n  @media (max-width: 640px) {\n    .form-dialog-actions {\n      flex-direction: column;\n      align-items: stretch;\n      gap: var(--space-4);\n\n      .loading-indicator {\n        justify-content: center;\n        margin-bottom: 0;\n      }\n    }\n  }\n\n  // ===================================================================\n  // ACCESSIBILITY ENHANCEMENTS\n  // ===================================================================\n\n  .form-dialog-content {\n    :deep(.q-field) {\n      .q-field__control {\n        &:focus-within {\n          outline: 2px solid var(--brand-primary);\n          outline-offset: 2px;\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\base\\OptimizedImage.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'width' requires default value to be set.",
        "line": 65,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 65,
        "endColumn": 29
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'height' requires default value to be set.",
        "line": 66,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 66,
        "endColumn": 30
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'aspectRatio' requires default value to be set.",
        "line": 78,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 78,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <div\r\n    ref=\"imageContainer\"\r\n    class=\"optimized-image-container\"\r\n    :class=\"{\r\n      loading: isLoading,\r\n      error: hasError,\r\n      loaded: isLoaded,\r\n    }\"\r\n    :style=\"containerStyle\"\r\n  >\r\n    <!-- Placeholder while loading -->\r\n    <div\r\n      v-if=\"isLoading || (!isVisible && !isLoaded)\"\r\n      class=\"image-placeholder\"\r\n      :style=\"placeholderStyle\"\r\n    >\r\n      <q-skeleton\r\n        v-if=\"showSkeleton && !hasError\"\r\n        type=\"img\"\r\n        :width=\"width\"\r\n        :height=\"height\"\r\n        class=\"skeleton-placeholder\"\r\n      />\r\n      <div v-else-if=\"!hasError\" class=\"placeholder-icon\">\r\n        <q-icon :name=\"placeholderIcon\" :size=\"iconSize\" color=\"grey-4\" />\r\n      </div>\r\n      <div v-if=\"hasError\" class=\"error-placeholder\">\r\n        <q-icon name=\"broken_image\" :size=\"iconSize\" color=\"negative\" />\r\n        <div v-if=\"showErrorText\" class=\"error-text\">\r\n          {{ $t('common.imageLoadError') }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Optimized image -->\r\n    <img\r\n      v-show=\"isLoaded && !hasError\"\r\n      ref=\"imageElement\"\r\n      :src=\"optimizedSrc\"\r\n      :alt=\"alt\"\r\n      :width=\"width\"\r\n      :height=\"height\"\r\n      :loading=\"useNativeLazyLoading ? 'lazy' : 'eager'\"\r\n      class=\"optimized-img\"\r\n      @load=\"handleLoad\"\r\n      @error=\"handleError\"\r\n      @click=\"handleClick\"\r\n    />\r\n\r\n    <!-- Loading overlay -->\r\n    <div v-if=\"isLoading && showLoadingOverlay\" class=\"loading-overlay\">\r\n      <q-spinner-dots size=\"24px\" color=\"primary\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onUnmounted, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n\r\n  interface Props {\r\n    src: string;\r\n    alt?: string;\r\n    width?: string | number;\r\n    height?: string | number;\r\n    lazy?: boolean;\r\n    quality?: number;\r\n    format?: 'webp' | 'avif' | 'jpg' | 'png' | 'auto';\r\n    placeholder?: string;\r\n    placeholderIcon?: string;\r\n    showSkeleton?: boolean;\r\n    showLoadingOverlay?: boolean;\r\n    showErrorText?: boolean;\r\n    useNativeLazyLoading?: boolean;\r\n    rootMargin?: string;\r\n    threshold?: number;\r\n    aspectRatio?: string;\r\n    objectFit?: 'cover' | 'contain' | 'fill' | 'scale-down' | 'none';\r\n    borderRadius?: string;\r\n    clickable?: boolean;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    alt: '',\r\n    lazy: true,\r\n    quality: 85,\r\n    format: 'auto',\r\n    placeholder: '',\r\n    placeholderIcon: 'image',\r\n    showSkeleton: true,\r\n    showLoadingOverlay: false,\r\n    showErrorText: true,\r\n    useNativeLazyLoading: true,\r\n    rootMargin: '50px',\r\n    threshold: 0.1,\r\n    objectFit: 'cover',\r\n    borderRadius: '4px',\r\n    clickable: false,\r\n  });\r\n\r\n  interface Emits {\r\n    (e: 'load'): void;\r\n    (e: 'error'): void;\r\n    (e: 'click'): void;\r\n  }\r\n\r\n  const emit = defineEmits<Emits>();\r\n  const { t } = useI18n();\r\n\r\n  // Refs\r\n  const imageContainer = ref<HTMLElement>();\r\n  const imageElement = ref<HTMLImageElement>();\r\n  const isVisible = ref(false);\r\n  const isLoading = ref(false);\r\n  const isLoaded = ref(false);\r\n  const hasError = ref(false);\r\n  const observer = ref<IntersectionObserver>();\r\n\r\n  // Computed\r\n  const optimizedSrc = computed(() => {\r\n    if (!props.src) return '';\r\n\r\n    // If it's a data URL or blob, return as-is\r\n    if (props.src.startsWith('data:') || props.src.startsWith('blob:')) {\r\n      return props.src;\r\n    }\r\n\r\n    // Create optimized URL with query parameters\r\n    const url = new URL(props.src, window.location.origin);\r\n\r\n    if (props.quality !== 85) {\r\n      url.searchParams.set('quality', props.quality.toString());\r\n    }\r\n\r\n    if (props.format !== 'auto') {\r\n      url.searchParams.set('format', props.format);\r\n    }\r\n\r\n    if (props.width) {\r\n      url.searchParams.set('width', props.width.toString());\r\n    }\r\n\r\n    if (props.height) {\r\n      url.searchParams.set('height', props.height.toString());\r\n    }\r\n\r\n    return url.toString();\r\n  });\r\n\r\n  const containerStyle = computed(() => ({\r\n    width: props.width ? `${props.width}px` : '100%',\r\n    height: props.height ? `${props.height}px` : 'auto',\r\n    aspectRatio: props.aspectRatio || undefined,\r\n    borderRadius: props.borderRadius,\r\n    cursor: props.clickable ? 'pointer' : 'default',\r\n  }));\r\n\r\n  const placeholderStyle = computed(() => ({\r\n    width: props.width ? `${props.width}px` : '100%',\r\n    height: props.height ? `${props.height}px` : '200px',\r\n    aspectRatio: props.aspectRatio || undefined,\r\n    borderRadius: props.borderRadius,\r\n  }));\r\n\r\n  const iconSize = computed(() => {\r\n    const size = Math.min(\r\n      parseInt(props.width?.toString() || '200') / 4,\r\n      parseInt(props.height?.toString() || '200') / 4,\r\n      48\r\n    );\r\n    return `${Math.max(size, 24)}px`;\r\n  });\r\n\r\n  // Methods\r\n  const startLoading = () => {\r\n    if (!props.src || hasError.value) return;\r\n\r\n    isLoading.value = true;\r\n\r\n    // Preload the image\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      handleLoad();\r\n    };\r\n    img.onerror = () => {\r\n      handleError();\r\n    };\r\n    img.src = optimizedSrc.value;\r\n  };\r\n\r\n  const handleLoad = () => {\r\n    isLoading.value = false;\r\n    isLoaded.value = true;\r\n    hasError.value = false;\r\n    emit('load');\r\n  };\r\n\r\n  const handleError = () => {\r\n    isLoading.value = false;\r\n    isLoaded.value = false;\r\n    hasError.value = true;\r\n    emit('error');\r\n  };\r\n\r\n  const handleClick = () => {\r\n    if (props.clickable) {\r\n      emit('click');\r\n    }\r\n  };\r\n\r\n  const setupIntersectionObserver = () => {\r\n    if (!props.lazy || !imageContainer.value) return;\r\n\r\n    observer.value = new IntersectionObserver(\r\n      entries => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !isVisible.value) {\r\n            isVisible.value = true;\r\n            startLoading();\r\n            observer.value?.disconnect();\r\n          }\r\n        });\r\n      },\r\n      {\r\n        rootMargin: props.rootMargin,\r\n        threshold: props.threshold,\r\n      }\r\n    );\r\n\r\n    observer.value.observe(imageContainer.value);\r\n  };\r\n\r\n  // Watchers\r\n  watch(\r\n    () => props.src,\r\n    () => {\r\n      isLoaded.value = false;\r\n      hasError.value = false;\r\n\r\n      if (props.lazy && !isVisible.value) {\r\n        setupIntersectionObserver();\r\n      } else {\r\n        startLoading();\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    if (props.lazy) {\r\n      setupIntersectionObserver();\r\n    } else {\r\n      isVisible.value = true;\r\n      startLoading();\r\n    }\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    observer.value?.disconnect();\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .optimized-image-container {\r\n    position: relative;\r\n    display: inline-block;\r\n    overflow: hidden;\r\n    background: var(--color-surface-secondary);\r\n    transition: all 0.3s ease;\r\n\r\n    &.loading {\r\n      .optimized-img {\r\n        opacity: 0;\r\n      }\r\n    }\r\n\r\n    &.loaded {\r\n      .optimized-img {\r\n        opacity: 1;\r\n      }\r\n    }\r\n\r\n    &.error {\r\n      background: var(--color-surface-secondary);\r\n    }\r\n  }\r\n\r\n  .image-placeholder {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    background: linear-gradient(135deg, var(--color-surface-secondary) 0%, var(--bg-tertiary) 100%);\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 100px;\r\n\r\n    .placeholder-icon {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      opacity: 0.5;\r\n    }\r\n\r\n    .error-placeholder {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      gap: 8px;\r\n\r\n      .error-text {\r\n        font-size: 12px;\r\n        color: #666;\r\n        text-align: center;\r\n      }\r\n    }\r\n  }\r\n\r\n  .skeleton-placeholder {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .optimized-img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: v-bind('props.objectFit');\r\n    transition: opacity 0.3s ease;\r\n    display: block;\r\n  }\r\n\r\n  .loading-overlay {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 2;\r\n  }\r\n\r\n  // Dark mode support\r\n  body.body--dark .optimized-image-container {\r\n    background: #2a2a2a;\r\n\r\n    .image-placeholder {\r\n      background: linear-gradient(135deg, #2a2a2a 0%, #333333 100%);\r\n\r\n      .placeholder-icon {\r\n        opacity: 0.3;\r\n      }\r\n\r\n      .error-text {\r\n        color: #ccc;\r\n      }\r\n    }\r\n\r\n    &.error {\r\n      background: #2a2a2a;\r\n    }\r\n  }\r\n\r\n  // Hover effects for clickable images\r\n  .optimized-image-container.clickable {\r\n    &:hover {\r\n      transform: scale(1.02);\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n    }\r\n  }\r\n\r\n  // Performance optimizations\r\n  .optimized-img {\r\n    will-change: opacity;\r\n    transform: translateZ(0); // Force GPU acceleration\r\n  }\r\n\r\n  .image-placeholder {\r\n    will-change: opacity;\r\n    contain: layout style paint;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\AlertCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseDashboardWidget.example.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\BaseDashboardWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\CardStyleGuide.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\InteractiveCard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\cards\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\charts\\ChartCanvas.vue",
    "messages": [
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'options' requires default value to be set.",
        "line": 23,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 23,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 52,
        "column": 23,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 52,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1528, 1531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1528, 1531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 88,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 88,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2509, 2512], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2509, 2512], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <div class=\"chart-canvas-wrapper\">\r\n    <canvas ref=\"canvasEl\" :height=\"height\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { onMounted, onUnmounted, ref, watch } from 'vue';\r\n  import { Chart, ChartData, ChartOptions } from 'chart.js/auto';\r\n\r\n  interface DatasetInput {\r\n    label: string;\r\n    data: number[];\r\n    color?: string;\r\n    backgroundColor?: string | string[];\r\n    borderColor?: string | string[];\r\n  }\r\n\r\n  interface Props {\r\n    type: string;\r\n    labels: string[];\r\n    datasets: DatasetInput[];\r\n    options?: ChartOptions;\r\n    height?: number | string;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), { height: 240 });\r\n  const emit = defineEmits<{\r\n    (e: 'datapoint-click', payload: { label: string; value: number }): void;\r\n  }>();\r\n\r\n  const canvasEl = ref<HTMLCanvasElement | null>(null);\r\n  let chart: Chart | null = null;\r\n\r\n  function buildData(): ChartData {\r\n    return {\r\n      labels: props.labels,\r\n      datasets: props.datasets.map(ds => ({\r\n        label: ds.label,\r\n        data: ds.data,\r\n        backgroundColor: ds.backgroundColor || ds.color || 'rgba(33,150,243,0.4)',\r\n        borderColor: ds.borderColor || ds.color || 'rgba(33,150,243,1)',\r\n        borderWidth: 2,\r\n        fill: props.type === 'line' ? false : true,\r\n      })),\r\n    } as ChartData;\r\n  }\r\n\r\n  function renderChart() {\r\n    if (!canvasEl.value) return;\r\n    chart?.destroy();\r\n    chart = new Chart(canvasEl.value.getContext('2d')!, {\r\n      type: props.type as any,\r\n      data: buildData(),\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: { legend: { display: true, position: 'bottom' } },\r\n        ...props.options,\r\n        // Click handler\r\n        onClick: (_event, activeElements) => {\r\n          if (!chart || activeElements.length === 0) return;\r\n          const { index, datasetIndex } = activeElements[0];\r\n          const label = props.labels?.[index] ?? '';\r\n          const value = (props.datasets?.[datasetIndex]?.data || [])[index] ?? 0;\r\n          emit('datapoint-click', { label, value });\r\n        },\r\n      } as ChartOptions,\r\n    });\r\n  }\r\n\r\n  onMounted(() => {\r\n    renderChart();\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    chart?.destroy();\r\n    chart = null;\r\n  });\r\n\r\n  watch(\r\n    () => [props.type, props.labels, props.datasets, props.options],\r\n    () => {\r\n      if (!chart) {\r\n        renderChart();\r\n        return;\r\n      }\r\n      chart.config.type = props.type as any;\r\n      chart.data = buildData();\r\n      chart.options = { ...chart.options, ...props.options } as ChartOptions;\r\n      chart.update();\r\n    },\r\n    { deep: true }\r\n  );\r\n</script>\r\n\r\n<style scoped>\r\n  .chart-canvas-wrapper {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    min-height: 160px;\r\n  }\r\n\r\n  canvas {\r\n    display: block;\r\n    width: 100% !important;\r\n  }\r\n</style>\r\n\r\n\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\DynamicWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\AlertWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\ChartWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\ListWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\MetricWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\dashboard\\widgets\\QuickActionWidget.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\filters\\FilterField.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\filters\\FilterPanel.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\CountingEntryWithBatch.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 116,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 116,
        "endColumn": 22,
        "fix": { "range": [4107, 4160], "text": "size=\"sm\"\r\n            @click=\"addingNewBatch = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 181,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 181,
        "endColumn": 28,
        "fix": { "range": [6150, 6197], "text": ":loading=\"saving\"\r\n          @click=\"saveEntry\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 182,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 182,
        "endColumn": 30,
        "fix": {
          "range": [6150, 6228],
          "text": ":disable=\"!isValid\"\r\n          @click=\"saveEntry\"\r\n          :loading=\"saving\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 183,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 183,
        "endColumn": 21,
        "fix": {
          "range": [6150, 6250],
          "text": "unelevated\r\n          @click=\"saveEntry\"\r\n          :loading=\"saving\"\r\n          :disable=\"!isValid\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'entry' requires default value to be set.",
        "line": 205,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 205,
        "endColumn": 30
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'existingEntry' requires default value to be set.",
        "line": 209,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 209,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 233,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 233,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7687, 7690], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7687, 7690], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "<template>\r\n  <div class=\"counting-entry-with-batch\">\r\n    <BaseCard class=\"entry-card\">\r\n      <q-card-section class=\"entry-header\">\r\n        <div class=\"flex justify-between items-center\">\r\n          <div class=\"product-info\">\r\n            <div class=\"text-h6\">{{ product.name }}</div>\r\n            <div class=\"text-caption\">\r\n              {{ product.sku }} • {{ product.category }}\r\n            </div>\r\n          </div>\r\n          <q-chip\r\n            :color=\"statusColor\"\r\n            :icon=\"statusIcon\"\r\n            text-color=\"white\"\r\n            :label=\"statusLabel\"\r\n          />\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <q-card-section class=\"entry-content\">\r\n        <!-- Current Stock Display -->\r\n        <div class=\"current-stock-section q-mb-md\">\r\n          <div class=\"text-subtitle2 q-mb-sm\">\r\n            {{ $t('inventory.currentStock') }}\r\n          </div>\r\n          <div class=\"stock-display\">\r\n            <q-chip color=\"info\" text-color=\"white\" icon=\"inventory\">\r\n              {{ currentStock }} {{ product.unit }}\r\n            </q-chip>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Batch Information Section -->\r\n        <div\r\n          v-if=\"viewMode === 'full' || hasBatches\"\r\n          class=\"batch-section q-mb-md\"\r\n        >\r\n          <div class=\"text-subtitle2 q-mb-sm\">\r\n            {{ $t('batch.batchInformation') }}\r\n          </div>\r\n\r\n          <!-- Existing Batches -->\r\n          <div\r\n            v-if=\"existingBatches.length > 0\"\r\n            class=\"existing-batches q-mb-md\"\r\n          >\r\n            <div class=\"text-caption q-mb-xs\">\r\n              {{ $t('batch.existingBatches') }}:\r\n            </div>\r\n            <div class=\"batch-list\">\r\n              <q-card\r\n                v-for=\"batch in existingBatches\"\r\n                :key=\"batch.id\"\r\n                flat\r\n                bordered\r\n                class=\"batch-item\"\r\n                :class=\"{ 'selected-batch': selectedBatch?.id === batch.id }\"\r\n                @click=\"selectBatch(batch)\"\r\n              >\r\n                <q-card-section class=\"q-pa-sm\">\r\n                  <div class=\"flex justify-between items-center\">\r\n                    <div>\r\n                      <div class=\"text-weight-medium\">\r\n                        {{ batch.batch_number }}\r\n                      </div>\r\n                      <div class=\"text-caption\">\r\n                        {{ $t('batch.expires') }}:\r\n                        {{ formatDate(batch.expiry_date) }}\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"text-right\">\r\n                      <div class=\"text-weight-medium\">\r\n                        {{ batch.current_quantity }}\r\n                      </div>\r\n                      <div class=\"text-caption\">{{ product.unit }}</div>\r\n                    </div>\r\n                  </div>\r\n                  <q-linear-progress\r\n                    v-if=\"batch.urgency_level !== 'normal'\"\r\n                    :value=\"getUrgencyValue(batch.urgency_level)\"\r\n                    :color=\"getUrgencyColor(batch.urgency_level)\"\r\n                    size=\"2px\"\r\n                    class=\"q-mt-xs\"\r\n                  />\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- New Batch Input (for full mode or when adding new batch) -->\r\n          <div\r\n            v-if=\"viewMode === 'full' || addingNewBatch\"\r\n            class=\"new-batch-input\"\r\n          >\r\n            <div class=\"text-caption q-mb-xs\">\r\n              {{ $t('batch.addNewBatch') }}:\r\n            </div>\r\n            <BatchInput\r\n              v-model=\"newBatchData\"\r\n              :view-mode=\"viewMode\"\r\n              :location-id=\"locationId\"\r\n              @validation-changed=\"onBatchValidationChanged\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Add New Batch Button (for lite mode) -->\r\n          <q-btn\r\n            v-if=\"viewMode === 'lite' && !addingNewBatch\"\r\n            flat\r\n            dense\r\n            color=\"primary\"\r\n            icon=\"add\"\r\n            :label=\"$t('batch.addNewBatch')\"\r\n            @click=\"addingNewBatch = true\"\r\n            size=\"sm\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Counted Quantity Input -->\r\n        <div class=\"counted-quantity-section\">\r\n          <div class=\"text-subtitle2 q-mb-sm\">\r\n            {{ $t('counting.countedQuantity') }}\r\n          </div>\r\n          <q-input\r\n            v-model.number=\"countedQuantity\"\r\n            type=\"number\"\r\n            min=\"0\"\r\n            step=\"1\"\r\n            outlined\r\n            dense\r\n            :label=\"$t('counting.enterCount')\"\r\n            :placeholder=\"$t('counting.enterQuantity')\"\r\n          >\r\n            <template #append>\r\n              <span class=\"text-caption\">{{ product.unit }}</span>\r\n            </template>\r\n          </q-input>\r\n        </div>\r\n\r\n        <!-- Discrepancy Display -->\r\n        <div v-if=\"hasDiscrepancy\" class=\"discrepancy-section q-mt-md\">\r\n          <q-banner :class=\"discrepancyClass\" rounded dense>\r\n            <template #avatar>\r\n              <q-icon :name=\"discrepancyIcon\" />\r\n            </template>\r\n            <div class=\"text-subtitle2\">{{ discrepancyMessage }}</div>\r\n            <div class=\"text-body2\">\r\n              {{ $t('counting.difference') }}: {{ discrepancyAmount }}\r\n              {{ product.unit }}\r\n            </div>\r\n          </q-banner>\r\n        </div>\r\n\r\n        <!-- Notes Section -->\r\n        <div v-if=\"viewMode === 'full'\" class=\"notes-section q-mt-md\">\r\n          <q-input\r\n            v-model=\"notes\"\r\n            type=\"textarea\"\r\n            :label=\"$t('common.notes')\"\r\n            :placeholder=\"$t('counting.addNotes')\"\r\n            outlined\r\n            dense\r\n            rows=\"2\"\r\n          />\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <q-card-actions align=\"right\">\r\n        <q-btn\r\n          v-if=\"viewMode === 'lite' && addingNewBatch\"\r\n          flat\r\n          color=\"negative\"\r\n          :label=\"$t('common.cancel')\"\r\n          @click=\"cancelNewBatch\"\r\n        />\r\n        <q-btn\r\n          color=\"primary\"\r\n          :label=\"$t('counting.saveCount')\"\r\n          @click=\"saveEntry\"\r\n          :loading=\"saving\"\r\n          :disable=\"!isValid\"\r\n          unelevated\r\n        />\r\n      </q-card-actions>\r\n    </BaseCard>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import BaseCard from 'src/components/base/BaseCard.vue';\r\n  import BatchInput from 'src/components/BatchInput.vue';\r\n  import type {\r\n    ProductBatchWithDetails,\r\n    CountingEntryDTO,\r\n  } from 'src/types/inventory';\r\n  import { useFormatting } from 'src/composables/useFormatting';\r\n\r\n  interface Props {\r\n    entry?: CountingEntryDTO;\r\n    sessionId: string;\r\n    practiceId: string;\r\n    viewMode?: 'lite' | 'full';\r\n    existingEntry?: CountingEntryDTO;\r\n  }\r\n\r\n  interface Emits {\r\n    (e: 'entry-saved', entry: CountingEntryDTO): void;\r\n    (e: 'entry-updated', entry: CountingEntryDTO): void;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    viewMode: 'full',\r\n  });\r\n\r\n  const emit = defineEmits<Emits>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n  const authStore = useAuthStore();\r\n  const { formatDate } = useFormatting();\r\n\r\n  // Reactive state\r\n  const countedQuantity = ref<number | null>(null);\r\n  const selectedBatch = ref<ProductBatchWithDetails | null>(null);\r\n  const newBatchData = ref<any>({});\r\n  const notes = ref('');\r\n  const saving = ref(false);\r\n  const addingNewBatch = ref(false);\r\n  const batchValidationPassed = ref(true);\r\n\r\n  // Computed\r\n  const existingBatches = computed(() => {\r\n    return batchStore\r\n      .batchesByProduct(props.product.id)\r\n      .filter(batch => batch.location_id === props.locationId);\r\n  });\r\n\r\n  const hasBatches = computed(() => existingBatches.value.length > 0);\r\n\r\n  const currentStock = computed(() => {\r\n    return existingBatches.value.reduce(\r\n      (total, batch) => total + batch.current_quantity,\r\n      0\r\n    );\r\n  });\r\n\r\n  const hasDiscrepancy = computed(() => {\r\n    return (\r\n      countedQuantity.value !== null &&\r\n      countedQuantity.value !== currentStock.value\r\n    );\r\n  });\r\n\r\n  const discrepancyAmount = computed(() => {\r\n    if (countedQuantity.value === null) return 0;\r\n    return countedQuantity.value - currentStock.value;\r\n  });\r\n\r\n  const discrepancyClass = computed(() => {\r\n    if (!hasDiscrepancy.value) return '';\r\n    return discrepancyAmount.value > 0\r\n      ? 'bg-orange-1 text-orange-8'\r\n      : 'bg-red-1 text-red-8';\r\n  });\r\n\r\n  const discrepancyIcon = computed(() => {\r\n    if (!hasDiscrepancy.value) return '';\r\n    return discrepancyAmount.value > 0 ? 'trending_up' : 'trending_down';\r\n  });\r\n\r\n  const discrepancyMessage = computed(() => {\r\n    if (!hasDiscrepancy.value) return '';\r\n    return discrepancyAmount.value > 0\r\n      ? t('counting.overageDetected')\r\n      : t('counting.shortageDetected');\r\n  });\r\n\r\n  const statusColor = computed(() => {\r\n    if (props.existingEntry) {\r\n      switch (props.existingEntry.status) {\r\n        case 'completed':\r\n          return 'positive';\r\n        case 'reviewed':\r\n          return 'info';\r\n        case 'flagged':\r\n          return 'warning';\r\n        default:\r\n          return 'grey';\r\n      }\r\n    }\r\n    return 'grey';\r\n  });\r\n\r\n  const statusIcon = computed(() => {\r\n    if (props.existingEntry) {\r\n      switch (props.existingEntry.status) {\r\n        case 'completed':\r\n          return 'check_circle';\r\n        case 'reviewed':\r\n          return 'verified';\r\n        case 'flagged':\r\n          return 'flag';\r\n        default:\r\n          return 'pending';\r\n      }\r\n    }\r\n    return 'pending';\r\n  });\r\n\r\n  const statusLabel = computed(() => {\r\n    if (props.existingEntry) {\r\n      return t(`counting.entryStatus.${props.existingEntry.status}`);\r\n    }\r\n    return t('counting.entryStatus.pending');\r\n  });\r\n\r\n  const isValid = computed(() => {\r\n    const hasValidCount =\r\n      countedQuantity.value !== null && countedQuantity.value >= 0;\r\n    const hasValidBatch = !addingNewBatch.value || batchValidationPassed.value;\r\n    return hasValidCount && hasValidBatch;\r\n  });\r\n\r\n  // Methods\r\n  const selectBatch = (batch: ProductBatchWithDetails) => {\r\n    selectedBatch.value = selectedBatch.value?.id === batch.id ? null : batch;\r\n  };\r\n\r\n  const getUrgencyValue = (urgencyLevel: string): number => {\r\n    switch (urgencyLevel) {\r\n      case 'critical':\r\n        return 1;\r\n      case 'high':\r\n        return 0.8;\r\n      case 'warning':\r\n        return 0.6;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  const getUrgencyColor = (urgencyLevel: string): string => {\r\n    switch (urgencyLevel) {\r\n      case 'critical':\r\n        return 'negative';\r\n      case 'high':\r\n        return 'warning';\r\n      case 'warning':\r\n        return 'orange';\r\n      default:\r\n        return 'primary';\r\n    }\r\n  };\r\n\r\n  const onBatchValidationChanged = (isValid: boolean) => {\r\n    batchValidationPassed.value = isValid;\r\n  };\r\n\r\n  const cancelNewBatch = () => {\r\n    addingNewBatch.value = false;\r\n    newBatchData.value = {};\r\n  };\r\n\r\n  const saveEntry = async () => {\r\n    try {\r\n      saving.value = true;\r\n\r\n      const entryData = {\r\n        session_id: props.sessionId,\r\n        product_id: props.product.id,\r\n        location_id: props.locationId,\r\n        system_quantity: currentStock.value,\r\n        counted_quantity: countedQuantity.value || 0,\r\n        discrepancy: discrepancyAmount.value,\r\n        notes: notes.value,\r\n        counted_by: authStore.user?.id || '',\r\n        counted_at: new Date().toISOString(),\r\n        status: hasDiscrepancy.value ? 'flagged' : 'completed',\r\n      };\r\n\r\n      // Add batch information if available\r\n      if (selectedBatch.value) {\r\n        entryData.batch_id = selectedBatch.value.id;\r\n      }\r\n\r\n      // Handle new batch creation if needed\r\n      if (addingNewBatch.value && newBatchData.value.batchNumber) {\r\n        // Create new batch first\r\n        const batchRequest = {\r\n          practice_id: authStore.clinicId,\r\n          product_id: props.product.id,\r\n          location_id: props.locationId,\r\n          batch_number: newBatchData.value.batchNumber,\r\n          expiry_date: newBatchData.value.expiryDate,\r\n          initial_quantity: newBatchData.value.quantity || 0,\r\n          current_quantity: newBatchData.value.quantity || 0,\r\n          unit_cost: 0, // Default value, can be updated later\r\n          currency: 'EUR',\r\n        };\r\n\r\n        const newBatch = await batchStore.createBatch(batchRequest);\r\n        entryData.batch_id = newBatch.id;\r\n      }\r\n\r\n      // Save the counting entry (this would need to be implemented in a counting store)\r\n      // await countingStore.saveEntry(entryData);\r\n\r\n      emit('entry-saved', entryData as CountingEntryDTO);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('counting.entrySaved'),\r\n        position: 'top',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving counting entry:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('counting.saveFailed'),\r\n        position: 'top',\r\n      });\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  // Initialize with existing entry data\r\n  if (props.existingEntry) {\r\n    countedQuantity.value = props.existingEntry.counted_quantity;\r\n    notes.value = props.existingEntry.notes || '';\r\n\r\n    if (props.existingEntry.batch_id) {\r\n      selectedBatch.value =\r\n        existingBatches.value.find(\r\n          b => b.id === props.existingEntry.batch_id\r\n        ) || null;\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .counting-entry-with-batch {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .entry-card {\r\n    border-left: 4px solid var(--primary);\r\n  }\r\n\r\n  .product-info .text-h6 {\r\n    margin-bottom: 4px;\r\n  }\r\n\r\n  .stock-display {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n\r\n  .batch-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .batch-item {\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n  }\r\n\r\n  .batch-item:hover {\r\n    background-color: var(--grey-1);\r\n  }\r\n\r\n  .selected-batch {\r\n    border-color: var(--primary);\r\n    background-color: var(--primary-1);\r\n  }\r\n\r\n  .new-batch-input {\r\n    border: 1px dashed var(--grey-4);\r\n    border-radius: 4px;\r\n    padding: var(--control-pad-y) var(--control-pad-x);\r\n    background-color: var(--grey-1);\r\n  }\r\n\r\n  .discrepancy-section {\r\n    animation: fadeIn 0.3s ease-in-out;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(-10px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .batch-list {\r\n      max-height: 150px;\r\n    }\r\n\r\n    .new-batch-input {\r\n      padding: var(--control-pad-y);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\CountingSessionDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 9,
        "column": 32,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 61,
        "fix": { "range": [181, 229], "text": "class=\"counting-session-form\" @submit=\"onSubmit\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 20,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 20,
        "endColumn": 33,
        "fix": { "range": [568, 582], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 36,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 36,
        "endColumn": 33,
        "fix": { "range": [959, 973], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 54,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 54,
        "endColumn": 33,
        "fix": { "range": [1451, 1465], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#option' instead of 'v-slot:option'.",
        "line": 57,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 57,
        "endColumn": 40,
        "fix": { "range": [1542, 1555], "text": "#option" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 99,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 99,
        "endColumn": 33,
        "fix": { "range": [2865, 2879], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 111,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 111,
        "endColumn": 27,
        "fix": { "range": [3162, 3207], "text": ":loading=\"loading\"\r\n        @click=\"onSubmit\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 112,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 112,
        "endColumn": 19,
        "fix": {
          "range": [3162, 3227],
          "text": "unelevated\r\n        @click=\"onSubmit\"\r\n        :loading=\"loading\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 8,
    "source": "<template>\r\n  <BaseDialog\r\n    v-model=\"dialogVisible\"\r\n    :title=\"$t('inventory.startCountingSession')\"\r\n    icon=\"checklist\"\r\n    size=\"sm\"\r\n    @hide=\"onHide\"\r\n  >\r\n    <q-form @submit=\"onSubmit\" class=\"counting-session-form\">\r\n      <!-- Session Name -->\r\n      <q-input\r\n        v-model=\"form.name\"\r\n        :label=\"$t('inventory.sessionName')\"\r\n        :placeholder=\"$t('inventory.sessionNamePlaceholder')\"\r\n        outlined\r\n        required\r\n        :rules=\"[val => !!val || $t('validation.required')]\"\r\n        class=\"form-field\"\r\n      >\r\n        <template v-slot:prepend>\r\n          <q-icon name=\"edit\" />\r\n        </template>\r\n      </q-input>\r\n\r\n      <!-- Session Type -->\r\n      <q-select\r\n        v-model=\"form.sessionType\"\r\n        :options=\"sessionTypeOptions\"\r\n        :label=\"$t('inventory.sessionType')\"\r\n        emit-value\r\n        map-options\r\n        outlined\r\n        required\r\n        class=\"form-field\"\r\n      >\r\n        <template v-slot:prepend>\r\n          <q-icon name=\"category\" />\r\n        </template>\r\n      </q-select>\r\n\r\n      <!-- Locations -->\r\n      <q-select\r\n        v-model=\"form.locationIds\"\r\n        :options=\"locationOptions\"\r\n        :label=\"$t('inventory.selectLocations')\"\r\n        emit-value\r\n        map-options\r\n        multiple\r\n        outlined\r\n        required\r\n        :rules=\"[val => (val && val.length > 0) || $t('validation.required')]\"\r\n        class=\"form-field\"\r\n      >\r\n        <template v-slot:prepend>\r\n          <q-icon name=\"place\" />\r\n        </template>\r\n        <template v-slot:option=\"scope\">\r\n          <q-item v-bind=\"scope.itemProps\">\r\n            <q-item-section avatar>\r\n              <q-icon :name=\"scope.opt.icon || 'place'\" />\r\n            </q-item-section>\r\n            <q-item-section>\r\n              <q-item-label>{{ scope.opt.label }}</q-item-label>\r\n              <q-item-label caption>{{ scope.opt.description }}</q-item-label>\r\n            </q-item-section>\r\n          </q-item>\r\n        </template>\r\n      </q-select>\r\n\r\n      <!-- Options -->\r\n      <div class=\"options-section\">\r\n        <q-checkbox\r\n          v-model=\"form.allowNegativeCounts\"\r\n          :label=\"$t('inventory.allowNegativeCounts')\"\r\n          class=\"option-checkbox\"\r\n        />\r\n        <q-checkbox\r\n          v-model=\"form.requireApproval\"\r\n          :label=\"$t('inventory.requireApproval')\"\r\n          class=\"option-checkbox\"\r\n        />\r\n        <q-checkbox\r\n          v-model=\"form.autoAdjustStock\"\r\n          :label=\"$t('inventory.autoAdjustStock')\"\r\n          class=\"option-checkbox\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Notes -->\r\n      <q-input\r\n        v-model=\"form.notes\"\r\n        :label=\"$t('common.notes')\"\r\n        :placeholder=\"$t('inventory.sessionNotesPlaceholder')\"\r\n        type=\"textarea\"\r\n        rows=\"3\"\r\n        outlined\r\n        class=\"form-field\"\r\n      >\r\n        <template v-slot:prepend>\r\n          <q-icon name=\"notes\" />\r\n        </template>\r\n      </q-input>\r\n    </q-form>\r\n\r\n    <template #actions>\r\n      <q-btn flat :label=\"$t('common.cancel')\" @click=\"onCancel\" />\r\n      <q-btn\r\n        color=\"primary\"\r\n        :label=\"$t('inventory.startCounting')\"\r\n        @click=\"onSubmit\"\r\n        :loading=\"loading\"\r\n        unelevated\r\n      />\r\n    </template>\r\n  </BaseDialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useCountingStore } from 'src/stores/counting';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import type {\r\n    PracticeLocation,\r\n    StartCountingSessionRequest,\r\n  } from 'src/types/inventory';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n\r\n  interface Props {\r\n    modelValue: boolean;\r\n    locations: PracticeLocation[];\r\n  }\r\n\r\n  interface Emits {\r\n    (e: 'update:modelValue', value: boolean): void;\r\n    (e: 'session-created', sessionId: string): void;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n  const emit = defineEmits<Emits>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const countingStore = useCountingStore();\r\n  const authStore = useAuthStore();\r\n\r\n  // State\r\n  const loading = ref(false);\r\n  const form = ref({\r\n    name: '',\r\n    sessionType: 'partial' as const,\r\n    locationIds: [] as string[],\r\n    allowNegativeCounts: false,\r\n    requireApproval: true,\r\n    autoAdjustStock: false,\r\n    notes: '',\r\n  });\r\n\r\n  // Computed\r\n  const dialogVisible = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const practiceId = computed(() => authStore.userProfile?.clinic_id || '');\r\n\r\n  const sessionTypeOptions = computed(() => [\r\n    {\r\n      label: t('inventory.partialCount'),\r\n      value: 'partial',\r\n      description: t('inventory.partialCountDescription'),\r\n    },\r\n    {\r\n      label: t('inventory.fullCount'),\r\n      value: 'full',\r\n      description: t('inventory.fullCountDescription'),\r\n    },\r\n    {\r\n      label: t('inventory.spotCheck'),\r\n      value: 'spot_check',\r\n      description: t('inventory.spotCheckDescription'),\r\n    },\r\n    {\r\n      label: t('inventory.cycleCount'),\r\n      value: 'cycle',\r\n      description: t('inventory.cycleCountDescription'),\r\n    },\r\n  ]);\r\n\r\n  const locationOptions = computed(() =>\r\n    props.locations.map(location => ({\r\n      label: location.name,\r\n      value: location.id,\r\n      description:\r\n        location.description || `${location.location_type} - ${location.code}`,\r\n      icon: getLocationIcon(location.location_type),\r\n    }))\r\n  );\r\n\r\n  // Methods\r\n  const getLocationIcon = (type: string): string => {\r\n    switch (type) {\r\n      case 'storage':\r\n        return 'inventory_2';\r\n      case 'treatment':\r\n        return 'medical_services';\r\n      case 'emergency':\r\n        return 'emergency';\r\n      case 'mobile':\r\n        return 'directions_car';\r\n      default:\r\n        return 'place';\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.value = {\r\n      name: '',\r\n      sessionType: 'partial',\r\n      locationIds: [],\r\n      allowNegativeCounts: false,\r\n      requireApproval: true,\r\n      autoAdjustStock: false,\r\n      notes: '',\r\n    };\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    if (!practiceId.value) return;\r\n\r\n    loading.value = true;\r\n    try {\r\n      const request: StartCountingSessionRequest = {\r\n        practice_id: practiceId.value,\r\n        name: form.value.name,\r\n        session_type: form.value.sessionType,\r\n        location_ids: form.value.locationIds,\r\n        allow_negative_counts: form.value.allowNegativeCounts,\r\n        require_approval: form.value.requireApproval,\r\n        auto_adjust_stock: form.value.autoAdjustStock,\r\n        notes: form.value.notes || '',\r\n      };\r\n      const session = await countingStore.startCountingSession(request);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('inventory.sessionCreated'),\r\n        position: 'top',\r\n      });\r\n\r\n      emit('session-created', session.id);\r\n      dialogVisible.value = false;\r\n    } catch (error) {\r\n      console.error('Error creating counting session:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('inventory.sessionCreationFailed'),\r\n        position: 'top',\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const onCancel = () => {\r\n    dialogVisible.value = false;\r\n  };\r\n\r\n  const onHide = () => {\r\n    resetForm();\r\n  };\r\n\r\n  // Generate default session name\r\n  watch(\r\n    () => props.modelValue,\r\n    isVisible => {\r\n      if (isVisible && !form.value.name) {\r\n        const now = new Date();\r\n        const dateStr = now.toLocaleDateString('nl-NL');\r\n        const timeStr = now.toLocaleTimeString('nl-NL', {\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n        });\r\n        form.value.name = t('inventory.defaultSessionName', {\r\n          date: dateStr,\r\n          time: timeStr,\r\n        });\r\n      }\r\n    }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .counting-session-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n    padding: var(--space-6);\r\n  }\r\n\r\n  .form-field {\r\n    width: 100%;\r\n  }\r\n\r\n  .options-section {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n    padding: var(--space-4);\r\n    background: var(--neutral-50);\r\n    border-radius: var(--radius-lg);\r\n    border: 1px solid var(--neutral-200);\r\n\r\n    .option-checkbox {\r\n      font-size: var(--text-sm);\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  body.body--dark {\r\n    .options-section {\r\n      background: var(--neutral-200);\r\n      border-color: var(--neutral-300);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\MobileCountingInterface.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\ProductCountingCard.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"ref\" should go before \"@blur\".",
        "line": 50,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 50,
        "endColumn": 27,
        "fix": { "range": [1477, 1524], "text": "ref=\"countInput\"\r\n          @blur=\"onInputBlur\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"readonly\" should go before \"@blur\".",
        "line": 51,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 51,
        "endColumn": 19,
        "fix": {
          "range": [1477, 1544],
          "text": "readonly\r\n          @blur=\"onInputBlur\"\r\n          ref=\"countInput\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"inputmode\" should go before \"@blur\".",
        "line": 52,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 52,
        "endColumn": 27,
        "fix": {
          "range": [1477, 1572],
          "text": "inputmode=\"none\"\r\n          @blur=\"onInputBlur\"\r\n          ref=\"countInput\"\r\n          readonly"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 60,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 60,
        "endColumn": 61,
        "fix": { "range": [1757, 1799], "text": "class=\"numpad-btn\" @click=\"appendDigit(1)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 61,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 61,
        "endColumn": 61,
        "fix": { "range": [1830, 1872], "text": "class=\"numpad-btn\" @click=\"appendDigit(2)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 62,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 62,
        "endColumn": 61,
        "fix": { "range": [1903, 1945], "text": "class=\"numpad-btn\" @click=\"appendDigit(3)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 65,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 65,
        "endColumn": 61,
        "fix": { "range": [2026, 2068], "text": "class=\"numpad-btn\" @click=\"appendDigit(4)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 66,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 61,
        "fix": { "range": [2099, 2141], "text": "class=\"numpad-btn\" @click=\"appendDigit(5)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 67,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 67,
        "endColumn": 61,
        "fix": { "range": [2172, 2214], "text": "class=\"numpad-btn\" @click=\"appendDigit(6)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 70,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 70,
        "endColumn": 61,
        "fix": { "range": [2295, 2337], "text": "class=\"numpad-btn\" @click=\"appendDigit(7)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 71,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 71,
        "endColumn": 61,
        "fix": { "range": [2368, 2410], "text": "class=\"numpad-btn\" @click=\"appendDigit(8)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 72,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 72,
        "endColumn": 61,
        "fix": { "range": [2441, 2483], "text": "class=\"numpad-btn\" @click=\"appendDigit(9)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 78,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 78,
        "endColumn": 42,
        "fix": {
          "range": [2624, 2698],
          "text": "class=\"numpad-btn action-btn\"\r\n            @click=\"setCount(currentStock)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":class\" should go before \"@click\".",
        "line": 79,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 79,
        "endColumn": 61,
        "fix": {
          "range": [2624, 2760],
          "text": ":class=\"{ active: countValue === currentStock }\"\r\n            @click=\"setCount(currentStock)\"\r\n            class=\"numpad-btn action-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 86,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 86,
        "endColumn": 61,
        "fix": { "range": [2986, 3028], "text": "class=\"numpad-btn\" @click=\"appendDigit(0)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 87,
        "column": 39,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 87,
        "endColumn": 68,
        "fix": { "range": [3059, 3108], "text": "class=\"numpad-btn action-btn\" @click=\"clearInput\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 126,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 126,
        "endColumn": 16,
        "fix": { "range": [4238, 4279], "text": "outline\r\n        @click=\"$emit('cancel')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 127,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 127,
        "endColumn": 22,
        "fix": {
          "range": [4238, 4302],
          "text": "color=\"white\"\r\n        @click=\"$emit('cancel')\"\r\n        outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 128,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 128,
        "endColumn": 16,
        "fix": {
          "range": [4238, 4319],
          "text": "no-caps\r\n        @click=\"$emit('cancel')\"\r\n        outline\r\n        color=\"white\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 129,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 129,
        "endColumn": 23,
        "fix": {
          "range": [4238, 4343],
          "text": "class=\"flex-1\"\r\n        @click=\"$emit('cancel')\"\r\n        outline\r\n        color=\"white\"\r\n        no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 137,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 137,
        "endColumn": 16,
        "fix": { "range": [4495, 4534], "text": "outline\r\n        @click=\"$emit('skip')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 138,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 138,
        "endColumn": 22,
        "fix": {
          "range": [4495, 4557],
          "text": "color=\"white\"\r\n        @click=\"$emit('skip')\"\r\n        outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 139,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 139,
        "endColumn": 16,
        "fix": {
          "range": [4495, 4574],
          "text": "no-caps\r\n        @click=\"$emit('skip')\"\r\n        outline\r\n        color=\"white\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 140,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 140,
        "endColumn": 23,
        "fix": {
          "range": [4495, 4598],
          "text": "class=\"flex-1\"\r\n        @click=\"$emit('skip')\"\r\n        outline\r\n        color=\"white\"\r\n        no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 148,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 148,
        "endColumn": 24,
        "fix": { "range": [4749, 4795], "text": "color=\"primary\"\r\n        @click=\"confirmCount\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 149,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 149,
        "endColumn": 46,
        "fix": {
          "range": [4749, 4842],
          "text": ":disable=\"!isValidCount || isLoading\"\r\n        @click=\"confirmCount\"\r\n        color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 150,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 150,
        "endColumn": 29,
        "fix": {
          "range": [4749, 4872],
          "text": ":loading=\"isLoading\"\r\n        @click=\"confirmCount\"\r\n        color=\"primary\"\r\n        :disable=\"!isValidCount || isLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 151,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 151,
        "endColumn": 16,
        "fix": {
          "range": [4749, 4889],
          "text": "no-caps\r\n        @click=\"confirmCount\"\r\n        color=\"primary\"\r\n        :disable=\"!isValidCount || isLoading\"\r\n        :loading=\"isLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 152,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 152,
        "endColumn": 23,
        "fix": {
          "range": [4749, 4913],
          "text": "class=\"flex-1\"\r\n        @click=\"confirmCount\"\r\n        color=\"primary\"\r\n        :disable=\"!isValidCount || isLoading\"\r\n        :loading=\"isLoading\"\r\n        no-caps"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 29,
    "fixableErrorCount": 0,
    "fixableWarningCount": 29,
    "source": "<template>\r\n  <div class=\"product-counting-card\">\r\n    <!-- Product Header -->\r\n    <div class=\"product-header\">\r\n      <div class=\"product-image\">\r\n        <img\r\n          v-if=\"product?.image_url\"\r\n          :src=\"product.image_url\"\r\n          :alt=\"product.name\"\r\n          class=\"product-img\"\r\n        />\r\n        <div v-else class=\"product-placeholder\">\r\n          <q-icon name=\"inventory_2\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"product-info\">\r\n        <h2 class=\"product-name\">{{ product?.name || 'Onbekend product' }}</h2>\r\n        <div class=\"product-meta\">\r\n          <span class=\"product-sku\">\r\n            <q-icon name=\"qr_code\" />\r\n            {{ product?.sku || '' }}\r\n          </span>\r\n          <span v-if=\"currentStock !== undefined\" class=\"current-stock\">\r\n            {{\r\n              $t('counting.productFlow.currentStock', { amount: currentStock })\r\n            }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Count Input Section -->\r\n    <div class=\"count-input-section\">\r\n      <div class=\"input-header\">\r\n        <h3>{{ $t('counting.enterAmount') }}</h3>\r\n      </div>\r\n\r\n      <!-- Large Number Display -->\r\n      <div class=\"count-display\">\r\n        <input\r\n          v-model.number=\"countValue\"\r\n          type=\"number\"\r\n          min=\"0\"\r\n          step=\"1\"\r\n          :placeholder=\"$t('counting.productFlow.countPlaceholder')\"\r\n          class=\"count-input\"\r\n          @focus=\"onInputFocus\"\r\n          @blur=\"onInputBlur\"\r\n          ref=\"countInput\"\r\n          readonly\r\n          inputmode=\"none\"\r\n        />\r\n        <div class=\"count-unit\">stuks</div>\r\n      </div>\r\n\r\n      <!-- Mobile Numpad -->\r\n      <div class=\"numpad\">\r\n        <div class=\"numpad-row\">\r\n          <button @click=\"appendDigit(1)\" class=\"numpad-btn\">1</button>\r\n          <button @click=\"appendDigit(2)\" class=\"numpad-btn\">2</button>\r\n          <button @click=\"appendDigit(3)\" class=\"numpad-btn\">3</button>\r\n        </div>\r\n        <div class=\"numpad-row\">\r\n          <button @click=\"appendDigit(4)\" class=\"numpad-btn\">4</button>\r\n          <button @click=\"appendDigit(5)\" class=\"numpad-btn\">5</button>\r\n          <button @click=\"appendDigit(6)\" class=\"numpad-btn\">6</button>\r\n        </div>\r\n        <div class=\"numpad-row\">\r\n          <button @click=\"appendDigit(7)\" class=\"numpad-btn\">7</button>\r\n          <button @click=\"appendDigit(8)\" class=\"numpad-btn\">8</button>\r\n          <button @click=\"appendDigit(9)\" class=\"numpad-btn\">9</button>\r\n        </div>\r\n        <div class=\"numpad-row\">\r\n          <button\r\n            v-if=\"currentStock !== undefined\"\r\n            @click=\"setCount(currentStock)\"\r\n            class=\"numpad-btn action-btn\"\r\n            :class=\"{ active: countValue === currentStock }\"\r\n          >\r\n            <div class=\"btn-content\">\r\n              <span class=\"btn-icon\">📦</span>\r\n              <span class=\"btn-label\">{{ currentStock }}</span>\r\n            </div>\r\n          </button>\r\n          <button @click=\"appendDigit(0)\" class=\"numpad-btn\">0</button>\r\n          <button @click=\"clearInput\" class=\"numpad-btn action-btn\">\r\n            <q-icon name=\"backspace\" class=\"icon-size-lg\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Validation Message -->\r\n      <Transition name=\"fade\">\r\n        <div v-if=\"validationMessage\" class=\"validation-message\">\r\n          <q-icon name=\"warning\" />\r\n          <span>{{ validationMessage }}</span>\r\n        </div>\r\n      </Transition>\r\n\r\n      <!-- Variance Indicator - Fixed Position -->\r\n      <div class=\"variance-container\">\r\n        <Transition name=\"fade\">\r\n          <div\r\n            v-if=\"showVariance\"\r\n            class=\"variance-indicator\"\r\n            :class=\"varianceClass\"\r\n          >\r\n            <div class=\"variance-icon\">\r\n              <q-icon :name=\"varianceIcon\" />\r\n            </div>\r\n            <div class=\"variance-content\">\r\n              <span class=\"variance-label\">Verschil</span>\r\n              <span class=\"variance-value\">{{ varianceText }}</span>\r\n            </div>\r\n          </div>\r\n        </Transition>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div class=\"action-buttons\">\r\n      <q-btn\r\n        v-if=\"method === 'scan'\"\r\n        @click=\"$emit('cancel')\"\r\n        outline\r\n        color=\"white\"\r\n        no-caps\r\n        class=\"flex-1\"\r\n      >\r\n        <q-icon name=\"arrow_back\" class=\"q-mr-sm\" />\r\n        {{ $t('common.back') }}\r\n      </q-btn>\r\n      <q-btn\r\n        v-else\r\n        @click=\"$emit('skip')\"\r\n        outline\r\n        color=\"white\"\r\n        no-caps\r\n        class=\"flex-1\"\r\n      >\r\n        <q-icon name=\"skip_next\" class=\"q-mr-sm\" />\r\n        {{ $t('counting.productFlow.skip') }}\r\n      </q-btn>\r\n\r\n      <q-btn\r\n        @click=\"confirmCount\"\r\n        color=\"primary\"\r\n        :disable=\"!isValidCount || isLoading\"\r\n        :loading=\"isLoading\"\r\n        no-caps\r\n        class=\"flex-1\"\r\n      >\r\n        <q-icon name=\"check\" class=\"q-mr-sm\" />\r\n        {{ $t('counting.productFlow.confirm') }}\r\n      </q-btn>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch, nextTick, onMounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n\r\n  // Types\r\n  interface Product {\r\n    id: string;\r\n    name: string;\r\n    sku: string;\r\n    current_stock?: number;\r\n    minimum_stock?: number;\r\n    maximum_stock?: number;\r\n    image_url?: string;\r\n  }\r\n\r\n  type CountingMethod = 'scan' | 'manual';\r\n\r\n  // Props\r\n  const props = defineProps<{\r\n    product: Product | null;\r\n    method: CountingMethod;\r\n    currentStock?: number;\r\n    isLoading?: boolean;\r\n  }>();\r\n\r\n  // Emits\r\n  const emit = defineEmits<{\r\n    confirm: [count: number];\r\n    skip: [];\r\n    cancel: [];\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n\r\n  // State\r\n  const countValue = ref(0);\r\n  const countInput = ref<HTMLInputElement | null>(null);\r\n  const validationMessage = ref('');\r\n\r\n  // Computed\r\n\r\n  const showVariance = computed(() => {\r\n    return (\r\n      props.currentStock !== undefined &&\r\n      countValue.value !== props.currentStock\r\n    );\r\n  });\r\n\r\n  const variance = computed(() => {\r\n    if (props.currentStock === undefined) return 0;\r\n    return countValue.value - props.currentStock;\r\n  });\r\n\r\n  const varianceClass = computed(() => {\r\n    const v = variance.value;\r\n    if (v > 0) return 'positive';\r\n    if (v < 0) return 'negative';\r\n    return 'neutral';\r\n  });\r\n\r\n  const varianceIcon = computed(() => {\r\n    const v = variance.value;\r\n    if (v > 0) return 'trending_up';\r\n    if (v < 0) return 'trending_down';\r\n    return 'remove';\r\n  });\r\n\r\n  const varianceText = computed(() => {\r\n    const v = variance.value;\r\n    if (v === 0) return 'Geen verschil';\r\n    return v > 0 ? `+${v}` : `${v}`;\r\n  });\r\n\r\n  const isValidCount = computed(() => {\r\n    return countValue.value >= 0 && !validationMessage.value;\r\n  });\r\n\r\n  // Methods\r\n  const appendDigit = (digit: number) => {\r\n    const currentStr = countValue.value.toString();\r\n    const newStr =\r\n      currentStr === '0' ? digit.toString() : currentStr + digit.toString();\r\n    const newValue = parseInt(newStr);\r\n\r\n    // Prevent extremely large numbers\r\n    if (newValue <= 99999) {\r\n      countValue.value = newValue;\r\n      validateCount();\r\n    }\r\n  };\r\n\r\n  const clearInput = () => {\r\n    const currentStr = countValue.value.toString();\r\n    if (currentStr.length > 1) {\r\n      const newStr = currentStr.slice(0, -1);\r\n      countValue.value = parseInt(newStr) || 0;\r\n    } else {\r\n      countValue.value = 0;\r\n    }\r\n    validateCount();\r\n  };\r\n\r\n  const setCount = (count: number) => {\r\n    countValue.value = count;\r\n    validateCount();\r\n  };\r\n\r\n  const validateCount = () => {\r\n    validationMessage.value = '';\r\n\r\n    if (countValue.value < 0) {\r\n      validationMessage.value = t('counting.productFlow.mustBePositive');\r\n    } else if (isNaN(countValue.value)) {\r\n      validationMessage.value = t('counting.productFlow.invalidAmount');\r\n    }\r\n  };\r\n\r\n  const confirmCount = () => {\r\n    if (!isValidCount.value) return;\r\n\r\n    if (countValue.value === undefined || countValue.value === null) {\r\n      validationMessage.value = t('counting.productFlow.amountRequired');\r\n      return;\r\n    }\r\n\r\n    emit('confirm', countValue.value);\r\n  };\r\n\r\n  const onInputFocus = () => {\r\n    // Select all text when focused for easy editing\r\n    if (countInput.value) {\r\n      countInput.value.select();\r\n    }\r\n  };\r\n\r\n  const onInputBlur = () => {\r\n    validateCount();\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    // Set initial value to current stock for easier counting\r\n    if (props.currentStock !== undefined) {\r\n      countValue.value = props.currentStock;\r\n    }\r\n  });\r\n\r\n  // Watch for product changes\r\n  watch(\r\n    () => props.product,\r\n    newProduct => {\r\n      if (newProduct && props.currentStock !== undefined) {\r\n        countValue.value = props.currentStock;\r\n      }\r\n      validationMessage.value = '';\r\n    },\r\n    { immediate: true }\r\n  );\r\n\r\n  // Watch count value for validation\r\n  watch(countValue, validateCount);\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .product-counting-card {\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-lg);\r\n    padding: 0.75rem;\r\n    box-shadow: var(--shadow-lg);\r\n    border: 1px solid var(--border-primary);\r\n    max-width: 500px;\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: calc(100vh - 10rem);\r\n    overflow: hidden;\r\n    will-change: transform;\r\n  }\r\n\r\n  // Product Header\r\n  .product-header {\r\n    display: flex;\r\n    gap: 0.75rem;\r\n    margin-bottom: 1rem;\r\n    padding-bottom: 0.75rem;\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n    flex-shrink: 0;\r\n\r\n    .product-image {\r\n      width: 60px;\r\n      height: 60px;\r\n      flex-shrink: 0;\r\n\r\n      .product-img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n        border-radius: 12px;\r\n      }\r\n\r\n      .product-placeholder {\r\n        width: 100%;\r\n        height: 100%;\r\n        background: linear-gradient(135deg, #f1f5f9, #e2e8f0);\r\n        border-radius: 12px;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        color: #64748b;\r\n        font-size: 32px;\r\n      }\r\n    }\r\n\r\n    .product-info {\r\n      flex: 1;\r\n      min-width: 0; // Allow text truncation\r\n\r\n      .product-name {\r\n        margin: 0 0 0.25rem 0;\r\n        font-size: 1.1rem;\r\n        font-weight: 700;\r\n        color: rgba(255, 255, 255, 0.95);\r\n        line-height: 1.2;\r\n        word-wrap: break-word;\r\n      }\r\n\r\n      .product-meta {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 0.25rem;\r\n\r\n        .product-sku,\r\n        .current-stock {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 0.5rem;\r\n          font-size: 0.85rem;\r\n          color: rgba(255, 255, 255, 0.8);\r\n        }\r\n\r\n        .current-stock {\r\n          font-weight: 600;\r\n          color: rgba(255, 255, 255, 0.9);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Count Input Section\r\n  .count-input-section {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n\r\n    .input-header {\r\n      text-align: center;\r\n      margin-bottom: 0.75rem;\r\n      flex-shrink: 0;\r\n\r\n      h3 {\r\n        margin: 0;\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        color: rgba(255, 255, 255, 0.95);\r\n      }\r\n    }\r\n\r\n    .count-display {\r\n      text-align: center;\r\n      margin-bottom: 1rem;\r\n      position: relative;\r\n      flex-shrink: 0;\r\n\r\n      input.count-input {\r\n        width: 100%;\r\n        max-width: 180px;\r\n        font-size: 2.2rem;\r\n        font-weight: var(--font-weight-bold);\r\n        color: var(--text-primary);\r\n        text-align: center;\r\n        border: 2px solid var(--border-primary);\r\n        border-radius: var(--radius-base);\r\n        padding: 0.5rem 0.75rem;\r\n        background: var(--bg-primary);\r\n        transition:\r\n          border-color 0.2s ease,\r\n          box-shadow 0.2s ease;\r\n        cursor: default;\r\n        font-family: var(--font-family-mono);\r\n\r\n        &:focus {\r\n          outline: none;\r\n          border-color: var(--brand-primary);\r\n          box-shadow: 0 0 0 3px var(--brand-primary-alpha-20);\r\n        }\r\n\r\n        &::placeholder {\r\n          color: #cbd5e0;\r\n          font-weight: 400;\r\n        }\r\n\r\n        &[readonly] {\r\n          background: #ffffff;\r\n          cursor: default;\r\n          user-select: none;\r\n        }\r\n\r\n        // Remove number input arrows\r\n        &::-webkit-outer-spin-button,\r\n        &::-webkit-inner-spin-button {\r\n          -webkit-appearance: none;\r\n          margin: 0;\r\n        }\r\n\r\n        &[type='number'] {\r\n          appearance: textfield;\r\n          -moz-appearance: textfield;\r\n        }\r\n      }\r\n\r\n      .count-unit {\r\n        font-size: 0.9rem;\r\n        color: rgba(255, 255, 255, 0.8);\r\n        font-weight: 500;\r\n        margin-top: 0.25rem;\r\n      }\r\n    }\r\n\r\n    .numpad {\r\n      flex: 1;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      margin-bottom: 1rem;\r\n\r\n      .numpad-row {\r\n        display: flex;\r\n        gap: 0.5rem;\r\n        margin-bottom: 0.5rem;\r\n        justify-content: center;\r\n\r\n        &:last-child {\r\n          margin-bottom: 0;\r\n        }\r\n      }\r\n\r\n      .numpad-btn {\r\n        width: 70px;\r\n        height: 70px;\r\n        border: 2px solid rgba(255, 255, 255, 0.3);\r\n        border-radius: 12px;\r\n        background: rgba(255, 255, 255, 0.95);\r\n        color: #1c1917;\r\n        cursor: pointer;\r\n        font-size: 1.3rem;\r\n        font-weight: 700;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        transition: all 0.2s ease;\r\n        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\r\n\r\n        &:hover {\r\n          background: rgba(255, 255, 255, 1);\r\n          border-color: rgba(255, 255, 255, 0.5);\r\n          transform: translateY(-2px);\r\n          box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        &:active {\r\n          transform: translateY(0) scale(0.98);\r\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n        }\r\n\r\n        &.action-btn {\r\n          background: linear-gradient(\r\n            135deg,\r\n            rgba(255, 255, 255, 0.8),\r\n            rgba(255, 255, 255, 0.9)\r\n          );\r\n          color: #1c1917;\r\n          font-size: 1.1rem;\r\n\r\n          &:hover {\r\n            background: linear-gradient(\r\n              135deg,\r\n              rgba(255, 255, 255, 0.9),\r\n              rgba(255, 255, 255, 1)\r\n            );\r\n            color: #1e40af;\r\n          }\r\n\r\n          &.active {\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            color: white;\r\n            border-color: transparent;\r\n            box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);\r\n          }\r\n\r\n          .btn-content {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            gap: 0.25rem;\r\n\r\n            .btn-icon {\r\n              font-size: 1.2rem;\r\n            }\r\n\r\n            .btn-label {\r\n              font-size: 0.8rem;\r\n              font-weight: 600;\r\n              line-height: 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Enhanced touch feedback for mobile\r\n        @media (hover: none) and (pointer: coarse) {\r\n          &:active {\r\n            background: #e2e8f0;\r\n            transform: scale(0.95);\r\n          }\r\n\r\n          &.action-btn:active {\r\n            background: linear-gradient(135deg, #cbd5e0, #94a3b8);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .validation-message {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 0.5rem;\r\n      padding: 0.75rem;\r\n      background: #fef2f2;\r\n      border: 1px solid #fecaca;\r\n      border-radius: 8px;\r\n      color: #dc2626;\r\n      font-size: 0.9rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .variance-container {\r\n      height: 60px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin-bottom: 1rem;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .variance-indicator {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      padding: 0.75rem 1rem;\r\n      border-radius: 12px;\r\n      width: 100%;\r\n      max-width: 280px;\r\n\r\n      &.positive {\r\n        background: linear-gradient(135deg, #dcfce7, #bbf7d0);\r\n        color: #166534;\r\n      }\r\n\r\n      &.negative {\r\n        background: linear-gradient(135deg, #fee2e2, #fecaca);\r\n        color: #991b1b;\r\n      }\r\n\r\n      &.neutral {\r\n        background: linear-gradient(135deg, #e0f2fe, #bae6fd);\r\n        color: #0c4a6e;\r\n      }\r\n\r\n      .variance-icon {\r\n        font-size: 24px;\r\n      }\r\n\r\n      .variance-content {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        .variance-label {\r\n          font-size: 0.8rem;\r\n          opacity: 0.8;\r\n          font-weight: 500;\r\n        }\r\n\r\n        .variance-value {\r\n          font-size: 1.1rem;\r\n          font-weight: 700;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Action Buttons\r\n  .action-buttons {\r\n    display: flex;\r\n    gap: 0.75rem;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  // Animations\r\n  .fade-enter-active,\r\n  .fade-leave-active {\r\n    transition: opacity 0.3s ease;\r\n  }\r\n\r\n  .fade-enter-from,\r\n  .fade-leave-to {\r\n    opacity: 0;\r\n  }\r\n\r\n  // Responsive Design\r\n  @media (max-width: 768px) {\r\n    .product-counting-card {\r\n      padding: 0.5rem;\r\n      margin: 0.25rem;\r\n      height: calc(100vh - 8rem);\r\n    }\r\n\r\n    .product-header {\r\n      margin-bottom: 0.75rem;\r\n      padding-bottom: 0.5rem;\r\n\r\n      .product-image {\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n\r\n      .product-info .product-name {\r\n        font-size: 1rem;\r\n        line-height: 1.2;\r\n      }\r\n    }\r\n\r\n    .count-input-section {\r\n      margin-bottom: 0.5rem;\r\n\r\n      .input-header {\r\n        margin-bottom: 0.5rem;\r\n      }\r\n\r\n      .count-display {\r\n        margin-bottom: 0.75rem;\r\n\r\n        .count-input {\r\n          font-size: 1.8rem;\r\n          max-width: 160px;\r\n          padding: 0.4rem 0.6rem;\r\n        }\r\n      }\r\n\r\n      .numpad {\r\n        margin-bottom: 0.5rem;\r\n\r\n        .numpad-row {\r\n          gap: 0.4rem;\r\n          margin-bottom: 0.4rem;\r\n        }\r\n\r\n        .numpad-btn {\r\n          width: 60px;\r\n          height: 60px;\r\n          font-size: 1.2rem;\r\n\r\n          &.action-btn {\r\n            font-size: 0.9rem;\r\n\r\n            .btn-content {\r\n              .btn-icon {\r\n                font-size: 0.9rem;\r\n              }\r\n\r\n              .btn-label {\r\n                font-size: 0.65rem;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .action-buttons {\r\n      .action-btn {\r\n        min-height: 44px;\r\n        padding: 0.6rem;\r\n        font-size: 0.9rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Extra small screens\r\n  @media (max-width: 480px) and (max-height: 800px) {\r\n    .product-counting-card {\r\n      padding: 0.4rem;\r\n      height: calc(100vh - 6rem);\r\n    }\r\n\r\n    .product-header {\r\n      margin-bottom: 0.75rem;\r\n      padding-bottom: 0.5rem;\r\n\r\n      .product-image {\r\n        width: 50px;\r\n        height: 50px;\r\n      }\r\n\r\n      .product-info .product-name {\r\n        font-size: 1rem;\r\n      }\r\n    }\r\n\r\n    .count-input-section {\r\n      .count-display {\r\n        margin-bottom: 0.75rem;\r\n\r\n        .count-input {\r\n          font-size: 1.8rem;\r\n          max-width: 160px;\r\n        }\r\n      }\r\n\r\n      .numpad {\r\n        .numpad-row {\r\n          gap: 0.4rem;\r\n          margin-bottom: 0.4rem;\r\n        }\r\n\r\n        .numpad-btn {\r\n          width: 60px;\r\n          height: 60px;\r\n          font-size: 1.2rem;\r\n\r\n          &.action-btn {\r\n            font-size: 0.9rem;\r\n\r\n            .btn-content {\r\n              .btn-icon {\r\n                font-size: 0.9rem;\r\n              }\r\n\r\n              .btn-label {\r\n                font-size: 0.6rem;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .action-buttons {\r\n      .action-btn {\r\n        min-height: 48px;\r\n        font-size: 0.9rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode support\r\n  @media (prefers-color-scheme: dark) {\r\n    .product-counting-card {\r\n      background: rgba(45, 55, 72, 0.95);\r\n\r\n      .product-header {\r\n        border-color: rgba(255, 255, 255, 0.1);\r\n      }\r\n\r\n      .count-display .count-input {\r\n        background: rgba(45, 55, 72, 0.8);\r\n        border-color: rgba(255, 255, 255, 0.2);\r\n        color: #f7fafc;\r\n      }\r\n\r\n      .count-btn,\r\n      .preset-btn {\r\n        background: rgba(45, 55, 72, 0.8);\r\n        border-color: rgba(255, 255, 255, 0.2);\r\n        color: #f7fafc;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\QuickAdjustmentDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 45,
        "fix": {
          "range": [62, 164],
          "text": ":title=\"$t('inventory.quickAdjustment')\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":subtitle\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 50,
        "fix": {
          "range": [62, 215],
          "text": ":subtitle=\"$t('inventory.adjustStockLevels')\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    :title=\"$t('inventory.quickAdjustment')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 16,
        "fix": {
          "range": [62, 232],
          "text": "icon=\"tune\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    :title=\"$t('inventory.quickAdjustment')\"\r\n    :subtitle=\"$t('inventory.adjustStockLevels')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@update:model-value\".",
        "line": 8,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 8,
        "endColumn": 14,
        "fix": {
          "range": [62, 247],
          "text": "size=\"lg\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    :title=\"$t('inventory.quickAdjustment')\"\r\n    :subtitle=\"$t('inventory.adjustStockLevels')\"\r\n    icon=\"tune\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":persistent\" should go before \"@update:model-value\".",
        "line": 9,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 9,
        "endColumn": 23,
        "fix": {
          "range": [62, 271],
          "text": ":persistent=\"true\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    :title=\"$t('inventory.quickAdjustment')\"\r\n    :subtitle=\"$t('inventory.adjustStockLevels')\"\r\n    icon=\"tune\"\r\n    size=\"lg\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@update:model-value\".",
        "line": 56,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 38,
        "fix": {
          "range": [1786, 1864],
          "text": "class=\"modern-select\"\r\n                @update:model-value=\"onProductSelected\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@update:model-value\".",
        "line": 57,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 57,
        "endColumn": 48,
        "fix": {
          "range": [1786, 1913],
          "text": ":loading=\"productSearchLoading\"\r\n                @update:model-value=\"onProductSelected\"\r\n                class=\"modern-select\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 59,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 59,
        "endColumn": 41,
        "fix": { "range": [1958, 1972], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#option' instead of 'v-slot:option'.",
        "line": 62,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 62,
        "endColumn": 48,
        "fix": { "range": [2079, 2092], "text": "#option" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#no-option' instead of 'v-slot:no-option'.",
        "line": 92,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 92,
        "endColumn": 43,
        "fix": { "range": [3483, 3499], "text": "#no-option" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 121,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 121,
        "endColumn": 36,
        "fix": {
          "range": [4639, 4710],
          "text": "class=\"scan-button\"\r\n                @click=\"showBarcodeScanner = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 122,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 122,
        "endColumn": 53,
        "fix": {
          "range": [4639, 4764],
          "text": ":title=\"$t('inventory.scanBarcode')\"\r\n                @click=\"showBarcodeScanner = true\"\r\n                class=\"scan-button\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-label\" should go before \"@click\".",
        "line": 123,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 123,
        "endColumn": 42,
        "fix": {
          "range": [4639, 4807],
          "text": "aria-label=\"Scan barcode\"\r\n                @click=\"showBarcodeScanner = true\"\r\n                class=\"scan-button\"\r\n                :title=\"$t('inventory.scanBarcode')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 168,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 168,
        "endColumn": 53,
        "fix": {
          "range": [6405, 6497],
          "text": "v-if=\"selectedProduct.description\"\r\n                  class=\"text-body2 text-grey-7 q-mb-md\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 186,
        "column": 57,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 186,
        "endColumn": 80,
        "fix": { "range": [7161, 7217], "text": "v-if=\"selectedLocation\" class=\"text-caption text-grey-6\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 215,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 215,
        "endColumn": 38,
        "fix": {
          "range": [8097, 8175],
          "text": "class=\"text-grey-6\"\r\n                  @click=\"internalSelectedProduct = null\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 216,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 216,
        "endColumn": 57,
        "fix": {
          "range": [8097, 8233],
          "text": ":title=\"$t('inventory.changeProduct')\"\r\n                  @click=\"internalSelectedProduct = null\"\r\n                  class=\"text-grey-6\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 217,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 217,
        "endColumn": 28,
        "fix": {
          "range": [8097, 8262],
          "text": "size=\"lg\"\r\n                  @click=\"internalSelectedProduct = null\"\r\n                  class=\"text-grey-6\"\r\n                  :title=\"$t('inventory.changeProduct')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-label\" should go before \"@click\".",
        "line": 218,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 218,
        "endColumn": 46,
        "fix": {
          "range": [8097, 8309],
          "text": "aria-label=\"Change product\"\r\n                  @click=\"internalSelectedProduct = null\"\r\n                  class=\"text-grey-6\"\r\n                  :title=\"$t('inventory.changeProduct')\"\r\n                  size=\"lg\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 273,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 273,
        "endColumn": 37,
        "fix": { "range": [10301, 10315], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 321,
        "column": 31,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 321,
        "endColumn": 45,
        "fix": { "range": [12078, 12092], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#append' instead of 'v-slot:append'.",
        "line": 324,
        "column": 31,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 324,
        "endColumn": 44,
        "fix": { "range": [12218, 12231], "text": "#append" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 347,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 347,
        "endColumn": 45,
        "fix": {
          "range": [13077, 13154],
          "text": "class=\"quick-amount-btn\"\r\n                    @click=\"setQuickAmount(amount)\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 378,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 378,
        "endColumn": 39,
        "fix": { "range": [14188, 14202], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 408,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 408,
        "endColumn": 39,
        "fix": { "range": [15194, 15208], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-label\" should go before \"@click\".",
        "line": 493,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 493,
        "endColumn": 30,
        "fix": {
          "range": [18448, 18521],
          "text": "aria-label=\"Cancel\"\r\n          @click=\"$emit('update:modelValue', false)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 503,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 503,
        "endColumn": 30,
        "fix": { "range": [18768, 18825], "text": "class=\"save-button\"\r\n          @click=\"performAdjustment\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"aria-label\" should go before \"@click\".",
        "line": 504,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 504,
        "endColumn": 36,
        "fix": {
          "range": [18768, 18862],
          "text": "aria-label=\"Adjust stock\"\r\n          @click=\"performAdjustment\"\r\n          class=\"save-button\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#loading' instead of 'v-slot:loading'.",
        "line": 506,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 506,
        "endColumn": 35,
        "fix": { "range": [18895, 18909], "text": "#loading" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 520,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 520,
        "endColumn": 32,
        "fix": { "range": [19331, 19344], "text": "#avatar" }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'selectedProduct' requires default value to be set.",
        "line": 563,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 563,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 563,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 563,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20890, 20893], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20890, 20893], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'selectedLocation' requires default value to be set.",
        "line": 564,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 564,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 573,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 573,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21137, 21140], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21137, 21140], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 574,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 574,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21178, 21181], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21178, 21181], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 593,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 593,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21762, 21765], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21762, 21765], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21807, 21810], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21807, 21810], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 599,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 599,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21978, 21981], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21978, 21981], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 603,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 603,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22086, 22089], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22086, 22089], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 661,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 661,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23964, 23967], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23964, 23967], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 784,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 784,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27010, 27013], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27010, 27013], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 791,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 791,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27267, 27270], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27267, 27270], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 793,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 793,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27315, 27318], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27315, 27318], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 793,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 793,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27353, 27356], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27353, 27356], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 805,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 805,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27656, 27659], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27656, 27659], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 807,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 807,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27704, 27707], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27704, 27707], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 807,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 807,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27742, 27745], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27742, 27745], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 834,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 834,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28418, 28421], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28418, 28421], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 890,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 890,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30195, 30198], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30195, 30198], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1020,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1020,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34246, 34249], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34246, 34249], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1049,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1049,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35520, 35523], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35520, 35523], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1096,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1096,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [36752, 36755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [36752, 36755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 52,
    "fixableErrorCount": 0,
    "fixableWarningCount": 30,
    "source": "<template>\r\n  <BaseDialog\r\n    :model-value=\"modelValue\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    :title=\"$t('inventory.quickAdjustment')\"\r\n    :subtitle=\"$t('inventory.adjustStockLevels')\"\r\n    icon=\"tune\"\r\n    size=\"lg\"\r\n    :persistent=\"true\"\r\n  >\r\n    <template #header>\r\n      <div class=\"row items-center q-pa-md\">\r\n        <q-icon name=\"tune\" size=\"24px\" class=\"q-mr-md\" />\r\n        <div class=\"col\">\r\n          <div class=\"text-h6\">{{ $t('inventory.quickAdjustment') }}</div>\r\n          <div class=\"text-subtitle2\">{{ $t('inventory.adjustStockLevels') }}</div>\r\n        </div>\r\n        <q-space />\r\n        <q-chip\r\n          v-if=\"realtimeConnected\"\r\n          size=\"sm\"\r\n          icon=\"wifi\"\r\n          color=\"positive\"\r\n          text-color=\"white\"\r\n          class=\"q-mr-sm\"\r\n          aria-label=\"Live realtime\"\r\n        >\r\n          {{ $t('common.live') }}\r\n        </q-chip>\r\n      </div>\r\n    </template>\r\n\r\n      <!-- Product Selection Step -->\r\n      <div v-if=\"!selectedProduct\" class=\"q-pa-md\">\r\n        <div class=\"step-container\">\r\n          <div class=\"step-header\">\r\n            <q-icon name=\"search\" size=\"20px\" color=\"primary\" />\r\n            <span class=\"text-h6 q-ml-sm\">{{\r\n              $t('inventory.selectProduct')\r\n            }}</span>\r\n          </div>\r\n\r\n          <div class=\"row q-gutter-md q-mt-md\">\r\n            <div class=\"col\">\r\n              <q-select\r\n                v-model=\"internalSelectedProduct\"\r\n                :options=\"availableProducts\"\r\n                option-label=\"name\"\r\n                option-value=\"id\"\r\n                :label=\"$t('inventory.searchProduct')\"\r\n                outlined\r\n                clearable\r\n                use-input\r\n                @filter=\"filterProducts\"\r\n                @update:model-value=\"onProductSelected\"\r\n                class=\"modern-select\"\r\n                :loading=\"productSearchLoading\"\r\n              >\r\n                <template v-slot:prepend>\r\n                  <q-icon name=\"inventory_2\" />\r\n                </template>\r\n                <template v-slot:option=\"scope\">\r\n                  <q-item v-bind=\"scope.itemProps\">\r\n                    <q-item-section avatar>\r\n                      <q-avatar size=\"40px\" class=\"bg-grey-3\">\r\n                        <q-img\r\n                          v-if=\"scope.opt.image_url\"\r\n                          :src=\"scope.opt.image_url\"\r\n                          spinner-color=\"primary\"\r\n                          style=\"height: 40px; width: 40px\"\r\n                        />\r\n                        <q-icon v-else name=\"inventory_2\" color=\"grey-6\" />\r\n                      </q-avatar>\r\n                    </q-item-section>\r\n                    <q-item-section>\r\n                      <q-item-label>{{ scope.opt.name }}</q-item-label>\r\n                      <q-item-label caption>\r\n                        SKU: {{ scope.opt.sku }} • {{ scope.opt.brand }}\r\n                      </q-item-label>\r\n                    </q-item-section>\r\n                    <q-item-section side>\r\n                      <q-chip\r\n                        size=\"sm\"\r\n                        :color=\"getStockStatusColor(scope.opt)\"\r\n                        text-color=\"white\"\r\n                      >\r\n                        {{ scope.opt.total_stock || 0 }} {{ scope.opt.unit }}\r\n                      </q-chip>\r\n                    </q-item-section>\r\n                  </q-item>\r\n                </template>\r\n                <template v-slot:no-option>\r\n                  <q-item>\r\n                    <q-item-section class=\"text-grey\">\r\n                      <div class=\"text-center q-pa-md\">\r\n                        <q-icon\r\n                          name=\"search_off\"\r\n                          size=\"2rem\"\r\n                          color=\"grey-5\"\r\n                          class=\"q-mb-sm\"\r\n                        />\r\n                        <div class=\"text-subtitle1\">\r\n                          {{ $t('inventory.noProductsFound') }}\r\n                        </div>\r\n                        <div class=\"text-caption text-grey-6\">\r\n                          {{ $t('inventory.tryDifferentSearchTerm') }}\r\n                        </div>\r\n                      </div>\r\n                    </q-item-section>\r\n                  </q-item>\r\n                </template>\r\n              </q-select>\r\n            </div>\r\n            <div class=\"col-auto\">\r\n              <q-btn\r\n                icon=\"qr_code_scanner\"\r\n                color=\"primary\"\r\n                :size=\"$q.screen.xs ? 'md' : 'lg'\"\r\n                :label=\"$q.screen.xs ? '' : $t('inventory.scanBarcode')\"\r\n                @click=\"showBarcodeScanner = true\"\r\n                class=\"scan-button\"\r\n                :title=\"$t('inventory.scanBarcode')\"\r\n                aria-label=\"Scan barcode\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Enhanced Product Info Card -->\r\n      <div v-if=\"selectedProduct\" class=\"q-pa-md\">\r\n        <q-card\r\n          flat\r\n          bordered\r\n          class=\"product-card bg-gradient-to-r from-blue-50 to-indigo-50\"\r\n        >\r\n          <q-card-section class=\"q-pa-lg\">\r\n            <div class=\"row items-center q-gutter-lg\">\r\n              <!-- Product Image/Icon -->\r\n              <q-avatar size=\"80px\" class=\"product-avatar\">\r\n                <q-img\r\n                  v-if=\"selectedProduct.image_url\"\r\n                  :src=\"selectedProduct.image_url\"\r\n                  spinner-color=\"primary\"\r\n                  style=\"height: 80px; width: 80px\"\r\n                  class=\"rounded-borders\"\r\n                />\r\n                <div\r\n                  v-else\r\n                  class=\"bg-primary text-white flex flex-center\"\r\n                  style=\"height: 80px; width: 80px\"\r\n                >\r\n                  <q-icon name=\"inventory_2\" size=\"40px\" />\r\n                </div>\r\n              </q-avatar>\r\n\r\n              <!-- Product Details -->\r\n              <div class=\"col\">\r\n                <div class=\"text-h5 text-weight-bold text-grey-8 q-mb-xs\">\r\n                  {{ selectedProduct.name }}\r\n                </div>\r\n                <div class=\"text-subtitle1 text-grey-6 q-mb-sm\">\r\n                  SKU: {{ selectedProduct.sku }} •\r\n                  {{ selectedProduct.brand || $t('quickAdjustment.noProduct') }}\r\n                </div>\r\n                <div\r\n                  class=\"text-body2 text-grey-7 q-mb-md\"\r\n                  v-if=\"selectedProduct.description\"\r\n                >\r\n                  {{ selectedProduct.description }}\r\n                </div>\r\n\r\n                <!-- Stock Status Row -->\r\n                <div class=\"row items-center q-gutter-md\">\r\n                  <q-chip\r\n                    :color=\"getStockStatusColor(selectedProduct)\"\r\n                    text-color=\"white\"\r\n                    size=\"md\"\r\n                    :icon=\"getStockStatusIcon(selectedProduct)\"\r\n                  >\r\n                    <span class=\"text-weight-bold\"\r\n                      >{{ getCurrentStock() }} {{ selectedProduct.unit }}</span\r\n                    >\r\n                  </q-chip>\r\n\r\n                  <div class=\"text-caption text-grey-6\" v-if=\"selectedLocation\">\r\n                    📍 {{ selectedLocation.name }}\r\n                  </div>\r\n                  <q-chip\r\n                    v-else\r\n                    color=\"orange\"\r\n                    text-color=\"white\"\r\n                    size=\"sm\"\r\n                    icon=\"warning\"\r\n                  >\r\n                    {{ $t('inventory.noLocationSelected') }}\r\n                  </q-chip>\r\n\r\n                  <div\r\n                    v-if=\"selectedProduct.price\"\r\n                    class=\"text-caption text-grey-6\"\r\n                  >\r\n                    💰 €{{ Number(selectedProduct.price).toFixed(2) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Actions -->\r\n              <div class=\"col-auto\">\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  icon=\"edit\"\r\n                  @click=\"internalSelectedProduct = null\"\r\n                  class=\"text-grey-6\"\r\n                  :title=\"$t('inventory.changeProduct')\"\r\n                  size=\"lg\"\r\n                  aria-label=\"Change product\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Additional Product Info -->\r\n            <div\r\n              v-if=\"selectedProduct.barcode || selectedProduct.category\"\r\n              class=\"q-mt-md q-pt-md border-top\"\r\n            >\r\n              <div class=\"row q-gutter-md\">\r\n                <div v-if=\"selectedProduct.category\" class=\"col-auto\">\r\n                  <q-chip size=\"sm\" outline color=\"blue-grey\">\r\n                    <q-icon name=\"category\" size=\"xs\" class=\"q-mr-xs\" />\r\n                    {{ selectedProduct.category }}\r\n                  </q-chip>\r\n                </div>\r\n                <div v-if=\"selectedProduct.barcode\" class=\"col-auto\">\r\n                  <q-chip size=\"sm\" outline color=\"blue-grey\">\r\n                    <q-icon name=\"qr_code\" size=\"xs\" class=\"q-mr-xs\" />\r\n                    {{ selectedProduct.barcode }}\r\n                  </q-chip>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n\r\n      <!-- Location Selection (if no location provided) -->\r\n      <div v-if=\"selectedProduct && !selectedLocation\" class=\"q-pa-md\">\r\n        <div class=\"step-container\">\r\n          <div class=\"step-header\">\r\n            <q-icon name=\"place\" size=\"20px\" color=\"orange\" />\r\n            <span class=\"text-h6 q-ml-sm\">{{\r\n              $t('inventory.selectLocation')\r\n            }}</span>\r\n            <q-chip\r\n              size=\"sm\"\r\n              color=\"orange\"\r\n              text-color=\"white\"\r\n              class=\"q-ml-sm\"\r\n              >{{ $t('common.required') }}</q-chip\r\n            >\r\n          </div>\r\n\r\n          <q-select\r\n            v-model=\"internalSelectedLocation\"\r\n            :options=\"availableLocations\"\r\n            option-label=\"name\"\r\n            option-value=\"id\"\r\n            :label=\"$t('inventory.selectLocation')\"\r\n            outlined\r\n            class=\"modern-select q-mt-md\"\r\n          >\r\n            <template v-slot:prepend>\r\n              <q-icon name=\"place\" />\r\n            </template>\r\n          </q-select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Modern Adjustment Form -->\r\n      <div v-if=\"selectedProduct\" class=\"q-pa-md adjustment-section\">\r\n        <div class=\"adjustment-container\">\r\n          <!-- Step 1: Adjustment Type -->\r\n          <div class=\"adjustment-step\">\r\n            <div class=\"step-header\">\r\n              <q-icon name=\"tune\" size=\"20px\" color=\"primary\" />\r\n              <span class=\"text-h6 q-ml-sm\">{{\r\n                $t('inventory.adjustmentType')\r\n              }}</span>\r\n            </div>\r\n            <q-btn-toggle\r\n              v-model=\"adjustmentType\"\r\n              toggle-color=\"primary\"\r\n              :options=\"adjustmentTypeOptions\"\r\n              class=\"modern-toggle q-mt-md\"\r\n              :size=\"$q.screen.xs ? 'md' : 'lg'\"\r\n              spread\r\n            />\r\n          </div>\r\n\r\n          <!-- Step 2: Quantity Input -->\r\n          <div class=\"adjustment-step\">\r\n            <div class=\"step-header\">\r\n              <q-icon name=\"pin\" size=\"20px\" color=\"primary\" />\r\n              <span class=\"text-h6 q-ml-sm\">{{ getQuantityLabel() }}</span>\r\n            </div>\r\n\r\n            <div class=\"quantity-section q-mt-md\">\r\n              <div class=\"row q-gutter-md items-end\">\r\n                <div class=\"col\">\r\n                  <q-input\r\n                    v-model.number=\"quantityInput\"\r\n                    type=\"number\"\r\n                    :label=\"getQuantityLabel()\"\r\n                    outlined\r\n                    min=\"0\"\r\n                    class=\"quantity-input\"\r\n                    :error=\"quantityError\"\r\n                    :error-message=\"quantityErrorMessage\"\r\n                  >\r\n                    <template v-slot:prepend>\r\n                      <q-icon :name=\"getQuantityIcon()\" />\r\n                    </template>\r\n                    <template v-slot:append>\r\n                      <span class=\"text-caption text-grey-6\">{{\r\n                        selectedProduct.unit\r\n                      }}</span>\r\n                    </template>\r\n                  </q-input>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Quick Amount Buttons -->\r\n              <div class=\"quick-amounts q-mt-md\">\r\n                <div class=\"text-caption text-grey-6 q-mb-sm\">\r\n                  {{ $t('inventory.quickAmounts') }}\r\n                </div>\r\n                <div class=\"row q-gutter-xs\">\r\n                  <q-btn\r\n                    v-for=\"amount in quickAmounts\"\r\n                    :key=\"amount\"\r\n                    :label=\"amount.toString()\"\r\n                    :size=\"$q.screen.xs ? 'xs' : 'sm'\"\r\n                    outline\r\n                    color=\"primary\"\r\n                    @click=\"setQuickAmount(amount)\"\r\n                    class=\"quick-amount-btn\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Step 3: Reason Selection -->\r\n          <div class=\"adjustment-step\">\r\n            <div class=\"step-header\">\r\n              <q-icon name=\"psychology\" size=\"20px\" color=\"primary\" />\r\n              <span class=\"text-h6 q-ml-sm\">{{ $t('inventory.reason') }}</span>\r\n              <q-chip\r\n                size=\"sm\"\r\n                color=\"orange\"\r\n                text-color=\"white\"\r\n                class=\"q-ml-sm\"\r\n                >{{ $t('common.required') }}</q-chip\r\n              >\r\n            </div>\r\n            <q-select\r\n              v-model=\"selectedReason\"\r\n              :options=\"reasonOptions\"\r\n              :label=\"$t('inventory.selectReason')\"\r\n              outlined\r\n              emit-value\r\n              map-options\r\n              class=\"modern-select q-mt-md\"\r\n              :error=\"reasonError\"\r\n              :error-message=\"reasonErrorMessage\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"assignment\" />\r\n              </template>\r\n            </q-select>\r\n          </div>\r\n\r\n          <!-- Step 4: Notes (Optional) -->\r\n          <div class=\"adjustment-step\">\r\n            <div class=\"step-header\">\r\n              <q-icon name=\"note_add\" size=\"20px\" color=\"grey-6\" />\r\n              <span class=\"text-h6 q-ml-sm text-grey-7\">{{\r\n                $t('inventory.notes')\r\n              }}</span>\r\n              <q-chip\r\n                size=\"sm\"\r\n                color=\"grey-5\"\r\n                text-color=\"white\"\r\n                class=\"q-ml-sm\"\r\n                >{{ $t('common.optional') }}</q-chip\r\n              >\r\n            </div>\r\n            <q-input\r\n              v-model=\"notes\"\r\n              :label=\"$t('inventory.notes')\"\r\n              type=\"textarea\"\r\n              rows=\"2\"\r\n              outlined\r\n              :placeholder=\"$t('inventory.notesPlaceholder')\"\r\n              class=\"q-mt-md\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"edit_note\" />\r\n              </template>\r\n            </q-input>\r\n          </div>\r\n\r\n          <!-- Enhanced Preview Card -->\r\n          <q-card\r\n            v-if=\"preview && isFormValid\"\r\n            flat\r\n            bordered\r\n            class=\"preview-card bg-gradient-to-r from-blue-50 to-green-50 q-mt-lg\"\r\n          >\r\n            <q-card-section class=\"q-pa-md\">\r\n              <div class=\"row items-center q-mb-md\">\r\n                <q-icon name=\"preview\" size=\"24px\" color=\"blue-7\" />\r\n                <span class=\"text-h6 q-ml-sm text-blue-8\">{{\r\n                  $t('inventory.preview')\r\n                }}</span>\r\n                <q-space />\r\n                <q-chip size=\"sm\" color=\"blue\" text-color=\"white\">\r\n                  {{\r\n                    adjustmentType === 'increase'\r\n                      ? 'Verhogen'\r\n                      : adjustmentType === 'decrease'\r\n                        ? 'Verlagen'\r\n                        : 'Instellen'\r\n                  }}\r\n                </q-chip>\r\n              </div>\r\n              <div class=\"preview-content\">\r\n                <div class=\"row q-gutter-lg items-center\">\r\n                  <div class=\"col text-center\">\r\n                    <div class=\"text-caption text-grey-6\">\r\n                      {{ $t('inventory.current') }}\r\n                    </div>\r\n                    <div class=\"text-h5 text-weight-bold\">\r\n                      {{ preview.current }}\r\n                    </div>\r\n                    <div class=\"text-caption\">{{ selectedProduct.unit }}</div>\r\n                  </div>\r\n                  <div class=\"col-auto flex items-center\">\r\n                    <q-icon\r\n                      :name=\"\r\n                        preview.change >= 0 ? 'arrow_forward' : 'arrow_back'\r\n                      \"\r\n                      size=\"24px\"\r\n                      :color=\"preview.change >= 0 ? 'positive' : 'negative'\"\r\n                    />\r\n                    <span\r\n                      class=\"q-mx-sm text-h6 text-weight-bold\"\r\n                      :class=\"\r\n                        preview.change >= 0 ? 'text-positive' : 'text-negative'\r\n                      \"\r\n                    >\r\n                      {{ preview.change >= 0 ? '+' : '' }}{{ preview.change }}\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"col text-center\">\r\n                    <div class=\"text-caption text-grey-6\">\r\n                      {{ $t('inventory.newQuantity') }}\r\n                    </div>\r\n                    <div\r\n                      class=\"text-h5 text-weight-bold\"\r\n                      :class=\"getStatusTextClass(preview.newStatus)\"\r\n                    >\r\n                      {{ preview.newQuantity }}\r\n                    </div>\r\n                    <div class=\"text-caption\">{{ selectedProduct.unit }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </q-card-section>\r\n          </q-card>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Actions -->\r\n      <template #actions>\r\n        <q-btn\r\n          :label=\"$t('common.cancel')\"\r\n          flat\r\n          :size=\"$q.screen.xs ? 'md' : 'lg'\"\r\n          class=\"q-mr-md\"\r\n          @click=\"$emit('update:modelValue', false)\"\r\n          aria-label=\"Cancel\"\r\n        />\r\n        <q-btn\r\n          :label=\"$t('inventory.adjustStock')\"\r\n          color=\"primary\"\r\n          :size=\"$q.screen.xs ? 'md' : 'lg'\"\r\n          unelevated\r\n          :loading=\"saving\"\r\n          :disable=\"!isFormValid\"\r\n          @click=\"performAdjustment\"\r\n          class=\"save-button\"\r\n          aria-label=\"Adjust stock\"\r\n        >\r\n          <template v-slot:loading>\r\n            <q-spinner-hourglass class=\"on-left\" />\r\n            {{ $t('inventory.adjusting') }}\r\n          </template>\r\n        </q-btn>\r\n      </template>\r\n\r\n      <!-- Validation Summary -->\r\n      <q-banner\r\n        v-if=\"!isFormValid && (quantityInput !== null || selectedReason)\"\r\n        rounded\r\n        class=\"validation-banner q-ma-md\"\r\n        :class=\"getValidationBannerClass()\"\r\n      >\r\n        <template v-slot:avatar>\r\n          <q-icon name=\"info\" />\r\n        </template>\r\n        <div class=\"text-subtitle2\">\r\n          {{ $t('inventory.completeRequiredFields') }}\r\n        </div>\r\n        <ul class=\"q-mt-sm\">\r\n          <li v-if=\"quantityError\">{{ quantityErrorMessage }}</li>\r\n          <li v-if=\"reasonError\">{{ reasonErrorMessage }}</li>\r\n          <li v-if=\"!selectedProduct\">\r\n            {{ $t('inventory.selectProductFirst') }}\r\n          </li>\r\n          <li v-if=\"!selectedLocation\">\r\n            {{ $t('inventory.selectLocationFirst') }}\r\n          </li>\r\n        </ul>\r\n      </q-banner>\r\n    <!-- Barcode Scanner -->\r\n    <BarcodeScanner v-model=\"showBarcodeScanner\" @scan=\"handleBarcodeScan\" />\r\n  </BaseDialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch, onMounted, onUnmounted } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useInventoryStore } from 'src/stores/inventory';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useProductsStore } from 'src/stores/products';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import { realtimeService } from 'src/services/supabase';\r\n  import BarcodeScanner from 'src/components/BarcodeScanner.vue';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import type {\r\n    StockUpdateRequest,\r\n    MovementType,\r\n    ReasonCode,\r\n    PracticeLocation,\r\n  } from 'src/types/inventory';\r\n\r\n  // Props & Emits\r\n  interface Props {\r\n    modelValue: boolean;\r\n    selectedProduct?: any;\r\n    selectedLocation?: PracticeLocation;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    modelValue: false,\r\n  });\r\n\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    'stock-updated': [product: any];\r\n    'product-selected': [product: any];\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const inventoryStore = useInventoryStore();\r\n  const authStore = useAuthStore();\r\n  const productsStore = useProductsStore();\r\n  const clinicStore = useClinicStore();\r\n\r\n  // State\r\n  const adjustmentType = ref<'increase' | 'decrease' | 'set'>('increase');\r\n  const quantityInput = ref<number | null>(null);\r\n  const selectedReason = ref<ReasonCode | null>(null);\r\n  const notes = ref('');\r\n  const saving = ref(false);\r\n\r\n  // Product selection state\r\n  const internalSelectedProduct = ref<any>(null);\r\n  const availableProducts = ref<any[]>([]);\r\n  const showBarcodeScanner = ref(false);\r\n  const productSearchLoading = ref(false);\r\n\r\n  // Location selection state\r\n  const internalSelectedLocation = ref<any>(null);\r\n\r\n  // Realtime state\r\n  const realtimeConnected = ref(false);\r\n  const inventoryChannel = ref<any>(null);\r\n\r\n  // Quick amount buttons\r\n  const quickAmounts = [1, 5, 10, 25, 50, 100];\r\n\r\n  // Computed\r\n  const adjustmentTypeOptions = computed(() => [\r\n    {\r\n      label: t('inventory.increase'),\r\n      value: 'increase',\r\n      icon: 'add_circle',\r\n      color: 'positive',\r\n    },\r\n    {\r\n      label: t('inventory.decrease'),\r\n      value: 'decrease',\r\n      icon: 'remove_circle',\r\n      color: 'negative',\r\n    },\r\n    {\r\n      label: t('inventory.setTo'),\r\n      value: 'set',\r\n      icon: 'edit',\r\n      color: 'primary',\r\n    },\r\n  ]);\r\n\r\n  const reasonOptions = computed(() => [\r\n    { label: t('inventory.reasons.adjustment'), value: 'adjustment' },\r\n    { label: t('inventory.reasons.damage'), value: 'damage' },\r\n    { label: t('inventory.reasons.expired'), value: 'expired' },\r\n    { label: t('inventory.reasons.lost'), value: 'lost' },\r\n    { label: t('inventory.reasons.found'), value: 'found' },\r\n    { label: t('inventory.reasons.recount'), value: 'recount' },\r\n    { label: t('inventory.reasons.correction'), value: 'correction' },\r\n    { label: t('inventory.reasons.other'), value: 'other' },\r\n  ]);\r\n\r\n  const selectedProduct = computed(\r\n    () => props.selectedProduct || internalSelectedProduct.value\r\n  );\r\n  const selectedLocation = computed(\r\n    () => props.selectedLocation || internalSelectedLocation.value\r\n  );\r\n\r\n  // Available locations from clinic store\r\n  const availableLocations = computed(() => {\r\n    return (\r\n      clinicStore.locations || [\r\n        { id: '880e8400-e29b-41d4-a716-446655440001', name: 'Hoofdvoorraad' },\r\n        { id: '880e8400-e29b-41d4-a716-446655440002', name: 'Spoedkast' },\r\n        { id: '880e8400-e29b-41d4-a716-446655440003', name: 'Behandelkamer 1' },\r\n      ]\r\n    );\r\n  });\r\n\r\n  const getCurrentStock = () => {\r\n    if (!selectedProduct.value) return 0;\r\n    const product = selectedProduct.value as any;\r\n    return (\r\n      product?.current_quantity ||\r\n      product?.total_stock ||\r\n      product?.available_stock ||\r\n      0\r\n    );\r\n  };\r\n\r\n  const preview = computed(() => {\r\n    if (\r\n      !selectedProduct.value ||\r\n      quantityInput.value === null ||\r\n      quantityInput.value === undefined\r\n    ) {\r\n      return null;\r\n    }\r\n\r\n    const current = getCurrentStock();\r\n    let newQuantity: number;\r\n    let change: number;\r\n\r\n    switch (adjustmentType.value) {\r\n      case 'increase':\r\n        newQuantity = current + quantityInput.value;\r\n        change = quantityInput.value;\r\n        break;\r\n      case 'decrease':\r\n        newQuantity = Math.max(0, current - quantityInput.value);\r\n        change = -quantityInput.value;\r\n        break;\r\n      case 'set':\r\n        newQuantity = quantityInput.value;\r\n        change = quantityInput.value - current;\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n\r\n    const newStatus = determineStockStatus(newQuantity);\r\n\r\n    return {\r\n      current,\r\n      newQuantity,\r\n      change,\r\n      newStatus,\r\n    };\r\n  });\r\n\r\n  // Validation\r\n  const quantityError = computed(() => {\r\n    return (\r\n      quantityInput.value !== null &&\r\n      (quantityInput.value === undefined ||\r\n        isNaN(quantityInput.value) ||\r\n        quantityInput.value < 0)\r\n    );\r\n  });\r\n\r\n  const quantityErrorMessage = computed(() => {\r\n    if (quantityError.value) {\r\n      return t('inventory.quantityMustBePositive');\r\n    }\r\n    return '';\r\n  });\r\n\r\n  const reasonError = computed(() => {\r\n    return !selectedReason.value && quantityInput.value !== null;\r\n  });\r\n\r\n  const reasonErrorMessage = computed(() => {\r\n    if (reasonError.value) {\r\n      return t('inventory.reasonRequired');\r\n    }\r\n    return '';\r\n  });\r\n\r\n  const isFormValid = computed(() => {\r\n    return (\r\n      quantityInput.value !== null &&\r\n      quantityInput.value !== undefined &&\r\n      !isNaN(quantityInput.value) &&\r\n      quantityInput.value > 0 &&\r\n      selectedReason.value !== null &&\r\n      selectedReason.value !== undefined &&\r\n      selectedProduct.value &&\r\n      selectedLocation.value\r\n    );\r\n  });\r\n\r\n  // Methods\r\n  const getQuantityLabel = () => {\r\n    switch (adjustmentType.value) {\r\n      case 'increase':\r\n        return t('inventory.quantityToAdd');\r\n      case 'decrease':\r\n        return t('inventory.quantityToRemove');\r\n      case 'set':\r\n        return t('inventory.newQuantity');\r\n      default:\r\n        return t('inventory.quantity');\r\n    }\r\n  };\r\n\r\n  const getQuantityIcon = () => {\r\n    switch (adjustmentType.value) {\r\n      case 'increase':\r\n        return 'add_circle';\r\n      case 'decrease':\r\n        return 'remove_circle';\r\n      case 'set':\r\n        return 'edit';\r\n      default:\r\n        return 'pin';\r\n    }\r\n  };\r\n\r\n  const setQuickAmount = (amount: number) => {\r\n    quantityInput.value = amount;\r\n  };\r\n\r\n  const determineStockStatus = (quantity: number): string => {\r\n    if (!selectedProduct.value) return 'in_stock';\r\n    const product = selectedProduct.value as any;\r\n    const minStock = product?.minimum_quantity || product?.minimum_stock || 10;\r\n    if (quantity <= 0) return 'out_of_stock';\r\n    if (quantity <= minStock) return 'low_stock';\r\n    return 'in_stock';\r\n  };\r\n\r\n  const getStockStatusColor = (product: any) => {\r\n    const stock =\r\n      (product as any)?.current_quantity || (product as any)?.total_stock || 0;\r\n    const status = determineStockStatus(stock);\r\n    switch (status) {\r\n      case 'out_of_stock':\r\n        return 'negative';\r\n      case 'low_stock':\r\n        return 'warning';\r\n      default:\r\n        return 'positive';\r\n    }\r\n  };\r\n\r\n  const getStockStatusIcon = (product: any) => {\r\n    const stock =\r\n      (product as any)?.current_quantity || (product as any)?.total_stock || 0;\r\n    const status = determineStockStatus(stock);\r\n    switch (status) {\r\n      case 'out_of_stock':\r\n        return 'error';\r\n      case 'low_stock':\r\n        return 'warning';\r\n      default:\r\n        return 'check_circle';\r\n    }\r\n  };\r\n\r\n  const getStatusTextClass = (status: string): string => {\r\n    switch (status) {\r\n      case 'out_of_stock':\r\n        return 'text-negative';\r\n      case 'low_stock':\r\n        return 'text-warning';\r\n      default:\r\n        return 'text-positive';\r\n    }\r\n  };\r\n\r\n  const getValidationBannerClass = () => {\r\n    return 'bg-orange-1 text-orange-8';\r\n  };\r\n\r\n  const filterProducts = async (val: string, update: any) => {\r\n    if (val.length < 2) {\r\n      update(() => {\r\n        availableProducts.value = [];\r\n      });\r\n      return;\r\n    }\r\n\r\n    productSearchLoading.value = true;\r\n\r\n    try {\r\n      // Load products from store if not loaded\r\n      if (!productsStore.products.length) {\r\n        const practiceId = authStore.userProfile?.clinic_id;\r\n        if (practiceId) {\r\n          await productsStore.fetchProducts(practiceId);\r\n        }\r\n      }\r\n\r\n      update(() => {\r\n        const needle = val.toLowerCase();\r\n        availableProducts.value = productsStore.products\r\n          .filter(\r\n            product =>\r\n              product.name.toLowerCase().includes(needle) ||\r\n              product.sku.toLowerCase().includes(needle) ||\r\n              (product.barcode &&\r\n                product.barcode.toLowerCase().includes(needle))\r\n          )\r\n          .slice(0, 10) // Limit to 10 results for performance\r\n          .map(product => ({\r\n            id: product.id,\r\n            name: product.name,\r\n            sku: product.sku,\r\n            unit: product.unit || 'stuk',\r\n            brand: product.brand,\r\n            image_url: product.image_url,\r\n            total_stock: product.total_stock,\r\n            current_quantity: product.current_quantity,\r\n            minimum_quantity: product.minimum_quantity,\r\n            price: product.price,\r\n            description: product.description,\r\n            barcode: product.barcode,\r\n            category: product.category,\r\n          }));\r\n      });\r\n    } catch (error) {\r\n      console.error('Error filtering products:', error);\r\n      update(() => {\r\n        availableProducts.value = [];\r\n      });\r\n    } finally {\r\n      productSearchLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const onProductSelected = (product: any) => {\r\n    if (product) {\r\n      emit('product-selected', product);\r\n    }\r\n  };\r\n\r\n  const handleBarcodeScan = async (barcode: string) => {\r\n    try {\r\n      // Search for products matching the barcode\r\n      const practiceId = authStore.userProfile?.clinic_id;\r\n      if (practiceId && !productsStore.products.length) {\r\n        await productsStore.fetchProducts(practiceId);\r\n      }\r\n\r\n      const matchingProduct = productsStore.products.find(\r\n        product =>\r\n          product.barcode === barcode ||\r\n          product.sku === barcode ||\r\n          product.name.toLowerCase().includes(barcode.toLowerCase())\r\n      );\r\n\r\n      if (matchingProduct) {\r\n        // Set the product as selected\r\n        internalSelectedProduct.value = {\r\n          id: matchingProduct.id,\r\n          name: matchingProduct.name,\r\n          sku: matchingProduct.sku,\r\n          unit: matchingProduct.unit || 'stuk',\r\n          brand: matchingProduct.brand,\r\n          image_url: matchingProduct.image_url,\r\n          total_stock: matchingProduct.total_stock,\r\n          current_quantity: matchingProduct.current_quantity,\r\n          minimum_quantity: matchingProduct.minimum_quantity,\r\n          price: matchingProduct.price,\r\n          description: matchingProduct.description,\r\n          barcode: matchingProduct.barcode,\r\n          category: matchingProduct.category,\r\n        };\r\n\r\n        emit('product-selected', internalSelectedProduct.value);\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('inventory.barcodeFound', {\r\n            product: matchingProduct.name,\r\n          }),\r\n          icon: 'qr_code_scanner',\r\n        });\r\n      } else {\r\n        $q.notify({\r\n          type: 'warning',\r\n          message: t('inventory.barcodeNotFound', { barcode }),\r\n          icon: 'search_off',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing barcode:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.processingError'),\r\n        icon: 'error',\r\n      });\r\n    }\r\n  };\r\n\r\n  const performAdjustment = async () => {\r\n    if (!isFormValid.value || !preview.value) return;\r\n\r\n    // 🚀 IMPROVED UX: Close dialog immediately for better user experience\r\n    emit('update:modelValue', false);\r\n\r\n    // Show optimistic loading notification\r\n    const notif = $q.notify({\r\n      type: 'ongoing',\r\n      message: t('inventory.savingChanges'),\r\n      icon: 'hourglass_empty',\r\n      timeout: 0,\r\n    });\r\n\r\n    try {\r\n      const movementType: MovementType = 'adjustment';\r\n\r\n      const reasonCode = selectedReason.value;\r\n      if (!reasonCode) {\r\n        throw new Error($t('quickadjus.noreasonselected'));\r\n      }\r\n\r\n      const practiceId = authStore.userProfile?.clinic_id;\r\n      if (!practiceId) {\r\n        throw new Error($t('quickadjus.usernotauthenticatedor'));\r\n      }\r\n\r\n      const locationId = selectedLocation.value?.id;\r\n      if (!locationId) {\r\n        throw new Error($t('quickadjus.nolocationselected'));\r\n      }\r\n\r\n      const productId =\r\n        selectedProduct.value?.id || selectedProduct.value?.product_id;\r\n      if (!productId) {\r\n        throw new Error($t('quickadjus.noproductselected'));\r\n      }\r\n\r\n      const request: StockUpdateRequest = {\r\n        practice_id: practiceId,\r\n        location_id: locationId,\r\n        product_id: productId,\r\n        quantity_change: preview.value.change,\r\n        movement_type: movementType,\r\n        reason_code: reasonCode as ReasonCode,\r\n        notes: notes.value || '',\r\n      };\r\n\r\n      await inventoryStore.updateStockLevel(request);\r\n\r\n      // Update loading notification to success\r\n      notif({\r\n        type: 'positive',\r\n        message: t('inventory.stockUpdated'),\r\n        icon: 'check_circle',\r\n        timeout: 3000,\r\n      });\r\n\r\n      emit('stock-updated', selectedProduct.value);\r\n\r\n      // Reset form for next use\r\n      quantityInput.value = null;\r\n      selectedReason.value = null;\r\n      notes.value = '';\r\n      adjustmentType.value = 'increase';\r\n    } catch (error: any) {\r\n      console.error('Error updating stock:', error);\r\n\r\n      // Determine user-friendly error message\r\n      let errorMessage = t('inventory.errorUpdatingStock');\r\n      let canRetry = true;\r\n\r\n      if (error.message) {\r\n        if (error.message.includes('Insufficient stock')) {\r\n          errorMessage = error.message;\r\n          canRetry = false; // No point retrying if there's insufficient stock\r\n        } else if (error.message.includes('not found')) {\r\n          errorMessage = t('inventory.errorProductNotFound');\r\n          canRetry = false;\r\n        } else if (error.message.includes('Another update is in progress')) {\r\n          errorMessage = t('inventory.errorUpdateInProgress');\r\n          canRetry = true;\r\n        } else if (error.message.includes('Invalid reference')) {\r\n          errorMessage = t('inventory.errorInvalidData');\r\n          canRetry = false;\r\n        } else if (error.message.includes('negative stock not allowed')) {\r\n          errorMessage = t('inventory.errorNegativeStock');\r\n          canRetry = false;\r\n        } else if (error.message.startsWith('Failed to update stock:')) {\r\n          errorMessage = error.message;\r\n        }\r\n      }\r\n\r\n      // Update loading notification to error\r\n      const notificationOptions: any = {\r\n        type: 'negative',\r\n        message: errorMessage,\r\n        icon: 'error',\r\n        timeout: canRetry ? 5000 : 8000,\r\n      };\r\n\r\n      if (canRetry) {\r\n        notificationOptions.actions = [\r\n          {\r\n            label: t('common.retry'),\r\n            color: 'white',\r\n            handler: () => {\r\n              emit('update:modelValue', true);\r\n            },\r\n          },\r\n        ];\r\n      }\r\n\r\n      notif(notificationOptions);\r\n\r\n      // Only reopen dialog on error if it's worth retrying\r\n      if (canRetry) {\r\n        emit('update:modelValue', true);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize data on mount\r\n  onMounted(async () => {\r\n    try {\r\n      const practiceId = authStore.userProfile?.clinic_id;\r\n      if (!practiceId) return;\r\n\r\n      // Load products and locations if not already loaded\r\n      if (!productsStore.products.length) {\r\n        await productsStore.fetchProducts(practiceId);\r\n      }\r\n\r\n      if (!clinicStore.locations.length) {\r\n        await clinicStore.fetchLocations(practiceId);\r\n      }\r\n\r\n      // Initialize realtime service\r\n      if (practiceId) {\r\n        inventoryChannel.value = realtimeService.subscribeToInventory(\r\n          practiceId,\r\n          (payload: any) => {\r\n            // Realtime inventory update received\r\n\r\n            if (payload.new && payload.eventType === 'UPDATE') {\r\n              // Find the product in availableProducts and update its total_stock\r\n              const productIndex = availableProducts.value.findIndex(\r\n                p => p.id === payload.new.product_id\r\n              );\r\n              if (productIndex !== -1) {\r\n                availableProducts.value[productIndex].total_stock =\r\n                  payload.new.current_quantity;\r\n                availableProducts.value[productIndex].current_quantity =\r\n                  payload.new.current_quantity;\r\n              }\r\n\r\n              // If this is the currently selected product, show a notification\r\n              if (\r\n                selectedProduct.value &&\r\n                selectedProduct.value.id === payload.new.product_id\r\n              ) {\r\n                $q.notify({\r\n                  type: 'info',\r\n                  message: `Stock bijgewerkt: ${selectedProduct.value.name} nu ${payload.new.current_quantity} ${selectedProduct.value.unit}`,\r\n                  icon: 'update',\r\n                  timeout: 3000,\r\n                });\r\n              }\r\n            }\r\n          }\r\n        );\r\n        realtimeConnected.value = true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading initial data:', error);\r\n    }\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    if (inventoryChannel.value) {\r\n      realtimeService.unsubscribeFromChannel(inventoryChannel.value);\r\n      inventoryChannel.value = null;\r\n      realtimeConnected.value = false;\r\n    }\r\n  });\r\n\r\n  // Watch for product changes\r\n  watch(\r\n    () => props.selectedProduct,\r\n    newProduct => {\r\n      if (newProduct) {\r\n        internalSelectedProduct.value = newProduct;\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .modern-dialog {\r\n    .dialog-header {\r\n      border-radius: 8px 8px 0 0;\r\n      background: linear-gradient(135deg, var(--q-primary) 0%, #1976d2 100%);\r\n    }\r\n\r\n    .step-container,\r\n    .adjustment-container {\r\n      max-width: 100%;\r\n    }\r\n\r\n    .step-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 16px;\r\n      padding-bottom: 8px;\r\n      border-bottom: 1px solid var(--q-grey-4);\r\n    }\r\n\r\n    .adjustment-step {\r\n      margin-bottom: 32px;\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n    }\r\n\r\n    .product-card {\r\n      border: 2px solid var(--q-grey-4);\r\n      border-radius: 16px;\r\n      transition: all 0.3s ease;\r\n      overflow: hidden;\r\n\r\n      &:hover {\r\n        border-color: var(--q-primary);\r\n        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\r\n        transform: translateY(-2px);\r\n      }\r\n    }\r\n\r\n    .product-avatar {\r\n      border-radius: 12px;\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    .modern-toggle {\r\n      .q-btn {\r\n        border-radius: 8px;\r\n        min-height: 48px;\r\n        transition: all 0.2s ease;\r\n\r\n        &:hover {\r\n          transform: translateY(-1px);\r\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n          min-height: var(--control-height-sm);\r\n          font-size: var(--control-font-sm);\r\n          padding: var(--control-pad-y) var(--control-pad-x);\r\n        }\r\n      }\r\n    }\r\n\r\n    .modern-select,\r\n    .quantity-input {\r\n      .q-field__control {\r\n        border-radius: 8px;\r\n      }\r\n    }\r\n\r\n    .quick-amounts {\r\n      .quick-amount-btn {\r\n        min-width: 48px;\r\n        border-radius: 6px;\r\n        transition: all 0.2s ease;\r\n\r\n        &:hover {\r\n          transform: scale(1.05);\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n          min-width: 36px;\r\n          font-size: 0.75rem;\r\n          padding: 4px 8px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .preview-card {\r\n      border: 2px solid var(--q-blue-4);\r\n      border-radius: 16px;\r\n      background: linear-gradient(135deg, #f0f8ff 0%, #e8f5e8 100%);\r\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\r\n    }\r\n\r\n    .preview-content {\r\n      font-family: var(--font-mono);\r\n    }\r\n\r\n    .modern-actions {\r\n      border-radius: 0 0 8px 8px;\r\n      border-top: 1px solid var(--q-grey-4);\r\n      background: linear-gradient(180deg, #fafafa 0%, #f5f5f5 100%);\r\n\r\n      .save-button {\r\n        min-width: 140px;\r\n        border-radius: 8px;\r\n        font-weight: 600;\r\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n        transition: all 0.2s ease;\r\n\r\n        &:hover {\r\n          transform: translateY(-1px);\r\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n          min-width: 100px;\r\n          font-size: 0.85rem;\r\n          padding: 8px 16px;\r\n        }\r\n      }\r\n    }\r\n\r\n    .validation-banner {\r\n      border-radius: 12px;\r\n\r\n      ul {\r\n        margin: 0;\r\n        padding-left: 20px;\r\n\r\n        li {\r\n          margin: 4px 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    .scan-button {\r\n      min-height: 56px;\r\n      border-radius: 8px;\r\n      font-weight: 600;\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n      transition: all 0.2s ease;\r\n\r\n      &:hover {\r\n        transform: translateY(-1px);\r\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n      }\r\n\r\n      @media (max-width: 600px) {\r\n        min-height: 48px;\r\n        min-width: 48px;\r\n        padding: 8px;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Gradient utilities for better visual appeal\r\n  .bg-gradient-to-r {\r\n    &.from-blue-50.to-indigo-50 {\r\n      background: linear-gradient(90deg, #eff6ff 0%, #eef2ff 100%);\r\n    }\r\n\r\n    &.from-blue-50.to-green-50 {\r\n      background: linear-gradient(90deg, #eff6ff 0%, #f0fdf4 100%);\r\n    }\r\n  }\r\n\r\n  // Animation for realtime indicator\r\n  @keyframes pulse {\r\n    0%,\r\n    100% {\r\n      opacity: 1;\r\n    }\r\n    50% {\r\n      opacity: 0.5;\r\n    }\r\n  }\r\n\r\n  .q-chip[color='positive'] {\r\n    animation: pulse 2s infinite;\r\n  }\r\n\r\n  // Enhanced mobile responsiveness\r\n  @media (max-width: 600px) {\r\n    .modern-dialog {\r\n      .product-card {\r\n        .q-card-section {\r\n          padding: 1rem;\r\n        }\r\n\r\n        .row {\r\n          .q-gutter-lg > * {\r\n            margin-right: 0.5rem;\r\n            margin-bottom: 0.5rem;\r\n          }\r\n        }\r\n      }\r\n\r\n      .adjustment-step {\r\n        margin-bottom: 24px;\r\n      }\r\n\r\n      .preview-card {\r\n        .row.q-gutter-lg {\r\n          gap: 0.5rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Border utilities\r\n  .border-top {\r\n    border-top: 1px solid var(--q-grey-4);\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\RealTimeIndicator.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 11,
        "column": 30,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 47,
        "fix": { "range": [196, 233], "text": "v-if=\"lastUpdate\" class=\"last-update\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\n  <div class=\"real-time-indicator\">\n    <q-chip\n      :color=\"statusColor\"\n      :icon=\"statusIcon\"\n      size=\"sm\"\n      :label=\"statusText\"\n      class=\"status-chip\"\n    />\n\n    <div class=\"last-update\" v-if=\"lastUpdate\">\n      <q-icon name=\"schedule\" class=\"icon-size-xs\" />\n      <span>{{ formatTime(lastUpdate) }}</span>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n\n  interface Props {\n    connected: boolean;\n    lastUpdate?: Date | null;\n    showLastUpdate?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    lastUpdate: null,\n    showLastUpdate: true,\n  });\n\n  const { t } = useI18n();\n\n  const statusColor = computed(() => {\n    return props.connected ? 'positive' : 'grey-6';\n  });\n\n  const statusIcon = computed(() => {\n    return props.connected ? 'sync' : 'sync_disabled';\n  });\n\n  const statusText = computed(() => {\n    return props.connected\n      ? t('inventory.realTimeConnected')\n      : t('inventory.realTimeDisconnected');\n  });\n\n  const formatTime = (date: Date): string => {\n    return new Intl.DateTimeFormat('nl-NL', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    }).format(date);\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .real-time-indicator {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n\n    .status-chip {\n      font-size: 0.75rem;\n    }\n\n    .last-update {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      font-size: 0.7rem;\n      color: var(--q-grey-6);\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\RealTimeStockNotification.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\inventory\\StockTransferDialog.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 363,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 363,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12570, 12573], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12570, 12573], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 426,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 426,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14709, 14712], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14709, 14712], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDialog\r\n    :model-value=\"modelValue\"\r\n    :title=\"$t('inventory.stockTransfer')\"\r\n    icon=\"swap_horiz\"\r\n    size=\"lg\"\r\n    :persistent=\"true\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n  >\r\n\r\n      <!-- Product Selector (when no product selected) -->\r\n      <div v-if=\"!selectedProduct\" class=\"q-pa-md\">\r\n        <div class=\"text-subtitle2 q-mb-md\">\r\n          {{ $t('inventory.selectProduct') }}\r\n        </div>\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col\">\r\n            <q-select\r\n              v-model=\"internalSelectedProduct\"\r\n              :options=\"availableProducts\"\r\n              option-label=\"name\"\r\n              option-value=\"id\"\r\n              :label=\"$t('inventory.searchProduct')\"\r\n              outlined\r\n              clearable\r\n              use-input\r\n              @filter=\"filterProducts\"\r\n              @update:model-value=\"onProductSelected\"\r\n            >\r\n              <template #prepend>\r\n                <q-icon name=\"search\" />\r\n              </template>\r\n              <template #no-option>\r\n                <q-item>\r\n                  <q-item-section class=\"text-grey\">\r\n                    {{ $t('inventory.noProductsFound') }}\r\n                  </q-item-section>\r\n                </q-item>\r\n              </template>\r\n            </q-select>\r\n          </div>\r\n          <div class=\"col-auto\">\r\n            <q-btn\r\n              icon=\"qr_code_scanner\"\r\n              color=\"primary\"\r\n              outline\r\n              :label=\"$t('inventory.scanBarcode')\"\r\n              @click=\"showBarcodeScanner = true\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Product Preview (when product selected) -->\r\n      <div v-if=\"selectedProduct\" class=\"q-pa-md q-pt-none\">\r\n        <div class=\"product-preview\">\r\n          <div class=\"row items-center q-gutter-md\">\r\n            <q-avatar size=\"48px\" color=\"grey-3\">\r\n              <q-img\r\n                v-if=\"selectedProduct.image_url\"\r\n                :src=\"selectedProduct.image_url\"\r\n                :alt=\"selectedProduct.name\"\r\n              />\r\n              <q-icon\r\n                v-else\r\n                name=\"inventory\"\r\n                class=\"icon-size-lg\"\r\n                color=\"grey-6\"\r\n              />\r\n            </q-avatar>\r\n            <div class=\"col\">\r\n              <div class=\"text-subtitle1 text-weight-medium\">\r\n                {{ selectedProduct.name }}\r\n              </div>\r\n              <div class=\"text-caption text-grey-6\">\r\n                {{ selectedProduct.sku }} • {{ selectedProduct.brand }}\r\n              </div>\r\n              <div class=\"text-caption text-primary\">\r\n                <q-btn\r\n                  icon=\"edit\"\r\n                  flat\r\n                  dense\r\n                  size=\"sm\"\r\n                  :label=\"$t('inventory.changeProduct')\"\r\n                  @click=\"clearSelectedProduct\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Transfer Form -->\r\n      <div class=\"q-pa-md\">\r\n        <div class=\"q-gutter-md\">\r\n          <!-- From Location -->\r\n          <div>\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.fromLocation') }}\r\n            </label>\r\n            <q-select\r\n              v-model=\"fromLocation\"\r\n              :options=\"availableFromLocations\"\r\n              option-label=\"name\"\r\n              option-value=\"id\"\r\n              outlined\r\n              dense\r\n              :disable=\"!selectedProduct\"\r\n              @update:model-value=\"onFromLocationChange\"\r\n            >\r\n              <template #option=\"scope\">\r\n                <q-item v-bind=\"scope.itemProps\">\r\n                  <q-item-section>\r\n                    <q-item-label>{{ scope.opt.name }}</q-item-label>\r\n                    <q-item-label caption>\r\n                      {{ $t('inventory.availableStock') }}:\r\n                      {{ getLocationStock(scope.opt.id) }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </template>\r\n            </q-select>\r\n          </div>\r\n\r\n          <!-- To Location -->\r\n          <div>\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.toLocation') }}\r\n            </label>\r\n            <q-select\r\n              v-model=\"toLocation\"\r\n              :options=\"availableToLocations\"\r\n              option-label=\"name\"\r\n              option-value=\"id\"\r\n              outlined\r\n              dense\r\n              :disable=\"!fromLocation\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Batch Selection (if product requires batch tracking) -->\r\n          <div\r\n            v-if=\"\r\n              selectedProduct?.requires_batch_tracking &&\r\n              availableBatches.length > 0\r\n            \"\r\n          >\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.selectBatch') }}\r\n            </label>\r\n            <q-select\r\n              v-model=\"selectedBatch\"\r\n              :options=\"availableBatches\"\r\n              option-label=\"batchDisplay\"\r\n              option-value=\"id\"\r\n              outlined\r\n              dense\r\n              :disable=\"!fromLocation\"\r\n            >\r\n              <template #option=\"scope\">\r\n                <q-item v-bind=\"scope.itemProps\">\r\n                  <q-item-section>\r\n                    <q-item-label>{{ scope.opt.batch_number }}</q-item-label>\r\n                    <q-item-label caption>\r\n                      {{ $t('inventory.expiryDate') }}:\r\n                      {{ formatDate(scope.opt.expiry_date) }} •\r\n                      {{ $t('inventory.available') }}:\r\n                      {{ scope.opt.available_quantity }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                  <q-item-section side>\r\n                    <q-chip\r\n                      :color=\"getBatchStatusColor(scope.opt)\"\r\n                      text-color=\"white\"\r\n                      size=\"sm\"\r\n                    >\r\n                      {{ getBatchStatusText(scope.opt) }}\r\n                    </q-chip>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </template>\r\n            </q-select>\r\n          </div>\r\n\r\n          <!-- Quantity -->\r\n          <div>\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.quantityToTransfer') }}\r\n            </label>\r\n            <div class=\"row q-gutter-sm\">\r\n              <div class=\"col\">\r\n                <q-input\r\n                  v-model.number=\"transferQuantity\"\r\n                  type=\"number\"\r\n                  outlined\r\n                  dense\r\n                  min=\"1\"\r\n                  :max=\"maxTransferQuantity\"\r\n                  :disable=\"!fromLocation || !toLocation\"\r\n                  :suffix=\"selectedProduct?.unit || ''\"\r\n                />\r\n              </div>\r\n              <div class=\"col-auto\">\r\n                <q-btn-group outline>\r\n                  <q-btn\r\n                    v-for=\"amount in quickAmounts\"\r\n                    :key=\"amount\"\r\n                    :label=\"amount.toString()\"\r\n                    color=\"primary\"\r\n                    outline\r\n                    unelevated\r\n                    size=\"sm\"\r\n                    @click=\"setQuickAmount(amount)\"\r\n                  />\r\n                  <q-btn\r\n                    color=\"primary\"\r\n                    :label=\"$t('inventory.transferFullStock')\"\r\n                    outline\r\n                    icon=\"all_inbox\"\r\n                    @click=\"setQuickAmount(maxTransferQuantity)\"\r\n                  />\r\n                </q-btn-group>\r\n              </div>\r\n            </div>\r\n            <div\r\n              v-if=\"maxTransferQuantity > 0\"\r\n              class=\"text-caption text-grey-6 q-mt-xs\"\r\n            >\r\n              {{ $t('inventory.maxAvailable') }}: {{ maxTransferQuantity }}\r\n              {{ selectedProduct?.unit }}\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Reason -->\r\n          <div>\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.transferReason') }}\r\n            </label>\r\n            <q-select\r\n              v-model=\"transferReason\"\r\n              :options=\"reasonOptions\"\r\n              outlined\r\n              dense\r\n              :disable=\"!fromLocation || !toLocation\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Notes -->\r\n          <div>\r\n            <label class=\"text-subtitle2 q-mb-sm block\">\r\n              {{ $t('inventory.notes') }} ({{ $t('common.optional') }})\r\n            </label>\r\n            <q-input\r\n              v-model=\"notes\"\r\n              type=\"textarea\"\r\n              outlined\r\n              dense\r\n              rows=\"2\"\r\n              :placeholder=\"$t('inventory.transferNotesPlaceholder')\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Transfer Preview -->\r\n          <div v-if=\"isValidTransfer\" class=\"transfer-preview\">\r\n            <q-separator class=\"q-my-md\" />\r\n            <div class=\"text-subtitle2 q-mb-sm\">\r\n              {{ $t('inventory.transferPreview') }}\r\n            </div>\r\n            <div class=\"preview-card\">\r\n              <q-card flat bordered>\r\n                <q-card-section class=\"q-pa-sm\">\r\n                  <div class=\"row items-center q-gutter-sm\">\r\n                    <div class=\"col text-center\">\r\n                      <div class=\"text-body2 text-weight-medium\">\r\n                        {{ fromLocation?.name }}\r\n                      </div>\r\n                      <div class=\"text-h6 text-negative\">\r\n                        -{{ transferQuantity }}\r\n                      </div>\r\n                      <div class=\"text-caption\">\r\n                        {{ getCurrentStock() - transferQuantity }}\r\n                        {{ $t('inventory.remaining') }}\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-auto\">\r\n                      <q-icon name=\"arrow_forward\" size=\"md\" color=\"primary\" />\r\n                    </div>\r\n                    <div class=\"col text-center\">\r\n                      <div class=\"text-body2 text-weight-medium\">\r\n                        {{ toLocation?.name }}\r\n                      </div>\r\n                      <div class=\"text-h6 text-positive\">\r\n                        +{{ transferQuantity }}\r\n                      </div>\r\n                      <div class=\"text-caption\">\r\n                        {{ getToLocationCurrentStock() + transferQuantity }}\r\n                        {{ $t('inventory.newTotal') }}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </q-card-section>\r\n              </q-card>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Actions -->\r\n      <template #actions>\r\n        <div class=\"row items-center q-gutter-sm q-pa-sm\">\r\n          <q-space />\r\n          <q-btn\r\n            flat\r\n            :label=\"$t('common.cancel')\"\r\n            aria-label=\"Cancel\"\r\n            @click=\"$emit('update:modelValue', false)\"\r\n          />\r\n          <q-btn\r\n            color=\"primary\"\r\n            :label=\"$t('inventory.executeTransfer')\"\r\n            :loading=\"transferLoading\"\r\n            :disable=\"!isValidTransfer\"\r\n            aria-label=\"Execute transfer\"\r\n            @click=\"executeTransfer\"\r\n          />\r\n        </div>\r\n      </template>\r\n    </BaseDialog>\r\n\r\n    <!-- Barcode Scanner -->\r\n    <BarcodeScanner v-model=\"showBarcodeScanner\" @scan=\"handleBarcodeScan\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useInventoryStore } from 'src/stores/inventory';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import { formatDate } from 'src/utils/date';\r\n  import BarcodeScanner from 'src/components/BarcodeScanner.vue';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\nimport type {\r\n  LocationSummary,\r\n  ProductBatchSummary,\r\n  ProductWithStock,\r\n  StockTransferRequest,\r\n} from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    modelValue: boolean;\r\n    selectedProduct: ProductWithStock;\r\n    currentLocation?: LocationSummary;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    modelValue: false,\r\n    currentLocation: null,\r\n  });\r\n\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    'transfer-completed': [transfer: any];\r\n    'product-selected': [product: ProductWithStock | null];\r\n  }>();\r\n\r\n  // Composition\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const inventoryStore = useInventoryStore();\r\n  const clinicStore = useClinicStore();\r\n\r\n  // State\r\n  const fromLocation = ref<LocationSummary | null>(props.currentLocation ?? null);\r\n  const toLocation = ref<LocationSummary | null>(null);\r\n  const selectedBatch = ref<ProductBatchSummary | null>(null);\r\n  const transferQuantity = ref<number>(1);\r\n  const transferReason = ref('location_rebalance');\r\n  const notes = ref('');\r\n  const transferLoading = ref(false);\r\n\r\n  // Product selection state\r\n  const internalSelectedProduct = ref<ProductWithStock>(props.selectedProduct);\r\n  const availableProducts = ref<ProductWithStock[]>([]);\r\n  const showBarcodeScanner = ref(false);\r\n\r\n  // Quick amount buttons\r\n  const quickAmounts = [1, 5, 10, 25, 50];\r\n\r\n  // Reason options\r\n  const reasonOptions = computed(() => [\r\n    { label: t('inventory.locationRebalance'), value: 'location_rebalance' },\r\n    { label: t('inventory.stockReplenishment'), value: 'stock_replenishment' },\r\n    { label: t('inventory.emergencyTransfer'), value: 'emergency_transfer' },\r\n    { label: t('inventory.expiryManagement'), value: 'expiry_management' },\r\n    {\r\n      label: t('inventory.maintenanceRelocation'),\r\n      value: 'maintenance_relocation',\r\n    },\r\n  ]);\r\n\r\n  // Available locations\r\n  const availableFromLocations = computed(() => {\r\n    if (!props.selectedProduct) return [];\r\n\r\n    return clinicStore.locations.filter(location => {\r\n      const stock = getLocationStock(location.id);\r\n      return stock > 0;\r\n    });\r\n  });\r\n\r\n  const availableToLocations = computed(() => {\r\n    if (!fromLocation.value) return [];\r\n\r\n    return clinicStore.locations.filter(\r\n      location => location.id !== fromLocation.value?.id\r\n    );\r\n  });\r\n\r\n  // Available batches for the selected product and location\r\n  const availableBatches = computed<ProductBatchSummary[]>(() => {\r\n    if (\r\n      !props.selectedProduct?.requires_batch_tracking ||\r\n      !fromLocation.value\r\n    ) {\r\n      return [] as any[];\r\n    }\r\n\r\n    // Get batches for this product at the from location\r\n    const batches = inventoryStore.getProductBatches(\r\n      props.selectedProduct.id,\r\n      fromLocation.value.id\r\n    );\r\n\r\n    return batches\r\n      .filter(batch => batch.available_quantity > 0)\r\n      .map(batch => ({\r\n        ...batch,\r\n        batchDisplay: `${batch.batch_number} (${formatDate(batch.expiry_date)})`,\r\n      }))\r\n      .sort(\r\n        (a, b) =>\r\n          new Date(a.expiry_date).getTime() - new Date(b.expiry_date).getTime()\r\n      );\r\n  });\r\n\r\n  // Max transfer quantity\r\n  const maxTransferQuantity = computed(() => {\r\n    if (!fromLocation.value || !props.selectedProduct) return 0;\r\n\r\n    if (props.selectedProduct.requires_batch_tracking && selectedBatch.value) {\r\n      return selectedBatch.value.available_quantity;\r\n    }\r\n\r\n    return getLocationStock(fromLocation.value.id);\r\n  });\r\n\r\n  // Validation\r\n  const isValidTransfer = computed(() => {\r\n    return (\r\n      fromLocation.value &&\r\n      toLocation.value &&\r\n      transferQuantity.value > 0 &&\r\n      transferQuantity.value <= maxTransferQuantity.value &&\r\n      transferReason.value &&\r\n      (!props.selectedProduct?.requires_batch_tracking || selectedBatch.value)\r\n    );\r\n  });\r\n\r\n  // Methods\r\n  const getLocationStock = (locationId: string): number => {\r\n    return inventoryStore.getProductStockAtLocation(\r\n      props.selectedProduct.id,\r\n      locationId\r\n    );\r\n  };\r\n\r\n  const getCurrentStock = (): number => {\r\n    return fromLocation.value ? getLocationStock(fromLocation.value.id) : 0;\r\n  };\r\n\r\n  const getToLocationCurrentStock = (): number => {\r\n    return toLocation.value ? getLocationStock(toLocation.value.id) : 0;\r\n  };\r\n\r\n  const onFromLocationChange = () => {\r\n    selectedBatch.value = null;\r\n    transferQuantity.value = 1;\r\n  };\r\n\r\n  const setQuickAmount = (amount: number) => {\r\n    transferQuantity.value = Math.min(amount, maxTransferQuantity.value);\r\n  };\r\n\r\n  const getBatchStatusColor = (batch: ProductBatchSummary): string => {\r\n    const daysToExpiry = Math.ceil(\r\n      (new Date(batch.expiry_date).getTime() - new Date().getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n    );\r\n\r\n    if (daysToExpiry < 0) return 'negative';\r\n    if (daysToExpiry <= 7) return 'warning';\r\n    if (daysToExpiry <= 30) return 'orange';\r\n    return 'positive';\r\n  };\r\n\r\n  const getBatchStatusText = (batch: ProductBatchSummary): string => {\r\n    const daysToExpiry = Math.ceil(\r\n      (new Date(batch.expiry_date).getTime() - new Date().getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n    );\r\n\r\n    if (daysToExpiry < 0) return t('inventory.expired');\r\n    if (daysToExpiry <= 7) return t('inventory.expiresSoon');\r\n    if (daysToExpiry <= 30) return t('inventory.expiresThisMonth');\r\n    return t('inventory.fresh');\r\n  };\r\n\r\n  const executeTransfer = async () => {\r\n    if (!isValidTransfer.value) return;\r\n\r\n    transferLoading.value = true;\r\n\r\n    try {\r\n      const transfer: StockTransferRequest = {\r\n        practice_id: props.selectedProduct.practice_id,\r\n        product_id: props.selectedProduct.id,\r\n        from_location_id: fromLocation.value?.id ?? '',\r\n        to_location_id: toLocation.value?.id ?? '',\r\n        quantity: transferQuantity.value,\r\n        reason: transferReason.value,\r\n        notes: notes.value,\r\n        batch_id: selectedBatch.value?.id ?? null,\r\n      };\r\n\r\n      await inventoryStore.executeStockTransfer(transfer);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('inventory.transferCompleted'),\r\n        caption: t('inventory.transferCompletedDetails', {\r\n          quantity: transferQuantity.value,\r\n          product: props.selectedProduct.name,\r\n          from: fromLocation.value.name,\r\n          to: toLocation.value.name,\r\n        }),\r\n      });\r\n\r\n      emit('transfer-completed', transfer);\r\n      emit('update:modelValue', false);\r\n\r\n      // Reset form\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Transfer failed:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('inventory.transferFailed'),\r\n        caption:\r\n          (error as Error).message || t('inventory.transferFailedDetails'),\r\n      });\r\n    } finally {\r\n      transferLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    fromLocation.value = null;\r\n    toLocation.value = null;\r\n    selectedBatch.value = null;\r\n    transferQuantity.value = 1;\r\n    transferReason.value = 'location_rebalance';\r\n    notes.value = '';\r\n    internalSelectedProduct.value = null;\r\n  };\r\n\r\n  // Product selection functions\r\n  const filterProducts = (\r\n    val: string,\r\n    update: (callback: () => void) => void\r\n  ) => {\r\n    update(() => {\r\n      if (val === '') {\r\n        availableProducts.value = [];\r\n      } else {\r\n        // In a real implementation, this would search inventory\r\n        availableProducts.value = [];\r\n      }\r\n    });\r\n  };\r\n\r\n  const onProductSelected = (product: ProductWithStock | null) => {\r\n    if (product) {\r\n      emit('product-selected', product);\r\n    }\r\n  };\r\n\r\n  const clearSelectedProduct = () => {\r\n    emit('product-selected', null);\r\n  };\r\n\r\n  // Barcode scanning\r\n  const handleBarcodeScan = async (barcode: string) => {\r\n    try {\r\n      // This would search for products by barcode\r\n      const notificationOptions: QNotifyCreateOptions = {\r\n        type: 'info',\r\n        message: t('inventory.barcodeScanned', { barcode }),\r\n        icon: 'qr_code_scanner',\r\n      };\r\n      $q.notify(notificationOptions);\r\n    } catch (error) {\r\n      console.error('Error processing barcode:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.processingError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Initialize with current location if provided\r\n  watch(\r\n    () => props.currentLocation,\r\n    newLocation => {\r\n      if (newLocation && !fromLocation.value) {\r\n        fromLocation.value = newLocation;\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n\r\n  // Reset form when dialog closes\r\n  watch(\r\n    () => props.modelValue,\r\n    isOpen => {\r\n      if (!isOpen) {\r\n        resetForm();\r\n      }\r\n    }\r\n  );\r\n</script>\r\n\r\n<style scoped>\r\n  .product-preview {\r\n    background: var(--q-grey-1);\r\n    border-radius: 8px;\r\n    padding: 16px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .transfer-preview {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  .preview-card {\r\n    background: linear-gradient(135deg, var(--q-primary-1), var(--q-accent-1));\r\n    border-radius: 8px;\r\n    padding: 4px;\r\n  }\r\n\r\n  .preview-card .q-card {\r\n    border-radius: 6px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\layout\\DemoBanner.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 18,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 18,
        "endColumn": 28,
        "fix": { "range": [426, 439], "text": "#action" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\r\n  <q-banner\r\n    v-if=\"isDemoUser\"\r\n    class=\"demo-banner\"\r\n    icon=\"science\"\r\n    color=\"amber\"\r\n    text-color=\"white\"\r\n    dense\r\n  >\r\n    <div class=\"demo-banner-content\">\r\n      <div class=\"demo-title\">\r\n        <q-icon name=\"science\" size=\"18px\" class=\"q-mr-xs\" />\r\n        {{ $t('demo.title') }}\r\n      </div>\r\n      <div class=\"demo-subtitle\">{{ $t('demo.subtitle') }}</div>\r\n    </div>\r\n\r\n    <template v-slot:action>\r\n      <q-btn flat color=\"white\" icon=\"info\" size=\"sm\" @click=\"showDemoInfo\">\r\n        <q-tooltip>{{ $t('demo.limitations') }}</q-tooltip>\r\n      </q-btn>\r\n    </template>\r\n  </q-banner>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useAuthStore } from '@/stores/auth';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const authStore = useAuthStore();\r\n\r\n  // Computed\r\n  const isDemoUser = computed(() => {\r\n    return authStore.userEmail === 'demo@remcura.com';\r\n  });\r\n\r\n  // Methods\r\n  const showDemoInfo = () => {\r\n    $q.dialog({\r\n      title: t('demo.title'),\r\n      message: `\r\n      <div class=\"demo-info-dialog\">\r\n        <p><strong>${t('demo.practice')}:</strong> ${t(\r\n        'demo.practiceDescription'\r\n      )}</p>\r\n        <p><strong>${t('demo.limitations')}:</strong> ${t(\r\n        'demo.limitationsText'\r\n      )}</p>\r\n        <p><em>{{ $t('demo.changesCanBeReset') }}</em></p>\r\n      </div>\r\n    `,\r\n      html: true,\r\n      ok: {\r\n        label: t('common.close'),\r\n        color: 'primary',\r\n      },\r\n    });\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .demo-banner {\r\n    border: none;\r\n    background: linear-gradient(135deg, var(--q-amber-6), var(--q-amber-8));\r\n\r\n    .demo-banner-content {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: var(--space-1);\r\n\r\n      .demo-title {\r\n        display: flex;\r\n        align-items: center;\r\n        font-weight: 600;\r\n        font-size: 0.9rem;\r\n      }\r\n\r\n      .demo-subtitle {\r\n        font-size: 0.8rem;\r\n        opacity: 0.9;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 599px) {\r\n    .demo-banner-content {\r\n      .demo-title {\r\n        font-size: 0.85rem;\r\n      }\r\n\r\n      .demo-subtitle {\r\n        font-size: 0.75rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  :deep(.demo-info-dialog) {\r\n    p {\r\n      margin-bottom: var(--space-3);\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n        font-style: italic;\r\n        color: var(--q-grey-6);\r\n      }\r\n    }\r\n\r\n    strong {\r\n      color: var(--q-primary);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\navigation\\NavIconItem.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\orderLists\\AdvancedOrderListCard.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 56,
        "column": 50,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 63,
        "fix": { "range": [1396, 1432], "text": "v-close-popup @click=\"openOrderList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 63,
        "column": 50,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 63,
        "endColumn": 63,
        "fix": { "range": [1633, 1669], "text": "v-close-popup @click=\"duplicateList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 70,
        "column": 47,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 70,
        "endColumn": 60,
        "fix": { "range": [1875, 1908], "text": "v-close-popup @click=\"exportList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 82,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 82,
        "endColumn": 31,
        "fix": { "range": [2155, 2207], "text": "class=\"text-primary\"\n          @click=\"editSettings\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 83,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 83,
        "endColumn": 24,
        "fix": {
          "range": [2155, 2231],
          "text": "v-close-popup\n          @click=\"editSettings\"\n          class=\"text-primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 115,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 115,
        "endColumn": 37,
        "fix": {
          "range": [3094, 3158],
          "text": ":loading=\"creatingOrder\"\n            @click=\"orderCriticalItems\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 116,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 116,
        "endColumn": 29,
        "fix": {
          "range": [3094, 3187],
          "text": "color=\"negative\"\n            @click=\"orderCriticalItems\"\n            :loading=\"creatingOrder\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 117,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 117,
        "endColumn": 22,
        "fix": {
          "range": [3094, 3209],
          "text": "size=\"sm\"\n            @click=\"orderCriticalItems\"\n            :loading=\"creatingOrder\"\n            color=\"negative\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 118,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 118,
        "endColumn": 30,
        "fix": {
          "range": [3094, 3239],
          "text": "class=\"alert-btn\"\n            @click=\"orderCriticalItems\"\n            :loading=\"creatingOrder\"\n            color=\"negative\"\n            size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"class\".",
        "line": 160,
        "column": 50,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 160,
        "endColumn": 76,
        "fix": {
          "range": [4538, 4604],
          "text": "v-if=\"showRecommendations\" class=\"order-recommendations q-pt-none\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 257,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 257,
        "endColumn": 35,
        "fix": { "range": [7768, 7828], "text": ":loading=\"creatingOrder\"\n          @click=\"createQuickOrder\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 258,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 258,
        "endColumn": 31,
        "fix": {
          "range": [7768, 7859],
          "text": "icon=\"shopping_cart\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 259,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 259,
        "endColumn": 51,
        "fix": {
          "range": [7768, 7910],
          "text": ":label=\"`Bestel (${itemsToOrderCount})`\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 260,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 260,
        "endColumn": 26,
        "fix": {
          "range": [7768, 7936],
          "text": "color=\"primary\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 261,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 261,
        "endColumn": 21,
        "fix": {
          "range": [7768, 7957],
          "text": "unelevated\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 262,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 262,
        "endColumn": 18,
        "fix": {
          "range": [7768, 7975],
          "text": "no-caps\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 263,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 263,
        "endColumn": 20,
        "fix": {
          "range": [7768, 7995],
          "text": "size=\"sm\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 264,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 264,
        "endColumn": 49,
        "fix": {
          "range": [7768, 8044],
          "text": "class=\"action-btn action-btn--primary\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\"\n          unelevated\n          no-caps\n          size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 269,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 269,
        "endColumn": 29,
        "fix": { "range": [8082, 8133], "text": "icon=\"open_in_new\"\n          @click=\"openOrderList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 270,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 270,
        "endColumn": 26,
        "fix": {
          "range": [8082, 8159],
          "text": "label=\"Beheren\"\n          @click=\"openOrderList\"\n          icon=\"open_in_new\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 271,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 271,
        "endColumn": 26,
        "fix": {
          "range": [8082, 8185],
          "text": "color=\"primary\"\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 272,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 272,
        "endColumn": 18,
        "fix": {
          "range": [8082, 8203],
          "text": "outline\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 273,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 273,
        "endColumn": 18,
        "fix": {
          "range": [8082, 8221],
          "text": "no-caps\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\"\n          outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 274,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 274,
        "endColumn": 20,
        "fix": {
          "range": [8082, 8241],
          "text": "size=\"sm\"\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\"\n          outline\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 275,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 275,
        "endColumn": 51,
        "fix": {
          "range": [8082, 8292],
          "text": "class=\"action-btn action-btn--secondary\"\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\"\n          outline\n          no-caps\n          size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"flat\" should go before \"@click\".",
        "line": 283,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 283,
        "endColumn": 15,
        "fix": { "range": [8414, 8454], "text": "flat\n          @click=\"openStockManager\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"round\" should go before \"@click\".",
        "line": 284,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 284,
        "endColumn": 16,
        "fix": { "range": [8414, 8470], "text": "round\n          @click=\"openStockManager\"\n          flat" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"dense\" should go before \"@click\".",
        "line": 285,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 285,
        "endColumn": 16,
        "fix": {
          "range": [8414, 8486],
          "text": "dense\n          @click=\"openStockManager\"\n          flat\n          round"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 286,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 286,
        "endColumn": 27,
        "fix": {
          "range": [8414, 8513],
          "text": "icon=\"inventory\"\n          @click=\"openStockManager\"\n          flat\n          round\n          dense"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 287,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 287,
        "endColumn": 25,
        "fix": {
          "range": [8414, 8538],
          "text": "color=\"grey-7\"\n          @click=\"openStockManager\"\n          flat\n          round\n          dense\n          icon=\"inventory\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 288,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 288,
        "endColumn": 20,
        "fix": {
          "range": [8414, 8558],
          "text": "size=\"sm\"\n          @click=\"openStockManager\"\n          flat\n          round\n          dense\n          icon=\"inventory\"\n          color=\"grey-7\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 289,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 289,
        "endColumn": 27,
        "fix": {
          "range": [8414, 8585],
          "text": "class=\"icon-btn\"\n          @click=\"openStockManager\"\n          flat\n          round\n          dense\n          icon=\"inventory\"\n          color=\"grey-7\"\n          size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"flat\" should go before \"@click\".",
        "line": 296,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 296,
        "endColumn": 15,
        "fix": { "range": [8689, 8726], "text": "flat\n          @click=\"viewAnalytics\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"round\" should go before \"@click\".",
        "line": 297,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 297,
        "endColumn": 16,
        "fix": { "range": [8689, 8742], "text": "round\n          @click=\"viewAnalytics\"\n          flat" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"dense\" should go before \"@click\".",
        "line": 298,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 298,
        "endColumn": 16,
        "fix": {
          "range": [8689, 8758],
          "text": "dense\n          @click=\"viewAnalytics\"\n          flat\n          round"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 299,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 299,
        "endColumn": 27,
        "fix": {
          "range": [8689, 8785],
          "text": "icon=\"analytics\"\n          @click=\"viewAnalytics\"\n          flat\n          round\n          dense"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 300,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 300,
        "endColumn": 25,
        "fix": {
          "range": [8689, 8810],
          "text": "color=\"grey-7\"\n          @click=\"viewAnalytics\"\n          flat\n          round\n          dense\n          icon=\"analytics\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 301,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 301,
        "endColumn": 20,
        "fix": {
          "range": [8689, 8830],
          "text": "size=\"sm\"\n          @click=\"viewAnalytics\"\n          flat\n          round\n          dense\n          icon=\"analytics\"\n          color=\"grey-7\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 302,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 302,
        "endColumn": 27,
        "fix": {
          "range": [8689, 8857],
          "text": "class=\"icon-btn\"\n          @click=\"viewAnalytics\"\n          flat\n          round\n          dense\n          icon=\"analytics\"\n          color=\"grey-7\"\n          size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"flat\" should go before \"@click\".",
        "line": 309,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 309,
        "endColumn": 15,
        "fix": { "range": [8954, 8990], "text": "flat\n          @click=\"editSettings\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"round\" should go before \"@click\".",
        "line": 310,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 310,
        "endColumn": 16,
        "fix": { "range": [8954, 9006], "text": "round\n          @click=\"editSettings\"\n          flat" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"dense\" should go before \"@click\".",
        "line": 311,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 311,
        "endColumn": 16,
        "fix": {
          "range": [8954, 9022],
          "text": "dense\n          @click=\"editSettings\"\n          flat\n          round"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 312,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 312,
        "endColumn": 26,
        "fix": {
          "range": [8954, 9048],
          "text": "icon=\"settings\"\n          @click=\"editSettings\"\n          flat\n          round\n          dense"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 313,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 313,
        "endColumn": 25,
        "fix": {
          "range": [8954, 9073],
          "text": "color=\"grey-7\"\n          @click=\"editSettings\"\n          flat\n          round\n          dense\n          icon=\"settings\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 314,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 314,
        "endColumn": 20,
        "fix": {
          "range": [8954, 9093],
          "text": "size=\"sm\"\n          @click=\"editSettings\"\n          flat\n          round\n          dense\n          icon=\"settings\"\n          color=\"grey-7\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 315,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 315,
        "endColumn": 27,
        "fix": {
          "range": [8954, 9120],
          "text": "class=\"icon-btn\"\n          @click=\"editSettings\"\n          flat\n          round\n          dense\n          icon=\"settings\"\n          color=\"grey-7\"\n          size=\"sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 444,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 444,
        "endColumn": 38,
        "fix": { "range": [12849, 12908], "text": ":loading=\"savingSettings\"\n            @click=\"saveSettings\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 445,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 445,
        "endColumn": 28,
        "fix": {
          "range": [12849, 12936],
          "text": "color=\"primary\"\n            @click=\"saveSettings\"\n            :loading=\"savingSettings\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 446,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 446,
        "endColumn": 28,
        "fix": {
          "range": [12849, 12964],
          "text": "label=\"Opslaan\"\n            @click=\"saveSettings\"\n            :loading=\"savingSettings\"\n            color=\"primary\""
        }
      },
      {
        "ruleId": "vue/require-default-prop",
        "severity": 1,
        "message": "Prop 'reorderAdvice' requires default value to be set.",
        "line": 469,
        "column": 5,
        "nodeType": "TSPropertySignature",
        "messageId": "missingDefault",
        "endLine": 469,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 618,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 618,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17480, 17483], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17480, 17483], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 619,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 619,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17556, 17559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17556, 17559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 624,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 624,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17702, 17705], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17702, 17705], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17760, 17763], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17760, 17763], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 634,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 634,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18062, 18065], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18062, 18065], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 639,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 639,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18198, 18201], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18198, 18201], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 640,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 640,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18256, 18259], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18256, 18259], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 645,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 645,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18421, 18424], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18421, 18424], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 652,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 652,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18579, 18582], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18579, 18582], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 665,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 665,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18852, 18855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18852, 18855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 871,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 871,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24078, 24081], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24078, 24081], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 61,
    "fixableErrorCount": 0,
    "fixableWarningCount": 49,
    "source": "<template>\n  <div class=\"modern-order-card\">\n    <!-- Card Header -->\n    <div class=\"card-header\">\n      <div class=\"header-left\">\n        <div class=\"list-icon\">\n          <q-icon\n            :name=\"getListIcon()\"\n            :color=\"getIconColor()\"\n            class=\"icon-size-lg\"\n          />\n        </div>\n        <div class=\"list-info\">\n          <h3 class=\"list-title\">{{ orderList.name }}</h3>\n          <p class=\"list-subtitle\">\n            {{ orderList.description || 'Geen beschrijving' }}\n          </p>\n        </div>\n      </div>\n\n      <div class=\"header-right\">\n        <q-badge\n          :color=\"statusColor\"\n          :label=\"statusLabel\"\n          class=\"status-badge\"\n        />\n        <q-btn\n          flat\n          round\n          dense\n          icon=\"more_vert\"\n          class=\"menu-btn\"\n          @click=\"showActionsMenu = !showActionsMenu\"\n        />\n      </div>\n    </div>\n\n    <!-- Tags Row -->\n    <div\n      v-if=\"(orderList as any).tags && (orderList as any).tags.length > 0\"\n      class=\"tags-section\"\n    >\n      <q-chip\n        v-for=\"tag in (orderList as any).tags\"\n        :key=\"tag\"\n        size=\"sm\"\n        outline\n        :label=\"tag\"\n        class=\"tag-chip\"\n      />\n    </div>\n\n    <!-- Actions Menu -->\n    <q-menu v-model=\"showActionsMenu\" anchor=\"top right\" self=\"top right\">\n      <q-list dense class=\"actions-menu\">\n        <q-item clickable @click=\"openOrderList\" v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"open_in_new\" />\n          </q-item-section>\n          <q-item-section>Openen</q-item-section>\n        </q-item>\n\n        <q-item clickable @click=\"duplicateList\" v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"content_copy\" />\n          </q-item-section>\n          <q-item-section>Dupliceren</q-item-section>\n        </q-item>\n\n        <q-item clickable @click=\"exportList\" v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"download\" />\n          </q-item-section>\n          <q-item-section>Exporteren</q-item-section>\n        </q-item>\n\n        <q-separator />\n\n        <q-item\n          clickable\n          @click=\"editSettings\"\n          class=\"text-primary\"\n          v-close-popup\n        >\n          <q-item-section avatar>\n            <q-icon name=\"settings\" />\n          </q-item-section>\n          <q-item-section>Instellingen</q-item-section>\n        </q-item>\n      </q-list>\n    </q-menu>\n\n    <!-- Card Content -->\n    <div class=\"card-content\">\n      <!-- Critical Items Alert -->\n      <div\n        v-if=\"\n          reorderAdvice && reorderAdvice.items_by_urgency.critical.length > 0\n        \"\n        class=\"critical-alert\"\n      >\n        <div class=\"alert-icon\">\n          <q-icon name=\"warning\" color=\"negative\" class=\"icon-size-base\" />\n        </div>\n        <div class=\"alert-content\">\n          <span class=\"alert-text\"\n            >{{ reorderAdvice.items_by_urgency.critical.length }} kritieke\n            items</span\n          >\n          <q-btn\n            flat\n            dense\n            label=\"Bestel nu\"\n            @click=\"orderCriticalItems\"\n            :loading=\"creatingOrder\"\n            color=\"negative\"\n            size=\"sm\"\n            class=\"alert-btn\"\n          />\n        </div>\n      </div>\n\n      <!-- Stock Overview Stats -->\n      <div class=\"stats-grid\">\n        <div class=\"stat-item stat-critical\">\n          <div class=\"stat-value\">{{ outOfStockCount }}</div>\n          <div class=\"stat-label\">Uitverkocht</div>\n        </div>\n\n        <div class=\"stat-item stat-warning\">\n          <div class=\"stat-value\">{{ lowStockCount }}</div>\n          <div class=\"stat-label\">Laag</div>\n        </div>\n\n        <div class=\"stat-item stat-success\">\n          <div class=\"stat-value\">{{ normalStockCount }}</div>\n          <div class=\"stat-label\">Normaal</div>\n        </div>\n\n        <div class=\"stat-item stat-info\">\n          <div class=\"stat-value\">{{ overstockedCount }}</div>\n          <div class=\"stat-label\">Teveel</div>\n        </div>\n      </div>\n\n      <!-- Quick Info -->\n      <div class=\"quick-info\">\n        <div class=\"info-item\">\n          <q-icon name=\"inventory\" class=\"info-icon icon-size-sm\" />\n          <span>{{ orderList.total_items || 0 }} items</span>\n        </div>\n        <div class=\"info-item\">\n          <q-icon name=\"euro\" class=\"info-icon icon-size-sm\" />\n          <span>€{{ ((orderList as any).total_value || 0).toFixed(2) }}</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Order recommendations -->\n    <div class=\"order-recommendations q-pt-none\" v-if=\"showRecommendations\">\n      <div class=\"text-subtitle2 q-mb-md\">📋 Besteladvies</div>\n\n      <!-- Supplier breakdown -->\n      <div\n        v-if=\"reorderAdvice && reorderAdvice.suppliers_involved.length > 0\"\n        class=\"suppliers-breakdown q-mb-md\"\n      >\n        <div class=\"text-caption text-grey-6 q-mb-xs\">\n          Leveranciers betrokken:\n        </div>\n        <div class=\"row q-gutter-xs\">\n          <q-chip\n            v-for=\"supplier in reorderAdvice.suppliers_involved\"\n            :key=\"supplier\"\n            size=\"sm\"\n            color=\"primary\"\n            text-color=\"white\"\n            :label=\"supplier\"\n            icon=\"business\"\n          />\n        </div>\n      </div>\n\n      <!-- Top priority items preview -->\n      <div v-if=\"topPriorityItems.length > 0\" class=\"priority-items\">\n        <div class=\"text-caption text-grey-6 q-mb-xs\">Prioriteit items:</div>\n        <q-list dense class=\"rounded-borders\">\n          <q-item\n            v-for=\"item in topPriorityItems.slice(0, 3)\"\n            :key=\"item.product_id\"\n            class=\"q-pa-xs\"\n          >\n            <q-item-section avatar>\n              <q-icon\n                :name=\"getUrgencyIcon(item.urgency_level)\"\n                :color=\"getUrgencyColor(item.urgency_level)\"\n                size=\"sm\"\n              />\n            </q-item-section>\n\n            <q-item-section>\n              <q-item-label class=\"text-weight-medium\">{{\n                item.product_name\n              }}</q-item-label>\n              <q-item-label caption>\n                Voorraad: {{ item.current_stock }} / Min:\n                {{ item.minimum_stock }}\n              </q-item-label>\n            </q-item-section>\n\n            <q-item-section side>\n              <div class=\"text-right\">\n                <div class=\"text-weight-bold text-primary\">\n                  {{ item.calculated_order_quantity }}\n                </div>\n                <div class=\"text-caption\">bestellen</div>\n              </div>\n            </q-item-section>\n          </q-item>\n\n          <q-item v-if=\"topPriorityItems.length > 3\" class=\"text-center\">\n            <q-item-section>\n              <q-item-label class=\"text-grey-6\">\n                +{{ topPriorityItems.length - 3 }} meer...\n              </q-item-label>\n            </q-item-section>\n          </q-item>\n        </q-list>\n      </div>\n\n      <!-- Cost estimation -->\n      <div v-if=\"reorderAdvice\" class=\"cost-estimation q-mt-md\">\n        <div class=\"row items-center\">\n          <div class=\"col\">\n            <div class=\"text-caption text-grey-6\">Geschatte kosten:</div>\n            <div class=\"text-h6 text-primary\">\n              €{{ reorderAdvice.total_estimated_cost.toFixed(2) }}\n            </div>\n          </div>\n          <div class=\"col-auto\">\n            <div class=\"text-caption text-grey-6\">Items:</div>\n            <div class=\"text-subtitle1\">\n              {{ reorderAdvice.total_items_to_order }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Card Actions -->\n    <div class=\"card-actions\">\n      <!-- Primary Actions -->\n      <div class=\"primary-actions\">\n        <q-btn\n          v-if=\"hasItemsToOrder\"\n          @click=\"createQuickOrder\"\n          :loading=\"creatingOrder\"\n          icon=\"shopping_cart\"\n          :label=\"`Bestel (${itemsToOrderCount})`\"\n          color=\"primary\"\n          unelevated\n          no-caps\n          size=\"sm\"\n          class=\"action-btn action-btn--primary\"\n        />\n\n        <q-btn\n          @click=\"openOrderList\"\n          icon=\"open_in_new\"\n          label=\"Beheren\"\n          color=\"primary\"\n          outline\n          no-caps\n          size=\"sm\"\n          class=\"action-btn action-btn--secondary\"\n        />\n      </div>\n\n      <!-- Secondary Actions -->\n      <div class=\"secondary-actions\">\n        <q-btn\n          @click=\"openStockManager\"\n          flat\n          round\n          dense\n          icon=\"inventory\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n        >\n          <q-tooltip>Voorraad beheren</q-tooltip>\n        </q-btn>\n\n        <q-btn\n          @click=\"viewAnalytics\"\n          flat\n          round\n          dense\n          icon=\"analytics\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n        >\n          <q-tooltip>Analytics</q-tooltip>\n        </q-btn>\n\n        <q-btn\n          @click=\"editSettings\"\n          flat\n          round\n          dense\n          icon=\"settings\"\n          color=\"grey-7\"\n          size=\"sm\"\n          class=\"icon-btn\"\n        >\n          <q-tooltip>Instellingen</q-tooltip>\n        </q-btn>\n      </div>\n    </div>\n\n    <!-- Mini progress bar for auto-reorder lists -->\n    <div\n      v-if=\"(orderList as any).auto_reorder_enabled\"\n      class=\"auto-reorder-progress\"\n    >\n      <q-linear-progress\n        :value=\"autoReorderProgress\"\n        :color=\"autoReorderProgress > 0.8 ? 'warning' : 'primary'\"\n        size=\"4px\"\n      />\n      <div class=\"text-caption text-center q-pa-xs text-grey-6\">\n        Volgende automatische controle: {{ nextAutoCheck }}\n      </div>\n    </div>\n\n    <!-- Settings Dialog -->\n    <q-dialog v-model=\"showSettingsDialog\" persistent>\n      <q-card style=\"min-width: 400px\">\n        <q-card-section class=\"q-pb-none\">\n          <div class=\"text-h6\">Bestellijst instellingen</div>\n          <div class=\"text-caption text-grey-6\">{{ orderList.name }}</div>\n        </q-card-section>\n\n        <q-card-section>\n          <div class=\"q-gutter-md\">\n            <!-- Basic settings -->\n            <q-input v-model=\"settingsForm.name\" label=\"Naam\" outlined dense />\n\n            <q-input\n              v-model=\"settingsForm.description\"\n              label=\"Beschrijving\"\n              outlined\n              dense\n              type=\"textarea\"\n              rows=\"2\"\n            />\n\n            <!-- List type -->\n            <q-select\n              v-model=\"settingsForm.list_type\"\n              label=\"Type lijst\"\n              :options=\"listTypeOptions\"\n              outlined\n              dense\n              emit-value\n              map-options\n            />\n\n            <!-- Auto-reorder settings -->\n            <div class=\"q-gutter-sm\">\n              <q-toggle\n                v-model=\"settingsForm.auto_reorder_enabled\"\n                label=\"Automatisch herbestellen\"\n                color=\"primary\"\n              />\n\n              <q-input\n                v-if=\"settingsForm.auto_reorder_enabled\"\n                v-model.number=\"settingsForm.reorder_frequency_days\"\n                label=\"Controle frequentie (dagen)\"\n                type=\"number\"\n                outlined\n                dense\n                min=\"1\"\n                max=\"365\"\n              />\n            </div>\n\n            <!-- Order timing -->\n            <div class=\"row q-gutter-sm\">\n              <q-select\n                v-model=\"settingsForm.preferred_order_day\"\n                label=\"Voorkeur besteldag\"\n                :options=\"dayOptions\"\n                outlined\n                dense\n                emit-value\n                map-options\n                class=\"col\"\n              />\n\n              <q-input\n                v-model=\"settingsForm.order_cutoff_time\"\n                label=\"Besteltijd\"\n                type=\"time\"\n                outlined\n                dense\n                class=\"col\"\n              />\n            </div>\n\n            <!-- Minimum order value -->\n            <q-input\n              v-model.number=\"settingsForm.min_order_value\"\n              label=\"Minimum bestelwaarde (€)\"\n              type=\"number\"\n              outlined\n              dense\n              min=\"0\"\n              step=\"0.01\"\n            />\n\n            <!-- Tags -->\n            <q-select\n              v-model=\"settingsForm.tags\"\n              label=\"Tags\"\n              multiple\n              outlined\n              dense\n              use-input\n              use-chips\n              input-debounce=\"0\"\n              new-value-mode=\"add-unique\"\n              hint=\"Voer tags in en druk op Enter\"\n            />\n          </div>\n        </q-card-section>\n\n        <q-card-actions align=\"right\" class=\"q-pa-md\">\n          <q-btn flat label=\"Annuleren\" @click=\"showSettingsDialog = false\" />\n          <q-btn\n            @click=\"saveSettings\"\n            :loading=\"savingSettings\"\n            color=\"primary\"\n            label=\"Opslaan\"\n          />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { useOrderListsStore } from '@/stores/orderLists';\n  import { useAuthStore } from '@/stores/auth';\n  import { BaseCard } from '@/components/cards';\n  import type { OrderListWithItems } from '@/types/stores';\n  import type {\n    OrderAdvice,\n    ReorderSuggestion,\n  } from '@/stores/orderLists/orderLists-minmax';\n\n  interface Props {\n    orderList: OrderListWithItems;\n    reorderAdvice?: OrderAdvice;\n    showRecommendations?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    showRecommendations: true,\n  });\n\n  const emit = defineEmits<{\n    'order-created': [orderList: OrderListWithItems];\n    'list-updated': [orderList: OrderListWithItems];\n    'analytics-requested': [orderList: OrderListWithItems];\n  }>();\n\n  const $q = useQuasar();\n  const router = useRouter();\n  const orderListsStore = useOrderListsStore();\n\n  // State\n  const creatingOrder = ref(false);\n  const showSettingsDialog = ref(false);\n  const savingSettings = ref(false);\n  const showActionsMenu = ref(false);\n\n  // Settings form\n  const settingsForm = ref({\n    name: '',\n    description: '',\n    list_type: 'reorder_list',\n    auto_reorder_enabled: false,\n    reorder_frequency_days: 14,\n    preferred_order_day: null,\n    order_cutoff_time: '',\n    min_order_value: 0,\n    tags: [],\n  });\n\n  // Options\n  const listTypeOptions = [\n    { label: 'Herbestel lijst', value: 'reorder_list' },\n    { label: 'Winkellijst', value: 'shopping_list' },\n    { label: 'Noodlijst', value: 'emergency_list' },\n    { label: 'Onderhoudslijst', value: 'maintenance_list' },\n  ];\n\n  const dayOptions = [\n    { label: 'Zondag', value: 0 },\n    { label: 'Maandag', value: 1 },\n    { label: 'Dinsdag', value: 2 },\n    { label: 'Woensdag', value: 3 },\n    { label: 'Donderdag', value: 4 },\n    { label: 'Vrijdag', value: 5 },\n    { label: 'Zaterdag', value: 6 },\n  ];\n\n  // Computed properties\n  const cardClasses = computed(() => ({\n    'full-height': true,\n  }));\n\n  const statusColor = computed(() => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'positive';\n      case 'draft':\n        return 'warning';\n      case 'submitted':\n        return 'info';\n      case 'confirmed':\n        return 'primary';\n      case 'delivered':\n        return 'positive';\n      case 'cancelled':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  });\n\n  const statusLabel = computed(() => getStatusLabel(props.orderList.status));\n\n  const hasUrgentItems = computed(() => {\n    return (\n      props.reorderAdvice?.items_by_urgency.critical.length > 0 ||\n      props.reorderAdvice?.items_by_urgency.high.length > 0\n    );\n  });\n\n  const outOfStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'critical' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const lowStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'high' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const normalStockCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'normal' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const overstockedCount = computed(() => {\n    return (\n      orderListsStore.orderSuggestions?.filter(\n        item =>\n          item.urgency_level === 'low' &&\n          item.order_list_id === props.orderList.id\n      ).length || 0\n    );\n  });\n\n  const topPriorityItems = computed(() => {\n    if (!props.reorderAdvice) {\n      return [];\n    }\n\n    return [\n      ...props.reorderAdvice.items_by_urgency.critical,\n      ...props.reorderAdvice.items_by_urgency.high,\n      ...props.reorderAdvice.items_by_urgency.normal,\n    ].slice(0, 5);\n  });\n\n  const hasItemsToOrder = computed(() => {\n    return props.reorderAdvice?.total_items_to_order > 0;\n  });\n\n  const itemsToOrderCount = computed(() => {\n    return props.reorderAdvice?.total_items_to_order || 0;\n  });\n\n  const autoReorderProgress = computed(() => {\n    const autoReorderEnabled = (props.orderList as any).auto_reorder_enabled;\n    const reorderFrequency = (props.orderList as any).reorder_frequency_days;\n    if (!autoReorderEnabled || !reorderFrequency) {\n      return 0;\n    }\n\n    const lastCheck = (props.orderList as any).last_auto_check\n      ? new Date((props.orderList as any).last_auto_check)\n      : new Date();\n    const daysSinceLastCheck =\n      (Date.now() - lastCheck.getTime()) / (1000 * 60 * 60 * 24);\n\n    return Math.min(daysSinceLastCheck / reorderFrequency, 1);\n  });\n\n  const nextAutoCheck = computed(() => {\n    const autoReorderEnabled = (props.orderList as any).auto_reorder_enabled;\n    if (!autoReorderEnabled) {\n      return 'Niet gepland';\n    }\n\n    const lastCheck = (props.orderList as any).last_auto_check\n      ? new Date((props.orderList as any).last_auto_check)\n      : new Date();\n    const nextCheck = new Date(lastCheck);\n    nextCheck.setDate(\n      nextCheck.getDate() +\n        ((props.orderList as any).reorder_frequency_days || 14)\n    );\n\n    return nextCheck.toLocaleDateString('nl-NL');\n  });\n\n  const getListIcon = () => {\n    if ((props.orderList as any).auto_reorder_enabled) {\n      return 'schedule';\n    }\n    if (hasUrgentItems.value) {\n      return 'warning';\n    }\n    return 'list_alt';\n  };\n\n  const getIconColor = () => {\n    if (hasUrgentItems.value) {\n      return 'negative';\n    }\n    if ((props.orderList as any).auto_reorder_enabled) {\n      return 'info';\n    }\n    return 'primary';\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'ready':\n        return 'Klaar';\n      case 'draft':\n        return 'Concept';\n      case 'submitted':\n        return 'Verzonden';\n      case 'confirmed':\n        return 'Bevestigd';\n      case 'delivered':\n        return 'Geleverd';\n      case 'cancelled':\n        return 'Geannuleerd';\n      default:\n        return 'Onbekend';\n    }\n  };\n\n  // Methods\n  const getUrgencyIcon = (urgency: string) => {\n    switch (urgency) {\n      case 'critical':\n        return 'error';\n      case 'high':\n        return 'warning';\n      case 'normal':\n        return 'info';\n      case 'low':\n        return 'low_priority';\n      default:\n        return 'help';\n    }\n  };\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical':\n        return 'negative';\n      case 'high':\n        return 'warning';\n      case 'normal':\n        return 'primary';\n      case 'low':\n        return 'grey';\n      default:\n        return 'grey';\n    }\n  };\n\n  const openOrderList = () => {\n    router.push(`/order-lists/${props.orderList.id}`);\n  };\n\n  const createQuickOrder = async () => {\n    if (!props.reorderAdvice) {\n      return;\n    }\n\n    creatingOrder.value = true;\n    try {\n      const itemsToOrder = [\n        ...props.reorderAdvice.items_by_urgency.critical,\n        ...props.reorderAdvice.items_by_urgency.high,\n        ...props.reorderAdvice.items_by_urgency.normal,\n      ].filter(item => item.calculated_order_quantity > 0);\n\n      const orders = await orderListsStore.applyOrderSuggestions(\n        itemsToOrder.map(item => item.id)\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: `${orders.length} bestelling(en) aangemaakt!`,\n        caption: `${itemsToOrder.length} items geselecteerd`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij aanmaken bestelling',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const orderAllItems = async () => {\n    creatingOrder.value = true;\n    try {\n      const allItems =\n        orderListsStore.orderSuggestions?.filter(\n          item => item.order_list_id === props.orderList.id\n        ) || [];\n\n      const orders = await orderListsStore.applyOrderSuggestions(\n        allItems.map(item => item.id)\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: `${orders.length} bestelling(en) aangemaakt!`,\n        caption: `Alle ${allItems.length} items geselecteerd`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij aanmaken bestelling',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const orderCriticalItems = async () => {\n    if (!props.reorderAdvice?.items_by_urgency.critical.length) {\n      return;\n    }\n\n    creatingOrder.value = true;\n    try {\n      const orders = await orderListsStore.applyOrderSuggestions(\n        props.reorderAdvice.items_by_urgency.critical.map(item => item.id)\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: 'Kritieke items besteld!',\n        caption: `${props.reorderAdvice.items_by_urgency.critical.length} items`,\n        timeout: 3000,\n      });\n\n      emit('order-created', props.orderList);\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij bestellen kritieke items',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      creatingOrder.value = false;\n    }\n  };\n\n  const openStockManager = () => {\n    // Ga naar voorraad levels pagina met filter op deze bestellijst\n    router.push({\n      name: 'inventory-levels',\n      query: { orderListId: props.orderList.id },\n    });\n  };\n\n  const viewAnalytics = () => {\n    emit('analytics-requested', props.orderList);\n  };\n\n  const scheduleAutomation = () => {\n    settingsForm.value.auto_reorder_enabled = true;\n    showSettingsDialog.value = true;\n  };\n\n  const duplicateList = async () => {\n    try {\n      const newList = await orderListsStore.duplicateOrderList(\n        props.orderList.id\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: 'Lijst gedupliceerd!',\n        caption: `Nieuwe lijst: ${newList.name}`,\n        timeout: 3000,\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij dupliceren lijst',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    }\n  };\n\n  const exportList = () => {\n    // Implementation for exporting list\n    $q.notify({\n      type: 'info',\n      message: 'Export functie komt binnenkort',\n      timeout: 2000,\n    });\n  };\n\n  const editSettings = () => {\n    // Populate form with current values\n    const extendedOrderList = props.orderList as any;\n    settingsForm.value = {\n      name: props.orderList.name,\n      description: props.orderList.description || '',\n      list_type: extendedOrderList.list_type || 'reorder_list',\n      auto_reorder_enabled: extendedOrderList.auto_reorder_enabled || false,\n      reorder_frequency_days: extendedOrderList.reorder_frequency_days || 14,\n      preferred_order_day: extendedOrderList.preferred_order_day || null,\n      order_cutoff_time: extendedOrderList.order_cutoff_time || '',\n      min_order_value: extendedOrderList.min_order_value || 0,\n      tags: extendedOrderList.tags || [],\n    };\n\n    showSettingsDialog.value = true;\n  };\n\n  const saveSettings = async () => {\n    savingSettings.value = true;\n    try {\n      const updatedList = await orderListsStore.updateOrderList(\n        props.orderList.id,\n        settingsForm.value\n      );\n\n      $q.notify({\n        type: 'positive',\n        message: 'Instellingen opgeslagen!',\n        timeout: 2000,\n      });\n\n      emit('list-updated', updatedList);\n      showSettingsDialog.value = false;\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: 'Fout bij opslaan instellingen',\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      savingSettings.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    // Load order suggestions for this list if not already loaded\n    const authStore = useAuthStore();\n    if (authStore.clinicId) {\n      await orderListsStore.generateOrderSuggestions(authStore.clinicId);\n    }\n  });\n</script>\n\n<style scoped>\n  /* Order list card styles */\n  .modern-order-card {\n    background: white;\n    border-radius: 16px;\n    box-shadow: var(--shadow-md);\n    transition: all 0.3s ease;\n    overflow: hidden;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    border: 1px solid rgba(0, 0, 0, 0.06);\n  }\n\n  .modern-order-card:hover {\n    transform: translateY(-4px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Card Header */\n  .card-header {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 20px 20px 16px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.06);\n  }\n\n  .header-left {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n    flex: 1;\n  }\n\n  .list-icon {\n    width: 40px;\n    height: 40px;\n    border-radius: 10px;\n    background: rgba(25, 118, 210, 0.1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .list-info {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-title {\n    font-size: 16px;\n    font-weight: 600;\n    color: #1a1a1a;\n    margin: 0 0 4px 0;\n    line-height: 1.3;\n    word-break: break-word;\n  }\n\n  .list-subtitle {\n    font-size: 13px;\n    color: #666;\n    margin: 0;\n    line-height: 1.4;\n    word-break: break-word;\n  }\n\n  .header-right {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    flex-shrink: 0;\n  }\n\n  .status-badge {\n    font-size: 11px;\n    font-weight: 500;\n    padding: 4px 8px;\n    border-radius: 6px;\n  }\n\n  .menu-btn {\n    width: 32px;\n    height: 32px;\n    color: #666;\n  }\n\n  .menu-btn:hover {\n    background: rgba(0, 0, 0, 0.08);\n  }\n\n  /* Tags Section */\n  .tags-section {\n    padding: 0 20px 16px;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 6px;\n  }\n\n  .tag-chip {\n    font-size: 11px;\n    border-color: rgba(0, 0, 0, 0.12);\n    color: #666;\n  }\n\n  /* Card Content */\n  .card-content {\n    flex: 1;\n    padding: 16px 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n  }\n\n  /* Critical Alert */\n  .critical-alert {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px;\n    background: rgba(244, 67, 54, 0.08);\n    border: 1px solid rgba(244, 67, 54, 0.2);\n    border-radius: 8px;\n  }\n\n  .alert-icon {\n    flex-shrink: 0;\n  }\n\n  .alert-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    gap: 8px;\n  }\n\n  .alert-text {\n    font-size: 13px;\n    font-weight: 500;\n    color: #d32f2f;\n  }\n\n  .alert-btn {\n    font-size: 12px;\n    min-height: 28px;\n    padding: 0 12px;\n  }\n\n  /* Stats Grid */\n  .stats-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 12px;\n  }\n\n  .stat-item {\n    text-align: center;\n    padding: 12px 8px;\n    border-radius: 8px;\n    border: 1px solid;\n    transition: transform 0.2s ease;\n  }\n\n  .stat-item:hover {\n    transform: scale(1.02);\n  }\n\n  .stat-critical {\n    background: rgba(244, 67, 54, 0.08);\n    border-color: rgba(244, 67, 54, 0.2);\n  }\n\n  .stat-warning {\n    background: rgba(255, 152, 0, 0.08);\n    border-color: rgba(255, 152, 0, 0.2);\n  }\n\n  .stat-success {\n    background: rgba(76, 175, 80, 0.08);\n    border-color: rgba(76, 175, 80, 0.2);\n  }\n\n  .stat-info {\n    background: rgba(33, 150, 243, 0.08);\n    border-color: rgba(33, 150, 243, 0.2);\n  }\n\n  .stat-value {\n    font-size: 20px;\n    font-weight: 700;\n    line-height: 1;\n    margin-bottom: 4px;\n  }\n\n  .stat-critical .stat-value {\n    color: #d32f2f;\n  }\n  .stat-warning .stat-value {\n    color: #f57c00;\n  }\n  .stat-success .stat-value {\n    color: #388e3c;\n  }\n  .stat-info .stat-value {\n    color: #1976d2;\n  }\n\n  .stat-label {\n    font-size: 11px;\n    font-weight: 500;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    color: #666;\n  }\n\n  /* Quick Info */\n  .quick-info {\n    display: flex;\n    justify-content: space-between;\n    padding: 12px;\n    background: rgba(0, 0, 0, 0.02);\n    border-radius: 8px;\n    margin-top: auto;\n  }\n\n  .info-item {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 13px;\n    color: #666;\n  }\n\n  .info-icon {\n    color: #999;\n  }\n\n  /* Card Actions */\n  .card-actions {\n    padding: 16px 20px 20px;\n    border-top: 1px solid rgba(0, 0, 0, 0.06);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 12px;\n  }\n\n  .primary-actions {\n    display: flex;\n    gap: 8px;\n    flex: 1;\n  }\n\n  .action-btn {\n    flex: 1;\n    min-height: 36px;\n    font-size: 13px;\n    font-weight: 500;\n  }\n\n  .action-btn--primary {\n    background: linear-gradient(135deg, #1976d2, #1565c0);\n  }\n\n  .action-btn--secondary {\n    border-color: #1976d2;\n    color: #1976d2;\n  }\n\n  .secondary-actions {\n    display: flex;\n    gap: 4px;\n  }\n\n  .icon-btn {\n    width: 36px;\n    height: 36px;\n  }\n\n  .icon-btn:hover {\n    background: rgba(0, 0, 0, 0.08);\n  }\n\n  /* Actions Menu */\n  .actions-menu {\n    min-width: 160px;\n    border-radius: 8px;\n    overflow: hidden;\n  }\n\n  /* Auto Reorder Progress */\n  .auto-reorder-progress {\n    margin-top: -1px;\n    background: var(--q-surface);\n  }\n\n  /* Dark Mode Support */\n  .body--dark .modern-order-card {\n    background: #2d2d2d;\n    border-color: rgba(255, 255, 255, 0.12);\n  }\n\n  .body--dark .card-header {\n    border-bottom-color: rgba(255, 255, 255, 0.12);\n  }\n\n  .body--dark .list-title {\n    color: #fff;\n  }\n\n  .body--dark .list-subtitle {\n    color: #bbb;\n  }\n\n  .body--dark .quick-info {\n    background: rgba(255, 255, 255, 0.08);\n  }\n\n  .body--dark .card-actions {\n    border-top-color: rgba(255, 255, 255, 0.12);\n  }\n\n  /* Responsive Design */\n  @media (max-width: 600px) {\n    .card-header {\n      padding: 16px;\n    }\n\n    .card-content {\n      padding: 12px 16px;\n    }\n\n    .card-actions {\n      padding: 12px 16px 16px;\n      flex-direction: column;\n      gap: 8px;\n    }\n\n    .primary-actions {\n      width: 100%;\n    }\n\n    .secondary-actions {\n      justify-content: center;\n    }\n\n    .stats-grid {\n      grid-template-columns: 1fr 1fr;\n      gap: 8px;\n    }\n\n    .stat-item {\n      padding: 8px 6px;\n    }\n\n    .stat-value {\n      font-size: 18px;\n    }\n  }\n\n  /* Accessibility */\n  @media (prefers-reduced-motion: reduce) {\n    .modern-order-card,\n    .stat-item,\n    .icon-btn,\n    .menu-btn {\n      transition: none;\n    }\n\n    .modern-order-card:hover {\n      transform: none;\n    }\n\n    .stat-item:hover {\n      transform: none;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\orderLists\\SimpleOrderListCard.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click.stop\".",
        "line": 55,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 55,
        "endColumn": 27,
        "fix": { "range": [1655, 1709], "text": "icon=\"open_in_new\"\n        @click.stop=\"openOrderList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click.stop\".",
        "line": 56,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 24,
        "fix": {
          "range": [1655, 1733],
          "text": "label=\"Beheren\"\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click.stop\".",
        "line": 57,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 57,
        "endColumn": 24,
        "fix": {
          "range": [1655, 1757],
          "text": "color=\"primary\"\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click.stop\".",
        "line": 58,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 58,
        "endColumn": 16,
        "fix": {
          "range": [1655, 1773],
          "text": "outline\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click.stop\".",
        "line": 59,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 59,
        "endColumn": 16,
        "fix": {
          "range": [1655, 1789],
          "text": "no-caps\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\"\n        outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click.stop\".",
        "line": 60,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 60,
        "endColumn": 18,
        "fix": {
          "range": [1655, 1807],
          "text": "size=\"sm\"\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\"\n        outline\n        no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click.stop\".",
        "line": 61,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 61,
        "endColumn": 27,
        "fix": {
          "range": [1655, 1834],
          "text": "class=\"manage-btn\"\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\"\n        outline\n        no-caps\n        size=\"sm\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "<template>\n  <div class=\"simple-order-card\" @click=\"openOrderList\">\n    <!-- Card Header -->\n    <div class=\"card-header\">\n      <div class=\"header-left\">\n        <div class=\"list-icon\">\n          <q-icon\n            :name=\"getListIcon()\"\n            :color=\"getIconColor()\"\n            class=\"icon-size-lg\"\n          />\n        </div>\n        <div class=\"list-info\">\n          <h3 class=\"list-title\">{{ orderList.name }}</h3>\n          <p v-if=\"orderList.description\" class=\"list-subtitle\">\n            {{ orderList.description }}\n          </p>\n        </div>\n      </div>\n\n      <div class=\"header-right\">\n        <q-badge\n          :color=\"statusColor\"\n          :label=\"statusLabel\"\n          class=\"status-badge\"\n        />\n      </div>\n    </div>\n\n    <!-- Card Content -->\n    <div class=\"card-content\">\n      <!-- Critical Alert (only if critical items exist) -->\n      <div v-if=\"hasCriticalItems\" class=\"critical-alert\">\n        <q-icon name=\"warning\" color=\"negative\" class=\"icon-size-base\" />\n        <span class=\"alert-text\">{{ criticalItemsCount }} kritieke items</span>\n      </div>\n\n      <!-- Basic Info -->\n      <div class=\"basic-info\">\n        <div class=\"info-item\">\n          <q-icon name=\"inventory\" class=\"info-icon icon-size-sm\" />\n          <span>{{ orderList.total_items || 0 }} producten</span>\n        </div>\n        <div v-if=\"hasItemsToOrder\" class=\"info-item order-ready\">\n          <q-icon name=\"shopping_cart\" class=\"info-icon icon-size-sm\" />\n          <span>{{ itemsToOrderCount }} te bestellen</span>\n        </div>\n      </div>\n    </div>\n\n    <!-- Card Footer -->\n    <div class=\"card-footer\">\n      <q-btn\n        @click.stop=\"openOrderList\"\n        icon=\"open_in_new\"\n        label=\"Beheren\"\n        color=\"primary\"\n        outline\n        no-caps\n        size=\"sm\"\n        class=\"manage-btn\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useRouter } from 'vue-router';\n  import type { OrderList, OrderAdvice } from '@/types';\n\n  interface Props {\n    orderList: OrderList;\n    reorderAdvice?: OrderAdvice | null;\n  }\n\n  const props = defineProps<Props>();\n  const router = useRouter();\n\n  // Computed properties\n  const statusColor = computed(() => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'positive';\n      case 'draft':\n        return 'warning';\n      case 'submitted':\n        return 'info';\n      case 'confirmed':\n        return 'primary';\n      case 'delivered':\n        return 'positive';\n      case 'cancelled':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  });\n\n  const statusLabel = computed(() => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'Klaar';\n      case 'draft':\n        return 'Concept';\n      case 'submitted':\n        return 'Verstuurd';\n      case 'confirmed':\n        return 'Bevestigd';\n      case 'delivered':\n        return 'Geleverd';\n      case 'cancelled':\n        return 'Geannuleerd';\n      default:\n        return 'Onbekend';\n    }\n  });\n\n  const hasCriticalItems = computed(() => {\n    return props.reorderAdvice?.items_by_urgency?.critical?.length > 0;\n  });\n\n  const criticalItemsCount = computed(() => {\n    return props.reorderAdvice?.items_by_urgency?.critical?.length || 0;\n  });\n\n  const hasItemsToOrder = computed(() => {\n    return props.reorderAdvice?.total_items_to_order > 0;\n  });\n\n  const itemsToOrderCount = computed(() => {\n    return props.reorderAdvice?.total_items_to_order || 0;\n  });\n\n  // Methods\n  const getListIcon = () => {\n    switch (props.orderList.status) {\n      case 'ready':\n        return 'check_circle';\n      case 'draft':\n        return 'edit';\n      case 'submitted':\n        return 'send';\n      case 'confirmed':\n        return 'verified';\n      case 'delivered':\n        return 'local_shipping';\n      case 'cancelled':\n        return 'cancel';\n      default:\n        return 'list_alt';\n    }\n  };\n\n  const getIconColor = () => {\n    return statusColor.value;\n  };\n\n  const openOrderList = () => {\n    router.push(`/order-lists/${props.orderList.id}`);\n  };\n</script>\n\n<style scoped>\n  .simple-order-card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: var(--shadow-md);\n    transition: all 0.2s ease;\n    overflow: hidden;\n    border: 1px solid rgba(0, 0, 0, 0.04);\n    cursor: pointer;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .simple-order-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-lg);\n  }\n\n  /* Header */\n  .card-header {\n    display: flex;\n    align-items: flex-start;\n    justify-content: space-between;\n    padding: 16px 16px 12px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.04);\n  }\n\n  .header-left {\n    display: flex;\n    align-items: flex-start;\n    gap: 12px;\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-icon {\n    width: 36px;\n    height: 36px;\n    border-radius: 8px;\n    background: rgba(25, 118, 210, 0.08);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n  }\n\n  .list-info {\n    flex: 1;\n    min-width: 0;\n  }\n\n  .list-title {\n    font-size: 15px;\n    font-weight: 600;\n    color: #1a1a1a;\n    margin: 0 0 4px 0;\n    line-height: 1.3;\n    word-break: break-word;\n  }\n\n  .list-subtitle {\n    font-size: 12px;\n    color: #666;\n    margin: 0;\n    line-height: 1.4;\n    word-break: break-word;\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .header-right {\n    flex-shrink: 0;\n  }\n\n  .status-badge {\n    font-size: 10px;\n    font-weight: 500;\n    padding: 3px 6px;\n    border-radius: 4px;\n  }\n\n  /* Content */\n  .card-content {\n    flex: 1;\n    padding: 12px 16px;\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  .critical-alert {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 8px 12px;\n    background: rgba(244, 67, 54, 0.05);\n    border: 1px solid rgba(244, 67, 54, 0.1);\n    border-radius: 6px;\n  }\n\n  .alert-text {\n    font-size: 12px;\n    color: #d32f2f;\n    font-weight: 500;\n  }\n\n  .basic-info {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .info-item {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 12px;\n    color: #666;\n  }\n\n  .info-item.order-ready {\n    color: #1976d2;\n    font-weight: 500;\n  }\n\n  .info-icon {\n    color: #999;\n  }\n\n  .info-item.order-ready .info-icon {\n    color: #1976d2;\n  }\n\n  /* Footer */\n  .card-footer {\n    padding: 12px 16px;\n    border-top: 1px solid rgba(0, 0, 0, 0.04);\n    background: rgba(0, 0, 0, 0.01);\n  }\n\n  .manage-btn {\n    width: 100%;\n    border-radius: 6px;\n  }\n\n  /* Responsive */\n  @media (max-width: 600px) {\n    .card-header {\n      padding: 14px 14px 10px;\n    }\n\n    .card-content {\n      padding: 10px 14px;\n    }\n\n    .card-footer {\n      padding: 10px 14px;\n    }\n\n    .list-title {\n      font-size: 14px;\n    }\n\n    .list-subtitle {\n      font-size: 11px;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\DynamicPlatformWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1448, 1451], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1448, 1451], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2413, 2416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2413, 2416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\n  <BaseDashboardWidget\n    :title=\"widget.title\"\n    :loading=\"widget.loading || loading\"\n  >\n    <template v-if=\"hasActions\" #actions>\n      <q-btn\n        flat\n        round\n        dense\n        icon=\"refresh\"\n        size=\"sm\"\n        :loading=\"widget.loading || loading\"\n        @click=\"$emit('refresh', widget.id)\"\n      >\n        <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n      </q-btn>\n      <q-btn\n        flat\n        round\n        dense\n        icon=\"settings\"\n        size=\"sm\"\n        @click=\"$emit('configure', widget.id)\"\n      >\n        <q-tooltip>{{ $t('common.configure') }}</q-tooltip>\n      </q-btn>\n    </template>\n\n    <!-- Widget Content based on type -->\n    <component :is=\"widgetComponent\" :data=\"widget.data\" v-bind=\"widgetProps\" />\n  </BaseDashboardWidget>\n</template>\n\n<script setup lang=\"ts\">\n  import { computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { BaseDashboardWidget } from '@/components/cards';\n\n  // Import platform widget components\n  import MetricWidget from './widgets/MetricWidget.vue';\n  import ChartWidget from './widgets/ChartWidget.vue';\n  import ListWidget from './widgets/ListWidget.vue';\n  import SystemWidget from './widgets/SystemWidget.vue';\n  import TableWidget from './widgets/TableWidget.vue';\n\n  export interface PlatformWidget {\n    id: string;\n    title: string;\n    type: 'metric' | 'chart' | 'list' | 'table' | 'system';\n    data: Record<string, any>;\n    size: 'small' | 'medium' | 'large';\n    position: number;\n    visible: boolean;\n    loading?: boolean;\n    error?: string;\n  }\n\n  interface Props {\n    widget: PlatformWidget;\n    loading?: boolean;\n    showActions?: boolean;\n  }\n\n  const props = withDefaults(defineProps<Props>(), {\n    loading: false,\n    showActions: true,\n  });\n\n  const emit = defineEmits<{\n    refresh: [widgetId: string];\n    configure: [widgetId: string];\n  }>();\n\n  const { t } = useI18n();\n\n  // Computed properties\n  const widgetComponent = computed(() => {\n    switch (props.widget.type) {\n      case 'metric':\n        return MetricWidget;\n      case 'chart':\n        return ChartWidget;\n      case 'list':\n        return ListWidget;\n      case 'table':\n        return TableWidget;\n      case 'system':\n        return SystemWidget;\n      default:\n        return MetricWidget; // Fallback\n    }\n  });\n\n  const widgetProps = computed(() => {\n    const baseProps: Record<string, any> = {};\n\n    // Add any specific props based on widget type\n    if (props.widget.type === 'chart') {\n      // Platform charts might have different requirements\n      baseProps.chartType = 'line'; // Default for platform\n    }\n\n    return baseProps;\n  });\n\n  const hasActions = computed(() => {\n    return props.showActions;\n  });\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\ChartWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2183, 2186], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2183, 2186], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2648, 2651], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2648, 2651], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Chart.js will be rendered here -->\r\n    <canvas ref=\"chartCanvas\" class=\"chart-canvas\"></canvas>\r\n\r\n    <!-- Fallback for when Chart.js is not available -->\r\n    <div v-if=\"!chartReady\" class=\"chart-fallback\">\r\n      <q-icon name=\"bar_chart\" size=\"4em\" class=\"text-grey-4 q-mb-md\" />\r\n      <div class=\"text-subtitle2 text-grey-6\">\r\n        {{ $t('platform.chart.loading') }}\r\n      </div>\r\n\r\n      <!-- Simple data display -->\r\n      <div v-if=\"data.labels && data.data\" class=\"simple-chart q-mt-md\">\r\n        <div v-for=\"(value, index) in data.data\" :key=\"index\" class=\"chart-bar\">\r\n          <div class=\"bar-label\">{{ data.labels[index] }}</div>\r\n          <div class=\"bar-container\">\r\n            <div\r\n              class=\"bar-fill\"\r\n              :style=\"{ width: `${(value / maxValue) * 100}%` }\"\r\n            ></div>\r\n            <span class=\"bar-value\">{{ value }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onUnmounted, nextTick } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n  import ChartCanvas from '@/components/charts/ChartCanvas.vue';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: {\r\n      chart_type?: string;\r\n      labels?: string[];\r\n      data?: number[];\r\n      datasets?: Array<{\r\n        label: string;\r\n        data: number[];\r\n        color: string;\r\n      }>;\r\n      title?: string;\r\n      total?: number;\r\n    };\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Reactive state\r\n  const chartReady = ref(true);\r\n\r\n  // Computed\r\n  const maxValue = computed(() => {\r\n    if (props.data.data) {\r\n      return Math.max(...props.data.data);\r\n    }\r\n    return 100;\r\n  });\r\n\r\n  // Methods\r\n  function getChartConfig() {\r\n    const {\r\n      chart_type = 'bar',\r\n      labels = [],\r\n      data = [],\r\n      datasets = [],\r\n    } = props.data;\r\n\r\n    // If datasets are provided, use them\r\n    if (datasets.length > 0) {\r\n      return {\r\n        type: chart_type as any,\r\n        data: {\r\n          labels,\r\n          datasets: datasets.map(dataset => ({\r\n            label: dataset.label,\r\n            data: dataset.data,\r\n            backgroundColor: dataset.color,\r\n            borderColor: dataset.color,\r\n            borderWidth: 2,\r\n            fill: false,\r\n          })),\r\n        },\r\n        options: getChartOptions(),\r\n      };\r\n    }\r\n\r\n    // Otherwise create a simple dataset\r\n    return {\r\n      type: chart_type as any,\r\n      data: {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: props.data.title || 'Data',\r\n            data,\r\n            backgroundColor: 'rgba(33, 150, 243, 0.6)',\r\n            borderColor: 'rgba(33, 150, 243, 1)',\r\n            borderWidth: 2,\r\n          },\r\n        ],\r\n      },\r\n      options: getChartOptions(),\r\n    };\r\n  }\r\n\r\n  function getChartOptions() {\r\n    return {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          display: true,\r\n          position: 'bottom' as const,\r\n        },\r\n      },\r\n      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)',\r\n          },\r\n        },\r\n        x: {\r\n          grid: {\r\n            color: 'rgba(0, 0, 0, 0.1)',\r\n          },\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  // Lifecycle (no-op, ChartCanvas handles rendering)\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform chart widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  /* ChartCanvas handles rendering and fallback */\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    /* no-op */\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\ListWidget.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"avatar\".",
        "line": 5,
        "column": 32,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 65,
        "fix": { "range": [187, 227], "text": "v-if=\"item.icon || item.severity\" avatar" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"caption\".",
        "line": 17,
        "column": 33,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 71,
        "fix": { "range": [615, 661], "text": "v-if=\"item.subtitle || item.timestamp\" caption" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"side\".",
        "line": 22,
        "column": 30,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 61,
        "fix": { "range": [812, 848], "text": "v-if=\"item.value || item.count\" side" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1660, 1663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1660, 1663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1683, 1686], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1683, 1686], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <q-list separator>\r\n      <q-item v-for=\"(item, index) in listItems\" :key=\"index\" class=\"list-item\">\r\n        <q-item-section avatar v-if=\"item.icon || item.severity\">\r\n          <q-icon\r\n            :name=\"item.icon || getSeverityIcon(item.severity)\"\r\n            :color=\"item.color || getSeverityColor(item.severity)\"\r\n            size=\"sm\"\r\n          />\r\n        </q-item-section>\r\n\r\n        <q-item-section>\r\n          <q-item-label>{{\r\n            item.title || item.description || item.message\r\n          }}</q-item-label>\r\n          <q-item-label caption v-if=\"item.subtitle || item.timestamp\">\r\n            {{ item.subtitle || formatTimestamp(item.timestamp) }}\r\n          </q-item-label>\r\n        </q-item-section>\r\n\r\n        <q-item-section side v-if=\"item.value || item.count\">\r\n          <q-chip\r\n            :color=\"item.chipColor || 'primary'\"\r\n            text-color=\"white\"\r\n            size=\"sm\"\r\n          >\r\n            {{ item.value || item.count }}\r\n          </q-chip>\r\n        </q-item-section>\r\n      </q-item>\r\n\r\n      <q-item v-if=\"!listItems.length\">\r\n        <q-item-section class=\"text-center text-grey-6\">\r\n          <q-icon name=\"info\" size=\"2em\" class=\"q-mb-sm\" />\r\n          <div>{{ $t('common.noData') }}</div>\r\n        </q-item-section>\r\n      </q-item>\r\n    </q-list>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: {\r\n      items?: any[];\r\n      alerts?: any[];\r\n    };\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Computed\r\n  const listItems = computed(() => {\r\n    return props.data.items || props.data.alerts || [];\r\n  });\r\n\r\n  // Methods\r\n  function getSeverityIcon(severity?: string): string {\r\n    switch (severity) {\r\n      case 'error':\r\n      case 'high':\r\n        return 'error';\r\n      case 'warning':\r\n      case 'medium':\r\n        return 'warning';\r\n      case 'info':\r\n      case 'low':\r\n        return 'info';\r\n      case 'success':\r\n        return 'check_circle';\r\n      default:\r\n        return 'circle';\r\n    }\r\n  }\r\n\r\n  function getSeverityColor(severity?: string): string {\r\n    switch (severity) {\r\n      case 'error':\r\n      case 'high':\r\n        return 'negative';\r\n      case 'warning':\r\n      case 'medium':\r\n        return 'warning';\r\n      case 'info':\r\n      case 'low':\r\n        return 'info';\r\n      case 'success':\r\n        return 'positive';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  }\r\n\r\n  function formatTimestamp(timestamp?: string): string {\r\n    if (!timestamp) return '';\r\n\r\n    const date = new Date(timestamp);\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(date);\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform list widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  .list-item {\r\n    border-radius: 8px;\r\n    margin-bottom: 4px;\r\n    transition: background-color 0.2s ease;\r\n\r\n    &:hover {\r\n      background-color: rgba(var(--q-primary-rgb), 0.05);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\MetricWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 69,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 69,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2080, 2083], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2080, 2083], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3868, 3871], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3868, 3871], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 183,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 183,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5245, 5248], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5245, 5248], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 203,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 203,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5709, 5712], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5709, 5712], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Single Value Metric -->\r\n    <template v-if=\"isSingleValue\">\r\n      <div class=\"metric-primary\">\r\n        <div class=\"metric-value\">{{ formatValue(primaryValue) }}</div>\r\n        <div class=\"metric-label\">{{ primaryLabel }}</div>\r\n        <div v-if=\"trend\" class=\"metric-trend\" :class=\"trendClass\">\r\n          <q-icon :name=\"trendIcon\" class=\"q-mr-xs\" />\r\n          {{ trend }}\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Multi-Value Metrics -->\r\n    <template v-else>\r\n      <div class=\"metrics-grid\">\r\n        <div\r\n          v-for=\"(value, key) in filteredData\"\r\n          :key=\"key\"\r\n          class=\"metric-item\"\r\n        >\r\n          <div class=\"metric-value\">{{ formatValue(value) }}</div>\r\n          <div class=\"metric-label\">{{ formatLabel(key) }}</div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Progress Bar (if percentage data) -->\r\n    <template v-if=\"hasPercentage\">\r\n      <div class=\"metric-progress q-mt-md\">\r\n        <q-linear-progress\r\n          :value=\"percentageValue / 100\"\r\n          :color=\"progressColor\"\r\n          size=\"8px\"\r\n          rounded\r\n        />\r\n        <div class=\"text-caption text-center q-mt-xs\">\r\n          {{ Math.round(percentageValue) }}% {{ progressLabel }}\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Additional Info -->\r\n    <template v-if=\"additionalInfo\">\r\n      <div class=\"metric-info q-mt-md\">\r\n        <div\r\n          v-for=\"(info, key) in additionalInfo\"\r\n          :key=\"key\"\r\n          class=\"info-item text-caption\"\r\n        >\r\n          <span class=\"info-label\">{{ formatLabel(key) }}:</span>\r\n          <span class=\"info-value q-ml-xs\">{{ formatValue(info) }}</span>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: Record<string, any>;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Computed properties\r\n  const isSingleValue = computed(() => {\r\n    const keys = Object.keys(props.data);\r\n    return (\r\n      keys.length === 1 ||\r\n      keys.includes('value') ||\r\n      keys.includes('count') ||\r\n      keys.includes('total')\r\n    );\r\n  });\r\n\r\n  const primaryValue = computed(() => {\r\n    if (props.data.value !== undefined) return props.data.value;\r\n    if (props.data.count !== undefined) return props.data.count;\r\n    if (props.data.total !== undefined) return props.data.total;\r\n    if (props.data.total_value !== undefined) return props.data.total_value;\r\n\r\n    // Return first numeric value\r\n    const firstNumericKey = Object.keys(props.data).find(\r\n      key => typeof props.data[key] === 'number'\r\n    );\r\n    return firstNumericKey ? props.data[firstNumericKey] : 0;\r\n  });\r\n\r\n  const primaryLabel = computed(() => {\r\n    if (props.data.label) return props.data.label;\r\n    if (props.data.title) return props.data.title;\r\n    return '';\r\n  });\r\n\r\n  const trend = computed(() => {\r\n    return props.data.trend;\r\n  });\r\n\r\n  const trendClass = computed(() => {\r\n    if (!trend.value) return '';\r\n\r\n    if (trend.value === 'up' || trend.value === 'increasing')\r\n      return 'trend-positive';\r\n    if (trend.value === 'down' || trend.value === 'decreasing')\r\n      return 'trend-negative';\r\n    return 'trend-neutral';\r\n  });\r\n\r\n  const trendIcon = computed(() => {\r\n    if (!trend.value) return '';\r\n\r\n    if (trend.value === 'up' || trend.value === 'increasing')\r\n      return 'trending_up';\r\n    if (trend.value === 'down' || trend.value === 'decreasing')\r\n      return 'trending_down';\r\n    return 'trending_flat';\r\n  });\r\n\r\n  const filteredData = computed(() => {\r\n    const filtered: Record<string, any> = {};\r\n\r\n    // Exclude metadata keys\r\n    const excludeKeys = [\r\n      'label',\r\n      'title',\r\n      'trend',\r\n      'status',\r\n      'last_check',\r\n      'error',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (!excludeKeys.includes(key) && typeof props.data[key] === 'number') {\r\n        filtered[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  });\r\n\r\n  const hasPercentage = computed(() => {\r\n    return (\r\n      props.data.compliance_rate !== undefined ||\r\n      props.data.health_percentage !== undefined ||\r\n      props.data.percentage !== undefined\r\n    );\r\n  });\r\n\r\n  const percentageValue = computed(() => {\r\n    return (\r\n      props.data.compliance_rate ||\r\n      props.data.health_percentage ||\r\n      props.data.percentage ||\r\n      0\r\n    );\r\n  });\r\n\r\n  const progressColor = computed(() => {\r\n    const value = percentageValue.value;\r\n    if (value >= 90) return 'positive';\r\n    if (value >= 70) return 'warning';\r\n    return 'negative';\r\n  });\r\n\r\n  const progressLabel = computed(() => {\r\n    if (props.data.compliance_rate !== undefined)\r\n      return t('platform.metrics.compliance');\r\n    if (props.data.health_percentage !== undefined)\r\n      return t('platform.metrics.health');\r\n    return t('platform.metrics.progress');\r\n  });\r\n\r\n  const additionalInfo = computed(() => {\r\n    const info: Record<string, any> = {};\r\n\r\n    // Include text/status information\r\n    const includeKeys = [\r\n      'status',\r\n      'last_check',\r\n      'response_time_ms',\r\n      'environment',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (includeKeys.includes(key) && props.data[key] !== undefined) {\r\n        info[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return Object.keys(info).length > 0 ? info : null;\r\n  });\r\n\r\n  // Methods\r\n  function formatValue(value: any): string {\r\n    if (typeof value === 'number') {\r\n      if (value >= 1000000) {\r\n        return (value / 1000000).toFixed(1) + 'M';\r\n      } else if (value >= 1000) {\r\n        return (value / 1000).toFixed(1) + 'K';\r\n      }\r\n      return value.toLocaleString();\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  function formatLabel(key: string): string {\r\n    // Convert snake_case to readable labels\r\n    const formatted = key\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n\r\n    // Try to get translation first\r\n    const translationKey = `platform.metrics.${key}`;\r\n    const translated = t(translationKey);\r\n\r\n    return translated !== translationKey ? translated : formatted;\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform metric widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  .metric-primary {\r\n    text-align: center;\r\n\r\n    .metric-value {\r\n      font-size: 2.5rem;\r\n      font-weight: bold;\r\n      color: var(--q-primary);\r\n      line-height: 1;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .metric-label {\r\n      font-size: 1rem;\r\n      color: var(--q-dark);\r\n      font-weight: 500;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .metric-trend {\r\n      font-size: 0.875rem;\r\n      font-weight: 500;\r\n\r\n      &.trend-positive {\r\n        color: var(--q-positive);\r\n      }\r\n\r\n      &.trend-negative {\r\n        color: var(--q-negative);\r\n      }\r\n\r\n      &.trend-neutral {\r\n        color: var(--q-dark);\r\n      }\r\n    }\r\n  }\r\n\r\n  .metrics-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\r\n    gap: 1rem;\r\n\r\n    .metric-item {\r\n      text-align: center;\r\n      padding: 0.5rem;\r\n      border-radius: 8px;\r\n      background: rgba(var(--q-primary-rgb), 0.05);\r\n\r\n      .metric-value {\r\n        font-size: 1.5rem;\r\n        font-weight: bold;\r\n        color: var(--q-primary);\r\n        line-height: 1.2;\r\n      }\r\n\r\n      .metric-label {\r\n        font-size: 0.75rem;\r\n        color: var(--q-dark);\r\n        margin-top: 0.25rem;\r\n        line-height: 1.2;\r\n      }\r\n    }\r\n  }\r\n\r\n  .metric-progress {\r\n    .q-linear-progress {\r\n      border-radius: 4px;\r\n    }\r\n  }\r\n\r\n  .metric-info {\r\n    .info-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      padding: 0.25rem 0;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n\r\n      .info-label {\r\n        color: var(--q-dark);\r\n        opacity: 0.7;\r\n      }\r\n\r\n      .info-value {\r\n        font-weight: 500;\r\n        color: var(--q-dark);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    .metric-primary .metric-label,\r\n    .metrics-grid .metric-item .metric-label,\r\n    .metric-info .info-item .info-label,\r\n    .metric-info .info-item .info-value {\r\n      color: var(--q-dark-page);\r\n    }\r\n\r\n    .metrics-grid .metric-item {\r\n      background: rgba(255, 255, 255, 0.05);\r\n    }\r\n\r\n    .metric-info .info-item {\r\n      border-bottom-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 480px) {\r\n    .metric-primary .metric-value {\r\n      font-size: 2rem;\r\n    }\r\n\r\n    .metrics-grid {\r\n      grid-template-columns: repeat(2, 1fr);\r\n      gap: 0.5rem;\r\n\r\n      .metric-item {\r\n        padding: 0.25rem;\r\n\r\n        .metric-value {\r\n          font-size: 1.25rem;\r\n        }\r\n\r\n        .metric-label {\r\n          font-size: 0.7rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\SystemWidget.vue",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7852, 7855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7852, 7855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9402, 9405], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9402, 9405], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 354,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 354,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10681, 10684], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10681, 10684], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <!-- Version Information -->\r\n    <template v-if=\"isVersionInfo\">\r\n      <div class=\"version-section\">\r\n        <div class=\"version-header\">\r\n          <q-icon name=\"info\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.versionInfo') }}</span>\r\n        </div>\r\n\r\n        <div class=\"version-details\">\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.appVersion')\r\n            }}</span>\r\n            <q-chip color=\"primary\" text-color=\"white\" class=\"version-value\">\r\n              v{{ data.app_version }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.buildNumber')\r\n            }}</span>\r\n            <span class=\"version-value\">#{{ data.build_number }}</span>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.environment')\r\n            }}</span>\r\n            <q-chip\r\n              :color=\"environmentColor\"\r\n              text-color=\"white\"\r\n              class=\"version-value\"\r\n            >\r\n              {{ data.environment }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"version-item\">\r\n            <span class=\"version-label\">{{\r\n              $t('platform.system.lastDeployment')\r\n            }}</span>\r\n            <span class=\"version-value\">{{\r\n              formatDateTime(data.last_deployment)\r\n            }}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Dependencies -->\r\n        <template v-if=\"data.dependencies\">\r\n          <q-separator class=\"q-my-md\" />\r\n          <div class=\"dependencies-section\">\r\n            <div class=\"text-subtitle2 q-mb-sm\">\r\n              <q-icon name=\"extension\" class=\"q-mr-xs\" />\r\n              {{ $t('platform.system.dependencies') }}\r\n            </div>\r\n            <div class=\"dependencies-grid\">\r\n              <div\r\n                v-for=\"(version, name) in data.dependencies\"\r\n                :key=\"name\"\r\n                class=\"dependency-item\"\r\n              >\r\n                <span class=\"dependency-name\">{{ name }}</span>\r\n                <span class=\"dependency-version\">{{ version }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- System Health -->\r\n    <template v-else-if=\"isSystemHealth\">\r\n      <div class=\"health-section\">\r\n        <div class=\"health-header\">\r\n          <q-icon name=\"health_and_safety\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.healthStatus') }}</span>\r\n        </div>\r\n\r\n        <div class=\"health-metrics\">\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.overallStatus') }}\r\n            </div>\r\n            <q-chip\r\n              :color=\"healthStatusColor\"\r\n              text-color=\"white\"\r\n              :icon=\"healthStatusIcon\"\r\n              class=\"health-value\"\r\n            >\r\n              {{ $t(`platform.system.status.${data.overall_status}`) }}\r\n            </q-chip>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.errors24h') }}\r\n            </div>\r\n            <div class=\"health-value text-h6\">\r\n              {{ data.error_count_24h || 0 }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.activePractices') }}\r\n            </div>\r\n            <div class=\"health-value text-h6\">\r\n              {{ data.active_practices_1h || 0 }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"health-item\">\r\n            <div class=\"health-label\">\r\n              {{ $t('platform.system.databaseStatus') }}\r\n            </div>\r\n            <q-chip\r\n              :color=\"\r\n                data.database_status === 'connected' ? 'positive' : 'negative'\r\n              \"\r\n              text-color=\"white\"\r\n              :icon=\"\r\n                data.database_status === 'connected' ? 'check_circle' : 'error'\r\n              \"\r\n              class=\"health-value\"\r\n            >\r\n              {{ $t(`platform.system.database.${data.database_status}`) }}\r\n            </q-chip>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"health-footer\">\r\n          <div class=\"text-caption text-grey-6\">\r\n            {{ $t('platform.system.lastCheck') }}:\r\n            {{ formatDateTime(data.last_check) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Database Status -->\r\n    <template v-else-if=\"isDatabaseStatus\">\r\n      <div class=\"database-section\">\r\n        <div class=\"database-header\">\r\n          <q-icon name=\"storage\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{\r\n            $t('platform.system.databaseStatus')\r\n          }}</span>\r\n        </div>\r\n\r\n        <div class=\"database-metrics\">\r\n          <div class=\"database-item\">\r\n            <q-icon\r\n              :name=\"data.status === 'connected' ? 'check_circle' : 'error'\"\r\n              :color=\"data.status === 'connected' ? 'positive' : 'negative'\"\r\n              size=\"sm\"\r\n              class=\"q-mr-sm\"\r\n            />\r\n            <span>{{ $t(`platform.system.database.${data.status}`) }}</span>\r\n          </div>\r\n\r\n          <template v-if=\"data.response_time_ms\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"speed\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.responseTime') }}:\r\n                {{ data.response_time_ms }}ms</span\r\n              >\r\n            </div>\r\n          </template>\r\n\r\n          <template v-if=\"data.total_tables\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"table_chart\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.totalTables') }}:\r\n                {{ data.total_tables }}</span\r\n              >\r\n            </div>\r\n          </template>\r\n\r\n          <template v-if=\"data.largest_table\">\r\n            <div class=\"database-item\">\r\n              <q-icon name=\"dataset\" size=\"sm\" class=\"q-mr-sm\" />\r\n              <span\r\n                >{{ $t('platform.system.largestTable') }}:\r\n                {{ data.largest_table }}</span\r\n              >\r\n            </div>\r\n          </template>\r\n        </div>\r\n\r\n        <template v-if=\"data.error\">\r\n          <q-separator class=\"q-my-md\" />\r\n          <div class=\"database-error\">\r\n            <q-icon name=\"error_outline\" color=\"negative\" class=\"q-mr-sm\" />\r\n            <span class=\"text-negative\">{{ data.error }}</span>\r\n          </div>\r\n        </template>\r\n      </div>\r\n    </template>\r\n\r\n    <!-- Generic System Information -->\r\n    <template v-else>\r\n      <div class=\"system-info\">\r\n        <div class=\"system-header\">\r\n          <q-icon name=\"computer\" class=\"q-mr-sm\" />\r\n          <span class=\"text-h6\">{{ $t('platform.system.information') }}</span>\r\n        </div>\r\n\r\n        <div class=\"system-details\">\r\n          <div\r\n            v-for=\"(value, key) in filteredData\"\r\n            :key=\"key\"\r\n            class=\"system-item\"\r\n          >\r\n            <span class=\"system-label\">{{ formatLabel(key) }}</span>\r\n            <span class=\"system-value\">{{ formatValue(value) }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: Record<string, any>;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n\r\n  // Computed properties\r\n  const isVersionInfo = computed(() => {\r\n    return (\r\n      props.data.app_version !== undefined ||\r\n      props.data.build_number !== undefined\r\n    );\r\n  });\r\n\r\n  const isSystemHealth = computed(() => {\r\n    return (\r\n      props.data.overall_status !== undefined ||\r\n      props.data.error_count_24h !== undefined\r\n    );\r\n  });\r\n\r\n  const isDatabaseStatus = computed(() => {\r\n    return (\r\n      props.data.status !== undefined &&\r\n      props.data.response_time_ms !== undefined\r\n    );\r\n  });\r\n\r\n  const environmentColor = computed(() => {\r\n    switch (props.data.environment) {\r\n      case 'production':\r\n        return 'negative';\r\n      case 'staging':\r\n        return 'warning';\r\n      case 'development':\r\n        return 'info';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const healthStatusColor = computed(() => {\r\n    switch (props.data.overall_status) {\r\n      case 'healthy':\r\n        return 'positive';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'critical':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const healthStatusIcon = computed(() => {\r\n    switch (props.data.overall_status) {\r\n      case 'healthy':\r\n        return 'check_circle';\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'critical':\r\n        return 'error';\r\n      default:\r\n        return 'help';\r\n    }\r\n  });\r\n\r\n  const filteredData = computed(() => {\r\n    const filtered: Record<string, any> = {};\r\n\r\n    // Exclude complex objects and metadata\r\n    const excludeKeys = [\r\n      'dependencies',\r\n      'last_check',\r\n      'overall_status',\r\n      'error_count_24h',\r\n    ];\r\n\r\n    Object.keys(props.data).forEach(key => {\r\n      if (\r\n        !excludeKeys.includes(key) &&\r\n        typeof props.data[key] !== 'object' &&\r\n        props.data[key] !== undefined\r\n      ) {\r\n        filtered[key] = props.data[key];\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Methods\r\n  function formatDateTime(dateString?: string): string {\r\n    if (!dateString) return t('common.unknown');\r\n\r\n    const date = new Date(dateString);\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(date);\r\n  }\r\n\r\n  function formatLabel(key: string): string {\r\n    // Convert snake_case to readable labels\r\n    const formatted = key\r\n      .replace(/_/g, ' ')\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n\r\n    // Try to get translation first\r\n    const translationKey = `platform.system.${key}`;\r\n    const translated = t(translationKey);\r\n\r\n    return translated !== translationKey ? translated : formatted;\r\n  }\r\n\r\n  function formatValue(value: any): string {\r\n    if (typeof value === 'boolean') {\r\n      return value ? t('common.yes') : t('common.no');\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value.toLocaleString();\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform system widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  // Version Info Styles\r\n  .version-section {\r\n    .version-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .version-details {\r\n      .version-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .version-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .version-value {\r\n          font-family: var(--font-mono);\r\n        }\r\n      }\r\n    }\r\n\r\n    .dependencies-section {\r\n      .dependencies-grid {\r\n        display: grid;\r\n        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n        gap: 0.5rem;\r\n\r\n        .dependency-item {\r\n          display: flex;\r\n          justify-content: space-between;\r\n          align-items: center;\r\n          padding: 0.5rem;\r\n          background: rgba(var(--q-primary-rgb), 0.05);\r\n          border-radius: 6px;\r\n          border-left: 3px solid var(--q-primary);\r\n\r\n          .dependency-name {\r\n            font-weight: 500;\r\n            color: var(--q-dark);\r\n          }\r\n\r\n          .dependency-version {\r\n            font-family: var(--font-mono);\r\n            font-size: 0.875rem;\r\n            color: var(--q-primary);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Health Status Styles\r\n  .health-section {\r\n    .health-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .health-metrics {\r\n      .health-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.75rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .health-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .health-value {\r\n          font-weight: 600;\r\n        }\r\n      }\r\n    }\r\n\r\n    .health-footer {\r\n      margin-top: 1rem;\r\n      padding-top: 1rem;\r\n      border-top: 1px solid rgba(0, 0, 0, 0.05);\r\n    }\r\n  }\r\n\r\n  // Database Status Styles\r\n  .database-section {\r\n    .database-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .database-metrics {\r\n      .database-item {\r\n        display: flex;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n      }\r\n    }\r\n\r\n    .database-error {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 0.75rem;\r\n      background: rgba(244, 67, 54, 0.05);\r\n      border-radius: 6px;\r\n      border-left: 3px solid var(--q-negative);\r\n    }\r\n  }\r\n\r\n  // System Info Styles\r\n  .system-info {\r\n    .system-header {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: 1rem;\r\n      color: var(--q-primary);\r\n    }\r\n\r\n    .system-details {\r\n      .system-item {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        padding: 0.5rem 0;\r\n        border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n\r\n        .system-label {\r\n          font-weight: 500;\r\n          color: var(--q-dark);\r\n        }\r\n\r\n        .system-value {\r\n          font-family: var(--font-mono);\r\n          color: var(--q-primary);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  .body--dark {\r\n    .version-details .version-item,\r\n    .health-metrics .health-item,\r\n    .database-metrics .database-item,\r\n    .system-details .system-item {\r\n      border-bottom-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    .health-footer {\r\n      border-top-color: rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    .dependencies-grid .dependency-item {\r\n      background: rgba(255, 255, 255, 0.05);\r\n    }\r\n\r\n    .database-error {\r\n      background: rgba(244, 67, 54, 0.1);\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 480px) {\r\n    .dependencies-grid {\r\n      grid-template-columns: 1fr;\r\n    }\r\n\r\n    .version-item,\r\n    .health-item,\r\n    .database-item,\r\n    .system-item {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      gap: 0.25rem;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\platform\\widgets\\TableWidget.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#no-data' instead of 'v-slot:no-data'.",
        "line": 12,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 12,
        "endColumn": 31,
        "fix": { "range": [274, 288], "text": "#no-data" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [903, 906], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [903, 906], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [929, 932], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [929, 932], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1419, 1422], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1419, 1422], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\r\n  <BaseDashboardWidget :hide-header=\"true\">\r\n    <q-table\r\n      :rows=\"data.rows || []\"\r\n      :columns=\"columns\"\r\n      row-key=\"index\"\r\n      flat\r\n      :pagination=\"pagination\"\r\n      :loading=\"loading\"\r\n      class=\"platform-table\"\r\n    >\r\n      <template v-slot:no-data>\r\n        <div class=\"full-width row flex-center q-gutter-sm\" :class=\"error ? 'text-negative' : 'text-grey-6'\">\r\n          <q-icon size=\"2em\" :name=\"error ? 'error' : 'info'\" />\r\n          <span>{{ error || $t('common.noData') }}</span>\r\n        </div>\r\n      </template>\r\n    </q-table>\r\n  </BaseDashboardWidget>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed, ref } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseDashboardWidget } from '@/components/cards';\r\n\r\n  const { t } = useI18n();\r\n\r\n  // Props\r\n  interface Props {\r\n    data: {\r\n      headers?: string[];\r\n      rows?: any[][];\r\n      columns?: any[];\r\n      error?: string;\r\n    };\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n  const error = computed(() => props.data?.error || '');\r\n\r\n  // Reactive state\r\n  const loading = ref(false);\r\n\r\n  // Computed\r\n  const columns = computed(() => {\r\n    if (props.data.columns) {\r\n      return props.data.columns;\r\n    }\r\n\r\n    if (props.data.headers) {\r\n      return props.data.headers.map((header, index) => ({\r\n        name: `col_${index}`,\r\n        label: header,\r\n        field: (row: any[]) => row[index],\r\n        align: 'left' as const,\r\n        sortable: true,\r\n      }));\r\n    }\r\n\r\n    return [];\r\n  });\r\n\r\n  const pagination = ref({\r\n    rowsPerPage: 10,\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Platform table widget content styling (wrapper now handled by BaseDashboardWidget)\r\n\r\n  .platform-table {\r\n    /* Table styling now handled by global medical-table class */\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\AdvancedSearchDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 372,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 372,
        "endColumn": 37,
        "fix": { "range": [11884, 11944], "text": ":disable=\"!hasValidCriteria\"\r\n        @click=\"performSearch\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 373,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 373,
        "endColumn": 22,
        "fix": {
          "range": [11884, 11967],
          "text": "icon=\"search\"\r\n        @click=\"performSearch\"\r\n        :disable=\"!hasValidCriteria\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 374,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 374,
        "endColumn": 19,
        "fix": {
          "range": [11884, 11987],
          "text": "unelevated\r\n        @click=\"performSearch\"\r\n        :disable=\"!hasValidCriteria\"\r\n        icon=\"search\""
        }
      },
      {
        "ruleId": "vue/require-explicit-emits",
        "severity": 1,
        "message": "The \"preview-table\" event has been triggered but not declared on `defineEmits`.",
        "line": 381,
        "column": 23,
        "nodeType": null,
        "messageId": "missing",
        "endLine": 381,
        "endColumn": 38
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 382,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 382,
        "endColumn": 26,
        "fix": { "range": [12183, 12241], "text": "icon=\"table_view\"\r\n        @click=\"$emit('preview-table')\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 420,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 420,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13435, 13438], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13435, 13438], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "<template>\r\n  <BaseDialog\r\n    v-model=\"isOpen\"\r\n    :title=\"$t('productsPage.advancedSearch.title')\"\r\n    icon=\"search\"\r\n    size=\"lg\"\r\n    variant=\"elegant\"\r\n    header-variant=\"solid\"\r\n  >\r\n    <div class=\"advanced-search-content\">\r\n      <!-- Basic Search -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          {{ $t('productsPage.advancedSearch.basicSearch') }}\r\n        </h6>\r\n        <div class=\"search-row\">\r\n          <q-input\r\n            v-model=\"searchCriteria.search\"\r\n            :placeholder=\"$t('productsPage.advancedSearch.searchPlaceholder')\"\r\n            outlined\r\n            clearable\r\n            class=\"search-input full-width\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"search\" />\r\n            </template>\r\n          </q-input>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- GS1 Search -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          <q-icon name=\"qr_code_2\" class=\"q-mr-xs\" />\r\n          {{ $t('productsPage.advancedSearch.gs1Search') }}\r\n        </h6>\r\n        <div class=\"search-grid\">\r\n          <q-input\r\n            v-model=\"searchCriteria.gtin\"\r\n            :placeholder=\"$t('productsPage.filters.gtinPlaceholder')\"\r\n            outlined\r\n            clearable\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"qr_code_2\" color=\"primary\" />\r\n            </template>\r\n            <template #append>\r\n              <q-btn\r\n                flat\r\n                round\r\n                icon=\"qr_code_scanner\"\r\n                color=\"primary\"\r\n                size=\"sm\"\r\n                @click=\"$emit('open-scanner')\"\r\n              />\r\n            </template>\r\n          </q-input>\r\n\r\n          <q-select\r\n            v-model=\"searchCriteria.country_of_origin\"\r\n            :options=\"countryOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectCountry')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"flag\" color=\"info\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <q-select\r\n            v-model=\"searchCriteria.gpc_brick_code\"\r\n            :options=\"gpcOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectGpc')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"category\" color=\"orange\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <q-select\r\n            v-model=\"searchCriteria.lifecycle_status\"\r\n            :options=\"lifecycleOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectLifecycle')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"timeline\" color=\"purple\" />\r\n            </template>\r\n          </q-select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Category & Supplier -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          {{ $t('productsPage.advancedSearch.categorySupplier') }}\r\n        </h6>\r\n        <div class=\"search-grid\">\r\n          <q-select\r\n            v-model=\"searchCriteria.category\"\r\n            :options=\"categoryOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectCategory')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"folder\" color=\"amber\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <q-select\r\n            v-model=\"searchCriteria.supplier\"\r\n            :options=\"supplierOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectSupplier')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"business\" color=\"green\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <q-select\r\n            v-model=\"searchCriteria.stock_status\"\r\n            :options=\"stockStatusOptions\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.selectStockStatus')\"\r\n            class=\"search-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"inventory\" color=\"blue\" />\r\n            </template>\r\n          </q-select>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Price Range -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          {{ $t('productsPage.advancedSearch.priceRange') }}\r\n        </h6>\r\n        <div class=\"price-range-section\">\r\n          <q-input\r\n            v-model.number=\"searchCriteria.priceMin\"\r\n            type=\"number\"\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.minPrice')\"\r\n            class=\"price-input\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"euro\" />\r\n            </template>\r\n          </q-input>\r\n          <span class=\"price-separator\">-</span>\r\n          <q-input\r\n            v-model.number=\"searchCriteria.priceMax\"\r\n            type=\"number\"\r\n            outlined\r\n            :placeholder=\"$t('productsPage.filters.maxPrice')\"\r\n            class=\"price-input\"\r\n          >\r\n            <template #append>\r\n              <q-icon name=\"euro\" />\r\n            </template>\r\n          </q-input>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Special Options -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          {{ $t('productsPage.advancedSearch.specialOptions') }}\r\n        </h6>\r\n        <div class=\"options-grid\">\r\n          <q-toggle\r\n            v-model=\"searchCriteria.orderable_only\"\r\n            :label=\"$t('productsPage.filters.orderableOnly')\"\r\n            color=\"positive\"\r\n            class=\"option-toggle\"\r\n          />\r\n          <q-toggle\r\n            v-model=\"searchCriteria.has_gtin\"\r\n            :label=\"$t('productsPage.advancedSearch.hasGtin')\"\r\n            color=\"primary\"\r\n            class=\"option-toggle\"\r\n          />\r\n          <q-toggle\r\n            v-model=\"searchCriteria.batch_tracked\"\r\n            :label=\"$t('productsPage.advancedSearch.batchTracked')\"\r\n            color=\"secondary\"\r\n            class=\"option-toggle\"\r\n          />\r\n          <q-toggle\r\n            v-model=\"searchCriteria.in_stock_only\"\r\n            :label=\"$t('productsPage.advancedSearch.inStockOnly')\"\r\n            color=\"positive\"\r\n            class=\"option-toggle\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Sorting -->\r\n      <div class=\"search-section\">\r\n        <h6 class=\"section-title\">\r\n          {{ $t('productsPage.advancedSearch.sorting') }}\r\n        </h6>\r\n        <div class=\"sorting-section\">\r\n          <q-select\r\n            v-model=\"searchCriteria.sort_by\"\r\n            :options=\"sortByOptions\"\r\n            emit-value\r\n            map-options\r\n            outlined\r\n            :placeholder=\"$t('productsPage.advancedSearch.sortBy')\"\r\n            class=\"sort-select\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"sort\" />\r\n            </template>\r\n          </q-select>\r\n          <q-btn-toggle\r\n            v-model=\"searchCriteria.sort_order\"\r\n            :options=\"sortOrderOptions\"\r\n            color=\"primary\"\r\n            outline\r\n            class=\"sort-toggle\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Results Preview -->\r\n      <div v-if=\"showPreview\" class=\"results-preview\">\r\n        <div class=\"preview-header\">\r\n          <h6 class=\"preview-title\">\r\n            <q-icon name=\"preview\" class=\"q-mr-xs\" />\r\n            {{ $t('productsPage.advancedSearch.livePreview') }}\r\n          </h6>\r\n          <q-btn\r\n            flat\r\n            size=\"sm\"\r\n            :icon=\"previewExpanded ? 'expand_less' : 'expand_more'\"\r\n            @click=\"previewExpanded = !previewExpanded\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"preview-content\">\r\n          <div class=\"preview-stats\">\r\n            <q-chip\r\n              :color=\"previewResults.count > 0 ? 'positive' : 'grey'\"\r\n              text-color=\"white\"\r\n              icon=\"search\"\r\n              size=\"md\"\r\n            >\r\n              {{\r\n                $t('productsPage.advancedSearch.resultsFound', {\r\n                  count: previewResults.count,\r\n                })\r\n              }}\r\n            </q-chip>\r\n\r\n            <div v-if=\"previewResults.count > 0\" class=\"preview-metrics\">\r\n              <q-chip\r\n                v-if=\"previewResults.averagePrice\"\r\n                outline\r\n                color=\"info\"\r\n                icon=\"euro\"\r\n                size=\"sm\"\r\n              >\r\n                {{ $t('productsPage.advancedSearch.avgPrice') }}:\r\n                {{ formatPrice(previewResults.averagePrice) }}\r\n              </q-chip>\r\n\r\n              <q-chip\r\n                v-if=\"previewResults.inStockCount\"\r\n                outline\r\n                color=\"positive\"\r\n                icon=\"inventory\"\r\n                size=\"sm\"\r\n              >\r\n                {{ $t('productsPage.advancedSearch.inStock') }}:\r\n                {{ previewResults.inStockCount }}\r\n              </q-chip>\r\n\r\n              <q-chip\r\n                v-if=\"previewResults.gtinCount\"\r\n                outline\r\n                color=\"primary\"\r\n                icon=\"qr_code_2\"\r\n                size=\"sm\"\r\n              >\r\n                {{ $t('productsPage.advancedSearch.withGtin') }}:\r\n                {{ previewResults.gtinCount }}\r\n              </q-chip>\r\n            </div>\r\n          </div>\r\n\r\n          <q-slide-transition>\r\n            <div\r\n              v-show=\"previewExpanded && previewResults.samples.length > 0\"\r\n              class=\"preview-samples\"\r\n            >\r\n              <div class=\"samples-header\">\r\n                {{ $t('productsPage.advancedSearch.sampleResults') }}:\r\n              </div>\r\n              <div class=\"samples-list\">\r\n                <div\r\n                  v-for=\"product in previewResults.samples\"\r\n                  :key=\"product.id\"\r\n                  class=\"sample-item\"\r\n                >\r\n                  <div class=\"sample-info\">\r\n                    <div class=\"sample-name\">{{ product.name }}</div>\r\n                    <div class=\"sample-details\">\r\n                      <span v-if=\"product.sku\" class=\"sample-sku\">{{\r\n                        product.sku\r\n                      }}</span>\r\n                      <span v-if=\"product.category\" class=\"sample-category\">{{\r\n                        product.category\r\n                      }}</span>\r\n                      <span v-if=\"product.gtin\" class=\"sample-gtin\">\r\n                        <q-icon name=\"qr_code_2\" size=\"xs\" />\r\n                        {{ product.gtin }}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div v-if=\"product.price\" class=\"sample-price\">\r\n                    {{ formatPrice(product.price) }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-slide-transition>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <template #actions>\r\n      <q-btn flat :label=\"$t('common.cancel')\" @click=\"isOpen = false\" />\r\n      <q-btn\r\n        flat\r\n        color=\"grey\"\r\n        :label=\"$t('productsPage.advancedSearch.reset')\"\r\n        @click=\"resetCriteria\"\r\n      />\r\n      <q-btn\r\n        color=\"primary\"\r\n        :label=\"$t('productsPage.advancedSearch.search')\"\r\n        @click=\"performSearch\"\r\n        :disable=\"!hasValidCriteria\"\r\n        icon=\"search\"\r\n        unelevated\r\n      />\r\n      <q-btn\r\n        v-if=\"hasValidCriteria && previewResults.count > 0\"\r\n        flat\r\n        color=\"info\"\r\n        :label=\"$t('productsPage.advancedSearch.previewTable')\"\r\n        @click=\"$emit('preview-table')\"\r\n        icon=\"table_view\"\r\n      />\r\n    </template>\r\n  </BaseDialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import type { ProductFilter } from 'src/types/inventory';\r\n\r\n  // Props & Emits\r\n  interface Props {\r\n    modelValue: boolean;\r\n    currentFilters: ProductFilter;\r\n    countryOptions: Array<{ label: string; value: string }>;\r\n    gpcOptions: Array<{ label: string; value: string }>;\r\n    categoryOptions: Array<{ label: string; value: string }>;\r\n    supplierOptions: Array<{ label: string; value: string }>;\r\n    stockStatusOptions: Array<{ label: string; value: string }>;\r\n    lifecycleOptions: Array<{ label: string; value: string }>;\r\n    resultsCount?: number | null;\r\n  }\r\n\r\n  interface Emits {\r\n    (e: 'update:modelValue', value: boolean): void;\r\n    (\r\n      e: 'search',\r\n      criteria: ProductFilter & {\r\n        priceMin?: number;\r\n        priceMax?: number;\r\n        has_gtin?: boolean;\r\n        batch_tracked?: boolean;\r\n        in_stock_only?: boolean;\r\n      }\r\n    ): void;\r\n    (e: 'open-scanner'): void;\r\n    (e: 'preview', criteria: any): void;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    resultsCount: null,\r\n  });\r\n\r\n  const emit = defineEmits<Emits>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n\r\n  // State\r\n  const searchCriteria = ref({\r\n    search: '',\r\n    gtin: '',\r\n    country_of_origin: '',\r\n    gpc_brick_code: '',\r\n    lifecycle_status: '',\r\n    category: '',\r\n    supplier: '',\r\n    stock_status: '',\r\n    sort_by: 'name' as const,\r\n    sort_order: 'asc' as const,\r\n    orderable_only: false,\r\n    priceMin: null as number | null,\r\n    priceMax: null as number | null,\r\n    has_gtin: false,\r\n    batch_tracked: false,\r\n    in_stock_only: false,\r\n  });\r\n\r\n  const previewResults = ref({\r\n    count: 0,\r\n    averagePrice: null as number | null,\r\n    inStockCount: 0,\r\n    gtinCount: 0,\r\n    samples: [] as Array<{\r\n      id: string;\r\n      name: string;\r\n      sku?: string;\r\n      category?: string;\r\n      gtin?: string;\r\n      price?: number;\r\n    }>,\r\n  });\r\n\r\n  const previewExpanded = ref(false);\r\n  const previewTimeout = ref<number | null>(null);\r\n\r\n  // Computed\r\n  const isOpen = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const sortByOptions = computed(() => [\r\n    { label: t('productsPage.sortBy.name'), value: 'name' },\r\n    { label: t('productsPage.sortBy.price'), value: 'price' },\r\n    { label: t('productsPage.sortBy.stock'), value: 'stock' },\r\n    { label: t('productsPage.sortBy.category'), value: 'category' },\r\n  ]);\r\n\r\n  const sortOrderOptions = computed(() => [\r\n    {\r\n      label: t('productsPage.sortOrder.asc'),\r\n      value: 'asc',\r\n      icon: 'arrow_upward',\r\n    },\r\n    {\r\n      label: t('productsPage.sortOrder.desc'),\r\n      value: 'desc',\r\n      icon: 'arrow_downward',\r\n    },\r\n  ]);\r\n\r\n  const hasValidCriteria = computed(() => {\r\n    return Object.values(searchCriteria.value).some(\r\n      value => value !== '' && value !== null && value !== false\r\n    );\r\n  });\r\n\r\n  const showPreview = computed(() => {\r\n    return (\r\n      hasValidCriteria.value &&\r\n      (previewResults.value.count > 0 || previewResults.value.count === 0)\r\n    );\r\n  });\r\n\r\n  // Format price helper\r\n  const formatPrice = (price: number): string => {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(price);\r\n  };\r\n\r\n  // Methods\r\n  const resetCriteria = () => {\r\n    searchCriteria.value = {\r\n      search: '',\r\n      gtin: '',\r\n      country_of_origin: '',\r\n      gpc_brick_code: '',\r\n      lifecycle_status: '',\r\n      category: '',\r\n      supplier: '',\r\n      stock_status: '',\r\n      sort_by: 'name',\r\n      sort_order: 'asc',\r\n      orderable_only: false,\r\n      priceMin: null,\r\n      priceMax: null,\r\n      has_gtin: false,\r\n      batch_tracked: false,\r\n      in_stock_only: false,\r\n    };\r\n  };\r\n\r\n  const performSearch = () => {\r\n    emit('search', { ...searchCriteria.value });\r\n    isOpen.value = false;\r\n  };\r\n\r\n  // Watch for criteria changes to show preview\r\n  watch(\r\n    searchCriteria,\r\n    newCriteria => {\r\n      if (hasValidCriteria.value) {\r\n        // Debounce preview requests\r\n        if (previewTimeout.value) {\r\n          clearTimeout(previewTimeout.value);\r\n        }\r\n\r\n        previewTimeout.value = window.setTimeout(() => {\r\n          emit('preview', newCriteria);\r\n        }, 300);\r\n      } else {\r\n        // Clear preview when no criteria\r\n        previewResults.value = {\r\n          count: 0,\r\n          averagePrice: null,\r\n          inStockCount: 0,\r\n          gtinCount: 0,\r\n          samples: [],\r\n        };\r\n      }\r\n    },\r\n    { deep: true }\r\n  );\r\n\r\n  // Update preview results when results count changes\r\n  watch(\r\n    () => props.resultsCount,\r\n    newCount => {\r\n      if (newCount !== null) {\r\n        previewResults.value.count = newCount;\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize with current filters\r\n  watch(\r\n    () => props.currentFilters,\r\n    newFilters => {\r\n      if (newFilters) {\r\n        Object.assign(searchCriteria.value, newFilters);\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Dialog styling is handled by BaseDialog\r\n\r\n  .advanced-search-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n    padding: var(--space-6);\r\n\r\n    .search-section {\r\n      background: var(--bg-primary);\r\n      border-radius: var(--radius-lg);\r\n      padding: var(--space-5);\r\n      border: 1px solid var(--border-primary);\r\n      box-shadow: var(--shadow-sm);\r\n\r\n      .section-title {\r\n        font-size: var(--text-lg);\r\n        font-weight: var(--font-weight-semibold);\r\n        margin: 0 0 var(--space-4) 0;\r\n        color: var(--brand-primary);\r\n        display: flex;\r\n        align-items: center;\r\n        border-bottom: 1px solid var(--border-primary);\r\n        padding-bottom: var(--space-3);\r\n      }\r\n    }\r\n\r\n    .search-row {\r\n      display: flex;\r\n      gap: 1rem;\r\n\r\n      .search-input {\r\n        flex: 1;\r\n      }\r\n    }\r\n\r\n    .search-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: 1rem;\r\n\r\n      .search-input {\r\n        width: 100%;\r\n      }\r\n    }\r\n\r\n    .price-range-section {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      max-width: 400px;\r\n\r\n      .price-input {\r\n        flex: 1;\r\n      }\r\n\r\n      .price-separator {\r\n        color: rgba(0, 0, 0, 0.6);\r\n        font-weight: 500;\r\n        font-size: 1.1rem;\r\n      }\r\n    }\r\n\r\n    .options-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: 1rem;\r\n\r\n      .option-toggle {\r\n        justify-self: start;\r\n      }\r\n    }\r\n\r\n    .sorting-section {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      max-width: 500px;\r\n\r\n      .sort-select {\r\n        flex: 1;\r\n      }\r\n\r\n      .sort-toggle {\r\n        border-radius: 6px;\r\n      }\r\n    }\r\n\r\n    .results-preview {\r\n      margin-top: 1.5rem;\r\n      padding: 1rem;\r\n      border: 1px solid rgba(0, 0, 0, 0.1);\r\n      border-radius: 8px;\r\n      background: rgba(0, 0, 0, 0.02);\r\n\r\n      .preview-header {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        margin-bottom: 1rem;\r\n\r\n        .preview-title {\r\n          margin: 0;\r\n          font-size: 0.9rem;\r\n          font-weight: 600;\r\n          color: var(--q-primary);\r\n        }\r\n      }\r\n\r\n      .preview-content {\r\n        .preview-stats {\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n          gap: 0.5rem;\r\n          align-items: center;\r\n          margin-bottom: 1rem;\r\n\r\n          .preview-metrics {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            gap: 0.5rem;\r\n          }\r\n        }\r\n\r\n        .preview-samples {\r\n          .samples-header {\r\n            font-size: 0.85rem;\r\n            font-weight: 500;\r\n            color: rgba(0, 0, 0, 0.7);\r\n            margin-bottom: 0.5rem;\r\n          }\r\n\r\n          .samples-list {\r\n            .sample-item {\r\n              display: flex;\r\n              justify-content: space-between;\r\n              align-items: center;\r\n              padding: 0.5rem;\r\n              margin-bottom: 0.5rem;\r\n              background: white;\r\n              border-radius: 6px;\r\n              border: 1px solid rgba(0, 0, 0, 0.08);\r\n\r\n              &:last-child {\r\n                margin-bottom: 0;\r\n              }\r\n\r\n              .sample-info {\r\n                flex: 1;\r\n\r\n                .sample-name {\r\n                  font-size: 0.9rem;\r\n                  font-weight: 500;\r\n                  margin-bottom: 0.25rem;\r\n                }\r\n\r\n                .sample-details {\r\n                  display: flex;\r\n                  gap: 0.5rem;\r\n                  font-size: 0.75rem;\r\n                  color: rgba(0, 0, 0, 0.6);\r\n\r\n                  .sample-sku {\r\n                    background: rgba(0, 0, 0, 0.1);\r\n                    padding: 0.1rem 0.4rem;\r\n                    border-radius: 3px;\r\n                    font-family: monospace;\r\n                  }\r\n\r\n                  .sample-category {\r\n                    color: var(--q-amber);\r\n                  }\r\n\r\n                  .sample-gtin {\r\n                    color: var(--q-primary);\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 0.2rem;\r\n                  }\r\n                }\r\n              }\r\n\r\n              .sample-price {\r\n                font-size: 0.9rem;\r\n                font-weight: 600;\r\n                color: var(--q-primary);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Mobile responsiveness\r\n  @media (max-width: 768px) {\r\n    .advanced-search-dialog {\r\n      .advanced-search-card {\r\n        min-width: 95vw;\r\n        max-width: 95vw;\r\n        margin: 1rem;\r\n      }\r\n    }\r\n\r\n    .advanced-search-content {\r\n      .search-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .price-range-section {\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        max-width: none;\r\n\r\n        .price-separator {\r\n          text-align: center;\r\n        }\r\n      }\r\n\r\n      .sorting-section {\r\n        flex-direction: column;\r\n        align-items: stretch;\r\n        max-width: none;\r\n      }\r\n\r\n      .options-grid {\r\n        grid-template-columns: 1fr;\r\n\r\n        .option-toggle {\r\n          justify-self: stretch;\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\OrderListDialog.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ProductDetailsDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 373,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 373,
        "endColumn": 19,
        "fix": { "range": [14330, 14386], "text": "unelevated\r\n        @click=\"$emit('addToCart', product)\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\r\n  <BaseDialog\r\n    v-model=\"isOpen\"\r\n    :title=\"$t('productsPage.details.title')\"\r\n    icon=\"info\"\r\n    size=\"fullscreen\"\r\n    variant=\"elegant\"\r\n    header-variant=\"solid\"\r\n    position=\"right\"\r\n  >\r\n    <div v-if=\"product\" class=\"product-details-content\">\r\n      <!-- Product Image - Optimized -->\r\n      <div class=\"text-center\">\r\n        <OptimizedImage\r\n          :src=\"product.image_url || ''\"\r\n          :alt=\"product.name\"\r\n          width=\"300\"\r\n          height=\"200\"\r\n          :lazy=\"true\"\r\n          quality=\"85\"\r\n          format=\"webp\"\r\n          class=\"product-image\"\r\n          placeholder-icon=\"image\"\r\n          :show-skeleton=\"true\"\r\n          border-radius=\"8px\"\r\n          object-fit=\"contain\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Basic Information Card -->\r\n      <BaseCard>\r\n        <q-card-section>\r\n          <div class=\"text-h6 q-mb-md\">\r\n            <q-icon name=\"info\" class=\"q-mr-sm\" />\r\n            {{ $t('productsPage.details.basicInfo') }}\r\n          </div>\r\n\r\n          <div class=\"row q-gutter-md\">\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-list dense>\r\n                <q-item>\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.name') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.name }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item>\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.sku') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.sku || $t('common.noSku') }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item>\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.category') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <q-chip\r\n                        v-if=\"product.category\"\r\n                        :label=\"product.category\"\r\n                        size=\"sm\"\r\n                        color=\"grey-3\"\r\n                        text-color=\"grey-8\"\r\n                        icon=\"category\"\r\n                      />\r\n                      <span v-else class=\"text-grey-6\">-</span>\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </q-list>\r\n            </div>\r\n\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-list dense>\r\n                <q-item v-if=\"product.brand\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.brand') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.brand }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"product.unit\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.unit') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.unit }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item>\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.price') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <span v-if=\"bestPrice\" class=\"text-h6 text-primary\">\r\n                        {{ formatPrice(bestPrice.price) }}\r\n                      </span>\r\n                      <span v-else class=\"text-grey-6\">\r\n                        {{ $t('productsPage.details.priceNotAvailable') }}\r\n                      </span>\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </q-list>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Description -->\r\n          <div class=\"q-mt-md\">\r\n            <q-item-label class=\"text-caption text-grey-6 q-mb-xs\">\r\n              {{ $t('productsPage.details.description') }}\r\n            </q-item-label>\r\n            <div class=\"text-body2\">\r\n              {{\r\n                product.description || $t('productsPage.details.noDescription')\r\n              }}\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n      </BaseCard>\r\n\r\n      <!-- GS1 Information Card -->\r\n      <BaseCard v-if=\"hasGS1Data\">\r\n        <q-card-section>\r\n          <div class=\"text-h6 q-mb-md\">\r\n            <q-icon name=\"qr_code\" class=\"q-mr-sm\" />\r\n            {{ $t('productsPage.details.gs1Info') }}\r\n          </div>\r\n\r\n          <div class=\"row q-gutter-md\">\r\n            <!-- Left Column: Core Identifiers -->\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-list dense>\r\n                <q-item v-if=\"product.gtin\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.gtin') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <q-chip\r\n                        :label=\"product.gtin\"\r\n                        icon=\"qr_code_2\"\r\n                        color=\"primary\"\r\n                        text-color=\"white\"\r\n                        size=\"sm\"\r\n                      />\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"product.gpc_brick_code\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.gpcBrickCode') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.gpc_brick_code }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"product.country_of_origin\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.countryOfOrigin') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <q-chip\r\n                        :label=\"getCountryName(product.country_of_origin)\"\r\n                        :icon=\"getCountryFlag(product.country_of_origin)\"\r\n                        color=\"blue-grey-2\"\r\n                        text-color=\"blue-grey-8\"\r\n                        size=\"sm\"\r\n                      />\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"product.product_lifecycle_status\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.lifecycleStatus') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <q-badge\r\n                        :color=\"\r\n                          getLifecycleStatusColor(\r\n                            product.product_lifecycle_status\r\n                          )\r\n                        \"\r\n                        :label=\"\r\n                          $t(\r\n                            `productsPage.lifecycleStatus.${product.product_lifecycle_status}`\r\n                          )\r\n                        \"\r\n                      />\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </q-list>\r\n            </div>\r\n\r\n            <!-- Right Column: Packaging & Regulatory -->\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-list dense>\r\n                <q-item v-if=\"hasPackagingInfo\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.netContent') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      {{ product.net_content_value }}\r\n                      {{ product.net_content_uom }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"hasWeightInfo\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.weight') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <div class=\"column\">\r\n                        <span v-if=\"product.net_weight\">\r\n                          {{ $t('productsPage.details.netWeight') }}:\r\n                          {{ product.net_weight }}g\r\n                        </span>\r\n                        <span v-if=\"product.gross_weight\">\r\n                          {{ $t('productsPage.details.grossWeight') }}:\r\n                          {{ product.gross_weight }}g\r\n                        </span>\r\n                      </div>\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-item v-if=\"hasValidityInfo\">\r\n                  <q-item-section>\r\n                    <q-item-label class=\"text-caption text-grey-6\">\r\n                      {{ $t('productsPage.details.validityPeriod') }}\r\n                    </q-item-label>\r\n                    <q-item-label class=\"text-weight-medium\">\r\n                      <div class=\"column\">\r\n                        <span v-if=\"product.effective_from_date\">\r\n                          {{ $t('productsPage.details.from') }}:\r\n                          {{ formatDate(product.effective_from_date) }}\r\n                        </span>\r\n                        <span v-if=\"product.effective_to_date\">\r\n                          {{ $t('productsPage.details.to') }}:\r\n                          {{ formatDate(product.effective_to_date) }}\r\n                        </span>\r\n                      </div>\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n              </q-list>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Unit Indicators -->\r\n          <div v-if=\"hasUnitIndicators\" class=\"q-mt-md\">\r\n            <q-item-label class=\"text-caption text-grey-6 q-mb-xs\">\r\n              {{ $t('productsPage.details.unitIndicators') }}\r\n            </q-item-label>\r\n            <div class=\"row q-gutter-sm\">\r\n              <q-chip\r\n                v-if=\"product.base_unit_indicator\"\r\n                :label=\"$t('productsPage.details.baseUnit')\"\r\n                icon=\"inventory\"\r\n                color=\"green\"\r\n                text-color=\"white\"\r\n                size=\"sm\"\r\n              />\r\n              <q-chip\r\n                v-if=\"product.orderable_unit_indicator\"\r\n                :label=\"$t('productsPage.details.orderable')\"\r\n                icon=\"shopping_cart\"\r\n                color=\"blue\"\r\n                text-color=\"white\"\r\n                size=\"sm\"\r\n              />\r\n              <q-chip\r\n                v-if=\"product.despatch_unit_indicator\"\r\n                :label=\"$t('productsPage.details.despatchable')\"\r\n                icon=\"local_shipping\"\r\n                color=\"orange\"\r\n                text-color=\"white\"\r\n                size=\"sm\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n      </BaseCard>\r\n\r\n      <!-- Stock Information Card -->\r\n      <BaseCard>\r\n        <q-card-section>\r\n          <div class=\"text-h6 q-mb-md\">\r\n            <q-icon name=\"inventory_2\" class=\"q-mr-sm\" />\r\n            {{ $t('productsPage.details.stockInfo') }}\r\n          </div>\r\n\r\n          <div class=\"row q-gutter-md\">\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-item>\r\n                <q-item-section>\r\n                  <q-item-label class=\"text-caption text-grey-6\">\r\n                    {{ $t('productsPage.details.currentStock') }}\r\n                  </q-item-label>\r\n                  <q-item-label class=\"text-h6\">\r\n                    {{ product.total_stock }} {{ product.unit || '' }}\r\n                  </q-item-label>\r\n                </q-item-section>\r\n                <q-item-section side>\r\n                  <q-icon\r\n                    :name=\"stockStatusIcon\"\r\n                    :color=\"stockStatusColor\"\r\n                    size=\"1.5rem\"\r\n                  />\r\n                </q-item-section>\r\n              </q-item>\r\n            </div>\r\n\r\n            <div class=\"col-12 col-md-6\">\r\n              <q-item>\r\n                <q-item-section>\r\n                  <q-item-label class=\"text-caption text-grey-6\">\r\n                    {{ $t('productsPage.table.stockStatus') }}\r\n                  </q-item-label>\r\n                  <q-item-label>\r\n                    <q-badge\r\n                      :color=\"stockStatusColor\"\r\n                      :label=\"\r\n                        $t(`productsPage.stockStatus.${product.stock_status}`)\r\n                      \"\r\n                    />\r\n                  </q-item-label>\r\n                </q-item-section>\r\n              </q-item>\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n      </BaseCard>\r\n    </div>\r\n\r\n    <template #actions>\r\n      <q-btn\r\n        :label=\"$t('productsPage.addToCart')\"\r\n        icon=\"add_shopping_cart\"\r\n        color=\"primary\"\r\n        :disable=\"product?.stock_status === 'out_of_stock'\"\r\n        @click=\"$emit('addToCart', product)\"\r\n        unelevated\r\n      />\r\n      <q-btn\r\n        :label=\"$t('productsPage.addToOrderList')\"\r\n        icon=\"playlist_add\"\r\n        color=\"secondary\"\r\n        outline\r\n        @click=\"$emit('addToOrderList', product)\"\r\n      />\r\n      <q-btn\r\n        :label=\"$t('common.close')\"\r\n        color=\"grey-7\"\r\n        flat\r\n        @click=\"isOpen = false\"\r\n      />\r\n    </template>\r\n  </BaseDialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { BaseCard } from 'src/components/cards';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import { useFormatting } from 'src/composables/useFormatting';\r\n  import OptimizedImage from 'src/components/base/OptimizedImage.vue';\r\n  import type { ProductWithStock } from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    modelValue: boolean;\r\n    product?: ProductWithStock | null;\r\n  }\r\n\r\n  interface Emits {\r\n    (e: 'update:modelValue', value: boolean): void;\r\n    (e: 'addToCart', product: ProductWithStock): void;\r\n    (e: 'addToOrderList', product: ProductWithStock): void;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n  const emit = defineEmits<Emits>();\r\n  const { t, locale } = useI18n();\r\n  const { formatPrice } = useFormatting();\r\n\r\n  const isOpen = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const stockStatusColor = computed(() => {\r\n    if (!props.product) return 'grey';\r\n\r\n    switch (props.product.stock_status) {\r\n      case 'in_stock':\r\n        return 'positive';\r\n      case 'low_stock':\r\n        return 'warning';\r\n      case 'out_of_stock':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const stockStatusIcon = computed(() => {\r\n    if (!props.product) return 'help';\r\n\r\n    switch (props.product.stock_status) {\r\n      case 'in_stock':\r\n        return 'check_circle';\r\n      case 'low_stock':\r\n        return 'warning';\r\n      case 'out_of_stock':\r\n        return 'cancel';\r\n      default:\r\n        return 'help';\r\n    }\r\n  });\r\n\r\n  const bestPrice = computed(() => {\r\n    if (!props.product?.supplier_products?.length) return null;\r\n\r\n    const pricesWithSupplier = props.product.supplier_products\r\n      .filter(sp => sp.price && sp.price > 0)\r\n      .map(sp => ({\r\n        price: sp.price,\r\n        supplier: sp.supplier_name || sp.supplier_id,\r\n      }))\r\n      .sort((a, b) => a.price - b.price);\r\n\r\n    return pricesWithSupplier[0] || null;\r\n  });\r\n\r\n  // GS1 Data Computed Properties\r\n  const hasGS1Data = computed(() => {\r\n    if (!props.product) return false;\r\n    return !!(\r\n      props.product.gtin ||\r\n      props.product.gpc_brick_code ||\r\n      props.product.country_of_origin ||\r\n      props.product.product_lifecycle_status ||\r\n      hasPackagingInfo.value ||\r\n      hasWeightInfo.value ||\r\n      hasValidityInfo.value ||\r\n      hasUnitIndicators.value\r\n    );\r\n  });\r\n\r\n  const hasPackagingInfo = computed(() => {\r\n    return !!(\r\n      props.product?.net_content_value && props.product?.net_content_uom\r\n    );\r\n  });\r\n\r\n  const hasWeightInfo = computed(() => {\r\n    return !!(props.product?.net_weight || props.product?.gross_weight);\r\n  });\r\n\r\n  const hasValidityInfo = computed(() => {\r\n    return !!(\r\n      props.product?.effective_from_date || props.product?.effective_to_date\r\n    );\r\n  });\r\n\r\n  const hasUnitIndicators = computed(() => {\r\n    return !!(\r\n      props.product?.base_unit_indicator ||\r\n      props.product?.orderable_unit_indicator ||\r\n      props.product?.despatch_unit_indicator\r\n    );\r\n  });\r\n\r\n  // Helper Functions\r\n  const formatDate = (dateString: string): string => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString(locale.value);\r\n  };\r\n\r\n  const getCountryName = (countryCode: string): string => {\r\n    const countryNames: Record<string, string> = {\r\n      NLD: 'Nederland',\r\n      DEU: 'Duitsland',\r\n      BEL: 'België',\r\n      FRA: 'Frankrijk',\r\n      GBR: 'Verenigd Koninkrijk',\r\n      ITA: 'Italië',\r\n      ESP: 'Spanje',\r\n      CHE: 'Zwitserland',\r\n      AUT: 'Oostenrijk',\r\n      USA: 'Verenigde Staten',\r\n      CHN: 'China',\r\n      JPN: 'Japan',\r\n    };\r\n    return countryNames[countryCode] || countryCode;\r\n  };\r\n\r\n  const getCountryFlag = (countryCode: string): string => {\r\n    const countryFlags: Record<string, string> = {\r\n      NLD: 'flag',\r\n      DEU: 'flag',\r\n      BEL: 'flag',\r\n      FRA: 'flag',\r\n      GBR: 'flag',\r\n      ITA: 'flag',\r\n      ESP: 'flag',\r\n      CHE: 'flag',\r\n      AUT: 'flag',\r\n      USA: 'flag',\r\n      CHN: 'flag',\r\n      JPN: 'flag',\r\n    };\r\n    return countryFlags[countryCode] || 'public';\r\n  };\r\n\r\n  const getLifecycleStatusColor = (status: string): string => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'active':\r\n        return 'positive';\r\n      case 'discontinued':\r\n        return 'negative';\r\n      case 'new':\r\n        return 'info';\r\n      case 'phase_out':\r\n        return 'warning';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // ===================================================================\r\n  // Product details dialog styles\r\n  // ===================================================================\r\n\r\n  .product-details-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n    padding: var(--space-6);\r\n    height: 100%;\r\n    overflow-y: auto;\r\n\r\n    // Product Image Section\r\n    .text-center {\r\n      margin-bottom: var(--space-6);\r\n\r\n      .product-image {\r\n        border-radius: var(--radius-lg);\r\n        box-shadow: var(--shadow-lg);\r\n        transition: transform 0.3s ease;\r\n\r\n        &:hover {\r\n          transform: scale(1.02);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Enhanced BaseCard styling\r\n    :deep(.base-card) {\r\n      border-radius: var(--radius-xl);\r\n      box-shadow: var(--shadow-md);\r\n      transition: box-shadow 0.3s ease;\r\n\r\n      &:hover {\r\n        box-shadow: var(--shadow-lg);\r\n      }\r\n\r\n      .q-card-section {\r\n        padding: var(--space-6);\r\n      }\r\n    }\r\n\r\n    // Section Headers\r\n    .text-h6 {\r\n      font-size: var(--text-xl);\r\n      font-weight: var(--font-weight-semibold);\r\n      color: var(--text-primary);\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: var(--space-4);\r\n\r\n      .q-icon {\r\n        color: var(--brand-primary);\r\n        margin-right: var(--space-2);\r\n      }\r\n    }\r\n\r\n    // List Items Enhancement\r\n    :deep(.q-list) {\r\n      .q-item {\r\n        padding: var(--space-3) 0;\r\n        border-bottom: 1px solid var(--border-primary);\r\n\r\n        &:last-child {\r\n          border-bottom: none;\r\n        }\r\n      }\r\n\r\n      .q-item-label {\r\n        &.text-caption {\r\n          font-size: var(--text-sm);\r\n          font-weight: var(--font-weight-medium);\r\n          color: var(--text-secondary);\r\n          text-transform: uppercase;\r\n          letter-spacing: 0.05em;\r\n        }\r\n\r\n        &.text-weight-medium {\r\n          font-size: var(--text-base);\r\n          font-weight: var(--font-weight-semibold);\r\n          color: var(--text-primary);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Price Highlighting\r\n    .text-h6.text-primary {\r\n      color: var(--brand-primary);\r\n      font-weight: var(--font-weight-bold);\r\n    }\r\n\r\n    // Chip Enhancements\r\n    :deep(.q-chip) {\r\n      border-radius: var(--radius-md);\r\n      font-weight: var(--font-weight-medium);\r\n    }\r\n\r\n    // Responsive Design\r\n    @media (max-width: 768px) {\r\n      padding: var(--space-4);\r\n      gap: var(--space-4);\r\n\r\n      .text-center {\r\n        margin-bottom: var(--space-4);\r\n      }\r\n\r\n      :deep(.base-card .q-card-section) {\r\n        padding: var(--space-4);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark Mode Support\r\n  body.body--dark {\r\n    .product-details-content {\r\n      :deep(.base-card) {\r\n        background: var(--bg-secondary);\r\n        border-color: var(--border-primary);\r\n      }\r\n\r\n      .product-image {\r\n        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ProductFormDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 11,
        "column": 32,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 52,
        "fix": { "range": [263, 302], "text": "class=\"product-form\" @submit=\"onSubmit\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"ref\" should go before \":rules\".",
        "line": 22,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 26,
        "fix": { "range": [611, 663], "text": "ref=\"nameInput\"\r\n          :rules=\"[rules.required]\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#append' instead of 'v-slot:append'.",
        "line": 102,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 102,
        "endColumn": 34,
        "fix": { "range": [2801, 2814], "text": "#append" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6181, 6184], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6181, 6184], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8439, 8442], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8439, 8442], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 288,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 288,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8499, 8502], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8499, 8502], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 289,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 289,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8572, 8575], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8572, 8575], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 291,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 291,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8666, 8669], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8666, 8669], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\r\n  <FormDialog\r\n    v-model=\"dialogModel\"\r\n    :title=\"isEdit ? $t('products.editProduct') : $t('products.createProduct')\"\r\n    icon=\"inventory\"\r\n    size=\"lg\"\r\n    :loading=\"saving\"\r\n    @submit=\"onSubmit\"\r\n    @cancel=\"closeDialog\"\r\n  >\r\n    <q-form @submit=\"onSubmit\" class=\"product-form\">\r\n      <!-- Basic Information Section -->\r\n      <div class=\"form-section\">\r\n        <h3 class=\"section-title\">{{ $t('products.basicInfo') }}</h3>\r\n\r\n        <!-- Product Name -->\r\n        <q-input\r\n          v-model=\"form.name\"\r\n          :label=\"$t('products.name') + ' *'\"\r\n          outlined\r\n          :rules=\"[rules.required]\"\r\n          ref=\"nameInput\"\r\n        />\r\n\r\n        <!-- SKU -->\r\n        <q-input\r\n          v-model=\"form.sku\"\r\n          :label=\"$t('products.sku')\"\r\n          outlined\r\n          :hint=\"$t('products.skuHint')\"\r\n        />\r\n\r\n        <!-- Description -->\r\n        <q-input\r\n          v-model=\"form.description\"\r\n          :label=\"$t('products.description')\"\r\n          type=\"textarea\"\r\n          outlined\r\n          rows=\"3\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Product Details Section -->\r\n      <div class=\"form-section\">\r\n        <h3 class=\"section-title\">{{ $t('products.details') }}</h3>\r\n\r\n        <!-- Category and Brand Row -->\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col\">\r\n            <q-input\r\n              v-model=\"form.category\"\r\n              :label=\"$t('products.category')\"\r\n              outlined\r\n            />\r\n          </div>\r\n          <div class=\"col\">\r\n            <q-input\r\n              v-model=\"form.brand\"\r\n              :label=\"$t('products.brand')\"\r\n              outlined\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Unit and Price Row -->\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col\">\r\n            <q-select\r\n              v-model=\"form.unit\"\r\n              :options=\"unitOptions\"\r\n              :label=\"$t('products.unit')\"\r\n              outlined\r\n              emit-value\r\n              map-options\r\n            />\r\n          </div>\r\n          <div class=\"col\">\r\n            <q-input\r\n              v-model.number=\"form.price\"\r\n              :label=\"$t('products.price')\"\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min=\"0\"\r\n              outlined\r\n              :prefix=\"form.currency\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Additional Information Section -->\r\n      <div class=\"form-section\">\r\n        <h3 class=\"section-title\">{{ $t('products.additionalInfo') }}</h3>\r\n\r\n        <!-- Barcode -->\r\n        <q-input\r\n          v-model=\"form.barcode\"\r\n          :label=\"$t('products.barcode')\"\r\n          outlined\r\n          :hint=\"$t('products.barcodeHint')\"\r\n        >\r\n          <template v-slot:append>\r\n            <q-btn\r\n              icon=\"qr_code_scanner\"\r\n              flat\r\n              round\r\n              @click=\"$emit('scan-barcode')\"\r\n            >\r\n              <q-tooltip>{{ $t('products.scanBarcode') }}</q-tooltip>\r\n            </q-btn>\r\n          </template>\r\n        </q-input>\r\n\r\n        <!-- Options Row -->\r\n        <div class=\"row q-gutter-md\">\r\n          <div class=\"col\">\r\n            <q-checkbox\r\n              v-model=\"form.requires_batch_tracking\"\r\n              :label=\"$t('products.requiresBatchTracking')\"\r\n            />\r\n          </div>\r\n          <div class=\"col\">\r\n            <q-checkbox v-model=\"form.active\" :label=\"$t('products.active')\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Advanced Fields Section -->\r\n      <div class=\"form-section\">\r\n        <q-expansion-item\r\n          icon=\"qr_code_2\"\r\n          :label=\"$t('products.gs1Information')\"\r\n          header-class=\"text-primary\"\r\n          class=\"advanced-expansion\"\r\n        >\r\n          <div class=\"q-pa-md q-gutter-md\">\r\n            <!-- GTIN and GPC Row -->\r\n            <div class=\"row q-gutter-md\">\r\n              <div class=\"col\">\r\n                <q-input\r\n                  v-model=\"form.gtin\"\r\n                  label=\"GTIN\"\r\n                  outlined\r\n                  :hint=\"$t('products.gtinHint')\"\r\n                />\r\n              </div>\r\n              <div class=\"col\">\r\n                <q-input\r\n                  v-model=\"form.gpc_brick_code\"\r\n                  label=\"GPC Brick Code\"\r\n                  outlined\r\n                  :hint=\"$t('products.gpcHint')\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Country and Lifecycle Row -->\r\n            <div class=\"row q-gutter-md\">\r\n              <div class=\"col\">\r\n                <q-input\r\n                  v-model=\"form.country_of_origin\"\r\n                  :label=\"$t('products.countryOfOrigin')\"\r\n                  outlined\r\n                />\r\n              </div>\r\n              <div class=\"col\">\r\n                <q-select\r\n                  v-model=\"form.product_lifecycle_status\"\r\n                  :options=\"lifecycleOptions\"\r\n                  :label=\"$t('products.lifecycleStatus')\"\r\n                  outlined\r\n                  emit-value\r\n                  map-options\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-expansion-item>\r\n      </div>\r\n    </q-form>\r\n  </FormDialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, watch, nextTick } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { productService } from 'src/services/supabase';\r\n  import FormDialog from 'src/components/base/FormDialog.vue';\r\n  import type { ProductRow } from 'src/types/inventory';\r\n\r\n  // Props\r\n  interface Props {\r\n    modelValue: boolean;\r\n    product?: ProductRow | null;\r\n  }\r\n\r\n  const props = withDefaults(defineProps<Props>(), {\r\n    product: null,\r\n  });\r\n\r\n  // Emits\r\n  const emit = defineEmits<{\r\n    'update:modelValue': [value: boolean];\r\n    saved: [product: ProductRow];\r\n    'scan-barcode': [];\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const authStore = useAuthStore();\r\n\r\n  // Refs\r\n  const nameInput = ref<any>(null);\r\n  const saving = ref(false);\r\n\r\n  // State\r\n  const dialogModel = computed({\r\n    get: () => props.modelValue,\r\n    set: value => emit('update:modelValue', value),\r\n  });\r\n\r\n  const isEdit = computed(() => !!props.product);\r\n\r\n  // Form data\r\n  const defaultForm = () => ({\r\n    name: '',\r\n    sku: '',\r\n    description: '',\r\n    category: '',\r\n    brand: '',\r\n    unit: 'stuk',\r\n    price: 0,\r\n    currency: 'EUR',\r\n    barcode: '',\r\n    active: true,\r\n    requires_batch_tracking: false,\r\n    gtin: '',\r\n    gpc_brick_code: '',\r\n    country_of_origin: '',\r\n    product_lifecycle_status: 'active',\r\n  });\r\n\r\n  const form = ref(defaultForm());\r\n\r\n  // Options\r\n  const unitOptions = [\r\n    { label: t('products.units.piece'), value: 'stuk' },\r\n    { label: t('products.units.pack'), value: 'pak' },\r\n    { label: t('products.units.box'), value: 'doos' },\r\n    { label: t('products.units.bottle'), value: 'fles' },\r\n    { label: t('products.units.tube'), value: 'tube' },\r\n    { label: t('products.units.liter'), value: 'liter' },\r\n    { label: t('products.units.kg'), value: 'kg' },\r\n    { label: t('products.units.gram'), value: 'gram' },\r\n  ];\r\n\r\n  const lifecycleOptions = [\r\n    { label: t('products.lifecycle.active'), value: 'active' },\r\n    { label: t('products.lifecycle.discontinued'), value: 'discontinued' },\r\n    { label: t('products.lifecycle.new'), value: 'new' },\r\n    { label: t('products.lifecycle.phaseOut'), value: 'phase_out' },\r\n  ];\r\n\r\n  // Validation rules\r\n  const rules = {\r\n    required: (val: string) => !!val || t('validation.required'),\r\n  };\r\n\r\n  // Methods\r\n  const populateForm = () => {\r\n    if (props.product) {\r\n      form.value = {\r\n        name: props.product.name || '',\r\n        sku: props.product.sku || '',\r\n        description: props.product.description || '',\r\n        category: props.product.category || '',\r\n        brand: props.product.brand || '',\r\n        unit: props.product.unit || 'stuk',\r\n        price: props.product.price || 0,\r\n        currency: props.product.currency || 'EUR',\r\n        barcode: props.product.barcode || '',\r\n        active: props.product.active !== false,\r\n        requires_batch_tracking: props.product.requires_batch_tracking || false,\r\n        gtin: (props.product as any).gtin || '',\r\n        gpc_brick_code: (props.product as any).gpc_brick_code || '',\r\n        country_of_origin: (props.product as any).country_of_origin || '',\r\n        product_lifecycle_status:\r\n          (props.product as any).product_lifecycle_status || 'active',\r\n      };\r\n    } else {\r\n      form.value = defaultForm();\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    form.value = defaultForm();\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    if (!authStore.clinicId) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.noPracticeSelected'),\r\n      });\r\n      return;\r\n    }\r\n\r\n    saving.value = true;\r\n    try {\r\n      const productData = {\r\n        practice_id: authStore.clinicId,\r\n        name: form.value.name,\r\n        sku: form.value.sku || null,\r\n        description: form.value.description || null,\r\n        category: form.value.category || null,\r\n        brand: form.value.brand || null,\r\n        unit: form.value.unit,\r\n        price: form.value.price,\r\n        currency: form.value.currency,\r\n        barcode: form.value.barcode || null,\r\n        active: form.value.active,\r\n        requires_batch_tracking: form.value.requires_batch_tracking,\r\n        gtin: form.value.gtin || null,\r\n        gpc_brick_code: form.value.gpc_brick_code || null,\r\n        country_of_origin: form.value.country_of_origin || null,\r\n        product_lifecycle_status: form.value.product_lifecycle_status,\r\n      };\r\n\r\n      let result;\r\n      if (isEdit.value && props.product) {\r\n        result = await productService.update(props.product.id, productData);\r\n      } else {\r\n        result = await productService.create(productData);\r\n      }\r\n\r\n      if (result) {\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: isEdit.value ? t('products.updated') : t('products.created'),\r\n        });\r\n        emit('saved', result);\r\n        closeDialog();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving product:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: isEdit.value\r\n          ? t('products.updateError')\r\n          : t('products.createError'),\r\n      });\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    emit('update:modelValue', false);\r\n  };\r\n\r\n  const onDialogHide = () => {\r\n    resetForm();\r\n  };\r\n\r\n  // Watchers\r\n  watch(\r\n    () => props.modelValue,\r\n    newVal => {\r\n      if (newVal) {\r\n        populateForm();\r\n        nextTick(() => {\r\n          nameInput.value?.focus();\r\n        });\r\n      }\r\n    }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .product-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n  }\r\n\r\n  .form-section {\r\n    margin-bottom: var(--space-6);\r\n\r\n    .section-title {\r\n      font-size: var(--text-lg);\r\n      font-weight: var(--font-weight-semibold);\r\n      color: var(--text-primary);\r\n      margin: 0 0 var(--space-4) 0;\r\n      padding-bottom: var(--space-2);\r\n      border-bottom: 1px solid var(--border-primary);\r\n    }\r\n  }\r\n\r\n  .advanced-expansion {\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: 4px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\products\\ShoppingCartDialog.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"maximized\" should go before \"@update:model-value\".",
        "line": 5,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 5,
        "endColumn": 14,
        "fix": {
          "range": [60, 131],
          "text": "maximized\r\n    @update:model-value=\"$emit('update:modelValue', $event)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"transition-show\" should go before \"@update:model-value\".",
        "line": 6,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 6,
        "endColumn": 33,
        "fix": {
          "range": [60, 165],
          "text": "transition-show=\"slide-left\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    maximized"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"transition-hide\" should go before \"@update:model-value\".",
        "line": 7,
        "column": 5,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 7,
        "endColumn": 34,
        "fix": {
          "range": [60, 200],
          "text": "transition-hide=\"slide-right\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    maximized\r\n    transition-show=\"slide-left\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"dense\".",
        "line": 13,
        "column": 46,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 59,
        "fix": { "range": [441, 460], "text": "v-close-popup dense" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"color\".",
        "line": 141,
        "column": 63,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 141,
        "endColumn": 76,
        "fix": { "range": [5149, 5175], "text": "v-close-popup color=\"grey\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "<template>\r\n  <q-dialog\r\n    :model-value=\"modelValue\"\r\n    @update:model-value=\"$emit('update:modelValue', $event)\"\r\n    maximized\r\n    transition-show=\"slide-left\"\r\n    transition-hide=\"slide-right\"\r\n  >\r\n    <q-card class=\"shopping-cart-dialog\">\r\n      <q-card-section class=\"row items-center q-pb-none\">\r\n        <div class=\"text-h6\">{{ $t('productsPage.cart.title') }}</div>\r\n        <q-space />\r\n        <q-btn icon=\"close\" flat round dense v-close-popup />\r\n      </q-card-section>\r\n\r\n      <q-card-section class=\"cart-content\">\r\n        <!-- Cart is empty -->\r\n        <div v-if=\"cartItems.length === 0\" class=\"text-center q-pa-lg\">\r\n          <q-icon name=\"shopping_cart\" size=\"4rem\" color=\"grey-5\" />\r\n          <div class=\"text-h6 q-mt-md text-grey-7\">\r\n            {{ $t('productsPage.cart.empty') }}\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Cart items -->\r\n        <div v-else>\r\n          <!-- Cart summary -->\r\n          <div class=\"cart-summary q-mb-lg\">\r\n            <q-card flat bordered>\r\n              <q-card-section>\r\n                <div class=\"row items-center\">\r\n                  <div class=\"col\">\r\n                    <div class=\"text-subtitle1\">\r\n                      {{ $t('productsPage.cart.totalItems') }}: {{ totalItems }}\r\n                    </div>\r\n                    <div class=\"text-h5 text-primary\">\r\n                      {{ formatPrice(cartTotal) }}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-auto\">\r\n                    <q-btn\r\n                      :label=\"$t('productsPage.cart.clear')\"\r\n                      icon=\"clear_all\"\r\n                      color=\"grey-7\"\r\n                      outline\r\n                      @click=\"confirmClearCart\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </q-card-section>\r\n            </q-card>\r\n          </div>\r\n\r\n          <!-- Cart items list -->\r\n          <q-list separator>\r\n            <q-item\r\n              v-for=\"item in cartItems\"\r\n              :key=\"`${item.product_id}-${item.supplier_id || 'default'}`\"\r\n              class=\"cart-item\"\r\n            >\r\n              <q-item-section avatar>\r\n                <q-avatar size=\"60px\" rounded>\r\n                  <q-img\r\n                    v-if=\"item.product.image_url\"\r\n                    :src=\"item.product.image_url\"\r\n                    :alt=\"item.product.name\"\r\n                  />\r\n                  <q-icon v-else name=\"inventory_2\" size=\"2rem\" />\r\n                </q-avatar>\r\n              </q-item-section>\r\n\r\n              <q-item-section>\r\n                <q-item-label class=\"text-weight-medium\">{{\r\n                  item.product.name\r\n                }}</q-item-label>\r\n                <q-item-label caption>{{ item.product.sku }}</q-item-label>\r\n                <q-item-label v-if=\"item.supplier_id\" caption>\r\n                  {{ $t('productsPage.details.supplier') }}:\r\n                  {{ item.supplier_id }}\r\n                </q-item-label>\r\n                <q-item-label caption>\r\n                  {{ $t('productsPage.cart.unitPrice') }}:\r\n                  {{ formatPrice(item.unit_price || 0) }}\r\n                </q-item-label>\r\n              </q-item-section>\r\n\r\n              <q-item-section side>\r\n                <div class=\"column items-end q-gutter-sm\">\r\n                  <!-- Quantity controls -->\r\n                  <div class=\"row items-center q-gutter-sm\">\r\n                    <q-btn\r\n                      icon=\"remove\"\r\n                      size=\"sm\"\r\n                      round\r\n                      flat\r\n                      @click=\"decreaseQuantity(item)\"\r\n                    />\r\n                    <q-input\r\n                      :model-value=\"item.quantity\"\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                      dense\r\n                      outlined\r\n                      style=\"width: 80px\"\r\n                      @update:model-value=\"\r\n                        updateQuantity(item, parseInt($event as string))\r\n                      \"\r\n                    />\r\n                    <q-btn\r\n                      icon=\"add\"\r\n                      size=\"sm\"\r\n                      round\r\n                      flat\r\n                      @click=\"increaseQuantity(item)\"\r\n                    />\r\n                  </div>\r\n\r\n                  <!-- Total price -->\r\n                  <div class=\"text-weight-medium\">\r\n                    {{ formatPrice((item.unit_price || 0) * item.quantity) }}\r\n                  </div>\r\n\r\n                  <!-- Remove button -->\r\n                  <q-btn\r\n                    icon=\"delete\"\r\n                    size=\"sm\"\r\n                    flat\r\n                    round\r\n                    color=\"negative\"\r\n                    @click=\"removeItem(item)\"\r\n                  />\r\n                </div>\r\n              </q-item-section>\r\n            </q-item>\r\n          </q-list>\r\n        </div>\r\n      </q-card-section>\r\n\r\n      <!-- Cart actions -->\r\n      <q-card-actions v-if=\"cartItems.length > 0\" align=\"right\" class=\"q-pa-md\">\r\n        <q-btn :label=\"$t('common.cancel')\" flat color=\"grey\" v-close-popup />\r\n        <q-btn\r\n          :label=\"$t('productsPage.cart.checkout')\"\r\n          icon=\"shopping_cart_checkout\"\r\n          color=\"primary\"\r\n          @click=\"checkout\"\r\n        />\r\n      </q-card-actions>\r\n    </q-card>\r\n  </q-dialog>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import type { CartItem } from 'src/types/inventory';\r\n\r\n  interface Props {\r\n    modelValue: boolean;\r\n    cartItems: CartItem[];\r\n    cartTotal: number;\r\n  }\r\n\r\n  interface Emits {\r\n    (e: 'update:modelValue', value: boolean): void;\r\n    (\r\n      e: 'updateQuantity',\r\n      productId: string,\r\n      quantity: number,\r\n      supplierId?: string\r\n    ): void;\r\n    (e: 'removeItem', productId: string, supplierId?: string): void;\r\n    (e: 'clearCart'): void;\r\n    (e: 'checkout'): void;\r\n  }\r\n\r\n  const props = defineProps<Props>();\r\n  const emit = defineEmits<Emits>();\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n\r\n  // Computed properties\r\n  const totalItems = computed(() => {\r\n    return props.cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n  });\r\n\r\n  // Methods\r\n  const formatPrice = (price: number): string => {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(price);\r\n  };\r\n\r\n  const updateQuantity = (item: CartItem, quantity: number) => {\r\n    if (quantity > 0) {\r\n      emit('updateQuantity', item.product_id, quantity, item.supplier_id);\r\n    }\r\n  };\r\n\r\n  const increaseQuantity = (item: CartItem) => {\r\n    updateQuantity(item, item.quantity + 1);\r\n  };\r\n\r\n  const decreaseQuantity = (item: CartItem) => {\r\n    if (item.quantity > 1) {\r\n      updateQuantity(item, item.quantity - 1);\r\n    }\r\n  };\r\n\r\n  const removeItem = (item: CartItem) => {\r\n    $q.dialog({\r\n      title: t('common.confirm'),\r\n      message: t('productsPage.cart.remove') + ': ' + item.product.name,\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(() => {\r\n      emit('removeItem', item.product_id, item.supplier_id);\r\n    });\r\n  };\r\n\r\n  const confirmClearCart = () => {\r\n    $q.dialog({\r\n      title: t('productsPage.cart.clear'),\r\n      message: 'Weet je zeker dat je de winkelwagen wilt legen?',\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(() => {\r\n      emit('clearCart');\r\n    });\r\n  };\r\n\r\n  const checkout = () => {\r\n    emit('checkout');\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .shopping-cart-dialog {\r\n    width: 100%;\r\n    max-width: 100%;\r\n    height: 100%;\r\n\r\n    .cart-content {\r\n      flex: 1;\r\n      overflow-y: auto;\r\n    }\r\n\r\n    .cart-item {\r\n      min-height: 100px;\r\n    }\r\n\r\n    .cart-summary {\r\n      position: sticky;\r\n      top: 0;\r\n      z-index: 1;\r\n      background: white;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\SmartTable.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\UnifiedTable.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\components\\tables\\VirtualizedTable.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\themeManager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useBulkData.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useButtons.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useCache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useDebounce.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useFormValidation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useFormatting.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useModalGuard.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useOffline.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useSmartTable.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\composables\\useTableSorting.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\bridge.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\dto.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\domain\\inventory\\payload.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\examples\\BaseDialogExamples.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 10,
        "column": 47,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 10,
        "endColumn": 70,
        "fix": { "range": [302, 356], "text": "class=\"app-btn-primary\" @click=\"showFormDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 19,
        "column": 50,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 19,
        "endColumn": 72,
        "fix": { "range": [610, 666], "text": "class=\"app-btn-danger\" @click=\"showConfirmDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 28,
        "column": 49,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 74,
        "fix": { "range": [899, 957], "text": "class=\"app-btn-secondary\" @click=\"showWizardDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit.prevent\".",
        "line": 54,
        "column": 44,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 54,
        "endColumn": 64,
        "fix": { "range": [1718, 1767], "text": "class=\"form-content\" @submit.prevent=\"submitForm\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 4,
    "source": "<template>\n  <div class=\"dialog-examples\">\n    <h1>BaseDialog Examples</h1>\n\n    <div class=\"examples-grid\">\n      <!-- Form Dialog Example -->\n      <div class=\"example-card\">\n        <h2>Form Dialog</h2>\n        <p>Complete form with validation, loading states, and dirty checking</p>\n        <q-btn @click=\"showFormDialog = true\" class=\"app-btn-primary\">\n          Open Form Dialog\n        </q-btn>\n      </div>\n\n      <!-- Confirmation Dialog Example -->\n      <div class=\"example-card\">\n        <h2>Confirmation Dialog</h2>\n        <p>Simple confirmation with primary/secondary actions</p>\n        <q-btn @click=\"showConfirmDialog = true\" class=\"app-btn-danger\">\n          Open Confirm Dialog\n        </q-btn>\n      </div>\n\n      <!-- Wizard Dialog Example -->\n      <div class=\"example-card\">\n        <h2>Wizard Dialog</h2>\n        <p>Multi-step process with step indicator</p>\n        <q-btn @click=\"showWizardDialog = true\" class=\"app-btn-secondary\">\n          Open Wizard Dialog\n        </q-btn>\n      </div>\n    </div>\n\n    <!-- Form Dialog -->\n    <BaseDialog\n      v-model=\"showFormDialog\"\n      title=\"Create New Product\"\n      subtitle=\"Fill in the product details below\"\n      icon=\"add_box\"\n      size=\"lg\"\n      variant=\"elegant\"\n      header-variant=\"solid\"\n      status-color=\"primary\"\n      :loading=\"formLoading\"\n      loading-text=\"Saving product...\"\n      :primary-action=\"formPrimaryAction\"\n      :secondary-action=\"formSecondaryAction\"\n      :primary-action-loading=\"formSubmitting\"\n      :is-dirty=\"formIsDirty\"\n      confirm-close-message=\"You have unsaved changes. Are you sure you want to close?\"\n      @primary-action=\"submitForm\"\n      @secondary-action=\"cancelForm\"\n    >\n      <q-form @submit.prevent=\"submitForm\" class=\"form-content\">\n        <div class=\"form-row\">\n          <q-input\n            v-model=\"formData.name\"\n            label=\"Product Name *\"\n            outlined\n            :rules=\"[val => !!val || 'Name is required']\"\n            @input=\"formIsDirty = true\"\n          />\n        </div>\n\n        <div class=\"form-row\">\n          <q-input\n            v-model=\"formData.sku\"\n            label=\"SKU\"\n            outlined\n            @input=\"formIsDirty = true\"\n          />\n          <q-input\n            v-model.number=\"formData.price\"\n            label=\"Price\"\n            type=\"number\"\n            outlined\n            prefix=\"€\"\n            @input=\"formIsDirty = true\"\n          />\n        </div>\n\n        <div class=\"form-row\">\n          <q-select\n            v-model=\"formData.category\"\n            :options=\"categoryOptions\"\n            label=\"Category\"\n            outlined\n            @input=\"formIsDirty = true\"\n          />\n        </div>\n\n        <div class=\"form-row\">\n          <q-input\n            v-model=\"formData.description\"\n            label=\"Description\"\n            type=\"textarea\"\n            outlined\n            rows=\"3\"\n            @input=\"formIsDirty = true\"\n          />\n        </div>\n\n        <div class=\"form-row\">\n          <q-checkbox\n            v-model=\"formData.active\"\n            label=\"Active product\"\n            @input=\"formIsDirty = true\"\n          />\n        </div>\n      </q-form>\n    </BaseDialog>\n\n    <!-- Confirmation Dialog -->\n    <BaseDialog\n      v-model=\"showConfirmDialog\"\n      title=\"Delete Product\"\n      subtitle=\"This action cannot be undone\"\n      icon=\"warning\"\n      size=\"sm\"\n      variant=\"modern\"\n      header-variant=\"solid\"\n      status-color=\"danger\"\n      :primary-action=\"confirmPrimaryAction\"\n      :secondary-action=\"confirmSecondaryAction\"\n      :primary-action-loading=\"confirmLoading\"\n      @primary-action=\"confirmDelete\"\n      @secondary-action=\"cancelDelete\"\n    >\n      <div class=\"confirm-content\">\n        <p>\n          Are you sure you want to delete <strong>{{ productToDelete }}</strong\n          >?\n        </p>\n        <p class=\"text-danger\">\n          This will permanently remove the product and all associated data.\n        </p>\n      </div>\n    </BaseDialog>\n\n    <!-- Wizard Dialog -->\n    <BaseDialog\n      v-model=\"showWizardDialog\"\n      title=\"Product Import Wizard\"\n      subtitle=\"Import products from CSV file\"\n      icon=\"upload_file\"\n      size=\"xl\"\n      variant=\"glass\"\n      header-variant=\"gradient\"\n      status-color=\"info\"\n      :steps=\"wizardSteps\"\n      :current-step=\"currentWizardStep\"\n      show-steps\n      :primary-action=\"wizardPrimaryAction\"\n      :secondary-action=\"wizardSecondaryAction\"\n      @primary-action=\"nextWizardStep\"\n      @secondary-action=\"previousWizardStep\"\n    >\n      <!-- Step 1: File Upload -->\n      <div v-if=\"currentWizardStep === 0\" class=\"wizard-step\">\n        <h3>Upload CSV File</h3>\n        <p>Select a CSV file containing your product data.</p>\n\n        <div class=\"upload-area\">\n          <q-icon name=\"cloud_upload\" class=\"icon-size-2xl\" color=\"primary\" />\n          <p>Drag and drop your CSV file here, or click to browse</p>\n          <q-btn outline color=\"primary\">Choose File</q-btn>\n        </div>\n      </div>\n\n      <!-- Step 2: Column Mapping -->\n      <div v-if=\"currentWizardStep === 1\" class=\"wizard-step\">\n        <h3>Map Columns</h3>\n        <p>Map your CSV columns to product fields.</p>\n\n        <div class=\"mapping-grid\">\n          <div class=\"mapping-item\">\n            <label>Product Name</label>\n            <q-select outlined :options=\"csvColumns\" />\n          </div>\n          <div class=\"mapping-item\">\n            <label>SKU</label>\n            <q-select outlined :options=\"csvColumns\" />\n          </div>\n          <div class=\"mapping-item\">\n            <label>Price</label>\n            <q-select outlined :options=\"csvColumns\" />\n          </div>\n        </div>\n      </div>\n\n      <!-- Step 3: Preview & Import -->\n      <div v-if=\"currentWizardStep === 2\" class=\"wizard-step\">\n        <h3>Preview & Import</h3>\n        <p>Review the imported data before finalizing.</p>\n\n        <div class=\"preview-table\">\n          <q-table\n            :rows=\"previewData\"\n            :columns=\"previewColumns\"\n            row-key=\"id\"\n            flat\n            bordered\n          />\n        </div>\n      </div>\n    </BaseDialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import BaseDialog from '../components/base/BaseDialog.vue';\n\n  // Form Dialog State\n  const showFormDialog = ref(false);\n  const formLoading = ref(false);\n  const formSubmitting = ref(false);\n  const formIsDirty = ref(false);\n\n  const formData = ref({\n    name: '',\n    sku: '',\n    price: null,\n    category: null,\n    description: '',\n    active: true,\n  });\n\n  const categoryOptions = ['Electronics', 'Clothing', 'Books', 'Home & Garden'];\n\n  const formPrimaryAction = computed(() => ({\n    label: 'Save Product',\n    icon: 'save',\n    class: 'app-btn-primary',\n    disabled: !formData.value.name,\n  }));\n\n  const formSecondaryAction = computed(() => ({\n    label: 'Cancel',\n    class: 'app-btn-secondary',\n  }));\n\n  // Confirmation Dialog State\n  const showConfirmDialog = ref(false);\n  const confirmLoading = ref(false);\n  const productToDelete = ref('Sample Product');\n\n  const confirmPrimaryAction = computed(() => ({\n    label: 'Delete',\n    icon: 'delete',\n    class: 'app-btn-danger',\n  }));\n\n  const confirmSecondaryAction = computed(() => ({\n    label: 'Cancel',\n    class: 'app-btn-secondary',\n  }));\n\n  // Wizard Dialog State\n  const showWizardDialog = ref(false);\n  const currentWizardStep = ref(0);\n\n  const wizardSteps = [\n    { label: 'Upload File' },\n    { label: 'Map Columns' },\n    { label: 'Preview & Import' },\n  ];\n\n  const csvColumns = ['Column A', 'Column B', 'Column C'];\n  const previewData = [\n    { id: 1, name: 'Product 1', sku: 'SKU001', price: 19.99 },\n    { id: 2, name: 'Product 2', sku: 'SKU002', price: 29.99 },\n  ];\n\n  const previewColumns = [\n    { name: 'name', label: 'Name', field: 'name', align: 'left' },\n    { name: 'sku', label: 'SKU', field: 'sku', align: 'left' },\n    { name: 'price', label: 'Price', field: 'price', align: 'right' },\n  ];\n\n  const wizardPrimaryAction = computed(() => {\n    if (currentWizardStep.value === wizardSteps.length - 1) {\n      return {\n        label: 'Import Products',\n        icon: 'upload',\n        class: 'app-btn-success',\n      };\n    }\n    return {\n      label: 'Next',\n      icon: 'arrow_forward',\n      class: 'app-btn-primary',\n    };\n  });\n\n  const wizardSecondaryAction = computed(() => {\n    if (currentWizardStep.value === 0) {\n      return {\n        label: 'Cancel',\n        class: 'app-btn-secondary',\n      };\n    }\n    return {\n      label: 'Previous',\n      icon: 'arrow_back',\n      class: 'app-btn-secondary',\n    };\n  });\n\n  // Methods\n  const submitForm = async () => {\n    formSubmitting.value = true;\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    formSubmitting.value = false;\n    formIsDirty.value = false;\n    showFormDialog.value = false;\n\n    // Reset form\n    formData.value = {\n      name: '',\n      sku: '',\n      price: null,\n      category: null,\n      description: '',\n      active: true,\n    };\n  };\n\n  const cancelForm = () => {\n    showFormDialog.value = false;\n    formIsDirty.value = false;\n  };\n\n  const confirmDelete = async () => {\n    confirmLoading.value = true;\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    confirmLoading.value = false;\n    showConfirmDialog.value = false;\n  };\n\n  const cancelDelete = () => {\n    showConfirmDialog.value = false;\n  };\n\n  const nextWizardStep = () => {\n    if (currentWizardStep.value < wizardSteps.length - 1) {\n      currentWizardStep.value++;\n    } else {\n      // Final step - import\n      showWizardDialog.value = false;\n      currentWizardStep.value = 0;\n    }\n  };\n\n  const previousWizardStep = () => {\n    if (currentWizardStep.value > 0) {\n      currentWizardStep.value--;\n    } else {\n      showWizardDialog.value = false;\n    }\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .dialog-examples {\n    padding: var(--space-8);\n    max-width: 1200px;\n    margin: 0 auto;\n\n    h1 {\n      font-size: var(--text-4xl);\n      font-weight: var(--font-weight-bold);\n      color: var(--text-primary);\n      margin-bottom: var(--space-8);\n      text-align: center;\n    }\n\n    .examples-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: var(--space-6);\n      margin-bottom: var(--space-12);\n\n      .example-card {\n        background: var(--bg-secondary);\n        border: 1px solid var(--border-primary);\n        border-radius: var(--radius-xl);\n        padding: var(--space-6);\n        text-align: center;\n\n        h2 {\n          font-size: var(--text-xl);\n          font-weight: var(--font-weight-semibold);\n          color: var(--text-primary);\n          margin-bottom: var(--space-3);\n        }\n\n        p {\n          color: var(--text-secondary);\n          margin-bottom: var(--space-6);\n          line-height: var(--leading-relaxed);\n        }\n      }\n    }\n\n    .form-content {\n      .form-row {\n        display: grid;\n        grid-template-columns: 1fr;\n        gap: var(--space-4);\n        margin-bottom: var(--space-6);\n\n        &:has(> :nth-child(2)) {\n          grid-template-columns: 1fr 1fr;\n        }\n\n        &:last-child {\n          margin-bottom: 0;\n        }\n      }\n    }\n\n    .confirm-content {\n      text-align: center;\n\n      p {\n        margin-bottom: var(--space-4);\n        line-height: var(--leading-relaxed);\n\n        &:last-child {\n          margin-bottom: 0;\n        }\n\n        &.text-danger {\n          color: var(--brand-danger);\n          font-weight: var(--font-weight-medium);\n        }\n      }\n\n      strong {\n        color: var(--text-primary);\n        font-weight: var(--font-weight-semibold);\n      }\n    }\n\n    .wizard-step {\n      h3 {\n        font-size: var(--text-xl);\n        font-weight: var(--font-weight-semibold);\n        color: var(--text-primary);\n        margin-bottom: var(--space-3);\n      }\n\n      p {\n        color: var(--text-secondary);\n        margin-bottom: var(--space-6);\n        line-height: var(--leading-relaxed);\n      }\n\n      .upload-area {\n        border: 2px dashed var(--border-primary);\n        border-radius: var(--radius-xl);\n        padding: var(--space-12);\n        text-align: center;\n        background: var(--bg-secondary);\n        transition: var(--transition-base);\n\n        &:hover {\n          border-color: var(--brand-primary);\n          background: var(--bg-tertiary);\n        }\n\n        p {\n          margin: var(--space-4) 0 var(--space-6) 0;\n          color: var(--text-secondary);\n        }\n      }\n\n      .mapping-grid {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: var(--space-4);\n\n        .mapping-item {\n          label {\n            display: block;\n            font-weight: var(--font-weight-medium);\n            color: var(--text-primary);\n            margin-bottom: var(--space-2);\n          }\n        }\n      }\n\n      .preview-table {\n        border: 1px solid var(--border-primary);\n        border-radius: var(--radius-lg);\n        overflow: hidden;\n      }\n    }\n  }\n\n  @media (max-width: 640px) {\n    .dialog-examples {\n      padding: var(--space-4);\n\n      .examples-grid {\n        grid-template-columns: 1fr;\n      }\n\n      .form-content .form-row {\n        grid-template-columns: 1fr;\n      }\n\n      .wizard-step .mapping-grid {\n        grid-template-columns: 1fr;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\index.ts",
    "messages": [
      {
        "ruleId": "prefer-const",
        "severity": 1,
        "message": "'messages' is never reassigned. Use 'const' instead.",
        "line": 9,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 9,
        "endColumn": 43,
        "fix": { "range": [299, 354], "text": "const messages: Record<SupportedLocale, any> = {} as any;" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [337, 340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [337, 340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [350, 353], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [350, 353], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'saved' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [864, 867], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [864, 867], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2914, 2917], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2914, 2917], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3235, 3238], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3235, 3238], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoaded' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 144,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'countKeys' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 179,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 179,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 179,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 179,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5045, 5048], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5045, 5048], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import { createI18n } from 'vue-i18n';\nimport type { SupportedLocale } from '@/types/i18n';\nexport type { SupportedLocale } from '@/types/i18n';\n\n// Always use lazy loading to avoid require() issues in Vite\nconst ENABLE_LAZY_LOADING = true;\n\n// Messages for upfront loading (empty for lazy loading)\nlet messages: Record<SupportedLocale, any> = {} as any;\n\n// Get saved locale from localStorage or default to 'nl'\nconst getSavedLocale = (): SupportedLocale => {\n  const saved = localStorage.getItem('remcura_locale');\n  // We only support Dutch now; ignore any previously saved en/es\n  return 'nl';\n};\n\n// Check if we're in development mode\nexport const isDevelopment =\n  process.env.NODE_ENV === 'development' || process.env.DEV === 'true';\n\n// Custom missing handler for development feedback\nconst missingHandler = (\n  locale: string,\n  key: string,\n  _instance: any,\n  _type: string\n) => {\n  if (isDevelopment) {\n    console.warn(`[i18n:missing] ${locale}:${key}`);\n    return key; // show key in dev\n  }\n  return '';\n};\n\n// Create i18n instance\n// Use composition mode for Vue 3 compatibility\nexport const i18n = createI18n({\n  locale: getSavedLocale(),\n  fallbackLocale: 'nl',\n  messages: ENABLE_LAZY_LOADING ? {} : messages, // Empty in production for lazy loading\n  legacy: false, // Use composition mode for Vue 3 compatibility\n  globalInjection: true,\n  missingWarn: isDevelopment,\n  fallbackWarn: isDevelopment,\n  missing: missingHandler,\n});\n\n// Async loader for lazy loading\nconst loadedLanguages: Set<SupportedLocale> = new Set();\n\nexport const loadLanguageAsync = async (\n  locale: SupportedLocale\n): Promise<void> => {\n  if (!ENABLE_LAZY_LOADING) {\n    // In development, everything is already loaded\n    return Promise.resolve();\n  }\n\n  if (loadedLanguages.has(locale)) {\n    // Already loaded\n    return Promise.resolve();\n  }\n\n  try {\n    const messages = await import(`./${locale}/index.ts`);\n    i18n.global.setLocaleMessage(locale, messages.default);\n    loadedLanguages.add(locale);\n\n    if (isDevelopment) {\n      // Lazy loaded translations\n    }\n  } catch (error) {\n    console.error(`❌ [i18n] Failed to load ${locale} translations:`, error);\n    throw error;\n  }\n};\n\n// Initialize with Dutch language in production (lazy load)\nif (ENABLE_LAZY_LOADING) {\n  const initialLocale = getSavedLocale();\n  loadLanguageAsync(initialLocale)\n    .then(() => {\n      if (isDevelopment) {\n        // Initial translations loaded\n      }\n    })\n    .catch(error => {\n      console.error('❌ [i18n] Failed to load initial translations:', error);\n    });\n}\n\n// Locale setter with persistence and lazy loading\nexport const setI18nLanguage = async (\n  locale: SupportedLocale\n): Promise<SupportedLocale> => {\n  // Load the language if lazy loading is enabled\n  if (ENABLE_LAZY_LOADING) {\n    await loadLanguageAsync(locale);\n  }\n\n  // In composition mode, locale is a ref with .value\n  (i18n.global.locale as any).value = locale;\n  document.querySelector('html')?.setAttribute('lang', locale);\n  localStorage.setItem('remcura_locale', locale);\n  return locale;\n};\n\n// Get current locale\nexport const getCurrentLocale = (): SupportedLocale => {\n  // In composition mode, locale is a ref with .value\n  return (i18n.global.locale as any).value as SupportedLocale;\n};\n\n// Development helper: Check if a translation exists\nexport const hasTranslation = (\n  key: string,\n  locale?: SupportedLocale\n): boolean => {\n  const targetLocale = locale || getCurrentLocale();\n  return i18n.global.te(key, targetLocale);\n};\n\n// Development helper: Get missing translations for current locale\nexport const getMissingTranslations = (\n  keys: string[],\n  locale?: SupportedLocale\n): string[] => {\n  const targetLocale = locale || getCurrentLocale();\n  return keys.filter(key => !hasTranslation(key, targetLocale));\n};\n\n// Development helper: Log translation coverage stats\nexport const logTranslationStats = () => {\n  if (!isDevelopment) {\n    return;\n  }\n\n  const locales: SupportedLocale[] = ['nl'];\n  console.group('🌐 Translation Coverage Statistics');\n\n  locales.forEach(locale => {\n    if (ENABLE_LAZY_LOADING) {\n      const isLoaded = loadedLanguages.has(locale);\n      // Language loaded check\n    } else {\n      // Count keys for status\n    }\n  });\n\n  console.groupEnd();\n};\n\n// Preload all languages (useful for offline apps)\nexport const preloadAllLanguages = async (): Promise<void> => {\n  if (!ENABLE_LAZY_LOADING) {\n    // Already loaded in development\n    return Promise.resolve();\n  }\n\n  const locales: SupportedLocale[] = ['nl'];\n  const loadPromises = locales.map(locale => loadLanguageAsync(locale));\n\n  try {\n    await Promise.all(loadPromises);\n    if (isDevelopment) {\n      // All languages preloaded successfully\n    }\n  } catch (error) {\n    console.error('❌ [i18n] Failed to preload all languages:', error);\n    throw error;\n  }\n};\n\n// Check if lazy loading is enabled\nexport const isLazyLoadingEnabled = (): boolean => ENABLE_LAZY_LOADING;\n\n// Helper function to recursively count keys in translation object\nconst countKeys = (obj: any, prefix = ''): number => {\n  let count = 0;\n  for (const key in obj) {\n    if (typeof obj[key] === 'object' && obj[key] !== null) {\n      count += countKeys(obj[key], prefix ? `${prefix}.${key}` : key);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default i18n;\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\nl\\filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\i18n\\nl\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\layouts\\AuthLayout.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\layouts\\MainLayout.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 41,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 41,
        "endColumn": 49,
        "fix": {
          "range": [1312, 1388],
          "text": ":aria-label=\"t('nav.notifications')\"\r\n            @click=\"goToNotifications\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 42,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 42,
        "endColumn": 31,
        "fix": {
          "range": [1312, 1420],
          "text": "class=\"header-btn\"\r\n            @click=\"goToNotifications\"\r\n            :aria-label=\"t('nav.notifications')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 63,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 65,
        "endColumn": 14,
        "fix": {
          "range": [2010, 2148],
          "text": ":aria-label=\"\r\n              $q.dark.isActive ? t('nav.lightMode') : t('nav.darkMode')\r\n            \"\r\n            @click=\"toggleDarkMode\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 66,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 31,
        "fix": {
          "range": [2010, 2180],
          "text": "class=\"header-btn\"\r\n            @click=\"toggleDarkMode\"\r\n            :aria-label=\"\r\n              $q.dark.isActive ? t('nav.lightMode') : t('nav.darkMode')\r\n            \""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 112,
        "column": 35,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 112,
        "endColumn": 48,
        "fix": { "range": [3937, 3960], "text": "v-close-popup clickable" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 119,
        "column": 35,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 119,
        "endColumn": 48,
        "fix": { "range": [4242, 4265], "text": "v-close-popup clickable" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 130,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 130,
        "endColumn": 32,
        "fix": { "range": [4578, 4620], "text": "v-close-popup\r\n                  clickable" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 132,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 132,
        "endColumn": 40,
        "fix": { "range": [4640, 4702], "text": "class=\"text-negative\"\r\n                  @click=\"handleLogout\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"side\".",
        "line": 245,
        "column": 38,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 245,
        "endColumn": 55,
        "fix": { "range": [8976, 8998], "text": "v-if=\"item.badge\" side" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-if\" should go before \"side\".",
        "line": 257,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 257,
        "endColumn": 38,
        "fix": { "range": [9432, 9475], "text": "v-if=\"item.submenu\"\r\n                  side" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 10,
    "source": "<template>\r\n  <q-layout view=\"lHh Lpr lFf\" class=\"layout-modern\">\r\n    <!-- Header with glass effect -->\r\n    <q-header\r\n      elevated\r\n      class=\"header-modern glass\"\r\n      :class=\"{ 'header-scrolled': isScrolled }\"\r\n      role=\"banner\"\r\n    >\r\n      <q-toolbar class=\"toolbar-modern\">\r\n        <q-btn\r\n          flat\r\n          round\r\n          size=\"xl\"\r\n          class=\"menu-toggle-btn header-btn\"\r\n          :aria-label=\"isMiniDrawer ? (t('nav.openNavigation') || 'Open navigation') : (t('nav.closeNavigation') || 'Collapse navigation')\"\r\n          :aria-expanded=\"!isMiniDrawer\"\r\n          @click=\"toggleLeftDrawer\"\r\n        >\r\n          <q-icon :name=\"isMiniDrawer ? 'menu' : 'menu_open'\" class=\"header-icon header-icon-lg\" />\r\n          <q-tooltip>\r\n            {{ isMiniDrawer ? (t('nav.openNavigation') || 'Open navigation') : (t('nav.closeNavigation') || 'Collapse navigation') }}\r\n          </q-tooltip>\r\n        </q-btn>\r\n\r\n        <div class=\"brand-section\">\r\n          <div class=\"brand-text\">\r\n            <div class=\"brand-title\">{{ t('brand.name') }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <q-space />\r\n\r\n        <!-- Header Actions -->\r\n        <div class=\"header-actions\">\r\n          <!-- Notifications -->\r\n          <q-btn\r\n            flat\r\n            round\r\n            @click=\"goToNotifications\"\r\n            :aria-label=\"t('nav.notifications')\"\r\n            class=\"header-btn\"\r\n          >\r\n            <q-badge\r\n              v-if=\"notificationStore.hasUnreadNotifications\"\r\n              color=\"red\"\r\n              floating\r\n              aria-live=\"polite\"\r\n              aria-atomic=\"true\"\r\n              role=\"status\"\r\n            >\r\n              {{ notificationStore.unreadCount }}\r\n            </q-badge>\r\n            <q-icon name=\"notifications\" class=\"header-icon\" />\r\n            <q-tooltip>{{ t('nav.notifications') }}</q-tooltip>\r\n          </q-btn>\r\n\r\n          <!-- Theme Toggle -->\r\n          <q-btn\r\n            flat\r\n            round\r\n            @click=\"toggleDarkMode\"\r\n            :aria-label=\"\r\n              $q.dark.isActive ? t('nav.lightMode') : t('nav.darkMode')\r\n            \"\r\n            class=\"header-btn\"\r\n          >\r\n            <q-icon\r\n              :name=\"$q.dark.isActive ? 'light_mode' : 'dark_mode'\"\r\n              class=\"header-icon\"\r\n            />\r\n            <q-tooltip>{{\r\n              $q.dark.isActive ? t('nav.lightMode') : t('nav.darkMode')\r\n            }}</q-tooltip>\r\n          </q-btn>\r\n\r\n          <!-- User Menu -->\r\n          <q-btn flat round :aria-label=\"t('nav.userMenu')\" class=\"header-btn\">\r\n            <q-icon name=\"person\" class=\"header-icon\" />\r\n            <q-menu>\r\n              <q-list>\r\n                <q-item class=\"user-info\">\r\n                  <q-item-section avatar>\r\n                    <q-avatar color=\"primary\">\r\n                      <img\r\n                        v-if=\"userProfile?.avatar_url\"\r\n                        :src=\"userProfile.avatar_url\"\r\n                      />\r\n                      <span v-else>{{ getUserInitials() }}</span>\r\n                    </q-avatar>\r\n                  </q-item-section>\r\n                  <q-item-section>\r\n                    <q-item-label>{{\r\n                      userProfile?.full_name || 'User'\r\n                    }}</q-item-label>\r\n                    <q-item-label caption>{{ userEmail }}</q-item-label>\r\n                    <!-- Demo account indicator -->\r\n                    <q-item-label v-if=\"isDemoUser\" caption class=\"demo-status\">\r\n                      <q-icon\r\n                        name=\"science\"\r\n                        size=\"12px\"\r\n                        class=\"q-mr-xs\"\r\n                        color=\"amber\"\r\n                      />\r\n                      {{ t('demo.title') }}\r\n                    </q-item-label>\r\n                  </q-item-section>\r\n                </q-item>\r\n\r\n                <q-separator />\r\n\r\n                <q-item clickable v-close-popup @click=\"goToSettings\">\r\n                  <q-item-section avatar>\r\n                    <q-icon name=\"settings\" />\r\n                  </q-item-section>\r\n                  <q-item-section>{{ t('nav.settings') }}</q-item-section>\r\n                </q-item>\r\n\r\n                <q-item clickable v-close-popup>\r\n                  <q-item-section avatar>\r\n                    <q-icon name=\"help\" />\r\n                  </q-item-section>\r\n                  <q-item-section>{{ t('nav.helpSupport') }}</q-item-section>\r\n                </q-item>\r\n\r\n                <q-separator />\r\n\r\n                <q-item\r\n                  clickable\r\n                  v-close-popup\r\n                  @click=\"handleLogout\"\r\n                  class=\"text-negative\"\r\n                >\r\n                  <q-item-section avatar>\r\n                    <q-icon name=\"logout\" />\r\n                  </q-item-section>\r\n                  <q-item-section>{{ t('nav.logout') }}</q-item-section>\r\n                </q-item>\r\n              </q-list>\r\n            </q-menu>\r\n          </q-btn>\r\n        </div>\r\n      </q-toolbar>\r\n    </q-header>\r\n\r\n    <!-- Enhanced Navigation Drawer -->\r\n    <q-drawer\r\n      v-model=\"leftDrawerOpen\"\r\n      show-if-above\r\n      bordered\r\n      dark\r\n      class=\"navigation-drawer\"\r\n      :width=\"280\"\r\n      :mini=\"isMiniDrawer\"\r\n      :mini-width=\"72\"\r\n      role=\"navigation\"\r\n      :aria-label=\"t('common.accessibility.mainNavigation')\"\r\n    >\r\n      <!--\r\n        Mini drawer rules:\r\n        - Top logo area is independent, fixed-height and perfectly centered in mini\r\n        - Tooltips appear on hover and focus only in mini\r\n        - Mini hover/active use subtle pill + focus ring; expanded drawer is unchanged\r\n      -->\r\n      <div class=\"flex flex-col h-full\">\r\n        <!-- Top Logo Section (mini only) -->\r\n        <div\r\n          v-if=\"isMiniDrawer\"\r\n          class=\"top-logo-section flex-none flex items-center justify-center\"\r\n          role=\"img\"\r\n          aria-label=\"Remcura\"\r\n        >\r\n          <img src=\"/icons/icon-192x192.svg\" alt=\"\" class=\"h-10 w-10\" />\r\n        </div>\r\n\r\n        <!-- Clinic Info Section (expanded only to keep visuals unchanged) -->\r\n        <div v-else class=\"clinic-info-section\" role=\"banner\">\r\n          <div class=\"clinic-avatar\">\r\n            <q-avatar size=\"48px\" color=\"primary\" text-color=\"white\">\r\n              <q-icon name=\"apartment\" class=\"icon-size-lg\" />\r\n            </q-avatar>\r\n          </div>\r\n        <div class=\"clinic-details\">\r\n          <div class=\"clinic-name\" :title=\"clinicName\">{{ clinicName }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Main Navigation -->\r\n        <q-list class=\"navigation-list flex-1\" role=\"menu\">\r\n        <!-- Iterate through sections -->\r\n        <template v-for=\"section in navigationLinks\" :key=\"section.id\">\r\n          <!-- Section Header -->\r\n          <q-item-label\r\n            header\r\n            class=\"navigation-section-header\"\r\n            :class=\"`section-${section.id}`\"\r\n          >\r\n            {{ section.title }}\r\n          </q-item-label>\r\n\r\n          <!-- Section Items -->\r\n          <template v-for=\"item in section.items\" :key=\"item.title\">\r\n              <!-- Mini: icon-only item with tooltip -->\r\n              <NavIconItem\r\n                v-if=\"isMiniDrawer\"\r\n                :icon=\"item.icon\"\r\n                :label=\"String(item.title)\"\r\n                :to=\"item.submenu ? null : item.to\"\r\n                :active=\"$route.name === item.routeName || isParentActive(item)\"\r\n                :mini=\"true\"\r\n                :tooltip=\"String(item.title)\"\r\n                :aria-label=\"String(item.title)\"\r\n                @click=\"handleItemClick(item)\"\r\n              />\r\n\r\n              <!-- Expanded: original rich item -->\r\n              <q-item\r\n                v-else\r\n                :to=\"item.submenu ? undefined : item.to\"\r\n                clickable\r\n                :active=\"$route.name === item.routeName || isParentActive(item)\"\r\n                active-class=\"nav-item-active\"\r\n                class=\"nav-item\"\r\n                :class=\"{ 'has-submenu': item.submenu }\"\r\n                role=\"menuitem\"\r\n                :aria-current=\"($route.name === item.routeName || isParentActive(item)) ? 'page' : undefined\"\r\n                :aria-label=\"\r\n                  item.title + (item.badge ? ' (' + item.badge + ' items)' : '')\r\n                \"\r\n                :aria-expanded=\"\r\n                  item.submenu ? isSubmenuExpanded(item.routeName) : undefined\r\n                \"\r\n                @click=\"handleItemClick(item)\"\r\n              >\r\n                <q-item-section avatar>\r\n                  <q-icon :name=\"item.icon\" class=\"icon-size-base\" />\r\n                </q-item-section>\r\n\r\n                <q-item-section class=\"hide-when-mini\">\r\n                  <q-item-label class=\"nav-item-label\" :title=\"item.title\">{{\r\n                    item.title\r\n                  }}</q-item-label>\r\n                </q-item-section>\r\n\r\n                <q-item-section side v-if=\"item.badge\" class=\"hide-when-mini\">\r\n                  <q-badge\r\n                    :color=\"item.badgeColor || 'primary'\"\r\n                    :label=\"item.badge\"\r\n                    :aria-label=\"`${item.badge} items requiring attention`\"\r\n                    class=\"nav-badge\"\r\n                  />\r\n                </q-item-section>\r\n\r\n                <!-- Expand/Collapse for submenu -->\r\n                <q-item-section\r\n                  side\r\n                  v-if=\"item.submenu\"\r\n                  class=\"submenu-chevron hide-when-mini\"\r\n                >\r\n                  <q-icon\r\n                    name=\"expand_more\"\r\n                    size=\"20px\"\r\n                    :class=\"[\r\n                      'chevron-icon',\r\n                      { expanded: isSubmenuExpanded(item.routeName) },\r\n                    ]\"\r\n                  />\r\n                </q-item-section>\r\n              </q-item>\r\n\r\n            <!-- Submenu Items -->\r\n            <q-slide-transition v-if=\"item.submenu\">\r\n              <div v-show=\"isSubmenuExpanded(item.routeName)\">\r\n                  <template v-for=\"subItem in item.submenu\" :key=\"subItem.title\">\r\n                    <!-- Mini: icon-only sub item -->\r\n                    <NavIconItem\r\n                      v-if=\"isMiniDrawer\"\r\n                      :icon=\"subItem.icon\"\r\n                      :label=\"String(subItem.title)\"\r\n                      :to=\"subItem.to\"\r\n                      :active=\"$route.name === subItem.routeName\"\r\n                      :mini=\"true\"\r\n                      :tooltip=\"String(subItem.title)\"\r\n                      :aria-label=\"String(subItem.title)\"\r\n                    />\r\n\r\n                    <!-- Expanded: original rich sub item -->\r\n                    <q-item\r\n                      v-else\r\n                      :to=\"subItem.to\"\r\n                      clickable\r\n                      :active=\"$route.name === subItem.routeName\"\r\n                      active-class=\"nav-item-active\"\r\n                      class=\"nav-item nav-sub-item\"\r\n                      role=\"menuitem\"\r\n                      :aria-current=\"($route.name === subItem.routeName) ? 'page' : undefined\"\r\n                      :aria-label=\"subItem.title\"\r\n                    >\r\n                      <q-item-section avatar class=\"sub-item-avatar\">\r\n                        <q-icon :name=\"subItem.icon\" class=\"icon-size-sm\" />\r\n                      </q-item-section>\r\n\r\n                      <q-item-section class=\"hide-when-mini\">\r\n                        <q-item-label\r\n                          class=\"nav-item-label\"\r\n                          :title=\"subItem.title\"\r\n                          >{{ subItem.title }}</q-item-label\r\n                        >\r\n                      </q-item-section>\r\n                    </q-item>\r\n                  </template>\r\n              </div>\r\n            </q-slide-transition>\r\n          </template>\r\n\r\n          <!-- Section Separator (except for last section) -->\r\n          <q-separator\r\n            v-if=\"\r\n              section.id !== navigationLinks[navigationLinks.length - 1]?.id\r\n            \"\r\n            class=\"navigation-separator\"\r\n          />\r\n        </template>\r\n        </q-list>\r\n\r\n        <!-- Spacer -->\r\n        <q-space />\r\n\r\n        <!-- Footer Section -->\r\n        <div class=\"drawer-footer flex-none\">\r\n          <q-item\r\n            class=\"upgrade-item glass-card\"\r\n            clickable\r\n            tabindex=\"0\"\r\n            role=\"button\"\r\n            :aria-label=\"t('nav.upgradePlan')\"\r\n          >\r\n            <q-item-section avatar>\r\n              <q-icon name=\"upgrade\" color=\"accent\" />\r\n            </q-item-section>\r\n            <q-item-section>\r\n              <q-item-label class=\"text-weight-medium\">{{\r\n                t('nav.upgradePlan')\r\n              }}</q-item-label>\r\n              <q-item-label caption>{{\r\n                t('nav.getAdvancedFeatures')\r\n              }}</q-item-label>\r\n            </q-item-section>\r\n          </q-item>\r\n        </div>\r\n      </div>\r\n    </q-drawer>\r\n\r\n    <!-- Page Container with Enhanced Styling -->\r\n    <q-page-container class=\"page-container-modern\">\r\n      <!-- Main content area -->\r\n      <div class=\"page-content\" role=\"main\">\r\n        <router-view />\r\n      </div>\r\n    </q-page-container>\r\n  </q-layout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onUnmounted, watch } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import { useRouter } from 'vue-router';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import { useNotificationStore } from 'src/stores/notifications';\r\n  import NavIconItem from 'src/components/navigation/NavIconItem.vue';\r\n\r\n  // Type definitions for navigation\r\n  interface NavigationItem {\r\n    title: string;\r\n    icon: string;\r\n    to: string;\r\n    routeName: string;\r\n    badge?: number;\r\n    badgeColor?: string;\r\n    submenu?: NavigationItem[];\r\n  }\r\n\r\n  interface NavigationSection {\r\n    id: string;\r\n    title: string;\r\n    items: NavigationItem[];\r\n  }\r\n\r\n  const $q = useQuasar();\r\n  const router = useRouter();\r\n  const { t } = useI18n();\r\n  const authStore = useAuthStore();\r\n  const clinicStore = useClinicStore();\r\n  const notificationStore = useNotificationStore();\r\n\r\n  // State\r\n  const leftDrawerOpen = ref(false);\r\n  const isScrolled = ref(false);\r\n  const expandedSubmenus = ref<string[]>([]);\r\n  const isMiniDrawer = ref(false);\r\n\r\n  // Computed properties\r\n  const userProfile = computed(() => authStore.userProfile);\r\n  const userEmail = computed(() => authStore.userEmail);\r\n  const clinicName = computed(\r\n    () => clinicStore.clinic?.name || t('clinic.defaultName')\r\n  );\r\n  const isDemoUser = computed(() => authStore.userEmail === 'demo@remcura.com');\r\n\r\n  // Check if user has admin permissions\r\n  const isAdmin = computed(() => {\r\n    const role = userProfile.value?.role || '';\r\n    return role === 'admin' || role === 'owner' || role === 'platform_owner';\r\n  });\r\n\r\n  // Enhanced navigation links with more details\r\n  const navigationLinks = computed((): NavigationSection[] => {\r\n    // Re-enable all sections in navigation\r\n    const SHOW_ANALYTICS = true;\r\n    const SHOW_BATCH = true;\r\n    const SHOW_ADMIN = true;\r\n    const SHOW_PLATFORM = true;\r\n\r\n    const sections = [\r\n      // Main Section - Dashboard and notifications\r\n      {\r\n        id: 'main',\r\n        title: t('nav.sections.main'),\r\n        items: [\r\n          {\r\n            title: t('nav.dashboard'),\r\n            icon: 'space_dashboard',\r\n            to: '/',\r\n            routeName: 'dashboard',\r\n          },\r\n          {\r\n            title: t('nav.notifications'),\r\n            icon: 'campaign',\r\n            to: '/notifications',\r\n            routeName: 'notifications',\r\n            badge: notificationStore.unreadCount,\r\n            badgeColor: 'red',\r\n          },\r\n        ],\r\n      },\r\n\r\n      // Inventory Management Section\r\n      {\r\n        id: 'inventory',\r\n        title: t('nav.sections.inventory'),\r\n        items: [\r\n          {\r\n            title: t('nav.inventory'),\r\n            icon: 'inventory_2',\r\n            to: '/inventory/levels',\r\n            routeName: 'inventory-levels',\r\n            submenu: [\r\n              {\r\n                title: t('nav.inventoryLevels'),\r\n                icon: 'analytics',\r\n                to: '/inventory/levels',\r\n                routeName: 'inventory-levels',\r\n              },\r\n              {\r\n                title: t('nav.locations'),\r\n                icon: 'location_on',\r\n                to: '/inventory/locations',\r\n                routeName: 'inventory-locations',\r\n              },\r\n              {\r\n                title: t('nav.stockCounting'),\r\n                icon: 'fact_check',\r\n                to: '/inventory/counting',\r\n                routeName: 'inventory-counting',\r\n              },\r\n              {\r\n                title: t('nav.movements'),\r\n                icon: 'swap_horiz',\r\n                to: '/inventory/movements',\r\n                routeName: 'inventory-movements',\r\n              },\r\n            ],\r\n          },\r\n          // Hide batch management in MVP drawer\r\n          ...(SHOW_BATCH\r\n            ? [\r\n                {\r\n                  title: t('batch.batchManagement'),\r\n                  icon: 'qr_code_scanner',\r\n                  to: '/batch-management',\r\n                  routeName: 'batch-management',\r\n                } as NavigationItem,\r\n              ]\r\n            : []),\r\n        ],\r\n      },\r\n\r\n      // Supply Chain Section\r\n      {\r\n        id: 'supply',\r\n        title: t('nav.sections.supplyChain'),\r\n        items: [\r\n          {\r\n            title: t('nav.products'),\r\n            icon: 'inventory',\r\n            to: '/products',\r\n            routeName: 'products',\r\n          },\r\n          {\r\n            title: t('orderLists.title'),\r\n            icon: 'list_alt',\r\n            to: '/order-lists',\r\n            routeName: 'order-lists',\r\n          },\r\n          {\r\n            title: t('nav.orders'),\r\n            icon: 'assignment',\r\n            to: '/orders',\r\n            routeName: 'orders',\r\n          },\r\n          {\r\n            title: t('nav.suppliers'),\r\n            icon: 'corporate_fare',\r\n            to: '/suppliers',\r\n            routeName: 'suppliers',\r\n          },\r\n        ],\r\n      },\r\n\r\n      // Analytics Section\r\n      ...(SHOW_ANALYTICS\r\n        ? [\r\n            {\r\n              id: 'analytics',\r\n              title: t('nav.sections.analytics'),\r\n              items: [\r\n                {\r\n                  title: t('nav.analytics'),\r\n                  icon: 'insights',\r\n                  to: '/analytics',\r\n                  routeName: 'analytics',\r\n                },\r\n              ],\r\n            } as NavigationSection,\r\n          ]\r\n        : []),\r\n    ];\r\n\r\n    // Add admin section for admin users (hidden in MVP)\r\n    if (isAdmin.value && SHOW_ADMIN) {\r\n      sections.push({\r\n        id: 'admin',\r\n        title: t('nav.sections.administration'),\r\n        items: [\r\n          {\r\n            title: t('nav.admin'),\r\n            icon: 'supervisor_account',\r\n            to: '/admin',\r\n            routeName: 'admin',\r\n          },\r\n          {\r\n            title: t('nav.styleGuide'),\r\n            icon: 'palette',\r\n            to: '/style-guide',\r\n            routeName: 'style-guide',\r\n          },\r\n          {\r\n            title: 'Style Sandbox',\r\n            icon: 'science',\r\n            to: '/style-sandbox',\r\n            routeName: 'style-sandbox',\r\n          },\r\n          {\r\n            title: 'Dialogs Gallery',\r\n            icon: 'view_carousel',\r\n            to: '/dialogs-gallery',\r\n            routeName: 'dialogs-gallery',\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Add demo tools section for demo user\r\n    if (isDemoUser.value) {\r\n      sections.push({\r\n        id: 'demo',\r\n        title: t('demo.title') || 'Demo',\r\n        items: [\r\n          {\r\n            title: 'Dialogs Gallery',\r\n            icon: 'view_carousel',\r\n            to: '/dialogs-gallery',\r\n            routeName: 'dialogs-gallery',\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Add platform section for platform owner users\r\n    if (userProfile.value?.role === 'platform_owner' && SHOW_PLATFORM) {\r\n      sections.push({\r\n        id: 'platform',\r\n        title: t('nav.sections.platform'),\r\n        items: [\r\n          {\r\n            title: t('nav.platformDashboard'),\r\n            icon: 'admin_panel_settings',\r\n            to: '/platform',\r\n            routeName: 'platform-dashboard',\r\n          },\r\n          {\r\n            title: t('nav.practiceManagement'),\r\n            icon: 'business',\r\n            to: '/platform/practices',\r\n            routeName: 'platform-practices',\r\n          },\r\n          {\r\n            title: t('nav.systemMonitoring'),\r\n            icon: 'monitor_heart',\r\n            to: '/platform/monitoring',\r\n            routeName: 'platform-monitoring',\r\n          },\r\n          {\r\n            title: t('nav.databaseAdmin'),\r\n            icon: 'storage',\r\n            to: '/platform/database',\r\n            routeName: 'platform-database',\r\n          },\r\n          {\r\n            title: t('nav.systemLogs'),\r\n            icon: 'description',\r\n            to: '/platform/logs',\r\n            routeName: 'platform-logs',\r\n          },\r\n          {\r\n            title: t('nav.apiDocumentation'),\r\n            icon: 'api',\r\n            to: '/platform/api-docs',\r\n            routeName: 'platform-api-docs',\r\n          },\r\n          {\r\n            title: t('nav.backupRestore'),\r\n            icon: 'backup',\r\n            to: '/platform/backup',\r\n            routeName: 'platform-backup',\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    return sections;\r\n  });\r\n\r\n  // Methods\r\n  const toggleLeftDrawer = () => {\r\n    // Toggle only the mini state for smooth inline collapse/expand\r\n    isMiniDrawer.value = !isMiniDrawer.value;\r\n    // Ensure drawer remains open while toggling mini\r\n    if (!leftDrawerOpen.value) {\r\n      leftDrawerOpen.value = true;\r\n    }\r\n  };\r\n\r\n  const toggleDarkMode = () => {\r\n    $q.dark.toggle();\r\n    $q.localStorage.set('darkMode', $q.dark.isActive.toString());\r\n  };\r\n\r\n  const goToSettings = () => {\r\n    router.push({ name: 'settings' });\r\n  };\r\n\r\n  const goToNotifications = () => {\r\n    router.push({ name: 'notifications' });\r\n  };\r\n\r\n  const getUserInitials = () => {\r\n    const name = userProfile.value?.full_name || userEmail.value || 'U';\r\n    return name\r\n      .split(' ')\r\n      .map((n: string) => n[0])\r\n      .join('')\r\n      .toUpperCase()\r\n      .slice(0, 2);\r\n  };\r\n\r\n  // Submenu management\r\n  const isSubmenuExpanded = (routeName: string) => {\r\n    return expandedSubmenus.value.includes(routeName);\r\n  };\r\n\r\n  const toggleSubmenu = (routeName: string) => {\r\n    const index = expandedSubmenus.value.indexOf(routeName);\r\n    if (index > -1) {\r\n      expandedSubmenus.value.splice(index, 1);\r\n    } else {\r\n      expandedSubmenus.value.push(routeName);\r\n    }\r\n  };\r\n\r\n  // Handle item click - open submenu and/or navigate\r\n  const handleItemClick = (item: NavigationItem) => {\r\n    if (item.submenu && item.submenu.length > 0) {\r\n      // For items with submenu, only toggle the submenu - don't navigate to the main page\r\n      toggleSubmenu(item.routeName);\r\n    } else {\r\n      // No submenu, just navigate normally\r\n      router.push(item.to);\r\n    }\r\n  };\r\n\r\n  // Auto-expand submenu if current route is a child\r\n  const checkAndExpandCurrentSubmenu = () => {\r\n    const currentRoute = router.currentRoute.value.name as string;\r\n    const sections = navigationLinks.value;\r\n\r\n    for (const section of sections) {\r\n      for (const item of section.items) {\r\n        if (item.submenu && item.submenu.length > 0) {\r\n          const hasActiveChild = item.submenu.some(\r\n            (subItem: NavigationItem) => subItem.routeName === currentRoute\r\n          );\r\n          if (hasActiveChild && !isSubmenuExpanded(item.routeName)) {\r\n            expandedSubmenus.value.push(item.routeName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Check if parent item should be highlighted (when child is active)\r\n  const isParentActive = (item: NavigationItem) => {\r\n    if (!item.submenu) {\r\n      return false;\r\n    }\r\n    const currentRoute = router.currentRoute.value.name as string;\r\n    return item.submenu.some(\r\n      (subItem: NavigationItem) => subItem.routeName === currentRoute\r\n    );\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    const result = await authStore.logout();\r\n    if (result.success) {\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('auth.logoutSuccess'),\r\n        position: 'top',\r\n      });\r\n      router.push({ name: 'login' });\r\n    } else {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: result.error || t('errors.generic'),\r\n        position: 'top',\r\n      });\r\n    }\r\n  };\r\n\r\n  // Scroll detection for header effects\r\n  const handleScroll = () => {\r\n    isScrolled.value = window.scrollY > 10;\r\n  };\r\n\r\n  // Lifecycle\r\n\r\n  onMounted(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    checkAndExpandCurrentSubmenu();\r\n\r\n    // Load notifications for badge count\r\n    notificationStore.loadNotifications();\r\n  });\r\n\r\n  onUnmounted(() => {\r\n    window.removeEventListener('scroll', handleScroll);\r\n  });\r\n\r\n  // Watch for route changes to auto-expand parent submenu\r\n  watch(\r\n    () => router.currentRoute.value.name,\r\n    () => {\r\n      checkAndExpandCurrentSubmenu();\r\n    }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .layout-modern {\r\n    width: 100%;\r\n    max-width: 100%;\r\n    box-sizing: border-box;\r\n\r\n    // Ensure all child elements don't overflow\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n\r\n    // Header styling with CSS custom properties\r\n    .header-modern {\r\n      --header-bg: rgba(255, 255, 255, 0.8);\r\n      --header-bg-scrolled: rgba(255, 255, 255, 0.95);\r\n\r\n      background: var(--header-bg);\r\n      backdrop-filter: blur(20px);\r\n      -webkit-backdrop-filter: blur(20px);\r\n      border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n      transition: all var(--transition-base);\r\n\r\n      &.header-scrolled {\r\n        background: var(--header-bg-scrolled);\r\n        box-shadow: var(--shadow-sm);\r\n      }\r\n    }\r\n\r\n    .toolbar-modern {\r\n      padding: var(--space-4) var(--space-6);\r\n      min-height: 72px;\r\n      width: 100%;\r\n      max-width: 100%;\r\n\r\n      .header-btn {\r\n        color: var(--neutral-800);\r\n        border-radius: var(--radius-lg);\r\n        transition:\r\n          transform 160ms ease,\r\n          background-color 160ms ease,\r\n          color 160ms ease,\r\n          box-shadow 160ms ease;\r\n        width: 50px;\r\n        height: 50px;\r\n        padding: 6px;\r\n\r\n        &:hover {\r\n          background-color: rgba(var(--q-primary-rgb), 0.12);\r\n          color: var(--brand-primary);\r\n          transform: translateY(-1px);\r\n          box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        &:focus-visible {\r\n          outline: 2px solid rgba(var(--brand-primary-rgb), 0.5);\r\n          outline-offset: 2px;\r\n          box-shadow: 0 0 0 2px rgba(var(--brand-primary-rgb), 0.15);\r\n        }\r\n      }\r\n\r\n      .menu-toggle-btn {\r\n        background: rgba(255, 255, 255, 0.55);\r\n        border: 1px solid rgba(0, 0, 0, 0.06);\r\n        backdrop-filter: blur(8px);\r\n        -webkit-backdrop-filter: blur(8px);\r\n        transition:\r\n          transform 160ms ease,\r\n          background-color 160ms ease,\r\n          border-color 160ms ease,\r\n          box-shadow 160ms ease;\r\n\r\n        &:hover {\r\n          background: rgba(255, 255, 255, 0.7);\r\n          border-color: rgba(0, 0, 0, 0.08);\r\n          box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        &:active {\r\n          transform: translateY(0);\r\n          box-shadow: var(--shadow-xs, 0 1px 2px rgba(0, 0, 0, 0.12));\r\n        }\r\n      }\r\n\r\n      .header-icon {\r\n        font-size: 24px;\r\n        line-height: 1;\r\n      }\r\n\r\n      .header-icon-lg {\r\n        font-size: 30px;\r\n        line-height: 1;\r\n      }\r\n\r\n      .brand-section {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: var(--space-3);\r\n        margin-left: var(--space-4);\r\n\r\n        // brand avatar removed\r\n\r\n        .brand-text {\r\n          .brand-title {\r\n            font-weight: var(--font-weight-bold);\r\n            font-size: var(--text-2xl);\r\n            color: var(--neutral-900);\r\n            line-height: var(--leading-tight);\r\n          }\r\n\r\n          .brand-subtitle {\r\n            font-size: 0.75rem;\r\n            color: var(--neutral-500);\r\n            font-weight: var(--font-weight-medium);\r\n          }\r\n        }\r\n      }\r\n\r\n      .header-actions {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: var(--space-2);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode header with CSS custom properties\r\n  body.body--dark .layout-modern .header-modern {\r\n    --header-bg: rgba(23, 23, 23, 0.85);\r\n    --header-bg-scrolled: rgba(23, 23, 23, 0.95);\r\n\r\n    background: var(--header-bg);\r\n    border-bottom-color: rgba(255, 255, 255, 0.1);\r\n\r\n    &.header-scrolled {\r\n      background: var(--header-bg-scrolled);\r\n    }\r\n\r\n    .toolbar-modern {\r\n      .brand-text {\r\n        .brand-title {\r\n          color: var(--neutral-900);\r\n        }\r\n\r\n        .brand-subtitle {\r\n          color: var(--neutral-600);\r\n        }\r\n      }\r\n\r\n      .menu-toggle-btn {\r\n        color: var(--neutral-200);\r\n\r\n        &:hover {\r\n          background-color: rgba(255, 255, 255, 0.12);\r\n          color: var(--brand-primary-light);\r\n        }\r\n      }\r\n\r\n      .header-actions {\r\n        .header-btn {\r\n          color: var(--neutral-200);\r\n\r\n          &:hover {\r\n            background-color: rgba(255, 255, 255, 0.12);\r\n            color: var(--brand-primary-light);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Enhanced navigation drawer\r\n  .navigation-drawer {\r\n    // Softer dark background and subtle border using design tokens\r\n    background: var(--sidebar-bg);\r\n    border-right: 1px solid var(--sidebar-border);\r\n    transition:\r\n      width 220ms ease,\r\n      transform 220ms ease;\r\n\r\n    :deep(.q-drawer__content) {\r\n      background: var(--sidebar-bg);\r\n      transition:\r\n        width 220ms ease,\r\n        transform 220ms ease;\r\n    }\r\n\r\n    // Fixed-height top logo for mini drawer only\r\n    .top-logo-section {\r\n      height: 72px;\r\n      border-bottom: 1px solid var(--sidebar-border);\r\n    }\r\n\r\n    .clinic-info-section {\r\n      padding: var(--space-6);\r\n      border-bottom: 1px solid var(--sidebar-border);\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-4);\r\n\r\n      .clinic-details {\r\n        .clinic-name {\r\n          /* Clear, high-contrast title style */\r\n          font-weight: var(--font-weight-semibold);\r\n          font-size: 1rem; /* 16px for clarity */\r\n          line-height: 1.25rem;\r\n          color: rgba(255, 255, 255, 0.92);\r\n          margin: 0;\r\n          letter-spacing: 0.005em;\r\n          white-space: nowrap;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n        }\r\n\r\n        .clinic-plan {\r\n          font-size: 0.875rem;\r\n          color: rgba(255, 255, 255, 0.7);\r\n          background: rgba(255, 255, 255, 0.1);\r\n          padding: var(--space-1) var(--space-2);\r\n          border-radius: var(--radius-full);\r\n          display: inline-block;\r\n        }\r\n      }\r\n    }\r\n\r\n    .navigation-list {\r\n      padding: var(--space-4);\r\n      transition: padding 220ms ease;\r\n\r\n      .navigation-header {\r\n        font-weight: var(--font-weight-semibold);\r\n        color: rgba(255, 255, 255, 0.6);\r\n        font-size: 0.75rem;\r\n        text-transform: uppercase;\r\n        letter-spacing: 0.05em;\r\n        margin-bottom: var(--space-3);\r\n      }\r\n\r\n      .nav-item {\r\n        border-radius: var(--radius-md);\r\n        margin-bottom: var(--space-1);\r\n        transition: all var(--transition-base);\r\n        padding-right: var(--space-2);\r\n        position: relative;\r\n        border: 1px solid transparent; // prevent layout shift when active adds border\r\n\r\n        &:hover {\r\n          background-color: var(--nav-hover-bg);\r\n          border-radius: var(--radius-lg);\r\n        }\r\n\r\n        &:focus {\r\n          outline: none;\r\n        }\r\n\r\n        &:focus-visible {\r\n          outline: 2px solid rgba(var(--brand-primary-rgb), 0.5);\r\n          outline-offset: 2px;\r\n          box-shadow: 0 0 0 2px rgba(var(--brand-primary-rgb), 0.15);\r\n          background-color: var(--nav-hover-bg);\r\n        }\r\n\r\n        &.nav-item-active {\r\n          background: var(--nav-active-bg);\r\n          color: rgba(255, 255, 255, 0.95);\r\n          transform: none;\r\n          box-shadow: none;\r\n          border: 1px solid var(--sidebar-border);\r\n          border-radius: var(--radius-lg);\r\n\r\n          // Left accent bar for active state\r\n          &::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: -1px;\r\n            top: 4px;\r\n            bottom: 4px;\r\n            width: 3px;\r\n            background: var(--brand-primary);\r\n            border-radius: var(--radius-full);\r\n          }\r\n\r\n          .q-icon {\r\n            color: rgba(255, 255, 255, 0.95);\r\n          }\r\n\r\n          .nav-item-label {\r\n            font-weight: var(--font-weight-bold);\r\n          }\r\n        }\r\n\r\n        .nav-item-label {\r\n          font-weight: var(--font-weight-medium);\r\n          font-size: 0.925rem;\r\n          color: rgba(255, 255, 255, 0.92);\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        // Submenu chevron styling\r\n        .submenu-chevron {\r\n          min-width: 24px;\r\n\r\n          .chevron-icon {\r\n            color: rgba(255, 255, 255, 0.5);\r\n            transition: all var(--transition-base);\r\n            transform-origin: center;\r\n          }\r\n        }\r\n\r\n        &.has-submenu:hover .chevron-icon {\r\n          color: var(--brand-primary-light);\r\n        }\r\n\r\n        &.nav-item-active .chevron-icon {\r\n          color: rgba(255, 255, 255, 0.95);\r\n        }\r\n\r\n        .chevron-icon.expanded {\r\n          transform: rotate(180deg);\r\n        }\r\n      }\r\n\r\n      // Section headers\r\n      .navigation-section-header {\r\n        font-size: 0.8rem;\r\n        font-weight: var(--font-weight-bold);\r\n        color: rgba(255, 255, 255, 0.6);\r\n        text-transform: uppercase;\r\n        letter-spacing: 0.05em;\r\n        margin-top: var(--space-4);\r\n        margin-bottom: var(--space-2);\r\n        padding-left: var(--space-4);\r\n\r\n        &:first-of-type {\r\n          margin-top: var(--space-2);\r\n        }\r\n\r\n        // All sections use primary blue color (but lighter for dark background)\r\n        &.section-main,\r\n        &.section-inventory,\r\n        &.section-supply,\r\n        &.section-analytics,\r\n        &.section-admin {\r\n          color: var(--brand-primary-light);\r\n        }\r\n      }\r\n\r\n      // Section separators\r\n      .navigation-separator {\r\n        margin: var(--space-4) var(--space-3);\r\n        background: var(--sidebar-border);\r\n      }\r\n\r\n      // Submenu items\r\n      .nav-sub-item {\r\n        margin-left: var(--space-6);\r\n        border-left: 2px solid var(--sidebar-border);\r\n        border-radius: 0 var(--radius-md) var(--radius-md) 0;\r\n        transition: all var(--transition-base);\r\n        position: relative;\r\n\r\n        &:hover {\r\n          border-left-color: var(--brand-primary);\r\n          background: var(--nav-hover-bg);\r\n          border-radius: 0 var(--radius-lg) var(--radius-lg) 0;\r\n        }\r\n\r\n        &.nav-item-active {\r\n          border-left-color: var(--brand-primary);\r\n          background: var(--nav-active-bg);\r\n          transform: none;\r\n          margin-left: calc(var(--space-6) + 2px);\r\n          border-radius: 0 var(--radius-lg) var(--radius-lg) 0;\r\n          // Inherit active colors from parent active style for consistency\r\n          &::before {\r\n            content: '';\r\n            position: absolute;\r\n            left: -2px;\r\n            top: 2px;\r\n            bottom: 2px;\r\n            width: 3px;\r\n            background: var(--brand-primary);\r\n            border-radius: var(--radius-full);\r\n          }\r\n        }\r\n\r\n        .sub-item-avatar {\r\n          min-width: 32px;\r\n\r\n          .q-icon {\r\n            font-size: 16px;\r\n            opacity: 0.85;\r\n          }\r\n        }\r\n\r\n        .nav-item-label {\r\n          font-size: 0.875rem;\r\n        }\r\n      }\r\n\r\n      // Badge tweaks for better contrast\r\n      .nav-badge :deep(.q-badge__content) {\r\n        font-weight: 600;\r\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n        border: 1px solid rgba(255, 255, 255, 0.4);\r\n      }\r\n    }\r\n\r\n    .quick-stats-section {\r\n      padding: var(--space-4);\r\n      border-top: 1px solid var(--neutral-200);\r\n\r\n      .stats-grid {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        gap: var(--space-3);\r\n        margin-top: var(--space-3);\r\n\r\n        .stat-item {\r\n          text-align: center;\r\n          padding: var(--space-3);\r\n          background: var(--neutral-100);\r\n          border-radius: var(--radius-lg);\r\n          transition: all var(--transition-base);\r\n          cursor: pointer;\r\n\r\n          &:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-sm);\r\n          }\r\n\r\n          &:focus {\r\n            outline: 2px solid var(--brand-primary);\r\n            outline-offset: 2px;\r\n            background-color: var(--neutral-200);\r\n          }\r\n\r\n          .stat-number {\r\n            font-size: 1.25rem;\r\n            font-weight: var(--font-weight-bold);\r\n            color: var(--neutral-900);\r\n          }\r\n\r\n          .stat-label {\r\n            font-size: 0.75rem;\r\n            color: var(--neutral-500);\r\n            font-weight: var(--font-weight-medium);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .drawer-footer {\r\n      padding: var(--space-4);\r\n      border-top: 1px solid var(--sidebar-border);\r\n\r\n      .upgrade-item {\r\n        border-radius: var(--radius-lg);\r\n        cursor: pointer;\r\n        transition: all var(--transition-base);\r\n        box-shadow: none;\r\n\r\n        &:hover {\r\n          transform: translateY(-1px);\r\n          box-shadow: var(--shadow-sm);\r\n        }\r\n\r\n        &:focus {\r\n          outline: 2px solid var(--brand-primary);\r\n          outline-offset: 2px;\r\n          box-shadow: var(--shadow-sm);\r\n        }\r\n      }\r\n\r\n      // removed old drawer-controls\r\n    }\r\n\r\n    // Mini drawer visual adjustments\r\n    &.q-drawer--mini {\r\n      .navigation-list {\r\n        padding-left: var(--space-2);\r\n        padding-right: var(--space-2);\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: var(--space-2);\r\n      }\r\n\r\n      .hide-when-mini {\r\n        display: none;\r\n      }\r\n\r\n      .nav-item,\r\n      .nav-sub-item {\r\n        padding-right: 0;\r\n        justify-content: center;\r\n        align-items: center;\r\n        min-height: 48px; // ensure room for 40px icon bubble\r\n        padding-top: 4px;\r\n        padding-bottom: 4px;\r\n      }\r\n\r\n      // Compact clinic header and prevent logo clipping\r\n      .clinic-info-section {\r\n        padding: var(--space-3);\r\n        justify-content: center;\r\n        .clinic-details {\r\n          display: none;\r\n        }\r\n        .clinic-avatar :deep(.q-avatar) {\r\n          width: 40px;\r\n          height: 40px;\r\n        }\r\n      }\r\n\r\n      // Icon-only styling for hover/active\r\n      .nav-item,\r\n      .nav-sub-item {\r\n        border: none;\r\n        border-radius: var(--radius-lg);\r\n      }\r\n      // In mini mode, show a circular hover around the icon instead of full-row\r\n      .nav-item:hover,\r\n      .nav-sub-item:hover {\r\n        background: transparent;\r\n      }\r\n      .nav-item.nav-item-active,\r\n      .nav-sub-item.nav-item-active {\r\n        background: transparent;\r\n      }\r\n      .nav-item.nav-item-active::before,\r\n      .nav-sub-item.nav-item-active::before {\r\n        display: none;\r\n      }\r\n      .nav-item .q-item__section--avatar,\r\n      .nav-sub-item .q-item__section--avatar {\r\n        border-radius: var(--radius-full);\r\n        transition:\r\n          background-color 160ms ease,\r\n          transform 160ms ease;\r\n      }\r\n      .nav-item:hover .q-item__section--avatar,\r\n      .nav-sub-item:hover .q-item__section--avatar {\r\n        background: var(--nav-hover-bg);\r\n      }\r\n      .nav-item.nav-item-active .q-item__section--avatar,\r\n      .nav-sub-item.nav-item-active .q-item__section--avatar {\r\n        background: rgba(var(--brand-primary-rgb), 0.15);\r\n      }\r\n      .nav-item.nav-item-active .q-item__section--avatar .q-icon,\r\n      .nav-sub-item.nav-item-active .q-item__section--avatar .q-icon {\r\n        color: var(--brand-primary);\r\n      }\r\n      .nav-sub-item {\r\n        margin-left: 0;\r\n        border-left: 0;\r\n      }\r\n\r\n      // Center avatar icon sections and size consistently\r\n      .q-item__section--avatar {\r\n        width: 40px;\r\n        min-width: 40px;\r\n        height: 40px;\r\n        border-radius: var(--radius-full);\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        transition:\r\n          background-color 160ms ease,\r\n          transform 160ms ease,\r\n          box-shadow 160ms ease;\r\n\r\n        .q-icon {\r\n          font-size: 22px;\r\n        }\r\n      }\r\n\r\n      // Hover/active/focus states applied to the circular icon bubble\r\n      .nav-item:hover .q-item__section--avatar,\r\n      .nav-sub-item:hover .q-item__section--avatar {\r\n        background: var(--nav-hover-bg);\r\n      }\r\n      .nav-item.nav-item-active .q-item__section--avatar,\r\n      .nav-sub-item.nav-item-active .q-item__section--avatar {\r\n        background: rgba(var(--brand-primary-rgb), 0.18);\r\n        box-shadow: inset 0 0 0 1px var(--sidebar-border);\r\n      }\r\n      .nav-item:focus-visible .q-item__section--avatar,\r\n      .nav-sub-item:focus-visible .q-item__section--avatar {\r\n        outline: 2px solid rgba(var(--brand-primary-rgb), 0.5);\r\n        outline-offset: 2px;\r\n      }\r\n\r\n      // Subtiele separator-lijn tussen secties\r\n      .navigation-separator {\r\n        margin: var(--space-2) auto;\r\n        width: 28px;\r\n        height: 1px;\r\n        opacity: 0.5;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode styling is now handled by Quasar's native dark prop\r\n  // No custom dark mode CSS needed for navigation drawer\r\n\r\n  // Removed generic .header-actions button styling to avoid conflicts.\r\n\r\n  // Notification badge styling - floating next to icon\r\n  .layout-modern .toolbar-modern .header-actions .q-btn .q-badge {\r\n    font-size: 11px;\r\n    font-weight: 600;\r\n    min-width: 18px;\r\n    height: 18px;\r\n    border: 2px solid white;\r\n    box-shadow: 0 2px 6px rgba(239, 68, 68, 0.3);\r\n    top: -6px;\r\n    right: -10px;\r\n    z-index: 10;\r\n    position: absolute;\r\n  }\r\n\r\n  // Demo badge styling (geel icoontje) - floating next to icon\r\n  .layout-modern .toolbar-modern .header-actions .q-btn .demo-badge {\r\n    font-size: 10px;\r\n    min-width: 16px;\r\n    height: 16px;\r\n    top: -5px;\r\n    right: -8px;\r\n    z-index: 10;\r\n    position: absolute;\r\n  }\r\n\r\n  // User menu\r\n  .layout-modern .toolbar-modern .header-actions .q-menu .q-list {\r\n    min-width: 280px;\r\n    border-radius: 12px;\r\n    padding: 8px;\r\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);\r\n    border: 1px solid rgba(255, 255, 255, 0.1);\r\n    backdrop-filter: blur(16px);\r\n\r\n    .user-info {\r\n      padding: 16px;\r\n      background: rgba(var(--brand-primary-rgb), 0.05);\r\n      border-radius: 8px;\r\n      margin-bottom: 8px;\r\n      border: 1px solid rgba(var(--brand-primary-rgb), 0.1);\r\n    }\r\n\r\n    .q-item {\r\n      border-radius: 6px;\r\n      margin: 2px 4px;\r\n      transition: all 0.2s ease;\r\n\r\n      &:hover:not(.user-info) {\r\n        background: rgba(var(--brand-primary-rgb), 0.08);\r\n        transform: translateX(2px);\r\n      }\r\n\r\n      &.text-negative:hover {\r\n        background: rgba(239, 68, 68, 0.1);\r\n        color: #ef4444;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  body.body--dark {\r\n    .layout-modern .toolbar-modern .header-actions .q-btn {\r\n      color: var(--neutral-300);\r\n      background: rgba(0, 0, 0, 0.6);\r\n      border-color: rgba(255, 255, 255, 0.1);\r\n\r\n      &:hover {\r\n        color: var(--brand-primary);\r\n        background: rgba(0, 0, 0, 0.8);\r\n        border-color: rgba(var(--brand-primary-rgb), 0.4);\r\n      }\r\n    }\r\n\r\n    .layout-modern .toolbar-modern .header-actions .q-menu .q-list {\r\n      background: rgba(30, 30, 30, 0.95);\r\n      border-color: rgba(255, 255, 255, 0.15);\r\n\r\n      .user-info {\r\n        background: rgba(var(--brand-primary-rgb), 0.1);\r\n        border-color: rgba(var(--brand-primary-rgb), 0.2);\r\n      }\r\n\r\n      .q-item:hover:not(.user-info) {\r\n        background: rgba(255, 255, 255, 0.1);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Page container\r\n  .page-container-modern {\r\n    background: var(--neutral-50);\r\n\r\n    .page-content {\r\n      min-height: 100vh;\r\n      transition: background-color var(--transition-base);\r\n    }\r\n  }\r\n\r\n  body.body--dark .page-container-modern {\r\n    background: var(--neutral-100);\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 1023px) {\r\n    .layout-modern .toolbar-modern {\r\n      padding: var(--space-3) var(--space-4);\r\n      min-height: 64px;\r\n\r\n      .brand-text .brand-subtitle {\r\n        display: none;\r\n      }\r\n    }\r\n\r\n    .navigation-drawer {\r\n      .clinic-info-section {\r\n        padding: var(--space-4);\r\n      }\r\n\r\n      .quick-stats-section .stats-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 599px) {\r\n    .layout-modern .toolbar-modern {\r\n      .brand-section {\r\n        margin-left: var(--space-2);\r\n\r\n        .brand-text .brand-title {\r\n          font-size: var(--text-xl);\r\n        }\r\n      }\r\n    }\r\n\r\n    .header-actions {\r\n      gap: 8px;\r\n\r\n      .q-btn {\r\n        width: 42px;\r\n        height: 42px;\r\n\r\n        .q-icon {\r\n          font-size: 20px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Demo styling\r\n  .demo-badge {\r\n    :deep(.q-badge__content) {\r\n      padding: 2px 4px;\r\n    }\r\n  }\r\n\r\n  .demo-status {\r\n    color: var(--q-amber-6);\r\n    font-weight: 500;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top: 2px;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\main.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\AdminDashboard.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 12,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 31,
        "fix": { "range": [261, 312], "text": ":loading=\"loading\"\n            @click=\"refreshData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 13,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 36,
        "fix": {
          "range": [261, 348],
          "text": "class=\"app-btn-refresh\"\n            @click=\"refreshData\"\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 21,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 21,
        "endColumn": 23,
        "fix": { "range": [537, 588], "text": "unelevated\n            @click=\"showSettings = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 22,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 20,
        "fix": {
          "range": [537, 608],
          "text": "no-caps\n            @click=\"showSettings = true\"\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 23,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 23,
        "endColumn": 38,
        "fix": {
          "range": [537, 646],
          "text": "class=\"app-btn-secondary\"\n            @click=\"showSettings = true\"\n            unelevated\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 29,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 29,
        "endColumn": 23,
        "fix": { "range": [761, 812], "text": "unelevated\n            @click=\"showAuditLog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 30,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 30,
        "endColumn": 20,
        "fix": {
          "range": [761, 832],
          "text": "no-caps\n            @click=\"showAuditLog = true\"\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 31,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 31,
        "endColumn": 33,
        "fix": {
          "range": [761, 865],
          "text": "class=\"app-btn-info\"\n            @click=\"showAuditLog = true\"\n            unelevated\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 112,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 112,
        "endColumn": 21,
        "fix": { "range": [3259, 3310], "text": "unelevated\n          @click=\"showInviteUser = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 113,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 113,
        "endColumn": 18,
        "fix": {
          "range": [3259, 3328],
          "text": "no-caps\n          @click=\"showInviteUser = true\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 114,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 114,
        "endColumn": 34,
        "fix": {
          "range": [3259, 3362],
          "text": "class=\"app-btn-success\"\n          @click=\"showInviteUser = true\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 120,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 120,
        "endColumn": 21,
        "fix": { "range": [3468, 3520], "text": "unelevated\n          @click=\"showAddLocation = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 121,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 121,
        "endColumn": 18,
        "fix": {
          "range": [3468, 3538],
          "text": "no-caps\n          @click=\"showAddLocation = true\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 122,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 122,
        "endColumn": 34,
        "fix": {
          "range": [3468, 3572],
          "text": "class=\"app-btn-success\"\n          @click=\"showAddLocation = true\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 128,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 128,
        "endColumn": 21,
        "fix": { "range": [3682, 3731], "text": "unelevated\n          @click=\"downloadOfflineData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 129,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 129,
        "endColumn": 18,
        "fix": {
          "range": [3682, 3749],
          "text": "no-caps\n          @click=\"downloadOfflineData\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 130,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 130,
        "endColumn": 31,
        "fix": {
          "range": [3682, 3780],
          "text": "class=\"app-btn-info\"\n          @click=\"downloadOfflineData\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 137,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 137,
        "endColumn": 21,
        "fix": { "range": [3916, 3955], "text": "unelevated\n          @click=\"forceSync\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 138,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 138,
        "endColumn": 18,
        "fix": { "range": [3916, 3973], "text": "no-caps\n          @click=\"forceSync\"\n          unelevated" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 139,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 139,
        "endColumn": 36,
        "fix": {
          "range": [3916, 4009],
          "text": "class=\"app-btn-secondary\"\n          @click=\"forceSync\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 145,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 145,
        "endColumn": 21,
        "fix": { "range": [4114, 4167], "text": "unelevated\n          @click=\"showExportDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 146,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 146,
        "endColumn": 18,
        "fix": {
          "range": [4114, 4185],
          "text": "no-caps\n          @click=\"showExportDialog = true\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 147,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 147,
        "endColumn": 36,
        "fix": {
          "range": [4114, 4221],
          "text": "class=\"app-btn-secondary\"\n          @click=\"showExportDialog = true\"\n          unelevated\n          no-caps"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-role' instead of 'v-slot:body-cell-role'.",
        "line": 212,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 212,
        "endColumn": 52,
        "fix": { "range": [5834, 5855], "text": "#body-cell-role" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-lastActive' instead of 'v-slot:body-cell-lastActive'.",
        "line": 224,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 224,
        "endColumn": 58,
        "fix": { "range": [6223, 6250], "text": "#body-cell-lastActive" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 230,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 230,
        "endColumn": 55,
        "fix": { "range": [6431, 6455], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-isMain' instead of 'v-slot:body-cell-isMain'.",
        "line": 286,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 286,
        "endColumn": 54,
        "fix": { "range": [8597, 8620], "text": "#body-cell-isMain" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-isActive' instead of 'v-slot:body-cell-isActive'.",
        "line": 300,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 300,
        "endColumn": 56,
        "fix": { "range": [9016, 9041], "text": "#body-cell-isActive" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 314,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 314,
        "endColumn": 55,
        "fix": { "range": [9474, 9498], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-permissionType' instead of 'v-slot:body-cell-permissionType'.",
        "line": 369,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 369,
        "endColumn": 62,
        "fix": { "range": [11238, 11269], "text": "#body-cell-permissionType" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-expiresAt' instead of 'v-slot:body-cell-expiresAt'.",
        "line": 381,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 381,
        "endColumn": 57,
        "fix": { "range": [11639, 11665], "text": "#body-cell-expiresAt" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 399,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 399,
        "endColumn": 55,
        "fix": { "range": [12263, 12287], "text": "#body-cell-actions" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 32,
    "fixableErrorCount": 0,
    "fixableWarningCount": 32,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle :title=\"$t('admin.title')\" icon=\"supervisor_account\">\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            @click=\"refreshData\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            icon=\"tune\"\n            :label=\"$t('admin.settings')\"\n            @click=\"showSettings = true\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n          />\n          <q-btn\n            icon=\"manage_search\"\n            :label=\"$t('admin.audit')\"\n            @click=\"showAuditLog = true\"\n            unelevated\n            no-caps\n            class=\"app-btn-info\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Overview Cards -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('admin.stats.totalUsers')\"\n          icon=\"people\"\n          icon-color=\"primary\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ stats.totalUsers }}</div>\n            <div class=\"stat-trend\">\n              {{ stats.activeUsers }} {{ $t('admin.stats.activeToday') }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('admin.stats.totalLocations')\"\n          icon=\"place\"\n          icon-color=\"positive\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ stats.totalLocations }}</div>\n            <div class=\"stat-trend\">\n              {{ stats.activeLocations }} {{ $t('admin.stats.active') }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('admin.stats.pendingSync')\"\n          icon=\"sync_problem\"\n          icon-color=\"warning\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ stats.pendingSync }}</div>\n            <div class=\"stat-trend\">\n              {{ $t('admin.stats.lastSync') }}: {{ formatDate(stats.lastSync) }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('admin.stats.todayEvents')\"\n          icon=\"event\"\n          icon-color=\"info\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ stats.todayEvents }}</div>\n            <div class=\"stat-trend\">\n              +{{ stats.eventsGrowth }}% {{ $t('admin.stats.fromYesterday') }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Quick Actions -->\n    <BaseCard\n      :title=\"$t('admin.quickActions')\"\n      icon=\"admin_panel_settings\"\n      icon-color=\"primary\"\n      class=\"q-mb-lg\"\n    >\n      <div class=\"row q-gutter-md\">\n        <q-btn\n          :label=\"$t('admin.userManagement.invite')\"\n          icon=\"person_add\"\n          @click=\"showInviteUser = true\"\n          unelevated\n          no-caps\n          class=\"app-btn-success\"\n        />\n        <q-btn\n          :label=\"$t('locations.add')\"\n          icon=\"add_location\"\n          @click=\"showAddLocation = true\"\n          unelevated\n          no-caps\n          class=\"app-btn-success\"\n        />\n        <q-btn\n          :label=\"$t('offline.data.download')\"\n          icon=\"download\"\n          @click=\"downloadOfflineData\"\n          unelevated\n          no-caps\n          class=\"app-btn-info\"\n        />\n        <q-btn\n          :label=\"$t('offline.sync.forceSync')\"\n          icon=\"sync\"\n          :loading=\"syncing\"\n          @click=\"forceSync\"\n          unelevated\n          no-caps\n          class=\"app-btn-secondary\"\n        />\n        <q-btn\n          :label=\"$t('exports.title')\"\n          icon=\"table_chart\"\n          @click=\"showExportDialog = true\"\n          unelevated\n          no-caps\n          class=\"app-btn-secondary\"\n        />\n      </div>\n    </BaseCard>\n\n    <!-- 🎭 Revolutionary Magic Invite System -->\n    <BaseCard\n      :title=\"$t('magicInvite.revolutionaryUserSystem')\"\n      icon=\"auto_awesome\"\n      icon-color=\"secondary\"\n      class=\"q-mb-lg\"\n    >\n      <MagicInviteManager />\n    </BaseCard>\n\n    <!-- 👥 Team Overview - Auto-Upgrade System -->\n    <BaseCard\n      :title=\"$t('admin.teamOverview')\"\n      icon=\"group\"\n      icon-color=\"primary\"\n      class=\"q-mb-lg\"\n    >\n      <TeamOverview />\n    </BaseCard>\n\n    <!-- Tabs for different admin sections -->\n    <q-tabs\n      v-model=\"activeTab\"\n      class=\"text-grey\"\n      active-color=\"primary\"\n      indicator-color=\"primary\"\n      align=\"justify\"\n      narrow-indicator\n    >\n      <q-tab name=\"users\" :label=\"$t('admin.users')\" icon=\"people\" />\n      <q-tab\n        name=\"locations\"\n        :label=\"$t('admin.locations')\"\n        icon=\"location_on\"\n      />\n      <q-tab\n        name=\"permissions\"\n        :label=\"$t('admin.permissions')\"\n        icon=\"security\"\n      />\n      <q-tab name=\"analytics\" :label=\"$t('admin.analytics')\" icon=\"analytics\" />\n    </q-tabs>\n\n    <q-separator />\n\n    <q-tab-panels v-model=\"activeTab\" animated>\n      <!-- Users Tab -->\n      <q-tab-panel name=\"users\">\n        <div class=\"text-h6 q-mb-md\">\n          {{ $t('admin.userManagement.title') }}\n        </div>\n\n        <div class=\"medical-table\">\n          <q-table\n            :rows=\"users\"\n            :columns=\"userColumns\"\n            :loading=\"loadingUsers\"\n            row-key=\"id\"\n            :pagination=\"{ rowsPerPage: 10 }\"\n          >\n            <template v-slot:body-cell-role=\"props\">\n              <q-td :props=\"props\">\n                <q-chip\n                  :color=\"getRoleColor(props.value)\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                >\n                  {{ $t(`permissions.templates.${props.value}`) }}\n                </q-chip>\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-lastActive=\"props\">\n              <q-td :props=\"props\">\n                {{ props.value ? formatDate(props.value) : '-' }}\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-actions=\"props\">\n              <q-td :props=\"props\">\n                <q-btn-group dense>\n                  <q-btn icon=\"edit\" dense flat @click=\"editUser(props.row)\" />\n                  <q-btn\n                    icon=\"security\"\n                    dense\n                    flat\n                    @click=\"manageUserPermissions(props.row)\"\n                  />\n                  <q-btn icon=\"more_vert\" dense flat>\n                    <q-menu>\n                      <q-list dense>\n                        <q-item clickable @click=\"resetUserPassword(props.row)\">\n                          <q-item-section avatar>\n                            <q-icon name=\"lock_reset\" />\n                          </q-item-section>\n                          <q-item-section>Reset Password</q-item-section>\n                        </q-item>\n                        <q-item clickable @click=\"toggleUserStatus(props.row)\">\n                          <q-item-section avatar>\n                            <q-icon\n                              :name=\"props.row.active ? 'block' : 'check'\"\n                            />\n                          </q-item-section>\n                          <q-item-section>\n                            {{ props.row.active ? 'Deactivate' : 'Activate' }}\n                          </q-item-section>\n                        </q-item>\n                      </q-list>\n                    </q-menu>\n                  </q-btn>\n                </q-btn-group>\n              </q-td>\n            </template>\n          </q-table>\n        </div>\n\n        <!-- Demo Reset Card (only for demo user) -->\n        <div v-if=\"authStore.userEmail === 'demo@remcura.com'\" class=\"q-mt-lg\">\n          <DemoResetCard />\n        </div>\n      </q-tab-panel>\n\n      <!-- Locations Tab -->\n      <q-tab-panel name=\"locations\">\n        <div class=\"text-h6 q-mb-md\">{{ $t('locations.title') }}</div>\n\n        <div class=\"medical-table\">\n          <q-table\n            :rows=\"locations\"\n            :columns=\"locationColumns\"\n            :loading=\"loadingLocations\"\n            row-key=\"id\"\n            :pagination=\"{ rowsPerPage: 10 }\"\n          >\n            <template v-slot:body-cell-isMain=\"props\">\n              <q-td :props=\"props\">\n                <q-chip\n                  v-if=\"props.value\"\n                  color=\"primary\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                  icon=\"star\"\n                >\n                  {{ $t('locations.isMain') }}\n                </q-chip>\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-isActive=\"props\">\n              <q-td :props=\"props\">\n                <q-chip\n                  :color=\"props.value ? 'positive' : 'negative'\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                >\n                  {{\n                    props.value ? $t('common.active') : $t('common.inactive')\n                  }}\n                </q-chip>\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-actions=\"props\">\n              <q-td :props=\"props\">\n                <q-btn-group dense>\n                  <q-btn\n                    icon=\"edit\"\n                    size=\"sm\"\n                    flat\n                    @click=\"editLocation(props.row)\"\n                  />\n                  <q-btn\n                    v-if=\"!props.row.is_main\"\n                    icon=\"star\"\n                    size=\"sm\"\n                    flat\n                    @click=\"setMainLocation(props.row)\"\n                  />\n                  <q-btn\n                    icon=\"people\"\n                    size=\"sm\"\n                    flat\n                    @click=\"manageLocationAccess(props.row)\"\n                  />\n                </q-btn-group>\n              </q-td>\n            </template>\n          </q-table>\n        </div>\n      </q-tab-panel>\n\n      <!-- Permissions Tab -->\n      <q-tab-panel name=\"permissions\">\n        <div class=\"text-h6 q-mb-md\">{{ $t('permissions.title') }}</div>\n\n        <BaseCard :title=\"$t('permissions.templates.title')\">\n          <div class=\"row q-gutter-md\">\n            <q-btn\n              v-for=\"template in permissionTemplates\"\n              :key=\"template.key\"\n              :label=\"$t(`permissions.templates.${template.key}`)\"\n              :icon=\"template.icon\"\n              :color=\"template.color\"\n              @click=\"showPermissionTemplate(template)\"\n            />\n          </div>\n        </BaseCard>\n\n        <div class=\"medical-table\">\n          <q-table\n            :rows=\"permissions\"\n            :columns=\"permissionColumns\"\n            :loading=\"loadingPermissions\"\n            row-key=\"id\"\n            :pagination=\"{ rowsPerPage: 15 }\"\n            class=\"q-mt-md\"\n          >\n            <template v-slot:body-cell-permissionType=\"props\">\n              <q-td :props=\"props\">\n                <q-chip\n                  :color=\"getPermissionColor(props.value)\"\n                  text-color=\"white\"\n                  size=\"sm\"\n                >\n                  {{ $t(`permissions.types.${props.value}`) }}\n                </q-chip>\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-expiresAt=\"props\">\n              <q-td :props=\"props\">\n                <span v-if=\"props.value\">\n                  {{ formatDate(props.value) }}\n                  <q-chip\n                    v-if=\"isExpiringSoon(props.value)\"\n                    color=\"warning\"\n                    text-color=\"white\"\n                    size=\"sm\"\n                    icon=\"warning\"\n                  >\n                    Expiring Soon\n                  </q-chip>\n                </span>\n                <span v-else class=\"text-grey-6\">No Expiry</span>\n              </q-td>\n            </template>\n\n            <template v-slot:body-cell-actions=\"props\">\n              <q-td :props=\"props\">\n                <q-btn\n                  icon=\"delete\"\n                  size=\"sm\"\n                  flat\n                  color=\"negative\"\n                  @click=\"revokePermission(props.row)\"\n                />\n              </q-td>\n            </template>\n          </q-table>\n        </div>\n      </q-tab-panel>\n\n      <!-- Analytics Tab -->\n      <q-tab-panel name=\"analytics\">\n        <div class=\"text-h6 q-mb-md\">{{ $t('analytics.dashboard') }}</div>\n\n        <div class=\"row q-gutter-md\">\n          <div class=\"col-12 col-md-6\">\n            <BaseCard :title=\"$t('analytics.usage')\">\n              <div class=\"q-mt-md\">\n                <div\n                  v-for=\"event in topEvents\"\n                  :key=\"event.type\"\n                  class=\"row items-center q-mb-sm\"\n                >\n                  <div class=\"col-6\">\n                    {{ $t(`analytics.events.${event.type}`) }}\n                  </div>\n                  <div class=\"col-6 text-right\">\n                    <q-linear-progress\n                      :value=\"event.count / topEvents[0]?.count || 0\"\n                      color=\"primary\"\n                      class=\"q-mr-sm\"\n                      style=\"width: 60px; display: inline-block\"\n                    />\n                    {{ event.count }}\n                  </div>\n                </div>\n              </div>\n            </BaseCard>\n          </div>\n\n          <div class=\"col-12 col-md-6\">\n            <BaseCard :title=\"$t('analytics.patterns')\">\n              <div class=\"q-mt-md\">\n                <div class=\"text-h6\">\n                  {{ analyticsData.averageSessionTime }}min\n                </div>\n                <div class=\"text-caption\">\n                  {{ $t('analytics.metrics.averageSession') }}\n                </div>\n\n                <div class=\"q-mt-md\">\n                  <div class=\"text-h6\">{{ analyticsData.peakHour }}:00</div>\n                  <div class=\"text-caption\">\n                    {{ $t('analytics.metrics.peakHours') }}\n                  </div>\n                </div>\n              </div>\n            </BaseCard>\n          </div>\n        </div>\n      </q-tab-panel>\n    </q-tab-panels>\n\n    <!-- Dialogs and modals would go here -->\n    <!-- For brevity, I'll just include the main structure -->\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, reactive, onMounted, computed } from 'vue';\n  import { useI18n } from 'vue-i18n';\n  import { useQuasar } from 'quasar';\n  import { useAuthStore } from '@/stores/auth';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import { BaseCard } from '@/components/cards';\n  import DemoResetCard from '@/components/admin/DemoResetCard.vue';\n  import MagicInviteManager from '@/components/admin/MagicInviteManager.vue';\n  import TeamOverview from '@/components/admin/TeamOverview.vue';\n  import { adminService } from '@/services/admin';\n  import { analyticsService } from '@/services/analytics';\n  import { offlineService } from '@/services/offline';\n  import type {\n    Location,\n    PracticeMember,\n    UserPermission,\n  } from '@/types/supabase';\n\n  // Composables\n  const { t } = useI18n();\n  const $q = useQuasar();\n  const authStore = useAuthStore();\n\n  // State\n  const activeTab = ref('users');\n  const loadingUsers = ref(false);\n  const loadingLocations = ref(false);\n  const loadingPermissions = ref(false);\n  const syncing = ref(false);\n  const showSettings = ref(false);\n  const showAuditLog = ref(false);\n  const showInviteUser = ref(false);\n  const showAddLocation = ref(false);\n  const showExportDialog = ref(false);\n\n  // Data\n  const users = ref<PracticeMember[]>([]);\n  const locations = ref<Location[]>([]);\n  const permissions = ref<UserPermission[]>([]);\n  const topEvents = ref<Array<{ type: string; count: number }>>([]);\n\n  // Stats\n  const stats = reactive({\n    totalUsers: 0,\n    activeUsers: 0,\n    totalLocations: 0,\n    activeLocations: 0,\n    pendingSync: 0,\n    lastSync: null as Date | null,\n    todayEvents: 0,\n    eventsGrowth: 0,\n  });\n\n  // Analytics data with proper typing\n  interface AnalyticsData {\n    averageSessionTime: number;\n    peakHour: number;\n    totalEvents: number;\n    topEvents: Array<{ type: string; count: number }>;\n  }\n\n  // Analytics data\n  const analyticsData = reactive<AnalyticsData>({\n    averageSessionTime: 0,\n    peakHour: 0,\n    totalEvents: 0,\n    topEvents: [],\n  });\n\n  // Table columns\n  const userColumns = computed(() => [\n    {\n      name: 'email',\n      label: t('admin.userManagement.email'),\n      align: 'left' as const,\n      field: 'email',\n      sortable: true,\n    },\n    {\n      name: 'role',\n      label: t('admin.userManagement.roles'),\n      align: 'center' as const,\n      field: 'role',\n      sortable: true,\n    },\n    {\n      name: 'lastActive',\n      label: t('admin.userManagement.lastActive'),\n      align: 'left' as const,\n      field: 'last_active',\n      sortable: true,\n    },\n    {\n      name: 'actions',\n      label: t('common.actions'),\n      align: 'center' as const,\n      field: () => '',\n      sortable: false,\n    },\n  ]);\n\n  const locationColumns = computed(() => [\n    {\n      name: 'name',\n      label: t('locations.name'),\n      align: 'left' as const,\n      field: 'name',\n      sortable: true,\n    },\n    {\n      name: 'city',\n      label: t('locations.city'),\n      align: 'left' as const,\n      field: 'city',\n      sortable: true,\n    },\n    {\n      name: 'isMain',\n      label: t('locations.isMain'),\n      align: 'center' as const,\n      field: 'is_main',\n      sortable: false,\n    },\n    {\n      name: 'isActive',\n      label: t('common.status'),\n      align: 'center' as const,\n      field: 'is_active',\n      sortable: false,\n    },\n    {\n      name: 'actions',\n      label: t('common.actions'),\n      align: 'center' as const,\n      field: () => '',\n      sortable: false,\n    },\n  ]);\n\n  const permissionColumns = computed(() => [\n    {\n      name: 'user',\n      label: t('permissions.user'),\n      align: 'left' as const,\n      field: 'user_id',\n      sortable: false,\n    },\n    {\n      name: 'permissionType',\n      label: t('permissions.permissionType'),\n      align: 'center' as const,\n      field: 'permission_type',\n      sortable: false,\n    },\n    {\n      name: 'resourceType',\n      label: t('permissions.resourceType'),\n      align: 'left' as const,\n      field: 'resource_type',\n      sortable: false,\n    },\n    {\n      name: 'expiresAt',\n      label: t('permissions.expiresAt'),\n      align: 'left' as const,\n      field: 'expires_at',\n      sortable: false,\n    },\n    {\n      name: 'actions',\n      label: t('common.actions'),\n      align: 'center' as const,\n      field: () => '',\n      sortable: false,\n    },\n  ]);\n\n  // Permission templates\n  const permissionTemplates = [\n    { key: 'assistant', icon: 'support_agent', color: 'blue' },\n    { key: 'manager', icon: 'supervisor_account', color: 'orange' },\n    { key: 'admin', icon: 'admin_panel_settings', color: 'red' },\n  ];\n\n  // Methods\n  const loadData = async () => {\n    await Promise.all([\n      loadUsers(),\n      loadLocations(),\n      loadPermissions(),\n      loadStats(),\n      loadAnalytics(),\n    ]);\n  };\n\n  const loadUsers = async () => {\n    try {\n      loadingUsers.value = true;\n      users.value = await adminService.getPracticeMembers();\n      stats.totalUsers = users.value.length;\n      // Calculate active users (simplified)\n      stats.activeUsers = users.value.filter(u => u.role !== 'inactive').length;\n    } catch (error) {\n      console.error('Failed to load users:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('admin.errors.loadUsersFailed'),\n      });\n    } finally {\n      loadingUsers.value = false;\n    }\n  };\n\n  const loadLocations = async () => {\n    try {\n      loadingLocations.value = true;\n      locations.value = await adminService.getLocations();\n      stats.totalLocations = locations.value.length;\n      stats.activeLocations = locations.value.filter(l => l.is_active).length;\n    } catch (error) {\n      console.error('Failed to load locations:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('admin.errors.loadLocationsFailed'),\n      });\n    } finally {\n      loadingLocations.value = false;\n    }\n  };\n\n  const loadPermissions = async () => {\n    try {\n      loadingPermissions.value = true;\n      permissions.value = await adminService.getUserPermissions();\n    } catch (error) {\n      console.error('Failed to load permissions:', error);\n    } finally {\n      loadingPermissions.value = false;\n    }\n  };\n\n  const loadStats = async () => {\n    try {\n      const syncStatus = offlineService.getSyncStatus();\n      stats.pendingSync = syncStatus.pendingActions;\n      stats.lastSync = syncStatus.lastSync;\n    } catch (error) {\n      console.error('Failed to load stats:', error);\n    }\n  };\n\n  const loadAnalytics = async () => {\n    try {\n      const summary = await analyticsService.getEventSummary();\n      stats.todayEvents = summary.totalEvents;\n      analyticsData.totalEvents = summary.totalEvents;\n      analyticsData.topEvents = summary.topEvents\n        .slice(0, 5)\n        .map(([type, count]: [string, number]) => ({ type, count }));\n      topEvents.value = analyticsData.topEvents;\n\n      // Mock analytics data (in real app, would come from analytics service)\n      analyticsData.averageSessionTime = 15;\n      analyticsData.peakHour = 14;\n    } catch (error) {\n      console.error('Failed to load analytics:', error);\n    }\n  };\n\n  const downloadOfflineData = async () => {\n    try {\n      await offlineService.downloadLatestData();\n      $q.notify({\n        type: 'positive',\n        message: t('offline.messages.syncCompleted'),\n      });\n    } catch (error) {\n      console.error('Failed to download offline data:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('offline.errors.downloadFailed'),\n      });\n    }\n  };\n\n  const forceSync = async () => {\n    try {\n      syncing.value = true;\n      await offlineService.forceSyncNow();\n      await loadStats(); // Refresh stats\n      $q.notify({\n        type: 'positive',\n        message: t('offline.messages.syncCompleted'),\n      });\n    } catch (error) {\n      console.error('Failed to force sync:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('offline.messages.syncFailed'),\n      });\n    } finally {\n      syncing.value = false;\n    }\n  };\n\n  // Helper methods\n  const formatDate = (date: string | Date | null): string => {\n    if (!date) {\n      return '-';\n    }\n    return new Date(date).toLocaleDateString();\n  };\n\n  const getRoleColor = (role: string): string => {\n    const colors = {\n      owner: 'red',\n      assistant: 'blue',\n      manager: 'orange',\n      viewer: 'grey',\n    };\n    return colors[role as keyof typeof colors] || 'grey';\n  };\n\n  const getPermissionColor = (type: string): string => {\n    const colors = {\n      read: 'blue',\n      write: 'orange',\n      delete: 'red',\n      admin: 'purple',\n    };\n    return colors[type as keyof typeof colors] || 'grey';\n  };\n\n  const isExpiringSoon = (expiryDate: string): boolean => {\n    if (!expiryDate) {\n      return false;\n    }\n    const expiry = new Date(expiryDate);\n    const now = new Date();\n    const daysUntilExpiry =\n      (expiry.getTime() - now.getTime()) / (1000 * 60 * 60 * 24);\n    return daysUntilExpiry <= 7 && daysUntilExpiry > 0;\n  };\n\n  // Action handlers (simplified for brevity)\n  const editUser = (user: PracticeMember) => {\n    $q.notify({\n      type: 'info',\n      message: $t('admin.userManagement.editingUser', { userId: user.user_id }),\n    });\n  };\n\n  const manageUserPermissions = (user: PracticeMember) => {\n    $q.notify({\n      type: 'info',\n      message: $t('admin.userManagement.managingPermissions', {\n        userId: user.user_id,\n      }),\n    });\n  };\n\n  // Add missing methods\n  const resetUserPassword = async (user: PracticeMember) => {\n    try {\n      $q.dialog({\n        title: 'Reset Password',\n        message: $t('admin.userManagement.resetPasswordConfirm', {\n          userId: user.user_id,\n        }),\n        cancel: true,\n        persistent: true,\n      }).onOk(async () => {\n        await adminService.resetUserPassword(user.user_id);\n        $q.notify({\n          type: 'positive',\n          message:\n            t('admin.userManagement.resetPassword') +\n            ' - ' +\n            t('common.success'),\n        });\n      });\n    } catch (error) {\n      console.error('Failed to reset user password:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('admin.errors.failedToSet'),\n      });\n    }\n  };\n\n  const toggleUserStatus = async (user: PracticeMember) => {\n    try {\n      const action = user.role === 'inactive' ? 'activate' : 'deactivate';\n      $q.dialog({\n        title: `${action.charAt(0).toUpperCase() + action.slice(1)} User`,\n        message: $t('admin.userManagement.actionConfirm', {\n          action,\n          userId: user.user_id,\n        }),\n        cancel: true,\n        persistent: true,\n      }).onOk(async () => {\n        await adminService.toggleUserStatus(\n          user.user_id,\n          action === 'activate'\n        );\n        await loadUsers();\n        $q.notify({\n          type: 'positive',\n          message:\n            t('admin.userManagement.' + action) + ' - ' + t('common.success'),\n        });\n      });\n    } catch (error) {\n      console.error('Failed to toggle user status:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('admin.errors.failedToUpdate'),\n      });\n    }\n  };\n\n  const manageLocationAccess = (location: Location) => {\n    $q.notify({\n      type: 'info',\n      message: $t('admin.locationManagement.managingAccess', {\n        locationName: location.name,\n      }),\n    });\n    // TODO: Implement location access management dialog\n  };\n\n  const showPermissionTemplate = (template: {\n    key: string;\n    icon: string;\n    color: string;\n  }) => {\n    $q.notify({\n      type: 'info',\n      message: $t('admin.permissionTemplates.showing', {\n        templateKey: template.key,\n      }),\n    });\n    // TODO: Implement permission template display dialog\n  };\n\n  const editLocation = (location: Location) => {\n    $q.notify({\n      type: 'info',\n      message: $t('admin.locationManagement.editing', {\n        locationName: location.name,\n      }),\n    });\n  };\n\n  const setMainLocation = async (location: Location) => {\n    try {\n      await adminService.setMainLocation(location.id);\n      await loadLocations();\n      $q.notify({\n        type: 'positive',\n        message: t('locations.notifications.mainLocationSet'),\n      });\n    } catch (error) {\n      console.error('Failed to set main location:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('locations.errors.setMainFailed'),\n      });\n    }\n  };\n\n  const revokePermission = async (permission: UserPermission) => {\n    try {\n      await adminService.revokePermission(permission.id);\n      await loadPermissions();\n      $q.notify({\n        type: 'positive',\n        message: t('permissions.notifications.revoked'),\n      });\n    } catch (error) {\n      console.error('Failed to revoke permission:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('permissions.errors.revokeFailed'),\n      });\n    }\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    loadData();\n  });\n</script>\n\n<style scoped>\n  .admin-dashboard {\n    max-width: 1200px;\n    margin: 0 auto;\n  }\n\n  .stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 16px;\n  }\n\n  .stats-cards-container {\n    gap: 0;\n\n    .stats-card-col {\n      padding: 8px;\n\n      @media (max-width: 640px) {\n        padding: 6px;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\AnalyticsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 16,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 31,
        "fix": { "range": [354, 410], "text": ":loading=\"loading\"\n            @click=\"refreshAnalytics\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [354, 446],
          "text": "class=\"app-btn-refresh\"\n            @click=\"refreshAnalytics\"\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 25,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 25,
        "endColumn": 33,
        "fix": { "range": [643, 700], "text": ":loading=\"exporting\"\n            @click=\"exportAnalytics\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 26,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 26,
        "endColumn": 23,
        "fix": {
          "range": [643, 723],
          "text": "unelevated\n            @click=\"exportAnalytics\"\n            :loading=\"exporting\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 27,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 27,
        "endColumn": 20,
        "fix": {
          "range": [643, 743],
          "text": "no-caps\n            @click=\"exportAnalytics\"\n            :loading=\"exporting\"\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 28,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 38,
        "fix": {
          "range": [643, 781],
          "text": "class=\"app-btn-secondary\"\n            @click=\"exportAnalytics\"\n            :loading=\"exporting\"\n            unelevated\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"option-value\" should go before \"@update:model-value\".",
        "line": 43,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 43,
        "endColumn": 31,
        "fix": {
          "range": [1121, 1187],
          "text": "option-value=\"value\"\n          @update:model-value=\"loadAnalytics\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"option-label\" should go before \"@update:model-value\".",
        "line": 44,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 31,
        "fix": {
          "range": [1121, 1218],
          "text": "option-label=\"label\"\n          @update:model-value=\"loadAnalytics\"\n          option-value=\"value\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"emit-value\" should go before \"@update:model-value\".",
        "line": 45,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 45,
        "endColumn": 21,
        "fix": {
          "range": [1121, 1239],
          "text": "emit-value\n          @update:model-value=\"loadAnalytics\"\n          option-value=\"value\"\n          option-label=\"label\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"map-options\" should go before \"@update:model-value\".",
        "line": 46,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 46,
        "endColumn": 22,
        "fix": {
          "range": [1121, 1261],
          "text": "map-options\n          @update:model-value=\"loadAnalytics\"\n          option-value=\"value\"\n          option-label=\"label\"\n          emit-value"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"style\" should go before \"@update:model-value\".",
        "line": 47,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 54,
        "endColumn": 12,
        "fix": {
          "range": [1121, 1492],
          "text": "style=\"\n            min-width: 200px;\n            max-width: 240px;\n            border: 2px solid #e5e7eb;\n            border-radius: 8px;\n            background: var(--surface);\n            min-height: 48px;\n          \"\n          @update:model-value=\"loadAnalytics\"\n          option-value=\"value\"\n          option-label=\"label\"\n          emit-value\n          map-options"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#no-data' instead of 'v-slot:no-data'.",
        "line": 204,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 204,
        "endColumn": 53,
        "fix": { "range": [6311, 6325], "text": "#no-data" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#no-data' instead of 'v-slot:no-data'.",
        "line": 231,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 231,
        "endColumn": 51,
        "fix": { "range": [7177, 7191], "text": "#no-data" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#no-data' instead of 'v-slot:no-data'.",
        "line": 254,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 254,
        "endColumn": 51,
        "fix": { "range": [7936, 7950], "text": "#no-data" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 14,
    "source": "<template>\n  <PageLayout class=\"analytics-page\">\n    <template #header>\n      <PageTitle\n        :title=\"$t('analyticsPage.title')\"\n        :subtitle=\"$t('analyticsPage.subtitle')\"\n        icon=\"insights\"\n      >\n        <template #actions>\n          <q-btn\n            flat\n            round\n            icon=\"refresh\"\n            size=\"md\"\n            @click=\"refreshAnalytics\"\n            :loading=\"loading\"\n            class=\"app-btn-refresh\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n          <q-btn\n            icon=\"file_download\"\n            :label=\"$t('common.export')\"\n            @click=\"exportAnalytics\"\n            :loading=\"exporting\"\n            unelevated\n            no-caps\n            class=\"app-btn-secondary\"\n          />\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Date Range Filter -->\n    <div class=\"row q-gutter-md q-mb-lg\">\n      <div class=\"period-filter\">\n        <q-select\n          v-model=\"selectedPeriod\"\n          :options=\"periodOptions\"\n          :label=\"$t('analyticsPage.period')\"\n          outlined\n          @update:model-value=\"loadAnalytics\"\n          option-value=\"value\"\n          option-label=\"label\"\n          emit-value\n          map-options\n          style=\"\n            min-width: 200px;\n            max-width: 240px;\n            border: 2px solid #e5e7eb;\n            border-radius: 8px;\n            background: var(--surface);\n            min-height: 48px;\n          \"\n        />\n      </div>\n    </div>\n\n    <!-- Key Metrics Cards -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('analyticsPage.totalEvents')\"\n          icon=\"event\"\n          icon-color=\"primary\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ summary.totalEvents || 0 }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('analyticsPage.activeUsers')\"\n          icon=\"people\"\n          icon-color=\"secondary\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ summary.activeUsers || 0 }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('analyticsPage.totalOrders')\"\n          icon=\"shopping_cart\"\n          icon-color=\"positive\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ orderMetrics.totalOrders || 0 }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('analyticsPage.productUpdates')\"\n          icon=\"update\"\n          icon-color=\"info\"\n        >\n          <div class=\"stat-display\">\n            <div class=\"stat-value\">{{ productMetrics.totalUpdates || 0 }}</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Charts Row -->\n    <div class=\"row q-gutter-md q-mb-lg\">\n      <!-- Daily Activity Summary -->\n      <div class=\"col-12 col-lg-8\">\n        <BaseCard :title=\"$t('analyticsPage.dailyActivity')\">\n          <div\n            v-if=\"!loading && dailyChartData.length > 0\"\n            class=\"activity-summary\"\n          >\n            <div\n              v-for=\"item in dailyChartData.slice(-7)\"\n              :key=\"item.date\"\n              class=\"activity-item q-mb-sm\"\n            >\n              <div class=\"row items-center\">\n                <div class=\"col text-body2\">\n                  {{ new Date(item.date).toLocaleDateString() }}\n                </div>\n                <div class=\"col-auto text-weight-bold\">{{ item.count }}</div>\n              </div>\n              <q-linear-progress\n                :value=\"\n                  dailyChartData.length > 0\n                    ? item.count / Math.max(...dailyChartData.map(d => d.count))\n                    : 0\n                \"\n                color=\"primary\"\n                size=\"4px\"\n                class=\"q-mt-xs\"\n              />\n            </div>\n          </div>\n          <div v-else-if=\"loading\" class=\"activity-placeholder\">\n            <q-spinner-dots size=\"50px\" color=\"primary\" />\n          </div>\n          <div v-else class=\"activity-placeholder\">\n            <div class=\"text-grey-6\">\n              No activity data available for selected period\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Top Events Chart -->\n      <div class=\"col-12 col-lg-4\">\n        <BaseCard :title=\"$t('analyticsPage.topEvents')\">\n          <div v-if=\"summary.topEvents && summary.topEvents.length > 0\">\n            <div\n              v-for=\"[event, count] in (summary.topEvents || []).slice(0, 5)\"\n              :key=\"event\"\n              class=\"q-mb-sm\"\n            >\n              <div class=\"row items-center\">\n                <div class=\"col text-body2\">{{ formatEventType(event) }}</div>\n                <div class=\"col-auto text-weight-bold\">{{ count }}</div>\n              </div>\n              <q-linear-progress\n                :value=\"\n                  summary.topEvents &&\n                  summary.topEvents.length > 0 &&\n                  summary.topEvents[0]\n                    ? count / summary.topEvents[0][1]\n                    : 0\n                \"\n                color=\"primary\"\n                size=\"4px\"\n                class=\"q-mt-xs\"\n              />\n            </div>\n          </div>\n          <div v-else class=\"text-grey-6 text-center q-pa-md\">\n            No event data available\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Analytics Tables -->\n    <div class=\"row q-gutter-md q-mb-lg\">\n      <!-- Frequently Ordered Items -->\n      <div class=\"col-12 col-lg-6\">\n        <BaseCard\n          :title=\"$t('analyticsPage.frequentlyOrderedItems')\"\n          padding=\"none\"\n        >\n          <div class=\"medical-table\">\n            <q-table\n              :rows=\"orderMetrics.frequentlyOrderedItems || []\"\n              :columns=\"frequentlyOrderedColumns\"\n              row-key=\"product_id\"\n              :loading=\"loading\"\n              flat\n              bordered\n            >\n              <template v-slot:no-data=\"{ message }\">\n                <div class=\"full-width row flex-center text-grey q-gutter-sm\">\n                  <q-icon size=\"2em\" name=\"shopping_cart\" />\n                  <span>{{\n                    message || 'No frequently ordered items found'\n                  }}</span>\n                </div>\n              </template>\n            </q-table>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Most Updated Products -->\n      <div class=\"col-12 col-lg-6\">\n        <BaseCard\n          :title=\"$t('analyticsPage.mostUpdatedProducts')\"\n          padding=\"none\"\n        >\n          <q-table\n            :rows=\"productMetrics.mostUpdatedProducts || []\"\n            :columns=\"mostUpdatedProductsColumns\"\n            row-key=\"product_id\"\n            :loading=\"loading\"\n            flat\n            bordered\n          >\n            <template v-slot:no-data=\"{ message }\">\n              <div class=\"full-width row flex-center text-grey q-gutter-sm\">\n                <q-icon size=\"2em\" name=\"inventory\" />\n                <span>{{ message || 'No product updates found' }}</span>\n              </div>\n            </template>\n          </q-table>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- User Activity Table -->\n    <div class=\"row q-gutter-md\">\n      <div class=\"col-12\">\n        <BaseCard :title=\"$t('analyticsPage.userActivity')\" padding=\"none\">\n          <q-table\n            :rows=\"userActivity.userList || []\"\n            :columns=\"userActivityColumns\"\n            row-key=\"user_id\"\n            :loading=\"loading\"\n            flat\n            bordered\n          >\n            <template v-slot:no-data=\"{ message }\">\n              <div class=\"full-width row flex-center text-grey q-gutter-sm\">\n                <q-icon size=\"2em\" name=\"people\" />\n                <span>{{ message || 'No user activity found' }}</span>\n              </div>\n            </template>\n          </q-table>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Loading State -->\n    <q-inner-loading :showing=\"loading\">\n      <q-spinner-dots size=\"50px\" color=\"primary\" />\n    </q-inner-loading>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted, nextTick, computed } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import { useButtons } from 'src/composables/useButtons';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\n  import {\n    AnalyticsService,\n    type AnalyticsSummary,\n    type OrderMetrics,\n    type ProductMetrics,\n    type UserActivityMetrics,\n  } from 'src/services/analytics';\n  import { monitoringService } from 'src/services/monitoring';\n\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const { quickActions } = useButtons();\n\n  // Button configurations\n  const exportBtn = computed(() =>\n    quickActions.export({\n      label: t('analyticsPage.export'),\n      variant: 'outline',\n    })\n  );\n\n  // Refs\n  const loading = ref(false);\n  const exporting = ref(false);\n\n  // Data\n  const selectedPeriod = ref('7d');\n  const summary = ref<AnalyticsSummary>({\n    totalEvents: 0,\n    activeUsers: 0,\n    totalOrders: 0,\n    productUpdates: 0,\n    topEvents: [],\n    userActivity: {},\n    dailyActivity: {},\n  });\n  const orderMetrics = ref<OrderMetrics>({\n    totalOrders: 0,\n    totalOrderValue: 0,\n    averageOrderSize: 0,\n    ordersByStatus: {},\n    frequentlyOrderedItems: [],\n    orderTrends: {},\n  });\n  const productMetrics = ref<ProductMetrics>({\n    totalUpdates: 0,\n    productsScanned: 0,\n    lowStockAlerts: 0,\n    stockEntryTrends: {},\n    mostUpdatedProducts: [],\n  });\n  const userActivity = ref<UserActivityMetrics>({\n    activeUsers: 0,\n    totalSessions: 0,\n    averageSessionDuration: 0,\n    userList: [],\n  });\n  const dailyChartData = ref<Array<{ date: string; count: number }>>([]);\n\n  // Options - computed for reactivity\n  const periodOptions = computed(() => [\n    { label: t('analyticsPage.periods.7d'), value: '7d' },\n    { label: t('analyticsPage.periods.30d'), value: '30d' },\n    { label: t('analyticsPage.periods.90d'), value: '90d' },\n    { label: t('analyticsPage.periods.1y'), value: '1y' },\n  ]);\n\n  // Table Columns\n  const userActivityColumns = [\n    {\n      name: 'user_id',\n      label: t('analyticsPage.user'),\n      align: 'left' as const,\n      field: 'user_id',\n      sortable: true,\n      format: (val: string) => val.slice(0, 8) + '...',\n    },\n    {\n      name: 'activity_count',\n      label: t('analyticsPage.activityCount'),\n      align: 'right' as const,\n      field: 'activity_count',\n      sortable: true,\n    },\n    {\n      name: 'total_events',\n      label: t('analyticsPage.totalEvents'),\n      align: 'right' as const,\n      field: 'total_events',\n      sortable: true,\n    },\n    {\n      name: 'last_activity',\n      label: t('analyticsPage.lastActivity'),\n      align: 'left' as const,\n      field: 'last_activity',\n      sortable: true,\n      format: (val: string) => {\n        if (!val) {\n          return '-';\n        }\n        return new Date(val).toLocaleDateString();\n      },\n    },\n  ];\n\n  const frequentlyOrderedColumns = [\n    {\n      name: 'product_name',\n      label: t('analyticsPage.product'),\n      align: 'left' as const,\n      field: 'product_name',\n      sortable: true,\n    },\n    {\n      name: 'total_quantity',\n      label: t('analyticsPage.totalQuantity'),\n      align: 'right' as const,\n      field: 'total_quantity',\n      sortable: true,\n    },\n    {\n      name: 'order_count',\n      label: t('analyticsPage.orderCount'),\n      align: 'right' as const,\n      field: 'order_count',\n      sortable: true,\n    },\n  ];\n\n  const mostUpdatedProductsColumns = [\n    {\n      name: 'product_name',\n      label: t('analyticsPage.product'),\n      align: 'left' as const,\n      field: 'product_name',\n      sortable: true,\n    },\n    {\n      name: 'update_count',\n      label: t('analyticsPage.updates'),\n      align: 'right' as const,\n      field: 'update_count',\n      sortable: true,\n    },\n  ];\n\n  // Methods\n  const calculateDateRange = (period: string) => {\n    const endDate = new Date();\n    const startDate = new Date();\n\n    switch (period) {\n      case '7d':\n        startDate.setDate(endDate.getDate() - 7);\n        break;\n      case '30d':\n        startDate.setDate(endDate.getDate() - 30);\n        break;\n      case '90d':\n        startDate.setDate(endDate.getDate() - 90);\n        break;\n      case '1y':\n        startDate.setFullYear(endDate.getFullYear() - 1);\n        break;\n    }\n\n    return {\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n    };\n  };\n\n  const loadAnalytics = async () => {\n    loading.value = true;\n    try {\n      // Track page view\n      await monitoringService.trackEvent('analytics_viewed', {\n        period: selectedPeriod.value,\n      });\n\n      const dateRange = calculateDateRange(selectedPeriod.value);\n\n      // Load analytics data in parallel\n      const [summaryData, orderData, productData, userActivityData] =\n        await Promise.all([\n          AnalyticsService.getSummary(dateRange),\n          AnalyticsService.getOrderMetrics(dateRange),\n          AnalyticsService.getProductMetrics(dateRange),\n          AnalyticsService.getUserActivityMetrics(dateRange),\n        ]);\n\n      summary.value = summaryData;\n      orderMetrics.value = orderData;\n      productMetrics.value = productData;\n      userActivity.value = userActivityData;\n\n      // Process daily chart data\n      const dailyData = Object.entries(summary.value.dailyActivity || {})\n        .map(([date, count]) => ({ date, count: count as number }))\n        .sort(\n          (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()\n        );\n\n      dailyChartData.value = dailyData;\n\n      // Data processing complete\n    } catch (error) {\n      console.error('Error loading analytics:', error);\n      $q.notify({\n        type: 'negative',\n        message:\n          t('analyticsPage.loadError') || 'Failed to load analytics data',\n      });\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const formatEventType = (eventType: string) => {\n    return eventType.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const exportAnalytics = async () => {\n    exporting.value = true;\n    try {\n      const exportData = {\n        period: selectedPeriod.value,\n        exportedAt: new Date().toISOString(),\n        summary: summary.value,\n        orderMetrics: orderMetrics.value,\n        productMetrics: productMetrics.value,\n        userActivity: userActivity.value,\n      };\n\n      const dataStr = JSON.stringify(exportData, null, 2);\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\n      const url = URL.createObjectURL(dataBlob);\n\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `analytics-${selectedPeriod.value}-${\n        new Date().toISOString().split('T')[0]\n      }.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      await monitoringService.trackEvent('analytics_exported', {\n        period: selectedPeriod.value,\n      });\n\n      $q.notify({\n        type: 'positive',\n        message:\n          t('analyticsPage.exportSuccess') || 'Analytics exported successfully',\n      });\n    } catch (error) {\n      console.error('Error exporting analytics:', error);\n      $q.notify({\n        type: 'negative',\n        message: t('analyticsPage.exportError') || 'Failed to export analytics',\n      });\n    } finally {\n      exporting.value = false;\n    }\n  };\n\n  // Lifecycle\n  onMounted(() => {\n    loadAnalytics();\n  });\n</script>\n\n<style scoped>\n  .activity-summary {\n    min-height: 200px;\n  }\n\n  .activity-placeholder {\n    height: 200px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: transparent;\n    border-radius: 8px;\n    flex-direction: column;\n  }\n\n  .stats-cards-container {\n    gap: 0;\n\n    .stats-card-col {\n      padding: 8px;\n\n      @media (max-width: 640px) {\n        padding: 6px;\n      }\n    }\n  }\n\n  .stat-display {\n    text-align: center;\n\n    .stat-value {\n      font-size: 28px;\n      font-weight: 700;\n      color: var(--text-primary);\n      line-height: 1.2;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\BatchManagementPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 27,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 27,
        "endColumn": 34,
        "fix": { "range": [655, 710], "text": ":loading=\"refreshing\"\r\n            @click=\"refreshData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 28,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 36,
        "fix": {
          "range": [655, 747],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"refreshData\"\r\n            :loading=\"refreshing\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 37,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 37,
        "endColumn": 23,
        "fix": { "range": [982, 1040], "text": "unelevated\r\n            @click=\"showAddBatchDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 38,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 38,
        "endColumn": 20,
        "fix": {
          "range": [982, 1061],
          "text": "no-caps\r\n            @click=\"showAddBatchDialog = true\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 39,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 39,
        "endColumn": 36,
        "fix": {
          "range": [982, 1098],
          "text": "class=\"app-btn-success\"\r\n            @click=\"showAddBatchDialog = true\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":class\" should go before \"@click\".",
        "line": 177,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 177,
        "endColumn": 65,
        "fix": {
          "range": [5866, 5955],
          "text": ":class=\"showExpiringOnly ? 'expiring-active' : ''\"\r\n              @click=\"filterExpiring\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 201,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 201,
        "endColumn": 23,
        "fix": { "range": [6638, 6689], "text": "unelevated\r\n            @click=\"openBarcodeScanner\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 202,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 202,
        "endColumn": 28,
        "fix": {
          "range": [6638, 6718],
          "text": "color=\"primary\"\r\n            @click=\"openBarcodeScanner\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 203,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 203,
        "endColumn": 36,
        "fix": {
          "range": [6638, 6755],
          "text": "class=\"lite-action-btn\"\r\n            @click=\"openBarcodeScanner\"\r\n            unelevated\r\n            color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 209,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 209,
        "endColumn": 23,
        "fix": { "range": [6876, 6923], "text": "unelevated\r\n            @click=\"filterExpiring\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":color\" should go before \"@click\".",
        "line": 210,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 210,
        "endColumn": 61,
        "fix": {
          "range": [6876, 6985],
          "text": ":color=\"showExpiringOnly ? 'warning' : 'grey-6'\"\r\n            @click=\"filterExpiring\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 211,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 211,
        "endColumn": 36,
        "fix": {
          "range": [6876, 7022],
          "text": "class=\"lite-action-btn\"\r\n            @click=\"filterExpiring\"\r\n            unelevated\r\n            :color=\"showExpiringOnly ? 'warning' : 'grey-6'\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 219,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 219,
        "endColumn": 34,
        "fix": { "range": [7237, 7250], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 223,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 223,
        "endColumn": 34,
        "fix": { "range": [7426, 7439], "text": "#action" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 232,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 232,
        "endColumn": 34,
        "fix": { "range": [7776, 7789], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 243,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 243,
        "endColumn": 34,
        "fix": { "range": [8161, 8174], "text": "#action" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 249,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 249,
        "endColumn": 24,
        "fix": { "range": [8309, 8357], "text": "size=\"sm\"\r\n              @click=\"filterCritical\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 630,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 630,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20659, 20662], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20659, 20662], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 700,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 700,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22511, 22514], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22511, 22514], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 17,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('batch.batchManagement')\"\r\n        :subtitle=\"$t('batch.manageBatchesSubtitle')\"\r\n        icon=\"qr_code_scanner\"\r\n      >\r\n        <template #actions>\r\n          <!-- View Mode Toggle -->\r\n          <q-btn-toggle\r\n            v-model=\"viewMode\"\r\n            :options=\"viewModeOptions\"\r\n            outline\r\n            toggle-color=\"primary\"\r\n            color=\"grey-6\"\r\n            size=\"sm\"\r\n            class=\"view-mode-toggle\"\r\n          />\r\n\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshData\"\r\n            :loading=\"refreshing\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            v-if=\"viewMode === 'full'\"\r\n            icon=\"add\"\r\n            :label=\"$t('batch.addBatch')\"\r\n            @click=\"showAddBatchDialog = true\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-success\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <div class=\"batch-management-page\">\r\n      <!-- Dashboard Cards - Full View -->\r\n      <div v-if=\"viewMode === 'full'\" class=\"row q-mb-lg stats-cards-container\">\r\n        <!-- Total Batches Card -->\r\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.totalBatches')\"\r\n            icon=\"inventory\"\r\n            icon-color=\"primary\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"40px\" />\r\n                <span v-else>{{ totalBatches }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n\r\n        <!-- Expiring Soon Card -->\r\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.expiringSoon')\"\r\n            icon=\"warning\"\r\n            :icon-color=\"expiringBatches > 0 ? 'warning' : 'info'\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"40px\" />\r\n                <span v-else>{{ expiringBatches }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n\r\n        <!-- Active Batches Card -->\r\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.activeBatches')\"\r\n            icon=\"check_circle\"\r\n            icon-color=\"positive\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"40px\" />\r\n                <span v-else>{{ activeBatches }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n\r\n        <!-- Total Value Card -->\r\n        <div class=\"col-12 col-sm-6 col-md-3 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.totalValue')\"\r\n            icon=\"euro\"\r\n            icon-color=\"primary\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"80px\" />\r\n                <span v-else>{{ formatCurrency(totalValue, 'EUR') }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Dashboard Cards - Lite View -->\r\n      <div v-else class=\"row q-mb-lg stats-cards-container-lite\">\r\n        <!-- Essential Info Only -->\r\n        <div class=\"col-12 col-sm-6 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.totalBatches')\"\r\n            icon=\"inventory\"\r\n            icon-color=\"primary\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"40px\" />\r\n                <span v-else>{{ totalBatches }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n\r\n        <!-- Expiring Soon Card -->\r\n        <div class=\"col-12 col-sm-6 stats-card-col\">\r\n          <BaseCard\r\n            :title=\"$t('batch.expiringSoon')\"\r\n            icon=\"warning\"\r\n            :icon-color=\"expiringBatches > 0 ? 'warning' : 'info'\"\r\n          >\r\n            <div class=\"stat-display\">\r\n              <div class=\"stat-value\">\r\n                <q-skeleton v-if=\"batchStore.loading\" type=\"text\" width=\"40px\" />\r\n                <span v-else>{{ expiringBatches }}</span>\r\n              </div>\r\n            </div>\r\n          </BaseCard>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Actions -->\r\n      <div v-if=\"viewMode === 'full'\" class=\"q-mb-lg\">\r\n        <div class=\"text-h6 q-mb-md text-grey-8\">\r\n          <q-icon name=\"flash_on\" class=\"q-mr-sm\" />\r\n          {{ $t('batch.quickActions') }}\r\n        </div>\r\n\r\n        <div class=\"row q-gutter-md\">\r\n          <!-- Scan Batch Action -->\r\n          <div class=\"col-12 col-sm-6 col-md-3\">\r\n            <InteractiveCard\r\n              :title=\"$t('batch.scanBatch')\"\r\n              :subtitle=\"$t('batch.scanBatchSubtitle')\"\r\n              icon=\"qr_code_scanner\"\r\n              icon-color=\"primary\"\r\n              @click=\"openBarcodeScanner\"\r\n            />\r\n          </div>\r\n\r\n          <!-- View Expiring Action -->\r\n          <div class=\"col-12 col-sm-6 col-md-3\">\r\n            <InteractiveCard\r\n              :title=\"$t('batch.viewExpiring')\"\r\n              :subtitle=\"`${expiringBatches} ${$t(\r\n                'batch.viewExpiringSubtitle'\r\n              )}`\"\r\n              icon=\"warning\"\r\n              icon-color=\"warning\"\r\n              @click=\"filterExpiring\"\r\n              :class=\"showExpiringOnly ? 'expiring-active' : ''\"\r\n            />\r\n          </div>\r\n\r\n          <!-- Export Batches Action -->\r\n          <div class=\"col-12 col-sm-6 col-md-3\">\r\n            <InteractiveCard\r\n              :title=\"$t('batch.exportBatches')\"\r\n              :subtitle=\"$t('batch.exportBatchesSubtitle')\"\r\n              icon=\"download\"\r\n              icon-color=\"positive\"\r\n              @click=\"exportBatches\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Quick Actions - Lite View -->\r\n      <div v-else class=\"q-mb-lg lite-actions\">\r\n        <div class=\"row q-gutter-sm\">\r\n          <q-btn\r\n            icon=\"qr_code_scanner\"\r\n            :label=\"$t('batch.scanBatch')\"\r\n            @click=\"openBarcodeScanner\"\r\n            unelevated\r\n            color=\"primary\"\r\n            class=\"lite-action-btn\"\r\n          />\r\n          <q-btn\r\n            icon=\"warning\"\r\n            :label=\"$t('batch.viewExpiring')\"\r\n            @click=\"filterExpiring\"\r\n            unelevated\r\n            :color=\"showExpiringOnly ? 'warning' : 'grey-6'\"\r\n            class=\"lite-action-btn\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Error Banner -->\r\n      <div v-if=\"batchStore.error\" class=\"q-mb-md\">\r\n        <q-banner class=\"bg-negative text-white\" rounded dense>\r\n          <template v-slot:avatar>\r\n            <q-icon name=\"warning\" size=\"sm\" />\r\n          </template>\r\n          <div class=\"text-subtitle2\">{{ $t('errors.failedToLoadData') }}</div>\r\n          <template v-slot:action>\r\n            <q-btn flat color=\"white\" :label=\"$t('common.retry')\" size=\"sm\" @click=\"refreshData\" />\r\n          </template>\r\n        </q-banner>\r\n      </div>\r\n\r\n      <!-- Expiry Alerts -->\r\n      <div v-if=\"criticalBatches.length > 0\" class=\"q-mb-lg\">\r\n        <q-banner class=\"bg-red text-white\" rounded dense>\r\n          <template v-slot:avatar>\r\n            <q-icon name=\"error\" size=\"sm\" />\r\n          </template>\r\n          <div class=\"text-subtitle2\">{{ $t('batch.criticalAlert') }}</div>\r\n          <div class=\"text-body2\">\r\n            {{\r\n              $t('batch.criticalBatchesFound', {\r\n                count: criticalBatches.length,\r\n              })\r\n            }}\r\n          </div>\r\n          <template v-slot:action>\r\n            <q-btn\r\n              flat\r\n              color=\"white\"\r\n              :label=\"$t('batch.viewCritical')\"\r\n              @click=\"filterCritical\"\r\n              size=\"sm\"\r\n            />\r\n          </template>\r\n        </q-banner>\r\n      </div>\r\n\r\n      <!-- Main Content Tabs - Full View -->\r\n      <BaseCard v-if=\"viewMode === 'full'\">\r\n        <q-tabs\r\n          v-model=\"activeTab\"\r\n          dense\r\n          class=\"text-grey\"\r\n          active-color=\"primary\"\r\n          indicator-color=\"primary\"\r\n          align=\"justify\"\r\n          narrow-indicator\r\n        >\r\n          <q-tab name=\"overview\" :label=\"$t('batch.overview')\" icon=\"list\" />\r\n          <q-tab\r\n            name=\"expiring\"\r\n            :label=\"$t('batch.expiring')\"\r\n            icon=\"schedule\"\r\n          />\r\n          <q-tab\r\n            name=\"fifo\"\r\n            :label=\"$t('batch.fifoManagement')\"\r\n            icon=\"trending_up\"\r\n          />\r\n          <q-tab name=\"reports\" :label=\"$t('batch.reports')\" icon=\"analytics\" />\r\n        </q-tabs>\r\n\r\n        <q-separator />\r\n\r\n        <q-tab-panels v-model=\"activeTab\" animated>\r\n          <!-- Overview Tab -->\r\n          <q-tab-panel name=\"overview\" class=\"q-pa-none\">\r\n            <BatchOverview\r\n              ref=\"batchOverviewRef\"\r\n              :view-mode=\"viewMode\"\r\n              @batch-selected=\"onBatchSelected\"\r\n              @batch-used=\"onBatchUsed\"\r\n            />\r\n          </q-tab-panel>\r\n\r\n          <!-- Expiring Tab -->\r\n          <q-tab-panel name=\"expiring\" class=\"q-pa-md\">\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.expiringBatches') }}</div>\r\n            <ExpiringBatchesList\r\n              :batches=\"batchStore.expiringBatches\"\r\n              @batch-selected=\"onBatchSelected\"\r\n            />\r\n          </q-tab-panel>\r\n\r\n          <!-- FIFO Management Tab -->\r\n          <q-tab-panel name=\"fifo\" class=\"q-pa-md\">\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.fifoManagement') }}</div>\r\n            <FifoBatchManager @suggestion-generated=\"onFifoSuggestion\" />\r\n          </q-tab-panel>\r\n\r\n          <!-- Reports Tab -->\r\n          <q-tab-panel name=\"reports\" class=\"q-pa-md\">\r\n            <div class=\"text-h6 q-mb-md\">{{ $t('batch.batchReports') }}</div>\r\n            <BatchReports />\r\n          </q-tab-panel>\r\n        </q-tab-panels>\r\n      </BaseCard>\r\n\r\n      <!-- Simplified Content - Lite View -->\r\n      <BaseCard v-else class=\"lite-content\">\r\n        <q-tabs\r\n          v-model=\"activeTab\"\r\n          dense\r\n          class=\"text-grey\"\r\n          active-color=\"primary\"\r\n          indicator-color=\"primary\"\r\n          align=\"left\"\r\n          narrow-indicator\r\n        >\r\n          <q-tab name=\"overview\" :label=\"$t('batch.overview')\" icon=\"list\" />\r\n          <q-tab\r\n            name=\"expiring\"\r\n            :label=\"$t('batch.expiring')\"\r\n            icon=\"schedule\"\r\n          />\r\n        </q-tabs>\r\n\r\n        <q-separator />\r\n\r\n        <q-tab-panels v-model=\"activeTab\" animated>\r\n          <!-- Overview Tab - Lite -->\r\n          <q-tab-panel name=\"overview\" class=\"q-pa-none\">\r\n            <BatchOverview\r\n              ref=\"batchOverviewRef\"\r\n              :view-mode=\"viewMode\"\r\n              @batch-selected=\"onBatchSelected\"\r\n              @batch-used=\"onBatchUsed\"\r\n            />\r\n          </q-tab-panel>\r\n\r\n          <!-- Expiring Tab - Lite -->\r\n          <q-tab-panel name=\"expiring\" class=\"q-pa-md\">\r\n            <div class=\"text-subtitle1 q-mb-md\">\r\n              {{ $t('batch.expiringBatches') }}\r\n            </div>\r\n            <ExpiringBatchesList\r\n              :batches=\"batchStore.expiringBatches\"\r\n              :view-mode=\"viewMode\"\r\n              @batch-selected=\"onBatchSelected\"\r\n            />\r\n          </q-tab-panel>\r\n        </q-tab-panels>\r\n      </BaseCard>\r\n    </div>\r\n\r\n    <!-- Add Batch Dialog -->\r\n    <BaseDialog v-model=\"showAddBatchDialog\" :title=\"$t('batch.addBatch')\" icon=\"inventory\" size=\"lg\">\r\n      <BatchRegistrationForm @close=\"showAddBatchDialog = false\" @success=\"onBatchAdded\" />\r\n      <template #actions>\r\n        <q-btn flat :label=\"$t('common.close')\" @click=\"showAddBatchDialog = false\" />\r\n      </template>\r\n    </BaseDialog>\r\n\r\n    <!-- Batch Detail Dialog -->\r\n    <BaseDialog\r\n      v-model=\"showBatchDetailDialog\"\r\n      :title=\"$t('batch.batchTitle', { batchNumber: selectedBatch?.batch_number || '' })\"\r\n      :subtitle=\"selectedBatch?.product?.name || ''\"\r\n      icon=\"inventory\"\r\n      size=\"md\"\r\n      @close=\"showBatchDetailDialog = false\"\r\n    >\r\n      <div v-if=\"selectedBatch\" class=\"batch-details\">\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('batch.expiryDate') }}:</span>\r\n          <span class=\"value\">{{ formatDate(selectedBatch.expiryDate) }}</span>\r\n        </div>\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('batch.currentQuantity') }}:</span>\r\n          <span class=\"value\">{{ selectedBatch.currentQuantity }}</span>\r\n        </div>\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('batch.status') }}:</span>\r\n          <q-chip\r\n            :color=\"getStatusColor(selectedBatch.status)\"\r\n            text-color=\"white\"\r\n            size=\"sm\"\r\n          >\r\n            {{ $t(`batch.status.${selectedBatch.status}`) }}\r\n          </q-chip>\r\n        </div>\r\n      </div>\r\n\r\n      <template #actions>\r\n        <q-btn\r\n          flat\r\n          :label=\"$t('common.close')\"\r\n          color=\"primary\"\r\n          @click=\"showBatchDetailDialog = false\"\r\n        />\r\n      </template>\r\n    </BaseDialog>\r\n\r\n    <!-- Barcode Scanner Dialog -->\r\n    <BaseDialog v-model=\"showScannerDialog\" :title=\"$t('barcodeScanner.title')\" icon=\"qr_code_scanner\" size=\"md\">\r\n      <BarcodeScanner v-model=\"showScannerDialog\" @scan=\"onBarcodeScanned\" />\r\n      <template #actions>\r\n        <q-btn flat :label=\"$t('common.close')\" @click=\"showScannerDialog = false\" />\r\n      </template>\r\n    </BaseDialog>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  // Dialog baseline: this page uses BaseDialog for add batch and scanner modals\r\n  import {\r\n    ref,\r\n    computed,\r\n    onMounted,\r\n    getCurrentInstance,\r\n    defineAsyncComponent,\r\n    watch,\r\n  } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useBatchStore } from 'src/stores/batch';\r\n  import { useInventoryStore } from 'src/stores/inventory';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard } from 'src/components/cards';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  // ✅ PERFORMANCE OPTIMIZATION: Dynamic imports for heavy components\r\n\r\n  import BatchOverview from 'src/components/BatchOverview.vue';\r\n  const BatchRegistrationForm = defineAsyncComponent(\r\n    () => import('src/components/BatchRegistrationForm.vue')\r\n  );\r\n  const BarcodeScanner = defineAsyncComponent(\r\n    () => import('src/components/BarcodeScanner.vue')\r\n  );\r\n  const ExpiringBatchesList = defineAsyncComponent(\r\n    () => import('src/components/ExpiringBatchesList.vue')\r\n  );\r\n  const FifoBatchManager = defineAsyncComponent(\r\n    () => import('src/components/FifoBatchManager.vue')\r\n  );\r\n  const BatchReports = defineAsyncComponent(\r\n    () => import('src/components/BatchReports.vue')\r\n  );\r\n  import type { ProductBatchWithDetails } from 'src/types/inventory';\r\n  import { useFormatting } from 'src/composables/useFormatting';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const batchStore = useBatchStore();\r\n  const inventoryStore = useInventoryStore();\r\n  const authStore = useAuthStore();\r\n  const clinicStore = useClinicStore();\r\n  const { formatDate } = useFormatting();\r\n\r\n  const getStatusColor = (status: string) => {\r\n    const colors = {\r\n      active: 'positive',\r\n      expired: 'negative',\r\n      depleted: 'grey',\r\n      recalled: 'deep-orange',\r\n      quarantine: 'warning',\r\n    };\r\n    return colors[status] || 'grey';\r\n  };\r\n\r\n  // State\r\n  const activeTab = ref('overview');\r\n  const showAddBatchDialog = ref(false);\r\n  const showBatchDetailDialog = ref(false);\r\n  const showScannerDialog = ref(false);\r\n  const showExpiringOnly = ref(false);\r\n  const selectedBatch = ref<ProductBatchWithDetails | null>(null);\r\n  const refreshing = ref(false);\r\n  const batchOverviewRef = ref();\r\n\r\n  // View mode state\r\n  const viewMode = ref<'lite' | 'full'>('full');\r\n  const viewModeOptions = computed(() => [\r\n    { label: t('batch.viewMode.lite'), value: 'lite', icon: 'view_compact' },\r\n    { label: t('batch.viewMode.full'), value: 'full', icon: 'view_module' },\r\n  ]);\r\n\r\n  // Computed\r\n  const totalBatches = computed(() => batchStore.batches.length);\r\n\r\n  const activeBatches = computed(\r\n    () => batchStore.batches.filter(batch => batch.status === 'active').length\r\n  );\r\n\r\n  const expiringBatches = computed(\r\n    () =>\r\n      batchStore.expiringBatches.filter(\r\n        batch =>\r\n          batch.urgency_level === 'critical' ||\r\n          batch.urgency_level === 'warning'\r\n      ).length\r\n  );\r\n\r\n  const criticalBatches = computed(() =>\r\n    batchStore.expiringBatches.filter(\r\n      batch =>\r\n        batch.urgency_level === 'expired' || batch.urgency_level === 'critical'\r\n    )\r\n  );\r\n\r\n  const totalValue = computed(() =>\r\n    batchStore.batches.reduce(\r\n      (sum, batch) =>\r\n        sum + (batch.current_quantity || 0) * (batch.unit_cost || 0),\r\n      0\r\n    )\r\n  );\r\n\r\n  // Methods\r\n  const formatCurrency = (amount: number, currency: string) => {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: currency || 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  const initializeViewMode = () => {\r\n    // Check for saved preference first\r\n    const savedViewMode = localStorage.getItem('remcura_batch_view_mode');\r\n    if (savedViewMode && ['lite', 'full'].includes(savedViewMode)) {\r\n      viewMode.value = savedViewMode as 'lite' | 'full';\r\n      return;\r\n    }\r\n\r\n    // Default based on user role or practice settings\r\n    // For now, default to 'full' - can be enhanced with role-based logic\r\n    viewMode.value = 'full';\r\n\r\n    // Save the initial preference\r\n    localStorage.setItem('remcura_batch_view_mode', viewMode.value);\r\n  };\r\n\r\n  const onViewModeChange = () => {\r\n    // Save preference when changed\r\n    localStorage.setItem('remcura_batch_view_mode', viewMode.value);\r\n\r\n    // Reset active tab for lite view if on advanced tabs\r\n    if (\r\n      viewMode.value === 'lite' &&\r\n      ['fifo', 'reports'].includes(activeTab.value)\r\n    ) {\r\n      activeTab.value = 'overview';\r\n    }\r\n  };\r\n\r\n  const refreshData = async () => {\r\n    try {\r\n      refreshing.value = true;\r\n      const practiceId = authStore.clinicId;\r\n      if (!practiceId) {\r\n        return;\r\n      }\r\n\r\n      await Promise.all([\r\n        batchStore.fetchBatches({ practiceId }),\r\n        batchStore.fetchExpiringBatches(practiceId),\r\n      ]);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('common.dataRefreshed'),\r\n        timeout: 1000,\r\n      });\r\n    } catch (error) {\r\n      console.error(t('errors.failedToRefreshData'), error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('errors.failedToRefreshData'),\r\n      });\r\n    } finally {\r\n      refreshing.value = false;\r\n    }\r\n  };\r\n\r\n  const openBarcodeScanner = () => {\r\n    showScannerDialog.value = true;\r\n  };\r\n\r\n  const filterExpiring = () => {\r\n    showExpiringOnly.value = !showExpiringOnly.value;\r\n    activeTab.value = 'expiring';\r\n  };\r\n\r\n  const filterCritical = () => {\r\n    activeTab.value = 'expiring';\r\n    // Apply critical filter in the expiring tab\r\n  };\r\n\r\n  const exportBatches = () => {\r\n    // Export batch data as CSV\r\n    const csvData = batchStore.batches.map(batch => ({\r\n      [t('batch.batchNumber')]: batch.batch_number,\r\n      [t('product.product')]: batch.product.name,\r\n      [t('location.location')]: batch.location.name,\r\n      [t('batch.currentQuantity')]: batch.current_quantity,\r\n      [t('batch.expiryDate')]: batch.expiry_date,\r\n      [t('common.status')]: batch.status,\r\n    }));\r\n\r\n    const csv = convertToCSV(csvData);\r\n    downloadCSV(csv, 'batch-overview.csv');\r\n\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('batch.exportSuccess'),\r\n    });\r\n  };\r\n\r\n  const convertToCSV = (data: any[]) => {\r\n    if (!data.length) {\r\n      return '';\r\n    }\r\n\r\n    const headers = Object.keys(data[0]);\r\n    const csvHeaders = headers.join(',');\r\n    const csvRows = data.map(row =>\r\n      headers.map(header => `\"${row[header] || ''}\"`).join(',')\r\n    );\r\n\r\n    return [csvHeaders, ...csvRows].join('\\n');\r\n  };\r\n\r\n  const downloadCSV = (csv: string, filename: string) => {\r\n    const blob = new Blob([csv], { type: 'text/csv' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = filename;\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const onBatchSelected = (batch: ProductBatchWithDetails) => {\r\n    selectedBatch.value = batch;\r\n    showBatchDetailDialog.value = true;\r\n  };\r\n\r\n  const onBatchAdded = () => {\r\n    showAddBatchDialog.value = false;\r\n    refreshData();\r\n  };\r\n\r\n  const onBatchUpdated = () => {\r\n    showBatchDetailDialog.value = false;\r\n    refreshData();\r\n  };\r\n\r\n  const onBatchUsed = () => {\r\n    refreshData();\r\n  };\r\n\r\n  const onUseBatch = (batch: ProductBatchWithDetails) => {\r\n    // Handle batch usage\r\n    showBatchDetailDialog.value = false;\r\n    // Open usage dialog or process directly\r\n  };\r\n\r\n  const onBarcodeScanned = (barcodeData: string) => {\r\n    showScannerDialog.value = false;\r\n\r\n    // Try to find batch by batch number\r\n    const foundBatch = batchStore.batches.find(\r\n      batch =>\r\n        batch.batch_number === barcodeData ||\r\n        batch.supplier_batch_number === barcodeData\r\n    );\r\n\r\n    if (foundBatch) {\r\n      selectedBatch.value = foundBatch;\r\n      showBatchDetailDialog.value = true;\r\n    } else {\r\n      $q.notify({\r\n        type: 'warning',\r\n        message: t('batch.batchNotFound', { batchNumber: barcodeData }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFifoSuggestion = (suggestion: any) => {\r\n    // Handle FIFO batch suggestion\r\n    // FIFO suggestion generated successfully\r\n  };\r\n\r\n  // Watchers\r\n  watch(viewMode, onViewModeChange);\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    initializeViewMode();\r\n    const practiceId = authStore.clinicId;\r\n    if (practiceId) {\r\n      refreshData();\r\n    }\r\n  });\r\n</script>\r\n\r\n<style scoped>\r\n  .batch-management-page {\r\n    padding: 16px;\r\n  }\r\n\r\n  .dashboard-card {\r\n    height: 100px;\r\n    transition: all 0.3s ease;\r\n  }\r\n\r\n  .dashboard-card:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  .dashboard-card .q-card-section {\r\n    height: 100%;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    .batch-management-page {\r\n      padding: 8px;\r\n    }\r\n\r\n    .dashboard-card {\r\n      height: 80px;\r\n    }\r\n  }\r\n\r\n  .stats-cards-container {\r\n    gap: 0;\r\n\r\n    .stats-card-col {\r\n      padding: 8px;\r\n\r\n      @media (max-width: 640px) {\r\n        padding: 6px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .stats-cards-container-lite {\r\n    gap: 0;\r\n\r\n    .stats-card-col {\r\n      padding: 8px;\r\n\r\n      @media (max-width: 640px) {\r\n        padding: 6px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .lite-actions {\r\n    .lite-action-btn {\r\n      min-width: 140px;\r\n\r\n      @media (max-width: 640px) {\r\n        min-width: 120px;\r\n        font-size: 0.875rem;\r\n      }\r\n    }\r\n  }\r\n\r\n  .lite-content {\r\n    .q-tab-panels {\r\n      .q-tab-panel {\r\n        padding: 12px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .view-mode-toggle {\r\n    margin-right: 8px;\r\n\r\n    @media (max-width: 768px) {\r\n      margin-right: 0;\r\n      margin-bottom: 8px;\r\n    }\r\n  }\r\n\r\n  /* Active state for expiring filter */\r\n  .expiring-active {\r\n    border-color: #ff9800;\r\n    background: linear-gradient(135deg, #fff3e0 0%, #ffebcc 100%);\r\n\r\n    .body--dark & {\r\n      background: linear-gradient(135deg, #2d1b0e 0%, #3d2914 100%);\r\n      border-color: #ff9800;\r\n    }\r\n  }\r\n\r\n  /* New stat display styles for replaced stats cards */\r\n  .stat-display {\r\n    text-align: center;\r\n    padding: var(--space-4);\r\n\r\n    .stat-value {\r\n      font-size: 28px;\r\n      font-weight: 700;\r\n      color: var(--text-primary);\r\n      line-height: 1.2;\r\n      margin-bottom: 4px;\r\n    }\r\n  }\r\n\r\n  .batch-details {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 12px;\r\n\r\n    .detail-row {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 8px 0;\r\n      border-bottom: 1px solid var(--card-border, rgba(0, 0, 0, 0.08));\r\n\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n\r\n      .label {\r\n        font-weight: 600;\r\n        color: var(--text-primary);\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\DashboardPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@update:model-value\".",
        "line": 44,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 28,
        "fix": {
          "range": [1357, 1422],
          "text": "color=\"primary\"\r\n            @update:model-value=\"switchDemoRole\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@update:model-value\".",
        "line": 45,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 45,
        "endColumn": 31,
        "fix": {
          "range": [1357, 1454],
          "text": ":loading=\"loading\"\r\n            @update:model-value=\"switchDemoRole\"\r\n            color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@update:model-value\".",
        "line": 46,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 46,
        "endColumn": 39,
        "fix": {
          "range": [1357, 1494],
          "text": "class=\"demo-role-switcher\"\r\n            @update:model-value=\"switchDemoRole\"\r\n            color=\"primary\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 72,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 72,
        "endColumn": 31,
        "fix": { "range": [2243, 2300], "text": ":loading=\"loading\"\r\n            @click=\"refreshDashboard\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 73,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 73,
        "endColumn": 36,
        "fix": {
          "range": [2243, 2337],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"refreshDashboard\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 83,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 83,
        "endColumn": 36,
        "fix": {
          "range": [2561, 2633],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"showCustomizeDialog = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 102,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 102,
        "endColumn": 23,
        "fix": { "range": [3204, 3263], "text": "unelevated\r\n            @click=\"$router.push(action.route)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 103,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 103,
        "endColumn": 20,
        "fix": {
          "range": [3204, 3284],
          "text": "no-caps\r\n            @click=\"$router.push(action.route)\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":class\" should go before \"@click\".",
        "line": 104,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 104,
        "endColumn": 55,
        "fix": {
          "range": [3204, 3340],
          "text": ":class=\"getActionButtonClass(action.type)\"\r\n            @click=\"$router.push(action.route)\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 189,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 189,
        "endColumn": 21,
        "fix": { "range": [5956, 6013], "text": "unelevated\r\n          @click=\"showCustomizeDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 190,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 190,
        "endColumn": 18,
        "fix": {
          "range": [5956, 6032],
          "text": "no-caps\r\n          @click=\"showCustomizeDialog = true\"\r\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 191,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 191,
        "endColumn": 34,
        "fix": {
          "range": [5956, 6067],
          "text": "class=\"app-btn-primary\"\r\n          @click=\"showCustomizeDialog = true\"\r\n          unelevated\r\n          no-caps"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 360,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 360,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11270, 11273], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11270, 11273], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 12,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"dashboardConfig.title\"\r\n        :subtitle=\"dashboardConfig.subtitle\"\r\n        icon=\"space_dashboard\"\r\n      >\r\n        <template #actions>\r\n          <!-- Practice Switcher (only for platform owners) -->\r\n          <q-select\r\n            v-if=\"isPlatformOwner\"\r\n            v-model=\"selectedPracticeId\"\r\n            :options=\"practiceOptions\"\r\n            option-value=\"id\"\r\n            option-label=\"name\"\r\n            emit-value\r\n            map-options\r\n            dense\r\n            outlined\r\n            style=\"min-width: 260px; margin-right: 12px\"\r\n            :label=\"$t('dashboard.selectPractice')\"\r\n            :loading=\"loadingPractices\"\r\n            @update:model-value=\"handlePracticeChange\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"business\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <!-- Demo Role Switcher -->\r\n          <q-select\r\n            v-model=\"selectedDemoRole\"\r\n            :options=\"demoRoleOptions\"\r\n            option-value=\"value\"\r\n            option-label=\"label\"\r\n            emit-value\r\n            map-options\r\n            dense\r\n            outlined\r\n            style=\"min-width: 250px; margin-right: 12px\"\r\n            :label=\"$t('dashboard.demoRoleSwitch.label')\"\r\n            @update:model-value=\"switchDemoRole\"\r\n            color=\"primary\"\r\n            :loading=\"loading\"\r\n            class=\"demo-role-switcher\"\r\n          >\r\n            <template #prepend>\r\n              <q-icon name=\"swap_horiz\" />\r\n            </template>\r\n\r\n            <template #option=\"scope\">\r\n              <q-item v-bind=\"scope.itemProps\" class=\"role-option-item\">\r\n                <q-item-section avatar>\r\n                  <q-icon :name=\"scope.opt.icon\" />\r\n                </q-item-section>\r\n                <q-item-section>\r\n                  <q-item-label>{{ scope.opt.label }}</q-item-label>\r\n                </q-item-section>\r\n              </q-item>\r\n            </template>\r\n\r\n            <!-- use default selected rendering -->\r\n          </q-select>\r\n\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshDashboard\"\r\n            :loading=\"loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('dashboard.actions.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"tune\"\r\n            size=\"md\"\r\n            @click=\"showCustomizeDialog = true\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('dashboard.actions.customize') }}</q-tooltip>\r\n          </q-btn>\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- Role-based Dashboard Content -->\r\n    <div class=\"dashboard-container\">\r\n      <!-- Quick Actions Bar -->\r\n      <div v-if=\"quickActions.length\" class=\"quick-actions-section\">\r\n        <div class=\"quick-actions-grid\">\r\n          <q-btn\r\n            v-for=\"action in quickActions\"\r\n            :key=\"action.id\"\r\n            :icon=\"action.icon\"\r\n            :label=\"action.label\"\r\n            @click=\"$router.push(action.route)\"\r\n            unelevated\r\n            no-caps\r\n            :class=\"getActionButtonClass(action.type)\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Alerts Section -->\r\n      <div v-if=\"alerts.length\" class=\"alerts-section\">\r\n        <q-banner\r\n          v-for=\"alert in alerts\"\r\n          :key=\"alert.id\"\r\n          :class=\"`banner-${alert.type}`\"\r\n          rounded\r\n          class=\"alert-banner\"\r\n        >\r\n          <template #avatar>\r\n            <q-icon\r\n              :name=\"getAlertIcon(alert.type)\"\r\n              :color=\"alert.type === 'warning' ? 'warning' : alert.type\"\r\n            />\r\n          </template>\r\n          {{ alert.message }}\r\n          <template v-if=\"alert.action\" #action>\r\n            <q-btn\r\n              flat\r\n              :label=\"alert.actionLabel\"\r\n              @click=\"$router.push(alert.action)\"\r\n            />\r\n          </template>\r\n        </q-banner>\r\n      </div>\r\n\r\n      <!-- Widgets Grid -->\r\n      <transition name=\"dashboard-transition\" mode=\"out-in\">\r\n        <div :key=\"selectedDemoRole\" class=\"widgets-grid\">\r\n          <div\r\n            v-for=\"widget in widgets\"\r\n            :key=\"widget.id\"\r\n            :class=\"getWidgetGridClass(widget)\"\r\n            class=\"widget-grid-item\"\r\n          >\r\n            <DynamicWidget\r\n              :widget=\"widget\"\r\n              :loading=\"loading\"\r\n              @refresh=\"refreshWidget\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </transition>\r\n\r\n      <!-- Platform Owner Message -->\r\n      <div\r\n        v-if=\"selectedDemoRole === 'platform_owner'\"\r\n        class=\"platform-owner-message\"\r\n      >\r\n        <q-banner class=\"bg-deep-purple-1 text-deep-purple-8\" rounded>\r\n          <template #avatar>\r\n            <q-icon name=\"settings\" color=\"deep-purple\" />\r\n          </template>\r\n          <div class=\"text-weight-medium\">\r\n            {{ $t('dashboard.platformOwner.title') }}\r\n          </div>\r\n          <div class=\"text-body2 q-mt-xs\">\r\n            {{ $t('dashboard.platformOwner.description') }}\r\n          </div>\r\n\r\n          <template #action>\r\n            <q-btn\r\n              :label=\"$t('dashboard.platformOwner.goToPlatform')\"\r\n              color=\"deep-purple\"\r\n              to=\"/platform\"\r\n              unelevated\r\n              no-caps\r\n            />\r\n          </template>\r\n        </q-banner>\r\n      </div>\r\n\r\n      <!-- Empty State -->\r\n      <div v-else-if=\"!widgets.length && !loading\" class=\"empty-dashboard\">\r\n        <q-icon name=\"widgets\" class=\"icon-size-3xl\" color=\"grey-5\" />\r\n        <h5>{{ $t('dashboard.empty.title') }}</h5>\r\n        <p>{{ $t('dashboard.empty.subtitle') }}</p>\r\n        <q-btn\r\n          :label=\"$t('dashboard.empty.addWidgets')\"\r\n          @click=\"showCustomizeDialog = true\"\r\n          unelevated\r\n          no-caps\r\n          class=\"app-btn-primary\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Customize Dialog -->\r\n    <BaseDialog\r\n      v-model=\"showCustomizeDialog\"\r\n      :title=\"$t('dashboard.customize.title')\"\r\n      icon=\"tune\"\r\n      size=\"sm\"\r\n      @close=\"showCustomizeDialog = false\"\r\n    >\r\n      <div class=\"customize-dialog-content\">\r\n        <p>{{ $t('dashboard.customize.comingSoon') }}</p>\r\n      </div>\r\n\r\n      <template #actions>\r\n        <q-btn\r\n          flat\r\n          :label=\"$t('common.close')\"\r\n          color=\"primary\"\r\n          @click=\"showCustomizeDialog = false\"\r\n        />\r\n      </template>\r\n    </BaseDialog>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useRouter } from 'vue-router';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { supabase } from '@/boot/supabase';\r\n  import {\r\n    practiceDashboardService,\r\n    type PracticeDashboardData,\r\n    type PracticeWidget as DashboardWidgetType,\r\n  } from '@/services/dashboard/practice-dashboard';\r\n  import { roleDashboardConfig } from '@/services/dashboard/role-config';\r\n  import type { UserRole } from '@/types/permissions';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import DynamicWidget from 'src/components/dashboard/DynamicWidget.vue';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const router = useRouter();\r\n  const authStore = useAuthStore();\r\n\r\n  // State\r\n  const loading = ref(false);\r\n  const showCustomizeDialog = ref(false);\r\n  const dashboardData = ref<PracticeDashboardData | null>(null);\r\n\r\n  // Computed properties\r\n  const userProfile = computed(() => authStore.userProfile);\r\n  const userRole = computed(\r\n    () => (userProfile.value?.role || 'assistant') as UserRole\r\n  );\r\n  const selectedDemoRole = ref(userRole.value);\r\n  const isPlatformOwner = computed(() => userRole.value === 'platform_owner');\r\n\r\n  // Practice selection for platform owners\r\n  const practices = ref<Array<{ id: string; name: string }>>([]);\r\n  const selectedPracticeId = ref<string | null>(authStore.clinicId || null);\r\n  const loadingPractices = ref(false);\r\n  const practiceOptions = computed(() => practices.value);\r\n\r\n  const dashboardConfig = computed(() =>\r\n    practiceDashboardService.getRoleConfig(selectedDemoRole.value)\r\n  );\r\n\r\n  const widgets = computed(() => dashboardData.value?.widgets || []);\r\n  const quickActions = computed(() => dashboardData.value?.quickActions || []);\r\n  const alerts = computed(() => dashboardData.value?.alerts || []);\r\n\r\n  const demoRoleOptions = computed(() =>\r\n    roleDashboardConfig.getDemoRoleOptions()\r\n  );\r\n\r\n  const selectedRoleIcon = computed(() => {\r\n    const option = demoRoleOptions.value.find(\r\n      opt => opt.value === selectedDemoRole.value\r\n    );\r\n    return option?.icon || 'person';\r\n  });\r\n\r\n  const selectedRoleLabel = computed(() => {\r\n    const option = demoRoleOptions.value.find(\r\n      opt => opt.value === selectedDemoRole.value\r\n    );\r\n    return option?.label || selectedDemoRole.value;\r\n  });\r\n\r\n  // Methods\r\n  function getWidgetGridClass(widget: DashboardWidgetType): string {\r\n    const baseClass = 'widget-grid-item';\r\n    const sizeClass = `widget-${widget.size}`;\r\n    return `${baseClass} ${sizeClass}`;\r\n  }\r\n\r\n  function getAlertIcon(type: string): string {\r\n    switch (type) {\r\n      case 'warning':\r\n        return 'warning';\r\n      case 'error':\r\n        return 'error';\r\n      case 'info':\r\n        return 'info';\r\n      case 'success':\r\n        return 'check_circle';\r\n      default:\r\n        return 'info';\r\n    }\r\n  }\r\n\r\n  async function loadDashboard() {\r\n    try {\r\n      loading.value = true;\r\n      const role = selectedDemoRole.value || userRole.value || 'assistant';\r\n      const practiceId =\r\n        selectedPracticeId.value ||\r\n        authStore.clinicId ||\r\n        authStore.selectedPractice?.id;\r\n\r\n      if (!practiceId) {\r\n        throw new Error(t('dashboard.errors.practiceIdMissing'));\r\n      }\r\n\r\n      dashboardData.value = await practiceDashboardService.getDashboardData(\r\n        role as UserRole,\r\n        practiceId\r\n      );\r\n      // Dashboard loaded successfully\r\n    } catch (error) {\r\n      console.error('Failed to load dashboard:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('dashboard.errors.loadFailed'),\r\n        caption: t('dashboard.errors.tryRefresh'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function refreshDashboard() {\r\n    await loadDashboard();\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('dashboard.actions.refreshed'),\r\n      timeout: 1000,\r\n    });\r\n  }\r\n\r\n  async function refreshWidget(widgetId: string) {\r\n    // Refresh specific widget - for now just refresh all data\r\n    await loadDashboard();\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('dashboard.widgetRefreshed', { widget: widgetId }),\r\n      timeout: 1000,\r\n    });\r\n  }\r\n\r\n  async function switchDemoRole(newRole: string | any) {\r\n    // Extract string value if object is passed\r\n    const roleValue = typeof newRole === 'object' ? newRole.value : newRole;\r\n\r\n    // Switching demo role\r\n\r\n    if (roleValue === selectedDemoRole.value) {\r\n      return;\r\n    }\r\n\r\n    selectedDemoRole.value = roleValue;\r\n\r\n    // Reload dashboard with new role\r\n    try {\r\n      loading.value = true;\r\n\r\n      // Clear current data first for visual effect\r\n      dashboardData.value = null;\r\n\r\n      // Small delay for better UX\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n\r\n      // Load new dashboard data\r\n      const practiceId =\r\n        selectedPracticeId.value ||\r\n        authStore.clinicId ||\r\n        authStore.selectedPractice?.id;\r\n      if (practiceId) {\r\n        dashboardData.value = await practiceDashboardService.getDashboardData(\r\n          roleValue as UserRole,\r\n          practiceId\r\n        );\r\n      }\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('dashboard.roleSwitch.success'),\r\n        caption: t('dashboard.roleSwitch.caption'),\r\n        timeout: 2500,\r\n        icon: 'swap_horiz',\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to switch demo role:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('dashboard.errors.switchFailed'),\r\n        caption: t('dashboard.errors.tryAgain'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  }\r\n\r\n  async function loadPracticesForOwner() {\r\n    if (!isPlatformOwner.value) return;\r\n    loadingPractices.value = true;\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('practices')\r\n        .select('id, name')\r\n        .order('name');\r\n      if (error) throw error;\r\n      practices.value = data || [];\r\n      if (!selectedPracticeId.value && practices.value.length > 0) {\r\n        selectedPracticeId.value = practices.value[0].id;\r\n      }\r\n    } catch (e) {\r\n      console.error('Failed to load practices for owner', e);\r\n    } finally {\r\n      loadingPractices.value = false;\r\n    }\r\n  }\r\n\r\n  async function handlePracticeChange() {\r\n    await loadDashboard();\r\n  }\r\n\r\n  function getDemoRoleLabel(role: string): string {\r\n    switch (role) {\r\n      case 'assistant':\r\n        return t('dashboard.titles.assistant');\r\n      case 'manager':\r\n        return t('dashboard.titles.manager');\r\n      case 'owner':\r\n        return t('dashboard.titles.owner');\r\n      default:\r\n        return t('dashboard.titles.default');\r\n    }\r\n  }\r\n\r\n  // Watchers\r\n  watch(\r\n    userRole,\r\n    newRole => {\r\n      // Only update if we haven't manually selected a different role\r\n      if (selectedDemoRole.value === userRole.value) {\r\n        selectedDemoRole.value = newRole;\r\n      }\r\n    },\r\n    { immediate: true }\r\n  );\r\n\r\n  // Lifecycle\r\n  // Get button class based on action type\r\n  const getActionButtonClass = (type: string) => {\r\n    const classMap: Record<string, string> = {\r\n      create: 'app-btn-success',\r\n      view: 'app-btn-primary',\r\n      manage: 'app-btn-secondary',\r\n      analyze: 'app-btn-info',\r\n      export: 'app-btn-secondary',\r\n      settings: 'app-btn-secondary',\r\n      default: 'app-btn-secondary',\r\n    };\r\n    return classMap[type] || classMap.default;\r\n  };\r\n\r\n  onMounted(async () => {\r\n    await loadPracticesForOwner();\r\n    await loadDashboard();\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .dashboard-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n  }\r\n\r\n  // Quick Actions Section\r\n  .quick-actions-section {\r\n    .quick-actions-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: var(--space-4);\r\n\r\n      .quick-action-btn {\r\n        min-height: 60px;\r\n        font-weight: var(--font-weight-medium);\r\n        transition: all 0.2s ease;\r\n\r\n        &:hover {\r\n          transform: translateY(-2px);\r\n          box-shadow: var(--shadow-md);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Alerts Section\r\n  .alerts-section {\r\n    .alert-banner {\r\n      margin-bottom: var(--space-3);\r\n\r\n      &:last-child {\r\n        margin-bottom: 0;\r\n      }\r\n\r\n      &.banner-warning {\r\n        background: var(--warning-50);\r\n        border-color: var(--warning-200);\r\n      }\r\n\r\n      &.banner-error {\r\n        background: var(--negative-50);\r\n        border-color: var(--negative-200);\r\n      }\r\n\r\n      &.banner-info {\r\n        background: var(--info-50);\r\n        border-color: var(--info-200);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Widgets Grid - Verbeterde layout voor consistente uitlijning\r\n  .widgets-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(12, 1fr);\r\n    gap: var(--space-4);\r\n    auto-rows: minmax(200px, auto); // Minimale hoogte voor consistentie\r\n\r\n    .widget-grid-item {\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      // Small widgets: 4 kolommen op desktop, 6 op tablet, 12 op mobile\r\n      &.widget-small {\r\n        grid-column: span 4;\r\n\r\n        @media (max-width: 1200px) {\r\n          grid-column: span 6;\r\n        }\r\n\r\n        @media (max-width: 768px) {\r\n          grid-column: span 12;\r\n        }\r\n      }\r\n\r\n      // Medium widgets: 6 kolommen op desktop, 12 op tablet/mobile\r\n      &.widget-medium {\r\n        grid-column: span 6;\r\n\r\n        @media (max-width: 1024px) {\r\n          grid-column: span 12;\r\n        }\r\n      }\r\n\r\n      // Large widgets: altijd volledige breedte\r\n      &.widget-large {\r\n        grid-column: span 12;\r\n      }\r\n\r\n      // Zorg dat alle widgets in een rij dezelfde hoogte hebben\r\n      > * {\r\n        flex: 1;\r\n        min-height: 100%;\r\n      }\r\n    }\r\n\r\n    // Automatische row heights voor betere uitlijning\r\n    &::after {\r\n      content: '';\r\n      grid-column: 1 / -1;\r\n      height: 0;\r\n    }\r\n  }\r\n\r\n  // Empty State\r\n  .empty-dashboard {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    padding: var(--space-8);\r\n    margin: var(--space-8) 0;\r\n\r\n    h5 {\r\n      margin: var(--space-4) 0 var(--space-2) 0;\r\n      color: var(--text-primary);\r\n      font-weight: var(--font-weight-semibold);\r\n    }\r\n\r\n    p {\r\n      margin: 0 0 var(--space-6) 0;\r\n      color: var(--text-muted);\r\n      max-width: 400px;\r\n    }\r\n  }\r\n\r\n  // Dark mode\r\n  body.body--dark {\r\n    .alerts-section .alert-banner {\r\n      &.banner-warning {\r\n        background: var(--warning-900);\r\n        border-color: var(--warning-700);\r\n      }\r\n\r\n      &.banner-error {\r\n        background: var(--negative-900);\r\n        border-color: var(--negative-700);\r\n      }\r\n\r\n      &.banner-info {\r\n        background: var(--info-900);\r\n        border-color: var(--info-700);\r\n      }\r\n    }\r\n\r\n    .empty-dashboard h5 {\r\n      color: var(--text-primary-dark);\r\n    }\r\n  }\r\n\r\n  // Mobile optimizations\r\n  @media (max-width: 768px) {\r\n    .dashboard-container {\r\n      gap: var(--space-4);\r\n    }\r\n\r\n    .quick-actions-section .quick-actions-grid {\r\n      grid-template-columns: 1fr;\r\n      gap: var(--space-3);\r\n\r\n      .quick-action-btn {\r\n        min-height: 50px;\r\n        font-size: var(--text-sm);\r\n      }\r\n    }\r\n\r\n    .widgets-grid {\r\n      gap: var(--space-4);\r\n\r\n      .widget-grid-item {\r\n        grid-column: span 12;\r\n      }\r\n    }\r\n\r\n    .empty-dashboard {\r\n      padding: var(--space-6);\r\n      margin: var(--space-6) 0;\r\n    }\r\n  }\r\n\r\n  // Enhanced responsive grid\r\n  @media (min-width: 1400px) {\r\n    .widgets-grid {\r\n      grid-template-columns: repeat(16, 1fr);\r\n\r\n      .widget-grid-item {\r\n        &.widget-small {\r\n          grid-column: span 4;\r\n        }\r\n\r\n        &.widget-medium {\r\n          grid-column: span 8;\r\n        }\r\n\r\n        &.widget-large {\r\n          grid-column: span 16;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Animation for widget loading\r\n  .widget-grid-item {\r\n    transition: all 0.3s ease;\r\n\r\n    &:hover {\r\n      transform: translateY(-2px);\r\n    }\r\n  }\r\n\r\n  // Loading states\r\n  .q-loading-bar {\r\n    background: var(--primary);\r\n  }\r\n\r\n  // Enforce consistent width for demo switcher in both light and dark\r\n  .demo-role-switcher {\r\n    width: 360px;\r\n    max-width: 360px;\r\n    flex: 0 0 360px;\r\n  }\r\n\r\n  body.body--dark .demo-role-switcher {\r\n    width: 360px;\r\n    max-width: 360px;\r\n    flex: 0 0 360px;\r\n  }\r\n\r\n  // Role option styling\r\n  .role-option-item {\r\n    transition: all 0.2s ease;\r\n\r\n    &:hover {\r\n      background: var(--neutral-100);\r\n    }\r\n\r\n    .q-item__section--avatar {\r\n      color: var(--primary);\r\n    }\r\n  }\r\n\r\n  // Dark mode role option hover\r\n  body.body--dark {\r\n    .role-option-item:hover {\r\n      background: var(--bg-tertiary);\r\n    }\r\n  }\r\n\r\n  // Dashboard transition animations\r\n  .dashboard-transition-enter-active,\r\n  .dashboard-transition-leave-active {\r\n    transition: all 0.4s ease;\r\n  }\r\n\r\n  .dashboard-transition-enter-from {\r\n    opacity: 0;\r\n    transform: translateY(20px) scale(0.95);\r\n  }\r\n\r\n  .dashboard-transition-leave-to {\r\n    opacity: 0;\r\n    transform: translateY(-20px) scale(1.05);\r\n  }\r\n\r\n  .dashboard-transition-enter-to,\r\n  .dashboard-transition-leave-from {\r\n    opacity: 1;\r\n    transform: translateY(0) scale(1);\r\n  }\r\n\r\n  // Title transition (for future use)\r\n  .title-transition-enter-active,\r\n  .title-transition-leave-active {\r\n    transition: all 0.3s ease;\r\n  }\r\n\r\n  .title-transition-enter-from,\r\n  .title-transition-leave-to {\r\n    opacity: 0;\r\n    transform: translateX(10px);\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\ErrorNotFound.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 56,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 31,
        "fix": { "range": [1822, 1869], "text": "class=\"btn-modern\"\r\n            @click=\"goHome\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 57,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 57,
        "endColumn": 23,
        "fix": {
          "range": [1822, 1893],
          "text": "unelevated\r\n            @click=\"goHome\"\r\n            class=\"btn-modern\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 58,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 58,
        "endColumn": 20,
        "fix": {
          "range": [1822, 1914],
          "text": "no-caps\r\n            @click=\"goHome\"\r\n            class=\"btn-modern\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 59,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 59,
        "endColumn": 80,
        "fix": {
          "range": [1822, 1995],
          "text": ":aria-label=\"$t('error.goHome') + ' - Navigeer naar het dashboard'\"\r\n            @click=\"goHome\"\r\n            class=\"btn-modern\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 66,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 31,
        "fix": { "range": [2142, 2189], "text": "class=\"btn-modern\"\r\n            @click=\"goBack\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 67,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 67,
        "endColumn": 20,
        "fix": {
          "range": [2142, 2210],
          "text": "outline\r\n            @click=\"goBack\"\r\n            class=\"btn-modern\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 68,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 68,
        "endColumn": 20,
        "fix": {
          "range": [2142, 2231],
          "text": "no-caps\r\n            @click=\"goBack\"\r\n            class=\"btn-modern\"\r\n            outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 69,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 69,
        "endColumn": 77,
        "fix": {
          "range": [2142, 2309],
          "text": ":aria-label=\"$t('error.goBack') + ' - Ga naar de vorige pagina'\"\r\n            @click=\"goBack\"\r\n            class=\"btn-modern\"\r\n            outline\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"role\" should go before \"@click\".",
        "line": 83,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 83,
        "endColumn": 28,
        "fix": { "range": [2634, 2687], "text": "role=\"button\"\r\n              @click=\"navigateTo('/')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"tabindex\" should go before \"@click\".",
        "line": 84,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 84,
        "endColumn": 27,
        "fix": {
          "range": [2634, 2715],
          "text": "tabindex=\"0\"\r\n              @click=\"navigateTo('/')\"\r\n              role=\"button\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 85,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 85,
        "endColumn": 65,
        "fix": {
          "range": [2634, 2781],
          "text": ":aria-label=\"`Navigate to ${$t('nav.dashboard')}`\"\r\n              @click=\"navigateTo('/')\"\r\n              role=\"button\"\r\n              tabindex=\"0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"role\" should go before \"@click\".",
        "line": 99,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 99,
        "endColumn": 28,
        "fix": { "range": [3188, 3249], "text": "role=\"button\"\r\n              @click=\"navigateTo('/products')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"tabindex\" should go before \"@click\".",
        "line": 100,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 100,
        "endColumn": 27,
        "fix": {
          "range": [3188, 3277],
          "text": "tabindex=\"0\"\r\n              @click=\"navigateTo('/products')\"\r\n              role=\"button\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 101,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 101,
        "endColumn": 64,
        "fix": {
          "range": [3188, 3342],
          "text": ":aria-label=\"`Navigate to ${$t('nav.products')}`\"\r\n              @click=\"navigateTo('/products')\"\r\n              role=\"button\"\r\n              tabindex=\"0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"role\" should go before \"@click\".",
        "line": 115,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 115,
        "endColumn": 28,
        "fix": { "range": [3765, 3824], "text": "role=\"button\"\r\n              @click=\"navigateTo('/orders')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"tabindex\" should go before \"@click\".",
        "line": 116,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 116,
        "endColumn": 27,
        "fix": {
          "range": [3765, 3852],
          "text": "tabindex=\"0\"\r\n              @click=\"navigateTo('/orders')\"\r\n              role=\"button\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 117,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 117,
        "endColumn": 62,
        "fix": {
          "range": [3765, 3915],
          "text": ":aria-label=\"`Navigate to ${$t('nav.orders')}`\"\r\n              @click=\"navigateTo('/orders')\"\r\n              role=\"button\"\r\n              tabindex=\"0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"role\" should go before \"@click\".",
        "line": 131,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 131,
        "endColumn": 28,
        "fix": { "range": [4326, 4387], "text": "role=\"button\"\r\n              @click=\"navigateTo('/settings')\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"tabindex\" should go before \"@click\".",
        "line": 132,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 132,
        "endColumn": 27,
        "fix": {
          "range": [4326, 4415],
          "text": "tabindex=\"0\"\r\n              @click=\"navigateTo('/settings')\"\r\n              role=\"button\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 133,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 133,
        "endColumn": 64,
        "fix": {
          "range": [4326, 4480],
          "text": ":aria-label=\"`Navigate to ${$t('nav.settings')}`\"\r\n              @click=\"navigateTo('/settings')\"\r\n              role=\"button\"\r\n              tabindex=\"0\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 20,
    "source": "<template>\r\n  <div class=\"error-page-modern\" role=\"main\">\r\n    <!-- Background Elements -->\r\n    <div class=\"error-background\" aria-hidden=\"true\">\r\n      <div class=\"bg-shapes\">\r\n        <div class=\"shape shape-1\"></div>\r\n        <div class=\"shape shape-2\"></div>\r\n        <div class=\"shape shape-3\"></div>\r\n      </div>\r\n      <div class=\"bg-gradient\"></div>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"error-container\">\r\n      <div class=\"error-content animate-fade-in\">\r\n        <!-- Medical Icon with Animation -->\r\n        <div class=\"error-icon-section\" aria-hidden=\"true\">\r\n          <div class=\"medical-cross\">\r\n            <q-icon name=\"local_hospital\" class=\"icon-size-5xl\" />\r\n          </div>\r\n          <div class=\"pulse-rings\">\r\n            <div class=\"pulse-ring pulse-ring-1\"></div>\r\n            <div class=\"pulse-ring pulse-ring-2\"></div>\r\n            <div class=\"pulse-ring pulse-ring-3\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Error number typography -->\r\n        <div class=\"error-number\" aria-hidden=\"true\">\r\n          <span class=\"number-4\">4</span>\r\n          <span class=\"number-0\">0</span>\r\n          <span class=\"number-4\">4</span>\r\n        </div>\r\n\r\n        <!-- Error Message -->\r\n        <div class=\"error-message-section\">\r\n          <h1 class=\"error-title\">\r\n            {{ $t('error.pageNotFound') }}\r\n          </h1>\r\n          <p class=\"error-description\">\r\n            {{ $t('error.pageNotFoundDescription') }}\r\n          </p>\r\n        </div>\r\n\r\n        <!-- Action Buttons -->\r\n        <div\r\n          class=\"error-actions\"\r\n          role=\"group\"\r\n          :aria-label=\"$t('common.accessibility.navigationActions')\"\r\n        >\r\n          <q-btn\r\n            color=\"primary\"\r\n            icon=\"home\"\r\n            :label=\"$t('error.goHome')\"\r\n            @click=\"goHome\"\r\n            class=\"btn-modern\"\r\n            unelevated\r\n            no-caps\r\n            :aria-label=\"$t('error.goHome') + ' - Navigeer naar het dashboard'\"\r\n          />\r\n          <q-btn\r\n            color=\"primary\"\r\n            icon=\"arrow_back\"\r\n            :label=\"$t('error.goBack')\"\r\n            @click=\"goBack\"\r\n            class=\"btn-modern\"\r\n            outline\r\n            no-caps\r\n            :aria-label=\"$t('error.goBack') + ' - Ga naar de vorige pagina'\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Help Section -->\r\n        <div class=\"error-help\">\r\n          <div\r\n            class=\"help-grid\"\r\n            role=\"navigation\"\r\n            :aria-label=\"$t('common.accessibility.quickNavigation')\"\r\n          >\r\n            <div\r\n              class=\"help-item\"\r\n              @click=\"navigateTo('/')\"\r\n              role=\"button\"\r\n              tabindex=\"0\"\r\n              :aria-label=\"`Navigate to ${$t('nav.dashboard')}`\"\r\n              @keydown.enter=\"navigateTo('/')\"\r\n              @keydown.space=\"navigateTo('/')\"\r\n            >\r\n              <q-icon\r\n                name=\"space_dashboard\"\r\n                class=\"icon-size-lg\"\r\n                aria-hidden=\"true\"\r\n              />\r\n              <span>{{ $t('nav.dashboard') }}</span>\r\n            </div>\r\n            <div\r\n              class=\"help-item\"\r\n              @click=\"navigateTo('/products')\"\r\n              role=\"button\"\r\n              tabindex=\"0\"\r\n              :aria-label=\"`Navigate to ${$t('nav.products')}`\"\r\n              @keydown.enter=\"navigateTo('/products')\"\r\n              @keydown.space=\"navigateTo('/products')\"\r\n            >\r\n              <q-icon\r\n                name=\"medical_services\"\r\n                class=\"icon-size-lg\"\r\n                aria-hidden=\"true\"\r\n              />\r\n              <span>{{ $t('nav.products') }}</span>\r\n            </div>\r\n            <div\r\n              class=\"help-item\"\r\n              @click=\"navigateTo('/orders')\"\r\n              role=\"button\"\r\n              tabindex=\"0\"\r\n              :aria-label=\"`Navigate to ${$t('nav.orders')}`\"\r\n              @keydown.enter=\"navigateTo('/orders')\"\r\n              @keydown.space=\"navigateTo('/orders')\"\r\n            >\r\n              <q-icon\r\n                name=\"assignment\"\r\n                class=\"icon-size-lg\"\r\n                aria-hidden=\"true\"\r\n              />\r\n              <span>{{ $t('nav.orders') }}</span>\r\n            </div>\r\n            <div\r\n              class=\"help-item\"\r\n              @click=\"navigateTo('/settings')\"\r\n              role=\"button\"\r\n              tabindex=\"0\"\r\n              :aria-label=\"`Navigate to ${$t('nav.settings')}`\"\r\n              @keydown.enter=\"navigateTo('/settings')\"\r\n              @keydown.space=\"navigateTo('/settings')\"\r\n            >\r\n              <q-icon name=\"tune\" class=\"icon-size-lg\" aria-hidden=\"true\" />\r\n              <span>{{ $t('nav.settings') }}</span>\r\n            </div>\r\n          </div>\r\n          <p class=\"help-text\">{{ $t('error.tryThesePages') }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useRouter } from 'vue-router';\r\n\r\n  const { t } = useI18n();\r\n  const router = useRouter();\r\n\r\n  const goHome = () => {\r\n    router.push('/');\r\n  };\r\n\r\n  const goBack = () => {\r\n    if (window.history.length > 1) {\r\n      router.go(-1);\r\n    } else {\r\n      router.push('/');\r\n    }\r\n  };\r\n\r\n  const navigateTo = (path: string) => {\r\n    router.push(path);\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .error-page-modern {\r\n    min-height: 100vh;\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: hidden;\r\n    background: linear-gradient(\r\n      135deg,\r\n      var(--brand-primary) 0%,\r\n      var(--brand-secondary) 100%\r\n    );\r\n  }\r\n\r\n  // Background styling\r\n  .error-background {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    z-index: -1;\r\n\r\n    .bg-gradient {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      background: linear-gradient(\r\n        135deg,\r\n        var(--brand-primary) 0%,\r\n        var(--brand-primary-light) 50%,\r\n        var(--brand-secondary) 100%\r\n      );\r\n      opacity: 0.95;\r\n    }\r\n\r\n    .bg-shapes {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      overflow: hidden;\r\n\r\n      .shape {\r\n        position: absolute;\r\n        border-radius: 50%;\r\n        background: rgba(255, 255, 255, 0.08);\r\n        backdrop-filter: blur(10px);\r\n        animation: float 8s ease-in-out infinite;\r\n\r\n        &.shape-1 {\r\n          width: 400px;\r\n          height: 400px;\r\n          top: -100px;\r\n          right: -100px;\r\n          animation-delay: 0s;\r\n        }\r\n\r\n        &.shape-2 {\r\n          width: 300px;\r\n          height: 300px;\r\n          bottom: -50px;\r\n          left: -100px;\r\n          animation-delay: 3s;\r\n        }\r\n\r\n        &.shape-3 {\r\n          width: 200px;\r\n          height: 200px;\r\n          top: 50%;\r\n          left: 20%;\r\n          animation-delay: 6s;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  @keyframes float {\r\n    0%,\r\n    100% {\r\n      transform: translateY(0) rotate(0deg) scale(1);\r\n    }\r\n    33% {\r\n      transform: translateY(-30px) rotate(120deg) scale(1.05);\r\n    }\r\n    66% {\r\n      transform: translateY(15px) rotate(240deg) scale(0.95);\r\n    }\r\n  }\r\n\r\n  // Main container\r\n  .error-container {\r\n    max-width: 800px;\r\n    width: 100%;\r\n    padding: var(--space-8);\r\n    text-align: center;\r\n    position: relative;\r\n    z-index: 1;\r\n  }\r\n\r\n  .error-content {\r\n    background: rgba(255, 255, 255, 0.95);\r\n    backdrop-filter: blur(20px);\r\n    border-radius: var(--radius-2xl);\r\n    padding: var(--space-12) var(--space-8);\r\n    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);\r\n    border: 1px solid rgba(255, 255, 255, 0.2);\r\n\r\n    @media (max-width: 768px) {\r\n      padding: var(--space-8) var(--space-6);\r\n      margin: var(--space-4);\r\n    }\r\n  }\r\n\r\n  // Medical icon with pulse animation\r\n  .error-icon-section {\r\n    position: relative;\r\n    margin-bottom: var(--space-8);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 200px;\r\n  }\r\n\r\n  .medical-cross {\r\n    position: relative;\r\n    z-index: 2;\r\n    color: var(--brand-primary);\r\n    filter: drop-shadow(0 8px 16px rgba(99, 102, 241, 0.3));\r\n    animation: breathe 3s ease-in-out infinite;\r\n  }\r\n\r\n  @keyframes breathe {\r\n    0%,\r\n    100% {\r\n      transform: scale(1);\r\n    }\r\n    50% {\r\n      transform: scale(1.05);\r\n    }\r\n  }\r\n\r\n  .pulse-rings {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 1;\r\n  }\r\n\r\n  .pulse-ring {\r\n    position: absolute;\r\n    width: 180px;\r\n    height: 180px;\r\n    border: 2px solid var(--brand-primary);\r\n    border-radius: 50%;\r\n    opacity: 0;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    animation: pulse 3s ease-out infinite;\r\n  }\r\n\r\n  .pulse-ring-1 {\r\n    animation-delay: 0s;\r\n  }\r\n  .pulse-ring-2 {\r\n    animation-delay: 1s;\r\n  }\r\n  .pulse-ring-3 {\r\n    animation-delay: 2s;\r\n  }\r\n\r\n  @keyframes pulse {\r\n    0% {\r\n      transform: translate(-50%, -50%) scale(0.5);\r\n      opacity: 1;\r\n    }\r\n    100% {\r\n      transform: translate(-50%, -50%) scale(1.5);\r\n      opacity: 0;\r\n    }\r\n  }\r\n\r\n  // Error number styling\r\n  .error-number {\r\n    font-size: 8rem;\r\n    font-weight: 900;\r\n    line-height: 1;\r\n    margin-bottom: var(--space-6);\r\n    background: linear-gradient(\r\n      135deg,\r\n      var(--brand-primary),\r\n      var(--brand-secondary)\r\n    );\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    background-clip: text;\r\n    position: relative;\r\n\r\n    @media (max-width: 768px) {\r\n      font-size: 6rem;\r\n    }\r\n\r\n    span {\r\n      display: inline-block;\r\n      animation: bounceIn 0.8s ease-out;\r\n\r\n      &.number-4:first-child {\r\n        animation-delay: 0.2s;\r\n      }\r\n      &.number-0 {\r\n        animation-delay: 0.4s;\r\n      }\r\n      &.number-4:last-child {\r\n        animation-delay: 0.6s;\r\n      }\r\n    }\r\n  }\r\n\r\n  @keyframes bounceIn {\r\n    0% {\r\n      transform: scale(0.3) translateY(-50px);\r\n      opacity: 0;\r\n    }\r\n    50% {\r\n      transform: scale(1.05);\r\n    }\r\n    70% {\r\n      transform: scale(0.9);\r\n    }\r\n    100% {\r\n      transform: scale(1) translateY(0);\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  // Message section\r\n  .error-message-section {\r\n    margin-bottom: var(--space-8);\r\n  }\r\n\r\n  .error-title {\r\n    font-size: var(--text-2xl);\r\n    font-weight: var(--font-weight-bold);\r\n    color: var(--neutral-800);\r\n    margin-bottom: var(--space-4);\r\n    letter-spacing: -0.025em;\r\n\r\n    @media (max-width: 768px) {\r\n      font-size: var(--text-xl);\r\n    }\r\n  }\r\n\r\n  .error-description {\r\n    font-size: var(--text-lg);\r\n    color: var(--neutral-600);\r\n    line-height: var(--leading-relaxed);\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n\r\n    @media (max-width: 768px) {\r\n      font-size: var(--text-base);\r\n    }\r\n  }\r\n\r\n  // Action buttons\r\n  .error-actions {\r\n    display: flex;\r\n    gap: var(--space-4);\r\n    justify-content: center;\r\n    margin-bottom: var(--space-8);\r\n    flex-wrap: wrap;\r\n\r\n    @media (max-width: 640px) {\r\n      flex-direction: column;\r\n      align-items: center;\r\n\r\n      .q-btn {\r\n        width: 100%;\r\n        max-width: 300px;\r\n      }\r\n    }\r\n  }\r\n\r\n  .btn-modern {\r\n    border-radius: var(--radius-xl);\r\n    padding: var(--space-3) var(--space-6);\r\n    font-weight: var(--font-weight-semibold);\r\n    letter-spacing: 0.025em;\r\n    transition: all var(--transition-base);\r\n    box-shadow: var(--shadow-sm);\r\n\r\n    &:hover {\r\n      transform: translateY(-2px);\r\n      background: rgba(255, 255, 255, 0.15);\r\n      box-shadow: var(--shadow-lg);\r\n    }\r\n\r\n    &:focus {\r\n      outline: 2px solid white;\r\n      outline-offset: 2px;\r\n      background: rgba(255, 255, 255, 0.15);\r\n      transform: translateY(-1px);\r\n    }\r\n\r\n    &.btn-primary {\r\n      background: linear-gradient(\r\n        135deg,\r\n        var(--brand-primary),\r\n        var(--brand-primary-dark)\r\n      );\r\n    }\r\n\r\n    &.btn-secondary {\r\n      border: 2px solid var(--brand-primary);\r\n      color: var(--brand-primary);\r\n\r\n      &:hover {\r\n        background: var(--brand-primary);\r\n        color: white;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Help section\r\n  .error-help {\r\n    border-top: 1px solid var(--neutral-200);\r\n    padding-top: var(--space-6);\r\n  }\r\n\r\n  .help-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\r\n    gap: var(--space-4);\r\n    margin-bottom: var(--space-4);\r\n\r\n    @media (max-width: 640px) {\r\n      grid-template-columns: repeat(2, 1fr);\r\n    }\r\n  }\r\n\r\n  .help-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-2);\r\n    padding: var(--space-3);\r\n    border-radius: var(--radius-lg);\r\n    background: rgba(var(--brand-primary), 0.05);\r\n    color: var(--brand-primary);\r\n    font-weight: var(--font-weight-medium);\r\n    font-size: var(--text-sm);\r\n    transition: all var(--transition-base);\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n      background: rgba(var(--brand-primary), 0.1);\r\n      transform: translateY(-1px);\r\n    }\r\n\r\n    .q-icon {\r\n      flex-shrink: 0;\r\n    }\r\n  }\r\n\r\n  .help-text {\r\n    font-size: var(--text-sm);\r\n    color: var(--neutral-500);\r\n    margin: 0;\r\n  }\r\n\r\n  // Animation classes\r\n  .animate-fade-in {\r\n    animation: fadeIn 1s ease-out;\r\n  }\r\n\r\n  @keyframes fadeIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(30px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n\r\n  // Dark mode support\r\n  body.body--dark {\r\n    .error-content {\r\n      background: rgba(23, 23, 23, 0.95);\r\n      border: 1px solid rgba(255, 255, 255, 0.1);\r\n    }\r\n\r\n    .error-title {\r\n      color: var(--neutral-100);\r\n    }\r\n\r\n    .error-description {\r\n      color: var(--neutral-300);\r\n    }\r\n\r\n    .help-item {\r\n      background: rgba(99, 102, 241, 0.1);\r\n\r\n      &:hover {\r\n        background: rgba(99, 102, 241, 0.2);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Accessibility improvements\r\n  @media (prefers-reduced-motion: reduce) {\r\n    .medical-cross,\r\n    .pulse-ring,\r\n    .error-number span,\r\n    .shape {\r\n      animation: none;\r\n    }\r\n\r\n    .btn-modern:hover {\r\n      transform: none;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NewDialogsGalleryPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 26,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 26,
        "endColumn": 29,
        "fix": { "range": [823, 878], "text": "class=\"demo-btn\"\r\n            @click=\"showSmall = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 33,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 33,
        "endColumn": 29,
        "fix": { "range": [1015, 1071], "text": "class=\"demo-btn\"\r\n            @click=\"showMedium = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 40,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 40,
        "endColumn": 29,
        "fix": { "range": [1210, 1265], "text": "class=\"demo-btn\"\r\n            @click=\"showLarge = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 47,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 47,
        "endColumn": 29,
        "fix": { "range": [1404, 1464], "text": "class=\"demo-btn\"\r\n            @click=\"showPersistent = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 66,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 29,
        "fix": { "range": [2045, 2105], "text": "class=\"demo-btn\"\r\n            @click=\"showSimpleForm = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 73,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 73,
        "endColumn": 29,
        "fix": { "range": [2242, 2303], "text": "class=\"demo-btn\"\r\n            @click=\"showComplexForm = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 80,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 80,
        "endColumn": 29,
        "fix": { "range": [2447, 2508], "text": "class=\"demo-btn\"\r\n            @click=\"showLoadingForm = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 87,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 87,
        "endColumn": 29,
        "fix": {
          "range": [2647, 2711],
          "text": "class=\"demo-btn\"\r\n            @click=\"showValidationForm = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 105,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 105,
        "endColumn": 29,
        "fix": { "range": [3225, 3287], "text": "class=\"demo-btn\"\r\n            @click=\"showConfirmClose = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 112,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 112,
        "endColumn": 29,
        "fix": { "range": [3431, 3487], "text": "class=\"demo-btn\"\r\n            @click=\"showWizard = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 119,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 119,
        "endColumn": 29,
        "fix": { "range": [3629, 3685], "text": "class=\"demo-btn\"\r\n            @click=\"showNested = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-ripple\" should go before \"clickable\".",
        "line": 161,
        "column": 55,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 161,
        "endColumn": 63,
        "fix": { "range": [4966, 4984], "text": "v-ripple clickable" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 218,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 218,
        "endColumn": 36,
        "fix": { "range": [7068, 7081], "text": "#avatar" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@input\".",
        "line": 446,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 446,
        "endColumn": 28,
        "fix": {
          "range": [14397, 14459],
          "text": "class=\"q-mb-md\"\r\n            @input=\"hasUnsavedChanges = true\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 449,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 449,
        "endColumn": 36,
        "fix": { "range": [14546, 14559], "text": "#avatar" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 470,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 470,
        "endColumn": 28,
        "fix": { "range": [15191, 15251], "text": "class=\"q-mt-md\"\r\n            @click=\"showNestedChild = true\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 485,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 485,
        "endColumn": 36,
        "fix": { "range": [15712, 15725], "text": "#avatar" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 17,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        title=\"Dialog Gallery\"\r\n        subtitle=\"Showcase of BaseDialog and FormDialog components with tokenized styles\"\r\n        icon=\"view_carousel\"\r\n      />\r\n    </template>\r\n\r\n    <div class=\"dialogs-gallery\">\r\n      <!-- BaseDialog Examples -->\r\n      <section class=\"gallery-section\">\r\n        <h2 class=\"section-title\">🪟 BaseDialog Examples</h2>\r\n        <p class=\"section-description\">\r\n          BaseDialog provides the foundation for all modal interactions with consistent styling,\r\n          keyboard navigation (ESC to close), focus management, and tokenized design.\r\n        </p>\r\n\r\n        <div class=\"demo-buttons\">\r\n          <q-btn\r\n            label=\"Small Dialog\"\r\n            icon=\"info\"\r\n            color=\"primary\"\r\n            @click=\"showSmall = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Medium Dialog\"\r\n            icon=\"list\"\r\n            color=\"secondary\"\r\n            @click=\"showMedium = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Large Dialog\"\r\n            icon=\"fullscreen\"\r\n            color=\"accent\"\r\n            @click=\"showLarge = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Persistent Dialog\"\r\n            icon=\"lock\"\r\n            color=\"warning\"\r\n            @click=\"showPersistent = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- FormDialog Examples -->\r\n      <section class=\"gallery-section\">\r\n        <h2 class=\"section-title\">📝 FormDialog Examples</h2>\r\n        <p class=\"section-description\">\r\n          FormDialog extends BaseDialog with form-specific features: validation, loading states,\r\n          confirm-before-close functionality, and standardized action buttons.\r\n        </p>\r\n\r\n        <div class=\"demo-buttons\">\r\n          <q-btn\r\n            label=\"Simple Form\"\r\n            icon=\"edit\"\r\n            color=\"positive\"\r\n            @click=\"showSimpleForm = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Complex Form\"\r\n            icon=\"assignment\"\r\n            color=\"info\"\r\n            @click=\"showComplexForm = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Loading Form\"\r\n            icon=\"hourglass_empty\"\r\n            color=\"purple\"\r\n            @click=\"showLoadingForm = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Validation Form\"\r\n            icon=\"error\"\r\n            color=\"negative\"\r\n            @click=\"showValidationForm = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- Feature Demonstrations -->\r\n      <section class=\"gallery-section\">\r\n        <h2 class=\"section-title\">⚡ Feature Demonstrations</h2>\r\n        <p class=\"section-description\">\r\n          Advanced features including focus trapping, confirm-close dialogs, and keyboard navigation.\r\n        </p>\r\n\r\n        <div class=\"demo-buttons\">\r\n          <q-btn\r\n            label=\"Confirm Close\"\r\n            icon=\"warning\"\r\n            color=\"orange\"\r\n            @click=\"showConfirmClose = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Multi-Step Wizard\"\r\n            icon=\"linear_scale\"\r\n            color=\"teal\"\r\n            @click=\"showWizard = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n          <q-btn\r\n            label=\"Nested Dialogs\"\r\n            icon=\"layers\"\r\n            color=\"deep-purple\"\r\n            @click=\"showNested = true\"\r\n            class=\"demo-btn\"\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- BaseDialog Instances -->\r\n      <BaseDialog\r\n        v-model=\"showSmall\"\r\n        title=\"Small Dialog\"\r\n        subtitle=\"Compact size with tokenized styling\"\r\n        icon=\"info\"\r\n        size=\"sm\"\r\n        @close=\"handleDialogClose('small')\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <p>This is a small dialog demonstrating:</p>\r\n          <ul>\r\n            <li>Tokenized colors and spacing</li>\r\n            <li>ESC key to close</li>\r\n            <li>Focus management</li>\r\n            <li>Responsive design</li>\r\n          </ul>\r\n          <q-input\r\n            outlined\r\n            label=\"Sample Input\"\r\n            placeholder=\"Try pressing ESC to close\"\r\n            class=\"q-mt-md\"\r\n          />\r\n        </div>\r\n      </BaseDialog>\r\n\r\n      <BaseDialog\r\n        v-model=\"showMedium\"\r\n        title=\"Medium Dialog\"\r\n        subtitle=\"Standard size for most content\"\r\n        icon=\"list\"\r\n        size=\"md\"\r\n        @close=\"handleDialogClose('medium')\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <q-list bordered separator class=\"tokenized-list\">\r\n            <q-item-label header class=\"list-header\">Sample List Items</q-item-label>\r\n            <q-item v-for=\"n in 8\" :key=\"n\" clickable v-ripple>\r\n              <q-item-section avatar>\r\n                <q-icon :name=\"getRandomIcon(n)\" :color=\"getRandomColor(n)\" />\r\n              </q-item-section>\r\n              <q-item-section>\r\n                <q-item-label>List Item {{ n }}</q-item-label>\r\n                <q-item-label caption>With tokenized styling</q-item-label>\r\n              </q-item-section>\r\n            </q-item>\r\n          </q-list>\r\n        </div>\r\n      </BaseDialog>\r\n\r\n      <BaseDialog\r\n        v-model=\"showLarge\"\r\n        title=\"Large Dialog\"\r\n        subtitle=\"Maximum content area\"\r\n        icon=\"fullscreen\"\r\n        size=\"lg\"\r\n        @close=\"handleDialogClose('large')\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <div class=\"large-content-grid\">\r\n            <div class=\"content-section\">\r\n              <h4>Features</h4>\r\n              <p>Large dialogs are perfect for:</p>\r\n              <ul>\r\n                <li>Complex forms</li>\r\n                <li>Data tables</li>\r\n                <li>Rich content</li>\r\n                <li>Multi-column layouts</li>\r\n              </ul>\r\n            </div>\r\n            <div class=\"content-section\">\r\n              <h4>Design Tokens</h4>\r\n              <div class=\"token-showcase\">\r\n                <div class=\"token-item\" style=\"background: var(--brand-primary)\">Primary</div>\r\n                <div class=\"token-item\" style=\"background: var(--brand-secondary)\">Secondary</div>\r\n                <div class=\"token-item\" style=\"background: var(--brand-accent)\">Accent</div>\r\n                <div class=\"token-item\" style=\"background: var(--color-success)\">Success</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </BaseDialog>\r\n\r\n      <BaseDialog\r\n        v-model=\"showPersistent\"\r\n        title=\"Persistent Dialog\"\r\n        subtitle=\"Cannot be closed by clicking outside\"\r\n        icon=\"lock\"\r\n        size=\"md\"\r\n        persistent\r\n        @close=\"handleDialogClose('persistent')\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <q-banner class=\"bg-warning text-dark\">\r\n            <template v-slot:avatar>\r\n              <q-icon name=\"warning\" />\r\n            </template>\r\n            This dialog is persistent - you must use the close button or ESC key.\r\n          </q-banner>\r\n          <p class=\"q-mt-md\">\r\n            Persistent dialogs prevent accidental closure and are useful for:\r\n          </p>\r\n          <ul>\r\n            <li>Critical confirmations</li>\r\n            <li>Unsaved form data</li>\r\n            <li>Multi-step processes</li>\r\n          </ul>\r\n        </div>\r\n        <template #actions>\r\n          <q-btn\r\n            label=\"Close Dialog\"\r\n            color=\"primary\"\r\n            @click=\"showPersistent = false\"\r\n          />\r\n        </template>\r\n      </BaseDialog>\r\n\r\n      <!-- FormDialog Instances -->\r\n      <FormDialog\r\n        v-model=\"showSimpleForm\"\r\n        title=\"Simple Form\"\r\n        subtitle=\"Basic form with validation\"\r\n        icon=\"edit\"\r\n        size=\"md\"\r\n        :loading=\"simpleFormLoading\"\r\n        @submit=\"handleSimpleFormSubmit\"\r\n        @cancel=\"handleFormCancel('simple')\"\r\n        @close=\"handleDialogClose('simple-form')\"\r\n      >\r\n        <div class=\"form-content\">\r\n          <q-input\r\n            v-model=\"simpleForm.name\"\r\n            outlined\r\n            label=\"Name *\"\r\n            :error=\"!!simpleFormErrors.name\"\r\n            :error-message=\"simpleFormErrors.name\"\r\n            class=\"q-mb-md\"\r\n          />\r\n          <q-input\r\n            v-model=\"simpleForm.email\"\r\n            outlined\r\n            label=\"Email *\"\r\n            type=\"email\"\r\n            :error=\"!!simpleFormErrors.email\"\r\n            :error-message=\"simpleFormErrors.email\"\r\n            class=\"q-mb-md\"\r\n          />\r\n          <q-input\r\n            v-model=\"simpleForm.message\"\r\n            outlined\r\n            type=\"textarea\"\r\n            label=\"Message\"\r\n            rows=\"3\"\r\n            class=\"q-mb-md\"\r\n          />\r\n        </div>\r\n      </FormDialog>\r\n\r\n      <FormDialog\r\n        v-model=\"showComplexForm\"\r\n        title=\"Complex Form\"\r\n        subtitle=\"Multi-section form with advanced controls\"\r\n        icon=\"assignment\"\r\n        size=\"lg\"\r\n        :loading=\"complexFormLoading\"\r\n        :confirm-before-close=\"true\"\r\n        confirm-close-message=\"You have unsaved changes. Are you sure you want to close?\"\r\n        @submit=\"handleComplexFormSubmit\"\r\n        @cancel=\"handleFormCancel('complex')\"\r\n        @close=\"handleDialogClose('complex-form')\"\r\n      >\r\n        <div class=\"complex-form\">\r\n          <div class=\"form-section\">\r\n            <h4 class=\"form-section-title\">Basic Information</h4>\r\n            <div class=\"form-row\">\r\n              <q-input\r\n                v-model=\"complexForm.firstName\"\r\n                outlined\r\n                label=\"First Name *\"\r\n                class=\"col-6\"\r\n              />\r\n              <q-input\r\n                v-model=\"complexForm.lastName\"\r\n                outlined\r\n                label=\"Last Name *\"\r\n                class=\"col-6\"\r\n              />\r\n            </div>\r\n            <q-input\r\n              v-model=\"complexForm.email\"\r\n              outlined\r\n              label=\"Email Address *\"\r\n              type=\"email\"\r\n              class=\"q-mb-md\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-section\">\r\n            <h4 class=\"form-section-title\">Preferences</h4>\r\n            <q-select\r\n              v-model=\"complexForm.role\"\r\n              outlined\r\n              label=\"Role\"\r\n              :options=\"roleOptions\"\r\n              class=\"q-mb-md\"\r\n            />\r\n            <q-option-group\r\n              v-model=\"complexForm.notifications\"\r\n              :options=\"notificationOptions\"\r\n              color=\"primary\"\r\n              type=\"checkbox\"\r\n              class=\"q-mb-md\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-section\">\r\n            <h4 class=\"form-section-title\">Additional Settings</h4>\r\n            <q-toggle\r\n              v-model=\"complexForm.newsletter\"\r\n              label=\"Subscribe to newsletter\"\r\n              class=\"q-mb-md\"\r\n            />\r\n            <q-slider\r\n              v-model=\"complexForm.experience\"\r\n              :min=\"1\"\r\n              :max=\"10\"\r\n              :step=\"1\"\r\n              label\r\n              :label-value=\"`Experience: ${complexForm.experience}/10`\"\r\n              class=\"q-mb-md\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </FormDialog>\r\n\r\n      <FormDialog\r\n        v-model=\"showLoadingForm\"\r\n        title=\"Loading Form\"\r\n        subtitle=\"Demonstrates loading states\"\r\n        icon=\"hourglass_empty\"\r\n        size=\"md\"\r\n        :loading=\"loadingFormActive\"\r\n        loading-text=\"Processing your request...\"\r\n        @submit=\"handleLoadingFormSubmit\"\r\n        @cancel=\"handleFormCancel('loading')\"\r\n      >\r\n        <div class=\"form-content\">\r\n          <q-input\r\n            v-model=\"loadingForm.data\"\r\n            outlined\r\n            label=\"Some Data\"\r\n            :disable=\"loadingFormActive\"\r\n            class=\"q-mb-md\"\r\n          />\r\n          <p class=\"text-caption\">\r\n            Click submit to see the loading state in action.\r\n          </p>\r\n        </div>\r\n      </FormDialog>\r\n\r\n      <FormDialog\r\n        v-model=\"showValidationForm\"\r\n        title=\"Validation Form\"\r\n        subtitle=\"Form with validation errors\"\r\n        icon=\"error\"\r\n        size=\"md\"\r\n        :form-errors=\"validationErrors\"\r\n        :can-submit=\"isValidationFormValid\"\r\n        @submit=\"handleValidationFormSubmit\"\r\n        @cancel=\"handleFormCancel('validation')\"\r\n      >\r\n        <div class=\"form-content\">\r\n          <q-input\r\n            v-model=\"validationForm.username\"\r\n            outlined\r\n            label=\"Username *\"\r\n            :error=\"!!validationFieldErrors.username\"\r\n            :error-message=\"validationFieldErrors.username\"\r\n            class=\"q-mb-md\"\r\n            @blur=\"validateField('username')\"\r\n          />\r\n          <q-input\r\n            v-model=\"validationForm.password\"\r\n            outlined\r\n            type=\"password\"\r\n            label=\"Password *\"\r\n            :error=\"!!validationFieldErrors.password\"\r\n            :error-message=\"validationFieldErrors.password\"\r\n            class=\"q-mb-md\"\r\n            @blur=\"validateField('password')\"\r\n          />\r\n          <q-input\r\n            v-model=\"validationForm.confirmPassword\"\r\n            outlined\r\n            type=\"password\"\r\n            label=\"Confirm Password *\"\r\n            :error=\"!!validationFieldErrors.confirmPassword\"\r\n            :error-message=\"validationFieldErrors.confirmPassword\"\r\n            class=\"q-mb-md\"\r\n            @blur=\"validateField('confirmPassword')\"\r\n          />\r\n        </div>\r\n      </FormDialog>\r\n\r\n      <!-- Feature Demonstration Dialogs -->\r\n      <FormDialog\r\n        v-model=\"showConfirmClose\"\r\n        title=\"Confirm Close Demo\"\r\n        subtitle=\"Try to close without saving\"\r\n        icon=\"warning\"\r\n        size=\"md\"\r\n        :confirm-before-close=\"hasUnsavedChanges\"\r\n        confirm-close-message=\"You have unsaved changes. Are you sure you want to close?\"\r\n        @submit=\"handleConfirmCloseSubmit\"\r\n        @cancel=\"handleFormCancel('confirm-close')\"\r\n      >\r\n        <div class=\"form-content\">\r\n          <q-input\r\n            v-model=\"confirmCloseForm.data\"\r\n            outlined\r\n            label=\"Type something to enable confirm-close\"\r\n            @input=\"hasUnsavedChanges = true\"\r\n            class=\"q-mb-md\"\r\n          />\r\n          <q-banner class=\"bg-info text-white\">\r\n            <template v-slot:avatar>\r\n              <q-icon name=\"info\" />\r\n            </template>\r\n            Start typing to activate the confirm-close feature. Then try to close the dialog.\r\n          </q-banner>\r\n        </div>\r\n      </FormDialog>\r\n\r\n      <BaseDialog\r\n        v-model=\"showNested\"\r\n        title=\"Nested Dialog Demo\"\r\n        subtitle=\"Dialog that opens another dialog\"\r\n        icon=\"layers\"\r\n        size=\"md\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <p>This demonstrates nested dialogs with proper z-index management.</p>\r\n          <q-btn\r\n            label=\"Open Nested Dialog\"\r\n            color=\"primary\"\r\n            @click=\"showNestedChild = true\"\r\n            class=\"q-mt-md\"\r\n          />\r\n        </div>\r\n      </BaseDialog>\r\n\r\n      <BaseDialog\r\n        v-model=\"showNestedChild\"\r\n        title=\"Nested Child Dialog\"\r\n        subtitle=\"This dialog is nested inside another\"\r\n        icon=\"child_care\"\r\n        size=\"sm\"\r\n      >\r\n        <div class=\"dialog-content\">\r\n          <p>This is a nested dialog. Notice how it appears above the parent dialog.</p>\r\n          <q-banner class=\"bg-positive text-white\">\r\n            <template v-slot:avatar>\r\n              <q-icon name=\"check_circle\" />\r\n            </template>\r\n            Nested dialogs work perfectly with proper z-index management!\r\n          </q-banner>\r\n        </div>\r\n      </BaseDialog>\r\n    </div>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import FormDialog from 'src/components/base/FormDialog.vue';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n\r\n  const $q = useQuasar();\r\n\r\n  // BaseDialog states\r\n  const showSmall = ref(false);\r\n  const showMedium = ref(false);\r\n  const showLarge = ref(false);\r\n  const showPersistent = ref(false);\r\n\r\n  // FormDialog states\r\n  const showSimpleForm = ref(false);\r\n  const showComplexForm = ref(false);\r\n  const showLoadingForm = ref(false);\r\n  const showValidationForm = ref(false);\r\n\r\n  // Feature demo states\r\n  const showConfirmClose = ref(false);\r\n  const showWizard = ref(false);\r\n  const showNested = ref(false);\r\n  const showNestedChild = ref(false);\r\n\r\n  // Form data and states\r\n  const simpleFormLoading = ref(false);\r\n  const complexFormLoading = ref(false);\r\n  const loadingFormActive = ref(false);\r\n  const hasUnsavedChanges = ref(false);\r\n\r\n  // Simple form\r\n  const simpleForm = ref({\r\n    name: '',\r\n    email: '',\r\n    message: ''\r\n  });\r\n\r\n  const simpleFormErrors = ref<Record<string, string>>({});\r\n\r\n  // Complex form\r\n  const complexForm = ref({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    role: '',\r\n    notifications: [],\r\n    newsletter: false,\r\n    experience: 5\r\n  });\r\n\r\n  // Loading form\r\n  const loadingForm = ref({\r\n    data: ''\r\n  });\r\n\r\n  // Validation form\r\n  const validationForm = ref({\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: ''\r\n  });\r\n\r\n  const validationFieldErrors = ref<Record<string, string>>({});\r\n\r\n  // Confirm close form\r\n  const confirmCloseForm = ref({\r\n    data: ''\r\n  });\r\n\r\n  // Form options\r\n  const roleOptions = [\r\n    'Administrator',\r\n    'Manager',\r\n    'User',\r\n    'Guest'\r\n  ];\r\n\r\n  const notificationOptions = [\r\n    { label: 'Email notifications', value: 'email' },\r\n    { label: 'SMS notifications', value: 'sms' },\r\n    { label: 'Push notifications', value: 'push' }\r\n  ];\r\n\r\n  // Computed properties\r\n  const validationErrors = computed(() => {\r\n    const errors: string[] = [];\r\n    if (validationFieldErrors.value.username) errors.push(validationFieldErrors.value.username);\r\n    if (validationFieldErrors.value.password) errors.push(validationFieldErrors.value.password);\r\n    if (validationFieldErrors.value.confirmPassword) errors.push(validationFieldErrors.value.confirmPassword);\r\n    return errors;\r\n  });\r\n\r\n  const isValidationFormValid = computed(() => {\r\n    return validationForm.value.username.length >= 3 &&\r\n           validationForm.value.password.length >= 6 &&\r\n           validationForm.value.password === validationForm.value.confirmPassword;\r\n  });\r\n\r\n  // Methods\r\n  const handleDialogClose = (dialogName: string) => {\r\n    console.log(`Dialog closed: ${dialogName}`);\r\n    $q.notify({\r\n      message: `${dialogName} dialog closed`,\r\n      type: 'info',\r\n      position: 'top-right',\r\n      timeout: 2000\r\n    });\r\n  };\r\n\r\n  const handleFormCancel = (formName: string) => {\r\n    console.log(`Form cancelled: ${formName}`);\r\n    $q.notify({\r\n      message: `${formName} form cancelled`,\r\n      type: 'warning',\r\n      position: 'top-right',\r\n      timeout: 2000\r\n    });\r\n  };\r\n\r\n  const handleSimpleFormSubmit = async () => {\r\n    // Reset errors\r\n    simpleFormErrors.value = {};\r\n\r\n    // Validate\r\n    if (!simpleForm.value.name.trim()) {\r\n      simpleFormErrors.value.name = 'Name is required';\r\n    }\r\n    if (!simpleForm.value.email.trim()) {\r\n      simpleFormErrors.value.email = 'Email is required';\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(simpleForm.value.email)) {\r\n      simpleFormErrors.value.email = 'Email is invalid';\r\n    }\r\n\r\n    if (Object.keys(simpleFormErrors.value).length > 0) {\r\n      return;\r\n    }\r\n\r\n    simpleFormLoading.value = true;\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    simpleFormLoading.value = false;\r\n    showSimpleForm.value = false;\r\n    \r\n    $q.notify({\r\n      message: 'Simple form submitted successfully!',\r\n      type: 'positive',\r\n      position: 'top-right'\r\n    });\r\n\r\n    // Reset form\r\n    simpleForm.value = { name: '', email: '', message: '' };\r\n  };\r\n\r\n  const handleComplexFormSubmit = async () => {\r\n    complexFormLoading.value = true;\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 3000));\r\n    \r\n    complexFormLoading.value = false;\r\n    showComplexForm.value = false;\r\n    \r\n    $q.notify({\r\n      message: 'Complex form submitted successfully!',\r\n      type: 'positive',\r\n      position: 'top-right'\r\n    });\r\n  };\r\n\r\n  const handleLoadingFormSubmit = async () => {\r\n    loadingFormActive.value = true;\r\n    \r\n    // Simulate processing\r\n    await new Promise(resolve => setTimeout(resolve, 4000));\r\n    \r\n    loadingFormActive.value = false;\r\n    showLoadingForm.value = false;\r\n    \r\n    $q.notify({\r\n      message: 'Loading form processed successfully!',\r\n      type: 'positive',\r\n      position: 'top-right'\r\n    });\r\n  };\r\n\r\n  const handleValidationFormSubmit = () => {\r\n    if (isValidationFormValid.value) {\r\n      showValidationForm.value = false;\r\n      $q.notify({\r\n        message: 'Validation form submitted successfully!',\r\n        type: 'positive',\r\n        position: 'top-right'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmCloseSubmit = () => {\r\n    hasUnsavedChanges.value = false;\r\n    showConfirmClose.value = false;\r\n    $q.notify({\r\n      message: 'Confirm close form saved!',\r\n      type: 'positive',\r\n      position: 'top-right'\r\n    });\r\n  };\r\n\r\n  const validateField = (fieldName: string) => {\r\n    validationFieldErrors.value = { ...validationFieldErrors.value };\r\n\r\n    switch (fieldName) {\r\n      case 'username':\r\n        if (validationForm.value.username.length < 3) {\r\n          validationFieldErrors.value.username = 'Username must be at least 3 characters';\r\n        } else {\r\n          delete validationFieldErrors.value.username;\r\n        }\r\n        break;\r\n      case 'password':\r\n        if (validationForm.value.password.length < 6) {\r\n          validationFieldErrors.value.password = 'Password must be at least 6 characters';\r\n        } else {\r\n          delete validationFieldErrors.value.password;\r\n        }\r\n        break;\r\n      case 'confirmPassword':\r\n        if (validationForm.value.confirmPassword !== validationForm.value.password) {\r\n          validationFieldErrors.value.confirmPassword = 'Passwords do not match';\r\n        } else {\r\n          delete validationFieldErrors.value.confirmPassword;\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Helper functions for demo content\r\n  const getRandomIcon = (index: number) => {\r\n    const icons = ['star', 'favorite', 'home', 'work', 'settings', 'account_circle', 'shopping_cart', 'notifications'];\r\n    return icons[index % icons.length];\r\n  };\r\n\r\n  const getRandomColor = (index: number) => {\r\n    const colors = ['primary', 'secondary', 'accent', 'positive', 'negative', 'info', 'warning'];\r\n    return colors[index % colors.length];\r\n  };\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n/* =================================================================== */\r\n/* DIALOG GALLERY - TOKENIZED STYLES */\r\n/* Demonstrates the design token system in action */\r\n/* =================================================================== */\r\n\r\n.dialogs-gallery {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: var(--space-lg);\r\n}\r\n\r\n.gallery-section {\r\n  margin-bottom: var(--space-2xl);\r\n  padding: var(--space-lg);\r\n  background: var(--bg-secondary);\r\n  border: 1px solid var(--border-primary);\r\n  border-radius: var(--radius-lg);\r\n  box-shadow: var(--shadow-sm);\r\n}\r\n\r\n.section-title {\r\n  font-size: var(--text-h3);\r\n  font-weight: var(--font-weight-semibold);\r\n  color: var(--text-primary);\r\n  margin-bottom: var(--space-md);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: var(--space-sm);\r\n}\r\n\r\n.section-description {\r\n  color: var(--text-secondary);\r\n  font-size: var(--text-body);\r\n  line-height: var(--line-height-relaxed);\r\n  margin-bottom: var(--space-lg);\r\n}\r\n\r\n.demo-buttons {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: var(--space-md);\r\n}\r\n\r\n.demo-btn {\r\n  min-width: 140px;\r\n  font-weight: var(--font-weight-medium);\r\n  border-radius: var(--radius-md);\r\n  transition: all var(--transition-fast) var(--easing-standard);\r\n  \r\n  &:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n}\r\n\r\n/* Dialog Content Styles */\r\n.dialog-content {\r\n  padding: var(--space-md);\r\n  \r\n  p {\r\n    color: var(--text-secondary);\r\n    line-height: var(--line-height-relaxed);\r\n    margin-bottom: var(--space-md);\r\n  }\r\n  \r\n  ul {\r\n    color: var(--text-secondary);\r\n    padding-left: var(--space-lg);\r\n    \r\n    li {\r\n      margin-bottom: var(--space-xs);\r\n    }\r\n  }\r\n  \r\n  h4 {\r\n    color: var(--text-primary);\r\n    font-weight: var(--font-weight-semibold);\r\n    margin-bottom: var(--space-sm);\r\n  }\r\n}\r\n\r\n.tokenized-list {\r\n  border: 1px solid var(--border-primary);\r\n  border-radius: var(--radius-md);\r\n  background: var(--bg-primary);\r\n  \r\n  .list-header {\r\n    background: var(--bg-secondary);\r\n    color: var(--text-primary);\r\n    font-weight: var(--font-weight-semibold);\r\n    padding: var(--space-sm) var(--space-md);\r\n  }\r\n}\r\n\r\n.large-content-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: var(--space-xl);\r\n  \r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n.content-section {\r\n  h4 {\r\n    color: var(--brand-primary);\r\n    font-size: var(--text-h5);\r\n    margin-bottom: var(--space-md);\r\n  }\r\n}\r\n\r\n.token-showcase {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: var(--space-sm);\r\n}\r\n\r\n.token-item {\r\n  padding: var(--space-sm);\r\n  border-radius: var(--radius-sm);\r\n  color: white;\r\n  font-weight: var(--font-weight-medium);\r\n  text-align: center;\r\n  font-size: var(--text-sm);\r\n}\r\n\r\n/* Form Styles */\r\n.form-content {\r\n  padding: var(--space-md);\r\n}\r\n\r\n.complex-form {\r\n  padding: var(--space-md);\r\n}\r\n\r\n.form-section {\r\n  margin-bottom: var(--space-xl);\r\n  padding-bottom: var(--space-lg);\r\n  border-bottom: 1px solid var(--border-secondary);\r\n  \r\n  &:last-child {\r\n    border-bottom: none;\r\n    margin-bottom: 0;\r\n  }\r\n}\r\n\r\n.form-section-title {\r\n  color: var(--brand-primary);\r\n  font-size: var(--text-h6);\r\n  font-weight: var(--font-weight-semibold);\r\n  margin-bottom: var(--space-md);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: var(--space-xs);\r\n  \r\n  &::before {\r\n    content: '';\r\n    width: 4px;\r\n    height: 20px;\r\n    background: var(--brand-primary);\r\n    border-radius: var(--radius-xs);\r\n  }\r\n}\r\n\r\n.form-row {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: var(--space-md);\r\n  margin-bottom: var(--space-md);\r\n  \r\n  @media (max-width: 600px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .dialogs-gallery {\r\n    padding: var(--space-md);\r\n  }\r\n  \r\n  .gallery-section {\r\n    padding: var(--space-md);\r\n  }\r\n  \r\n  .demo-buttons {\r\n    justify-content: center;\r\n  }\r\n  \r\n  .demo-btn {\r\n    flex: 1;\r\n    min-width: 120px;\r\n  }\r\n}\r\n\r\n/* Dark Mode Enhancements */\r\nbody.body--dark {\r\n  .gallery-section {\r\n    background: var(--bg-secondary);\r\n    border-color: var(--border-primary);\r\n  }\r\n  \r\n  .token-item {\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n}\r\n\r\n/* Focus and Accessibility */\r\n.demo-btn:focus-visible {\r\n  outline: 2px solid var(--brand-primary);\r\n  outline-offset: 2px;\r\n}\r\n\r\n/* Animation for demo buttons */\r\n.demo-btn {\r\n  position: relative;\r\n  overflow: hidden;\r\n  \r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: -100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: linear-gradient(\r\n      90deg,\r\n      transparent,\r\n      rgba(255, 255, 255, 0.2),\r\n      transparent\r\n    );\r\n    transition: left var(--transition-standard) var(--easing-standard);\r\n  }\r\n  \r\n  &:hover::before {\r\n    left: 100%;\r\n  }\r\n}\r\n</style>\r\n\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NewStyleGuidePage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\NotificationsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 15,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 15,
        "endColumn": 29,
        "fix": { "range": [305, 361], "text": ":loading=\"loading\"\r\n          @click=\"loadNotifications\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 16,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 36,
        "fix": {
          "range": [305, 398],
          "text": "class=\"modern-action-btn\"\r\n          @click=\"loadNotifications\"\r\n          :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 34,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 34,
        "endColumn": 31,
        "fix": { "range": [1013, 1068], "text": "class=\"filter-tab\"\r\n            @click=\"filter = 'all'\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 35,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 35,
        "endColumn": 20,
        "fix": {
          "range": [1013, 1089],
          "text": "no-caps\r\n            @click=\"filter = 'all'\"\r\n            class=\"filter-tab\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 44,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 31,
        "fix": { "range": [1440, 1498], "text": "class=\"filter-tab\"\r\n            @click=\"filter = 'unread'\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 45,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 45,
        "endColumn": 20,
        "fix": {
          "range": [1440, 1519],
          "text": "no-caps\r\n            @click=\"filter = 'unread'\"\r\n            class=\"filter-tab\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 66,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 43,
        "fix": {
          "range": [2069, 2135],
          "text": ":disable=\"unreadCount === 0\"\r\n              @click=\"markAllAsRead\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 67,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 67,
        "endColumn": 31,
        "fix": {
          "range": [2069, 2167],
          "text": "color=\"positive\"\r\n              @click=\"markAllAsRead\"\r\n              :disable=\"unreadCount === 0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 68,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 68,
        "endColumn": 31,
        "fix": {
          "range": [2069, 2199],
          "text": "class=\"action-btn\"\r\n              @click=\"markAllAsRead\"\r\n              :disable=\"unreadCount === 0\"\r\n            color=\"positive\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 69,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 69,
        "endColumn": 20,
        "fix": {
          "range": [2069, 2220],
          "text": "no-caps\r\n              @click=\"markAllAsRead\"\r\n              :disable=\"unreadCount === 0\"\r\n            color=\"positive\"\r\n            class=\"action-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 76,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 76,
        "endColumn": 31,
        "fix": { "range": [2394, 2450], "text": "color=\"negative\"\r\n              @click=\"confirmClearAll\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 77,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 77,
        "endColumn": 31,
        "fix": {
          "range": [2394, 2482],
          "text": "class=\"action-btn\"\r\n              @click=\"confirmClearAll\"\r\n            color=\"negative\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 78,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 78,
        "endColumn": 20,
        "fix": {
          "range": [2394, 2503],
          "text": "no-caps\r\n              @click=\"confirmClearAll\"\r\n            color=\"negative\"\r\n            class=\"action-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click.stop\".",
        "line": 146,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 146,
        "endColumn": 48,
        "fix": {
          "range": [4995, 5085],
          "text": "class=\"notification-action-btn\"\r\n                @click.stop=\"markAsRead(notification.id)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click.stop\".",
        "line": 159,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 159,
        "endColumn": 48,
        "fix": {
          "range": [5468, 5560],
          "text": "class=\"notification-action-btn\"\r\n                @click.stop=\"markAsUnread(notification.id)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click.stop\".",
        "line": 171,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 171,
        "endColumn": 48,
        "fix": {
          "range": [5907, 6005],
          "text": "class=\"notification-action-btn\"\r\n                @click.stop=\"deleteNotification(notification.id)\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 16,
    "source": "<template>\r\n  <PageLayout>\r\n    <PageTitle\r\n      :title=\"$t('notificationsPage.title')\"\r\n      :subtitle=\"$t('notificationsPage.subtitle')\"\r\n      icon=\"campaign\"\r\n    >\r\n      <template #actions>\r\n        <q-btn\r\n          flat\r\n          round\r\n          icon=\"refresh\"\r\n          size=\"md\"\r\n          @click=\"loadNotifications\"\r\n          :loading=\"loading\"\r\n          class=\"modern-action-btn\"\r\n        >\r\n          <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n        </q-btn>\r\n      </template>\r\n    </PageTitle>\r\n\r\n    <div class=\"notifications-container\">\r\n      <!-- Modern Filter Section -->\r\n      <div class=\"notifications-filters\">\r\n        <div class=\"filter-tabs\">\r\n            <q-btn\r\n            :flat=\"filter !== 'all'\"\r\n            :unelevated=\"filter === 'all'\"\r\n            :color=\"filter === 'all' ? 'primary' : undefined\"\r\n            :text-color=\"filter === 'all' ? 'white' : 'grey-7'\"\r\n            :label=\"`${$t('notificationsPage.all')} (${notifications.length})`\"\r\n              @click=\"filter = 'all'\"\r\n            class=\"filter-tab\"\r\n            no-caps\r\n            />\r\n            <q-btn\r\n            :flat=\"filter !== 'unread'\"\r\n            :unelevated=\"filter === 'unread'\"\r\n            :color=\"filter === 'unread' ? 'primary' : undefined\"\r\n            :text-color=\"filter === 'unread' ? 'white' : 'grey-7'\"\r\n              :label=\"`${$t('notificationsPage.unread')} (${unreadCount})`\"\r\n              @click=\"filter = 'unread'\"\r\n            class=\"filter-tab\"\r\n            no-caps\r\n          />\r\n        </div>\r\n\r\n        <div class=\"filter-actions\">\r\n          <q-select\r\n            v-model=\"categoryFilter\"\r\n            :options=\"categoryOptions\"\r\n            :label=\"$t('notificationsPage.filterByCategory')\"\r\n            emit-value\r\n            map-options\r\n            clearable\r\n            outlined\r\n            dense\r\n            class=\"category-filter\"\r\n          />\r\n            <q-btn\r\n              flat\r\n              icon=\"mark_email_read\"\r\n              :label=\"$t('notificationsPage.markAllRead')\"\r\n              @click=\"markAllAsRead\"\r\n              :disable=\"unreadCount === 0\"\r\n              color=\"positive\"\r\n            class=\"action-btn\"\r\n            no-caps\r\n            />\r\n            <q-btn\r\n              flat\r\n              icon=\"clear_all\"\r\n              :label=\"$t('notificationsPage.clearAllNotifications')\"\r\n              @click=\"confirmClearAll\"\r\n              color=\"negative\"\r\n            class=\"action-btn\"\r\n            no-caps\r\n            />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Notifications List -->\r\n      <div class=\"notifications-content\">\r\n        <!-- Empty State -->\r\n        <div v-if=\"filteredNotifications.length === 0\" class=\"empty-state\">\r\n          <div class=\"empty-state-icon\">\r\n            <q-icon name=\"notifications_none\" />\r\n          </div>\r\n          <div class=\"empty-state-title\">\r\n              {{ $t('notificationsPage.noNotifications') }}\r\n            </div>\r\n          <div class=\"empty-state-subtitle\">\r\n              {{ $t('notificationsPage.allCaughtUp') }}\r\n            </div>\r\n          </div>\r\n\r\n        <!-- Notifications List -->\r\n        <div v-else class=\"notifications-list\">\r\n          <div\r\n              v-for=\"notification in filteredNotifications\"\r\n              :key=\"notification.id\"\r\n            class=\"notification-item\"\r\n            :class=\"{ 'notification-item--unread': !notification.is_read }\"\r\n            >\r\n            <div class=\"notification-avatar\">\r\n                <q-avatar\r\n                  :color=\"getCategoryColor(notification.category)\"\r\n                  text-color=\"white\"\r\n                size=\"40px\"\r\n                >\r\n                  <q-icon :name=\"getCategoryIcon(notification.category)\" />\r\n                </q-avatar>\r\n            </div>\r\n\r\n            <div class=\"notification-content\">\r\n              <div class=\"notification-header\">\r\n                <h4 class=\"notification-title\">{{ notification.title }}</h4>\r\n                <div class=\"notification-meta\">\r\n                  <q-chip\r\n                    :color=\"getCategoryColor(notification.category)\"\r\n                    text-color=\"white\"\r\n                    size=\"sm\"\r\n                    class=\"category-chip\"\r\n                  >\r\n                    {{ $t(`notificationsPage.types.${notification.category}`) }}\r\n                  </q-chip>\r\n                  <span class=\"notification-time\">\r\n                    {{ formatDate(notification.created_at) }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <p class=\"notification-message\">{{ notification.message }}</p>\r\n            </div>\r\n\r\n            <div class=\"notification-actions\">\r\n                  <q-btn\r\n                    v-if=\"!notification.is_read\"\r\n                    flat\r\n                    round\r\n                    dense\r\n                    icon=\"mark_email_read\"\r\n                    color=\"positive\"\r\n                    size=\"sm\"\r\n                    @click.stop=\"markAsRead(notification.id)\"\r\n                class=\"notification-action-btn\"\r\n                  >\r\n                    <q-tooltip>Markeer als gelezen</q-tooltip>\r\n                  </q-btn>\r\n                  <q-btn\r\n                    v-else\r\n                    flat\r\n                    round\r\n                    dense\r\n                    icon=\"mark_email_unread\"\r\n                    color=\"primary\"\r\n                    size=\"sm\"\r\n                    @click.stop=\"markAsUnread(notification.id)\"\r\n                class=\"notification-action-btn\"\r\n                  >\r\n                    <q-tooltip>Markeer als ongelezen</q-tooltip>\r\n                  </q-btn>\r\n                  <q-btn\r\n                    flat\r\n                    round\r\n                    dense\r\n                    icon=\"delete\"\r\n                    color=\"negative\"\r\n                    size=\"sm\"\r\n                    @click.stop=\"deleteNotification(notification.id)\"\r\n                class=\"notification-action-btn\"\r\n                  >\r\n                    <q-tooltip>Verwijder melding</q-tooltip>\r\n                  </q-btn>\r\n                </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useNotificationStore } from 'src/stores/notifications';\r\n  import { monitoringService } from 'src/services/monitoring';\r\n  import { useButtons } from 'src/composables/useButtons';\r\n  import { supabase } from 'src/boot/supabase';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\r\n\r\n  const $q = useQuasar();\r\n  const { t } = useI18n();\r\n  const authStore = useAuthStore();\r\n  const notificationStore = useNotificationStore();\r\n  const { quickActions, getThemeConfig } = useButtons();\r\n\r\n  // State\r\n  const filter = ref<'all' | 'unread'>('all');\r\n  const categoryFilter = ref<string | null>(null);\r\n\r\n  // Use store data\r\n  const loading = computed(() => notificationStore.loading);\r\n  const notifications = computed(() => notificationStore.notifications);\r\n  const error = computed(() => notificationStore.error);\r\n\r\n  // Load notifications using store\r\n  const loadNotifications = () => {\r\n    notificationStore.loadNotifications();\r\n  };\r\n\r\n  // Computed properties\r\n  const unreadCount = computed(() => notificationStore.unreadCount);\r\n\r\n  const filteredNotifications = computed(() => {\r\n    let filtered = notifications.value;\r\n\r\n    if (filter.value === 'unread') {\r\n      filtered = filtered.filter(n => !n.is_read);\r\n    }\r\n\r\n    if (categoryFilter.value) {\r\n      filtered = filtered.filter(n => n.category === categoryFilter.value);\r\n    }\r\n\r\n    return filtered.sort(\r\n      (a, b) =>\r\n        new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n    );\r\n  });\r\n\r\n  const categoryOptions = computed(() => [\r\n    {\r\n      label: 'Voorraad waarschuwingen',\r\n      value: 'stock_alert',\r\n    },\r\n    {\r\n      label: 'Bestelling updates',\r\n      value: 'order_update',\r\n    },\r\n    {\r\n      label: 'Systeem meldingen',\r\n      value: 'system_notification',\r\n    },\r\n    {\r\n      label: 'Batch vervaldatums',\r\n      value: 'batch_expiry',\r\n    },\r\n    {\r\n      label: 'Gebruiker activiteit',\r\n      value: 'user_activity',\r\n    },\r\n  ]);\r\n\r\n  // Methods\r\n  const markAsRead = async (notificationId: string) => {\r\n    try {\r\n      await notificationStore.markAsRead(notificationId);\r\n\r\n      await monitoringService.trackEvent('notification_marked_read', {\r\n        notification_id: notificationId,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking notification as read:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('notificationsPage.markReadError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAsUnread = async (notificationId: string) => {\r\n    try {\r\n      await notificationStore.markAsUnread(notificationId);\r\n\r\n      await monitoringService.trackEvent('notification_marked_unread', {\r\n        notification_id: notificationId,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking notification as unread:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('notificationsPage.markUnreadError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      const unreadCount = notificationStore.unreadCount;\r\n      if (unreadCount === 0) return;\r\n\r\n      await notificationStore.markAllAsRead();\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('notificationsPage.allMarkedAsRead'),\r\n      });\r\n\r\n      await monitoringService.trackEvent('notifications_mark_all_read', {\r\n        count: unreadCount,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error marking all as read:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('notificationsPage.markAllReadError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteNotification = async (notificationId: string) => {\r\n    try {\r\n      await notificationStore.deleteNotification(notificationId);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('notificationsPage.notificationDeleted'),\r\n      });\r\n\r\n      await monitoringService.trackEvent('notification_deleted', {\r\n        notification_id: notificationId,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting notification:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('notificationsPage.deleteNotificationError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const confirmClearAll = () => {\r\n    $q.dialog({\r\n      title: t('notificationsPage.clearAllConfirm'),\r\n      message: t('notificationsPage.clearAllConfirmMessage'),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        await notificationStore.clearAllNotifications();\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('notificationsPage.allNotificationsCleared'),\r\n        });\r\n\r\n        await monitoringService.trackEvent('notifications_cleared_all');\r\n      } catch (error) {\r\n        console.error('Error clearing all notifications:', error);\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('notificationsPage.clearAllError'),\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const getCategoryIcon = (category: string) => {\r\n    const icons = {\r\n      stock_alert: 'warning',\r\n      order_update: 'shopping_cart',\r\n      system_notification: 'info',\r\n      batch_expiry: 'schedule',\r\n      user_activity: 'person',\r\n    };\r\n    return icons[category as keyof typeof icons] || 'notifications';\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    const colors = {\r\n      stock_alert: 'warning',\r\n      order_update: 'primary',\r\n      system_notification: 'info',\r\n      batch_expiry: 'orange',\r\n      user_activity: 'purple',\r\n    };\r\n    return colors[category as keyof typeof colors] || 'grey';\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    const date = new Date(dateString);\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\r\n    const diffDays = Math.floor(diffHours / 24);\r\n\r\n    if (diffDays > 0) {\r\n      return `${diffDays} dag${diffDays > 1 ? 'en' : ''} geleden`;\r\n    } else if (diffHours > 0) {\r\n      return `${diffHours} uur geleden`;\r\n    } else {\r\n      const diffMinutes = Math.floor(diffMs / (1000 * 60));\r\n      return `${diffMinutes} minuten geleden`;\r\n    }\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    loadNotifications();\r\n  });\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .notifications-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n    max-width: 100%;\r\n  }\r\n\r\n  // Modern Filter Section\r\n  .notifications-filters {\r\n    background: var(--surface);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-lg);\r\n    padding: var(--space-5);\r\n    box-shadow: var(--shadow-sm);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: var(--space-4);\r\n    transition: var(--transition-base);\r\n\r\n    &:hover {\r\n      box-shadow: var(--shadow-base);\r\n    }\r\n\r\n    .filter-tabs {\r\n      display: flex;\r\n      gap: var(--space-2);\r\n      background: var(--bg-tertiary);\r\n      padding: var(--space-1);\r\n      border-radius: var(--radius-base);\r\n    }\r\n\r\n    .filter-tab {\r\n      border-radius: var(--radius-sm);\r\n      font-weight: var(--font-weight-medium);\r\n      font-size: var(--text-sm);\r\n      padding: var(--space-2) var(--space-4);\r\n      transition: var(--transition-fast);\r\n      min-height: 36px;\r\n\r\n      &.q-btn--unelevated {\r\n        box-shadow: var(--shadow-xs);\r\n      }\r\n    }\r\n\r\n    .filter-actions {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-3);\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .category-filter {\r\n      min-width: 200px;\r\n      \r\n      :deep(.q-field__control) {\r\n        border-radius: var(--radius-base);\r\n      }\r\n    }\r\n\r\n    .action-btn {\r\n      font-weight: var(--font-weight-medium);\r\n      font-size: var(--text-sm);\r\n      padding: var(--space-2) var(--space-4);\r\n      border-radius: var(--radius-base);\r\n      transition: var(--transition-fast);\r\n\r\n      &:hover {\r\n        transform: translateY(-1px);\r\n        box-shadow: var(--shadow-sm);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Notifications Content\r\n  .notifications-content {\r\n    background: var(--surface);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-lg);\r\n    box-shadow: var(--shadow-sm);\r\n    overflow: hidden;\r\n    transition: var(--transition-base);\r\n\r\n    &:hover {\r\n      box-shadow: var(--shadow-base);\r\n    }\r\n  }\r\n\r\n  // Empty State\r\n  .empty-state {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--space-12) var(--space-6);\r\n    text-align: center;\r\n\r\n    .empty-state-icon {\r\n      margin-bottom: var(--space-6);\r\n      \r\n      .q-icon {\r\n        font-size: 4rem;\r\n        color: var(--text-tertiary);\r\n        opacity: 0.6;\r\n      }\r\n    }\r\n\r\n    .empty-state-title {\r\n      font-size: var(--text-xl);\r\n      font-weight: var(--font-weight-semibold);\r\n      color: var(--text-primary);\r\n      margin-bottom: var(--space-2);\r\n      line-height: var(--leading-tight);\r\n    }\r\n\r\n    .empty-state-subtitle {\r\n      font-size: var(--text-base);\r\n      color: var(--text-secondary);\r\n      line-height: var(--leading-normal);\r\n    }\r\n  }\r\n\r\n  // Notifications List\r\n  .notifications-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .notification-item {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    gap: var(--space-4);\r\n    padding: var(--space-5);\r\n    border-bottom: 1px solid var(--border-primary);\r\n    transition: var(--transition-fast);\r\n    position: relative;\r\n    background: var(--surface);\r\n\r\n    &:last-child {\r\n      border-bottom: none;\r\n    }\r\n\r\n    &:hover {\r\n      background: var(--bg-tertiary);\r\n    }\r\n\r\n    &--unread {\r\n      background: rgba(var(--q-primary-rgb, 30, 58, 138), 0.02);\r\n      border-left: 3px solid var(--q-primary);\r\n      \r\n      .notification-title {\r\n        font-weight: var(--font-weight-semibold);\r\n      }\r\n\r\n      &::before {\r\n        content: '';\r\n        position: absolute;\r\n        top: var(--space-5);\r\n        right: var(--space-5);\r\n        width: 8px;\r\n        height: 8px;\r\n        background: var(--q-primary);\r\n        border-radius: var(--radius-full);\r\n      }\r\n    }\r\n\r\n    .notification-avatar {\r\n      flex-shrink: 0;\r\n      margin-top: var(--space-1);\r\n    }\r\n\r\n    .notification-content {\r\n      flex: 1;\r\n      min-width: 0;\r\n    }\r\n\r\n    .notification-header {\r\n      display: flex;\r\n      align-items: flex-start;\r\n      justify-content: space-between;\r\n      gap: var(--space-3);\r\n      margin-bottom: var(--space-2);\r\n    }\r\n\r\n    .notification-title {\r\n      font-size: var(--text-base);\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n      margin: 0;\r\n      line-height: var(--leading-tight);\r\n    }\r\n\r\n    .notification-meta {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-2);\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .category-chip {\r\n      font-size: var(--text-xs);\r\n      font-weight: var(--font-weight-medium);\r\n      border-radius: var(--radius-sm);\r\n    }\r\n\r\n    .notification-time {\r\n      font-size: var(--text-xs);\r\n      color: var(--text-tertiary);\r\n      font-weight: var(--font-weight-normal);\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .notification-message {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-secondary);\r\n      line-height: var(--leading-normal);\r\n      margin: 0;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 2;\r\n      -webkit-box-orient: vertical;\r\n      overflow: hidden;\r\n    }\r\n\r\n    .notification-actions {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: var(--space-1);\r\n      flex-shrink: 0;\r\n      margin-top: var(--space-1);\r\n    }\r\n\r\n    .notification-action-btn {\r\n      transition: var(--transition-fast);\r\n      border-radius: var(--radius-base);\r\n\r\n      &:hover {\r\n        transform: translateY(-1px);\r\n        box-shadow: var(--shadow-xs);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Modern Action Button\r\n  .modern-action-btn {\r\n    transition: var(--transition-fast);\r\n    border-radius: var(--radius-base);\r\n\r\n    &:hover {\r\n      transform: translateY(-1px);\r\n      box-shadow: var(--shadow-sm);\r\n    }\r\n  }\r\n\r\n  // Responsive Design\r\n  @media (max-width: 768px) {\r\n    .notifications-filters {\r\n      flex-direction: column;\r\n      align-items: stretch;\r\n      gap: var(--space-4);\r\n\r\n      .filter-actions {\r\n        justify-content: space-between;\r\n        gap: var(--space-2);\r\n      }\r\n\r\n      .category-filter {\r\n        min-width: auto;\r\n        flex: 1;\r\n      }\r\n    }\r\n\r\n    .notification-item {\r\n      padding: var(--space-4);\r\n\r\n      .notification-header {\r\n        flex-direction: column;\r\n        align-items: flex-start;\r\n        gap: var(--space-2);\r\n      }\r\n\r\n      .notification-meta {\r\n        align-self: stretch;\r\n        justify-content: space-between;\r\n      }\r\n\r\n      .notification-actions {\r\n        margin-top: var(--space-3);\r\n        justify-content: center;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    .notifications-container {\r\n      gap: var(--space-4);\r\n    }\r\n\r\n    .notifications-filters {\r\n      padding: var(--space-4);\r\n\r\n      .filter-tabs {\r\n        width: 100%;\r\n        justify-content: center;\r\n      }\r\n\r\n      .filter-actions {\r\n        flex-direction: column;\r\n        width: 100%;\r\n        gap: var(--space-3);\r\n      }\r\n\r\n      .action-btn {\r\n        width: 100%;\r\n        justify-content: center;\r\n      }\r\n    }\r\n\r\n    .notification-item {\r\n      padding: var(--space-3);\r\n      gap: var(--space-3);\r\n\r\n      &--unread::before {\r\n        top: var(--space-3);\r\n        right: var(--space-3);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark Mode Enhancements\r\n  :deep(.body--dark) {\r\n    .notifications-filters,\r\n    .notifications-content {\r\n      border-color: var(--border-primary);\r\n    }\r\n\r\n    .notification-item {\r\n      &--unread {\r\n        background: rgba(var(--q-primary-rgb, 59, 130, 246), 0.08);\r\n      }\r\n\r\n      &:hover {\r\n        background: var(--bg-tertiary);\r\n      }\r\n    }\r\n\r\n    .filter-tabs {\r\n      background: var(--bg-primary);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrderListDetailPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 12,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 29,
        "fix": { "range": [278, 330], "text": "class=\"back-btn\"\r\n            @click=\"router.back()\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 62,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 62,
        "endColumn": 25,
        "fix": { "range": [2000, 2045], "text": "icon=\"add\"\r\n              @click=\"addProduct\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 63,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 63,
        "endColumn": 49,
        "fix": {
          "range": [2000, 2095],
          "text": ":label=\"$t('orderLists.addProduct')\"\r\n              @click=\"addProduct\"\r\n            icon=\"add\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 64,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 64,
        "endColumn": 30,
        "fix": {
          "range": [2000, 2126],
          "text": "color=\"primary\"\r\n              @click=\"addProduct\"\r\n            icon=\"add\"\r\n              :label=\"$t('orderLists.addProduct')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 65,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 65,
        "endColumn": 25,
        "fix": {
          "range": [2000, 2152],
          "text": "unelevated\r\n              @click=\"addProduct\"\r\n            icon=\"add\"\r\n              :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 66,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 22,
        "fix": {
          "range": [2000, 2175],
          "text": "no-caps\r\n              @click=\"addProduct\"\r\n            icon=\"add\"\r\n              :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\"\r\n              unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 67,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 67,
        "endColumn": 37,
        "fix": {
          "range": [2000, 2213],
          "text": "class=\"primary-action\"\r\n              @click=\"addProduct\"\r\n            icon=\"add\"\r\n              :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\"\r\n              unelevated\r\n              no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 71,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 71,
        "endColumn": 26,
        "fix": { "range": [2265, 2314], "text": "icon=\"edit\"\r\n              @click=\"editOrderList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 72,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 72,
        "endColumn": 22,
        "fix": {
          "range": [2265, 2337],
          "text": "outline\r\n              @click=\"editOrderList\"\r\n              icon=\"edit\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 73,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 73,
        "endColumn": 30,
        "fix": {
          "range": [2265, 2368],
          "text": "color=\"primary\"\r\n              @click=\"editOrderList\"\r\n              icon=\"edit\"\r\n              outline"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 74,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 74,
        "endColumn": 22,
        "fix": {
          "range": [2265, 2391],
          "text": "no-caps\r\n              @click=\"editOrderList\"\r\n              icon=\"edit\"\r\n              outline\r\n              color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 75,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 75,
        "endColumn": 39,
        "fix": {
          "range": [2265, 2431],
          "text": "class=\"secondary-action\"\r\n              @click=\"editOrderList\"\r\n              icon=\"edit\"\r\n              outline\r\n              color=\"primary\"\r\n              no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 79,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 79,
        "endColumn": 42,
        "fix": {
          "range": [2479, 2553],
          "text": "icon=\"shopping_cart_checkout\"\r\n            @click=\"confirmPlaceAll = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 80,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 80,
        "endColumn": 28,
        "fix": {
          "range": [2479, 2582],
          "text": "color=\"primary\"\r\n            @click=\"confirmPlaceAll = true\"\r\n            icon=\"shopping_cart_checkout\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 81,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 81,
        "endColumn": 20,
        "fix": {
          "range": [2479, 2603],
          "text": "no-caps\r\n            @click=\"confirmPlaceAll = true\"\r\n            icon=\"shopping_cart_checkout\"\r\n            color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 82,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 82,
        "endColumn": 35,
        "fix": {
          "range": [2479, 2639],
          "text": "class=\"primary-action\"\r\n            @click=\"confirmPlaceAll = true\"\r\n            icon=\"shopping_cart_checkout\"\r\n            color=\"primary\"\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 83,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 83,
        "endColumn": 47,
        "fix": {
          "range": [2479, 2687],
          "text": ":label=\"$t('orderLists.orderAll')\"\r\n            @click=\"confirmPlaceAll = true\"\r\n            icon=\"shopping_cart_checkout\"\r\n            color=\"primary\"\r\n            no-caps\r\n            class=\"primary-action\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 88,
        "column": 58,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 88,
        "endColumn": 71,
        "fix": { "range": [2859, 2895], "text": "v-close-popup @click=\"duplicateList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 94,
        "column": 55,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 94,
        "endColumn": 68,
        "fix": { "range": [3180, 3213], "text": "v-close-popup @click=\"exportList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"@click\".",
        "line": 104,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 104,
        "endColumn": 34,
        "fix": { "range": [3570, 3624], "text": "v-close-popup\r\n                    @click=\"deleteList\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 105,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 105,
        "endColumn": 42,
        "fix": {
          "range": [3570, 3667],
          "text": "class=\"text-negative\"\r\n                    @click=\"deleteList\"\r\n                    v-close-popup"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 128,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 128,
        "endColumn": 32,
        "fix": { "range": [4357, 4370], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 132,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 132,
        "endColumn": 32,
        "fix": { "range": [4468, 4481], "text": "#action" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 144,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 144,
        "endColumn": 33,
        "fix": {
          "range": [4802, 4868],
          "text": "v-model=\"filterValues\"\r\n          :preset=\"orderListsFilterPreset\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 148,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 148,
        "endColumn": 34,
        "fix": { "range": [4958, 5019], "text": ":loading=\"loadingItems\"\r\n          @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 149,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 149,
        "endColumn": 22,
        "fix": {
          "range": [4958, 5042],
          "text": "collapsible\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loadingItems\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 150,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 150,
        "endColumn": 42,
        "fix": {
          "range": [4958, 5085],
          "text": "class=\"order-list-filter-panel\"\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loadingItems\"\r\n          collapsible"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 172,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 172,
        "endColumn": 38,
        "fix": {
          "range": [5666, 5732],
          "text": ":loading=\"loadingItems\"\r\n              @click=\"loadOrderListItems\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 173,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 173,
        "endColumn": 29,
        "fix": {
          "range": [5666, 5762],
          "text": "color=\"grey-7\"\r\n              @click=\"loadOrderListItems\"\r\n              :loading=\"loadingItems\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 174,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 174,
        "endColumn": 24,
        "fix": {
          "range": [5666, 5787],
          "text": "size=\"sm\"\r\n              @click=\"loadOrderListItems\"\r\n              :loading=\"loadingItems\"\r\n              color=\"grey-7\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 197,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 197,
        "endColumn": 21,
        "fix": { "range": [6540, 6581], "text": "icon=\"add\"\r\n          @click=\"addProduct\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 198,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 198,
        "endColumn": 43,
        "fix": {
          "range": [6540, 6625],
          "text": "label=\"Eerste product toevoegen\"\r\n          @click=\"addProduct\"\r\n          icon=\"add\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 199,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 199,
        "endColumn": 26,
        "fix": {
          "range": [6540, 6652],
          "text": "color=\"primary\"\r\n          @click=\"addProduct\"\r\n          icon=\"add\"\r\n          label=\"Eerste product toevoegen\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 200,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 200,
        "endColumn": 21,
        "fix": {
          "range": [6540, 6674],
          "text": "unelevated\r\n          @click=\"addProduct\"\r\n          icon=\"add\"\r\n          label=\"Eerste product toevoegen\"\r\n          color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 201,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 201,
        "endColumn": 18,
        "fix": {
          "range": [6540, 6693],
          "text": "no-caps\r\n          @click=\"addProduct\"\r\n          icon=\"add\"\r\n          label=\"Eerste product toevoegen\"\r\n          color=\"primary\"\r\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 258,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 258,
        "endColumn": 63,
        "fix": {
          "range": [8535, 8636],
          "text": ":disable=\"props.row.suggested_quantity <= 0\"\r\n                  @click=\"decrementQuantity(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 259,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 259,
        "endColumn": 39,
        "fix": {
          "range": [8535, 8676],
          "text": "class=\"quantity-btn\"\r\n                  @click=\"decrementQuantity(props.row)\"\r\n                  :disable=\"props.row.suggested_quantity <= 0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"style\" should go before \"@update:model-value\".",
        "line": 269,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 269,
        "endColumn": 38,
        "fix": {
          "range": [8962, 9052],
          "text": "style=\"width: 80px\"\r\n                  @update:model-value=\"updateItemQuantity(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 277,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 277,
        "endColumn": 39,
        "fix": {
          "range": [9220, 9297],
          "text": "class=\"quantity-btn\"\r\n                  @click=\"incrementQuantity(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@filter\".",
        "line": 366,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 366,
        "endColumn": 37,
        "fix": {
          "range": [12036, 12098],
          "text": ":loading=\"loadingProducts\"\r\n          @filter=\"filterProducts\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#option' instead of 'v-slot:option'.",
        "line": 368,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 368,
        "endColumn": 42,
        "fix": { "range": [12131, 12144], "text": "#option" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \":label\".",
        "line": 403,
        "column": 52,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 403,
        "endColumn": 65,
        "fix": { "range": [13278, 13320], "text": "v-close-popup :label=\"$t('common.cancel')\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 443,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 443,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14790, 14793], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14790, 14793], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 446,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 446,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14916, 14919], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14916, 14919], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 448,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 448,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14995, 14998], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14995, 14998], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 482,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 482,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15796, 15799], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15796, 15799], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 491,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 491,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16042, 16045], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16042, 16045], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 768,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 768,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23290, 23293], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23290, 23293], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 787,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 787,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23744, 23747], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23744, 23747], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 792,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 792,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23896, 23899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23896, 23899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 801,
        "column": 48,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 801,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [24169, 24170], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 845,
        "column": 47,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 845,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [25470, 25471], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 868,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 868,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25939, 25942], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25939, 25942], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 875,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 875,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26099, 26102], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26099, 26102], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 54,
    "fixableErrorCount": 0,
    "fixableWarningCount": 42,
    "source": "<template>\r\n  <div class=\"order-detail-page\">\r\n    <!-- Modern Header -->\r\n    <div class=\"page-header\">\r\n      <div class=\"header-content\">\r\n        <div class=\"breadcrumb-nav\">\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"arrow_back\"\r\n            @click=\"router.back()\"\r\n            class=\"back-btn\"\r\n          />\r\n          <span class=\"breadcrumb-text\">Bestellijsten</span>\r\n          <q-icon\r\n            name=\"chevron_right\"\r\n            size=\"16px\"\r\n            class=\"breadcrumb-separator\"\r\n          />\r\n          <span class=\"breadcrumb-current\">{{\r\n            orderList?.name || 'Laden...'\r\n          }}</span>\r\n        </div>\r\n\r\n        <div class=\"header-main\">\r\n          <div class=\"title-section\">\r\n            <div class=\"list-icon-large\">\r\n              <q-icon\r\n                :name=\"getListIcon()\"\r\n                :color=\"getIconColor()\"\r\n                class=\"icon-size-2xl\"\r\n              />\r\n            </div>\r\n            <div class=\"title-content\">\r\n              <h1 class=\"page-title\">{{ orderList?.name || 'Bestellijst' }}</h1>\r\n              <p class=\"page-subtitle\">\r\n                {{ orderList?.description || 'Details en producten beheren' }}\r\n              </p>\r\n              <div class=\"title-meta\">\r\n                <q-badge\r\n                  :color=\"statusColor\"\r\n                  :label=\"statusLabel\"\r\n                  class=\"status-badge\"\r\n                />\r\n                <span class=\"meta-separator\">•</span>\r\n                <span class=\"meta-text\"\r\n                  >{{ orderList?.total_items || 0 }} producten</span\r\n                >\r\n                <span class=\"meta-separator\">•</span>\r\n                <span class=\"meta-text\"\r\n                  >€{{\r\n                    formatCurrency((orderList as any)?.total_value || 0)\r\n                  }}</span\r\n                >\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"header-actions\">\r\n            <q-btn\r\n              @click=\"addProduct\"\r\n              icon=\"add\"\r\n            :label=\"$t('orderLists.addProduct')\"\r\n              color=\"primary\"\r\n              unelevated\r\n              no-caps\r\n              class=\"primary-action\"\r\n            />\r\n            <q-btn\r\n              @click=\"editOrderList\"\r\n              icon=\"edit\"\r\n              outline\r\n              color=\"primary\"\r\n              no-caps\r\n              class=\"secondary-action\"\r\n            />\r\n          <q-btn\r\n            @click=\"confirmPlaceAll = true\"\r\n            icon=\"shopping_cart_checkout\"\r\n            color=\"primary\"\r\n            no-caps\r\n            class=\"primary-action\"\r\n            :label=\"$t('orderLists.orderAll')\"\r\n          />\r\n            <q-btn flat round icon=\"more_vert\" class=\"menu-btn\">\r\n              <q-menu>\r\n                <q-list dense>\r\n                <q-item clickable @click=\"duplicateList\" v-close-popup>\r\n                    <q-item-section avatar>\r\n                      <q-icon name=\"content_copy\" />\r\n                    </q-item-section>\r\n                  <q-item-section>{{ $t('common.duplicate') }}</q-item-section>\r\n                  </q-item>\r\n                <q-item clickable @click=\"exportList\" v-close-popup>\r\n                    <q-item-section avatar>\r\n                      <q-icon name=\"download\" />\r\n                    </q-item-section>\r\n                  <q-item-section>{{ $t('common.export') }}</q-item-section>\r\n                  </q-item>\r\n                  <q-separator />\r\n                  <q-item\r\n                    clickable\r\n                    @click=\"deleteList\"\r\n                    v-close-popup\r\n                    class=\"text-negative\"\r\n                  >\r\n                    <q-item-section avatar>\r\n                      <q-icon name=\"delete\" />\r\n                    </q-item-section>\r\n                  <q-item-section>{{ $t('common.delete') }}</q-item-section>\r\n                  </q-item>\r\n                </q-list>\r\n              </q-menu>\r\n            </q-btn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Loading State -->\r\n    <div v-if=\"loading\" class=\"flex flex-center q-pa-xl\">\r\n      <q-spinner-gears size=\"xl\" color=\"primary\" />\r\n    </div>\r\n\r\n    <!-- Error State -->\r\n    <div v-else-if=\"error\" class=\"q-pa-lg\">\r\n      <q-banner class=\"bg-negative text-white\">\r\n        <template v-slot:avatar>\r\n          <q-icon name=\"error\" />\r\n        </template>\r\n        {{ error }}\r\n        <template v-slot:action>\r\n          <q-btn flat label=\"Opnieuw proberen\" @click=\"loadOrderList\" />\r\n        </template>\r\n      </q-banner>\r\n    </div>\r\n\r\n    <!-- Main Content -->\r\n    <div v-else-if=\"orderList\" class=\"main-content\">\r\n      <!-- Filters Section -->\r\n      <div class=\"filters-section q-mb-md\">\r\n        <FilterPanel\r\n          :preset=\"orderListsFilterPreset\"\r\n          v-model=\"filterValues\"\r\n          @change=\"handleFilterChange\"\r\n          @reset=\"handleFilterReset\"\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loadingItems\"\r\n          collapsible\r\n          class=\"order-list-filter-panel\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Table Header -->\r\n      <div class=\"table-header q-mb-sm\">\r\n        <div class=\"row items-center justify-between\">\r\n          <div class=\"col-auto\">\r\n            <div class=\"table-info\">\r\n              <span class=\"table-count\"\r\n                >{{ filteredOrderListItems.length }} van\r\n                {{ orderListItems.length }} items</span\r\n              >\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"col-auto\">\r\n            <q-btn\r\n              flat\r\n              round\r\n              icon=\"refresh\"\r\n              @click=\"loadOrderListItems\"\r\n              :loading=\"loadingItems\"\r\n              color=\"grey-7\"\r\n              size=\"sm\"\r\n            >\r\n              <q-tooltip>Vernieuwen</q-tooltip>\r\n            </q-btn>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Products Table (Direct, not in card container) -->\r\n      <div v-if=\"loadingItems\" class=\"loading-state\">\r\n        <q-inner-loading :showing=\"loadingItems\">\r\n          <q-spinner-gears size=\"50px\" color=\"primary\" />\r\n        </q-inner-loading>\r\n      </div>\r\n\r\n      <div v-else-if=\"orderListItems.length === 0\" class=\"empty-state\">\r\n        <div class=\"empty-icon\">\r\n          <q-icon name=\"inventory_2\" class=\"icon-size-2xl\" color=\"grey-4\" />\r\n        </div>\r\n        <h3>Geen producten toegevoegd</h3>\r\n        <p>Voeg producten toe aan deze bestellijst om te beginnen.</p>\r\n        <q-btn\r\n          @click=\"addProduct\"\r\n          icon=\"add\"\r\n          label=\"Eerste product toevoegen\"\r\n          color=\"primary\"\r\n          unelevated\r\n          no-caps\r\n        />\r\n      </div>\r\n\r\n      <div v-else class=\"medical-table\">\r\n        <SmartTable\r\n          :data=\"filteredOrderListItems\"\r\n          :columns=\"orderListTableColumns\"\r\n          :config=\"smartTableConfig\"\r\n          row-key=\"id\"\r\n          :rows-per-page-options=\"[25, 50, 100]\"\r\n        >\r\n          <!-- Loading -->\r\n          <template #loading>\r\n            <q-inner-loading showing color=\"primary\" />\r\n          </template>\r\n\r\n          <!-- No Data -->\r\n          <template #no-data>\r\n            <div class=\"full-width row flex-center q-gutter-sm\">\r\n              <q-icon class=\"icon-size-xl\" name=\"search_off\" />\r\n              <span>Geen producten gevonden met de huidige filters</span>\r\n            </div>\r\n          </template>\r\n\r\n          <!-- Product Name Cell -->\r\n          <template #body-cell-name=\"props\">\r\n            <q-td :props=\"props\" class=\"product-name-cell\">\r\n              <div class=\"product-info\">\r\n                <div class=\"product-name\">\r\n                  {{\r\n                    props.row.product_name ||\r\n                    props.row.product?.name ||\r\n                    'Onbekend product'\r\n                  }}\r\n                </div>\r\n                <div class=\"product-sku\">\r\n                  {{\r\n                    props.row.product_sku ||\r\n                    props.row.product?.sku ||\r\n                    'Geen SKU'\r\n                  }}\r\n                </div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Quantity Cell with Controls -->\r\n          <template #body-cell-quantity=\"props\">\r\n            <q-td :props=\"props\" class=\"quantity-cell\">\r\n              <div class=\"quantity-controls\">\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  dense\r\n                  icon=\"remove\"\r\n                  @click=\"decrementQuantity(props.row)\"\r\n                  :disable=\"props.row.suggested_quantity <= 0\"\r\n                  class=\"quantity-btn\"\r\n                />\r\n                <q-input\r\n                  v-model.number=\"props.row.suggested_quantity\"\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  dense\r\n                  outlined\r\n                  class=\"quantity-input\"\r\n                  @update:model-value=\"updateItemQuantity(props.row)\"\r\n                  style=\"width: 80px\"\r\n                />\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  dense\r\n                  icon=\"add\"\r\n                  @click=\"incrementQuantity(props.row)\"\r\n                  class=\"quantity-btn\"\r\n                />\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Unit Price Cell -->\r\n          <template #body-cell-unit_price=\"props\">\r\n            <q-td :props=\"props\" class=\"price-cell\">\r\n              €{{ (props.row.unit_price || 0).toFixed(2) }}\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Total Price Cell -->\r\n          <template #body-cell-total_price=\"props\">\r\n            <q-td :props=\"props\" class=\"total-price-cell\">\r\n              <strong\r\n                >€{{\r\n                  (\r\n                    (props.row.suggested_quantity || 0) *\r\n                    (props.row.unit_price || 0)\r\n                  ).toFixed(2)\r\n                }}</strong\r\n              >\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Supplier Cell -->\r\n          <template #body-cell-supplier=\"props\">\r\n            <q-td :props=\"props\" class=\"supplier-cell\">\r\n              {{ props.row.supplier_product?.supplier?.name || 'Onbekend' }}\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Actions Cell -->\r\n          <template #body-cell-actions=\"props\">\r\n            <q-td :props=\"props\" class=\"actions-cell\">\r\n              <div class=\"row q-gutter-xs\">\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  dense\r\n                  icon=\"edit\"\r\n                  color=\"primary\"\r\n                  @click=\"editItem(props.row)\"\r\n                >\r\n                  <q-tooltip>Bewerken</q-tooltip>\r\n                </q-btn>\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  dense\r\n                  icon=\"delete\"\r\n                  color=\"negative\"\r\n                  @click=\"removeItem(props.row)\"\r\n                >\r\n                  <q-tooltip>Verwijderen</q-tooltip>\r\n                </q-btn>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n        </SmartTable>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Add Product Dialog -->\r\n    <FormDialog\r\n      v-model=\"showAddProductDialog\"\r\n      :title=\"$t('orderLists.addProduct')\"\r\n      :subtitle=\"$t('orderLists.addProductSubtitle')\"\r\n      icon=\"add_shopping_cart\"\r\n      size=\"md\"\r\n      :loading=\"addingProduct\"\r\n      :can-submit=\"!!(selectedProduct && newItemQuantity)\"\r\n      :submit-button-text=\"$t('common.add')\"\r\n      @submit=\"confirmAddProduct\"\r\n      @cancel=\"showAddProductDialog = false\"\r\n    >\r\n      <div class=\"q-gutter-md\">\r\n        <q-select\r\n          v-model=\"selectedProduct\"\r\n          :options=\"filteredProducts\"\r\n          option-label=\"name\"\r\n          option-value=\"id\"\r\n          :label=\"$t('products.search')\"\r\n          outlined\r\n          use-input\r\n          clearable\r\n          @filter=\"filterProducts\"\r\n          :loading=\"loadingProducts\"\r\n        >\r\n          <template v-slot:option=\"scope\">\r\n            <q-item v-bind=\"scope.itemProps\">\r\n              <q-item-section avatar>\r\n                <q-avatar size=\"sm\">\r\n                  <q-icon name=\"inventory\" />\r\n                </q-avatar>\r\n              </q-item-section>\r\n              <q-item-section>\r\n                <q-item-label>{{ scope.opt.name }}</q-item-label>\r\n                <q-item-label caption>{{ scope.opt.sku }}</q-item-label>\r\n              </q-item-section>\r\n            </q-item>\r\n          </template>\r\n        </q-select>\r\n\r\n        <q-input\r\n          v-model.number=\"newItemQuantity\"\r\n          :label=\"$t('orderLists.recommendedQty')\"\r\n          type=\"number\"\r\n          min=\"1\"\r\n          outlined\r\n        />\r\n      </div>\r\n    </FormDialog>\r\n\r\n    <!-- Confirm place all dialog -->\r\n    <q-dialog v-model=\"confirmPlaceAll\">\r\n      <q-card>\r\n        <q-card-section class=\"text-h6\">\r\n          {{ $t('orderLists.confirmPlaceAllTitle') }}\r\n        </q-card-section>\r\n        <q-card-section>\r\n          {{ $t('orderLists.confirmPlaceAllBody') }}\r\n        </q-card-section>\r\n        <q-card-actions align=\"right\">\r\n          <q-btn flat :label=\"$t('common.cancel')\" v-close-popup />\r\n          <q-btn color=\"primary\" :label=\"$t('orderLists.orderAll')\" @click=\"orderAll()\" />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useRoute, useRouter } from 'vue-router';\r\n  import { useQuasar } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useOrderListsStore } from '@/stores/orderLists';\r\n  import { useProductsStore } from '@/stores/products';\r\n  import { useAuthStore } from '@/stores/auth';\r\n  import FormDialog from 'src/components/base/FormDialog.vue';\r\n  import SmartTable from '@/components/tables/SmartTable.vue';\r\n  import FilterPanel from '@/components/filters/FilterPanel.vue';\r\n  import type { OrderListWithItems } from '@/types/stores';\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from '@/types/filters';\r\n  import { orderListsFilterPreset } from '@/presets/filters/orderLists';\r\n\r\n  const route = useRoute();\r\n  const router = useRouter();\r\n  const $q = useQuasar();\r\n  const orderListsStore = useOrderListsStore();\r\n  const productsStore = useProductsStore();\r\n\r\n  // State\r\n  const loading = ref(true);\r\n  const loadingItems = ref(false);\r\n  const loadingProducts = ref(false);\r\n  const addingProduct = ref(false);\r\n  const error = ref<string | null>(null);\r\n  const orderList = ref<OrderListWithItems | null>(null);\r\n  const orderListItems = ref<any[]>([]);\r\n  const showAddProductDialog = ref(false);\r\n  const confirmPlaceAll = ref(false);\r\n  const selectedProduct = ref<any>(null);\r\n  const newItemQuantity = ref(1);\r\n  const filteredProducts = ref<any[]>([]);\r\n\r\n  // Filter state\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Table columns for order list items\r\n  const orderListTableColumns = computed(() => [\r\n    {\r\n      name: 'name',\r\n      label: 'Product',\r\n      field: 'product_name',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      style: 'width: 250px',\r\n    },\r\n    {\r\n      name: 'quantity',\r\n      label: 'Hoeveelheid',\r\n      field: 'suggested_quantity',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      style: 'width: 150px',\r\n    },\r\n    {\r\n      name: 'unit_price',\r\n      label: 'Prijs/stuk',\r\n      field: 'unit_price',\r\n      align: 'right' as const,\r\n      sortable: true,\r\n      style: 'width: 120px',\r\n    },\r\n    {\r\n      name: 'total_price',\r\n      label: 'Totaal',\r\n      field: (row: any) =>\r\n        (row.suggested_quantity || 0) * (row.unit_price || 0),\r\n      align: 'right' as const,\r\n      sortable: true,\r\n      style: 'width: 120px',\r\n    },\r\n    {\r\n      name: 'supplier',\r\n      label: 'Leverancier',\r\n      field: (row: any) => row.supplier_product?.supplier?.name || 'Onbekend',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      style: 'width: 150px',\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: 'Acties',\r\n      field: 'actions',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      style: 'width: 120px',\r\n    },\r\n  ]);\r\n\r\n  // Smart table configuration\r\n  const smartTableConfig = computed(() => ({\r\n    enableVirtualization: orderListItems.value.length > 100,\r\n    clientSideThreshold: 50,\r\n    serverSideThreshold: 200,\r\n  }));\r\n\r\n  // Computed\r\n  const statusColor = computed(() => {\r\n    if (!orderList.value) {\r\n      return 'grey';\r\n    }\r\n    switch (orderList.value.status) {\r\n      case 'ready':\r\n        return 'positive';\r\n      case 'draft':\r\n        return 'warning';\r\n      case 'submitted':\r\n        return 'info';\r\n      case 'confirmed':\r\n        return 'primary';\r\n      case 'delivered':\r\n        return 'positive';\r\n      case 'cancelled':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const statusLabel = computed(() => {\r\n    if (!orderList.value) {\r\n      return 'Onbekend';\r\n    }\r\n    switch (orderList.value.status) {\r\n      case 'ready':\r\n        return 'Klaar';\r\n      case 'draft':\r\n        return 'Concept';\r\n      case 'submitted':\r\n        return 'Verzonden';\r\n      case 'confirmed':\r\n        return 'Bevestigd';\r\n      case 'delivered':\r\n        return 'Geleverd';\r\n      case 'cancelled':\r\n        return 'Geannuleerd';\r\n      default:\r\n        return 'Onbekend';\r\n    }\r\n  });\r\n\r\n  // Filter computed properties\r\n  const filteredOrderListItems = computed(() => {\r\n    let filtered = [...orderListItems.value];\r\n\r\n    // Text search\r\n    if (\r\n      filterValues.value.search &&\r\n      typeof filterValues.value.search === 'string'\r\n    ) {\r\n      const search = filterValues.value.search.toLowerCase();\r\n      filtered = filtered.filter(\r\n        item =>\r\n          (item.product_name || item.product?.name || '')\r\n            .toLowerCase()\r\n            .includes(search) ||\r\n          (item.product_sku || item.product?.sku || '')\r\n            .toLowerCase()\r\n            .includes(search)\r\n      );\r\n    }\r\n\r\n    // Supplier filter\r\n    if (filterValues.value.supplier) {\r\n      filtered = filtered.filter(\r\n        item =>\r\n          item.supplier_product?.supplier?.id === filterValues.value.supplier\r\n      );\r\n    }\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Filter handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    if (\r\n      event.value &&\r\n      typeof event.value === 'object' &&\r\n      !Array.isArray(event.value) &&\r\n      !(event.value instanceof Date)\r\n    ) {\r\n      filterValues.value = {\r\n        ...filterValues.value,\r\n        ...(event.value as FilterValues),\r\n      };\r\n    }\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    filterValues.value = {};\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    filterValues.value = {};\r\n  };\r\n\r\n  // Methods\r\n  const loadOrderList = async () => {\r\n    loading.value = true;\r\n    error.value = null;\r\n\r\n    try {\r\n      const listId = route.params.id as string;\r\n      orderList.value = await orderListsStore.getOrderListById(listId);\r\n      await loadOrderListItems();\r\n    } catch (err) {\r\n      error.value = 'Kon bestellijst niet laden';\r\n      console.error('Error loading order list:', err);\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const loadOrderListItems = async () => {\r\n    if (!orderList.value) {\r\n      return;\r\n    }\r\n\r\n    loadingItems.value = true;\r\n    try {\r\n      // For now, we'll use the items from the orderList object\r\n      // In the future, we can create a dedicated method for this\r\n      orderListItems.value = orderList.value.items || [];\r\n    } catch (err) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: 'Kon producten niet laden',\r\n      });\r\n    } finally {\r\n      loadingItems.value = false;\r\n    }\r\n  };\r\n\r\n  const formatDate = (date: string) => {\r\n    return new Date(date).toLocaleDateString('nl-NL', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n\r\n  const formatCurrency = (amount: number | string) => {\r\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\r\n    return num.toFixed(2);\r\n  };\r\n\r\n  const getStockColor = (current: number, minimum: number) => {\r\n    if (current === 0) {\r\n      return 'negative';\r\n    }\r\n    if (current <= minimum) {\r\n      return 'warning';\r\n    }\r\n    return 'positive';\r\n  };\r\n\r\n  const editOrderList = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: 'Bewerken functionaliteit komt binnenkort',\r\n    });\r\n  };\r\n\r\n  const addProduct = () => {\r\n    showAddProductDialog.value = true;\r\n    loadProducts();\r\n  };\r\n\r\n  const loadProducts = async () => {\r\n    loadingProducts.value = true;\r\n    try {\r\n      const authStore = useAuthStore();\r\n      if (authStore.clinicId) {\r\n        await productsStore.fetchProducts(authStore.clinicId);\r\n      }\r\n      filteredProducts.value = productsStore.products.slice(0, 20); // Limit initial results\r\n    } catch (err) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: 'Kon producten niet laden',\r\n      });\r\n    } finally {\r\n      loadingProducts.value = false;\r\n    }\r\n  };\r\n\r\n  const filterProducts = (\r\n    val: string,\r\n    update: (callback: () => void) => void\r\n  ) => {\r\n    update(() => {\r\n      if (val === '') {\r\n        filteredProducts.value = productsStore.products.slice(0, 20);\r\n      } else {\r\n        const needle = val.toLowerCase();\r\n        filteredProducts.value = productsStore.products\r\n          .filter(\r\n            product =>\r\n              product.name.toLowerCase().includes(needle) ||\r\n              product.sku?.toLowerCase().includes(needle)\r\n          )\r\n          .slice(0, 20);\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmAddProduct = async () => {\r\n    if (!selectedProduct.value || !orderList.value) {\r\n      return;\r\n    }\r\n\r\n    addingProduct.value = true;\r\n    try {\r\n      // Find the first supplier product for this product\r\n      const supplierProduct = selectedProduct.value.supplier_products?.[0];\r\n      if (!supplierProduct) {\r\n        throw new Error('Geen leverancier gevonden voor dit product');\r\n      }\r\n\r\n      await orderListsStore.addOrderListItem({\r\n        order_list_id: orderList.value.id,\r\n        product_id: selectedProduct.value.id,\r\n        supplier_product_id: supplierProduct.id,\r\n        requested_quantity: newItemQuantity.value,\r\n        notes: '',\r\n      });\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: 'Product toegevoegd aan bestellijst',\r\n      });\r\n\r\n      showAddProductDialog.value = false;\r\n      selectedProduct.value = null;\r\n      newItemQuantity.value = 1;\r\n\r\n      // Reload the order list to get updated items\r\n      await loadOrderList();\r\n    } catch (err) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: 'Kon product niet toevoegen',\r\n        caption: err instanceof Error ? err.message : 'Onbekende fout',\r\n      });\r\n    } finally {\r\n      addingProduct.value = false;\r\n    }\r\n  };\r\n\r\n  const updateItemQuantity = async (item: any) => {\r\n    try {\r\n      await orderListsStore.updateOrderListItem(item.id, {\r\n        suggested_quantity: item.suggested_quantity,\r\n      });\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: 'Hoeveelheid bijgewerkt',\r\n        timeout: 1000,\r\n      });\r\n    } catch (err) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: 'Kon hoeveelheid niet bijwerken',\r\n      });\r\n    }\r\n  };\r\n\r\n  const incrementQuantity = (item: any) => {\r\n    item.suggested_quantity = (item.suggested_quantity || 0) + 1;\r\n    updateItemQuantity(item);\r\n  };\r\n\r\n  const decrementQuantity = (item: any) => {\r\n    if (item.suggested_quantity > 0) {\r\n      item.suggested_quantity = item.suggested_quantity - 1;\r\n      updateItemQuantity(item);\r\n    }\r\n  };\r\n\r\n  const duplicateList = async () => {\r\n    try {\r\n      await orderListsStore.duplicateOrderList(orderList.value!.id);\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: 'Bestellijst gedupliceerd',\r\n      });\r\n    } catch (err) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: 'Kon lijst niet dupliceren',\r\n      });\r\n    }\r\n  };\r\n\r\n  const orderAll = async () => {\r\n    try {\r\n      confirmPlaceAll.value = false;\r\n      processingGlobalOrder.value = true;\r\n      // Delegate to min/max orchestration if available\r\n      if (orderListsStore.applyOrderSuggestions) {\r\n        await orderListsStore.applyOrderSuggestions();\r\n      }\r\n      $q.notify({ type: 'positive', message: $t('orderLists.ordersCreated') as string });\r\n    } catch (err) {\r\n      $q.notify({ type: 'negative', message: $t('orderLists.processingError') as string });\r\n    } finally {\r\n      processingGlobalOrder.value = false;\r\n    }\r\n  };\r\n\r\n  const exportList = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: 'Export functionaliteit komt binnenkort',\r\n    });\r\n  };\r\n\r\n  const deleteList = async () => {\r\n    $q.dialog({\r\n      title: 'Bestellijst verwijderen',\r\n      message: `Weet je zeker dat je \"${orderList.value?.name}\" wilt verwijderen?`,\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        await orderListsStore.deleteOrderList(orderList.value!.id);\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: 'Bestellijst verwijderd',\r\n        });\r\n        router.push('/order-lists');\r\n      } catch (err) {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: 'Kon lijst niet verwijderen',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const getListIcon = () => {\r\n    return 'list_alt';\r\n  };\r\n\r\n  const getIconColor = () => {\r\n    return 'primary';\r\n  };\r\n\r\n  const editItem = (item: any) => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: 'Bewerken functionaliteit komt binnenkort',\r\n    });\r\n  };\r\n\r\n  const removeItem = async (item: any) => {\r\n    $q.dialog({\r\n      title: 'Product verwijderen',\r\n      message: `Weet je zeker dat je \"${\r\n        item.product_name || item.product?.name\r\n      }\" wilt verwijderen?`,\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        await orderListsStore.removeOrderListItem(item.id);\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: 'Product verwijderd',\r\n        });\r\n\r\n        // Reload the order list to get updated items\r\n        await loadOrderList();\r\n      } catch (err) {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: 'Kon product niet verwijderen',\r\n          caption: err instanceof Error ? err.message : 'Onbekende fout',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    loadOrderList();\r\n  });\r\n</script>\r\n\r\n<style scoped>\r\n  /* Table Header Styling */\r\n  .table-header {\r\n    padding: 0;\r\n  }\r\n\r\n  .table-info {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n\r\n  .table-count {\r\n    font-size: 13px;\r\n    color: var(--text-secondary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  /* Compact margins for better spacing */\r\n  .filters-section {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .table-header {\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  /* Ensure medical-table styling is applied */\r\n  .medical-table {\r\n    margin-top: 0;\r\n  }\r\n  /* Order list detail page styles */\r\n  .order-detail-page {\r\n    min-height: 100vh;\r\n    background: linear-gradient(135deg, var(--neutral-50) 0%, var(--neutral-200) 100%);\r\n  }\r\n\r\n  /* Page Header */\r\n  .page-header {\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-primary);\r\n    box-shadow: var(--shadow-sm);\r\n  }\r\n\r\n  .header-content {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 24px 32px;\r\n  }\r\n\r\n  .breadcrumb-nav {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .back-btn {\r\n    color: var(--text-secondary);\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n\r\n  .back-btn:hover {\r\n    background: var(--hover-bg);\r\n  }\r\n\r\n  .breadcrumb-text {\r\n    font-size: 14px;\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .breadcrumb-separator {\r\n    color: var(--neutral-300);\r\n  }\r\n\r\n  .breadcrumb-current {\r\n    font-size: 14px;\r\n    color: var(--text-primary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  .header-main {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: 24px;\r\n  }\r\n\r\n  .title-section {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 16px;\r\n    flex: 1;\r\n  }\r\n\r\n  .list-icon-large {\r\n    width: 64px;\r\n    height: 64px;\r\n    border-radius: 16px;\r\n    background: linear-gradient(\r\n      135deg,\r\n      rgba(30, 58, 138, 0.08),\r\n      rgba(30, 58, 138, 0.16)\r\n    );\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  .title-content {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  .page-title {\r\n    font-size: 28px;\r\n    font-weight: 700;\r\n    color: var(--text-primary);\r\n    margin: 0 0 8px 0;\r\n    line-height: 1.2;\r\n  }\r\n\r\n  .page-subtitle {\r\n    font-size: 16px;\r\n    color: var(--text-secondary);\r\n    margin: 0 0 12px 0;\r\n    line-height: 1.4;\r\n  }\r\n\r\n  .title-meta {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .status-badge {\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n    padding: 6px 12px;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .meta-separator {\r\n    color: var(--neutral-300);\r\n    font-weight: 500;\r\n  }\r\n\r\n  .meta-text {\r\n    font-size: 14px;\r\n    color: var(--text-secondary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  .header-actions {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n\r\n  .primary-action {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 10px 20px;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .secondary-action {\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 10px 16px;\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .menu-btn {\r\n    width: 40px;\r\n    height: 40px;\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .menu-btn:hover {\r\n    background: var(--hover-bg);\r\n  }\r\n\r\n  /* Main Content */\r\n  .main-content {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 32px;\r\n  }\r\n\r\n  /* Stats Bar */\r\n  .stats-bar {\r\n    margin-bottom: 32px;\r\n  }\r\n\r\n  .stats-container {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n    gap: 20px;\r\n  }\r\n\r\n  .stat-card {\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-lg);\r\n    padding: 20px;\r\n    box-shadow: var(--shadow-sm);\r\n    border: 1px solid var(--border-primary);\r\n    transition:\r\n      transform 0.2s ease,\r\n      box-shadow 0.2s ease;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 16px;\r\n  }\r\n\r\n  .stat-card:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .stat-icon {\r\n    width: 48px;\r\n    height: 48px;\r\n    border-radius: var(--radius-lg);\r\n    background: var(--hover-bg);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  .stat-content {\r\n    flex: 1;\r\n  }\r\n\r\n  .stat-value {\r\n    font-size: 20px;\r\n    font-weight: 700;\r\n    color: var(--text-primary);\r\n    line-height: 1.2;\r\n    margin-bottom: 4px;\r\n  }\r\n\r\n  .stat-label {\r\n    font-size: 13px;\r\n    color: var(--text-secondary);\r\n    font-weight: 500;\r\n    text-transform: uppercase;\r\n    letter-spacing: 0.5px;\r\n  }\r\n\r\n  /* Products Section */\r\n  .products-section {\r\n    background: var(--bg-secondary);\r\n    border-radius: var(--radius-xl);\r\n    box-shadow: var(--shadow-sm);\r\n    border: 1px solid var(--border-primary);\r\n    overflow: hidden;\r\n  }\r\n\r\n  .section-header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 24px 32px;\r\n    border-bottom: 1px solid var(--border-primary);\r\n    background: linear-gradient(135deg, var(--neutral-50) 0%, rgba(248, 250, 252, 0.5) 100%);\r\n  }\r\n\r\n  .section-title {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n\r\n  .section-title h2 {\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    margin: 0;\r\n  }\r\n\r\n  .item-count {\r\n    background: var(--hover-bg);\r\n    color: var(--brand-primary-light);\r\n    padding: 4px 8px;\r\n    border-radius: 6px;\r\n    font-size: 12px;\r\n    font-weight: 500;\r\n  }\r\n\r\n  .section-actions {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n\r\n  .refresh-btn {\r\n    color: var(--text-secondary);\r\n    width: 36px;\r\n    height: 36px;\r\n  }\r\n\r\n  .refresh-btn:hover {\r\n    background: var(--hover-bg);\r\n  }\r\n\r\n  /* Products Table Container */\r\n  .products-table-container {\r\n    position: relative;\r\n    min-height: 200px;\r\n  }\r\n\r\n  .loading-state {\r\n    height: 200px;\r\n    position: relative;\r\n  }\r\n\r\n  .empty-state {\r\n    text-align: center;\r\n    padding: 64px 32px;\r\n  }\r\n\r\n  .empty-icon {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  .empty-state h3 {\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    margin: 0 0 8px 0;\r\n  }\r\n\r\n  .empty-state p {\r\n    font-size: 14px;\r\n    color: var(--text-secondary);\r\n    margin: 0 0 24px 0;\r\n  }\r\n\r\n  /* Products Grid */\r\n  .products-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\r\n    gap: 24px;\r\n    padding: 24px 32px 32px;\r\n  }\r\n\r\n  .product-card {\r\n    background: var(--neutral-50);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-lg);\r\n    transition:\r\n      transform 0.2s ease,\r\n      box-shadow 0.2s ease;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .product-card:hover {\r\n    transform: translateY(-2px);\r\n    box-shadow: var(--shadow-md);\r\n  }\r\n\r\n  .product-header {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 16px 20px;\r\n    background: var(--bg-secondary);\r\n    border-bottom: 1px solid var(--border-primary);\r\n  }\r\n\r\n  .product-info {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  .product-icon {\r\n    width: 36px;\r\n    height: 36px;\r\n    border-radius: var(--radius-md);\r\n    background: var(--hover-bg);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  .product-details {\r\n    flex: 1;\r\n    min-width: 0;\r\n  }\r\n\r\n  .product-name {\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    color: var(--text-primary);\r\n    margin: 0 0 4px 0;\r\n    line-height: 1.3;\r\n    word-break: break-word;\r\n  }\r\n\r\n  .product-sku {\r\n    font-size: 12px;\r\n    color: var(--text-secondary);\r\n    margin: 0;\r\n    font-family: var(--font-family-mono);\r\n  }\r\n\r\n  .product-menu {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .product-menu:hover {\r\n    background: var(--hover-bg);\r\n  }\r\n\r\n  .product-content {\r\n    padding: 20px;\r\n  }\r\n\r\n  .quantity-section {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .quantity-label {\r\n    display: block;\r\n    font-size: 13px;\r\n    font-weight: 500;\r\n    color: var(--text-primary);\r\n    margin-bottom: 8px;\r\n  }\r\n\r\n  .quantity-controls {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n\r\n  .quantity-btn {\r\n    width: 32px;\r\n    height: 32px;\r\n    color: var(--text-secondary);\r\n    border: 1px solid var(--border-primary);\r\n    border-radius: var(--radius-sm);\r\n  }\r\n\r\n  .quantity-btn:hover {\r\n    background: var(--hover-bg);\r\n    border-color: var(--hover-border);\r\n  }\r\n\r\n  .quantity-input {\r\n    width: 80px;\r\n  }\r\n\r\n  .quantity-input input {\r\n    text-align: center;\r\n    font-weight: 600;\r\n  }\r\n\r\n  .product-meta {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n  }\r\n\r\n  .meta-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .meta-label {\r\n    font-size: 13px;\r\n    color: var(--text-secondary);\r\n    font-weight: 500;\r\n  }\r\n\r\n  .meta-value {\r\n    font-size: 13px;\r\n    color: var(--text-primary);\r\n    font-weight: 600;\r\n  }\r\n\r\n  .total-price {\r\n    color: var(--brand-success-light);\r\n    font-size: 14px;\r\n  }\r\n\r\n  /* Responsive Design */\r\n  @media (max-width: 768px) {\r\n    .header-content {\r\n      padding: 16px 20px;\r\n    }\r\n\r\n    .header-main {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      gap: 16px;\r\n    }\r\n\r\n    .title-section {\r\n      width: 100%;\r\n    }\r\n\r\n    .header-actions {\r\n      width: 100%;\r\n      justify-content: flex-start;\r\n    }\r\n\r\n    .main-content {\r\n      padding: 20px 16px;\r\n    }\r\n\r\n    .stats-container {\r\n      grid-template-columns: 1fr;\r\n      gap: 16px;\r\n    }\r\n\r\n    .section-header {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      gap: 16px;\r\n      padding: 20px;\r\n    }\r\n\r\n    .section-actions {\r\n      width: 100%;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    .products-grid {\r\n      grid-template-columns: 1fr;\r\n      gap: 16px;\r\n      padding: 20px;\r\n    }\r\n\r\n    .product-card {\r\n      margin: 0;\r\n    }\r\n\r\n    .quantity-controls {\r\n      justify-content: center;\r\n    }\r\n  }\r\n\r\n  /* Dark Mode Support */\r\n  .body--dark .order-detail-page {\r\n    background: var(--bg-primary);\r\n  }\r\n\r\n  .body--dark .page-header {\r\n    background: var(--bg-secondary);\r\n    border-bottom-color: var(--border-primary);\r\n  }\r\n\r\n  .body--dark .page-title {\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .body--dark .page-subtitle {\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .body--dark .stat-card,\r\n  .body--dark .products-section {\r\n    background: var(--bg-secondary);\r\n    border-color: var(--border-primary);\r\n  }\r\n\r\n  .body--dark .product-card {\r\n    background: var(--bg-secondary);\r\n  }\r\n\r\n  .body--dark .product-header {\r\n    background: var(--bg-secondary);\r\n    border-bottom-color: var(--border-primary);\r\n  }\r\n\r\n  .body--dark .product-name {\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .body--dark .meta-value {\r\n    color: var(--text-primary);\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrderListsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 11,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 11,
        "endColumn": 26,
        "fix": { "range": [224, 282], "text": "color=\"primary\"\n          @click=\"showCreateDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 12,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 21,
        "fix": {
          "range": [224, 303],
          "text": "icon=\"add\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 13,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 31,
        "fix": {
          "range": [224, 334],
          "text": "label=\"Nieuwe lijst\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          icon=\"add\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 14,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 14,
        "endColumn": 42,
        "fix": {
          "range": [224, 376],
          "text": "class=\"app-btn-primary q-mr-sm\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          icon=\"add\"\n          label=\"Nieuwe lijst\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 15,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 15,
        "endColumn": 21,
        "fix": {
          "range": [224, 397],
          "text": "unelevated\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          icon=\"add\"\n          label=\"Nieuwe lijst\"\n          class=\"app-btn-primary q-mr-sm\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 16,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 18,
        "fix": {
          "range": [224, 415],
          "text": "no-caps\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          icon=\"add\"\n          label=\"Nieuwe lijst\"\n          class=\"app-btn-primary q-mr-sm\"\n          unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 20,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 20,
        "endColumn": 28,
        "fix": { "range": [452, 516], "text": "color=\"secondary\"\n          @click=\"openMobileCountingInterface\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 21,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 21,
        "endColumn": 28,
        "fix": {
          "range": [452, 544],
          "text": "icon=\"smartphone\"\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 22,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 32,
        "fix": {
          "range": [452, 576],
          "text": "label=\"Mobiel tellen\"\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\"\n          icon=\"smartphone\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 23,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 23,
        "endColumn": 36,
        "fix": {
          "range": [452, 612],
          "text": "class=\"app-btn-secondary\"\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\"\n          icon=\"smartphone\"\n          label=\"Mobiel tellen\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 24,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 24,
        "endColumn": 18,
        "fix": {
          "range": [452, 630],
          "text": "outline\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\"\n          icon=\"smartphone\"\n          label=\"Mobiel tellen\"\n          class=\"app-btn-secondary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 25,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 25,
        "endColumn": 18,
        "fix": {
          "range": [452, 648],
          "text": "no-caps\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\"\n          icon=\"smartphone\"\n          label=\"Mobiel tellen\"\n          class=\"app-btn-secondary\"\n          outline"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 33,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 33,
        "endColumn": 32,
        "fix": { "range": [887, 900], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 44,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 44,
        "endColumn": 32,
        "fix": { "range": [1281, 1294], "text": "#action" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 49,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 49,
        "endColumn": 45,
        "fix": {
          "range": [1378, 1451],
          "text": ":loading=\"processingGlobalOrder\"\n            @click=\"orderAllUrgentItems\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 50,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 50,
        "endColumn": 46,
        "fix": {
          "range": [1378, 1497],
          "text": "class=\"app-btn-warning text-dark\"\n            @click=\"orderAllUrgentItems\"\n            :loading=\"processingGlobalOrder\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 51,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 51,
        "endColumn": 20,
        "fix": {
          "range": [1378, 1517],
          "text": "no-caps\n            @click=\"orderAllUrgentItems\"\n            :loading=\"processingGlobalOrder\"\n            class=\"app-btn-warning text-dark\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 57,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 57,
        "endColumn": 48,
        "fix": {
          "range": [1605, 1691],
          "text": "class=\"app-btn-secondary text-dark\"\n            @click=\"showGlobalAdviceDialog = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 58,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 58,
        "endColumn": 20,
        "fix": {
          "range": [1605, 1711],
          "text": "no-caps\n            @click=\"showGlobalAdviceDialog = true\"\n            class=\"app-btn-secondary text-dark\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 123,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 123,
        "endColumn": 31,
        "fix": { "range": [3808, 3871], "text": "v-model=\"filterValues\"\n        :preset=\"orderListsFilterPreset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 127,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 127,
        "endColumn": 27,
        "fix": { "range": [3952, 4005], "text": ":loading=\"loading\"\n        @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 128,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 128,
        "endColumn": 20,
        "fix": {
          "range": [3952, 4025],
          "text": "collapsible\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 129,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 129,
        "endColumn": 41,
        "fix": {
          "range": [3952, 4066],
          "text": "class=\"order-lists-filter-panel\"\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\"\n        collapsible"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-name' instead of 'v-slot:body-cell-name'.",
        "line": 157,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 157,
        "endColumn": 48,
        "fix": { "range": [4805, 4826], "text": "#body-cell-name" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 166,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 166,
        "endColumn": 50,
        "fix": { "range": [5108, 5131], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-urgency' instead of 'v-slot:body-cell-urgency'.",
        "line": 175,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 175,
        "endColumn": 51,
        "fix": { "range": [5378, 5402], "text": "#body-cell-urgency" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 198,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 198,
        "endColumn": 51,
        "fix": { "range": [6138, 6162], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 206,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 206,
        "endColumn": 30,
        "fix": { "range": [6329, 6392], "text": "class=\"q-mr-sm\"\n              @click=\"viewOrderList(props.row)\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 223,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 223,
        "endColumn": 42,
        "fix": {
          "range": [7019, 7096],
          "text": "class=\"text-negative\"\n                    @click=\"deleteOrderList(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 255,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 255,
        "endColumn": 26,
        "fix": { "range": [7974, 8032], "text": "color=\"primary\"\n          @click=\"showCreateDialog = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 256,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 256,
        "endColumn": 44,
        "fix": {
          "range": [7974, 8076],
          "text": ":label=\"$t('orderLists.newList')\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 257,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 257,
        "endColumn": 26,
        "fix": {
          "range": [7974, 8102],
          "text": "class=\"q-mt-md\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          :label=\"$t('orderLists.newList')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 324,
        "column": 45,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 324,
        "endColumn": 77,
        "fix": { "range": [10306, 10367], "text": ":loading=\"processingGlobalOrder\" @click=\"orderAllUrgentItems\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@click\".",
        "line": 324,
        "column": 78,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 324,
        "endColumn": 93,
        "fix": {
          "range": [10306, 10383],
          "text": "color=\"primary\" @click=\"orderAllUrgentItems\" :loading=\"processingGlobalOrder\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 324,
        "column": 94,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 324,
        "endColumn": 128,
        "fix": {
          "range": [10306, 10418],
          "text": ":label=\"$t('orderLists.orderAll')\" @click=\"orderAllUrgentItems\" :loading=\"processingGlobalOrder\" color=\"primary\""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 485,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 485,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15083, 15086], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15083, 15086], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 36,
    "fixableErrorCount": 0,
    "fixableWarningCount": 35,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Bestellijsten\"\n      subtitle=\"Beheer en automatiseer je bestellijsten met min/max levels\"\n      icon=\"list_alt\"\n    >\n      <template #actions>\n        <q-btn\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          icon=\"add\"\n          label=\"Nieuwe lijst\"\n          class=\"app-btn-primary q-mr-sm\"\n          unelevated\n          no-caps\n        />\n        <q-btn\n          @click=\"openMobileCountingInterface\"\n          color=\"secondary\"\n          icon=\"smartphone\"\n          label=\"Mobiel tellen\"\n          class=\"app-btn-secondary\"\n          outline\n          no-caps\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Global Reorder Advice Banner -->\n    <div v-if=\"globalOrderAdvice && hasUrgentItems\" class=\"q-mb-lg\">\n      <q-banner class=\"bg-warning text-dark rounded-borders\">\n        <template v-slot:avatar>\n          <q-icon name=\"warning\" size=\"32px\" />\n        </template>\n        <div class=\"text-weight-medium\">\n          {{ criticalItemsCount }} kritieke items hebben voorraad nodig!\n        </div>\n        <div class=\"text-caption\">\n          Totaal geschatte kosten: €{{\n            globalOrderAdvice.total_estimated_cost.toFixed(2)\n          }}\n        </div>\n        <template v-slot:action>\n          <q-btn\n            flat\n            label=\"Alles bestellen\"\n            @click=\"orderAllUrgentItems\"\n            :loading=\"processingGlobalOrder\"\n            class=\"app-btn-warning text-dark\"\n            no-caps\n          />\n          <q-btn\n            flat\n            label=\"Details\"\n            @click=\"showGlobalAdviceDialog = true\"\n            class=\"app-btn-secondary text-dark\"\n            no-caps\n          />\n        </template>\n      </q-banner>\n    </div>\n\n    <!-- Dashboard Cards -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Lists Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Totaal lijsten\" icon=\"list_alt\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">{{ totalLists }}</div>\n            <div class=\"kpi-subtitle\">Bestellijsten</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Items to Order Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          title=\"Te bestellen\"\n          icon=\"shopping_cart\"\n          :icon-color=\"itemsNeedingOrder > 0 ? 'warning' : 'positive'\"\n          :highlight=\"itemsNeedingOrder > 0\"\n        >\n          <div class=\"kpi-content\">\n            <div\n              class=\"kpi-value\"\n              :class=\"itemsNeedingOrder > 0 ? 'text-warning' : 'text-positive'\"\n            >\n              {{ itemsNeedingOrder }}\n            </div>\n            <div class=\"kpi-subtitle\">Items</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Auto-reorder Lists Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Automatisch\" icon=\"schedule\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">{{ autoReorderLists }}</div>\n            <div class=\"kpi-subtitle\">Auto-lijsten</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Value Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Geschatte waarde\" icon=\"euro\" icon-color=\"positive\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              €{{ totalEstimatedValue.toFixed(0) }}\n            </div>\n            <div class=\"kpi-subtitle\">Totale waarde</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Filters -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        :preset=\"orderListsFilterPreset\"\n        v-model=\"filterValues\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\"\n        collapsible\n        class=\"order-lists-filter-panel\"\n      />\n    </div>\n\n    <!-- Order Lists Display -->\n    <div v-if=\"viewMode === 'cards'\" class=\"row order-lists-grid\">\n      <div\n        v-for=\"orderList in filteredOrderLists\"\n        :key=\"orderList.id\"\n        class=\"col-12 col-sm-6 col-md-4 order-list-col\"\n      >\n        <SimpleOrderListCard\n          :order-list=\"orderList\"\n          :reorder-advice=\"getOrderAdviceForList(orderList.id)\"\n        />\n      </div>\n    </div>\n\n    <!-- Table View -->\n    <div v-else class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"filteredOrderLists\"\n        :columns=\"tableColumns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"order-lists-table\"\n      >\n        <template v-slot:body-cell-name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"text-weight-medium\">{{ props.row.name }}</div>\n            <div class=\"text-caption text-grey-6\">\n              {{ props.row.description }}\n            </div>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-badge\n              :color=\"getStatusColor(props.row.status)\"\n              :label=\"getStatusLabel(props.row.status)\"\n            />\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-urgency=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"row q-gutter-xs\">\n              <q-chip\n                v-if=\"getUrgencyStats(props.row.id).critical > 0\"\n                size=\"sm\"\n                color=\"negative\"\n                text-color=\"white\"\n                :label=\"getUrgencyStats(props.row.id).critical\"\n                icon=\"error\"\n              />\n              <q-chip\n                v-if=\"getUrgencyStats(props.row.id).high > 0\"\n                size=\"sm\"\n                color=\"warning\"\n                text-color=\"dark\"\n                :label=\"getUrgencyStats(props.row.id).high\"\n                icon=\"warning\"\n              />\n            </div>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"open_in_new\"\n              @click=\"viewOrderList(props.row)\"\n              class=\"q-mr-sm\"\n            >\n              <q-tooltip>Openen</q-tooltip>\n            </q-btn>\n            <q-btn flat round dense icon=\"more_vert\">\n              <q-menu>\n                <q-list dense>\n                  <q-item clickable @click=\"editOrderList(props.row)\">\n                    <q-item-section>Bewerken</q-item-section>\n                  </q-item>\n                  <q-item clickable @click=\"duplicateOrderList(props.row)\">\n                    <q-item-section>Dupliceren</q-item-section>\n                  </q-item>\n                  <q-separator />\n                  <q-item\n                    clickable\n                    @click=\"deleteOrderList(props.row)\"\n                    class=\"text-negative\"\n                  >\n                    <q-item-section>Verwijderen</q-item-section>\n                  </q-item>\n                </q-list>\n              </q-menu>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Empty State -->\n    <div v-if=\"filteredOrderLists.length === 0\" class=\"text-center q-py-xl\">\n      <q-icon name=\"list_alt\" size=\"64px\" class=\"text-grey-4\" />\n      <div class=\"text-h6 q-mt-md text-grey-6\">\n        {{\n          hasActiveFilters\n            ? $t('orderLists.emptyFiltered')\n            : $t('orderLists.empty')\n        }}\n      </div>\n      <div class=\"text-body2 q-mt-sm text-grey-5\">\n        {{\n          hasActiveFilters\n            ? $t('orderLists.tryOtherFilters')\n            : $t('orderLists.createFirstList')\n        }}\n      </div>\n        <q-btn\n          v-if=\"!hasActiveFilters\"\n          @click=\"showCreateDialog = true\"\n          color=\"primary\"\n          :label=\"$t('orderLists.newList')\"\n          class=\"q-mt-md\"\n        />\n    </div>\n\n    <!-- Global Advice Dialog -->\n    <BaseDialog\n      v-model=\"showGlobalAdviceDialog\"\n      :title=\"$t('orderLists.globalAdvice')\"\n      icon=\"lightbulb\"\n      size=\"md\"\n    >\n      <div v-if=\"globalOrderAdvice\">\n        <div class=\"row q-gutter-md q-mb-md\">\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-negative\">\n              {{ globalOrderAdvice.items_by_urgency.critical.length }}\n            </div>\n            <div class=\"text-caption\">Kritiek</div>\n          </div>\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-warning\">\n              {{ globalOrderAdvice.items_by_urgency.high.length }}\n            </div>\n            <div class=\"text-caption\">Hoog</div>\n          </div>\n          <div class=\"col text-center\">\n            <div class=\"text-h5 text-primary\">\n              {{ globalOrderAdvice.items_by_urgency.normal.length }}\n            </div>\n            <div class=\"text-caption\">Normaal</div>\n          </div>\n        </div>\n\n        <div class=\"q-mb-md\">\n          <div class=\"text-subtitle2 q-mb-xs\">Leveranciers betrokken:</div>\n          <div class=\"row q-gutter-xs\">\n            <q-chip\n              v-for=\"supplier in globalOrderAdvice.suppliers_involved\"\n              :key=\"supplier\"\n              color=\"primary\"\n              text-color=\"white\"\n              :label=\"supplier\"\n              size=\"sm\"\n            />\n          </div>\n        </div>\n\n        <div class=\"q-mb-md\">\n          <div class=\"row items-center\">\n            <div class=\"col\">\n              <div class=\"text-subtitle2\">Totale kosten:</div>\n              <div class=\"text-h5 text-primary\">\n                €{{ globalOrderAdvice.total_estimated_cost.toFixed(2) }}\n              </div>\n            </div>\n            <div class=\"col-auto\">\n              <div class=\"text-subtitle2\">Items:</div>\n              <div class=\"text-subtitle1\">\n                {{ globalOrderAdvice.total_items_to_order }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <template #actions>\n        <q-btn flat :label=\"$t('common.close')\" @click=\"showGlobalAdviceDialog = false\" />\n        <q-btn @click=\"orderAllUrgentItems\" :loading=\"processingGlobalOrder\" color=\"primary\" :label=\"$t('orderLists.orderAll')\" />\n      </template>\n    </BaseDialog>\n\n    <!-- Mobile Counting Interface Dialog -->\n    <q-dialog\n      v-model=\"showMobileCountingDialog\"\n      full-width\n      full-height\n      maximized\n      transition-show=\"slide-up\"\n      transition-hide=\"slide-down\"\n    >\n      <MobileCountingInterface\n        :practice-id=\"authStore.clinicId\"\n        @close=\"showMobileCountingDialog = false\"\n      />\n    </q-dialog>\n\n    <!-- Create Order List Dialog -->\n    <OrderListDialog\n      v-model=\"showCreateDialog\"\n      @created=\"handleOrderListCreated\"\n    />\n\n    <!-- Loading State -->\n    <q-inner-loading :showing=\"loading\">\n      <q-spinner-gears size=\"50px\" color=\"primary\" />\n    </q-inner-loading>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  // Dialog baseline: this page uses BaseDialog for global advice modal\n  import { ref, computed, onMounted, watch } from 'vue';\n  import { useQuasar } from 'quasar';\n  import { useRouter } from 'vue-router';\n  import { useOrderListsStore } from '@/stores/orderLists';\n  import { useAuthStore } from '@/stores/auth';\n  import { useSuppliersStore } from '@/stores/suppliers';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import { BaseCard } from '@/components/cards';\n  import FilterPanel from '@/components/filters/FilterPanel.vue';\n  import SimpleOrderListCard from '@/components/orderLists/SimpleOrderListCard.vue';\n  import MobileCountingInterface from '@/components/inventory/MobileCountingInterface.vue';\n  import OrderListDialog from '@/components/products/OrderListDialog.vue';\n  import type { OrderListWithItems } from '@/types/stores';\n  import type { OrderAdvice } from '@/stores/orderLists/orderLists-minmax';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from '@/types/filters';\n  import { advancedOrderListsFilterPreset as orderListsFilterPreset } from '@/presets/filters/advancedOrderLists';\n\n  const $q = useQuasar();\n  const router = useRouter();\n  const orderListsStore = useOrderListsStore();\n  const authStore = useAuthStore();\n  const suppliersStore = useSuppliersStore();\n\n  // State\n  const loading = ref(false);\n  const showCreateDialog = ref(false);\n  const showGlobalAdviceDialog = ref(false);\n  const showMobileCountingDialog = ref(false);\n  const processingGlobalOrder = ref(false);\n\n  // Filters\n  const filterValues = ref<FilterValues>({});\n  const viewMode = computed(() => filterValues.value.viewMode || 'cards');\n  const hasActiveFilters = computed(() => {\n    return Object.values(filterValues.value).some(value => {\n      if (value === null || value === undefined || value === '') {\n        return false;\n      }\n      if (Array.isArray(value) && value.length === 0) {\n        return false;\n      }\n      if (typeof value === 'boolean' && value === false) {\n        return false;\n      }\n      return true;\n    });\n  });\n\n  // Update filter preset with dynamic supplier options\n  watch(\n    () => suppliersStore.activeSuppliers,\n    suppliers => {\n      const supplierFilter = orderListsFilterPreset.fields.find(\n        f => f.id === 'supplier'\n      );\n      if (supplierFilter && supplierFilter.type === 'select') {\n        supplierFilter.options = suppliers.map(supplier => ({\n          label: supplier.name,\n          value: supplier.id,\n        }));\n      }\n    },\n    { immediate: true }\n  );\n\n  // Table columns\n  const tableColumns = [\n    {\n      name: 'name',\n      required: true,\n      label: 'Naam',\n      align: 'left',\n      field: 'name',\n      sortable: true,\n    },\n    {\n      name: 'status',\n      align: 'center',\n      label: 'Status',\n      field: 'status',\n      sortable: true,\n    },\n    {\n      name: 'items',\n      align: 'center',\n      label: 'Items',\n      field: 'total_items',\n      sortable: true,\n    },\n    {\n      name: 'value',\n      align: 'right',\n      label: 'Waarde',\n      field: 'total_value',\n      sortable: true,\n      format: (val: number) => `€${val.toFixed(2)}`,\n    },\n    {\n      name: 'urgency',\n      align: 'center',\n      label: 'Urgentie',\n      field: 'id',\n    },\n    {\n      name: 'actions',\n      align: 'center',\n      label: 'Acties',\n      field: 'id',\n    },\n  ];\n\n  // Computed properties\n  const totalLists = computed(() => orderListsStore.orderLists.length);\n\n  const itemsNeedingOrder = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.filter(item => item.calculated_order_quantity > 0)\n      .length;\n  });\n\n  const autoReorderLists = computed(() => {\n    const lists = orderListsStore.orderLists || [];\n    return lists.filter(list => (list as any).auto_reorder_enabled).length;\n  });\n\n  const totalEstimatedValue = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.reduce(\n      (sum, item) =>\n        sum + item.calculated_order_quantity * (item.preferred_unit_price || 0),\n      0\n    );\n  });\n\n  const globalOrderAdvice = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const itemsByUrgency = {\n      critical: suggestions.filter(item => item.urgency_level === 'critical'),\n      high: suggestions.filter(item => item.urgency_level === 'high'),\n      normal: suggestions.filter(item => item.urgency_level === 'normal'),\n      low: suggestions.filter(item => item.urgency_level === 'low'),\n    };\n\n    return {\n      total_items_to_order: suggestions.filter(\n        item => item.calculated_order_quantity > 0\n      ).length,\n      total_estimated_cost: totalEstimatedValue.value,\n      items_by_urgency: itemsByUrgency,\n      suppliers_involved: [\n        ...new Set(\n          suggestions.map(item => item.preferred_supplier_name).filter(Boolean)\n        ),\n      ],\n      estimated_delivery_dates: {},\n    };\n  });\n\n  const hasUrgentItems = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.some(\n      item =>\n        item.urgency_level === 'critical' ||\n        (item.urgency_level === 'high' && item.calculated_order_quantity > 0)\n    );\n  });\n\n  const criticalItemsCount = computed(() => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    return suggestions.filter(item => item.urgency_level === 'critical').length;\n  });\n\n  const filteredOrderLists = computed(() => {\n    const lists = orderListsStore.orderLists || [];\n    let result = [...lists];\n\n    // Apply search filter\n    if (filterValues.value.search) {\n      const searchTerm = filterValues.value.search.toLowerCase();\n      result = result.filter(\n        list =>\n          list.name.toLowerCase().includes(searchTerm) ||\n          (list.description &&\n            list.description.toLowerCase().includes(searchTerm))\n      );\n    }\n\n    // Apply status filter\n    if (filterValues.value.status) {\n      result = result.filter(list => list.status === filterValues.value.status);\n    }\n\n    // Apply supplier filter\n    if (filterValues.value.supplier) {\n      result = result.filter(\n        list => list.supplier_id === filterValues.value.supplier\n      );\n    }\n\n    // Apply urgency filter\n    if (filterValues.value.urgency) {\n      result = result.filter(list => {\n        const urgencyStats = getUrgencyStats(list.id);\n        return (\n          urgencyStats[\n            filterValues.value.urgency as keyof typeof urgencyStats\n          ] > 0\n        );\n      });\n    }\n\n    return result;\n  });\n\n  // Filter handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // FilterChangeEvent contains field, value, oldValue, preset\n    // The actual values are managed by the FilterPanel component\n    console.log('Filter changed:', event);\n  };\n\n  const handleFilterReset = () => {\n    filterValues.value = {};\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Methods\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      ready: 'positive',\n      draft: 'warning',\n      submitted: 'info',\n      confirmed: 'primary',\n      delivered: 'positive',\n      cancelled: 'negative',\n    };\n    return colors[status] || 'grey';\n  };\n\n  const getStatusLabel = (status: string) => {\n    const labels: Record<string, string> = {\n      ready: 'Klaar',\n      draft: 'Concept',\n      submitted: 'Verzonden',\n      confirmed: 'Bevestigd',\n      delivered: 'Geleverd',\n      cancelled: 'Geannuleerd',\n    };\n    return labels[status] || status;\n  };\n\n  const getOrderAdviceForList = (listId: string): OrderAdvice | undefined => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const items = suggestions.filter(item => item.order_list_id === listId);\n\n    if (items.length === 0) {\n      return undefined;\n    }\n\n    const itemsByUrgency = {\n      critical: items.filter(item => item.urgency_level === 'critical'),\n      high: items.filter(item => item.urgency_level === 'high'),\n      normal: items.filter(item => item.urgency_level === 'normal'),\n      low: items.filter(item => item.urgency_level === 'low'),\n    };\n\n    const totalCost = items.reduce(\n      (sum, item) =>\n        sum + item.calculated_order_quantity * (item.preferred_unit_price || 0),\n      0\n    );\n\n    const suppliersInvolved = [\n      ...new Set(\n        items.map(item => item.preferred_supplier_name).filter(Boolean)\n      ),\n    ];\n\n    return {\n      total_items_to_order: items.filter(\n        item => item.calculated_order_quantity > 0\n      ).length,\n      total_estimated_cost: totalCost,\n      items_by_urgency: itemsByUrgency,\n      suppliers_involved: suppliersInvolved,\n      estimated_delivery_dates: {},\n    };\n  };\n\n  const getUrgencyStats = (listId: string) => {\n    const suggestions = orderListsStore.orderSuggestions || [];\n    const items = suggestions.filter(item => item.order_list_id === listId);\n\n    return {\n      critical: items.filter(item => item.urgency_level === 'critical').length,\n      high: items.filter(item => item.urgency_level === 'high').length,\n      normal: items.filter(item => item.urgency_level === 'normal').length,\n      low: items.filter(item => item.urgency_level === 'low').length,\n    };\n  };\n\n  const openMobileCountingInterface = () => {\n    showMobileCountingDialog.value = true;\n  };\n\n  const orderAllUrgentItems = async () => {\n    processingGlobalOrder.value = true;\n    try {\n      const urgentItems = [\n        ...(globalOrderAdvice.value?.items_by_urgency?.critical || []),\n        ...(globalOrderAdvice.value?.items_by_urgency?.high || []),\n      ].filter(item => item.calculated_order_quantity > 0);\n\n      if (urgentItems.length === 0) {\n        $q.notify({\n          type: 'info',\n          message: $t('orderLists.noUrgentItems'),\n          timeout: 2000,\n        });\n        return;\n      }\n\n      // Split orders by suppliers\n      const splitResult =\n        await orderListsStore.splitOrdersBySupplier(urgentItems);\n\n      $q.notify({\n        type: 'positive',\n        message: $t('orderlists.positive'),\n        caption: `${urgentItems.length} urgente items verwerkt`,\n        timeout: 3000,\n      });\n\n      showGlobalAdviceDialog.value = false;\n\n      // Optionally send orders to suppliers\n      if (splitResult.supplier_orders.length > 0) {\n        $q.dialog({\n          title: 'Bestellingen verzenden?',\n          message: $t('orderLists.sendConfirm', {\n            count: splitResult.supplier_orders.length,\n          }),\n          ok: {\n            label: 'Ja, verzenden',\n            color: 'primary',\n          },\n          cancel: {\n            label: 'Later',\n            color: 'grey',\n            flat: true,\n          },\n        }).onOk(async () => {\n          try {\n            const sendResults = await orderListsStore.sendOrdersToSuppliers(\n              splitResult.supplier_orders\n            );\n\n            const successCount = sendResults.filter(\n              r => r.status === 'success'\n            ).length;\n            const failedCount = sendResults.filter(\n              r => r.status === 'failed'\n            ).length;\n\n            $q.notify({\n              type: successCount > 0 ? 'positive' : 'negative',\n              message: $t('orderLists.ordersSent', {\n                successCount,\n                failedCount,\n              }),\n              timeout: 3000,\n            });\n          } catch (error) {\n            $q.notify({\n              type: 'negative',\n              message: $t('orderLists.sendError'),\n              caption:\n                error instanceof Error ? error.message : 'Onbekende fout',\n            });\n          }\n        });\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.processingError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      processingGlobalOrder.value = false;\n    }\n  };\n\n  const viewOrderList = (orderList: OrderListWithItems) => {\n    router.push(`/order-lists/${orderList.id}`);\n  };\n\n  const editOrderList = (orderList: OrderListWithItems) => {\n    // Implementation for editing order list\n    $q.notify({\n      type: 'info',\n      message: $t('orderLists.editComing'),\n      timeout: 2000,\n    });\n  };\n\n  const duplicateOrderList = async (orderList: OrderListWithItems) => {\n    try {\n      const newList = await orderListsStore.duplicateOrderList(orderList.id);\n\n      $q.notify({\n        type: 'positive',\n        message: $t('orderLists.duplicated'),\n        caption: `Nieuwe lijst: ${newList.name}`,\n        timeout: 3000,\n      });\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.duplicateError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    }\n  };\n\n  const deleteOrderList = async (orderList: OrderListWithItems) => {\n    $q.dialog({\n      title: 'Lijst verwijderen',\n      message: $t('orderLists.deleteConfirmText', { name: orderList.name }),\n      ok: {\n        label: 'Verwijderen',\n        color: 'negative',\n      },\n      cancel: {\n        label: 'Annuleren',\n        color: 'grey',\n        flat: true,\n      },\n    }).onOk(async () => {\n      try {\n        await orderListsStore.deleteOrderList(orderList.id);\n\n        $q.notify({\n          type: 'positive',\n          message: $t('orderLists.deleted'),\n          timeout: 2000,\n        });\n      } catch (error) {\n        $q.notify({\n          type: 'negative',\n          message: $t('orderLists.deleteError'),\n          caption: error instanceof Error ? error.message : 'Onbekende fout',\n        });\n      }\n    });\n  };\n\n  const handleOrderCreated = (orderList: OrderListWithItems) => {\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.orderCreated'),\n      caption: `Vanuit lijst: ${orderList.name}`,\n      timeout: 3000,\n    });\n  };\n\n  const handleListUpdated = (orderList: OrderListWithItems) => {\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.updated'),\n      timeout: 2000,\n    });\n  };\n\n  const handleAnalyticsRequest = (orderList: OrderListWithItems) => {\n    router.push(`/analytics?list=${orderList.id}`);\n  };\n\n  const handleOrderListCreated = () => {\n    showCreateDialog.value = false;\n\n    $q.notify({\n      type: 'positive',\n      message: $t('orderLists.created'),\n      timeout: 2000,\n    });\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    loading.value = true;\n    try {\n      const practiceId = authStore.clinicId;\n      if (practiceId) {\n        await Promise.all([\n          orderListsStore.fetchOrderLists(practiceId),\n          suppliersStore.fetchSuppliers(),\n          orderListsStore.generateOrderSuggestions(practiceId),\n        ]);\n      }\n    } catch (error) {\n      $q.notify({\n        type: 'negative',\n        message: $t('orderLists.loadDataError'),\n        caption: error instanceof Error ? error.message : 'Onbekende fout',\n      });\n    } finally {\n      loading.value = false;\n    }\n  });\n\n  // Watch for practice changes\n  watch(\n    () => authStore.clinicId,\n    async newPracticeId => {\n      if (newPracticeId) {\n        loading.value = true;\n        try {\n          await Promise.all([\n            orderListsStore.fetchOrderLists(newPracticeId),\n            orderListsStore.generateOrderSuggestions(newPracticeId),\n          ]);\n        } catch (error) {\n          $q.notify({\n            type: 'negative',\n            message: $t('orderLists.loadDataError'),\n            caption: error instanceof Error ? error.message : 'Onbekende fout',\n          });\n        } finally {\n          loading.value = false;\n        }\n      }\n    }\n  );\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n\n  /* Order Lists Grid */\n  .order-lists-grid {\n    .order-list-col {\n      padding: 8px;\n    }\n  }\n\n  /* Filters Section */\n  .filters-section {\n    margin-bottom: var(--space-6, 24px);\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\OrdersPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 12,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 12,
        "endColumn": 31,
        "fix": { "range": [264, 318], "text": ":loading=\"loading\"\r\n            @click=\"refreshOrders\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 13,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 13,
        "endColumn": 36,
        "fix": {
          "range": [264, 355],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"refreshOrders\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 21,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 21,
        "endColumn": 33,
        "fix": {
          "range": [559, 625],
          "text": ":loading=\"exporting\"\r\n            @click=\"showExportDialog = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 22,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 23,
        "fix": {
          "range": [559, 649],
          "text": "unelevated\r\n            @click=\"showExportDialog = true\"\r\n            :loading=\"exporting\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 23,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 23,
        "endColumn": 20,
        "fix": {
          "range": [559, 670],
          "text": "no-caps\r\n            @click=\"showExportDialog = true\"\r\n            :loading=\"exporting\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 24,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 24,
        "endColumn": 38,
        "fix": {
          "range": [559, 709],
          "text": "class=\"app-btn-secondary\"\r\n            @click=\"showExportDialog = true\"\r\n            :loading=\"exporting\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 30,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 30,
        "endColumn": 23,
        "fix": { "range": [830, 883], "text": "unelevated\r\n            @click=\"showAnalytics = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 31,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 31,
        "endColumn": 20,
        "fix": {
          "range": [830, 904],
          "text": "no-caps\r\n            @click=\"showAnalytics = true\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 32,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 32,
        "endColumn": 33,
        "fix": {
          "range": [830, 938],
          "text": "class=\"app-btn-info\"\r\n            @click=\"showAnalytics = true\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 38,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 38,
        "endColumn": 23,
        "fix": { "range": [1055, 1102], "text": "unelevated\r\n            @click=\"createNewOrder\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 39,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 39,
        "endColumn": 20,
        "fix": {
          "range": [1055, 1123],
          "text": "no-caps\r\n            @click=\"createNewOrder\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 40,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 40,
        "endColumn": 36,
        "fix": {
          "range": [1055, 1160],
          "text": "class=\"app-btn-primary\"\r\n            @click=\"createNewOrder\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 50,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 50,
        "endColumn": 31,
        "fix": { "range": [1343, 1403], "text": "v-model=\"filterValues\"\r\n        :preset=\"ordersFilterPreset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 54,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 54,
        "endColumn": 27,
        "fix": { "range": [1487, 1541], "text": ":loading=\"loading\"\r\n        @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 55,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 55,
        "endColumn": 20,
        "fix": {
          "range": [1487, 1562],
          "text": "collapsible\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 56,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 36,
        "fix": {
          "range": [1487, 1599],
          "text": "class=\"orders-filter-panel\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model:selected\" should go before \":loading\".",
        "line": 66,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 66,
        "endColumn": 36,
        "fix": { "range": [1784, 1839], "text": "v-model:selected=\"selected\"\r\n        :loading=\"loading\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 74,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 74,
        "endColumn": 50,
        "fix": { "range": [2021, 2044], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-order_date' instead of 'v-slot:body-cell-order_date'.",
        "line": 86,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 86,
        "endColumn": 54,
        "fix": { "range": [2423, 2450], "text": "#body-cell-order_date" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-total_amount' instead of 'v-slot:body-cell-total_amount'.",
        "line": 92,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 92,
        "endColumn": 56,
        "fix": { "range": [2597, 2626], "text": "#body-cell-total_amount" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-expected_delivery_date' instead of 'v-slot:body-cell-expected_delivery_date'.",
        "line": 98,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 98,
        "endColumn": 66,
        "fix": { "range": [2796, 2835], "text": "#body-cell-expected_delivery_date" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 104,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 104,
        "endColumn": 51,
        "fix": { "range": [2982, 3006], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 244,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 244,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6924, 6927], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6924, 6927], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 487,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 487,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13451, 13454], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13451, 13454], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 505,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 505,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13831, 13834], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13831, 13834], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 512,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 512,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13978, 13981], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13978, 13981], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 519,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 519,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14129, 14132], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14129, 14132], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 553,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 553,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14881, 14884], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14881, 14884], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 22,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle :title=\"$t('orders.title')\" icon=\"assignment\">\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshOrders\"\r\n            :loading=\"loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            icon=\"file_download\"\r\n            :label=\"$t('common.export')\"\r\n            @click=\"showExportDialog = true\"\r\n            :loading=\"exporting\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-secondary\"\r\n          />\r\n          <q-btn\r\n            icon=\"analytics\"\r\n            :label=\"$t('orders.analytics')\"\r\n            @click=\"showAnalytics = true\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-info\"\r\n          />\r\n          <q-btn\r\n            icon=\"add\"\r\n            :label=\"$t('orders.createOrder')\"\r\n            @click=\"createNewOrder\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-primary\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- FilterPanel component -->\r\n    <div class=\"filters-section q-mb-lg\">\r\n      <FilterPanel\r\n        :preset=\"ordersFilterPreset\"\r\n        v-model=\"filterValues\"\r\n        @change=\"handleFilterChange\"\r\n        @reset=\"handleFilterReset\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible\r\n        class=\"orders-filter-panel\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Orders Table -->\r\n    <div class=\"medical-table no-top-content\">\r\n      <q-table\r\n        :rows=\"filteredOrders\"\r\n        :columns=\"columns\"\r\n        :loading=\"loading\"\r\n        v-model:selected=\"selected\"\r\n        selection=\"multiple\"\r\n        row-key=\"id\"\r\n        :pagination=\"{ rowsPerPage: 25 }\"\r\n        flat\r\n        bordered\r\n        separator=\"cell\"\r\n      >\r\n        <template v-slot:body-cell-status=\"props\">\r\n          <q-td :props=\"props\" class=\"text-center\">\r\n            <q-chip\r\n              :color=\"getStatusColor(props.value)\"\r\n              :text-color=\"getStatusTextColor(props.value)\"\r\n              :label=\"$t(`orders.status.${props.value}`)\"\r\n              size=\"sm\"\r\n              dense\r\n            />\r\n          </q-td>\r\n        </template>\r\n\r\n        <template v-slot:body-cell-order_date=\"props\">\r\n          <q-td :props=\"props\">\r\n            {{ formatDate(props.value) }}\r\n          </q-td>\r\n        </template>\r\n\r\n        <template v-slot:body-cell-total_amount=\"props\">\r\n          <q-td :props=\"props\" class=\"text-right\">\r\n            {{ formatCurrency(props.value) }}\r\n          </q-td>\r\n        </template>\r\n\r\n        <template v-slot:body-cell-expected_delivery_date=\"props\">\r\n          <q-td :props=\"props\">\r\n            {{ formatDate(props.value) }}\r\n          </q-td>\r\n        </template>\r\n\r\n        <template v-slot:body-cell-actions=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-btn\r\n              flat\r\n              round\r\n              dense\r\n              icon=\"visibility\"\r\n              size=\"sm\"\r\n              @click=\"viewOrder(props.row)\"\r\n            >\r\n              <q-tooltip>{{ $t('orders.viewOrder') }}</q-tooltip>\r\n            </q-btn>\r\n            <q-btn\r\n              flat\r\n              round\r\n              dense\r\n              icon=\"edit\"\r\n              size=\"sm\"\r\n              @click=\"editOrder(props.row)\"\r\n            >\r\n              <q-tooltip>{{ $t('orders.editOrder') }}</q-tooltip>\r\n            </q-btn>\r\n            <q-btn\r\n              flat\r\n              round\r\n              dense\r\n              icon=\"download\"\r\n              size=\"sm\"\r\n              @click=\"downloadOrder(props.row)\"\r\n            >\r\n              <q-tooltip>{{ $t('orders.downloadOrder') }}</q-tooltip>\r\n            </q-btn>\r\n          </q-td>\r\n        </template>\r\n      </q-table>\r\n    </div>\r\n\r\n    <!-- Export Dialog -->\r\n    <FormDialog\r\n      v-model=\"showExportDialog\"\r\n      :title=\"$t('orders.export.title')\"\r\n      icon=\"download\"\r\n      size=\"sm\"\r\n      :loading=\"exporting\"\r\n      :submit-button-text=\"$t('orders.export.export')\"\r\n      @submit=\"performExport\"\r\n      @cancel=\"showExportDialog = false\"\r\n    >\r\n      <div class=\"q-gutter-md\">\r\n        <q-select\r\n          v-model=\"exportFormat\"\r\n          :options=\"exportFormatOptions\"\r\n          :label=\"$t('orders.export.format')\"\r\n          outlined\r\n          emit-value\r\n          map-options\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"exportDateFrom\"\r\n          :label=\"$t('orders.export.dateFrom')\"\r\n          type=\"date\"\r\n          outlined\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"exportDateTo\"\r\n          :label=\"$t('orders.export.dateTo')\"\r\n          type=\"date\"\r\n          outlined\r\n        />\r\n      </div>\r\n    </FormDialog>\r\n\r\n    <!-- Analytics Dialog -->\r\n    <q-dialog v-model=\"showAnalytics\" maximized>\r\n      <q-card>\r\n        <q-card-section>\r\n          <div class=\"text-h6\">{{ $t('orders.analytics.title') }}</div>\r\n        </q-card-section>\r\n\r\n        <q-card-section>\r\n          <div class=\"text-center\">\r\n            <q-icon name=\"assessment\" size=\"xl\" color=\"grey-5\" />\r\n            <div class=\"text-h6 q-mt-md\">\r\n              {{ $t('orders.analytics.comingSoon') }}\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n\r\n        <q-card-actions align=\"right\">\r\n          <q-btn\r\n            flat\r\n            :label=\"$t('common.close')\"\r\n            @click=\"showAnalytics = false\"\r\n          />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useQuasar, date } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\r\n  import FormDialog from 'src/components/base/FormDialog.vue';\r\n  import { ordersFilterPreset } from '@/presets/filters/orders';\r\n  import { supabase } from 'src/services/supabase';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from '@/types/filters';\r\n\r\n  const $q = useQuasar();\r\n  const { t } = useI18n();\r\n  const authStore = useAuthStore();\r\n\r\n  // Refs\r\n  const loading = ref(false);\r\n  const exporting = ref(false);\r\n  const selected = ref([]);\r\n  const showExportDialog = ref(false);\r\n  const showAnalytics = ref(false);\r\n\r\n  // New filter state for FilterPanel\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Export state\r\n  const exportFormat = ref('xlsx');\r\n  const exportDateFrom = ref('');\r\n  const exportDateTo = ref('');\r\n\r\n  // Data\r\n  const orders = ref<any[]>([]);\r\n\r\n  // Filter event handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    // Filter logic is handled by computed property\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    filterValues.value = { ...ordersFilterPreset.defaultFilters };\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    filterValues.value = {};\r\n  };\r\n\r\n  // Computed\r\n  const filteredOrders = computed(() => {\r\n    let filtered = orders.value;\r\n\r\n    // Apply status filter\r\n    const status = filterValues.value.status;\r\n    if (status) {\r\n      filtered = filtered.filter(order => order.status === status);\r\n    }\r\n\r\n    // Apply supplier filter\r\n    const supplier = filterValues.value.supplier;\r\n    if (supplier) {\r\n      filtered = filtered.filter(order => order.supplier_id === supplier);\r\n    }\r\n\r\n    // Apply date range filter\r\n    const orderDateRange = filterValues.value.order_date_range;\r\n    if (orderDateRange && orderDateRange.from) {\r\n      const fromDate = new Date(orderDateRange.from);\r\n      const toDate = orderDateRange.to\r\n        ? new Date(orderDateRange.to)\r\n        : new Date();\r\n\r\n      filtered = filtered.filter(order => {\r\n        const orderDate = new Date(order.order_date);\r\n        return orderDate >= fromDate && orderDate <= toDate;\r\n      });\r\n    }\r\n\r\n    // Apply amount range filter\r\n    const amountRange = filterValues.value.amount_range;\r\n    if (\r\n      amountRange &&\r\n      (amountRange.min !== undefined || amountRange.max !== undefined)\r\n    ) {\r\n      filtered = filtered.filter(order => {\r\n        const amount = order.total_amount || 0;\r\n        if (amountRange.min !== undefined && amount < amountRange.min) {\r\n          return false;\r\n        }\r\n        if (amountRange.max !== undefined && amount > amountRange.max) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Apply expected delivery date range filter\r\n    const deliveryDateRange = filterValues.value.expected_delivery_date_range;\r\n    if (deliveryDateRange && deliveryDateRange.from) {\r\n      const fromDate = new Date(deliveryDateRange.from);\r\n      const toDate = deliveryDateRange.to\r\n        ? new Date(deliveryDateRange.to)\r\n        : new Date();\r\n\r\n      filtered = filtered.filter(order => {\r\n        if (!order.expected_delivery_date) {\r\n          return false;\r\n        }\r\n        const deliveryDate = new Date(order.expected_delivery_date);\r\n        return deliveryDate >= fromDate && deliveryDate <= toDate;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Button definitions\r\n  const exportBtn = computed(() => ({\r\n    icon: 'download',\r\n    label: t('orders.export.button'),\r\n    color: 'secondary',\r\n    unelevated: true,\r\n    'no-caps': true,\r\n  }));\r\n\r\n  const analyticsBtn = computed(() => ({\r\n    icon: 'analytics',\r\n    label: t('orders.analytics.button'),\r\n    color: 'info',\r\n    unelevated: true,\r\n    'no-caps': true,\r\n  }));\r\n\r\n  const createOrderBtn = computed(() => ({\r\n    icon: 'add',\r\n    label: t('orders.createOrder'),\r\n    color: 'primary',\r\n    unelevated: true,\r\n    'no-caps': true,\r\n  }));\r\n\r\n  // Table columns with enhanced configuration\r\n  const columns = computed(() => [\r\n    {\r\n      name: 'order_number',\r\n      label: t('orders.orderNumber'),\r\n      field: 'order_number',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'supplier_name',\r\n      label: t('orders.supplier'),\r\n      field: 'supplier_name',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      classes: 'col-name',\r\n      headerClasses: 'col-name',\r\n    },\r\n    {\r\n      name: 'order_date',\r\n      label: t('orders.orderDate'),\r\n      field: 'order_date',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: t('orders.columns.status'),\r\n      field: 'status',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'total_amount',\r\n      label: t('orders.totalAmount'),\r\n      field: 'total_amount',\r\n      align: 'right' as const,\r\n      sortable: true,\r\n      classes: 'col-numeric',\r\n      headerClasses: 'col-numeric',\r\n    },\r\n    {\r\n      name: 'expected_delivery_date',\r\n      label: t('orders.expectedDelivery'),\r\n      field: 'expected_delivery_date',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('orders.actions'),\r\n      field: '',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      classes: 'col-actions',\r\n      headerClasses: 'col-actions',\r\n    },\r\n  ]);\r\n\r\n  // Export format options\r\n  const exportFormatOptions = computed(() => [\r\n    { label: t('exports.formats.excel'), value: 'xlsx' },\r\n    { label: t('exports.formats.csv'), value: 'csv' },\r\n    { label: t('exports.formats.pdf'), value: 'pdf' },\r\n  ]);\r\n\r\n  // Helper functions\r\n  const getStatusColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'draft':\r\n        return 'grey';\r\n      case 'submitted':\r\n        return 'info';\r\n      case 'confirmed':\r\n        return 'positive';\r\n      case 'shipped':\r\n        return 'purple';\r\n      case 'delivered':\r\n        return 'green';\r\n      case 'cancelled':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  const getStatusTextColor = (status: string): string => {\r\n    return 'white';\r\n  };\r\n\r\n  const formatDate = (dateString: string): string => {\r\n    if (!dateString) {\r\n      return '-';\r\n    }\r\n    return date.formatDate(dateString, 'DD/MM/YYYY');\r\n  };\r\n\r\n  const formatCurrency = (amount: number): string => {\r\n    if (!amount) {\r\n      return '€0,00';\r\n    }\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(amount);\r\n  };\r\n\r\n  // Methods\r\n  const refreshOrders = async () => {\r\n    await loadOrders();\r\n  };\r\n\r\n  const loadOrders = async () => {\r\n    try {\r\n      loading.value = true;\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .select(\r\n          `\r\n        *,\r\n        supplier:suppliers(name)\r\n      `\r\n        )\r\n        .order('order_date', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      orders.value = (data || []).map((order, index) => ({\r\n        ...order,\r\n        supplier_name: order.supplier?.name || 'Unknown',\r\n        order_number:\r\n          order.order_number || `ORD-${String(index + 1).padStart(4, '0')}`,\r\n      }));\r\n    } catch (error: any) {\r\n      console.error('Failed to load orders:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('orders.loadError'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const createNewOrder = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('common.comingSoon'),\r\n    });\r\n  };\r\n\r\n  const viewOrder = (order: any) => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('orders.viewOrderNotImplemented'),\r\n    });\r\n  };\r\n\r\n  const editOrder = (order: any) => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('orders.editOrderNotImplemented'),\r\n    });\r\n  };\r\n\r\n  const downloadOrder = (order: any) => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('orders.downloadOrderNotImplemented'),\r\n    });\r\n  };\r\n\r\n  const bulkExport = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('orders.bulkExportNotImplemented'),\r\n    });\r\n  };\r\n\r\n  const bulkEmail = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('orders.bulkEmailNotImplemented'),\r\n    });\r\n  };\r\n\r\n  const performExport = async () => {\r\n    try {\r\n      exporting.value = true;\r\n\r\n      // Simulate export process\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('orders.export.exportSuccess'),\r\n      });\r\n\r\n      showExportDialog.value = false;\r\n    } catch (error: any) {\r\n      console.error('Export failed:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('orders.export.exportError'),\r\n      });\r\n    } finally {\r\n      exporting.value = false;\r\n    }\r\n  };\r\n\r\n  // onTableRequest is now provided by useTableSorting composable\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    await loadOrders();\r\n\r\n    // Initialize filter values with defaults\r\n    if (ordersFilterPreset.defaultFilters) {\r\n      filterValues.value = { ...ordersFilterPreset.defaultFilters };\r\n    }\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .filters-section {\r\n    .orders-filter-panel {\r\n      // Custom styling for the FilterPanel in orders page\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\ProductsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 16,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 31,
        "fix": { "range": [346, 398], "text": ":loading=\"loading\"\r\n            @click=\"refreshData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [346, 435],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"refreshData\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 26,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 26,
        "endColumn": 23,
        "fix": { "range": [668, 724], "text": "unelevated\r\n            @click=\"showCreateProductDialog\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 27,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 27,
        "endColumn": 20,
        "fix": {
          "range": [668, 745],
          "text": "no-caps\r\n            @click=\"showCreateProductDialog\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 28,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 38,
        "fix": {
          "range": [668, 784],
          "text": "class=\"app-btn-secondary\"\r\n            @click=\"showCreateProductDialog\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 34,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 34,
        "endColumn": 44,
        "fix": {
          "range": [918, 993],
          "text": ":disable=\"cartItemsCount === 0\"\r\n            @click=\"showCartDialog = true\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 35,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 35,
        "endColumn": 23,
        "fix": {
          "range": [918, 1017],
          "text": "unelevated\r\n            @click=\"showCartDialog = true\"\r\n            :disable=\"cartItemsCount === 0\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 36,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 36,
        "endColumn": 20,
        "fix": {
          "range": [918, 1038],
          "text": "no-caps\r\n            @click=\"showCartDialog = true\"\r\n            :disable=\"cartItemsCount === 0\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 37,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 37,
        "endColumn": 36,
        "fix": {
          "range": [918, 1075],
          "text": "class=\"app-btn-primary\"\r\n            @click=\"showCartDialog = true\"\r\n            :disable=\"cartItemsCount === 0\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 55,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 55,
        "endColumn": 33,
        "fix": {
          "range": [1487, 1551],
          "text": "v-model=\"filterValues\"\r\n          :preset=\"productsFilterPreset\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 59,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 59,
        "endColumn": 29,
        "fix": { "range": [1641, 1697], "text": ":loading=\"loading\"\r\n          @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 60,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 60,
        "endColumn": 22,
        "fix": {
          "range": [1641, 1720],
          "text": "collapsible\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 61,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 61,
        "endColumn": 40,
        "fix": {
          "range": [1641, 1761],
          "text": "class=\"products-filter-panel\"\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loading\"\r\n          collapsible"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 409,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 409,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13652, 13655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13652, 13655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 409,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 409,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13666, 13669], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13666, 13669], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 756,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 756,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23471, 23474], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23471, 23474], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 771,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 771,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23896, 23899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23896, 23899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 823,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 823,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25332, 25335], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25332, 25335], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 832,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 832,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25601, 25604], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25601, 25604], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 13,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('productsPage.title')\"\r\n        :subtitle=\"$t('productsPage.subtitle')\"\r\n        icon=\"inventory_2\"\r\n      >\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshData\"\r\n            :loading=\"loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            v-if=\"canCreate\"\r\n            icon=\"add\"\r\n            :label=\"$t('products.createProduct')\"\r\n            @click=\"showCreateProductDialog\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-secondary\"\r\n          />\r\n          <q-btn\r\n            icon=\"add_shopping_cart\"\r\n            :label=\"$t('productsPage.viewCart')\"\r\n            @click=\"showCartDialog = true\"\r\n            :disable=\"cartItemsCount === 0\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-primary\"\r\n          >\r\n            <q-badge\r\n              v-if=\"cartItemsCount > 0\"\r\n              color=\"red\"\r\n              floating\r\n              :label=\"cartItemsCount\"\r\n            />\r\n          </q-btn>\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <div class=\"products-page\">\r\n      <!-- FilterPanel component -->\r\n      <div class=\"filters-section q-mb-lg\">\r\n        <FilterPanel\r\n          :preset=\"productsFilterPreset\"\r\n          v-model=\"filterValues\"\r\n          @change=\"handleFilterChange\"\r\n          @reset=\"handleFilterReset\"\r\n          @clear=\"handleFilterClear\"\r\n          :loading=\"loading\"\r\n          collapsible\r\n          class=\"products-filter-panel\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Smart Products Table -->\r\n      <div class=\"products-table-container\">\r\n        <SmartTable\r\n          :data=\"products\"\r\n          :columns=\"tableColumns\"\r\n          :config=\"smartTableConfig\"\r\n          :show-strategy-indicator=\"isDevelopment\"\r\n          :show-performance-info=\"isDevelopment\"\r\n          row-key=\"id\"\r\n          :rows-per-page-options=\"[25, 50, 100]\"\r\n          @strategy-changed=\"onStrategyChanged\"\r\n        >\r\n          <!-- Loading -->\r\n          <template #loading>\r\n            <q-inner-loading showing color=\"primary\" />\r\n          </template>\r\n\r\n          <!-- No Data -->\r\n          <template #no-data>\r\n            <div class=\"full-width row flex-center q-gutter-sm\">\r\n              <q-icon size=\"2em\" name=\"sentiment_dissatisfied\" />\r\n              <span>{{ $t('productsPage.noProductsFound') }}</span>\r\n            </div>\r\n          </template>\r\n\r\n          <!-- SKU Cell -->\r\n          <template #body-cell-sku=\"props\">\r\n            <q-td :props=\"props\">\r\n              <code class=\"sku-code\">{{ props.row.sku || '-' }}</code>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Stock Status Cell -->\r\n          <template #body-cell-stock_status=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-chip\r\n                :color=\"getStockStatusColor(props.row.stock_status)\"\r\n                :text-color=\"getStockStatusTextColor(props.row.stock_status)\"\r\n                size=\"sm\"\r\n                dense\r\n              >\r\n                {{ $t(`productsPage.stockStatus.${props.row.stock_status}`) }}\r\n              </q-chip>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- GS1 Status Cell -->\r\n          <template #body-cell-gs1_status=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-chip\r\n                :color=\"\r\n                  props.row.gs1_status === 'complete' ? 'positive' : 'orange'\r\n                \"\r\n                text-color=\"white\"\r\n                size=\"sm\"\r\n                dense\r\n              >\r\n                {{ $t(`productsPage.gs1Status.${props.row.gs1_status}`) }}\r\n              </q-chip>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Price Cell -->\r\n          <template #body-cell-price=\"props\">\r\n            <q-td :props=\"props\" class=\"price-info\">\r\n              <div class=\"price-value\">\r\n                <span v-if=\"props.row.price\" class=\"price-amount\">\r\n                  € {{ props.row.price.toFixed(2) }}\r\n                </span>\r\n                <span v-else class=\"no-price\">-</span>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Batch Status Cell -->\r\n          <template #body-cell-batch_status=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-chip\r\n                :color=\"\r\n                  props.row.batch_status === 'batch_tracked' ? 'info' : 'grey'\r\n                \"\r\n                text-color=\"white\"\r\n                size=\"sm\"\r\n                dense\r\n              >\r\n                {{ $t(`productsPage.batchStatus.${props.row.batch_status}`) }}\r\n              </q-chip>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Actions Cell -->\r\n          <template #body-cell-actions=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"action-buttons\">\r\n                <q-btn\r\n                  size=\"sm\"\r\n                  flat\r\n                  dense\r\n                  round\r\n                  icon=\"visibility\"\r\n                  color=\"primary\"\r\n                  @click=\"showProductDetails(props.row)\"\r\n                >\r\n                  <q-tooltip>{{ $t('productsPage.viewDetails') }}</q-tooltip>\r\n                </q-btn>\r\n                <q-btn\r\n                  v-if=\"canEdit\"\r\n                  size=\"sm\"\r\n                  flat\r\n                  dense\r\n                  round\r\n                  icon=\"edit\"\r\n                  color=\"warning\"\r\n                  @click=\"editProduct(props.row)\"\r\n                >\r\n                  <q-tooltip>{{ $t('products.editProduct') }}</q-tooltip>\r\n                </q-btn>\r\n                <q-btn\r\n                  v-if=\"canDelete\"\r\n                  size=\"sm\"\r\n                  flat\r\n                  dense\r\n                  round\r\n                  icon=\"delete\"\r\n                  color=\"negative\"\r\n                  @click=\"deleteProduct(props.row)\"\r\n                >\r\n                  <q-tooltip>{{ $t('products.deleteProduct') }}</q-tooltip>\r\n                </q-btn>\r\n                <q-btn\r\n                  size=\"sm\"\r\n                  flat\r\n                  dense\r\n                  round\r\n                  icon=\"add_shopping_cart\"\r\n                  color=\"positive\"\r\n                  @click=\"handleAddToCart(props.row)\"\r\n                >\r\n                  <q-tooltip>{{ $t('productsPage.addToCart') }}</q-tooltip>\r\n                </q-btn>\r\n                <q-btn\r\n                  size=\"sm\"\r\n                  flat\r\n                  dense\r\n                  round\r\n                  icon=\"list_alt\"\r\n                  color=\"orange\"\r\n                  @click=\"handleAddToOrderList(props.row)\"\r\n                >\r\n                  <q-tooltip>{{ $t('productsPage.addToOrderList') }}</q-tooltip>\r\n                </q-btn>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Row with click handler for expansion -->\r\n          <template #body-cell-name=\"props\">\r\n            <q-td\r\n              :props=\"props\"\r\n              class=\"product-name-cell cursor-pointer\"\r\n              @click=\"toggleRowExpansion(props.row.id)\"\r\n            >\r\n              <div class=\"product-info\">\r\n                <div class=\"product-name\">{{ props.row.name }}</div>\r\n                <div v-if=\"props.row.brand\" class=\"product-brand\">\r\n                  {{ props.row.brand }}\r\n                </div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n        </SmartTable>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Product Details Dialog -->\r\n    <ProductDetailsDialog\r\n      v-model=\"showDetailsDialog\"\r\n      :product=\"selectedProduct\"\r\n      @add-to-cart=\"handleAddToCart\"\r\n      @add-to-order-list=\"handleAddToOrderList\"\r\n    />\r\n\r\n    <!-- Shopping Cart Dialog -->\r\n    <ShoppingCartDialog\r\n      v-model=\"showCartDialog\"\r\n      :cart-items=\"cart\"\r\n      :cart-total=\"cartTotal\"\r\n      @update-quantity=\"updateCartItemQuantity\"\r\n      @remove-item=\"removeFromCart\"\r\n      @clear-cart=\"clearCart\"\r\n      @checkout=\"handleCheckout\"\r\n    />\r\n\r\n    <!-- Order List Dialog -->\r\n    <OrderListDialog\r\n      v-model=\"showOrderListDialog\"\r\n      :order-lists=\"orderLists\"\r\n      :selected-product=\"selectedProduct\"\r\n      @create-order-list=\"handleCreateOrderList\"\r\n      @add-to-existing=\"handleAddToExistingOrderList\"\r\n    />\r\n\r\n    <!-- GTIN Barcode Scanner -->\r\n    <BarcodeScanner v-model=\"showGtinScanner\" @scan=\"handleGtinScan\" />\r\n\r\n    <!-- Advanced Search Dialog -->\r\n    <AdvancedSearchDialog\r\n      v-model=\"showAdvancedSearch\"\r\n      :current-filters=\"filters\"\r\n      :country-options=\"countryOptions\"\r\n      :gpc-options=\"gpcOptions\"\r\n      :category-options=\"categoryOptions\"\r\n      :supplier-options=\"supplierOptions\"\r\n      :stock-status-options=\"stockStatusOptions\"\r\n      :lifecycle-options=\"lifecycleOptions\"\r\n      :results-count=\"searchResultsCount\"\r\n      @search=\"handleAdvancedSearch\"\r\n      @open-scanner=\"showGtinScanner = true\"\r\n      @preview=\"handleSearchPreview\"\r\n    />\r\n\r\n    <!-- Product Form Dialog -->\r\n    <ProductFormDialog\r\n      v-model=\"showProductFormDialog\"\r\n      :product=\"selectedProductForEdit\"\r\n      @saved=\"onProductSaved\"\r\n      @scan-barcode=\"showGtinScanner = true\"\r\n    />\r\n\r\n    <!-- Delete Confirmation Dialog -->\r\n    <ConfirmDialog\r\n      v-model=\"showDeleteDialog\"\r\n      type=\"danger\"\r\n      :title=\"$t('products.deleteConfirm')\"\r\n      :message=\"$t('products.deleteMessage', { name: productToDelete?.name })\"\r\n      :loading=\"deleting\"\r\n      @confirm=\"confirmDelete\"\r\n      @cancel=\"showDeleteDialog = false\"\r\n    />\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, watch, defineAsyncComponent } from 'vue';\r\n  import { storeToRefs } from 'pinia';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useProductsStore } from 'src/stores/products';\r\n  import { useOrderListsStore } from 'src/stores/orderLists';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\r\n  import ConfirmDialog from 'src/components/base/ConfirmDialog.vue';\r\n  import SmartTable from 'src/components/tables/SmartTable.vue';\r\n  // ✅ PERFORMANCE OPTIMIZATION: Dynamic imports for heavy dialogs\r\n\r\n  const ProductDetailsDialog = defineAsyncComponent(\r\n    () => import('src/components/products/ProductDetailsDialog.vue')\r\n  );\r\n  const ShoppingCartDialog = defineAsyncComponent(\r\n    () => import('src/components/products/ShoppingCartDialog.vue')\r\n  );\r\n  const OrderListDialog = defineAsyncComponent(\r\n    () => import('src/components/products/OrderListDialog.vue')\r\n  );\r\n  const BarcodeScanner = defineAsyncComponent(\r\n    () => import('src/components/BarcodeScanner.vue')\r\n  );\r\n  const AdvancedSearchDialog = defineAsyncComponent(\r\n    () => import('src/components/products/AdvancedSearchDialog.vue')\r\n  );\r\n  const ProductFormDialog = defineAsyncComponent(\r\n    () => import('src/components/products/ProductFormDialog.vue')\r\n  );\r\n\r\n  import { productsFilterPreset } from '@/presets/filters/products';\r\n  import { usePermissions } from 'src/services/permissions';\r\n  import type {\r\n    ProductWithStock,\r\n    ProductBatchSummary,\r\n  } from 'src/types/inventory';\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from '@/types/filters';\r\n\r\n  const { t, locale } = useI18n();\r\n  const $q = useQuasar();\r\n  const productsStore = useProductsStore();\r\n  const orderListsStore = useOrderListsStore();\r\n  const authStore = useAuthStore();\r\n  const permissions = usePermissions();\r\n\r\n  // Permission checks - TODO: Connect to proper auth system\r\n  const canCreate = ref(true);\r\n  const canEdit = ref(true);\r\n  const canDelete = ref(true);\r\n\r\n  // Reactive data\r\n  const selectedProduct = ref<ProductWithStock | null>(null);\r\n  const showDetailsDialog = ref(false);\r\n  const showCartDialog = ref(false);\r\n  const showOrderListDialog = ref(false);\r\n  const showGtinScanner = ref(false);\r\n  const showAdvancedSearch = ref(false);\r\n  const showProductFormDialog = ref(false);\r\n  const showDeleteDialog = ref(false);\r\n  const selectedProductForEdit = ref<ProductWithStock | null>(null);\r\n  const productToDelete = ref<ProductWithStock | null>(null);\r\n  const deleting = ref(false);\r\n  const expandedRows = ref<string[]>([]);\r\n  const searchResultsCount = ref<number | null>(null);\r\n\r\n  // New filter state for FilterPanel\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Store getters - using storeToRefs for reactivity\r\n  const {\r\n    products,\r\n    loading,\r\n    cart,\r\n    cartItemsCount,\r\n    cartTotal,\r\n    orderLists,\r\n    filters,\r\n    availableCategories,\r\n    availableCountries,\r\n    availableGpcCodes,\r\n    availableLifecycleStatuses,\r\n    availableSuppliers,\r\n    productStats,\r\n  } = storeToRefs(productsStore);\r\n\r\n  // Development mode indicator\r\n  const isDevelopment = computed(() => process.env.NODE_ENV === 'development');\r\n\r\n  // Smart table configuration for large datasets\r\n  const smartTableConfig = computed(() => ({\r\n    clientSideThreshold: 1000, // Switch to server-side at 1000 products\r\n    virtualizationThreshold: 5000, // Switch to virtualization at 5000 products\r\n    debounceMs: 300,\r\n    itemHeight: 60,\r\n    serverSideLoader: async (pagination: any, filters: any) => {\r\n      // Server-side loading for large datasets\r\n      const practiceId = authStore.clinicId;\r\n      if (!practiceId) return { data: [], totalCount: 0 };\r\n\r\n      const result = await productsStore.fetchProductsPaginated({\r\n        ...pagination,\r\n        filters,\r\n        practiceId,\r\n      });\r\n\r\n      return {\r\n        data: result.products,\r\n        totalCount: result.total,\r\n      };\r\n    },\r\n  }));\r\n\r\n  // Handle strategy changes\r\n  const onStrategyChanged = (strategy: string) => {\r\n    console.log(`Products table strategy changed to: ${strategy}`);\r\n    $q.notify({\r\n      type: 'info',\r\n      message: `Table optimized for ${strategy} mode`,\r\n      timeout: 2000,\r\n    });\r\n  };\r\n\r\n  // Table columns configuration with enhanced sorting support\r\n  const tableColumns = computed(() => [\r\n    {\r\n      name: 'name',\r\n      label: t('productsPage.table.name'),\r\n      field: 'name',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      style: 'width: 250px',\r\n      classes: 'col-name',\r\n      headerClasses: 'col-name',\r\n    },\r\n    {\r\n      name: 'sku',\r\n      label: t('productsPage.table.sku'),\r\n      field: 'sku',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      style: 'width: 120px',\r\n    },\r\n    {\r\n      name: 'stock_status',\r\n      label: t('productsPage.table.stockStatus'),\r\n      field: 'stock_status',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      style: 'width: 150px',\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'gs1_status',\r\n      label: t('productsPage.table.gs1Status'),\r\n      field: 'gs1_status',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      style: 'width: 140px',\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'price',\r\n      label: t('productsPage.table.price'),\r\n      field: 'lowest_price',\r\n      align: 'right' as const,\r\n      sortable: true,\r\n      style: 'width: 120px',\r\n      classes: 'col-numeric',\r\n      headerClasses: 'col-numeric',\r\n    },\r\n    {\r\n      name: 'batch_status',\r\n      label: t('productsPage.table.stockType'),\r\n      field: 'batch_status',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      style: 'width: 140px',\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('productsPage.table.actions'),\r\n      field: '',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      style: 'width: 180px',\r\n      classes: 'col-actions',\r\n      headerClasses: 'col-actions',\r\n    },\r\n  ]);\r\n\r\n  // Legacy filter options for compatibility\r\n  const categoryOptions = computed(\r\n    () =>\r\n      availableCategories.value?.map((cat: string) => ({\r\n        label: cat,\r\n        value: cat,\r\n      })) ?? []\r\n  );\r\n\r\n  const stockStatusOptions = computed(() => [\r\n    { label: t('productsPage.stockStatus.in_stock'), value: 'in_stock' },\r\n    { label: t('productsPage.stockStatus.low_stock'), value: 'low_stock' },\r\n    {\r\n      label: t('productsPage.stockStatus.out_of_stock'),\r\n      value: 'out_of_stock',\r\n    },\r\n  ]);\r\n\r\n  const countryOptions = computed(\r\n    () =>\r\n      availableCountries.value?.map((country: string) => ({\r\n        label: `${getCountryFlag(country)} ${getCountryName(country)}`,\r\n        value: country,\r\n      })) ?? []\r\n  );\r\n\r\n  const gpcOptions = computed(\r\n    () =>\r\n      availableGpcCodes.value?.map((gpc: string) => ({\r\n        label: `${gpc} - ${getGpcDescription(gpc)}`,\r\n        value: gpc,\r\n      })) ?? []\r\n  );\r\n\r\n  const lifecycleOptions = computed(() => [\r\n    { label: t('productsPage.lifecycleStatus.active'), value: 'active' },\r\n    {\r\n      label: t('productsPage.lifecycleStatus.discontinued'),\r\n      value: 'discontinued',\r\n    },\r\n    { label: t('productsPage.lifecycleStatus.new'), value: 'new' },\r\n    { label: t('productsPage.lifecycleStatus.phase_out'), value: 'phase_out' },\r\n  ]);\r\n\r\n  const supplierOptions = computed(() =>\r\n    availableSuppliers.value.map((supplier: string) => ({\r\n      label: supplier,\r\n      value: supplier,\r\n    }))\r\n  );\r\n\r\n  // Filter event handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    // Convert FilterPanel values to store filter format\r\n    const storeFilters = convertFilterValuesToStoreFormat(filterValues.value);\r\n    updateFilters(storeFilters);\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    // Reset to default values\r\n    filterValues.value = {\r\n      ...productsFilterPreset.defaultFilters,\r\n    } as FilterValues;\r\n    productsStore.clearFilters();\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    // Clear all filters\r\n    filterValues.value = {};\r\n    productsStore.clearFilters();\r\n  };\r\n\r\n  // Helper to convert FilterPanel values to store format\r\n  const convertFilterValuesToStoreFormat = (values: FilterValues) => {\r\n    return {\r\n      search: String(values.search || ''),\r\n      category: String(values.category || ''),\r\n      supplier: String(values.supplier || ''),\r\n      stock_status: String(values.stock_status || 'all'),\r\n      gtin: String(values.gtin || ''),\r\n      country_of_origin: String(values.country_of_origin || ''),\r\n      gpc_brick_code: String(values.gpc_brick_code || ''),\r\n      lifecycle_status: String(values.lifecycle_status || ''),\r\n      orderable_only: Boolean(values.orderable_only || false),\r\n    };\r\n  };\r\n\r\n  // Helper functions\r\n  const getStockStatusColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'in_stock':\r\n        return 'positive';\r\n      case 'low_stock':\r\n        return 'warning';\r\n      case 'out_of_stock':\r\n        return 'negative';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  const getStockStatusTextColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'in_stock':\r\n        return 'white';\r\n      case 'low_stock':\r\n        return 'black';\r\n      case 'out_of_stock':\r\n        return 'white';\r\n      default:\r\n        return 'black';\r\n    }\r\n  };\r\n\r\n  const getStockStatusLabel = (status: string): string => {\r\n    switch (status) {\r\n      case 'in_stock':\r\n        return t('productsPage.stockStatus.in_stock');\r\n      case 'low_stock':\r\n        return t('productsPage.stockStatus.low_stock');\r\n      case 'out_of_stock':\r\n        return t('productsPage.stockStatus.out_of_stock');\r\n      default:\r\n        return t('productsPage.stockStatus.unavailable');\r\n    }\r\n  };\r\n\r\n  const getCountryFlag = (countryCode: string): string => {\r\n    // Simple flag implementation - could be enhanced\r\n    return '🏳️';\r\n  };\r\n\r\n  const getCountryName = (countryCode: string): string => {\r\n    // Simple country name implementation\r\n    return countryCode;\r\n  };\r\n\r\n  const getGpcDescription = (gpcCode: string): string => {\r\n    // Simple GPC description implementation\r\n    return 'Product Classification';\r\n  };\r\n\r\n  const isValidGTIN = (value: string): boolean => {\r\n    return /^\\d{8,14}$/.test(value);\r\n  };\r\n\r\n  const handleGtinScan = (gtin: string) => {\r\n    // Update filter values\r\n    filterValues.value = { ...filterValues.value, gtin };\r\n\r\n    // Check if we found a product with this GTIN\r\n    const gtinMatch = filteredProducts.value.find(\r\n      (product: ProductWithStock) => product.gtin === gtin\r\n    );\r\n    if (gtinMatch) {\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('productsPage.gtinFound', { product: gtinMatch.name }),\r\n        icon: 'qr_code_2',\r\n        position: 'top',\r\n        actions: [\r\n          {\r\n            label: t('productsPage.viewProduct'),\r\n            color: 'white',\r\n            handler: () => showProductDetails(gtinMatch),\r\n          },\r\n        ],\r\n      });\r\n    } else {\r\n      $q.notify({\r\n        type: 'warning',\r\n        message: t('productsPage.gtinNotFound', { gtin }),\r\n        icon: 'search_off',\r\n        position: 'top',\r\n      });\r\n    }\r\n  };\r\n\r\n  const toggleRowExpansion = (productId: string) => {\r\n    const index = expandedRows.value.indexOf(productId);\r\n    if (index > -1) {\r\n      expandedRows.value.splice(index, 1);\r\n    } else {\r\n      expandedRows.value.push(productId);\r\n    }\r\n  };\r\n\r\n  const showProductDetails = (product: ProductWithStock) => {\r\n    selectedProduct.value = product;\r\n    showDetailsDialog.value = true;\r\n  };\r\n\r\n  const handleAddToCart = (product: ProductWithStock) => {\r\n    try {\r\n      productsStore.addToCart(product, 1);\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('productsPage.addedToCart', { productName: product.name }),\r\n        position: 'top',\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('productsPage.cartAddError'),\r\n        position: 'top',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAddToOrderList = (product: ProductWithStock) => {\r\n    selectedProduct.value = product;\r\n    showOrderListDialog.value = true;\r\n  };\r\n\r\n  const refreshData = async () => {\r\n    try {\r\n      const practiceId = authStore.clinicId;\r\n      if (!practiceId) {\r\n        return;\r\n      }\r\n\r\n      await productsStore.refreshData(practiceId);\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('productsPage.dataRefreshed'),\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('productsPage.productLoadError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Store actions\r\n  const { updateFilters } = productsStore;\r\n  const { updateCartItemQuantity, removeFromCart, clearCart } = productsStore;\r\n  const handleCreateOrderList = orderListsStore.createOrderList;\r\n  const handleAddToExistingOrderList = orderListsStore.addOrderListItem;\r\n\r\n  const handleCheckout = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('common.comingSoon'),\r\n    });\r\n  };\r\n\r\n  const handleAdvancedSearch = (criteria: any) => {\r\n    // Apply advanced search criteria to filters\r\n    Object.assign(filters, criteria);\r\n\r\n    // Update search results count\r\n    searchResultsCount.value = filteredProducts.value.length;\r\n\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('productsPage.advancedSearch.resultsFound', {\r\n        count: filteredProducts.value.length,\r\n      }),\r\n    });\r\n  };\r\n\r\n  const handleSearchPreview = (criteria: any) => {\r\n    // For preview, we'll simulate the search without actually applying filters\r\n    const mockCount = Math.floor(Math.random() * products.value.length);\r\n    searchResultsCount.value = mockCount;\r\n  };\r\n\r\n  // Product CRUD Methods\r\n  const showCreateProductDialog = () => {\r\n    selectedProductForEdit.value = null;\r\n    showProductFormDialog.value = true;\r\n  };\r\n\r\n  const editProduct = (product: ProductWithStock) => {\r\n    selectedProductForEdit.value = product;\r\n    showProductFormDialog.value = true;\r\n  };\r\n\r\n  const deleteProduct = (product: ProductWithStock) => {\r\n    productToDelete.value = product;\r\n    showDeleteDialog.value = true;\r\n  };\r\n\r\n  const confirmDelete = async () => {\r\n    if (!productToDelete.value) {\r\n      return;\r\n    }\r\n\r\n    deleting.value = true;\r\n    try {\r\n      await productsStore.deleteProduct(productToDelete.value.id);\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('products.deleted', { name: productToDelete.value.name }),\r\n      });\r\n\r\n      showDeleteDialog.value = false;\r\n      productToDelete.value = null;\r\n\r\n      // Refresh products list\r\n      await refreshData();\r\n    } catch (error) {\r\n      console.error('Error deleting product:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('products.deleteError'),\r\n      });\r\n    } finally {\r\n      deleting.value = false;\r\n    }\r\n  };\r\n\r\n  const onProductSaved = async (product: any) => {\r\n    showProductFormDialog.value = false;\r\n    selectedProductForEdit.value = null;\r\n\r\n    // Refresh products list to show the changes\r\n    await refreshData();\r\n  };\r\n\r\n  // Table request handler for sorting and pagination\r\n  const onTableRequest = (props: any) => {\r\n    // Use the composable's handler and then update rowsNumber\r\n    tableRequestHandler(props);\r\n    pagination.value.rowsNumber = filteredProducts.value.length;\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (practiceId) {\r\n      // Clear any existing filters first\r\n      productsStore.clearFilters();\r\n\r\n      await productsStore.fetchProducts(practiceId);\r\n\r\n      // If no products loaded on first try, wait and retry once\r\n      if (products.value.length === 0) {\r\n        // Retrying product loading...\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        await productsStore.fetchProducts(practiceId);\r\n      }\r\n    }\r\n\r\n    // Initialize filter values with defaults\r\n    if (productsFilterPreset.defaultFilters) {\r\n      filterValues.value = {\r\n        ...productsFilterPreset.defaultFilters,\r\n      } as FilterValues;\r\n    }\r\n\r\n    // Check user permissions\r\n    try {\r\n      canCreate.value = await permissions.canCreateProducts();\r\n      canEdit.value = await permissions.canEditProducts();\r\n      canDelete.value = await permissions.canDeleteProducts();\r\n    } catch (error) {\r\n      console.error('Error checking permissions:', error);\r\n      // Default to no permissions on error\r\n      canCreate.value = false;\r\n      canEdit.value = false;\r\n      canDelete.value = false;\r\n    }\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .products-page {\r\n    .filters-section {\r\n      margin-bottom: 1.5rem;\r\n\r\n      .products-filter-panel {\r\n        background: var(--q-card-background);\r\n        border-radius: 8px;\r\n      }\r\n    }\r\n\r\n    .products-table-container {\r\n      // Minimal product-specific styling - main table styling handled by global medical-table class\r\n      .product-info {\r\n        .product-name {\r\n          font-weight: var(--font-weight-medium);\r\n          color: var(--text-primary);\r\n        }\r\n\r\n        .product-brand {\r\n          font-size: var(--text-sm);\r\n          color: var(--text-secondary);\r\n          margin-top: var(--space-1);\r\n        }\r\n      }\r\n\r\n      .sku-code {\r\n        font-family: var(--font-family-mono);\r\n        background: var(--neutral-100);\r\n        padding: var(--space-1) var(--space-2);\r\n        border-radius: var(--radius-sm);\r\n        font-size: var(--text-sm);\r\n        color: var(--text-secondary);\r\n      }\r\n\r\n      .price-value {\r\n        font-weight: var(--font-weight-semibold);\r\n        color: var(--brand-primary);\r\n      }\r\n\r\n      .action-buttons {\r\n        display: flex;\r\n        gap: var(--space-1);\r\n        justify-content: center;\r\n\r\n        .q-btn {\r\n          min-width: 32px;\r\n          min-height: 32px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Mobile responsiveness\r\n  @media (max-width: 768px) {\r\n    .products-page {\r\n      .products-table-container {\r\n        overflow-x: auto;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\SettingsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 20,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 20,
        "endColumn": 31,
        "fix": { "range": [495, 548], "text": ":loading=\"loading\"\r\n            @click=\"loadSettings\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 21,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 21,
        "endColumn": 36,
        "fix": {
          "range": [495, 585],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"loadSettings\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 29,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 29,
        "endColumn": 30,
        "fix": { "range": [788, 840], "text": ":loading=\"saving\"\r\n            @click=\"saveSettings\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 30,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 30,
        "endColumn": 23,
        "fix": {
          "range": [788, 864],
          "text": "unelevated\r\n            @click=\"saveSettings\"\r\n            :loading=\"saving\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 31,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 31,
        "endColumn": 20,
        "fix": {
          "range": [788, 885],
          "text": "no-caps\r\n            @click=\"saveSettings\"\r\n            :loading=\"saving\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 32,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 32,
        "endColumn": 36,
        "fix": {
          "range": [788, 922],
          "text": "class=\"app-btn-success\"\r\n            @click=\"saveSettings\"\r\n            :loading=\"saving\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 56,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 56,
        "endColumn": 39,
        "fix": { "range": [1696, 1710], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 68,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 68,
        "endColumn": 39,
        "fix": { "range": [2095, 2109], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 80,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 80,
        "endColumn": 39,
        "fix": { "range": [2497, 2511], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"id\" should go before \"class\".",
        "line": 105,
        "column": 46,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 105,
        "endColumn": 66,
        "fix": { "range": [3278, 3320], "text": "id=\"dark-mode-label\" class=\"setting-label\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"color\" should go before \"@update:model-value\".",
        "line": 116,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 116,
        "endColumn": 36,
        "fix": {
          "range": [3703, 3776],
          "text": "color=\"primary\"\r\n                    @update:model-value=\"toggleDarkMode\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@update:model-value\".",
        "line": 117,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 117,
        "endColumn": 30,
        "fix": {
          "range": [3703, 3807],
          "text": "size=\"lg\"\r\n                    @update:model-value=\"toggleDarkMode\"\r\n                    color=\"primary\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-labelledby\" should go before \"@update:model-value\".",
        "line": 118,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 118,
        "endColumn": 57,
        "fix": {
          "range": [3703, 3865],
          "text": ":aria-labelledby=\"'dark-mode-label'\"\r\n                    @update:model-value=\"toggleDarkMode\"\r\n                    color=\"primary\"\r\n                    size=\"lg\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-describedby\" should go before \"@update:model-value\".",
        "line": 119,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 119,
        "endColumn": 64,
        "fix": {
          "range": [3703, 3930],
          "text": ":aria-describedby=\"'dark-mode-description'\"\r\n                    @update:model-value=\"toggleDarkMode\"\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    :aria-labelledby=\"'dark-mode-label'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"id\" should go before \"class\".",
        "line": 139,
        "column": 46,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 139,
        "endColumn": 62,
        "fix": { "range": [4639, 4677], "text": "id=\"theme-label\" class=\"setting-label\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"option-value\" should go before \"@update:model-value\".",
        "line": 151,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 151,
        "endColumn": 41,
        "fix": {
          "range": [5119, 5194],
          "text": "option-value=\"value\"\r\n                    @update:model-value=\"changeTheme\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"option-label\" should go before \"@update:model-value\".",
        "line": 152,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 152,
        "endColumn": 41,
        "fix": {
          "range": [5119, 5236],
          "text": "option-label=\"label\"\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"emit-value\" should go before \"@update:model-value\".",
        "line": 153,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 153,
        "endColumn": 31,
        "fix": {
          "range": [5119, 5268],
          "text": "emit-value\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"map-options\" should go before \"@update:model-value\".",
        "line": 154,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 154,
        "endColumn": 32,
        "fix": {
          "range": [5119, 5301],
          "text": "map-options\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outlined\" should go before \"@update:model-value\".",
        "line": 155,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 155,
        "endColumn": 29,
        "fix": {
          "range": [5119, 5331],
          "text": "outlined\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value\r\n                    map-options"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"dense\" should go before \"@update:model-value\".",
        "line": 156,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 156,
        "endColumn": 26,
        "fix": {
          "range": [5119, 5358],
          "text": "dense\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value\r\n                    map-options\r\n                    outlined"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"style\" should go before \"@update:model-value\".",
        "line": 157,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 157,
        "endColumn": 41,
        "fix": {
          "range": [5119, 5400],
          "text": "style=\"width: 150px\"\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value\r\n                    map-options\r\n                    outlined\r\n                    dense"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-labelledby\" should go before \"@update:model-value\".",
        "line": 158,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 158,
        "endColumn": 53,
        "fix": {
          "range": [5119, 5454],
          "text": ":aria-labelledby=\"'theme-label'\"\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value\r\n                    map-options\r\n                    outlined\r\n                    dense\r\n                    style=\"width: 150px\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 190,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 190,
        "endColumn": 39,
        "fix": { "range": [6368, 6382], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 205,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 205,
        "endColumn": 39,
        "fix": { "range": [6879, 6893], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 220,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 220,
        "endColumn": 39,
        "fix": { "range": [7385, 7399], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 235,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 235,
        "endColumn": 39,
        "fix": { "range": [7873, 7887], "text": "#prepend" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 27,
    "fixableErrorCount": 0,
    "fixableWarningCount": 27,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('settings.title')\"\r\n        :subtitle=\"$t('settings.manageSettingsSubtitle')\"\r\n        icon=\"tune\"\r\n        :meta=\"[\r\n          { icon: 'person', text: userProfile?.full_name || 'User' },\r\n          { icon: 'domain', text: clinicName },\r\n        ]\"\r\n      >\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"loadSettings\"\r\n            :loading=\"loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            icon=\"save\"\r\n            :label=\"$t('settings.saveSettings')\"\r\n            @click=\"saveSettings\"\r\n            :loading=\"saving\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-success\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- Settings Grid -->\r\n    <div class=\"settings-grid animate-slide-up\">\r\n      <!-- User Profile Settings -->\r\n      <div class=\"settings-section\">\r\n        <BaseCard\r\n          :title=\"$t('settings.profile')\"\r\n          :subtitle=\"$t('settings.profileSubtitle')\"\r\n          icon=\"person\"\r\n          icon-color=\"primary\"\r\n        >\r\n          <div class=\"form-grid\" role=\"group\" aria-labelledby=\"profile-title\">\r\n            <q-input\r\n              v-model=\"userSettings.fullName\"\r\n              :label=\"$t('auth.fullName')\"\r\n              outlined\r\n              readonly\r\n              :aria-label=\"`${$t('auth.fullName')}: ${userSettings.fullName}`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"person\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n\r\n            <q-input\r\n              v-model=\"userSettings.email\"\r\n              :label=\"$t('auth.email')\"\r\n              outlined\r\n              readonly\r\n              :aria-label=\"`${$t('auth.email')}: ${userSettings.email}`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"email\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n\r\n            <q-input\r\n              v-model=\"userSettings.role\"\r\n              :label=\"$t('settings.role')\"\r\n              outlined\r\n              readonly\r\n              :aria-label=\"`${$t('settings.role')}: ${userSettings.role}`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"badge\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n          </div>\r\n        </BaseCard>\r\n      </div>\r\n\r\n      <!-- Appearance Settings -->\r\n      <div class=\"settings-section\">\r\n        <BaseCard\r\n          :title=\"$t('settings.appearanceTitle')\"\r\n          :subtitle=\"$t('settings.appearanceSubtitle')\"\r\n          icon=\"palette\"\r\n          icon-color=\"secondary\"\r\n        >\r\n          <div\r\n            class=\"settings-options\"\r\n            role=\"group\"\r\n            aria-labelledby=\"appearance-title\"\r\n          >\r\n            <!-- Dark Mode Toggle -->\r\n            <BaseCard padding=\"sm\">\r\n              <div class=\"setting-item\">\r\n                <div class=\"setting-info\">\r\n                  <div class=\"setting-label\" id=\"dark-mode-label\">\r\n                    {{ $t('settings.darkMode') }}\r\n                  </div>\r\n                  <div class=\"setting-description\">\r\n                    {{ $t('settings.darkModeDescription') }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"setting-control\">\r\n                  <q-toggle\r\n                    v-model=\"isDarkMode\"\r\n                    @update:model-value=\"toggleDarkMode\"\r\n                    color=\"primary\"\r\n                    size=\"lg\"\r\n                    :aria-labelledby=\"'dark-mode-label'\"\r\n                    :aria-describedby=\"'dark-mode-description'\"\r\n                  />\r\n                  <div id=\"dark-mode-description\" class=\"sr-only\">\r\n                    {{\r\n                      isDarkMode\r\n                        ? $t('settings.darkModeEnabled')\r\n                        : $t('settings.lightModeEnabled')\r\n                    }}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </BaseCard>\r\n\r\n            <!-- Language Setting (hidden for NL-only) -->\r\n            <!-- Removed language selector until multi-locale returns -->\r\n\r\n            <!-- Theme Setting -->\r\n            <BaseCard padding=\"sm\">\r\n              <div class=\"setting-item\">\r\n                <div class=\"setting-info\">\r\n                  <div class=\"setting-label\" id=\"theme-label\">\r\n                    {{ $t('settings.colorSchemeTitle') }}\r\n                  </div>\r\n                  <div class=\"setting-description\">\r\n                    {{ $t('settings.colorSchemeDescription') }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"setting-control\">\r\n                  <q-select\r\n                    v-model=\"selectedTheme\"\r\n                    :options=\"themeOptions\"\r\n                    @update:model-value=\"changeTheme\"\r\n                    option-value=\"value\"\r\n                    option-label=\"label\"\r\n                    emit-value\r\n                    map-options\r\n                    outlined\r\n                    dense\r\n                    style=\"width: 150px\"\r\n                    :aria-labelledby=\"'theme-label'\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </BaseCard>\r\n          </div>\r\n        </BaseCard>\r\n      </div>\r\n\r\n      <!-- Clinic Information -->\r\n      <div class=\"settings-section full-width\">\r\n        <BaseCard\r\n          :title=\"$t('settings.clinic')\"\r\n          :subtitle=\"$t('settings.clinicInfoSubtitle')\"\r\n          icon=\"business\"\r\n          icon-color=\"info\"\r\n        >\r\n          <div\r\n            class=\"clinic-form-grid\"\r\n            role=\"group\"\r\n            aria-labelledby=\"clinic-title\"\r\n          >\r\n            <q-input\r\n              v-model=\"clinicSettings.name\"\r\n              :label=\"$t('settings.clinicName')\"\r\n              outlined\r\n              readonly\r\n              class=\"input-modern\"\r\n              :aria-label=\"`${$t('settings.clinicName')}: ${\r\n                clinicSettings.name\r\n              }`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"business\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n\r\n            <q-input\r\n              v-model=\"clinicSettings.contactEmail\"\r\n              :label=\"$t('settings.contactEmail')\"\r\n              outlined\r\n              readonly\r\n              class=\"input-modern\"\r\n              :aria-label=\"`${$t('settings.contactEmail')}: ${\r\n                clinicSettings.contactEmail\r\n              }`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"email\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n\r\n            <q-input\r\n              v-model=\"clinicSettings.contactPhone\"\r\n              :label=\"$t('settings.phoneNumber')\"\r\n              outlined\r\n              readonly\r\n              class=\"input-modern\"\r\n              :aria-label=\"`${$t('settings.phoneNumber')}: ${\r\n                clinicSettings.contactPhone\r\n              }`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"phone\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n\r\n            <q-input\r\n              v-model=\"clinicSettings.address\"\r\n              :label=\"$t('settings.address')\"\r\n              outlined\r\n              readonly\r\n              class=\"input-modern\"\r\n              :aria-label=\"`${$t('settings.address')}: ${\r\n                clinicSettings.address\r\n              }`\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"location_on\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n          </div>\r\n\r\n          <div class=\"clinic-notice\">\r\n            <AlertCard\r\n              severity=\"info\"\r\n              :title=\"$t('settings.contactSettingsNotice')\"\r\n              padding=\"sm\"\r\n            />\r\n          </div>\r\n        </BaseCard>\r\n      </div>\r\n\r\n      <!-- Notification Settings -->\r\n      <div class=\"settings-section\">\r\n        <BaseCard\r\n          :title=\"$t('settings.notifications')\"\r\n          :subtitle=\"$t('settings.notificationSettingsSubtitle')\"\r\n          icon=\"notifications\"\r\n          icon-color=\"warning\"\r\n        >\r\n          <div class=\"settings-options\">\r\n            <!-- Low Stock Alerts -->\r\n            <BaseCard padding=\"sm\">\r\n              <div class=\"setting-item\">\r\n                <div class=\"setting-info\">\r\n                  <div class=\"setting-label\">\r\n                    {{ $t('settings.stockAlertsLabel') }}\r\n                  </div>\r\n                  <div class=\"setting-description\">\r\n                    {{ $t('settings.stockAlertsDescription') }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"setting-control\">\r\n                  <q-toggle\r\n                    v-model=\"notificationSettings.lowStockAlerts\"\r\n                    color=\"primary\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </BaseCard>\r\n\r\n            <!-- Email Notifications -->\r\n            <BaseCard padding=\"sm\">\r\n              <div class=\"setting-item\">\r\n                <div class=\"setting-info\">\r\n                  <div class=\"setting-label\">\r\n                    {{ $t('settings.emailNotificationsLabel') }}\r\n                  </div>\r\n                  <div class=\"setting-description\">\r\n                    {{ $t('settings.emailNotificationsDescription') }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"setting-control\">\r\n                  <q-toggle\r\n                    v-model=\"notificationSettings.emailNotifications\"\r\n                    color=\"primary\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </BaseCard>\r\n\r\n            <!-- Browser Notifications -->\r\n            <BaseCard padding=\"sm\">\r\n              <div class=\"setting-item\">\r\n                <div class=\"setting-info\">\r\n                  <div class=\"setting-label\">\r\n                    {{ $t('settings.browserNotificationsLabel') }}\r\n                  </div>\r\n                  <div class=\"setting-description\">\r\n                    {{ $t('settings.browserNotificationsDescription') }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"setting-control\">\r\n                  <q-toggle\r\n                    v-model=\"notificationSettings.browserNotifications\"\r\n                    color=\"primary\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </BaseCard>\r\n          </div>\r\n        </BaseCard>\r\n      </div>\r\n\r\n      <!-- System Information -->\r\n      <div class=\"settings-section\">\r\n        <BaseCard\r\n          :title=\"$t('settings.systemInfoTitle')\"\r\n          :subtitle=\"$t('settings.systemInfoSubtitle')\"\r\n          icon=\"info\"\r\n          icon-color=\"info\"\r\n        >\r\n          <div class=\"system-info\">\r\n            <div class=\"info-item\">\r\n              <div class=\"info-label\">{{ $t('settings.versionLabel') }}</div>\r\n              <div class=\"info-value\">1.0.0</div>\r\n            </div>\r\n\r\n            <div class=\"info-item\">\r\n              <div class=\"info-label\">\r\n                {{ $t('settings.lastUpdateLabel') }}\r\n              </div>\r\n              <div class=\"info-value\">\r\n                {{ new Date().toLocaleDateString('nl-NL') }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"info-item\">\r\n              <div class=\"info-label\">{{ $t('settings.supportLabel') }}</div>\r\n              <div class=\"info-value\">\r\n                <a href=\"mailto:support@remcura.com\" class=\"support-link\">\r\n                  support@remcura.com\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </BaseCard>\r\n      </div>\r\n    </div>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import { useThemeManager } from 'src/composables/themeManager';\r\n  import {\r\n    setI18nLanguage,\r\n    getCurrentLocale,\r\n    type SupportedLocale,\r\n  } from 'src/i18n';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\r\n\r\n  const $q = useQuasar();\r\n  const { t } = useI18n();\r\n  const authStore = useAuthStore();\r\n  const clinicStore = useClinicStore();\r\n  const { themeOptions, currentTheme, applyTheme, getCurrentThemeName } =\r\n    useThemeManager();\r\n\r\n  // State\r\n  const saving = ref(false);\r\n  const isDarkMode = ref($q.dark.isActive);\r\n  const selectedTheme = ref(getCurrentThemeName());\r\n\r\n  // Computed properties\r\n  const userProfile = computed(() => authStore.userProfile);\r\n  const clinicName = computed(() => clinicStore.clinic?.name || 'Kliniek');\r\n\r\n  // Form data\r\n  const userSettings = ref({\r\n    fullName: userProfile.value?.full_name || '',\r\n    email: authStore.userEmail || '',\r\n    role: 'Administrator', // This would come from your role system\r\n  });\r\n\r\n  const clinicSettings = ref({\r\n    name: clinicName.value,\r\n    contactEmail: 'contact@example.com',\r\n    contactPhone: '+31 20 123 4567',\r\n    address: 'Voorbeeldstraat 123, Amsterdam',\r\n  });\r\n\r\n  const notificationSettings = ref({\r\n    lowStockAlerts: true,\r\n    emailNotifications: true,\r\n    browserNotifications: false,\r\n  });\r\n\r\n  // Methods\r\n  const toggleDarkMode = (value: boolean) => {\r\n    $q.dark.set(value);\r\n\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: value\r\n        ? t('settings.darkModeEnabled')\r\n        : t('settings.lightModeEnabled'),\r\n      position: 'top-right',\r\n      timeout: 2000,\r\n    });\r\n  };\r\n\r\n  const changeTheme = (themeName: string) => {\r\n    selectedTheme.value = themeName;\r\n    applyTheme(themeName);\r\n\r\n    const themeLabel =\r\n      themeOptions.value.find(option => option.value === themeName)?.label ||\r\n      themeName;\r\n    $q.notify({\r\n      type: 'positive',\r\n      message: t('settings.colorSchemeTitle') + `: ${themeLabel} toegepast`,\r\n      position: 'top-right',\r\n      timeout: 2000,\r\n    });\r\n  };\r\n\r\n  const saveSettings = async () => {\r\n    saving.value = true;\r\n\r\n    try {\r\n      // Here you would save the settings to your backend/store\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('settings.settingsSaved'),\r\n        position: 'top-right',\r\n        timeout: 3000,\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('settings.settingsSaveError'),\r\n        position: 'top-right',\r\n        timeout: 3000,\r\n      });\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  // Initialize data\r\n  onMounted(() => {\r\n    // Load settings from store/localStorage if available\r\n    const savedDarkMode = $q.localStorage.getItem('darkMode');\r\n    if (savedDarkMode !== null) {\r\n      const darkModeValue = savedDarkMode === 'true';\r\n      isDarkMode.value = darkModeValue;\r\n      $q.dark.set(darkModeValue);\r\n    }\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  // Settings grid\r\n  .settings-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\r\n    gap: var(--space-6);\r\n\r\n    .settings-section {\r\n      &.full-width {\r\n        grid-column: 1 / -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Form grids\r\n  .form-grid {\r\n    display: grid;\r\n    gap: var(--space-4);\r\n  }\r\n\r\n  .clinic-form-grid {\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n    gap: var(--space-4);\r\n    margin-bottom: var(--space-6);\r\n  }\r\n\r\n  .clinic-notice {\r\n    margin-top: var(--space-4);\r\n  }\r\n\r\n  // Settings options within BaseCards\r\n  .settings-options {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-3);\r\n  }\r\n\r\n  .setting-item {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    gap: var(--space-4);\r\n  }\r\n\r\n  .setting-info {\r\n    flex: 1;\r\n\r\n    .setting-label {\r\n      font-size: var(--text-base);\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--neutral-900);\r\n      margin-bottom: var(--space-1);\r\n    }\r\n\r\n    .setting-description {\r\n      font-size: var(--text-sm);\r\n      color: var(--neutral-600);\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .setting-control {\r\n    margin-left: var(--space-4);\r\n  }\r\n\r\n  // All input styling is now handled by global field system\r\n\r\n  // All card styling is now handled by BaseCard components\r\n\r\n  // System info\r\n  .system-info {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-4);\r\n\r\n    .info-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: var(--space-3) 0;\r\n      border-bottom: 1px solid var(--neutral-200);\r\n\r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n\r\n      .info-label {\r\n        font-weight: var(--font-weight-medium);\r\n        color: var(--neutral-700);\r\n      }\r\n\r\n      .info-value {\r\n        color: var(--neutral-900);\r\n\r\n        .support-link {\r\n          color: var(--brand-primary);\r\n          text-decoration: none;\r\n          transition: color var(--transition-base);\r\n\r\n          &:hover {\r\n            color: var(--brand-primary-dark);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 768px) {\r\n    .settings-grid {\r\n      grid-template-columns: 1fr;\r\n      gap: var(--space-4);\r\n    }\r\n\r\n    .clinic-form-grid {\r\n      grid-template-columns: 1fr;\r\n    }\r\n\r\n    .setting-item {\r\n      flex-direction: column;\r\n      align-items: stretch;\r\n      gap: var(--space-3);\r\n\r\n      .setting-control {\r\n        margin-left: 0;\r\n        align-self: flex-end;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode is handled by CSS variables and BaseCard components\r\n\r\n  // Screen reader only content (now in global app.scss)\r\n\r\n  // Focus styles are handled by global field system\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\StyleGuidePage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 225,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 225,
        "endColumn": 37,
        "fix": { "range": [9211, 9256], "text": "v-model=\"sampleText\"\n                outlined" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 232,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 232,
        "endColumn": 38,
        "fix": { "range": [9428, 9474], "text": "v-model=\"sampleEmail\"\n                outlined" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 246,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 246,
        "endColumn": 39,
        "fix": { "range": [9818, 9865], "text": "v-model=\"sampleSelect\"\n                outlined" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 253,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 253,
        "endColumn": 41,
        "fix": { "range": [10034, 10083], "text": "v-model=\"sampleMultiple\"\n                outlined" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 267,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 267,
        "endColumn": 38,
        "fix": { "range": [10418, 10464], "text": "v-model=\"sampleError\"\n                outlined" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \"outlined\".",
        "line": 275,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 275,
        "endColumn": 41,
        "fix": { "range": [10666, 10715], "text": "v-model=\"sampleDisabled\"\n                outlined" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#top' instead of 'v-slot:top'.",
        "line": 332,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 332,
        "endColumn": 35,
        "fix": { "range": [12845, 12855], "text": "#top" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 340,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 340,
        "endColumn": 46,
        "fix": {
          "range": [13104, 13171],
          "text": ":loading=\"tableLoading\"\n                      @click=\"refreshTable\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 347,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 347,
        "endColumn": 56,
        "fix": { "range": [13368, 13391], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 358,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 358,
        "endColumn": 57,
        "fix": { "range": [13728, 13752], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 381,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 381,
        "endColumn": 40,
        "fix": { "range": [14533, 14546], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 385,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 385,
        "endColumn": 40,
        "fix": { "range": [14746, 14759], "text": "#action" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 391,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 391,
        "endColumn": 40,
        "fix": { "range": [14946, 14959], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 395,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 395,
        "endColumn": 40,
        "fix": { "range": [15140, 15153], "text": "#action" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 401,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 401,
        "endColumn": 40,
        "fix": { "range": [15345, 15358], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 405,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 405,
        "endColumn": 40,
        "fix": { "range": [15553, 15566], "text": "#action" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 411,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 411,
        "endColumn": 40,
        "fix": { "range": [15750, 15763], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 415,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 415,
        "endColumn": 40,
        "fix": { "range": [15950, 15963], "text": "#action" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 18,
    "fixableErrorCount": 0,
    "fixableWarningCount": 18,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        title=\"Design System Style Guide\"\n        subtitle=\"Single source of truth for Remcura UI system\"\n        icon=\"palette\"\n      />\n    </template>\n\n    <div class=\"style-guide\">\n      <!-- Token Inspector -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🎛️ Live Token Inspector</h2>\n        <p class=\"section-description\">\n          Experiment with design tokens in real-time. Changes reflect instantly across all components.\n        </p>\n        <TokenInspector />\n      </div>\n\n      <!-- Colors Section -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🎨 Color System</h2>\n        <p class=\"section-description\">\n          Our color system is built on CSS custom properties that automatically adapt to light and dark modes.\n        </p>\n\n        <div class=\"color-showcase\">\n          <!-- Brand Colors -->\n          <div class=\"color-group\">\n            <h4>Brand Colors</h4>\n            <div class=\"color-row\">\n              <div class=\"color-card\" style=\"background: var(--brand-primary)\">\n                <div class=\"color-value\">Primary</div>\n                <div class=\"color-var\">--brand-primary</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--brand-secondary)\">\n                <div class=\"color-value\">Secondary</div>\n                <div class=\"color-var\">--brand-secondary</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--brand-accent)\">\n                <div class=\"color-value\">Accent</div>\n                <div class=\"color-var\">--brand-accent</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Semantic Colors -->\n          <div class=\"color-group\">\n            <h4>Semantic Colors</h4>\n            <div class=\"color-row\">\n              <div class=\"color-card\" style=\"background: var(--brand-success)\">\n                <div class=\"color-value\">Success</div>\n                <div class=\"color-var\">--brand-success</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--brand-danger)\">\n                <div class=\"color-value\">Danger</div>\n                <div class=\"color-var\">--brand-danger</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--brand-warning)\">\n                <div class=\"color-value\">Warning</div>\n                <div class=\"color-var\">--brand-warning</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--brand-info)\">\n                <div class=\"color-value\">Info</div>\n                <div class=\"color-var\">--brand-info</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Neutral Palette -->\n          <div class=\"color-group\">\n            <h4>Neutral Palette</h4>\n            <div class=\"color-row\">\n              <div class=\"color-card\" style=\"background: var(--neutral-50); color: var(--neutral-900)\">\n                <div class=\"color-value\">Neutral 50</div>\n                <div class=\"color-var\">--neutral-50</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--neutral-200); color: var(--neutral-900)\">\n                <div class=\"color-value\">Neutral 200</div>\n                <div class=\"color-var\">--neutral-200</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--neutral-500)\">\n                <div class=\"color-value\">Neutral 500</div>\n                <div class=\"color-var\">--neutral-500</div>\n              </div>\n              <div class=\"color-card\" style=\"background: var(--neutral-800)\">\n                <div class=\"color-value\">Neutral 800</div>\n                <div class=\"color-var\">--neutral-800</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Typography Section -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">📝 Typography System</h2>\n        <p class=\"section-description\">\n          Typography scale using CSS custom properties with consistent font weights and line heights.\n        </p>\n\n        <div class=\"typography-showcase\">\n          <div class=\"text-example\">\n            <h1 class=\"text-h1\">Heading 1 - Page Title</h1>\n            <div class=\"text-meta\">var(--text-4xl), var(--font-weight-black), var(--leading-tight)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <h2 class=\"text-h2\">Heading 2 - Section Title</h2>\n            <div class=\"text-meta\">var(--text-3xl), var(--font-weight-extrabold), var(--leading-tight)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <h3 class=\"text-h3\">Heading 3 - Subsection</h3>\n            <div class=\"text-meta\">var(--text-2xl), var(--font-weight-bold), var(--leading-tight)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <h4 class=\"text-h4\">Heading 4 - Card Title</h4>\n            <div class=\"text-meta\">var(--text-xl), var(--font-weight-bold), var(--leading-normal)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <h5 class=\"text-h5\">Heading 5 - Small Header</h5>\n            <div class=\"text-meta\">var(--text-lg), var(--font-weight-semibold), var(--leading-normal)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <h6 class=\"text-h6\">Heading 6 - Label</h6>\n            <div class=\"text-meta\">var(--text-base), var(--font-weight-semibold), var(--leading-normal)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <p class=\"text-body\">Body text - Primary content text with good readability</p>\n            <div class=\"text-meta\">var(--text-base), var(--font-weight-normal), var(--leading-normal)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <p class=\"text-sm\">Small text - Secondary descriptions and metadata</p>\n            <div class=\"text-meta\">var(--text-sm), var(--font-weight-normal), var(--leading-normal)</div>\n          </div>\n\n          <div class=\"text-example\">\n            <p class=\"text-xs\">Extra small - Captions and fine print</p>\n            <div class=\"text-meta\">var(--text-xs), var(--font-weight-normal), var(--leading-relaxed)</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Button System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🔘 Button System</h2>\n        <p class=\"section-description\">\n          Consistent button styling using the useButtons composable with proper states and accessibility.\n        </p>\n\n        <div class=\"button-showcase\">\n          <div class=\"button-group\">\n            <h4>Primary Buttons</h4>\n            <div class=\"button-row\">\n              <q-btn color=\"primary\" label=\"Primary\" />\n              <q-btn color=\"primary\" icon=\"add\" label=\"With Icon\" />\n              <q-btn color=\"primary\" icon=\"download\" round />\n              <q-btn color=\"primary\" label=\"Loading\" loading />\n              <q-btn color=\"primary\" label=\"Disabled\" disable />\n            </div>\n          </div>\n\n          <div class=\"button-group\">\n            <h4>Button Variants</h4>\n            <div class=\"button-row\">\n              <q-btn unelevated color=\"primary\" label=\"Unelevated\" />\n              <q-btn outline color=\"primary\" label=\"Outline\" />\n              <q-btn flat color=\"primary\" label=\"Flat\" />\n              <q-btn push color=\"primary\" label=\"Push\" />\n            </div>\n          </div>\n\n          <div class=\"button-group\">\n            <h4>Semantic Colors</h4>\n            <div class=\"button-row\">\n              <q-btn color=\"positive\" label=\"Success\" icon=\"check\" />\n              <q-btn color=\"negative\" label=\"Danger\" icon=\"warning\" />\n              <q-btn color=\"warning\" label=\"Warning\" icon=\"info\" />\n              <q-btn color=\"info\" label=\"Info\" icon=\"help\" />\n            </div>\n          </div>\n\n          <div class=\"button-group\">\n            <h4>Button Sizes</h4>\n            <div class=\"button-row items-end\">\n              <q-btn size=\"xs\" color=\"primary\" label=\"XS\" />\n              <q-btn size=\"sm\" color=\"primary\" label=\"Small\" />\n              <q-btn size=\"md\" color=\"primary\" label=\"Medium\" />\n              <q-btn size=\"lg\" color=\"primary\" label=\"Large\" />\n            </div>\n          </div>\n\n          <div class=\"button-group\">\n            <h4>Interactive States</h4>\n            <div class=\"button-row\">\n              <q-btn color=\"primary\" label=\"Normal\" />\n              <q-btn color=\"primary\" label=\"Hover\" class=\"hover-demo\" />\n              <q-btn color=\"primary\" label=\"Focus\" class=\"focus-demo\" />\n              <q-btn color=\"primary\" label=\"Active\" class=\"active-demo\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Form Controls -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">📝 Form Controls</h2>\n        <p class=\"section-description\">\n          Unified form styling with consistent heights, focus states, and validation.\n        </p>\n\n        <div class=\"form-showcase\">\n          <div class=\"form-group\">\n            <h4>Input Fields</h4>\n            <div class=\"form-row\">\n              <q-input\n                outlined\n                v-model=\"sampleText\"\n                label=\"Standard Input\"\n                placeholder=\"Enter text...\"\n                style=\"flex: 1\"\n              />\n              <q-input\n                outlined\n                v-model=\"sampleEmail\"\n                type=\"email\"\n                label=\"Email Input\"\n                placeholder=\"user@example.com\"\n                style=\"flex: 1\"\n              />\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <h4>Select Fields</h4>\n            <div class=\"form-row\">\n              <q-select\n                outlined\n                v-model=\"sampleSelect\"\n                :options=\"selectOptions\"\n                label=\"Single Select\"\n                style=\"flex: 1\"\n              />\n              <q-select\n                outlined\n                v-model=\"sampleMultiple\"\n                :options=\"selectOptions\"\n                multiple\n                label=\"Multiple Select\"\n                style=\"flex: 1\"\n              />\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <h4>Form States</h4>\n            <div class=\"form-row\">\n              <q-input\n                outlined\n                v-model=\"sampleError\"\n                label=\"Error State\"\n                error\n                error-message=\"This field is required\"\n                style=\"flex: 1\"\n              />\n              <q-input\n                outlined\n                v-model=\"sampleDisabled\"\n                label=\"Disabled State\"\n                disable\n                style=\"flex: 1\"\n              />\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <h4>Other Controls</h4>\n            <div class=\"form-controls\">\n              <q-checkbox v-model=\"sampleCheck\" label=\"Checkbox option\" />\n              <q-radio v-model=\"sampleRadio\" val=\"option1\" label=\"Radio option 1\" />\n              <q-radio v-model=\"sampleRadio\" val=\"option2\" label=\"Radio option 2\" />\n              <q-toggle v-model=\"sampleToggle\" label=\"Toggle switch\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dialog System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">💬 Dialog System</h2>\n        <p class=\"section-description\">\n          BaseDialog and FormDialog components with proper focus management and accessibility.\n        </p>\n\n        <div class=\"dialog-showcase\">\n          <div class=\"dialog-group\">\n            <h4>Dialog Types</h4>\n            <div class=\"button-row\">\n              <q-btn color=\"primary\" label=\"Info Dialog\" @click=\"showInfoDialog = true\" />\n              <q-btn color=\"warning\" label=\"Confirm Dialog\" @click=\"showConfirmDialog = true\" />\n              <q-btn color=\"positive\" label=\"Form Dialog\" @click=\"showFormDialog = true\" />\n              <q-btn color=\"negative\" label=\"Destructive Dialog\" @click=\"showDestructiveDialog = true\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Table System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">📊 Table System</h2>\n        <p class=\"section-description\">\n          Unified table styling with loading states, empty states, and responsive design.\n        </p>\n\n        <div class=\"table-showcase\">\n          <div class=\"table-demo\">\n            <q-table\n              :rows=\"sampleTableData\"\n              :columns=\"sampleTableColumns\"\n              row-key=\"id\"\n              :loading=\"tableLoading\"\n              :pagination=\"{ rowsPerPage: 5 }\"\n              class=\"medical-table\"\n            >\n              <template v-slot:top>\n                <div class=\"table-header\">\n                  <h4>Sample Data Table</h4>\n                  <div class=\"table-actions\">\n                    <q-btn\n                      flat\n                      icon=\"refresh\"\n                      @click=\"refreshTable\"\n                      :loading=\"tableLoading\"\n                    />\n                    <q-btn color=\"primary\" icon=\"add\" label=\"Add Item\" />\n                  </div>\n                </div>\n              </template>\n\n              <template v-slot:body-cell-status=\"props\">\n                <q-td :props=\"props\">\n                  <q-chip\n                    :color=\"getStatusColor(props.value)\"\n                    text-color=\"white\"\n                    :label=\"props.value\"\n                    size=\"sm\"\n                  />\n                </q-td>\n              </template>\n\n              <template v-slot:body-cell-actions=\"props\">\n                <q-td :props=\"props\">\n                  <q-btn flat icon=\"edit\" size=\"sm\" />\n                  <q-btn flat icon=\"delete\" size=\"sm\" color=\"negative\" />\n                </q-td>\n              </template>\n            </q-table>\n          </div>\n        </div>\n      </div>\n\n      <!-- Alert System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🚨 Alert & Toast System</h2>\n        <p class=\"section-description\">\n          Notification system with proper ARIA live regions and semantic colors.\n        </p>\n\n        <div class=\"alert-showcase\">\n          <div class=\"alert-group\">\n            <h4>Alert Types</h4>\n            <div class=\"alert-examples\">\n              <q-banner class=\"alert-info\" rounded>\n                <template v-slot:avatar>\n                  <q-icon name=\"info\" />\n                </template>\n                <strong>Information:</strong> This is an informational message with important details.\n                <template v-slot:action>\n                  <q-btn flat label=\"Dismiss\" />\n                </template>\n              </q-banner>\n\n              <q-banner class=\"alert-success\" rounded>\n                <template v-slot:avatar>\n                  <q-icon name=\"check_circle\" />\n                </template>\n                <strong>Success:</strong> Operation completed successfully!\n                <template v-slot:action>\n                  <q-btn flat label=\"View Details\" />\n                </template>\n              </q-banner>\n\n              <q-banner class=\"alert-warning\" rounded>\n                <template v-slot:avatar>\n                  <q-icon name=\"warning\" />\n                </template>\n                <strong>Warning:</strong> Please review the following items before proceeding.\n                <template v-slot:action>\n                  <q-btn flat label=\"Review\" />\n                </template>\n              </q-banner>\n\n              <q-banner class=\"alert-error\" rounded>\n                <template v-slot:avatar>\n                  <q-icon name=\"error\" />\n                </template>\n                <strong>Error:</strong> An error occurred while processing your request.\n                <template v-slot:action>\n                  <q-btn flat label=\"Retry\" />\n                </template>\n              </q-banner>\n            </div>\n          </div>\n\n          <div class=\"toast-group\">\n            <h4>Toast Notifications</h4>\n            <div class=\"button-row\">\n              <q-btn color=\"info\" label=\"Show Info Toast\" @click=\"showToast('info')\" />\n              <q-btn color=\"positive\" label=\"Show Success Toast\" @click=\"showToast('positive')\" />\n              <q-btn color=\"warning\" label=\"Show Warning Toast\" @click=\"showToast('warning')\" />\n              <q-btn color=\"negative\" label=\"Show Error Toast\" @click=\"showToast('negative')\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Loading & Empty States -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">⏳ Loading & Empty States</h2>\n        <p class=\"section-description\">\n          Consistent loading indicators and empty state patterns.\n        </p>\n\n        <div class=\"states-showcase\">\n          <div class=\"state-group\">\n            <h4>Loading States</h4>\n            <div class=\"state-examples\">\n              <div class=\"state-card\">\n                <h5>Skeleton Loading</h5>\n                <div class=\"skeleton-demo\">\n                  <q-skeleton type=\"text\" width=\"60%\" />\n                  <q-skeleton type=\"text\" width=\"80%\" />\n                  <q-skeleton type=\"text\" width=\"40%\" />\n                </div>\n              </div>\n\n              <div class=\"state-card\">\n                <h5>Spinner Loading</h5>\n                <div class=\"spinner-demo\">\n                  <q-spinner-dots size=\"40px\" color=\"primary\" />\n                  <p>Loading data...</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"state-group\">\n            <h4>Empty States</h4>\n            <div class=\"state-examples\">\n              <div class=\"state-card empty-state\">\n                <q-icon name=\"inbox\" size=\"48px\" color=\"grey-5\" />\n                <h5>No items found</h5>\n                <p>There are no items to display at this time.</p>\n                <q-btn color=\"primary\" label=\"Add Item\" />\n              </div>\n\n              <div class=\"state-card empty-state\">\n                <q-icon name=\"search_off\" size=\"48px\" color=\"grey-5\" />\n                <h5>No search results</h5>\n                <p>Try adjusting your search criteria.</p>\n                <q-btn flat color=\"primary\" label=\"Clear Filters\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Card Design System -->\n      <CardStyleGuide />\n\n      <!-- Shadows System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🌟 Shadow System</h2>\n        <p class=\"section-description\">\n          Elevation system using CSS custom properties that adapt to light and dark modes.\n        </p>\n\n        <div class=\"shadow-showcase\">\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-xs)\">\n            <div class=\"shadow-label\">Extra Small</div>\n            <div class=\"shadow-value\">var(--shadow-xs)</div>\n          </div>\n\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-sm)\">\n            <div class=\"shadow-label\">Small</div>\n            <div class=\"shadow-value\">var(--shadow-sm)</div>\n          </div>\n\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-base)\">\n            <div class=\"shadow-label\">Base</div>\n            <div class=\"shadow-value\">var(--shadow-base)</div>\n          </div>\n\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-md)\">\n            <div class=\"shadow-label\">Medium</div>\n            <div class=\"shadow-value\">var(--shadow-md)</div>\n          </div>\n\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-lg)\">\n            <div class=\"shadow-label\">Large</div>\n            <div class=\"shadow-value\">var(--shadow-lg)</div>\n          </div>\n\n          <div class=\"shadow-card\" style=\"box-shadow: var(--shadow-xl)\">\n            <div class=\"shadow-label\">Extra Large</div>\n            <div class=\"shadow-value\">var(--shadow-xl)</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Icon System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">🎯 {{ $t('settings.iconsSection') }}</h2>\n\n        <div class=\"icon-showcase\">\n          <!-- Medical Icons -->\n          <div class=\"icon-group\">\n            <h4>Medical Icons</h4>\n            <div class=\"icon-row\">\n              <div class=\"icon-item\">\n                <q-icon\n                  name=\"medical_services\"\n                  class=\"icon-size-xl\"\n                  color=\"primary\"\n                />\n                <div class=\"icon-label\">Medical Services</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon\n                  name=\"inventory\"\n                  class=\"icon-size-xl\"\n                  color=\"secondary\"\n                />\n                <div class=\"icon-label\">Inventory</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon\n                  name=\"health_and_safety\"\n                  class=\"icon-size-xl\"\n                  color=\"positive\"\n                />\n                <div class=\"icon-label\">Health & Safety</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Status Icons -->\n          <div class=\"icon-group\">\n            <h4>Status Icons</h4>\n            <div class=\"icon-row\">\n              <div class=\"icon-item\">\n                <q-icon\n                  name=\"check_circle\"\n                  class=\"icon-size-xl\"\n                  color=\"positive\"\n                />\n                <div class=\"icon-label\">Success</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon name=\"warning\" class=\"icon-size-xl\" color=\"warning\" />\n                <div class=\"icon-label\">Warning</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon name=\"error\" class=\"icon-size-xl\" color=\"negative\" />\n                <div class=\"icon-label\">Error</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon name=\"info\" class=\"icon-size-xl\" color=\"info\" />\n                <div class=\"icon-label\">Info</div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Interface Icons -->\n          <div class=\"icon-group\">\n            <h4>Interface Icons</h4>\n            <div class=\"icon-row\">\n              <div class=\"icon-item\">\n                <q-icon name=\"settings\" class=\"icon-size-xl\" color=\"grey-7\" />\n                <div class=\"icon-label\">Settings</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon name=\"analytics\" class=\"icon-size-xl\" color=\"blue-7\" />\n                <div class=\"icon-label\">Analytics</div>\n              </div>\n              <div class=\"icon-item\">\n                <q-icon\n                  name=\"notifications\"\n                  class=\"icon-size-xl\"\n                  color=\"orange\"\n                />\n                <div class=\"icon-label\">Notifications</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Border Radius System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">📐 Border Radius System</h2>\n        <p class=\"section-description\">\n          Consistent border radius scale using CSS custom properties.\n        </p>\n\n        <div class=\"radius-showcase\">\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-sm)\"></div>\n            <div class=\"radius-label\">Small</div>\n            <div class=\"radius-value\">var(--radius-sm)</div>\n          </div>\n\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-base)\"></div>\n            <div class=\"radius-label\">Base</div>\n            <div class=\"radius-value\">var(--radius-base)</div>\n          </div>\n\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-md)\"></div>\n            <div class=\"radius-label\">Medium</div>\n            <div class=\"radius-value\">var(--radius-md)</div>\n          </div>\n\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-lg)\"></div>\n            <div class=\"radius-label\">Large (Cards)</div>\n            <div class=\"radius-value\">var(--radius-lg)</div>\n          </div>\n\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-xl)\"></div>\n            <div class=\"radius-label\">Extra Large</div>\n            <div class=\"radius-value\">var(--radius-xl)</div>\n          </div>\n\n          <div class=\"radius-item\">\n            <div class=\"radius-demo\" style=\"border-radius: var(--radius-full)\"></div>\n            <div class=\"radius-label\">Full</div>\n            <div class=\"radius-value\">var(--radius-full)</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Spacing System -->\n      <div class=\"style-section\">\n        <h2 class=\"section-title\">📏 Spacing System</h2>\n        <p class=\"section-description\">\n          8-point grid system using CSS custom properties for consistent spacing.\n        </p>\n\n        <div class=\"spacing-showcase\">\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-1)\"></div>\n            <div class=\"spacing-label\">Space 1</div>\n            <div class=\"spacing-value\">var(--space-1)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-2)\"></div>\n            <div class=\"spacing-label\">Space 2</div>\n            <div class=\"spacing-value\">var(--space-2)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-3)\"></div>\n            <div class=\"spacing-label\">Space 3</div>\n            <div class=\"spacing-value\">var(--space-3)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-4)\"></div>\n            <div class=\"spacing-label\">Space 4</div>\n            <div class=\"spacing-value\">var(--space-4)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-5)\"></div>\n            <div class=\"spacing-label\">Space 5</div>\n            <div class=\"spacing-value\">var(--space-5)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-6)\"></div>\n            <div class=\"spacing-label\">Space 6</div>\n            <div class=\"spacing-value\">var(--space-6)</div>\n          </div>\n\n          <div class=\"spacing-item\">\n            <div class=\"spacing-demo\" style=\"width: var(--space-8)\"></div>\n            <div class=\"spacing-label\">Space 8</div>\n            <div class=\"spacing-value\">var(--space-8)</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n  import { useQuasar } from 'quasar';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import CardStyleGuide from 'src/components/cards/CardStyleGuide.vue';\n  import TokenInspector from 'src/components/TokenInspector.vue';\n\n  const $q = useQuasar();\n\n  // Form demo data\n  const sampleText = ref('Sample text');\n  const sampleEmail = ref('user@example.com');\n  const sampleSelect = ref(null);\n  const sampleMultiple = ref([]);\n  const sampleError = ref('');\n  const sampleDisabled = ref('Disabled value');\n  const sampleCheck = ref(true);\n  const sampleRadio = ref('option1');\n  const sampleToggle = ref(false);\n\n  const selectOptions = ['Option 1', 'Option 2', 'Option 3', 'Option 4'];\n\n  // Dialog states\n  const showInfoDialog = ref(false);\n  const showConfirmDialog = ref(false);\n  const showFormDialog = ref(false);\n  const showDestructiveDialog = ref(false);\n\n  // Table demo data\n  const tableLoading = ref(false);\n  const sampleTableData = ref([\n    { id: 1, name: 'Product A', status: 'Active', quantity: 150, price: 29.99 },\n    { id: 2, name: 'Product B', status: 'Inactive', quantity: 0, price: 19.99 },\n    { id: 3, name: 'Product C', status: 'Active', quantity: 75, price: 39.99 },\n    { id: 4, name: 'Product D', status: 'Pending', quantity: 200, price: 49.99 },\n    { id: 5, name: 'Product E', status: 'Active', quantity: 50, price: 24.99 },\n  ]);\n\n  const sampleTableColumns = [\n    { name: 'name', label: 'Product Name', field: 'name', align: 'left' as const, sortable: true },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' as const, sortable: true },\n    { name: 'quantity', label: 'Quantity', field: 'quantity', align: 'right' as const, sortable: true },\n    { name: 'price', label: 'Price', field: 'price', align: 'right' as const, sortable: true, format: (val: number) => `$${val.toFixed(2)}` },\n    { name: 'actions', label: 'Actions', field: 'actions', align: 'center' as const },\n  ];\n\n  // Helper functions\n  function getStatusColor(status: string) {\n    switch (status) {\n      case 'Active': return 'positive';\n      case 'Inactive': return 'negative';\n      case 'Pending': return 'warning';\n      default: return 'grey';\n    }\n  }\n\n  function refreshTable() {\n    tableLoading.value = true;\n    setTimeout(() => {\n      tableLoading.value = false;\n    }, 1000);\n  }\n\n  function showToast(type: string) {\n    const messages = {\n      info: 'This is an informational message',\n      positive: 'Operation completed successfully!',\n      warning: 'Please review your input',\n      negative: 'An error occurred'\n    };\n\n    $q.notify({\n      type,\n      message: messages[type as keyof typeof messages],\n      position: 'top-right',\n      timeout: 3000,\n      actions: [{ icon: 'close', color: 'white' }]\n    });\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  .style-guide {\n    display: flex;\n    flex-direction: column;\n    gap: 48px;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 20px;\n  }\n\n  .style-section {\n    .section-title {\n      font-size: 32px;\n      font-weight: 600;\n      margin: 0 0 24px 0;\n      color: var(--text-primary);\n    }\n\n    .section-description {\n      font-size: 18px;\n      color: var(--text-secondary);\n      margin-bottom: 32px;\n      line-height: 1.6;\n    }\n  }\n\n  // Color showcase\n  .color-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n\n    .color-group {\n      h4 {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 16px 0;\n        color: var(--text-primary);\n      }\n\n      .color-row {\n        display: flex;\n        gap: 16px;\n        flex-wrap: wrap;\n      }\n    }\n\n    .color-card {\n      width: 120px;\n      height: 80px;\n      border-radius: 12px;\n      padding: 12px;\n      color: white;\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      box-shadow: var(--shadow-md);\n\n      .color-value {\n        font-weight: 600;\n        font-size: 14px;\n      }\n\n      .color-var {\n        font-size: 11px;\n        opacity: 0.9;\n        font-family: var(--font-family-mono);\n      }\n    }\n  }\n\n  // Typography showcase\n  .typography-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n\n    .text-example {\n      padding: 16px 0;\n      border-bottom: 1px solid var(--border-color);\n\n      &:last-child {\n        border-bottom: none;\n      }\n\n      .text-meta {\n        font-size: var(--text-xs);\n        color: var(--text-tertiary);\n        margin-top: var(--space-2);\n        font-family: var(--font-family-mono);\n      }\n    }\n  }\n\n  // Button showcase\n  .button-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-8);\n\n    .button-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n\n      .button-row {\n        display: flex;\n        gap: var(--space-3);\n        flex-wrap: wrap;\n        align-items: center;\n      }\n    }\n\n    // Interactive state demos\n    .hover-demo:hover {\n      transform: translateY(-1px);\n      box-shadow: var(--shadow-md);\n    }\n\n    .focus-demo {\n      outline: 2px solid var(--focus-ring-color);\n      outline-offset: var(--focus-ring-offset);\n    }\n\n    .active-demo {\n      transform: translateY(1px);\n      box-shadow: var(--shadow-sm);\n    }\n  }\n\n  // Form showcase\n  .form-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n\n    .form-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n\n      .form-row {\n        display: flex;\n        gap: var(--space-4);\n        flex-wrap: wrap;\n      }\n\n      .form-controls {\n        display: flex;\n        gap: var(--space-6);\n        flex-wrap: wrap;\n        align-items: center;\n      }\n    }\n  }\n\n  // Dialog showcase\n  .dialog-showcase {\n    .dialog-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n    }\n  }\n\n  // Table showcase\n  .table-showcase {\n    .table-demo {\n      border-radius: var(--radius-lg);\n      overflow: hidden;\n      box-shadow: var(--shadow-sm);\n\n      .table-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: var(--space-4);\n\n        h4 {\n          margin: 0;\n          font-size: var(--text-lg);\n          font-weight: var(--font-weight-semibold);\n          color: var(--text-primary);\n        }\n\n        .table-actions {\n          display: flex;\n          gap: var(--space-2);\n        }\n      }\n    }\n  }\n\n  // Alert showcase\n  .alert-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n\n    .alert-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n\n      .alert-examples {\n        display: flex;\n        flex-direction: column;\n        gap: var(--space-4);\n\n        .alert-info {\n          background: rgba(30, 64, 175, 0.1);\n          border-left: 4px solid var(--brand-info);\n          color: var(--brand-info);\n        }\n\n        .alert-success {\n          background: rgba(5, 150, 105, 0.1);\n          border-left: 4px solid var(--brand-success);\n          color: var(--brand-success);\n        }\n\n        .alert-warning {\n          background: rgba(217, 119, 6, 0.1);\n          border-left: 4px solid var(--brand-warning);\n          color: var(--brand-warning);\n        }\n\n        .alert-error {\n          background: rgba(185, 28, 28, 0.1);\n          border-left: 4px solid var(--brand-danger);\n          color: var(--brand-danger);\n        }\n      }\n    }\n\n    .toast-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n    }\n  }\n\n  // States showcase\n  .states-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n\n    .state-group {\n      h4 {\n        font-size: var(--text-lg);\n        font-weight: var(--font-weight-semibold);\n        margin: 0 0 var(--space-4) 0;\n        color: var(--text-primary);\n      }\n\n      .state-examples {\n        display: grid;\n        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n        gap: var(--space-4);\n      }\n    }\n\n    .state-card {\n      background: var(--bg-secondary);\n      border: 1px solid var(--border-primary);\n      border-radius: var(--radius-lg);\n      padding: var(--space-6);\n      text-align: center;\n\n      h5 {\n        margin: 0 0 var(--space-3) 0;\n        font-size: var(--text-base);\n        font-weight: var(--font-weight-semibold);\n        color: var(--text-primary);\n      }\n\n      &.empty-state {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        gap: var(--space-3);\n\n        p {\n          margin: 0;\n          color: var(--text-secondary);\n        }\n      }\n    }\n\n    .skeleton-demo {\n      display: flex;\n      flex-direction: column;\n      gap: var(--space-2);\n    }\n\n    .spinner-demo {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: var(--space-3);\n\n      p {\n        margin: 0;\n        color: var(--text-secondary);\n      }\n    }\n  }\n\n  // Shadow showcase\n  .shadow-showcase {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 24px;\n\n    .shadow-card {\n      background: var(--surface);\n      border-radius: 12px;\n      padding: 24px;\n      text-align: center;\n\n      .shadow-label {\n        font-weight: 600;\n        margin-bottom: 8px;\n        color: var(--text-primary);\n      }\n\n      .shadow-value {\n        font-size: 14px;\n        color: var(--text-secondary);\n      }\n\n      .body--dark & {\n        background: #1e1e1e;\n      }\n    }\n  }\n\n  // Icon showcase\n  .icon-showcase {\n    display: flex;\n    flex-direction: column;\n    gap: 32px;\n\n    .icon-group {\n      h4 {\n        font-size: 18px;\n        font-weight: 600;\n        margin: 0 0 16px 0;\n        color: var(--text-primary);\n      }\n\n      .icon-row {\n        display: flex;\n        gap: 24px;\n        flex-wrap: wrap;\n      }\n    }\n\n    .icon-item {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 8px;\n      text-align: center;\n\n      .icon-label {\n        font-size: 14px;\n        color: var(--text-secondary);\n      }\n    }\n  }\n\n  // Radius showcase\n  .radius-showcase {\n    display: flex;\n    gap: 24px;\n    flex-wrap: wrap;\n    align-items: end;\n\n    .radius-item {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 12px;\n\n      .radius-demo {\n        width: 60px;\n        height: 60px;\n        background: var(--q-primary);\n      }\n\n      .radius-label {\n        font-weight: 600;\n        color: var(--text-primary);\n      }\n\n      .radius-value {\n        font-size: var(--text-xs);\n        color: var(--text-secondary);\n        font-family: var(--font-family-mono);\n      }\n    }\n  }\n\n  // Spacing showcase\n  .spacing-showcase {\n    display: flex;\n    gap: 24px;\n    flex-wrap: wrap;\n    align-items: end;\n\n    .spacing-item {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 12px;\n\n      .spacing-demo {\n        height: 40px;\n        background: var(--q-primary);\n        border-radius: 4px;\n      }\n\n      .spacing-label {\n        font-weight: 600;\n        color: var(--text-primary);\n      }\n\n      .spacing-value {\n        font-size: var(--text-xs);\n        color: var(--text-secondary);\n        font-family: var(--font-family-mono);\n      }\n    }\n  }\n\n  // Responsive adjustments\n  @media (max-width: 768px) {\n    .style-guide {\n      gap: 32px;\n      padding: 0 16px;\n    }\n\n    .style-section {\n      .section-title {\n        font-size: 24px;\n      }\n\n      .section-description {\n        font-size: 16px;\n      }\n    }\n\n    .color-row {\n      justify-content: center;\n    }\n\n    .button-row {\n      justify-content: center;\n    }\n\n    .icon-row {\n      justify-content: center;\n    }\n\n    .radius-showcase,\n    .spacing-showcase {\n      justify-content: center;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\StyleSandbox.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 192,
        "column": 44,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 192,
        "endColumn": 57,
        "fix": { "range": [7222, 7235], "text": "#avatar" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#action' instead of 'v-slot:action'.",
        "line": 196,
        "column": 51,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 196,
        "endColumn": 64,
        "fix": { "range": [7494, 7507], "text": "#action" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"label\".",
        "line": 335,
        "column": 38,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 335,
        "endColumn": 51,
        "fix": { "range": [12221, 12249], "text": "v-close-popup label=\"Cancel\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"label\".",
        "line": 336,
        "column": 45,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 336,
        "endColumn": 58,
        "fix": { "range": [12286, 12310], "text": "v-close-popup label=\"OK\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 344,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 344,
        "endColumn": 40,
        "fix": { "range": [12492, 12515], "text": "v-close-popup clickable" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 350,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 350,
        "endColumn": 40,
        "fix": { "range": [12704, 12727], "text": "v-close-popup clickable" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-close-popup\" should go before \"clickable\".",
        "line": 357,
        "column": 27,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 357,
        "endColumn": 40,
        "fix": { "range": [12932, 12955], "text": "v-close-popup clickable" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 7,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        title=\"Style Sandbox\"\n        subtitle=\"Interactive testing ground for UI components and patterns\"\n        icon=\"science\"\n      />\n    </template>\n\n    <div class=\"sandbox-container\">\n      <!-- Token Inspector -->\n      <div class=\"sandbox-section\">\n        <h2 class=\"section-title\">🎛️ Live Token Editor</h2>\n        <p class=\"section-description\">\n          Modify design tokens and see changes reflected instantly across all components below.\n        </p>\n        <TokenInspector />\n      </div>\n\n      <!-- Component Testing Grid -->\n      <div class=\"sandbox-section\">\n        <h2 class=\"section-title\">🧪 Component Testing</h2>\n        <p class=\"section-description\">\n          Test components with different states, sizes, and configurations.\n        </p>\n\n        <div class=\"testing-grid\">\n          <!-- Button Testing -->\n          <div class=\"test-card\">\n            <h3>Button Testing</h3>\n            <div class=\"test-controls\">\n              <div class=\"control-row\">\n                <label>Size:</label>\n                <q-btn-toggle\n                  v-model=\"buttonSize\"\n                  :options=\"[\n                    { label: 'XS', value: 'xs' },\n                    { label: 'SM', value: 'sm' },\n                    { label: 'MD', value: 'md' },\n                    { label: 'LG', value: 'lg' }\n                  ]\"\n                />\n              </div>\n              <div class=\"control-row\">\n                <label>Variant:</label>\n                <q-btn-toggle\n                  v-model=\"buttonVariant\"\n                  :options=\"[\n                    { label: 'Filled', value: 'unelevated' },\n                    { label: 'Outline', value: 'outline' },\n                    { label: 'Flat', value: 'flat' }\n                  ]\"\n                />\n              </div>\n              <div class=\"control-row\">\n                <q-checkbox v-model=\"buttonLoading\" label=\"Loading\" />\n                <q-checkbox v-model=\"buttonDisabled\" label=\"Disabled\" />\n                <q-checkbox v-model=\"buttonIcon\" label=\"With Icon\" />\n              </div>\n            </div>\n            <div class=\"test-preview\">\n              <q-btn\n                :size=\"buttonSize\"\n                :unelevated=\"buttonVariant === 'unelevated'\"\n                :outline=\"buttonVariant === 'outline'\"\n                :flat=\"buttonVariant === 'flat'\"\n                :loading=\"buttonLoading\"\n                :disable=\"buttonDisabled\"\n                :icon=\"buttonIcon ? 'star' : undefined\"\n                color=\"primary\"\n                label=\"Test Button\"\n              />\n            </div>\n          </div>\n\n          <!-- Form Field Testing -->\n          <div class=\"test-card\">\n            <h3>Form Field Testing</h3>\n            <div class=\"test-controls\">\n              <div class=\"control-row\">\n                <label>Field Type:</label>\n                <q-select\n                  v-model=\"fieldType\"\n                  :options=\"['input', 'select', 'textarea']\"\n                  outlined\n                  dense\n                />\n              </div>\n              <div class=\"control-row\">\n                <q-checkbox v-model=\"fieldError\" label=\"Error State\" />\n                <q-checkbox v-model=\"fieldDisabled\" label=\"Disabled\" />\n                <q-checkbox v-model=\"fieldRequired\" label=\"Required\" />\n              </div>\n            </div>\n            <div class=\"test-preview\">\n              <q-input\n                v-if=\"fieldType === 'input'\"\n                v-model=\"testValue\"\n                outlined\n                :label=\"fieldRequired ? 'Required Field *' : 'Test Field'\"\n                :error=\"fieldError\"\n                :error-message=\"fieldError ? 'This field has an error' : ''\"\n                :disable=\"fieldDisabled\"\n                placeholder=\"Enter text...\"\n              />\n              <q-select\n                v-else-if=\"fieldType === 'select'\"\n                v-model=\"testSelect\"\n                :options=\"['Option 1', 'Option 2', 'Option 3']\"\n                outlined\n                :label=\"fieldRequired ? 'Required Select *' : 'Test Select'\"\n                :error=\"fieldError\"\n                :error-message=\"fieldError ? 'Please select an option' : ''\"\n                :disable=\"fieldDisabled\"\n              />\n              <q-input\n                v-else-if=\"fieldType === 'textarea'\"\n                v-model=\"testTextarea\"\n                type=\"textarea\"\n                outlined\n                :label=\"fieldRequired ? 'Required Textarea *' : 'Test Textarea'\"\n                :error=\"fieldError\"\n                :error-message=\"fieldError ? 'This field is required' : ''\"\n                :disable=\"fieldDisabled\"\n                placeholder=\"Enter multiple lines...\"\n                rows=\"3\"\n              />\n            </div>\n          </div>\n\n          <!-- Card Testing -->\n          <div class=\"test-card\">\n            <h3>Card Testing</h3>\n            <div class=\"test-controls\">\n              <div class=\"control-row\">\n                <q-checkbox v-model=\"cardElevated\" label=\"Elevated\" />\n                <q-checkbox v-model=\"cardBordered\" label=\"Bordered\" />\n                <q-checkbox v-model=\"cardFlat\" label=\"Flat\" />\n              </div>\n            </div>\n            <div class=\"test-preview\">\n              <q-card\n                :class=\"{\n                  'card-elevated': cardElevated,\n                  'card-bordered': cardBordered,\n                  'card-flat': cardFlat\n                }\"\n                style=\"max-width: 300px\"\n              >\n                <q-card-section>\n                  <div class=\"text-h6\">Sample Card</div>\n                  <div class=\"text-subtitle2\">Card subtitle</div>\n                </q-card-section>\n                <q-card-section>\n                  This is the card content area. It can contain any type of content.\n                </q-card-section>\n                <q-card-actions align=\"right\">\n                  <q-btn flat>Cancel</q-btn>\n                  <q-btn color=\"primary\">Action</q-btn>\n                </q-card-actions>\n              </q-card>\n            </div>\n          </div>\n\n          <!-- Alert Testing -->\n          <div class=\"test-card\">\n            <h3>Alert Testing</h3>\n            <div class=\"test-controls\">\n              <div class=\"control-row\">\n                <label>Type:</label>\n                <q-btn-toggle\n                  v-model=\"alertType\"\n                  :options=\"[\n                    { label: 'Info', value: 'info' },\n                    { label: 'Success', value: 'positive' },\n                    { label: 'Warning', value: 'warning' },\n                    { label: 'Error', value: 'negative' }\n                  ]\"\n                />\n              </div>\n              <div class=\"control-row\">\n                <q-checkbox v-model=\"alertDismissible\" label=\"Dismissible\" />\n                <q-checkbox v-model=\"alertIcon\" label=\"With Icon\" />\n              </div>\n            </div>\n            <div class=\"test-preview\">\n              <q-banner\n                :class=\"`alert-${alertType}`\"\n                rounded\n              >\n                <template v-if=\"alertIcon\" v-slot:avatar>\n                  <q-icon :name=\"getAlertIcon(alertType)\" />\n                </template>\n                <strong>{{ getAlertTitle(alertType) }}:</strong> This is a sample alert message for testing purposes.\n                <template v-if=\"alertDismissible\" v-slot:action>\n                  <q-btn flat label=\"Dismiss\" />\n                </template>\n              </q-banner>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Native vs Quasar Comparison -->\n      <div class=\"sandbox-section\">\n        <h2 class=\"section-title\">🔄 Native vs Quasar Comparison</h2>\n        <p class=\"section-description\">\n          Compare native HTML controls with Quasar components to ensure consistent styling.\n        </p>\n\n        <div class=\"comparison-grid\">\n          <div class=\"comparison-column\">\n            <h3>Native HTML</h3>\n            <div class=\"native-controls\">\n              <input\n                class=\"form-control control-sm\"\n                placeholder=\"Small input\"\n              />\n              <input\n                class=\"form-control control-md\"\n                placeholder=\"Medium input\"\n              />\n              <input\n                class=\"form-control control-lg\"\n                placeholder=\"Large input\"\n              />\n              <select class=\"form-control control-md\">\n                <option>Native Select</option>\n                <option>Option B</option>\n              </select>\n              <textarea\n                class=\"form-control control-md\"\n                rows=\"3\"\n                placeholder=\"Native textarea\"\n              ></textarea>\n            </div>\n          </div>\n\n          <div class=\"comparison-column\">\n            <h3>Quasar Components</h3>\n            <div class=\"quasar-controls\">\n              <q-input outlined label=\"Small QInput\" class=\"control-sm\" dense />\n              <q-input outlined label=\"Medium QInput\" class=\"control-md\" />\n              <q-input outlined label=\"Large QInput\" class=\"control-lg\" />\n              <q-select\n                outlined\n                label=\"Quasar QSelect\"\n                class=\"control-md\"\n                :options=\"['Quasar Select', 'Option B']\"\n              />\n              <q-input\n                outlined\n                type=\"textarea\"\n                label=\"Quasar Textarea\"\n                class=\"control-md\"\n                rows=\"3\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Interactive Playground -->\n      <div class=\"sandbox-section\">\n        <h2 class=\"section-title\">🎮 Interactive Playground</h2>\n        <p class=\"section-description\">\n          Test complex interactions and component combinations.\n        </p>\n\n        <div class=\"playground-area\">\n          <div class=\"playground-controls\">\n            <q-btn color=\"primary\" @click=\"showSampleDialog = true\">\n              Test Dialog\n            </q-btn>\n            <q-btn color=\"secondary\" @click=\"showSampleMenu = true\">\n              Test Menu\n            </q-btn>\n            <q-btn color=\"positive\" @click=\"showToast('positive')\">\n              Success Toast\n            </q-btn>\n            <q-btn color=\"warning\" @click=\"showToast('warning')\">\n              Warning Toast\n            </q-btn>\n            <q-btn color=\"negative\" @click=\"showToast('negative')\">\n              Error Toast\n            </q-btn>\n          </div>\n\n          <div class=\"playground-preview\">\n            <div class=\"preview-section\">\n              <h4>Sample Form</h4>\n              <q-form class=\"sample-form\">\n                <q-input\n                  v-model=\"playgroundForm.name\"\n                  outlined\n                  label=\"Full Name\"\n                  :rules=\"[val => !!val || 'Name is required']\"\n                />\n                <q-input\n                  v-model=\"playgroundForm.email\"\n                  outlined\n                  type=\"email\"\n                  label=\"Email Address\"\n                  :rules=\"[val => !!val || 'Email is required']\"\n                />\n                <q-select\n                  v-model=\"playgroundForm.role\"\n                  outlined\n                  label=\"Role\"\n                  :options=\"['Admin', 'User', 'Manager']\"\n                  :rules=\"[val => !!val || 'Role is required']\"\n                />\n                <div class=\"form-actions\">\n                  <q-btn flat label=\"Cancel\" />\n                  <q-btn color=\"primary\" label=\"Submit\" type=\"submit\" />\n                </div>\n              </q-form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Sample Dialog -->\n    <q-dialog v-model=\"showSampleDialog\">\n      <q-card style=\"min-width: 350px\">\n        <q-card-section>\n          <div class=\"text-h6\">Sample Dialog</div>\n        </q-card-section>\n        <q-card-section>\n          This is a sample dialog for testing the dialog system.\n        </q-card-section>\n        <q-card-actions align=\"right\">\n          <q-btn flat label=\"Cancel\" v-close-popup />\n          <q-btn color=\"primary\" label=\"OK\" v-close-popup />\n        </q-card-actions>\n      </q-card>\n    </q-dialog>\n\n    <!-- Sample Menu -->\n    <q-menu v-model=\"showSampleMenu\">\n      <q-list style=\"min-width: 200px\">\n        <q-item clickable v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"settings\" />\n          </q-item-section>\n          <q-item-section>Settings</q-item-section>\n        </q-item>\n        <q-item clickable v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"help\" />\n          </q-item-section>\n          <q-item-section>Help</q-item-section>\n        </q-item>\n        <q-separator />\n        <q-item clickable v-close-popup>\n          <q-item-section avatar>\n            <q-icon name=\"logout\" />\n          </q-item-section>\n          <q-item-section>Logout</q-item-section>\n        </q-item>\n      </q-list>\n    </q-menu>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n  import { useQuasar } from 'quasar';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import TokenInspector from 'src/components/TokenInspector.vue';\n\n  const $q = useQuasar();\n\n  // Button testing controls\n  const buttonSize = ref('md');\n  const buttonVariant = ref('unelevated');\n  const buttonLoading = ref(false);\n  const buttonDisabled = ref(false);\n  const buttonIcon = ref(false);\n\n  // Form field testing controls\n  const fieldType = ref('input');\n  const fieldError = ref(false);\n  const fieldDisabled = ref(false);\n  const fieldRequired = ref(false);\n  const testValue = ref('');\n  const testSelect = ref(null);\n  const testTextarea = ref('');\n\n  // Card testing controls\n  const cardElevated = ref(false);\n  const cardBordered = ref(true);\n  const cardFlat = ref(false);\n\n  // Alert testing controls\n  const alertType = ref('info');\n  const alertDismissible = ref(true);\n  const alertIcon = ref(true);\n\n  // Dialog and menu states\n  const showSampleDialog = ref(false);\n  const showSampleMenu = ref(false);\n\n  // Playground form\n  const playgroundForm = ref({\n    name: '',\n    email: '',\n    role: null\n  });\n\n  // Helper functions\n  function getAlertIcon(type: string) {\n    switch (type) {\n      case 'info': return 'info';\n      case 'positive': return 'check_circle';\n      case 'warning': return 'warning';\n      case 'negative': return 'error';\n      default: return 'info';\n    }\n  }\n\n  function getAlertTitle(type: string) {\n    switch (type) {\n      case 'info': return 'Information';\n      case 'positive': return 'Success';\n      case 'warning': return 'Warning';\n      case 'negative': return 'Error';\n      default: return 'Notice';\n    }\n  }\n\n  function showToast(type: string) {\n    const messages = {\n      positive: 'Operation completed successfully!',\n      warning: 'Please review your input',\n      negative: 'An error occurred'\n    };\n\n    $q.notify({\n      type,\n      message: messages[type as keyof typeof messages],\n      position: 'top-right',\n      timeout: 3000,\n      actions: [{ icon: 'close', color: 'white' }]\n    });\n  }\n</script>\n\n<style scoped lang=\"scss\">\n  .sandbox-container {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-8);\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 var(--space-4);\n  }\n\n  .sandbox-section {\n    .section-title {\n      font-size: var(--text-2xl);\n      font-weight: var(--font-weight-bold);\n      margin: 0 0 var(--space-3) 0;\n      color: var(--text-primary);\n    }\n\n    .section-description {\n      font-size: var(--text-base);\n      color: var(--text-secondary);\n      margin-bottom: var(--space-6);\n      line-height: var(--leading-relaxed);\n    }\n  }\n\n  // Testing Grid\n  .testing-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n    gap: var(--space-6);\n  }\n\n  .test-card {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-lg);\n    padding: var(--space-6);\n    box-shadow: var(--shadow-sm);\n\n    h3 {\n      margin: 0 0 var(--space-4) 0;\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--text-primary);\n    }\n\n    .test-controls {\n      display: flex;\n      flex-direction: column;\n      gap: var(--space-3);\n      margin-bottom: var(--space-4);\n      padding: var(--space-4);\n      background: var(--bg-tertiary);\n      border-radius: var(--radius-base);\n\n      .control-row {\n        display: flex;\n        align-items: center;\n        gap: var(--space-3);\n        flex-wrap: wrap;\n\n        label {\n          font-size: var(--text-sm);\n          font-weight: var(--font-weight-medium);\n          color: var(--text-primary);\n          min-width: 60px;\n        }\n      }\n    }\n\n    .test-preview {\n      padding: var(--space-4);\n      border: 2px dashed var(--border-secondary);\n      border-radius: var(--radius-base);\n      background: var(--bg-primary);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 80px;\n    }\n  }\n\n  // Comparison Grid\n  .comparison-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: var(--space-6);\n  }\n\n  .comparison-column {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-lg);\n    padding: var(--space-6);\n\n    h3 {\n      margin: 0 0 var(--space-4) 0;\n      font-size: var(--text-lg);\n      font-weight: var(--font-weight-semibold);\n      color: var(--text-primary);\n      text-align: center;\n      padding-bottom: var(--space-3);\n      border-bottom: 1px solid var(--border-primary);\n    }\n\n    .native-controls,\n    .quasar-controls {\n      display: flex;\n      flex-direction: column;\n      gap: var(--space-4);\n    }\n  }\n\n  // Playground\n  .playground-area {\n    display: flex;\n    flex-direction: column;\n    gap: var(--space-6);\n  }\n\n  .playground-controls {\n    display: flex;\n    gap: var(--space-3);\n    flex-wrap: wrap;\n    padding: var(--space-4);\n    background: var(--bg-secondary);\n    border-radius: var(--radius-lg);\n    border: 1px solid var(--border-primary);\n  }\n\n  .playground-preview {\n    background: var(--bg-secondary);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-lg);\n    padding: var(--space-6);\n\n    .preview-section {\n      h4 {\n        margin: 0 0 var(--space-4) 0;\n        font-size: var(--text-base);\n        font-weight: var(--font-weight-semibold);\n        color: var(--text-primary);\n      }\n\n      .sample-form {\n        display: flex;\n        flex-direction: column;\n        gap: var(--space-4);\n        max-width: 400px;\n\n        .form-actions {\n          display: flex;\n          gap: var(--space-3);\n          justify-content: flex-end;\n          margin-top: var(--space-4);\n        }\n      }\n    }\n  }\n\n  // Alert styles\n  .alert-info {\n    background: rgba(30, 64, 175, 0.1);\n    border-left: 4px solid var(--brand-info);\n    color: var(--brand-info);\n  }\n\n  .alert-positive {\n    background: rgba(5, 150, 105, 0.1);\n    border-left: 4px solid var(--brand-success);\n    color: var(--brand-success);\n  }\n\n  .alert-warning {\n    background: rgba(217, 119, 6, 0.1);\n    border-left: 4px solid var(--brand-warning);\n    color: var(--brand-warning);\n  }\n\n  .alert-negative {\n    background: rgba(185, 28, 28, 0.1);\n    border-left: 4px solid var(--brand-danger);\n    color: var(--brand-danger);\n  }\n\n  // Card variants\n  .card-elevated {\n    box-shadow: var(--shadow-lg);\n  }\n\n  .card-bordered {\n    border: 2px solid var(--border-primary);\n  }\n\n  .card-flat {\n    box-shadow: none;\n    border: none;\n  }\n\n  // Native form controls styling\n  .form-control {\n    width: 100%;\n    padding: var(--control-pad-y) var(--control-pad-x);\n    border: 1px solid var(--border-primary);\n    border-radius: var(--radius-md);\n    font-size: var(--control-font-md);\n    font-family: var(--font-family);\n    background: var(--bg-primary);\n    color: var(--text-primary);\n    transition: all var(--transition-base);\n\n    &:focus {\n      outline: none;\n      border-color: var(--brand-primary);\n      box-shadow: var(--focus-ring);\n    }\n\n    &.control-sm {\n      height: var(--control-height-sm);\n      font-size: var(--control-font-sm);\n    }\n\n    &.control-md {\n      height: var(--control-height-md);\n      font-size: var(--control-font-md);\n    }\n\n    &.control-lg {\n      height: var(--control-height-lg);\n      font-size: var(--control-font-lg);\n    }\n\n    &::placeholder {\n      color: var(--text-tertiary);\n    }\n  }\n\n  // Responsive adjustments\n  @media (max-width: 768px) {\n    .sandbox-container {\n      padding: 0 var(--space-3);\n    }\n\n    .testing-grid {\n      grid-template-columns: 1fr;\n    }\n\n    .comparison-grid {\n      grid-template-columns: 1fr;\n    }\n\n    .playground-controls {\n      justify-content: center;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\SuppliersPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 16,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 31,
        "fix": { "range": [351, 405], "text": ":loading=\"loading\"\r\n            @click=\"loadSuppliers\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [351, 442],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"loadSuppliers\"\r\n            :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 25,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 25,
        "endColumn": 23,
        "fix": { "range": [661, 709], "text": "unelevated\r\n            @click=\"importSuppliers\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 26,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 26,
        "endColumn": 20,
        "fix": {
          "range": [661, 730],
          "text": "no-caps\r\n            @click=\"importSuppliers\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 27,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 27,
        "endColumn": 38,
        "fix": {
          "range": [661, 769],
          "text": "class=\"app-btn-secondary\"\r\n            @click=\"importSuppliers\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 33,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 33,
        "endColumn": 23,
        "fix": { "range": [893, 939], "text": "unelevated\r\n            @click=\"openAddDialog\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 34,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 34,
        "endColumn": 20,
        "fix": {
          "range": [893, 960],
          "text": "no-caps\r\n            @click=\"openAddDialog\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 35,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 35,
        "endColumn": 36,
        "fix": {
          "range": [893, 997],
          "text": "class=\"app-btn-success\"\r\n            @click=\"openAddDialog\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 45,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 45,
        "endColumn": 31,
        "fix": {
          "range": [1180, 1243],
          "text": "v-model=\"filterValues\"\r\n        :preset=\"suppliersFilterPreset\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 49,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 49,
        "endColumn": 27,
        "fix": { "range": [1327, 1381], "text": ":loading=\"loading\"\r\n        @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 50,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 50,
        "endColumn": 20,
        "fix": {
          "range": [1327, 1402],
          "text": "collapsible\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 51,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 51,
        "endColumn": 39,
        "fix": {
          "range": [1327, 1442],
          "text": "class=\"suppliers-filter-panel\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 173,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 173,
        "endColumn": 49,
        "fix": {
          "range": [5267, 5357],
          "text": ":loading=\"syncing[props.row.id]\"\r\n                @click=\"syncSupplierProducts(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 455,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 455,
        "endColumn": 59,
        "fix": {
          "range": [14258, 14365],
          "text": ":loading=\"syncing[selectedSupplier?.id]\"\r\n                  @click=\"syncSupplierProducts(selectedSupplier)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 456,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 456,
        "endColumn": 29,
        "fix": {
          "range": [14258, 14395],
          "text": "unelevated\r\n                  @click=\"syncSupplierProducts(selectedSupplier)\"\r\n                  :loading=\"syncing[selectedSupplier?.id]\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 463,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 463,
        "endColumn": 29,
        "fix": { "range": [14590, 14652], "text": "unelevated\r\n                  @click=\"editSupplierIntegration\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 470,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 470,
        "endColumn": 29,
        "fix": { "range": [14847, 14900], "text": "unelevated\r\n                  @click=\"testConnection\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 515,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 515,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16295, 16298], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16295, 16298], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 516,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 516,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16339, 16342], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16339, 16342], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 544,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 544,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17032, 17035], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17032, 17035], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 547,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 547,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17080, 17083], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17080, 17083], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 17,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('suppliersPage.title')\"\r\n        :subtitle=\"$t('suppliersPage.subtitle')\"\r\n        icon=\"corporate_fare\"\r\n      >\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"loadSuppliers\"\r\n            :loading=\"loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n          <q-btn\r\n            icon=\"cloud_upload\"\r\n            :label=\"$t('suppliersPage.importSuppliers')\"\r\n            @click=\"importSuppliers\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-secondary\"\r\n          />\r\n          <q-btn\r\n            icon=\"add\"\r\n            :label=\"$t('suppliersPage.addSupplier')\"\r\n            @click=\"openAddDialog\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-success\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- FilterPanel component -->\r\n    <div class=\"filters-section q-mb-lg\">\r\n      <FilterPanel\r\n        :preset=\"suppliersFilterPreset\"\r\n        v-model=\"filterValues\"\r\n        @change=\"handleFilterChange\"\r\n        @reset=\"handleFilterReset\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible\r\n        class=\"suppliers-filter-panel\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Suppliers Table -->\r\n    <div class=\"medical-table\">\r\n      <q-table\r\n        :rows=\"filteredSuppliers\"\r\n        :columns=\"columns\"\r\n        row-key=\"id\"\r\n        :loading=\"loading\"\r\n        :pagination=\"{ rowsPerPage: 25 }\"\r\n        flat\r\n        bordered\r\n        separator=\"cell\"\r\n      >\r\n        <template #body-cell-status=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              :color=\"props.row.active ? 'positive' : 'negative'\"\r\n              :label=\"\r\n                props.row.active\r\n                  ? $t('suppliersPage.active')\r\n                  : $t('suppliersPage.inactive')\r\n              \"\r\n              text-color=\"white\"\r\n              dense\r\n            />\r\n          </q-td>\r\n        </template>\r\n\r\n        <template #body-cell-magento_link=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              v-if=\"props.row.magento_vendor_id\"\r\n              color=\"primary\"\r\n              :label=\"props.row.magento_vendor_id\"\r\n              text-color=\"white\"\r\n              dense\r\n            />\r\n            <q-chip\r\n              v-else\r\n              color=\"grey-5\"\r\n              :label=\"$t('suppliersPage.notLinked')\"\r\n              text-color=\"grey-8\"\r\n              dense\r\n            />\r\n          </q-td>\r\n        </template>\r\n\r\n        <template #body-cell-integration_status=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"column q-gutter-xs\">\r\n              <q-chip\r\n                :color=\"getIntegrationTypeColor(props.row.integration_type)\"\r\n                :label=\"getIntegrationTypeLabel(props.row.integration_type)\"\r\n                text-color=\"white\"\r\n                dense\r\n              />\r\n              <q-chip\r\n                v-if=\"props.row.integration_type !== 'manual'\"\r\n                :color=\"props.row.auto_sync_enabled ? 'positive' : 'grey-5'\"\r\n                :label=\"\r\n                  props.row.auto_sync_enabled\r\n                    ? $t('suppliersPage.autoSyncOn')\r\n                    : $t('suppliersPage.autoSyncOff')\r\n                \"\r\n                :text-color=\"props.row.auto_sync_enabled ? 'white' : 'grey-8'\"\r\n                dense\r\n                size=\"sm\"\r\n              />\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <template #body-cell-order_method=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-chip\r\n              :color=\"getOrderMethodColor(props.row.order_method)\"\r\n              :label=\"getOrderMethodLabel(props.row.order_method)\"\r\n              text-color=\"white\"\r\n              dense\r\n            />\r\n          </q-td>\r\n        </template>\r\n\r\n        <template #body-cell-last_sync=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div v-if=\"props.row.last_sync_at\" class=\"text-caption\">\r\n              {{ formatDate(props.row.last_sync_at) }}\r\n            </div>\r\n            <div v-else class=\"text-grey-6 text-caption\">\r\n              {{ $t('suppliersPage.neverSynced') }}\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n\r\n        <template #body-cell-actions=\"props\">\r\n          <q-td :props=\"props\">\r\n            <div class=\"row q-gutter-xs\">\r\n              <q-btn\r\n                flat\r\n                round\r\n                dense\r\n                icon=\"settings\"\r\n                size=\"sm\"\r\n                color=\"primary\"\r\n                @click=\"configureIntegration(props.row)\"\r\n              >\r\n                <q-tooltip>{{\r\n                  $t('suppliersPage.configureIntegration')\r\n                }}</q-tooltip>\r\n              </q-btn>\r\n              <q-btn\r\n                v-if=\"canSync(props.row)\"\r\n                flat\r\n                round\r\n                dense\r\n                icon=\"sync\"\r\n                size=\"sm\"\r\n                color=\"positive\"\r\n                @click=\"syncSupplierProducts(props.row)\"\r\n                :loading=\"syncing[props.row.id]\"\r\n              >\r\n                <q-tooltip>{{ $t('suppliersPage.syncProducts') }}</q-tooltip>\r\n              </q-btn>\r\n              <q-btn\r\n                flat\r\n                round\r\n                dense\r\n                icon=\"edit\"\r\n                size=\"sm\"\r\n                @click=\"editSupplier(props.row)\"\r\n              >\r\n                <q-tooltip>{{ $t('suppliersPage.editSupplier') }}</q-tooltip>\r\n              </q-btn>\r\n              <q-btn\r\n                flat\r\n                round\r\n                dense\r\n                icon=\"delete\"\r\n                size=\"sm\"\r\n                color=\"negative\"\r\n                @click=\"deleteSupplier(props.row)\"\r\n              >\r\n                <q-tooltip>{{ $t('suppliersPage.deleteSupplier') }}</q-tooltip>\r\n              </q-btn>\r\n            </div>\r\n          </q-td>\r\n        </template>\r\n      </q-table>\r\n    </div>\r\n\r\n    <!-- Add/Edit Supplier Dialog -->\r\n    <FormDialog\r\n      v-model=\"showDialog\"\r\n      :title=\"\r\n        editingSupplier\r\n          ? $t('suppliersPage.editSupplier')\r\n          : $t('suppliersPage.addSupplier')\r\n      \"\r\n      icon=\"business\"\r\n      size=\"lg\"\r\n      :loading=\"saving\"\r\n      @submit=\"saveSupplier\"\r\n      @cancel=\"closeDialog\"\r\n    >\r\n      <div class=\"supplier-form-content q-gutter-md\">\r\n        <q-input\r\n          v-model=\"supplierForm.name\"\r\n          :label=\"$t('suppliersPage.supplierName')\"\r\n          outlined\r\n          :rules=\"[val => !!val || $t('validation.required')]\"\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.contact_email\"\r\n          :label=\"$t('suppliersPage.contactEmail')\"\r\n          outlined\r\n          type=\"email\"\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.contact_phone\"\r\n          :label=\"$t('suppliersPage.contactPhone')\"\r\n          outlined\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.website\"\r\n          :label=\"$t('suppliersPage.website')\"\r\n          outlined\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.address\"\r\n          :label=\"$t('suppliersPage.address')\"\r\n          outlined\r\n          type=\"textarea\"\r\n        />\r\n\r\n        <div class=\"row q-gutter-md\">\r\n          <q-input\r\n            v-model=\"supplierForm.city\"\r\n            :label=\"$t('suppliersPage.city')\"\r\n            outlined\r\n            style=\"flex: 1\"\r\n          />\r\n\r\n          <q-input\r\n            v-model=\"supplierForm.postal_code\"\r\n            :label=\"$t('suppliersPage.postalCode')\"\r\n            outlined\r\n            style=\"max-width: 150px\"\r\n          />\r\n        </div>\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.country\"\r\n          :label=\"$t('suppliersPage.country')\"\r\n          outlined\r\n        />\r\n\r\n        <q-input\r\n          v-model.number=\"supplierForm.magento_vendor_id\"\r\n          :label=\"$t('suppliersPage.magentoVendorId')\"\r\n          outlined\r\n          type=\"number\"\r\n        />\r\n\r\n        <q-input\r\n          v-model=\"supplierForm.notes\"\r\n          :label=\"$t('suppliersPage.notes')\"\r\n          outlined\r\n          type=\"textarea\"\r\n        />\r\n\r\n        <q-separator />\r\n\r\n        <!-- Integration Configuration Section -->\r\n        <div class=\"text-h6 q-mt-md\">\r\n          {{ $t('suppliersPage.integrationSettings') }}\r\n        </div>\r\n\r\n        <div class=\"row q-gutter-md\">\r\n          <q-select\r\n            v-model=\"supplierForm.integration_type\"\r\n            :options=\"integrationTypeOptions\"\r\n            :label=\"$t('suppliersPage.integrationType')\"\r\n            outlined\r\n            emit-value\r\n            map-options\r\n            style=\"flex: 1\"\r\n          />\r\n\r\n          <q-select\r\n            v-model=\"supplierForm.order_method\"\r\n            :options=\"orderMethodOptions\"\r\n            :label=\"$t('suppliersPage.orderMethod')\"\r\n            outlined\r\n            emit-value\r\n            map-options\r\n            style=\"flex: 1\"\r\n          />\r\n        </div>\r\n\r\n        <q-toggle\r\n          v-model=\"supplierForm.auto_sync_enabled\"\r\n          :label=\"$t('suppliersPage.autoSyncEnabled')\"\r\n          :disable=\"supplierForm.integration_type === 'manual'\"\r\n          color=\"positive\"\r\n        />\r\n\r\n        <!-- Integration Config based on type -->\r\n        <div\r\n          v-if=\"supplierForm.integration_type === 'email'\"\r\n          class=\"q-gutter-md\"\r\n        >\r\n          <q-input\r\n            v-model=\"integrationConfig.order_email\"\r\n            :label=\"$t('suppliersPage.orderEmail')\"\r\n            outlined\r\n            type=\"email\"\r\n          />\r\n        </div>\r\n\r\n        <div v-if=\"supplierForm.integration_type === 'api'\" class=\"q-gutter-md\">\r\n          <q-input\r\n            v-model=\"integrationConfig.api_endpoint\"\r\n            :label=\"$t('suppliersPage.apiEndpoint')\"\r\n            outlined\r\n          />\r\n          <q-input\r\n            v-model=\"integrationConfig.api_key\"\r\n            :label=\"$t('suppliersPage.apiKey')\"\r\n            outlined\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n\r\n        <div v-if=\"supplierForm.integration_type === 'edi'\" class=\"q-gutter-md\">\r\n          <q-input\r\n            v-model=\"integrationConfig.edi_endpoint\"\r\n            :label=\"$t('suppliersPage.ediEndpoint')\"\r\n            outlined\r\n          />\r\n          <q-input\r\n            v-model=\"integrationConfig.edi_partner_id\"\r\n            :label=\"$t('suppliersPage.ediPartnerId')\"\r\n            outlined\r\n          />\r\n        </div>\r\n\r\n        <q-toggle\r\n          v-model=\"supplierForm.active\"\r\n          :label=\"$t('suppliersPage.activeSupplier')\"\r\n          color=\"positive\"\r\n        />\r\n      </div>\r\n    </FormDialog>\r\n\r\n    <!-- Integration Configuration Dialog -->\r\n    <q-dialog v-model=\"showIntegrationDialog\">\r\n      <q-card style=\"min-width: 600px\">\r\n        <q-card-section>\r\n          <div class=\"text-h6\">\r\n            {{ $t('suppliersPage.configureIntegration') }} -\r\n            {{ selectedSupplier?.name }}\r\n          </div>\r\n        </q-card-section>\r\n\r\n        <q-card-section>\r\n          <div class=\"q-gutter-md\">\r\n            <q-banner\r\n              v-if=\"selectedSupplier?.integration_type === 'manual'\"\r\n              class=\"bg-grey-2\"\r\n            >\r\n              <template #avatar>\r\n                <q-icon name=\"info\" color=\"grey-7\" />\r\n              </template>\r\n              {{ $t('suppliersPage.manualIntegrationInfo') }}\r\n            </q-banner>\r\n\r\n            <div v-else>\r\n              <div class=\"row q-gutter-md q-mb-md\">\r\n                <div class=\"col\">\r\n                  <q-card flat bordered>\r\n                    <q-card-section>\r\n                      <div class=\"text-subtitle2\">\r\n                        {{ $t('suppliersPage.currentConfig') }}\r\n                      </div>\r\n                      <div class=\"q-mt-sm\">\r\n                        <div>\r\n                          <strong\r\n                            >{{ $t('suppliersPage.integrationType') }}:</strong\r\n                          >\r\n                          {{\r\n                            getIntegrationTypeLabel(\r\n                              selectedSupplier?.integration_type\r\n                            )\r\n                          }}\r\n                        </div>\r\n                        <div>\r\n                          <strong\r\n                            >{{ $t('suppliersPage.orderMethod') }}:</strong\r\n                          >\r\n                          {{\r\n                            getOrderMethodLabel(selectedSupplier?.order_method)\r\n                          }}\r\n                        </div>\r\n                        <div>\r\n                          <strong>{{ $t('suppliersPage.autoSync') }}:</strong>\r\n                          <q-chip\r\n                            :color=\"\r\n                              selectedSupplier?.auto_sync_enabled\r\n                                ? 'positive'\r\n                                : 'negative'\r\n                            \"\r\n                            :label=\"\r\n                              selectedSupplier?.auto_sync_enabled\r\n                                ? $t('common.yes')\r\n                                : $t('common.no')\r\n                            \"\r\n                            text-color=\"white\"\r\n                            dense\r\n                          />\r\n                        </div>\r\n                        <div v-if=\"selectedSupplier?.last_sync_at\">\r\n                          <strong>{{ $t('suppliersPage.lastSync') }}:</strong>\r\n                          {{ formatDate(selectedSupplier.last_sync_at) }}\r\n                        </div>\r\n                      </div>\r\n                    </q-card-section>\r\n                  </q-card>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"row q-gutter-md\">\r\n                <q-btn\r\n                  v-if=\"canSync(selectedSupplier)\"\r\n                  color=\"positive\"\r\n                  icon=\"sync\"\r\n                  :label=\"$t('suppliersPage.syncNow')\"\r\n                  @click=\"syncSupplierProducts(selectedSupplier)\"\r\n                  :loading=\"syncing[selectedSupplier?.id]\"\r\n                  unelevated\r\n                />\r\n                <q-btn\r\n                  color=\"primary\"\r\n                  icon=\"settings\"\r\n                  :label=\"$t('suppliersPage.editSettings')\"\r\n                  @click=\"editSupplierIntegration\"\r\n                  unelevated\r\n                />\r\n                <q-btn\r\n                  color=\"secondary\"\r\n                  icon=\"send\"\r\n                  :label=\"$t('suppliersPage.testConnection')\"\r\n                  @click=\"testConnection\"\r\n                  unelevated\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n\r\n        <q-card-actions align=\"right\">\r\n          <q-btn\r\n            flat\r\n            :label=\"$t('common.close')\"\r\n            @click=\"closeIntegrationDialog\"\r\n          />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted } from 'vue';\r\n  import { useQuasar } from 'quasar';\r\n  import { useI18n } from 'vue-i18n';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\r\n  import FormDialog from 'src/components/base/FormDialog.vue';\r\n  import { suppliersFilterPreset } from '@/presets/filters/suppliers';\r\n  import { supabase } from 'src/services/supabase';\r\n  import { monitoringService } from 'src/services/monitoring';\r\n  import { useTableSorting } from 'src/composables/useTableSorting';\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from '@/types/filters';\r\n\r\n  const $q = useQuasar();\r\n  const { t } = useI18n();\r\n\r\n  // Refs\r\n  const loading = ref(false);\r\n  const saving = ref(false);\r\n  const showDialog = ref(false);\r\n  const showIntegrationDialog = ref(false);\r\n  const editingSupplier = ref<any>(null);\r\n  const selectedSupplier = ref<any>(null);\r\n  const syncing = ref<Record<string, boolean>>({});\r\n\r\n  // New filter state for FilterPanel\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Form data\r\n  const supplierForm = ref({\r\n    name: '',\r\n    code: '',\r\n    contact_email: '',\r\n    contact_phone: '',\r\n    contact_person: '',\r\n    website: '',\r\n    address: '',\r\n    city: '',\r\n    postal_code: '',\r\n    country: 'Netherlands',\r\n    magento_vendor_id: null as number | null,\r\n    notes: '',\r\n    active: true,\r\n    integration_type: 'manual',\r\n    order_method: 'manual',\r\n    auto_sync_enabled: false,\r\n    integration_config: {},\r\n  });\r\n\r\n  // Integration config separate object\r\n  const integrationConfig = ref<any>({});\r\n\r\n  // Data\r\n  const suppliers = ref<any[]>([]);\r\n\r\n  // Integration type options\r\n  const integrationTypeOptions = computed(() => [\r\n    { label: t('suppliersPage.integrationTypes.manual'), value: 'manual' },\r\n    { label: t('suppliersPage.integrationTypes.email'), value: 'email' },\r\n    { label: t('suppliersPage.integrationTypes.api'), value: 'api' },\r\n    { label: t('suppliersPage.integrationTypes.edi'), value: 'edi' },\r\n    { label: t('suppliersPage.integrationTypes.magento'), value: 'magento' },\r\n  ]);\r\n\r\n  // Order method options\r\n  const orderMethodOptions = computed(() => [\r\n    { label: t('suppliersPage.orderMethods.manual'), value: 'manual' },\r\n    { label: t('suppliersPage.orderMethods.email'), value: 'email' },\r\n    { label: t('suppliersPage.orderMethods.api'), value: 'api' },\r\n    { label: t('suppliersPage.orderMethods.pdf'), value: 'pdf' },\r\n  ]);\r\n\r\n  // Helper functions for UI\r\n  const getIntegrationTypeColor = (type: string) => {\r\n    const colors: Record<string, string> = {\r\n      manual: 'grey-6',\r\n      email: 'blue',\r\n      api: 'green',\r\n      edi: 'purple',\r\n      magento: 'orange',\r\n    };\r\n    return colors[type] || 'grey-6';\r\n  };\r\n\r\n  const getIntegrationTypeLabel = (type: string) => {\r\n    const option = integrationTypeOptions.value.find(opt => opt.value === type);\r\n    return option?.label || type;\r\n  };\r\n\r\n  const getOrderMethodColor = (method: string) => {\r\n    const colors: Record<string, string> = {\r\n      manual: 'grey-6',\r\n      email: 'blue',\r\n      api: 'green',\r\n      pdf: 'orange',\r\n    };\r\n    return colors[method] || 'grey-6';\r\n  };\r\n\r\n  const getOrderMethodLabel = (method: string) => {\r\n    const option = orderMethodOptions.value.find(opt => opt.value === method);\r\n    return option?.label || method;\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  const canSync = (supplier: Supplier) => {\r\n    return supplier.integration_type !== 'manual' && supplier.auto_sync_enabled;\r\n  };\r\n\r\n  // Filter event handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    // Filter logic is handled by computed property\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    filterValues.value = {};\r\n    if (suppliersFilterPreset.defaultFilters) {\r\n      Object.assign(filterValues.value, suppliersFilterPreset.defaultFilters);\r\n    }\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    filterValues.value = {};\r\n  };\r\n\r\n  // Computed\r\n  const filteredSuppliers = computed(() => {\r\n    let filtered = suppliers.value;\r\n\r\n    // Apply search filter\r\n    const searchTerm = filterValues.value.search;\r\n    if (searchTerm) {\r\n      const search = String(searchTerm).toLowerCase();\r\n      filtered = filtered.filter(\r\n        supplier =>\r\n          supplier.name?.toLowerCase().includes(search) ||\r\n          supplier.contact_email?.toLowerCase().includes(search) ||\r\n          supplier.contact_phone?.toLowerCase().includes(search)\r\n      );\r\n    }\r\n\r\n    // Apply status filter\r\n    const statusFilter = filterValues.value.status;\r\n    if (\r\n      statusFilter !== undefined &&\r\n      statusFilter !== null &&\r\n      statusFilter !== ''\r\n    ) {\r\n      const isActive = Boolean(statusFilter);\r\n      filtered = filtered.filter(supplier => supplier.active === isActive);\r\n    }\r\n\r\n    // Apply integration type filter\r\n    const integrationType = filterValues.value.integration_type;\r\n    if (integrationType) {\r\n      filtered = filtered.filter(supplier => {\r\n        if (integrationType === 'manual') {\r\n          return !supplier.magento_vendor_id;\r\n        } else if (integrationType === 'magento') {\r\n          return supplier.magento_vendor_id;\r\n        } else if (integrationType === 'api') {\r\n          // Add logic for API integration when available\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Apply country filter\r\n    const country = filterValues.value.country;\r\n    if (country) {\r\n      filtered = filtered.filter(supplier => supplier.country === country);\r\n    }\r\n\r\n    // Apply city filter\r\n    const city = filterValues.value.city;\r\n    if (city) {\r\n      filtered = filtered.filter(supplier => supplier.city === city);\r\n    }\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Table columns with enhanced configuration\r\n  const columns = computed(() => [\r\n    {\r\n      name: 'name',\r\n      label: t('suppliersPage.name'),\r\n      field: 'name',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      classes: 'col-name',\r\n      headerClasses: 'col-name',\r\n    },\r\n    {\r\n      name: 'integration_status',\r\n      label: t('suppliersPage.integrationStatus'),\r\n      field: 'integration_type',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'order_method',\r\n      label: t('suppliersPage.orderMethod'),\r\n      field: 'order_method',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'contact_email',\r\n      label: t('suppliersPage.email'),\r\n      field: 'contact_email',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'contact_phone',\r\n      label: t('suppliersPage.phone'),\r\n      field: 'contact_phone',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'city',\r\n      label: t('suppliersPage.city'),\r\n      field: 'city',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'last_sync',\r\n      label: t('suppliersPage.lastSync'),\r\n      field: 'last_sync_at',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: t('suppliersPage.status'),\r\n      field: 'active',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('suppliersPage.actions'),\r\n      field: '',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      classes: 'col-actions',\r\n      headerClasses: 'col-actions',\r\n    },\r\n  ]);\r\n\r\n  // Methods\r\n  const loadSuppliers = async () => {\r\n    try {\r\n      loading.value = true;\r\n      const { data, error } = await supabase\r\n        .from('suppliers')\r\n        .select('*')\r\n        .order('name');\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      suppliers.value = data || [];\r\n    } catch (error: unknown) {\r\n      console.error('Failed to load suppliers:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('suppliersPage.loadError'),\r\n      });\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const openAddDialog = () => {\r\n    editingSupplier.value = null;\r\n    supplierForm.value = {\r\n      name: '',\r\n      code: '',\r\n      contact_email: '',\r\n      contact_phone: '',\r\n      contact_person: '',\r\n      website: '',\r\n      address: '',\r\n      city: '',\r\n      postal_code: '',\r\n      country: 'Netherlands',\r\n      magento_vendor_id: null,\r\n      notes: '',\r\n      active: true,\r\n      integration_type: 'manual',\r\n      order_method: 'manual',\r\n      auto_sync_enabled: false,\r\n      integration_config: {},\r\n    };\r\n    integrationConfig.value = {};\r\n    showDialog.value = true;\r\n  };\r\n\r\n  const editSupplier = (supplier: Supplier) => {\r\n    editingSupplier.value = supplier;\r\n    supplierForm.value = { ...supplier };\r\n    integrationConfig.value = supplier.integration_config || {};\r\n    showDialog.value = true;\r\n  };\r\n\r\n  const saveSupplier = async () => {\r\n    try {\r\n      saving.value = true;\r\n\r\n      // Merge integration config into the supplier form\r\n      const supplierData = {\r\n        ...supplierForm.value,\r\n        integration_config: integrationConfig.value,\r\n      };\r\n\r\n      if (editingSupplier.value) {\r\n        // Update existing supplier\r\n        const { error } = await supabase\r\n          .from('suppliers')\r\n          .update(supplierData)\r\n          .eq('id', editingSupplier.value.id);\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('suppliersPage.supplierUpdated'),\r\n        });\r\n      } else {\r\n        // Create new supplier\r\n        const { error } = await supabase\r\n          .from('suppliers')\r\n          .insert([supplierData]);\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('suppliersPage.supplierCreated'),\r\n        });\r\n      }\r\n\r\n      showDialog.value = false;\r\n      await loadSuppliers();\r\n    } catch (error: unknown) {\r\n      console.error('Failed to save supplier:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('suppliersPage.saveError'),\r\n      });\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  const deleteSupplier = async (supplier: Supplier) => {\r\n    try {\r\n      const confirmed = await new Promise(resolve => {\r\n        $q.dialog({\r\n          title: t('suppliersPage.confirmDelete'),\r\n          message: t('suppliersPage.confirmDeleteMessage', {\r\n            name: supplier.name,\r\n          }),\r\n          cancel: true,\r\n          persistent: true,\r\n        })\r\n          .onOk(() => resolve(true))\r\n          .onCancel(() => resolve(false));\r\n      });\r\n\r\n      if (!confirmed) {\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('suppliers')\r\n        .delete()\r\n        .eq('id', supplier.id);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('suppliersPage.supplierDeleted'),\r\n      });\r\n\r\n      await loadSuppliers();\r\n    } catch (error: unknown) {\r\n      console.error('Failed to delete supplier:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('suppliersPage.deleteError'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    showDialog.value = false;\r\n    editingSupplier.value = null;\r\n  };\r\n\r\n  const importSuppliers = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('common.comingSoon'),\r\n    });\r\n  };\r\n\r\n  const configureIntegration = (supplier: Supplier) => {\r\n    selectedSupplier.value = supplier;\r\n    showIntegrationDialog.value = true;\r\n  };\r\n\r\n  const closeIntegrationDialog = () => {\r\n    showIntegrationDialog.value = false;\r\n    selectedSupplier.value = null;\r\n  };\r\n\r\n  const editSupplierIntegration = () => {\r\n    editingSupplier.value = selectedSupplier.value;\r\n    supplierForm.value = { ...selectedSupplier.value };\r\n    showDialog.value = true;\r\n    closeIntegrationDialog();\r\n  };\r\n\r\n  const testConnection = async () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('suppliersPage.testingConnection'),\r\n    });\r\n    try {\r\n      // Simulate connection test - in real implementation, this would call the actual integration\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('suppliersPage.connectionSuccessful'),\r\n      });\r\n    } catch (error: unknown) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('suppliersPage.connectionFailed', { error: error.message }),\r\n      });\r\n    }\r\n  };\r\n\r\n  const syncSupplierProducts = async (supplier: Supplier) => {\r\n    if (!canSync(supplier)) {\r\n      $q.notify({\r\n        type: 'warning',\r\n        message: t('suppliersPage.syncDisabledWarning'),\r\n      });\r\n      return;\r\n    }\r\n\r\n    syncing.value[supplier.id] = true;\r\n    try {\r\n      // Call the sync function we created in the database\r\n      const { data, error } = await supabase.rpc('sync_supplier_products', {\r\n        supplier_uuid: supplier.id,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      if (data?.success) {\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('suppliersPage.syncSuccess', {\r\n            name: supplier.name,\r\n            count: data.products_synced,\r\n          }),\r\n        });\r\n        // Reload suppliers to get updated sync time\r\n        await loadSuppliers();\r\n      } else {\r\n        throw new Error(data?.error || 'Sync failed');\r\n      }\r\n    } catch (error: unknown) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('suppliersPage.syncFailed', {\r\n          name: supplier.name,\r\n          error: error.message,\r\n        }),\r\n      });\r\n    } finally {\r\n      syncing.value[supplier.id] = false;\r\n    }\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    await loadSuppliers();\r\n\r\n    // Initialize filter values with defaults\r\n    if (suppliersFilterPreset.defaultFilters) {\r\n      Object.assign(filterValues.value, suppliersFilterPreset.defaultFilters);\r\n    }\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .filters-section {\r\n    .suppliers-filter-panel {\r\n      // Custom styling for the FilterPanel in suppliers page\r\n    }\r\n  }\r\n\r\n  .btn-modern {\r\n    border-radius: 8px;\r\n    font-weight: 500;\r\n    text-transform: none;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\auth\\LoginPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit.prevent\".",
        "line": 3,
        "column": 43,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 3,
        "endColumn": 61,
        "fix": { "range": [62, 110], "text": "class=\"login-form\" @submit.prevent=\"handleLogin\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"novalidate\" should go before \"@submit.prevent\".",
        "line": 3,
        "column": 62,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 3,
        "endColumn": 72,
        "fix": { "range": [62, 121], "text": "novalidate @submit.prevent=\"handleLogin\" class=\"login-form\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 21,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 21,
        "endColumn": 39,
        "fix": { "range": [802, 816], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 46,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 46,
        "endColumn": 39,
        "fix": { "range": [1724, 1738], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#append' instead of 'v-slot:append'.",
        "line": 49,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 49,
        "endColumn": 38,
        "fix": { "range": [1851, 1864], "text": "#append" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 56,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 42,
        "fix": {
          "range": [2057, 2137],
          "text": "class=\"password-toggle\"\r\n                  @click=\"showPassword = !showPassword\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"tabindex\" should go before \"@click\".",
        "line": 57,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 57,
        "endColumn": 32,
        "fix": {
          "range": [2057, 2170],
          "text": "tabindex=\"-1\"\r\n                  @click=\"showPassword = !showPassword\"\r\n                  class=\"password-toggle\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":aria-label\" should go before \"@click\".",
        "line": 58,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 62,
        "endColumn": 20,
        "fix": {
          "range": [2057, 2356],
          "text": ":aria-label=\"\r\n                    showPassword\r\n                      ? $t('auth.hidePassword')\r\n                      : $t('auth.showPassword')\r\n                  \"\r\n                  @click=\"showPassword = !showPassword\"\r\n                  class=\"password-toggle\"\r\n                  tabindex=\"-1\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 114,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 114,
        "endColumn": 51,
        "fix": {
          "range": [4013, 4089],
          "text": "class=\"app-btn-primary demo-login-btn\"\r\n            @click=\"handleDemoLogin\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 115,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 115,
        "endColumn": 36,
        "fix": {
          "range": [4013, 4126],
          "text": "icon=\"medical_services\"\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 116,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 116,
        "endColumn": 23,
        "fix": {
          "range": [4013, 4150],
          "text": "unelevated\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\"\r\n            icon=\"medical_services\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 117,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 117,
        "endColumn": 20,
        "fix": {
          "range": [4013, 4171],
          "text": "no-caps\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\"\r\n            icon=\"medical_services\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 118,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 118,
        "endColumn": 35,
        "fix": {
          "range": [4013, 4207],
          "text": ":loading=\"demoLoading\"\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\"\r\n            icon=\"medical_services\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 119,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 119,
        "endColumn": 22,
        "fix": {
          "range": [4013, 4230],
          "text": "size=\"md\"\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\"\r\n            icon=\"medical_services\"\r\n            unelevated\r\n            no-caps\r\n            :loading=\"demoLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 127,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 127,
        "endColumn": 52,
        "fix": {
          "range": [4423, 4501],
          "text": "class=\"app-btn-success owner-login-btn\"\r\n            @click=\"handleOwnerLogin\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"icon\" should go before \"@click\".",
        "line": 128,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 128,
        "endColumn": 40,
        "fix": {
          "range": [4423, 4542],
          "text": "icon=\"admin_panel_settings\"\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 129,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 129,
        "endColumn": 23,
        "fix": {
          "range": [4423, 4566],
          "text": "unelevated\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\"\r\n            icon=\"admin_panel_settings\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 130,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 130,
        "endColumn": 20,
        "fix": {
          "range": [4423, 4587],
          "text": "no-caps\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\"\r\n            icon=\"admin_panel_settings\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 131,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 131,
        "endColumn": 36,
        "fix": {
          "range": [4423, 4624],
          "text": ":loading=\"ownerLoading\"\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\"\r\n            icon=\"admin_panel_settings\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 132,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 132,
        "endColumn": 22,
        "fix": {
          "range": [4423, 4647],
          "text": "size=\"md\"\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\"\r\n            icon=\"admin_panel_settings\"\r\n            unelevated\r\n            no-caps\r\n            :loading=\"ownerLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 145,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 145,
        "endColumn": 55,
        "fix": {
          "range": [4972, 5071],
          "text": "class=\"app-btn-secondary manual-login-btn\"\r\n            @click=\"showManualLogin = !showManualLogin\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@click\".",
        "line": 146,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 148,
        "endColumn": 14,
        "fix": {
          "range": [4972, 5184],
          "text": ":icon=\"\r\n              showManualLogin ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\r\n            \"\r\n            @click=\"showManualLogin = !showManualLogin\"\r\n            class=\"app-btn-secondary manual-login-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 149,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 149,
        "endColumn": 23,
        "fix": {
          "range": [4972, 5208],
          "text": "unelevated\r\n            @click=\"showManualLogin = !showManualLogin\"\r\n            class=\"app-btn-secondary manual-login-btn\"\r\n            :icon=\"\r\n              showManualLogin ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\r\n            \""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 150,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 150,
        "endColumn": 20,
        "fix": {
          "range": [4972, 5229],
          "text": "no-caps\r\n            @click=\"showManualLogin = !showManualLogin\"\r\n            class=\"app-btn-secondary manual-login-btn\"\r\n            :icon=\"\r\n              showManualLogin ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\r\n            \"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"padding\" should go before \"@click\".",
        "line": 151,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 151,
        "endColumn": 32,
        "fix": {
          "range": [4972, 5262],
          "text": "padding=\"10px 16px\"\r\n            @click=\"showManualLogin = !showManualLogin\"\r\n            class=\"app-btn-secondary manual-login-btn\"\r\n            :icon=\"\r\n              showManualLogin ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\r\n            \"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 157,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 157,
        "endColumn": 47,
        "fix": {
          "range": [5358, 5435],
          "text": "class=\"app-btn-refresh forgot-btn\"\r\n            @click=\"handleForgotPassword\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 158,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 158,
        "endColumn": 23,
        "fix": {
          "range": [5358, 5459],
          "text": "unelevated\r\n            @click=\"handleForgotPassword\"\r\n            class=\"app-btn-refresh forgot-btn\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 159,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 159,
        "endColumn": 20,
        "fix": {
          "range": [5358, 5480],
          "text": "no-caps\r\n            @click=\"handleForgotPassword\"\r\n            class=\"app-btn-refresh forgot-btn\"\r\n            unelevated"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 28,
    "fixableErrorCount": 0,
    "fixableWarningCount": 28,
    "source": "<template>\r\n  <div class=\"login-form-container\">\r\n    <q-form @submit.prevent=\"handleLogin\" class=\"login-form\" novalidate>\r\n      <!-- Manual Login Form (collapsible) -->\r\n      <q-slide-transition>\r\n        <div v-show=\"showManualLogin\" class=\"manual-login-form\">\r\n          <!-- Email Input -->\r\n          <div class=\"form-field\">\r\n            <q-input\r\n              v-model=\"email.value.value\"\r\n              type=\"email\"\r\n              :label=\"$t('auth.email')\"\r\n              outlined\r\n              :error=\"!!email.error.value\"\r\n              :error-message=\"email.error.value\"\r\n              class=\"input-modern\"\r\n              autocomplete=\"email\"\r\n              required\r\n              :aria-describedby=\"email.error.value ? 'email-error' : undefined\"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"email\" aria-hidden=\"true\" />\r\n              </template>\r\n            </q-input>\r\n            <div v-if=\"email.error.value\" id=\"email-error\" class=\"sr-only\">\r\n              {{ email.error.value }}\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Password Input -->\r\n          <div class=\"form-field\">\r\n            <q-input\r\n              v-model=\"password.value.value\"\r\n              :type=\"showPassword ? 'text' : 'password'\"\r\n              :label=\"$t('auth.password')\"\r\n              outlined\r\n              :error=\"!!password.error.value\"\r\n              :error-message=\"password.error.value\"\r\n              class=\"input-modern\"\r\n              autocomplete=\"current-password\"\r\n              required\r\n              :aria-describedby=\"\r\n                password.error.value ? 'password-error' : 'password-help'\r\n              \"\r\n            >\r\n              <template v-slot:prepend>\r\n                <q-icon name=\"lock\" aria-hidden=\"true\" />\r\n              </template>\r\n              <template v-slot:append>\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  dense\r\n                  :icon=\"showPassword ? 'visibility_off' : 'visibility'\"\r\n                  @click=\"showPassword = !showPassword\"\r\n                  class=\"password-toggle\"\r\n                  tabindex=\"-1\"\r\n                  :aria-label=\"\r\n                    showPassword\r\n                      ? $t('auth.hidePassword')\r\n                      : $t('auth.showPassword')\r\n                  \"\r\n                />\r\n              </template>\r\n            </q-input>\r\n            <div\r\n              v-if=\"password.error.value\"\r\n              id=\"password-error\"\r\n              class=\"sr-only\"\r\n            >\r\n              {{ password.error.value }}\r\n            </div>\r\n            <div id=\"password-help\" class=\"sr-only\">\r\n              {{ $t('auth.passwordHelp') }}\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Login Button -->\r\n          <div class=\"form-actions\">\r\n            <q-btn\r\n              :loading=\"loading\"\r\n              type=\"submit\"\r\n              class=\"app-btn-primary login-btn\"\r\n              :label=\"$t('auth.login')\"\r\n              unelevated\r\n              no-caps\r\n              :aria-describedby=\"loading ? 'login-loading' : undefined\"\r\n            />\r\n            <div v-if=\"loading\" id=\"login-loading\" class=\"sr-only\">\r\n              {{ $t('auth.signingIn') }}\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Separator -->\r\n          <div class=\"form-separator\" role=\"separator\" aria-label=\"or\">\r\n            <q-separator class=\"separator-line\" />\r\n            <span class=\"separator-text\">{{ $t('auth.or') }}</span>\r\n            <q-separator class=\"separator-line\" />\r\n          </div>\r\n        </div>\r\n      </q-slide-transition>\r\n\r\n      <!-- Quick Login Options -->\r\n      <div class=\"quick-login-section\">\r\n        <div class=\"quick-login-title\">\r\n          <h3>{{ $t('auth.quickLogin.title') }}</h3>\r\n          <p>{{ $t('auth.quickLogin.subtitle') }}</p>\r\n        </div>\r\n\r\n        <div class=\"quick-login-buttons\">\r\n          <q-btn\r\n            :label=\"$t('auth.quickLogin.demo')\"\r\n            @click=\"handleDemoLogin\"\r\n            class=\"app-btn-primary demo-login-btn\"\r\n            icon=\"medical_services\"\r\n            unelevated\r\n            no-caps\r\n            :loading=\"demoLoading\"\r\n            size=\"md\"\r\n          >\r\n            <q-tooltip>{{ $t('auth.quickLogin.demoTooltip') }}</q-tooltip>\r\n          </q-btn>\r\n\r\n          <q-btn\r\n            :label=\"$t('auth.quickLogin.owner')\"\r\n            @click=\"handleOwnerLogin\"\r\n            class=\"app-btn-success owner-login-btn\"\r\n            icon=\"admin_panel_settings\"\r\n            unelevated\r\n            no-caps\r\n            :loading=\"ownerLoading\"\r\n            size=\"md\"\r\n          >\r\n            <q-tooltip>{{ $t('auth.quickLogin.ownerTooltip') }}</q-tooltip>\r\n          </q-btn>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Additional Actions -->\r\n      <div class=\"form-footer\">\r\n        <div class=\"footer-actions\">\r\n          <q-btn\r\n            :label=\"$t('auth.manualLogin')\"\r\n            @click=\"showManualLogin = !showManualLogin\"\r\n            class=\"app-btn-secondary manual-login-btn\"\r\n            :icon=\"\r\n              showManualLogin ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\r\n            \"\r\n            unelevated\r\n            no-caps\r\n            padding=\"10px 16px\"\r\n          />\r\n\r\n          <q-btn\r\n            :label=\"$t('auth.forgotPassword')\"\r\n            @click=\"handleForgotPassword\"\r\n            class=\"app-btn-refresh forgot-btn\"\r\n            unelevated\r\n            no-caps\r\n          />\r\n        </div>\r\n\r\n        <!-- Security Notice -->\r\n        <div class=\"security-notice\" role=\"status\" aria-live=\"polite\">\r\n          <q-icon name=\"shield\" class=\"icon-size-sm\" aria-hidden=\"true\" />\r\n          <span>{{ $t('auth.secureConnection') }}</span>\r\n        </div>\r\n      </div>\r\n    </q-form>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref } from 'vue';\r\n  import { useRouter, useRoute } from 'vue-router';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useFormValidation } from 'src/composables/useFormValidation';\r\n  import { useErrorHandler } from 'src/utils/error-handler';\r\n\r\n  const router = useRouter();\r\n  const route = useRoute();\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const authStore = useAuthStore();\r\n  const { rules, createField, validateForm } = useFormValidation();\r\n  const { handleError } = useErrorHandler();\r\n\r\n  // Form fields with validation\r\n  const email = createField('', [rules.required, rules.email]);\r\n  const password = createField('', [rules.required]);\r\n\r\n  // UI state\r\n  const showPassword = ref(false);\r\n  const loading = ref(false);\r\n  const demoLoading = ref(false);\r\n  const ownerLoading = ref(false);\r\n  const showManualLogin = ref(false);\r\n\r\n  // Methods\r\n  const handleLogin = async () => {\r\n    // Validate form\r\n    if (!validateForm([email, password])) {\r\n      return;\r\n    }\r\n\r\n    loading.value = true;\r\n\r\n    try {\r\n      const result = await authStore.login(\r\n        email.value.value,\r\n        password.value.value\r\n      );\r\n\r\n      if (result.success) {\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('auth.loginSuccess'),\r\n          position: 'top-right',\r\n          timeout: 3000,\r\n          icon: 'check_circle',\r\n        });\r\n\r\n        // Check for intended route from sessionStorage\r\n        const intendedRoute = sessionStorage.getItem('remcura_intended_route');\r\n        sessionStorage.removeItem('remcura_intended_route');\r\n\r\n        // Redirect to intended page or dashboard\r\n        const redirectPath = intendedRoute || '/';\r\n        await router.push(redirectPath);\r\n      } else {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: result.error || t('auth.loginError'),\r\n          position: 'top-right',\r\n          timeout: 4000,\r\n          icon: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      handleError(error as Error, t('auth.login'));\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const handleDemoLogin = async () => {\r\n    demoLoading.value = true;\r\n\r\n    try {\r\n      const result = await authStore.loginAsDemo();\r\n\r\n      if (result.success) {\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('auth.demoLoginSuccess'),\r\n          position: 'top-right',\r\n          timeout: 3000,\r\n          icon: 'medical_services',\r\n        });\r\n\r\n        // Redirect to dashboard\r\n        await router.push('/');\r\n      } else {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: result.error || t('auth.loginError'),\r\n          position: 'top-right',\r\n          timeout: 4000,\r\n          icon: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      handleError(error as Error, t('auth.demoLogin'));\r\n    } finally {\r\n      demoLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const handleOwnerLogin = async () => {\r\n    ownerLoading.value = true;\r\n\r\n    try {\r\n      const result = await authStore.loginAsOwner();\r\n\r\n      if (result.success) {\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('auth.ownerLoginSuccess'),\r\n          position: 'top-right',\r\n          timeout: 3000,\r\n          icon: 'admin_panel_settings',\r\n        });\r\n\r\n        // Redirect to platform dashboard\r\n        await router.push('/platform');\r\n      } else {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: result.error || t('auth.loginError'),\r\n          position: 'top-right',\r\n          timeout: 4000,\r\n          icon: 'error',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      handleError(error as Error, t('auth.ownerLogin'));\r\n    } finally {\r\n      ownerLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const handleForgotPassword = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('auth.passwordResetComingSoon'),\r\n      timeout: 3000,\r\n      position: 'top-right',\r\n      icon: 'info',\r\n    });\r\n  };\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .login-form-container {\r\n    width: 100%;\r\n    max-width: 100%;\r\n  }\r\n\r\n  .login-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n\r\n    .form-field {\r\n      position: relative;\r\n\r\n      /* Force Quasar outlined field to respect internal flow; prevent label/content overlap */\r\n      :deep(.q-field__control) {\r\n        display: grid;\r\n        grid-template-columns: auto 1fr auto;\r\n        align-items: center;\r\n      }\r\n\r\n      :deep(.q-field__prepend),\r\n      :deep(.q-field__append),\r\n      :deep(.q-field__marginal) {\r\n        align-self: center;\r\n      }\r\n\r\n      :deep(.q-field__native) {\r\n        min-width: 0;\r\n      }\r\n\r\n      :deep(.q-field__label) {\r\n        background: var(--bg-primary);\r\n        padding: 0 4px;\r\n      }\r\n\r\n      :deep(.q-field--outlined.q-field--focused .q-field__label),\r\n      :deep(.q-field--outlined.q-field--has-value .q-field__label) {\r\n        background: var(--bg-primary);\r\n      }\r\n    }\r\n\r\n    // Field styling is now fully handled by global field system\r\n    // This ensures consistent sizing and prevents field jumping on focus\r\n\r\n    // Password toggle button\r\n    .password-toggle {\r\n      color: var(--neutral-500);\r\n      transition: color var(--transition-base);\r\n\r\n      &:hover {\r\n        color: var(--brand-primary);\r\n      }\r\n    }\r\n\r\n    // Form actions\r\n    .form-actions {\r\n      margin-top: var(--space-2);\r\n      display: flex;\r\n      justify-content: center;\r\n\r\n      .login-btn {\r\n        width: 100%;\r\n        max-width: 300px;\r\n        height: 56px;\r\n\r\n        :deep(.q-btn__content) {\r\n          gap: var(--space-2);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Form separator\r\n    .form-separator {\r\n      display: flex;\r\n      align-items: center;\r\n      margin: var(--space-4) 0;\r\n\r\n      .separator-line {\r\n        flex: 1;\r\n        border-color: var(--neutral-300);\r\n      }\r\n\r\n      .separator-text {\r\n        padding: 0 var(--space-4);\r\n        font-size: var(--text-sm);\r\n        color: var(--neutral-500);\r\n        font-weight: var(--font-weight-medium);\r\n      }\r\n    }\r\n\r\n    // Quick Login Section\r\n    .quick-login-section {\r\n      text-align: center;\r\n      margin: var(--space-6) 0;\r\n\r\n      .quick-login-title {\r\n        margin-bottom: var(--space-6);\r\n\r\n        h3 {\r\n          margin: 0 0 var(--space-2) 0;\r\n          color: var(--text-primary);\r\n          font-size: var(--text-lg);\r\n          font-weight: var(--font-weight-semibold);\r\n        }\r\n\r\n        p {\r\n          margin: 0;\r\n          color: var(--text-muted);\r\n          font-size: var(--text-sm);\r\n        }\r\n      }\r\n\r\n      .quick-login-buttons {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        gap: var(--space-4);\r\n\r\n        .demo-login-btn,\r\n        .owner-login-btn {\r\n          height: 64px;\r\n          border-radius: var(--radius-lg);\r\n          transition: all 0.2s ease;\r\n\r\n          :deep(.q-btn__content) {\r\n            flex-direction: column;\r\n            gap: var(--space-1);\r\n\r\n            .q-icon {\r\n              font-size: 1.5rem;\r\n            }\r\n\r\n            // Make the label text a bit smaller\r\n            .block {\r\n              font-size: var(--text-sm);\r\n              line-height: 1.2;\r\n            }\r\n          }\r\n\r\n          &:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: var(--shadow-lg);\r\n          }\r\n\r\n          &:active {\r\n            transform: translateY(0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Manual Login Form\r\n    .manual-login-form {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: var(--space-6);\r\n      margin-bottom: var(--space-6);\r\n    }\r\n\r\n    // Form footer\r\n    .form-footer {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: var(--space-6);\r\n\r\n      .footer-actions {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        gap: var(--space-3);\r\n\r\n        // Let the global app-btn-* classes handle the styling\r\n        .manual-login-btn,\r\n        .forgot-btn {\r\n          height: 48px;\r\n\r\n          :deep(.q-btn__content) {\r\n            gap: var(--space-2);\r\n            align-items: center;\r\n            line-height: 1.2;\r\n          }\r\n        }\r\n      }\r\n\r\n      .security-notice {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        gap: var(--space-2);\r\n        font-size: var(--text-xs);\r\n        color: var(--neutral-500);\r\n\r\n        .q-icon {\r\n          color: var(--brand-success);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Dark mode adjustments (minimal; rely on global field/button system)\r\n  body.body--dark {\r\n    .login-form {\r\n      .password-toggle {\r\n        color: var(--neutral-400);\r\n\r\n        &:hover {\r\n          color: var(--brand-primary);\r\n        }\r\n      }\r\n\r\n      .separator-line {\r\n        border-color: var(--neutral-600);\r\n      }\r\n      .separator-text {\r\n        color: var(--neutral-400);\r\n      }\r\n      .security-notice {\r\n        color: var(--neutral-400);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Responsive design\r\n  @media (max-width: 599px) {\r\n    .login-form {\r\n      gap: var(--space-5);\r\n\r\n      .form-actions .login-btn {\r\n        height: 52px;\r\n      }\r\n\r\n      .footer-actions {\r\n        grid-template-columns: 1fr;\r\n\r\n        .manual-login-btn,\r\n        .forgot-btn {\r\n          height: 44px;\r\n        }\r\n      }\r\n\r\n      .quick-login-buttons {\r\n        grid-template-columns: 1fr;\r\n        gap: var(--space-3);\r\n\r\n        .demo-login-btn,\r\n        .owner-login-btn {\r\n          height: 56px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // All focus styling is handled by global .q-field system\r\n\r\n  // Screen reader only content\r\n  // Screen reader only content (now in global app.scss)\r\n\r\n  // Focus styles for buttons\r\n  .demo-btn:focus,\r\n  .forgot-btn:focus,\r\n  .login-btn:focus {\r\n    outline: 2px solid var(--brand-primary);\r\n    outline-offset: 2px;\r\n  }\r\n\r\n  .password-toggle:focus {\r\n    outline: 2px solid var(--brand-primary);\r\n    outline-offset: 2px;\r\n    border-radius: var(--radius-sm);\r\n  }\r\n\r\n  // Loading state\r\n  .login-btn:has(.q-spinner) {\r\n    pointer-events: none;\r\n\r\n    :deep(.q-btn__content) {\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n\r\n  // Animation for form appearance\r\n  .login-form-container {\r\n    animation: loginFormSlideIn 0.4s ease-out;\r\n  }\r\n\r\n  @keyframes loginFormSlideIn {\r\n    from {\r\n      opacity: 0;\r\n      transform: translateY(20px);\r\n    }\r\n    to {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\auth\\MagicJoinPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"autofocus\" should go before \"@input\".",
        "line": 25,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 25,
        "endColumn": 22,
        "fix": { "range": [848, 895], "text": "autofocus\r\n            @input=\"handleCodeInput\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 27,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 27,
        "endColumn": 37,
        "fix": { "range": [932, 946], "text": "#prepend" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#append' instead of 'v-slot:append'.",
        "line": 30,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 30,
        "endColumn": 36,
        "fix": { "range": [1042, 1055], "text": "#append" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 76,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 76,
        "endColumn": 30,
        "fix": { "range": [2450, 2510], "text": "class=\"alt-btn\"\r\n              @click=\"showQRScanner = true\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 83,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 83,
        "endColumn": 39,
        "fix": { "range": [2660, 2716], "text": "class=\"alt-btn demo-btn\"\r\n              @click=\"tryDemo\"" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6406, 6409], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6406, 6409], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6449, 6452], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6449, 6452], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9164, 9167], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9164, 9167], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 301,
        "column": 11,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 301,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [9409, 9485],
              "text": "// @ts-expect-error - loginResult.user is guaranteed to exist when success is true"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 325,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 325,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10117, 10120], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10117, 10120], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 365,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 365,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11244, 11247], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11244, 11247], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 436,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 436,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13327, 13330], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13327, 13330], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 443,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 443,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13506, 13509], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13506, 13509], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14684, 14687], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14684, 14687], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "<template>\r\n  <div class=\"magic-join-page\">\r\n    <!-- Main Join Card -->\r\n    <q-card class=\"join-card\" flat bordered>\r\n      <q-card-section class=\"text-center\">\r\n        <!-- Step Indicator -->\r\n        <div class=\"step-indicator\">\r\n          <div class=\"step-icon\">\r\n            <q-icon name=\"auto_awesome\" size=\"2.5rem\" color=\"primary\" />\r\n          </div>\r\n          <h2>{{ $t('magicJoin.enterCode') }}</h2>\r\n          <p class=\"step-description\">{{ $t('magicJoin.codeExplanation') }}</p>\r\n        </div>\r\n\r\n        <!-- Magic Code Input -->\r\n        <div class=\"code-input-section\">\r\n          <q-input\r\n            v-model=\"magicCode\"\r\n            :placeholder=\"$t('magicJoin.placeholder')\"\r\n            outlined\r\n            size=\"lg\"\r\n            class=\"magic-input\"\r\n            :class=\"{ 'has-code': magicCode.length > 0 }\"\r\n            @input=\"handleCodeInput\"\r\n            autofocus\r\n          >\r\n            <template v-slot:prepend>\r\n              <q-icon name=\"auto_awesome\" />\r\n            </template>\r\n            <template v-slot:append>\r\n              <q-btn\r\n                v-if=\"magicCode\"\r\n                icon=\"clear\"\r\n                flat\r\n                round\r\n                @click=\"clearCode\"\r\n              />\r\n            </template>\r\n          </q-input>\r\n\r\n          <!-- Code Preview -->\r\n          <div v-if=\"codePreview\" class=\"code-preview\">\r\n            <div class=\"preview-icon\">{{ codePreview.emoji }}</div>\r\n            <div class=\"preview-text\">\r\n              <div class=\"practice-name\">{{ codePreview.practice }}</div>\r\n              <div class=\"access-type\">{{ codePreview.access }}</div>\r\n            </div>\r\n            <q-icon name=\"check_circle\" color=\"positive\" size=\"md\" />\r\n          </div>\r\n\r\n          <!-- Join Button -->\r\n          <q-btn\r\n            v-if=\"magicCode.length >= 5\"\r\n            :label=\"$t('magicJoin.joinNow')\"\r\n            color=\"primary\"\r\n            size=\"lg\"\r\n            unelevated\r\n            class=\"join-button\"\r\n            :loading=\"joining\"\r\n            @click=\"handleJoin\"\r\n          />\r\n        </div>\r\n\r\n        <!-- Alternative Methods -->\r\n        <div class=\"alternative-methods\">\r\n          <div class=\"divider\">\r\n            <span>{{ $t('common.or') }}</span>\r\n          </div>\r\n\r\n          <div class=\"alt-buttons\">\r\n            <q-btn\r\n              :label=\"$t('magicJoin.scanQR')\"\r\n              icon=\"qr_code_scanner\"\r\n              flat\r\n              @click=\"showQRScanner = true\"\r\n              class=\"alt-btn\"\r\n            />\r\n            <q-btn\r\n              :label=\"$t('magicJoin.tryDemo')\"\r\n              icon=\"science\"\r\n              flat\r\n              @click=\"tryDemo\"\r\n              class=\"alt-btn demo-btn\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- How It Works -->\r\n    <q-card class=\"how-it-works-card\" flat>\r\n      <q-card-section>\r\n        <div class=\"how-header\">\r\n          <q-icon name=\"help_outline\" />\r\n          <span>{{ $t('magicJoin.howItWorks') }}</span>\r\n        </div>\r\n\r\n        <div class=\"steps\">\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">1</div>\r\n            <div class=\"step-content\">\r\n              <h4>{{ $t('magicJoin.step1') }}</h4>\r\n              <p>{{ $t('magicJoin.step1Detail') }}</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">2</div>\r\n            <div class=\"step-content\">\r\n              <h4>{{ $t('magicJoin.step2') }}</h4>\r\n              <p>{{ $t('magicJoin.step2Detail') }}</p>\r\n            </div>\r\n          </div>\r\n          <div class=\"step\">\r\n            <div class=\"step-number\">3</div>\r\n            <div class=\"step-content\">\r\n              <h4>{{ $t('magicJoin.step3') }}</h4>\r\n              <p>{{ $t('magicJoin.step3Detail') }}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </q-card-section>\r\n    </q-card>\r\n\r\n    <!-- QR Scanner Dialog -->\r\n    <q-dialog v-model=\"showQRScanner\">\r\n      <q-card style=\"width: 90vw; max-width: 400px\">\r\n        <q-card-section>\r\n          <div class=\"text-h6 text-center\">{{ $t('magicJoin.scanTitle') }}</div>\r\n          <div class=\"scanner-area\">\r\n            <q-icon name=\"qr_code_scanner\" size=\"8rem\" color=\"grey-5\" />\r\n            <p>{{ $t('magicJoin.scanInstructions') }}</p>\r\n            <!-- Real QR scanner would go here -->\r\n          </div>\r\n        </q-card-section>\r\n        <q-card-actions align=\"center\">\r\n          <q-btn\r\n            flat\r\n            :label=\"$t('common.cancel')\"\r\n            @click=\"showQRScanner = false\"\r\n          />\r\n        </q-card-actions>\r\n      </q-card>\r\n    </q-dialog>\r\n\r\n    <!-- Welcome Dialog -->\r\n    <q-dialog v-model=\"showWelcome\" persistent>\r\n      <q-card class=\"welcome-dialog\">\r\n        <q-card-section class=\"text-center\">\r\n          <div class=\"welcome-icon\">\r\n            <q-icon name=\"celebration\" size=\"4rem\" color=\"primary\" />\r\n          </div>\r\n          <h3>{{ $t('magicJoin.welcomeTitle') }}</h3>\r\n          <p>{{ welcomeMessage }}</p>\r\n          <q-btn\r\n            :label=\"$t('magicJoin.getStarted')\"\r\n            color=\"primary\"\r\n            size=\"lg\"\r\n            unelevated\r\n            @click=\"finishJoin\"\r\n          />\r\n        </q-card-section>\r\n      </q-card>\r\n    </q-dialog>\r\n\r\n    <!-- Upgrade To Member Dialog -->\r\n    <UpgradeToMemberDialog\r\n      v-model=\"showUpgradeDialog\"\r\n      :invite=\"currentInvite\"\r\n      :practice=\"currentPractice\"\r\n      @upgrade-completed=\"handleUpgradeCompleted\"\r\n      @continue-as-guest=\"handleContinueAsGuest\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useRouter } from 'vue-router';\r\n  import { PermanentUserService } from 'src/services/permanentUsers';\r\n  import { MagicInviteService } from 'src/services/magicInvites';\r\n  import UpgradeToMemberDialog from 'src/components/auth/UpgradeToMemberDialog.vue';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const router = useRouter();\r\n\r\n  // State\r\n  const magicCode = ref('');\r\n  const joining = ref(false);\r\n  const showQRScanner = ref(false);\r\n  const showWelcome = ref(false);\r\n  const welcomeMessage = ref('');\r\n\r\n  // Upgrade Flow State\r\n  const showUpgradeDialog = ref(false);\r\n  const currentInvite = ref<any>(null);\r\n  const currentPractice = ref<any>(null);\r\n  const detectedLoginType = ref<'invite' | 'personal' | 'invalid' | null>(null);\r\n\r\n  // Computed\r\n  const codePreview = computed(() => {\r\n    if (magicCode.value.length < 5) {\r\n      return null;\r\n    }\r\n\r\n    // Demo examples\r\n    if (magicCode.value.toLowerCase().includes('demo')) {\r\n      return {\r\n        emoji: '🏥',\r\n        practice: 'Demo Kliniek',\r\n        access: t('magicJoin.demoAccess'),\r\n      };\r\n    }\r\n\r\n    if (magicCode.value.includes('🏥')) {\r\n      return {\r\n        emoji: '🏥',\r\n        practice: 'Medisch Centrum Amsterdam',\r\n        access: t('magicJoin.memberAccess'),\r\n      };\r\n    }\r\n\r\n    return null;\r\n  });\r\n\r\n  // Methods\r\n  const handleCodeInput = () => {\r\n    // Clean and format input\r\n    magicCode.value = magicCode.value\r\n      .toUpperCase()\r\n      // Allow letters, numbers, and a curated set of emoji; avoid multi-codepoint classes\r\n      .replace(/(?![\\p{L}\\p{N}]|🏥|💊|🦷|🔬|🩺|💉|⚕️|✨|🌟)./gu, '');\r\n  };\r\n\r\n  const clearCode = () => {\r\n    magicCode.value = '';\r\n  };\r\n\r\n  // 🧠 SMART LOGIN DETECTION & VALIDATION\r\n  const handleJoin = async () => {\r\n    if (!magicCode.value || magicCode.value.length < 6) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicJoin.invalidCode'),\r\n        position: 'top-right',\r\n      });\r\n      return;\r\n    }\r\n\r\n    joining.value = true;\r\n\r\n    try {\r\n      // 🧠 SMART DETECTION: Is this an invite code or personal code?\r\n      const loginTypeResult = await PermanentUserService.detectLoginType(\r\n        magicCode.value\r\n      );\r\n      detectedLoginType.value = loginTypeResult.type;\r\n\r\n      if (loginTypeResult.type === 'personal') {\r\n        // 🚀 DIRECT LOGIN - This is a personal magic code\r\n        await handlePersonalCodeLogin(loginTypeResult.data);\r\n      } else if (loginTypeResult.type === 'invite') {\r\n        // 📧 INVITE CODE - Check if it's for permanent upgrade\r\n        await handleInviteCode(loginTypeResult.data);\r\n      } else {\r\n        // ❌ INVALID CODE - Fallback to demo for development\r\n        if (magicCode.value.toLowerCase().includes('demo')) {\r\n          await handleDemoLogin();\r\n        } else {\r\n          $q.notify({\r\n            type: 'negative',\r\n            message: t('magicJoin.invalidCode'),\r\n            position: 'top-right',\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error validating code:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicJoin.joinError'),\r\n        position: 'top-right',\r\n      });\r\n    } finally {\r\n      joining.value = false;\r\n    }\r\n  };\r\n\r\n  // 🚀 Handle Personal Magic Code Login (Existing Team Member)\r\n  const handlePersonalCodeLogin = async (userData: any) => {\r\n    try {\r\n      const loginResult = await PermanentUserService.validatePersonalMagicCode(\r\n        magicCode.value\r\n      );\r\n\r\n      if (loginResult.success) {\r\n        welcomeMessage.value = t('magicJoin.welcomeBack', {\r\n          // @ts-ignore - loginResult.user is guaranteed to exist when success is true\r\n          name: loginResult.user.full_name,\r\n        });\r\n        showWelcome.value = true;\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('magicJoin.personalCodeSuccess'),\r\n          position: 'top-right',\r\n          timeout: 3000,\r\n        });\r\n      } else {\r\n        throw new Error(loginResult.error);\r\n      }\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicJoin.personalCodeError'),\r\n        position: 'top-right',\r\n      });\r\n    }\r\n  };\r\n\r\n  // 📧 Handle Invite Code (Potential Upgrade to Permanent)\r\n  const handleInviteCode = async (inviteData: any) => {\r\n    try {\r\n      // Validate the invite code using MagicInviteService\r\n      const validationResult = await MagicInviteService.validateMagicCode(\r\n        magicCode.value\r\n      );\r\n\r\n      if (!validationResult) {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('magicJoin.invalidCode'),\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Check if invite is expired\r\n      if (\r\n        validationResult.expires_at &&\r\n        new Date(validationResult.expires_at) < new Date()\r\n      ) {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('magicJoin.expiredCode'),\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Check if invite has reached max uses\r\n      if (validationResult.current_uses >= validationResult.max_uses) {\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('magicJoin.maxUsesReached'),\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Set current practice and invite data\r\n      currentPractice.value = (validationResult as any).practices;\r\n      currentInvite.value = validationResult;\r\n\r\n      // Update last_used_at timestamp and increment usage\r\n      await MagicInviteService.incrementInviteUsage(validationResult.id);\r\n\r\n      // 🎯 CHECK: Is this a permanent role invite?\r\n      const permanentRoles = ['assistant', 'admin', 'member', 'manager'];\r\n      const isPermanentInvite = permanentRoles.includes(\r\n        validationResult.target_role?.toLowerCase()\r\n      );\r\n\r\n      if (isPermanentInvite) {\r\n        // 🚀 SHOW UPGRADE DIALOG\r\n        showUpgradeDialog.value = true;\r\n\r\n        $q.notify({\r\n          type: 'info',\r\n          message: t('magicJoin.permanentInviteDetected'),\r\n          position: 'top-right',\r\n          timeout: 4000,\r\n        });\r\n      } else {\r\n        // 👤 REGULAR GUEST ACCESS\r\n        welcomeMessage.value = t('magicJoin.welcomeMessage', {\r\n          practice: currentPractice.value.name,\r\n        });\r\n        showWelcome.value = true;\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('magicJoin.guestAccessGranted'),\r\n          position: 'top-right',\r\n          timeout: 2000,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error validating invite code:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicJoin.validationError'),\r\n        position: 'top-right',\r\n      });\r\n    }\r\n  };\r\n\r\n  // 🎮 Handle Demo Login (Development)\r\n  const handleDemoLogin = async () => {\r\n    try {\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n\r\n      welcomeMessage.value = t('magicJoin.welcomeMessage', {\r\n        practice: t('demo.clinicName'),\r\n      });\r\n      showWelcome.value = true;\r\n\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('magicJoin.demoAccess'),\r\n        position: 'top-right',\r\n      });\r\n    } catch (error) {\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('magicJoin.joinError'),\r\n        position: 'top-right',\r\n      });\r\n    }\r\n  };\r\n\r\n  // 🚀 UPGRADE FLOW HANDLERS\r\n  const handleUpgradeCompleted = async (upgradeResult: any) => {\r\n    try {\r\n      $q.loading.show({\r\n        message: t('upgrade.creatingAccount'),\r\n      });\r\n\r\n      // Create the permanent user account\r\n      const createRequest: any = {\r\n        practice_id: currentInvite.value.practice_id,\r\n        invite_id: currentInvite.value.id,\r\n        full_name: upgradeResult.name,\r\n        role: currentInvite.value.target_role,\r\n        department: currentInvite.value.department,\r\n        login_method: upgradeResult.method,\r\n        email: upgradeResult.email,\r\n        password: upgradeResult.password, // Only if email method\r\n      };\r\n\r\n      // Add device_fingerprint only if method is device_remember\r\n      if (upgradeResult.method === 'device_remember') {\r\n        createRequest.device_fingerprint =\r\n          PermanentUserService.getDeviceFingerprint();\r\n      }\r\n\r\n      const result =\r\n        await PermanentUserService.createPermanentUser(createRequest);\r\n\r\n      if (result.success) {\r\n        // Show success with personal code if applicable\r\n        let successMessage = t('upgrade.accountCreated');\r\n        if (result.personal_code) {\r\n          successMessage += ` ${t('upgrade.yourCodeIs') || 'Je code is'}: ${\r\n            result.personal_code\r\n          }`;\r\n        }\r\n\r\n        welcomeMessage.value = successMessage;\r\n        showWelcome.value = true;\r\n\r\n        const notifyOptions: any = {\r\n          type: 'positive',\r\n          message: t('upgrade.accountCreated'),\r\n          position: 'top-right',\r\n          timeout: 8000,\r\n        };\r\n\r\n        if (result.personal_code) {\r\n          notifyOptions.actions = [\r\n            {\r\n              label: t('common.copy') || 'Kopieer',\r\n              color: 'white',\r\n              handler: () =>\r\n                navigator.clipboard?.writeText(result.personal_code || ''),\r\n            },\r\n          ];\r\n        }\r\n\r\n        $q.notify(notifyOptions);\r\n      } else {\r\n        throw new Error(result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating permanent account:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('upgrade.createError') || 'Fout bij aanmaken account',\r\n        position: 'top-right',\r\n      });\r\n    } finally {\r\n      $q.loading.hide();\r\n    }\r\n  };\r\n\r\n  const handleContinueAsGuest = () => {\r\n    // Continue with the regular guest flow\r\n    if (currentPractice.value) {\r\n      welcomeMessage.value = t('magicJoin.welcomeMessage', {\r\n        practice: currentPractice.value.name,\r\n      });\r\n      showWelcome.value = true;\r\n    }\r\n  };\r\n\r\n  const tryDemo = () => {\r\n    magicCode.value = '🏥DEMO✨2024';\r\n    handleCodeInput();\r\n  };\r\n\r\n  const finishJoin = () => {\r\n    showWelcome.value = false;\r\n    router.push('/dashboard');\r\n  };\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n  .magic-join-page {\r\n    max-width: 500px;\r\n    margin: 0 auto;\r\n\r\n    .join-card {\r\n      width: 100%;\r\n      border-radius: 16px;\r\n      margin-bottom: 2rem;\r\n\r\n      .step-indicator {\r\n        margin-bottom: 2rem;\r\n\r\n        .step-icon {\r\n          margin-bottom: 1rem;\r\n        }\r\n\r\n        h2 {\r\n          margin: 0 0 0.5rem;\r\n          color: #1976d2;\r\n          font-size: 1.5rem;\r\n        }\r\n\r\n        .step-description {\r\n          color: #666;\r\n          margin: 0;\r\n        }\r\n      }\r\n\r\n      .code-input-section {\r\n        .magic-input {\r\n          margin-bottom: 1rem;\r\n\r\n          :deep(.q-field__control) {\r\n            font-size: 1.2rem;\r\n            height: 60px;\r\n          }\r\n\r\n          &.has-code :deep(.q-field__control) {\r\n            border-color: #4caf50;\r\n            background: rgba(76, 175, 80, 0.05);\r\n          }\r\n        }\r\n\r\n        .code-preview {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 1rem;\r\n          padding: 1rem;\r\n          background: #f8f9fa;\r\n          border-radius: 12px;\r\n          margin-bottom: 1.5rem;\r\n\r\n          .preview-icon {\r\n            font-size: 2rem;\r\n          }\r\n\r\n          .preview-text {\r\n            flex: 1;\r\n            text-align: left;\r\n\r\n            .practice-name {\r\n              font-weight: 600;\r\n              color: #1976d2;\r\n            }\r\n\r\n            .access-type {\r\n              color: #666;\r\n              font-size: 0.9rem;\r\n            }\r\n          }\r\n        }\r\n\r\n        .join-button {\r\n          width: 100%;\r\n          height: 50px;\r\n          border-radius: 12px;\r\n          font-size: 1.1rem;\r\n          font-weight: 600;\r\n          margin-bottom: 1.5rem;\r\n        }\r\n      }\r\n\r\n      .alternative-methods {\r\n        .divider {\r\n          position: relative;\r\n          text-align: center;\r\n          margin: 1.5rem 0;\r\n\r\n          &::before {\r\n            content: '';\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 0;\r\n            right: 0;\r\n            height: 1px;\r\n            background: #ddd;\r\n          }\r\n\r\n          span {\r\n            background: white;\r\n            padding: 0 1rem;\r\n            color: #666;\r\n            font-size: 0.9rem;\r\n          }\r\n        }\r\n\r\n        .alt-buttons {\r\n          display: flex;\r\n          gap: 1rem;\r\n          justify-content: center;\r\n\r\n          .alt-btn {\r\n            color: #666;\r\n            text-transform: none;\r\n\r\n            &.demo-btn {\r\n              color: #ff8f00;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .how-it-works-card {\r\n      width: 100%;\r\n      border-radius: 16px;\r\n      background: rgba(255, 255, 255, 0.7);\r\n\r\n      .how-header {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 0.5rem;\r\n        margin-bottom: 1.5rem;\r\n        color: #666;\r\n        font-weight: 500;\r\n      }\r\n\r\n      .steps {\r\n        .step {\r\n          display: flex;\r\n          gap: 1rem;\r\n          margin-bottom: 1.5rem;\r\n\r\n          .step-number {\r\n            width: 32px;\r\n            height: 32px;\r\n            border-radius: 50%;\r\n            background: #1976d2;\r\n            color: white;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-weight: 600;\r\n            flex-shrink: 0;\r\n          }\r\n\r\n          .step-content {\r\n            h4 {\r\n              margin: 0 0 0.5rem;\r\n              color: #1976d2;\r\n              font-size: 1rem;\r\n            }\r\n\r\n            p {\r\n              margin: 0;\r\n              color: #666;\r\n              font-size: 0.9rem;\r\n              line-height: 1.4;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    .scanner-area {\r\n      text-align: center;\r\n      padding: 2rem;\r\n      color: #666;\r\n\r\n      p {\r\n        margin-top: 1rem;\r\n      }\r\n    }\r\n\r\n    .welcome-dialog {\r\n      min-width: 300px;\r\n      border-radius: 16px;\r\n\r\n      .welcome-icon {\r\n        margin-bottom: 1rem;\r\n      }\r\n\r\n      h3 {\r\n        margin: 0 0 1rem;\r\n        color: #1976d2;\r\n      }\r\n\r\n      p {\r\n        margin: 0 0 2rem;\r\n        color: #666;\r\n        line-height: 1.5;\r\n      }\r\n    }\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    .magic-join-page {\r\n      padding: 0.5rem;\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\CountingPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 16,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 45,
        "fix": {
          "range": [336, 402],
          "text": ":loading=\"countingStore.loading\"\r\n            @click=\"refreshData\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [336, 439],
          "text": "class=\"app-btn-refresh\"\r\n            @click=\"refreshData\"\r\n            :loading=\"countingStore.loading\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#prepend' instead of 'v-slot:prepend'.",
        "line": 33,
        "column": 23,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 33,
        "endColumn": 37,
        "fix": { "range": [870, 884], "text": "#prepend" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 42,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 42,
        "endColumn": 23,
        "fix": { "range": [1086, 1141], "text": "unelevated\r\n            @click=\"showStartSessionDialog\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 43,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 43,
        "endColumn": 20,
        "fix": {
          "range": [1086, 1162],
          "text": "no-caps\r\n            @click=\"showStartSessionDialog\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 44,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 36,
        "fix": {
          "range": [1086, 1199],
          "text": "class=\"app-btn-success\"\r\n            @click=\"showStartSessionDialog\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 125,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 125,
        "endColumn": 60,
        "fix": {
          "range": [3939, 4039],
          "text": ":disable=\"activeSession.products_counted === 0\"\r\n            @click=\"completeSession(activeSession)\""
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-name' instead of 'v-slot:body-cell-name'.",
        "line": 151,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 151,
        "endColumn": 50,
        "fix": { "range": [4833, 4854], "text": "#body-cell-name" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 163,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 163,
        "endColumn": 52,
        "fix": { "range": [5266, 5289], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-progress' instead of 'v-slot:body-cell-progress'.",
        "line": 176,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 176,
        "endColumn": 54,
        "fix": { "range": [5693, 5718], "text": "#body-cell-progress" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-started_at' instead of 'v-slot:body-cell-started_at'.",
        "line": 198,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 198,
        "endColumn": 56,
        "fix": { "range": [6469, 6496], "text": "#body-cell-started_at" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 208,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 208,
        "endColumn": 53,
        "fix": { "range": [6846, 6870], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 219,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 219,
        "endColumn": 58,
        "fix": {
          "range": [7208, 7302],
          "text": ":title=\"$t('counting.continueSession')\"\r\n                  @click=\"continueSession(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 228,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 228,
        "endColumn": 45,
        "fix": {
          "range": [7513, 7590],
          "text": ":title=\"$t('common.view')\"\r\n                  @click=\"viewSession(props.row)\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 238,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 238,
        "endColumn": 58,
        "fix": {
          "range": [7856, 7950],
          "text": ":title=\"$t('counting.completeSession')\"\r\n                  @click=\"completeSession(props.row)\""
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 15,
    "fixableErrorCount": 0,
    "fixableWarningCount": 15,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('counting.title')\"\r\n        :subtitle=\"$t('counting.overview')\"\r\n        icon=\"checklist\"\r\n      >\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshData\"\r\n            :loading=\"countingStore.loading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n\r\n          <q-select\r\n            v-model=\"selectedStatus\"\r\n            :options=\"statusOptions\"\r\n            :label=\"$t('counting.sessionStatus')\"\r\n            emit-value\r\n            map-options\r\n            outlined\r\n            dense\r\n            clearable\r\n            class=\"status-filter\"\r\n          >\r\n            <template v-slot:prepend>\r\n              <q-icon name=\"filter_list\" />\r\n            </template>\r\n          </q-select>\r\n\r\n          <q-btn\r\n            icon=\"add\"\r\n            :label=\"$t('counting.startSession')\"\r\n            @click=\"showStartSessionDialog\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-success\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"counting-content\">\r\n      <!-- Active Session Alert -->\r\n      <BaseCard\r\n        v-if=\"activeSession\"\r\n        icon-color=\"info\"\r\n        class=\"active-session-card\"\r\n      >\r\n        <template #header>\r\n          <q-card-section class=\"active-session-header\">\r\n            <div class=\"flex items-center gap-3\">\r\n              <q-icon name=\"play_circle\" size=\"md\" color=\"info\" />\r\n              <div>\r\n                <div class=\"text-h6\">{{ $t('counting.activeSession') }}</div>\r\n                <div class=\"text-subtitle2\">{{ activeSession.name }}</div>\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n        </template>\r\n\r\n        <q-card-section class=\"active-session-content\">\r\n          <div class=\"session-stats\">\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">{{ $t('counting.progress') }}</div>\r\n              <div class=\"stat-value\">\r\n                {{ activeSession.products_counted }}/{{\r\n                  activeSession.total_products_to_count\r\n                }}\r\n              </div>\r\n              <q-linear-progress\r\n                :value=\"\r\n                  activeSession.products_counted /\r\n                  activeSession.total_products_to_count\r\n                \"\r\n                color=\"info\"\r\n                size=\"8px\"\r\n                class=\"progress-bar\"\r\n              />\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">{{ $t('counting.sessionType') }}</div>\r\n              <div class=\"stat-value\">\r\n                {{ formatSessionType(activeSession.session_type) }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-label\">{{ $t('common.startedAt') }}</div>\r\n              <div class=\"stat-value\">\r\n                {{ formatDateTime(activeSession.started_at) }}\r\n              </div>\r\n            </div>\r\n\r\n            <div v-if=\"activeSession.discrepancies_found > 0\" class=\"stat-item\">\r\n              <div class=\"stat-label\">{{ $t('counting.discrepancies') }}</div>\r\n              <div class=\"stat-value discrepancies\">\r\n                {{ activeSession.discrepancies_found }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </q-card-section>\r\n\r\n        <q-card-actions align=\"right\">\r\n          <q-btn\r\n            flat\r\n            color=\"info\"\r\n            :label=\"$t('counting.continueSession')\"\r\n            @click=\"continueSession(activeSession)\"\r\n          />\r\n          <q-btn\r\n            flat\r\n            color=\"warning\"\r\n            :label=\"$t('counting.completeSession')\"\r\n            @click=\"completeSession(activeSession)\"\r\n            :disable=\"activeSession.products_counted === 0\"\r\n          />\r\n        </q-card-actions>\r\n      </BaseCard>\r\n\r\n      <!-- Loading State -->\r\n      <div v-if=\"countingStore.loading\" class=\"loading-container\">\r\n        <q-spinner-dots size=\"xl\" color=\"primary\" />\r\n        <p class=\"loading-text\">{{ $t('counting.loadingSessions') }}</p>\r\n      </div>\r\n\r\n      <!-- Sessions Table -->\r\n      <div v-else class=\"medical-table\">\r\n        <q-table\r\n          :rows=\"sortedSessions\"\r\n          :columns=\"enhancedColumns\"\r\n          row-key=\"id\"\r\n          :pagination=\"pagination\"\r\n          :no-data-label=\"$t('counting.noSessionsFound')\"\r\n          class=\"sessions-table\"\r\n          flat\r\n          bordered\r\n          separator=\"cell\"\r\n          @request=\"onTableRequest\"\r\n        >\r\n          <!-- Session Name Column -->\r\n          <template v-slot:body-cell-name=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"session-info\">\r\n                <div class=\"session-name\">{{ props.value }}</div>\r\n                <div class=\"session-type\">\r\n                  {{ formatSessionType(props.row.session_type) }}\r\n                </div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Status Column -->\r\n          <template v-slot:body-cell-status=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-chip\r\n                :color=\"statusColor(props.value)\"\r\n                :icon=\"statusIcon(props.value)\"\r\n                text-color=\"white\"\r\n                :label=\"formatStatus(props.value)\"\r\n                size=\"sm\"\r\n              />\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Progress Column -->\r\n          <template v-slot:body-cell-progress=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"progress-info\">\r\n                <div class=\"progress-text\">\r\n                  {{ props.row.products_counted }}/{{\r\n                    props.row.total_products_to_count\r\n                  }}\r\n                </div>\r\n                <q-linear-progress\r\n                  :value=\"\r\n                    props.row.products_counted /\r\n                    props.row.total_products_to_count\r\n                  \"\r\n                  :color=\"progressColor(props.row.status)\"\r\n                  size=\"4px\"\r\n                  class=\"mini-progress\"\r\n                />\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Date Column -->\r\n          <template v-slot:body-cell-started_at=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"date-info\">\r\n                <div class=\"date\">{{ formatDate(props.value) }}</div>\r\n                <div class=\"time\">{{ formatTime(props.value) }}</div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Actions Column -->\r\n          <template v-slot:body-cell-actions=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"action-buttons\">\r\n                <q-btn\r\n                  v-if=\"props.row.status === 'active'\"\r\n                  flat\r\n                  round\r\n                  icon=\"play_arrow\"\r\n                  size=\"sm\"\r\n                  color=\"primary\"\r\n                  @click=\"continueSession(props.row)\"\r\n                  :title=\"$t('counting.continueSession')\"\r\n                />\r\n                <q-btn\r\n                  flat\r\n                  round\r\n                  icon=\"visibility\"\r\n                  size=\"sm\"\r\n                  color=\"info\"\r\n                  @click=\"viewSession(props.row)\"\r\n                  :title=\"$t('common.view')\"\r\n                />\r\n                <q-btn\r\n                  v-if=\"props.row.status === 'active'\"\r\n                  flat\r\n                  round\r\n                  icon=\"check\"\r\n                  size=\"sm\"\r\n                  color=\"positive\"\r\n                  @click=\"completeSession(props.row)\"\r\n                  :title=\"$t('counting.completeSession')\"\r\n                />\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n        </q-table>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Start Session Dialog -->\r\n    <CountingSessionDialog\r\n      v-model=\"showStartDialog\"\r\n      :locations=\"availableLocations\"\r\n      @session-created=\"onSessionCreated\"\r\n    />\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import {\r\n    ref,\r\n    computed,\r\n    onMounted,\r\n    onBeforeUnmount,\r\n    defineAsyncComponent,\r\n  } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useRouter } from 'vue-router';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useCountingStore } from 'src/stores/counting';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import { useTableSorting } from 'src/composables/useTableSorting';\r\n  import type { CountingSession, PracticeLocation } from 'src/types/inventory';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\r\n\r\n  // Lazy loaded dialogs\r\n  const CountingSessionDialog = defineAsyncComponent(\r\n    () => import('src/components/inventory/CountingSessionDialog.vue')\r\n  );\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const router = useRouter();\r\n  const authStore = useAuthStore();\r\n  const countingStore = useCountingStore();\r\n  const clinicStore = useClinicStore();\r\n\r\n  // Table sorting\r\n  const { pagination, onTableRequest, sortData } = useTableSorting({\r\n    sortBy: 'started_at',\r\n    descending: true,\r\n    rowsPerPage: 25,\r\n  });\r\n\r\n  // Reactive state\r\n  const selectedStatus = ref<string | null>(null);\r\n  const showStartDialog = ref(false);\r\n\r\n  // Computed properties\r\n  const practiceId = computed(() => authStore.userProfile?.clinic_id || '');\r\n\r\n  const statusOptions = computed(() => [\r\n    { label: t('counting.status.active'), value: 'active' },\r\n    { label: t('counting.status.completed'), value: 'completed' },\r\n    { label: t('counting.status.cancelled'), value: 'cancelled' },\r\n    { label: t('counting.status.approved'), value: 'approved' },\r\n  ]);\r\n\r\n  const availableLocations = computed<PracticeLocation[]>(() => {\r\n    return clinicStore.activeLocations;\r\n  });\r\n\r\n  const activeSession = computed(() => {\r\n    return (\r\n      countingStore.sessions.find(session => session.status === 'active') ||\r\n      null\r\n    );\r\n  });\r\n\r\n  const filteredSessions = computed(() => {\r\n    let sessions = [...countingStore.sessions];\r\n\r\n    if (selectedStatus.value) {\r\n      sessions = sessions.filter(\r\n        session => session.status === selectedStatus.value\r\n      );\r\n    }\r\n\r\n    return sessions;\r\n  });\r\n\r\n  // Apply sorting to filtered sessions\r\n  const sortedSessions = computed(() => {\r\n    return sortData(\r\n      filteredSessions.value,\r\n      pagination.value.sortBy,\r\n      pagination.value.descending\r\n    );\r\n  });\r\n\r\n  const enhancedColumns = computed(() => [\r\n    {\r\n      name: 'name',\r\n      label: t('counting.sessionName'),\r\n      field: 'name',\r\n      sortable: true,\r\n      align: 'left' as const,\r\n      classes: 'col-name',\r\n      headerClasses: 'col-name',\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: t('counting.status'),\r\n      field: 'status',\r\n      sortable: true,\r\n      align: 'center' as const,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'progress',\r\n      label: t('counting.progress'),\r\n      field: 'progress',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'started_at',\r\n      label: t('common.startedAt'),\r\n      field: 'started_at',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('common.actions'),\r\n      field: 'actions',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      classes: 'col-actions',\r\n      headerClasses: 'col-actions',\r\n    },\r\n  ]);\r\n\r\n  // Methods\r\n  const refreshData = async () => {\r\n    if (!practiceId.value) return;\r\n\r\n    try {\r\n      await countingStore.fetchSessions(practiceId.value);\r\n      $q.notify({\r\n        type: 'positive',\r\n        message: t('common.dataRefreshed'),\r\n        position: 'top',\r\n      });\r\n    } catch (error) {\r\n      console.error('Error refreshing sessions:', error);\r\n      $q.notify({\r\n        type: 'negative',\r\n        message: t('common.refreshFailed'),\r\n        position: 'top',\r\n      });\r\n    }\r\n  };\r\n\r\n  const showStartSessionDialog = () => {\r\n    showStartDialog.value = true;\r\n  };\r\n\r\n  const continueSession = (session: CountingSession) => {\r\n    router.push(`/inventory/counting/${session.id}`);\r\n  };\r\n\r\n  const viewSession = (session: CountingSession) => {\r\n    router.push(`/inventory/counting/${session.id}`);\r\n  };\r\n\r\n  const completeSession = async (session: CountingSession) => {\r\n    $q.dialog({\r\n      title: t('counting.completeSession'),\r\n      message: t('counting.confirmComplete'),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        await countingStore.updateSession(session.id, {\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString(),\r\n          completed_by: authStore.user?.id || '',\r\n        });\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('counting.sessionCompleted'),\r\n          position: 'top',\r\n        });\r\n\r\n        await refreshData();\r\n      } catch (error) {\r\n        console.error('Error completing session:', error);\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('counting.completeFailed'),\r\n          position: 'top',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const onSessionCreated = (sessionId: string) => {\r\n    router.push(`/inventory/counting/${sessionId}`);\r\n  };\r\n\r\n  // Formatting helpers\r\n  const formatSessionType = (type: string): string => {\r\n    return t(`counting.${type}`, type);\r\n  };\r\n\r\n  const formatStatus = (status: string): string => {\r\n    return t(`counting.status.${status}`, status);\r\n  };\r\n\r\n  const statusColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'primary';\r\n      case 'completed':\r\n        return 'positive';\r\n      case 'cancelled':\r\n        return 'negative';\r\n      case 'approved':\r\n        return 'info';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  const statusIcon = (status: string): string => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'play_circle';\r\n      case 'completed':\r\n        return 'check_circle';\r\n      case 'cancelled':\r\n        return 'cancel';\r\n      case 'approved':\r\n        return 'verified';\r\n      default:\r\n        return 'help';\r\n    }\r\n  };\r\n\r\n  const progressColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'primary';\r\n      case 'completed':\r\n        return 'positive';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  const formatTime = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  const formatDateTime = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    if (practiceId.value) {\r\n      await clinicStore.fetchLocations(practiceId.value);\r\n      await refreshData();\r\n    }\r\n  });\r\n\r\n  onBeforeUnmount(() => {\r\n    // Cleanup to prevent async operations after unmount\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .counting-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n  }\r\n\r\n  .header-actions {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-4);\r\n\r\n    .status-filter {\r\n      min-width: 150px;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      flex-direction: column;\r\n      gap: var(--space-3);\r\n\r\n      .status-filter {\r\n        min-width: 100%;\r\n      }\r\n    }\r\n  }\r\n\r\n  .active-session-card {\r\n    border-left: 4px solid var(--info);\r\n  }\r\n\r\n  .active-session-content {\r\n    .session-stats {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: var(--space-6);\r\n\r\n      .stat-item {\r\n        .stat-label {\r\n          font-size: var(--text-sm);\r\n          color: var(--text-muted);\r\n          margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .stat-value {\r\n          font-size: var(--text-lg);\r\n          font-weight: var(--font-weight-medium);\r\n          color: var(--text-primary);\r\n\r\n          &.discrepancies {\r\n            color: var(--warning);\r\n          }\r\n        }\r\n\r\n        .progress-bar {\r\n          margin-top: var(--space-2);\r\n        }\r\n      }\r\n\r\n      @media (max-width: 768px) {\r\n        grid-template-columns: 1fr;\r\n        gap: var(--space-4);\r\n      }\r\n    }\r\n  }\r\n\r\n  .loading-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--space-12);\r\n    gap: var(--space-4);\r\n\r\n    .loading-text {\r\n      color: var(--text-muted);\r\n      font-size: var(--text-base);\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .session-info {\r\n    .session-name {\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    .session-type {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n\r\n  .progress-info {\r\n    .progress-text {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-primary);\r\n      margin-bottom: var(--space-1);\r\n    }\r\n\r\n    .mini-progress {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .date-info {\r\n    .date {\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    .time {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n\r\n  .action-buttons {\r\n    display: flex;\r\n    gap: var(--space-1);\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\CountingSessionPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":disable\" should go before \"@click\".",
        "line": 46,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 46,
        "endColumn": 38,
        "fix": {
          "range": [1367, 1430],
          "text": ":disable=\"!canComplete\"\r\n              @click=\"completeSession\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 47,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 47,
        "endColumn": 25,
        "fix": {
          "range": [1367, 1456],
          "text": "unelevated\r\n              @click=\"completeSession\"\r\n              :disable=\"!canComplete\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 56,
        "column": 15,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 56,
        "endColumn": 25,
        "fix": { "range": [1677, 1726], "text": "unelevated\r\n              @click=\"approveSession\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-product' instead of 'v-slot:body-cell-product'.",
        "line": 211,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 211,
        "endColumn": 57,
        "fix": { "range": [7252, 7276], "text": "#body-cell-product" }
      },
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 211,
        "column": 51,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 211,
        "endColumn": 56
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-variance' instead of 'v-slot:body-cell-variance'.",
        "line": 227,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 227,
        "endColumn": 58,
        "fix": { "range": [7857, 7882], "text": "#body-cell-variance" }
      },
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 227,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 227,
        "endColumn": 57
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 240,
        "column": 25,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 240,
        "endColumn": 56,
        "fix": { "range": [8338, 8361], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/no-template-shadow",
        "severity": 1,
        "message": "Variable 'props' is already declared in the upper scope.",
        "line": 240,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "alreadyDeclaredInUpperScope",
        "endLine": 240,
        "endColumn": 55
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"sessionName\"\r\n        :subtitle=\"sessionType\"\r\n        icon=\"checklist\"\r\n        :back-button=\"true\"\r\n        @back=\"handleBack\"\r\n      >\r\n        <template #actions>\r\n          <div class=\"header-actions\">\r\n            <!-- Session Status -->\r\n            <q-chip\r\n              :color=\"statusColor\"\r\n              :icon=\"statusIcon\"\r\n              text-color=\"white\"\r\n              :label=\"formatStatus(session?.status)\"\r\n              size=\"md\"\r\n            />\r\n\r\n            <!-- Progress Info -->\r\n            <div v-if=\"session\" class=\"progress-info\">\r\n              <span class=\"progress-text\">\r\n                {{ session.products_counted }}/{{\r\n                  session.total_products_to_count\r\n                }}\r\n              </span>\r\n              <q-linear-progress\r\n                :value=\"\r\n                  session.products_counted / session.total_products_to_count\r\n                \"\r\n                color=\"primary\"\r\n                size=\"4px\"\r\n                class=\"progress-bar\"\r\n              />\r\n            </div>\r\n\r\n            <!-- Action Buttons -->\r\n            <q-btn\r\n              v-if=\"session?.status === 'active'\"\r\n              color=\"positive\"\r\n              icon=\"check\"\r\n              :label=\"$t('counting.completeSession')\"\r\n              @click=\"completeSession\"\r\n              :disable=\"!canComplete\"\r\n              unelevated\r\n            />\r\n\r\n            <q-btn\r\n              v-if=\"session?.status === 'completed'\"\r\n              color=\"info\"\r\n              icon=\"verified\"\r\n              :label=\"$t('counting.approveSession')\"\r\n              @click=\"approveSession\"\r\n              unelevated\r\n            />\r\n          </div>\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"counting-session-content\">\r\n      <!-- Loading State -->\r\n      <div v-if=\"countingStore.loading\" class=\"loading-container\">\r\n        <q-spinner-dots size=\"xl\" color=\"primary\" />\r\n        <p class=\"loading-text\">{{ $t('counting.loadingSession') }}</p>\r\n      </div>\r\n\r\n      <!-- Session Not Found -->\r\n      <BaseCard v-else-if=\"!session\" icon-color=\"negative\">\r\n        <q-card-section class=\"text-center\">\r\n          <q-icon name=\"error_outline\" size=\"xl\" color=\"negative\" />\r\n          <div class=\"text-h6 q-mt-md\">\r\n            {{ $t('counting.sessionNotFound') }}\r\n          </div>\r\n          <div class=\"text-subtitle2 q-mt-sm\">\r\n            {{ $t('counting.sessionNotFoundDescription') }}\r\n          </div>\r\n        </q-card-section>\r\n        <q-card-actions align=\"center\">\r\n          <q-btn\r\n            color=\"primary\"\r\n            :label=\"$t('common.goBack')\"\r\n            @click=\"$router.push('/inventory/counting')\"\r\n          />\r\n        </q-card-actions>\r\n      </BaseCard>\r\n\r\n      <!-- Error Banner -->\r\n      <AlertCard\r\n        v-else-if=\"loadError\"\r\n        type=\"error\"\r\n        :title=\"$t('common.error')\"\r\n        :message=\"$t('counting.sessionLoadFailed')\"\r\n      >\r\n        <template #actions>\r\n          <q-btn color=\"primary\" :label=\"$t('common.retry')\" @click=\"loadSession\" />\r\n        </template>\r\n      </AlertCard>\r\n\r\n      <!-- Session Content -->\r\n      <template v-else>\r\n        <!-- Session Summary -->\r\n        <BaseCard class=\"session-summary\">\r\n          <template #header>\r\n            <q-card-section class=\"session-header\">\r\n              <div class=\"text-h6\">{{ $t('counting.sessionSummary') }}</div>\r\n            </q-card-section>\r\n          </template>\r\n\r\n          <q-card-section class=\"summary-content\">\r\n            <div class=\"summary-grid\">\r\n              <div class=\"summary-item\">\r\n                <div class=\"summary-label\">\r\n                  {{ $t('counting.sessionType') }}\r\n                </div>\r\n                <div class=\"summary-value\">\r\n                  {{ formatSessionType(session.session_type) }}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"summary-item\">\r\n                <div class=\"summary-label\">\r\n                  {{ $t('counting.totalProducts') }}\r\n                </div>\r\n                <div class=\"summary-value\">\r\n                  {{ session.total_products_to_count }}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"summary-item\">\r\n                <div class=\"summary-label\">\r\n                  {{ $t('counting.countedProducts') }}\r\n                </div>\r\n                <div class=\"summary-value\">{{ session.products_counted }}</div>\r\n              </div>\r\n\r\n              <div class=\"summary-item\">\r\n                <div class=\"summary-label\">\r\n                  {{ $t('counting.discrepancies') }}\r\n                </div>\r\n                <div\r\n                  class=\"summary-value\"\r\n                  :class=\"{\r\n                    'has-discrepancies': session.discrepancies_found > 0,\r\n                  }\"\r\n                >\r\n                  {{ session.discrepancies_found }}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"summary-item\">\r\n                <div class=\"summary-label\">{{ $t('common.startedAt') }}</div>\r\n                <div class=\"summary-value\">\r\n                  {{ formatDateTime(session.started_at) }}\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"session.completed_at\" class=\"summary-item\">\r\n                <div class=\"summary-label\">{{ $t('common.completedAt') }}</div>\r\n                <div class=\"summary-value\">\r\n                  {{ formatDateTime(session.completed_at) }}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n        </BaseCard>\r\n\r\n        <!-- Mobile Counting Interface -->\r\n        <MobileCountingInterface\r\n          v-if=\"session.status === 'active'\"\r\n          :session=\"session\"\r\n          :products=\"countingProducts\"\r\n          @product-counted=\"onProductCounted\"\r\n          @session-complete=\"onSessionComplete\"\r\n        />\r\n\r\n        <!-- Counting Results Table (for completed sessions) -->\r\n        <BaseCard v-else class=\"counting-results\">\r\n          <template #header>\r\n            <q-card-section class=\"results-header\">\r\n              <div class=\"text-h6\">{{ $t('counting.countingResults') }}</div>\r\n              <div class=\"text-subtitle2\">{{ $t('counting.viewResults') }}</div>\r\n            </q-card-section>\r\n          </template>\r\n\r\n          <div class=\"medical-table\">\r\n            <AlertCard\r\n              v-if=\"entriesError\"\r\n              type=\"error\"\r\n              :title=\"$t('common.error')\"\r\n              :message=\"$t('counting.entriesLoadFailed')\"\r\n            >\r\n              <template #actions>\r\n                <q-btn color=\"primary\" :label=\"$t('common.retry')\" @click=\"loadCountingEntries\" />\r\n              </template>\r\n            </AlertCard>\r\n            <q-table\r\n              :rows=\"countingEntries\"\r\n              :columns=\"resultsColumns\"\r\n              row-key=\"id\"\r\n              :pagination=\"pagination\"\r\n              :loading=\"entriesLoading\"\r\n              :no-data-label=\"$t('counting.noResultsFound')\"\r\n              class=\"results-table\"\r\n              flat\r\n            >\r\n              <!-- Product Column -->\r\n              <template v-slot:body-cell-product=\"props\">\r\n                <q-td :props=\"props\">\r\n                  <div class=\"product-info\">\r\n                    <div class=\"product-name\">\r\n                      {{\r\n                        props.row.product?.name || t('common.unknownProduct')\r\n                      }}\r\n                    </div>\r\n                    <div class=\"product-sku\">\r\n                      {{ props.row.product?.sku || '-' }}\r\n                    </div>\r\n                  </div>\r\n                </q-td>\r\n              </template>\r\n\r\n              <!-- Variance Column -->\r\n              <template v-slot:body-cell-variance=\"props\">\r\n                <q-td :props=\"props\">\r\n                  <q-chip\r\n                    :color=\"varianceColor(props.value)\"\r\n                    :icon=\"varianceIcon(props.value)\"\r\n                    text-color=\"white\"\r\n                    :label=\"formatVariance(props.value)\"\r\n                    size=\"sm\"\r\n                  />\r\n                </q-td>\r\n              </template>\r\n\r\n              <!-- Status Column -->\r\n              <template v-slot:body-cell-status=\"props\">\r\n                <q-td :props=\"props\">\r\n                  <q-chip\r\n                    :color=\"entryStatusColor(props.value)\"\r\n                    :label=\"formatEntryStatus(props.value)\"\r\n                    size=\"sm\"\r\n                  />\r\n                </q-td>\r\n              </template>\r\n            </q-table>\r\n          </div>\r\n        </BaseCard>\r\n      </template>\r\n    </div>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import {\r\n    ref,\r\n    computed,\r\n    onMounted,\r\n    onBeforeUnmount,\r\n    defineAsyncComponent,\r\n  } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useRouter, useRoute } from 'vue-router';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useCountingStore } from 'src/stores/counting';\r\n  import type {\r\n    CountingSession,\r\n    CountingEntryDTO,\r\n    CountingProduct,\r\n  } from '@/types/inventory';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\r\n\r\n  // Lazy loaded components\r\n  const MobileCountingInterface = defineAsyncComponent(\r\n    () => import('src/components/inventory/MobileCountingInterface.vue')\r\n  );\r\n\r\n  // Props\r\n  const props = defineProps<{\r\n    sessionId: string;\r\n  }>();\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const router = useRouter();\r\n  const route = useRoute();\r\n  const authStore = useAuthStore();\r\n  const countingStore = useCountingStore();\r\n\r\n  // Reactive state\r\n  const countingProducts = ref<CountingProduct[]>([]);\r\n  const countingEntries = ref<CountingEntryDTO[]>([]);\r\n  const entriesLoading = ref(false);\r\n  const loadError = ref(false);\r\n  const entriesError = ref(false);\r\n\r\n  // Pagination\r\n  const pagination = ref({\r\n    sortBy: 'created_at',\r\n    descending: false,\r\n    page: 1,\r\n    rowsPerPage: 25,\r\n  });\r\n\r\n  // Computed properties\r\n  const session = computed(() => countingStore.currentSession);\r\n\r\n  const sessionName = computed(\r\n    () => session.value?.name || t('counting.unknownSession')\r\n  );\r\n\r\n  const sessionType = computed(() =>\r\n    session.value ? formatSessionType(session.value.session_type) : ''\r\n  );\r\n\r\n  const statusColor = computed(() => {\r\n    if (!session.value) return 'grey';\r\n    switch (session.value.status) {\r\n      case 'active':\r\n        return 'primary';\r\n      case 'completed':\r\n        return 'positive';\r\n      case 'cancelled':\r\n        return 'negative';\r\n      case 'approved':\r\n        return 'info';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  });\r\n\r\n  const statusIcon = computed(() => {\r\n    if (!session.value) return 'help';\r\n    switch (session.value.status) {\r\n      case 'active':\r\n        return 'play_circle';\r\n      case 'completed':\r\n        return 'check_circle';\r\n      case 'cancelled':\r\n        return 'cancel';\r\n      case 'approved':\r\n        return 'verified';\r\n      default:\r\n        return 'help';\r\n    }\r\n  });\r\n\r\n  const canComplete = computed(() => {\r\n    return session.value && session.value.products_counted > 0;\r\n  });\r\n\r\n  const resultsColumns = computed(() => [\r\n    {\r\n      name: 'product',\r\n      label: t('counting.product'),\r\n      field: 'product_id',\r\n      sortable: true,\r\n      align: 'left' as const,\r\n    },\r\n    {\r\n      name: 'system_quantity',\r\n      label: t('counting.systemQuantity'),\r\n      field: 'system_quantity',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'counted_quantity',\r\n      label: t('counting.countedQuantity'),\r\n      field: 'counted_quantity',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'variance',\r\n      label: t('counting.variance'),\r\n      field: 'variance',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: t('common.status'),\r\n      field: 'status',\r\n      align: 'center' as const,\r\n      sortable: true,\r\n    },\r\n  ]);\r\n\r\n  // Methods\r\n  const loadSession = async () => {\r\n    try {\r\n      loadError.value = false;\r\n      const practiceId = authStore.userProfile?.clinic_id || '';\r\n      const s = await countingStore.fetchSessionById(practiceId, props.sessionId);\r\n      if (s && (s.status === 'completed' || s.status === 'approved')) {\r\n        await loadCountingEntries();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading session:', error);\r\n      loadError.value = true;\r\n    }\r\n  };\r\n\r\n  const loadCountingEntries = async () => {\r\n    entriesLoading.value = true;\r\n    try {\r\n      const data = await countingStore.fetchCountingEntries(props.sessionId);\r\n      countingEntries.value = data.entries as CountingEntryDTO[];\r\n      entriesError.value = false;\r\n    } catch (error) {\r\n      console.error('Error loading counting entries:', error);\r\n      entriesError.value = true;\r\n    } finally {\r\n      entriesLoading.value = false;\r\n    }\r\n  };\r\n\r\n  const completeSession = () => {\r\n    $q.dialog({\r\n      title: t('counting.completeSession'),\r\n      message: t('counting.confirmComplete'),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        await countingStore.updateSession(props.sessionId, {\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString(),\r\n          completed_by: authStore.user?.id || '',\r\n        });\r\n\r\n        $q.notify({\r\n          type: 'positive',\r\n          message: t('counting.sessionCompleted'),\r\n          position: 'top',\r\n        });\r\n\r\n        await loadSession();\r\n      } catch (error) {\r\n        console.error('Error completing session:', error);\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('counting.completeFailed'),\r\n          position: 'top',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const approveSession = () => {\r\n    $q.dialog({\r\n      title: t('counting.approveSession'),\r\n      message: t('counting.confirmApprove'),\r\n      cancel: true,\r\n      persistent: true,\r\n    }).onOk(async () => {\r\n      try {\r\n        const { movementIds } = await countingStore.postCountingSession(\r\n          props.sessionId\r\n        );\r\n\r\n        const notify = $q.notify({\r\n          type: 'positive',\r\n          message: t('counting.sessionApproved'),\r\n          position: 'top',\r\n          timeout: 8000,\r\n          actions: movementIds.length\r\n            ? [\r\n                {\r\n                  label: t('common.undo'),\r\n                  color: 'white',\r\n                  handler: async () => {\r\n                    try {\r\n                      const undone = await countingStore.undoLastPosting(\r\n                        props.sessionId\r\n                      );\r\n                      if (undone) {\r\n                        $q.notify({\r\n                          type: 'info',\r\n                          message: t('common.changesReverted'),\r\n                          position: 'top',\r\n                        });\r\n                        await loadSession();\r\n                      }\r\n                    } catch (e) {\r\n                      $q.notify({\r\n                        type: 'negative',\r\n                        message: t('common.actionFailed'),\r\n                        position: 'top',\r\n                      });\r\n                    }\r\n                  },\r\n                },\r\n              ]\r\n            : [],\r\n        });\r\n\r\n        await loadSession();\r\n      } catch (error) {\r\n        console.error('Error approving session:', error);\r\n        $q.notify({\r\n          type: 'negative',\r\n          message: t('counting.approveFailed'),\r\n          position: 'top',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    router.push('/inventory/counting');\r\n  };\r\n\r\n  const onProductCounted = () => {\r\n    // Refresh session data to update progress\r\n    loadSession();\r\n  };\r\n\r\n  const onSessionComplete = () => {\r\n    completeSession();\r\n  };\r\n\r\n  // Formatting helpers\r\n  const formatSessionType = (type: string): string => {\r\n    return t(`counting.${type}`, type);\r\n  };\r\n\r\n  const formatStatus = (status?: string): string => {\r\n    if (!status) return '';\r\n    return t(`counting.status.${status}`, status);\r\n  };\r\n\r\n  const formatEntryStatus = (status: string): string => {\r\n    return t(`counting.entryStatus.${status}`, status);\r\n  };\r\n\r\n  const formatDateTime = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  const formatVariance = (variance: number): string => {\r\n    if (variance === 0) return '0';\r\n    return variance > 0 ? `+${variance}` : `${variance}`;\r\n  };\r\n\r\n  const varianceColor = (variance: number): string => {\r\n    if (variance === 0) return 'positive';\r\n    return variance > 0 ? 'warning' : 'negative';\r\n  };\r\n\r\n  const varianceIcon = (variance: number): string => {\r\n    if (variance === 0) return 'check';\r\n    return variance > 0 ? 'arrow_upward' : 'arrow_downward';\r\n  };\r\n\r\n  const entryStatusColor = (status: string): string => {\r\n    switch (status) {\r\n      case 'verified':\r\n        return 'positive';\r\n      case 'discrepancy':\r\n        return 'warning';\r\n      case 'pending':\r\n        return 'info';\r\n      default:\r\n        return 'grey';\r\n    }\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    loadSession();\r\n  });\r\n\r\n  onBeforeUnmount(() => {\r\n    // Cleanup to prevent async operations after unmount\r\n  });\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .counting-session-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n  }\r\n\r\n  .header-actions {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-4);\r\n\r\n    .progress-info {\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: var(--space-1);\r\n\r\n      .progress-text {\r\n        font-size: var(--text-sm);\r\n        color: var(--text-muted);\r\n      }\r\n\r\n      .progress-bar {\r\n        width: 100%;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      flex-direction: column;\r\n      gap: var(--space-3);\r\n    }\r\n  }\r\n\r\n  .loading-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--space-12);\r\n    gap: var(--space-4);\r\n\r\n    .loading-text {\r\n      color: var(--text-muted);\r\n      font-size: var(--text-base);\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .summary-content {\r\n    .summary-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n      gap: var(--space-6);\r\n\r\n      .summary-item {\r\n        .summary-label {\r\n          font-size: var(--text-sm);\r\n          color: var(--text-muted);\r\n          margin-bottom: var(--space-1);\r\n        }\r\n\r\n        .summary-value {\r\n          font-size: var(--text-lg);\r\n          font-weight: var(--font-weight-medium);\r\n          color: var(--text-primary);\r\n\r\n          &.has-discrepancies {\r\n            color: var(--warning);\r\n          }\r\n        }\r\n      }\r\n\r\n      @media (max-width: 768px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n        gap: var(--space-4);\r\n      }\r\n    }\r\n  }\r\n\r\n  .product-info {\r\n    .product-name {\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    .product-sku {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\InventoryLevelsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": { "range": [363, 419], "text": "class=\"app-btn-refresh\"\n            @click=\"refreshData\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 124,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 124,
        "endColumn": 31,
        "fix": { "range": [3892, 3954], "text": "v-model=\"filterValues\"\n        :preset=\"inventoryFilterPreset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 128,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 128,
        "endColumn": 27,
        "fix": { "range": [4035, 4088], "text": ":loading=\"loading\"\n        @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 129,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 129,
        "endColumn": 20,
        "fix": {
          "range": [4035, 4108],
          "text": "collapsible\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 130,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 130,
        "endColumn": 39,
        "fix": {
          "range": [4035, 4147],
          "text": "class=\"inventory-filter-panel\"\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\"\n        collapsible"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 379,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 379,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11749, 11752], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11749, 11752], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 514,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 514,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15527, 15530], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15527, 15530], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 523,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 523,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15818, 15821], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15818, 15821], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 584,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 584,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17413, 17416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17413, 17416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 603,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 603,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18238, 18241], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18238, 18241], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 653,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 653,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19585, 19588], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19585, 19588], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 661,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 661,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19818, 19821], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19818, 19821], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 668,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 668,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19965, 19968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19965, 19968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 709,
        "column": 25,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 709,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [21159, 21160], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 732,
        "column": 26,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 732,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [21985, 21986], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 733,
        "column": 25,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 733,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [22048, 22049], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 738,
        "column": 27,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 738,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [22292, 22293], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 754,
        "column": 24,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 754,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 768,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 768,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23217, 23220], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23217, 23220], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 851,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 851,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25646, 25649], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25646, 25649], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 5,
    "source": "<template>\n  <PageLayout>\n    <template #header>\n      <PageTitle\n        :title=\"$t('inventory.stockLevels')\"\n        :subtitle=\"$t('inventory.overview')\"\n        icon=\"inventory_2\"\n      >\n        <template #actions>\n          <q-btn\n            icon=\"refresh\"\n            :loading=\"loading\"\n            round\n            flat\n            size=\"md\"\n            @click=\"refreshData\"\n            class=\"app-btn-refresh\"\n          >\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\n          </q-btn>\n        </template>\n      </PageTitle>\n    </template>\n\n    <!-- Quick Stats Overview -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.totalProducts')\"\n          :subtitle=\"selectedLocationName\"\n          icon=\"inventory_2\"\n          icon-color=\"primary\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{ filteredStockLevels.length }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.products') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.stockLocations')\"\n          :subtitle=\"$t('inventory.activeLocations')\"\n          icon=\"location_on\"\n          icon-color=\"info\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{ clinicStore.locations.length }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.locations') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.dataLoaded')\"\n          :subtitle=\"$t('inventory.upToDate')\"\n          icon=\"check_circle\"\n          icon-color=\"positive\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"24px\" />\n              <template v-else>\n                {{ inventoryStore.realtimeConnected ? '🔄' : '✓' }}\n              </template>\n            </div>\n            <div class=\"kpi-subtitle\">\n              {{\n                inventoryStore.realtimeConnected\n                  ? $t('inventory.realTimeConnected')\n                  : $t('inventory.status')\n              }}\n            </div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          :title=\"$t('inventory.lastUpdated')\"\n          :subtitle=\"$t('inventory.refreshData')\"\n          icon=\"refresh\"\n          icon-color=\"warning\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value\">\n              <q-skeleton v-if=\"loading\" type=\"text\" width=\"48px\" />\n              <template v-else>{{ lastUpdated ? formatTime(lastUpdated) : '-' }}</template>\n            </div>\n            <div class=\"kpi-subtitle\">{{ $t('inventory.lastSync') }}</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Error Banner -->\n    <q-banner\n      v-if=\"errorState.visible\"\n      dense\n      class=\"q-mb-md bg-negative text-white\"\n      rounded\n    >\n      <div class=\"row items-center\">\n        <q-icon name=\"error_outline\" class=\"q-mr-sm\" />\n        <div class=\"col\">{{ errorState.message }}</div>\n        <div class=\"col-auto\">\n          <q-btn flat dense color=\"white\" :label=\"$t('common.retry')\" @click=\"onRetry\" />\n        </div>\n      </div>\n    </q-banner>\n\n    <!-- Modern FilterPanel Component -->\n    <div class=\"filters-section q-mb-lg\">\n      <FilterPanel\n        :preset=\"inventoryFilterPreset\"\n        v-model=\"filterValues\"\n        @change=\"handleFilterChange\"\n        @reset=\"handleFilterReset\"\n        @clear=\"handleFilterClear\"\n        :loading=\"loading\"\n        collapsible\n        class=\"inventory-filter-panel\"\n      />\n    </div>\n\n    <!-- Stock Levels Table -->\n    <div class=\"medical-table\">\n      <q-table\n        :rows=\"filteredStockLevels\"\n        :columns=\"columns\"\n        :loading=\"loading\"\n        row-key=\"id\"\n        :pagination=\"{ rowsPerPage: 25 }\"\n        flat\n        bordered\n        separator=\"cell\"\n      >\n        <template #loading>\n          <q-inner-loading showing color=\"primary\" />\n        </template>\n\n        <template #no-data>\n          <div class=\"full-width row flex-center q-gutter-sm\">\n            <q-icon size=\"2em\" name=\"sentiment_dissatisfied\" />\n            <span>{{ $t('inventory.noStockLevels') }}</span>\n          </div>\n        </template>\n\n        <template #body-cell-product_name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"product-info\">\n              <div class=\"product-name\">{{ props.row.product_name }}</div>\n              <div v-if=\"props.row.product_sku\" class=\"product-sku\">\n                SKU: {{ props.row.product_sku }}\n              </div>\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-current_quantity=\"props\">\n          <q-td :props=\"props\" class=\"text-center\">\n            <q-chip\n              :color=\"getQuantityColor(props.row)\"\n              :text-color=\"getQuantityTextColor(props.row)\"\n              size=\"sm\"\n              dense\n            >\n              {{ props.row.current_quantity }}\n              {{ props.row.product_unit || 'pcs' }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-stock_status=\"props\">\n          <q-td :props=\"props\" class=\"text-center\">\n            <q-chip\n              :color=\"getStockStatusColor(props.row.stock_status)\"\n              :text-color=\"getStockStatusTextColor(props.row.stock_status)\"\n              size=\"sm\"\n              dense\n            >\n              {{ $t(`inventory.stockStatus.${props.row.stock_status}`) }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template #body-cell-location_name=\"props\">\n          <q-td :props=\"props\">\n            <div class=\"location-info\">\n              <q-icon\n                name=\"location_on\"\n                size=\"xs\"\n                color=\"info\"\n                class=\"q-mr-xs\"\n              />\n              {{ props.row.location_name }}\n            </div>\n          </q-td>\n        </template>\n\n        <template #body-cell-last_counted_at=\"props\">\n          <q-td :props=\"props\">\n            {{\n              props.row.last_counted_at\n                ? formatDate(props.row.last_counted_at)\n                : '-'\n            }}\n          </q-td>\n        </template>\n\n        <template #body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"edit\"\n              size=\"sm\"\n              @click=\"adjustStock(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.adjustStock') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"history\"\n              size=\"sm\"\n              @click=\"viewHistory(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.viewHistory') }}</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              dense\n              icon=\"count\"\n              size=\"sm\"\n              @click=\"countStock(props.row)\"\n            >\n              <q-tooltip>{{ $t('inventory.countStock') }}</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n\n    <!-- Stock Adjustment Dialog -->\n    <FormDialog\n      v-model=\"showAdjustDialog\"\n      :title=\"$t('inventory.adjustStock')\"\n      icon=\"tune\"\n      size=\"md\"\n      :loading=\"adjusting\"\n      :submit-button-text=\"$t('inventory.adjust')\"\n      @submit=\"performAdjustment\"\n      @cancel=\"closeAdjustDialog\"\n    >\n      <div v-if=\"selectedStockLevel\" class=\"adjustment-product-info\">\n        <div class=\"product-name\">{{ selectedStockLevel.product_name }}</div>\n        <div class=\"current-stock\">\n          {{ $t('inventory.currentStock') }}:\n          {{ selectedStockLevel.current_quantity }}\n          {{ selectedStockLevel.product_unit || 'pcs' }}\n        </div>\n      </div>\n\n      <div class=\"q-gutter-md\">\n        <q-select\n          v-model=\"adjustmentType\"\n          :options=\"adjustmentTypeOptions\"\n          :label=\"$t('inventory.adjustmentType')\"\n          outlined\n          emit-value\n          map-options\n        />\n\n        <q-input\n          v-model.number=\"adjustmentQuantity\"\n          :label=\"$t('inventory.quantity')\"\n          type=\"number\"\n          outlined\n          :rules=\"[\n            val => (val !== null && val > 0) || $t('validation.required'),\n          ]\"\n        />\n\n        <q-input\n          v-model=\"adjustmentReason\"\n          :label=\"$t('inventory.reason')\"\n          type=\"textarea\"\n          outlined\n          rows=\"3\"\n        />\n      </div>\n    </FormDialog>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed, onMounted } from 'vue';\n  import { useQuasar, date } from 'quasar';\n  import { useI18n } from 'vue-i18n';\n  import PageTitle from 'src/components/PageTitle.vue';\n  import PageLayout from 'src/components/PageLayout.vue';\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\n  import FormDialog from 'src/components/base/FormDialog.vue';\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\n  import { inventoryFilterPreset } from 'src/presets/filters/inventory';\n  import { supabase } from 'src/boot/supabase';\n  import { useAuthStore } from 'src/stores/auth';\n  import { useClinicStore } from 'src/stores/clinic';\n  import { useInventoryStore } from 'src/stores/inventory';\n  import { ServiceErrorHandler } from 'src/utils/service-error-handler';\n  import type { StockUpdateRequest } from 'src/types/inventory';\n  import type {\n    FilterValues,\n    FilterChangeEvent,\n    FilterResetEvent,\n  } from 'src/types/filters';\n\n  const $q = useQuasar();\n  const { t } = useI18n();\n  const authStore = useAuthStore();\n  const clinicStore = useClinicStore();\n  const inventoryStore = useInventoryStore();\n\n  // Refs\n  const loading = ref(false);\n  const adjusting = ref(false);\n  const showAdjustDialog = ref(false);\n  interface StockLevelRow {\n    id: string;\n    product_id: string;\n    location_id: string;\n    current_quantity: number;\n    minimum_quantity: number;\n    last_counted_at?: string | null;\n    product_name: string;\n    product_sku: string | null;\n    product_category: string | null;\n    product_unit: string;\n    location_name: string;\n    stock_status: string;\n  }\n\n  const selectedStockLevel = ref<StockLevelRow | null>(null);\n  const lastUpdated = ref<Date | null>(null);\n  const errorState = ref<{ visible: boolean; message: string; retry?: () => void }>(\n    { visible: false, message: '' }\n  );\n\n  // New filter state for FilterPanel\n  const filterValues = ref<FilterValues>({});\n\n  // Adjustment state\n  const adjustmentType = ref('add');\n  const adjustmentQuantity = ref<number | null>(null);\n  const adjustmentReason = ref('');\n\n  // Data\n  const stockLevels = ref<StockLevelRow[]>([]);\n  const isDemoMode = computed(() => !authStore.clinicId);\n\n  // Filter event handlers\n  const handleFilterChange = (event: FilterChangeEvent) => {\n    // Filter logic is handled by computed property\n  };\n\n  const handleFilterReset = (event: FilterResetEvent) => {\n    filterValues.value = (inventoryFilterPreset.defaultFilters || {}) as any;\n  };\n\n  const handleFilterClear = () => {\n    filterValues.value = {};\n  };\n\n  // Computed\n  const selectedLocationName = computed(() => {\n    const locationId = filterValues.value.location;\n    if (!locationId) return t('inventory.allLocations');\n\n    const location = clinicStore.locations.find(l => l.id === locationId);\n    return location?.name || t('inventory.unknownLocation');\n  });\n\n  const filteredStockLevels = computed(() => {\n    let filtered = stockLevels.value;\n\n    // Apply search filter\n    const search = filterValues.value.search;\n    if (search) {\n      const searchTerm = String(search).toLowerCase();\n      filtered = filtered.filter(\n        level =>\n          level.product_name?.toLowerCase().includes(searchTerm) ||\n          level.product_sku?.toLowerCase().includes(searchTerm) ||\n          level.product_category?.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // Apply location filter\n    const location = filterValues.value.location;\n    if (location) {\n      filtered = filtered.filter(level => level.location_id === location);\n    }\n\n    // Apply stock status filter\n    const stockStatus = filterValues.value.stock_status;\n    if (stockStatus) {\n      filtered = filtered.filter(level => level.stock_status === stockStatus);\n    }\n\n    // Apply category filter\n    const category = filterValues.value.category;\n    if (category) {\n      filtered = filtered.filter(level => level.product_category === category);\n    }\n\n    // Apply quantity range filter\n    const quantityRange = filterValues.value.quantity_range;\n    if (\n      quantityRange &&\n      typeof quantityRange === 'object' &&\n      'min' in quantityRange\n    ) {\n      filtered = filtered.filter(level => {\n        const quantity = level.current_quantity || 0;\n        const range = quantityRange as { min?: number; max?: number };\n        if (range.min !== undefined && quantity < range.min) return false;\n        if (range.max !== undefined && quantity > range.max) return false;\n        return true;\n      });\n    }\n\n    // Apply low stock filter\n    const lowStockOnly = filterValues.value.low_stock_only;\n    if (lowStockOnly) {\n      filtered = filtered.filter(level => level.stock_status === 'low_stock');\n    }\n\n    return filtered;\n  });\n\n  // Table columns\n  const columns = computed(() => [\n    {\n      name: 'product_name',\n      label: t('inventory.product'),\n      field: 'product_name',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'location_name',\n      label: t('inventory.location'),\n      field: 'location_name',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'current_quantity',\n      label: t('inventory.currentStock'),\n      field: 'current_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'minimum_quantity',\n      label: t('inventory.minimumStock'),\n      field: 'minimum_quantity',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'stock_status',\n      label: t('inventory.status'),\n      field: 'stock_status',\n      align: 'center' as const,\n      sortable: true,\n    },\n    {\n      name: 'last_counted_at',\n      label: t('inventory.lastCounted'),\n      field: 'last_counted_at',\n      align: 'left' as const,\n      sortable: true,\n    },\n    {\n      name: 'actions',\n      label: t('inventory.actions'),\n      field: '',\n      align: 'center' as const,\n      sortable: false,\n    },\n  ]);\n\n  // Adjustment type options\n  const adjustmentTypeOptions = computed(() => [\n    { label: t('inventory.addStock'), value: 'add' },\n    { label: t('inventory.removeStock'), value: 'remove' },\n    { label: t('inventory.setStock'), value: 'set' },\n  ]);\n\n  // Helper functions\n  const getQuantityColor = (stockLevel: any): string => {\n    const quantity = stockLevel.current_quantity || 0;\n    const minimum = stockLevel.minimum_quantity || 0;\n\n    if (quantity === 0) return 'negative';\n    if (quantity <= minimum) return 'warning';\n    return 'positive';\n  };\n\n  const getQuantityTextColor = (stockLevel: any): string => {\n    const color = getQuantityColor(stockLevel);\n    return color === 'warning' ? 'black' : 'white';\n  };\n\n  const getStockStatusColor = (status: string): string => {\n    switch (status) {\n      case 'in_stock':\n        return 'positive';\n      case 'low_stock':\n        return 'warning';\n      case 'out_of_stock':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  };\n\n  const getStockStatusTextColor = (status: string): string => {\n    switch (status) {\n      case 'low_stock':\n        return 'black';\n      default:\n        return 'white';\n    }\n  };\n\n  const formatDate = (dateString: string): string => {\n    if (!dateString) return '-';\n    return date.formatDate(dateString, 'DD/MM/YYYY');\n  };\n\n  const formatTime = (dateObj: Date): string => {\n    return date.formatDate(dateObj, 'HH:mm');\n  };\n\n  // Methods\n  const loadStockLevels = async () => {\n    try {\n      loading.value = true;\n      // Demo fallback: no practice selected\n      if (!authStore.clinicId) {\n        stockLevels.value = generateDemoStockLevels();\n        await updateLastSync();\n        errorState.value = { visible: false, message: '' };\n        return;\n      }\n      const { data, error } = await supabase\n        .from('stock_levels')\n        .select(\n          `\n        *,\n        product:products(name, sku, category, unit),\n        location:practice_locations(name)\n      `\n        )\n        .eq('practice_id', authStore.clinicId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      stockLevels.value = (data || []).map((level: any) => ({\n        id: level.id,\n        product_id: level.product_id,\n        location_id: level.location_id,\n        current_quantity: level.current_quantity || 0,\n        minimum_quantity: level.minimum_stock || 0,\n        last_counted_at: level.last_counted_at,\n        product_name: level.product?.name || `Product ${level.product_id}`,\n        product_sku: level.product?.sku || null,\n        product_category: level.product?.category || null,\n        product_unit: level.product?.unit || 'pcs',\n        location_name: level.location?.name || `Location ${level.location_id}`,\n        stock_status: determineStockStatus(\n          level.current_quantity,\n          level.minimum_stock || 0\n        ),\n      }));\n      await updateLastSync();\n      errorState.value = { visible: false, message: '' };\n    } catch (error: any) {\n      ServiceErrorHandler.handle(error, {\n        service: 'InventoryLevels',\n        operation: 'loadStockLevels',\n        metadata: { practiceId: authStore.clinicId },\n      }, { rethrow: false });\n      errorState.value = {\n        visible: true,\n        message: t('inventory.loadError'),\n        retry: async () => {\n          await loadStockLevels();\n        },\n      };\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const updateLastSync = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('stock_movements')\n        .select('created_at')\n        .eq('practice_id', authStore.clinicId)\n        .order('created_at', { ascending: false })\n        .limit(1);\n      if (!error && data && data.length > 0) {\n        lastUpdated.value = new Date(data[0].created_at);\n      } else {\n        lastUpdated.value = new Date();\n      }\n    } catch {\n      lastUpdated.value = new Date();\n    }\n  };\n\n  const determineStockStatus = (current: number, minimum: number): string => {\n    if (current <= 0) return 'out_of_stock';\n    if (current <= minimum) return 'low_stock';\n    return 'in_stock';\n  };\n\n  const refreshData = async () => {\n    await loadStockLevels();\n    $q.notify({\n      type: 'positive',\n      message: t('inventory.dataRefreshed'),\n    });\n  };\n\n  const adjustStock = (stockLevel: any) => {\n    selectedStockLevel.value = stockLevel;\n    adjustmentType.value = 'add';\n    adjustmentQuantity.value = null;\n    adjustmentReason.value = '';\n    showAdjustDialog.value = true;\n  };\n\n  const viewHistory = (stockLevel: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('inventory.historyNotImplemented'),\n    });\n  };\n\n  const countStock = (stockLevel: any) => {\n    $q.notify({\n      type: 'info',\n      message: t('inventory.countingNotImplemented'),\n    });\n  };\n\n  const closeAdjustDialog = () => {\n    showAdjustDialog.value = false;\n    selectedStockLevel.value = null;\n  };\n\n  const performAdjustment = async () => {\n    if (!selectedStockLevel.value || !adjustmentQuantity.value) return;\n\n    try {\n      adjusting.value = true;\n\n      const currentQty = selectedStockLevel.value.current_quantity;\n      let targetQty = currentQty;\n      switch (adjustmentType.value) {\n        case 'add':\n          targetQty = currentQty + adjustmentQuantity.value;\n          break;\n        case 'remove':\n          targetQty = Math.max(0, currentQty - adjustmentQuantity.value);\n          break;\n        case 'set':\n          targetQty = adjustmentQuantity.value;\n          break;\n      }\n      const delta = targetQty - currentQty;\n      if (delta === 0) {\n        closeAdjustDialog();\n        return;\n      }\n\n      // Demo fallback: update local state only, no persistence\n      if (!authStore.clinicId) {\n        // Update local list to reflect change\n        const idx = stockLevels.value.findIndex(\n          s => s.id === selectedStockLevel.value!.id\n        );\n        if (idx !== -1) {\n          const updated: StockLevelRow = {\n            ...stockLevels.value[idx],\n            current_quantity: Math.max(0, targetQty),\n            stock_status: determineStockStatus(\n              Math.max(0, targetQty),\n              stockLevels.value[idx].minimum_quantity || 0\n            ),\n          };\n          stockLevels.value.splice(idx, 1, updated);\n        }\n        $q.notify({ type: 'positive', message: t('inventory.stockAdjusted') });\n        closeAdjustDialog();\n        await updateLastSync();\n        return;\n      }\n\n      // Prefer RPC if available, fallback to store update\n      const tryRpc = async () => {\n        return await supabase.rpc('update_stock_level', {\n          p_practice_id: authStore.clinicId,\n          p_location_id: selectedStockLevel.value!.location_id,\n          p_product_id: selectedStockLevel.value!.product_id,\n          p_quantity_change: delta,\n          p_movement_type: 'adjustment',\n          p_performed_by: authStore.user?.id || null,\n          p_reference_type: 'manual_adjustment',\n          p_reference_id: selectedStockLevel.value!.id,\n          p_reason_code: 'manual_adjustment',\n          p_notes: adjustmentReason.value || null,\n        });\n      };\n\n      let rpcOk = false;\n      try {\n        const { error: rpcError } = await tryRpc();\n        if (!rpcError) rpcOk = true;\n      } catch {\n        rpcOk = false;\n      }\n\n      if (!rpcOk) {\n        const request: StockUpdateRequest = {\n          practice_id: authStore.clinicId!,\n          location_id: selectedStockLevel.value.location_id,\n          product_id: selectedStockLevel.value.product_id,\n          quantity_change: delta,\n          movement_type: 'adjustment',\n          reason_code: 'manual_adjustment',\n          notes: adjustmentReason.value || '',\n        };\n        await inventoryStore.updateStockLevel(request);\n      }\n\n      $q.notify({ type: 'positive', message: t('inventory.stockAdjusted') });\n      closeAdjustDialog();\n      await loadStockLevels();\n    } catch (error: any) {\n      ServiceErrorHandler.handle(error, {\n        service: 'InventoryLevels',\n        operation: 'performAdjustment',\n        metadata: {\n          practiceId: authStore.clinicId,\n          productId: selectedStockLevel.value?.product_id,\n          locationId: selectedStockLevel.value?.location_id,\n        },\n      }, { rethrow: false });\n      errorState.value = {\n        visible: true,\n        message: t('inventory.adjustError'),\n        retry: async () => {\n          await performAdjustment();\n        },\n      };\n    } finally {\n      adjusting.value = false;\n    }\n  };\n\n  const onRetry = async () => {\n    const retry = errorState.value.retry;\n    errorState.value = { visible: false, message: '' };\n    if (retry) await retry(); else await loadStockLevels();\n  };\n\n  // Demo data generator\n  const generateDemoStockLevels = (): StockLevelRow[] => {\n    const demo: StockLevelRow[] = [\n      {\n        id: 'demo-1',\n        product_id: 'prod-1',\n        location_id: 'loc-1',\n        current_quantity: 24,\n        minimum_quantity: 10,\n        last_counted_at: null,\n        product_name: 'Handschoenen Maat M',\n        product_sku: 'GLV-M',\n        product_category: 'Verbruik',\n        product_unit: 'pcs',\n        location_name: 'Demo Magazijn',\n        stock_status: determineStockStatus(24, 10),\n      },\n      {\n        id: 'demo-2',\n        product_id: 'prod-2',\n        location_id: 'loc-1',\n        current_quantity: 5,\n        minimum_quantity: 8,\n        last_counted_at: null,\n        product_name: 'Desinfectiemiddel 500ml',\n        product_sku: 'DSF-500',\n        product_category: 'Hygiëne',\n        product_unit: 'btl',\n        location_name: 'Demo Magazijn',\n        stock_status: determineStockStatus(5, 8),\n      },\n      {\n        id: 'demo-3',\n        product_id: 'prod-3',\n        location_id: 'loc-2',\n        current_quantity: 0,\n        minimum_quantity: 2,\n        last_counted_at: null,\n        product_name: 'Pleisters set',\n        product_sku: 'PLS-SET',\n        product_category: 'EHBO',\n        product_unit: 'set',\n        location_name: 'Behandelkamer 1',\n        stock_status: determineStockStatus(0, 2),\n      },\n    ];\n    return demo;\n  };\n\n  // Lifecycle\n  onMounted(async () => {\n    await loadStockLevels();\n\n    // Initialize filter values with defaults\n    if (inventoryFilterPreset.defaultFilters) {\n      filterValues.value = inventoryFilterPreset.defaultFilters as any;\n    }\n  });\n</script>\n\n<style lang=\"scss\" scoped>\n  // ===================================================================\n  // Inventory levels page styles\n  // ===================================================================\n\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl);\n          font-weight: var(--font-weight-bold);\n          line-height: var(--leading-tight);\n          color: var(--brand-primary);\n          margin-bottom: var(--space-2);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs);\n          font-weight: var(--font-weight-semibold);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal);\n        }\n      }\n    }\n  }\n\n  .filters-section {\n    margin-bottom: var(--space-6);\n\n    .inventory-filter-panel {\n      // FilterPanel defines its own styling\n      // No additional customization needed\n    }\n  }\n\n  .product-info {\n    .product-name {\n      font-family: var(--font-family);\n      font-weight: var(--font-weight-semibold);\n      font-size: var(--text-base);\n      color: var(--text-primary);\n      line-height: var(--leading-tight);\n    }\n\n    .product-sku {\n      font-family: var(--font-family-mono);\n      font-size: var(--text-xs);\n      font-weight: var(--font-weight-medium);\n      color: var(--text-tertiary);\n      margin-top: var(--space-1);\n      background: var(--bg-tertiary);\n      padding: var(--space-1) var(--space-2);\n      border-radius: var(--radius-sm);\n      display: inline-block;\n    }\n  }\n\n  .location-info {\n    display: flex;\n    align-items: center;\n    gap: var(--space-2);\n\n    .location-name {\n      font-family: var(--font-family);\n      font-weight: var(--font-weight-medium);\n      color: var(--text-primary);\n    }\n\n    .location-type {\n      font-size: var(--text-xs);\n      color: var(--text-secondary);\n    }\n  }\n\n  // ===================================================================\n  // DARK MODE SUPPORT\n  // ===================================================================\n\n  body.body--dark {\n    .stats-cards-container {\n      .kpi-content {\n        .kpi-value {\n          color: var(--brand-primary-light);\n        }\n\n        .kpi-subtitle {\n          color: var(--text-secondary);\n        }\n      }\n    }\n\n    .product-info {\n      .product-name {\n        color: var(--text-primary);\n      }\n\n      .product-sku {\n        color: var(--text-tertiary);\n        background: var(--bg-tertiary);\n      }\n    }\n\n    .location-info {\n      .location-name {\n        color: var(--text-primary);\n      }\n\n      .location-type {\n        color: var(--text-secondary);\n      }\n    }\n  }\n\n  // Adjustment dialog styles\n  .adjustment-product-info {\n    padding: var(--space-4);\n    background: var(--neutral-50);\n    border-radius: var(--radius-lg);\n    margin-bottom: var(--space-4);\n\n    .product-name {\n      font-size: var(--text-base);\n      font-weight: var(--font-weight-semibold);\n      color: var(--neutral-900);\n      margin-bottom: var(--space-1);\n    }\n\n    .current-stock {\n      font-size: var(--text-sm);\n      color: var(--neutral-600);\n    }\n  }\n\n  // Dark mode adjustments\n  body.body--dark {\n    .adjustment-product-info {\n      background: var(--neutral-800);\n\n      .product-name {\n        color: var(--neutral-100);\n      }\n\n      .current-stock {\n        color: var(--neutral-400);\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\LocationsPage.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#avatar' instead of 'v-slot:avatar'.",
        "line": 50,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 50,
        "endColumn": 30,
        "fix": { "range": [1579, 1592], "text": "#avatar" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 63,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 63,
        "endColumn": 31,
        "fix": {
          "range": [1962, 2025],
          "text": "v-model=\"filterValues\"\r\n        :preset=\"locationsFilterPreset\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 67,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 67,
        "endColumn": 27,
        "fix": { "range": [2109, 2163], "text": ":loading=\"loading\"\r\n        @clear=\"handleFilterClear\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 68,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 68,
        "endColumn": 20,
        "fix": {
          "range": [2109, 2184],
          "text": "collapsible\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 69,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 69,
        "endColumn": 39,
        "fix": {
          "range": [2109, 2224],
          "text": "class=\"locations-filter-panel\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible"
        }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 102,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 102,
        "endColumn": 51,
        "fix": { "range": [3040, 3064], "text": "#body-cell-actions" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "<template>\r\n  <PageLayout>\r\n    <PageTitle\r\n      :title=\"$t('locations.title')\"\r\n      :subtitle=\"$t('locations.manage')\"\r\n      icon=\"place\"\r\n    />\r\n\r\n    <!-- Summary Cards -->\r\n    <div class=\"row q-gutter-md q-mb-lg\">\r\n      <div class=\"col-12 col-md-3\">\r\n        <q-card flat bordered>\r\n          <q-card-section>\r\n            <div class=\"row items-center no-wrap\">\r\n              <div class=\"col\">\r\n                <div class=\"text-h6\">{{ locations.length }}</div>\r\n                <div class=\"text-caption text-grey\">\r\n                  {{ $t('locations.allLocations') }}\r\n                </div>\r\n              </div>\r\n              <div class=\"col-auto\">\r\n                <q-icon name=\"place\" size=\"24px\" color=\"primary\" />\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n\r\n      <div class=\"col-12 col-md-3\">\r\n        <q-card flat bordered>\r\n          <q-card-section>\r\n            <div class=\"row items-center no-wrap\">\r\n              <div class=\"col\">\r\n                <div class=\"text-h6\">{{ mainLocationsCount }}</div>\r\n                <div class=\"text-caption text-grey\">\r\n                  {{ $t('locations.mainLocations') }}\r\n                </div>\r\n              </div>\r\n              <div class=\"col-auto\">\r\n                <q-icon name=\"star\" size=\"24px\" color=\"warning\" />\r\n              </div>\r\n            </div>\r\n          </q-card-section>\r\n        </q-card>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Coming Soon Banner -->\r\n    <q-banner rounded class=\"bg-info text-white q-mb-lg\">\r\n      <template v-slot:avatar>\r\n        <q-icon name=\"info\" color=\"white\" />\r\n      </template>\r\n      <div class=\"text-subtitle1\">{{ $t('locations.title') }}</div>\r\n      <div class=\"text-body2 q-mt-xs\">\r\n        {{ $t('locations.comingSoonDescription') }}\r\n      </div>\r\n    </q-banner>\r\n\r\n    <!-- FilterPanel component -->\r\n    <div class=\"filters-section q-mb-lg\">\r\n      <FilterPanel\r\n        :preset=\"locationsFilterPreset\"\r\n        v-model=\"filterValues\"\r\n        @change=\"handleFilterChange\"\r\n        @reset=\"handleFilterReset\"\r\n        @clear=\"handleFilterClear\"\r\n        :loading=\"loading\"\r\n        collapsible\r\n        class=\"locations-filter-panel\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Actions -->\r\n    <div class=\"row q-gutter-md items-center q-mb-lg\">\r\n      <div class=\"col-auto\">\r\n        <q-btn\r\n          :label=\"$t('locations.add')\"\r\n          icon=\"add\"\r\n          unelevated\r\n          no-caps\r\n          class=\"app-btn-success\"\r\n          @click=\"showComingSoon\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Locations Table -->\r\n    <div class=\"medical-table\">\r\n      <q-table\r\n        :rows=\"sortedLocations\"\r\n        :columns=\"enhancedColumns\"\r\n        :loading=\"loading\"\r\n        row-key=\"id\"\r\n        :pagination=\"pagination\"\r\n        flat\r\n        bordered\r\n        separator=\"cell\"\r\n        :rows-per-page-options=\"[10, 25, 50]\"\r\n        :no-data-label=\"$t('locations.noLocations')\"\r\n        @request=\"onTableRequest\"\r\n      >\r\n        <template v-slot:body-cell-actions=\"props\">\r\n          <q-td :props=\"props\">\r\n            <q-btn icon=\"edit\" size=\"sm\" flat dense @click=\"showComingSoon\" />\r\n            <q-btn\r\n              icon=\"delete\"\r\n              size=\"sm\"\r\n              flat\r\n              dense\r\n              color=\"negative\"\r\n              @click=\"showComingSoon\"\r\n            />\r\n          </q-td>\r\n        </template>\r\n      </q-table>\r\n    </div>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onBeforeUnmount } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import PageTitle from '@/components/PageTitle.vue';\r\n  import PageLayout from '@/components/PageLayout.vue';\r\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useTableSorting } from 'src/composables/useTableSorting';\r\n  import { locationsFilterPreset } from 'src/presets/filters/locations';\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from 'src/types/filters';\r\n\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n\r\n  // Table sorting\r\n  const { pagination, onTableRequest, sortData } = useTableSorting({\r\n    rowsPerPage: 25,\r\n  });\r\n\r\n  // State\r\n  const authStore = useAuthStore();\r\n  const isUnmounted = ref(false);\r\n\r\n  // Data\r\n  const loading = ref(false);\r\n\r\n  // Filter system styles\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Sample data for demonstration - using computed to ensure reactivity with translations\r\n  const locations = computed(() => [\r\n    {\r\n      id: 1,\r\n      name: t('locations.sampleData.mainWarehouse.name'),\r\n      type: t('locations.sampleData.mainWarehouse.type'),\r\n      description: t('locations.sampleData.mainWarehouse.description'),\r\n      capacity: t('locations.capacityItems', { count: 1000 }),\r\n      isMain: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: t('locations.sampleData.pharmacy.name'),\r\n      type: t('locations.sampleData.pharmacy.type'),\r\n      description: t('locations.sampleData.pharmacy.description'),\r\n      capacity: t('locations.capacityItems', { count: 500 }),\r\n      isMain: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: t('locations.sampleData.treatmentRoom.name'),\r\n      type: t('locations.sampleData.treatmentRoom.type'),\r\n      description: t('locations.sampleData.treatmentRoom.description'),\r\n      capacity: t('locations.capacityItems', { count: 50 }),\r\n      isMain: false,\r\n    },\r\n  ]);\r\n\r\n  // Computed\r\n  const filteredLocations = computed(() => {\r\n    let filtered = [...locations.value];\r\n\r\n    // Apply search filter\r\n    if (filterValues.value.search) {\r\n      const searchTerm = String(filterValues.value.search).toLowerCase();\r\n      filtered = filtered.filter(\r\n        location =>\r\n          location.name.toLowerCase().includes(searchTerm) ||\r\n          location.type.toLowerCase().includes(searchTerm) ||\r\n          location.description.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n\r\n    // Apply type filter\r\n    if (filterValues.value.type) {\r\n      filtered = filtered.filter(\r\n        location =>\r\n          location.type.toLowerCase() ===\r\n          String(filterValues.value.type).toLowerCase()\r\n      );\r\n    }\r\n\r\n    // Apply main location filter\r\n    if (filterValues.value.is_main === true) {\r\n      filtered = filtered.filter(location => location.isMain === true);\r\n    }\r\n\r\n    return filtered;\r\n  });\r\n\r\n  // Apply sorting to filtered locations\r\n  const sortedLocations = computed(() => {\r\n    return sortData(\r\n      filteredLocations.value,\r\n      pagination.value.sortBy,\r\n      pagination.value.descending\r\n    );\r\n  });\r\n\r\n  const mainLocationsCount = computed(() => {\r\n    return locations.value.filter(loc => loc.isMain).length;\r\n  });\r\n\r\n  const enhancedColumns = computed(() => [\r\n    {\r\n      name: 'name',\r\n      label: t('locations.name'),\r\n      field: 'name',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      classes: 'col-name',\r\n      headerClasses: 'col-name',\r\n    },\r\n    {\r\n      name: 'type',\r\n      label: t('locations.type'),\r\n      field: 'type',\r\n      align: 'left' as const,\r\n      sortable: true,\r\n      classes: 'col-status',\r\n      headerClasses: 'col-status',\r\n    },\r\n    {\r\n      name: 'description',\r\n      label: t('locations.description'),\r\n      field: 'description',\r\n      align: 'left' as const,\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'capacity',\r\n      label: t('locations.capacity'),\r\n      field: 'capacity',\r\n      align: 'left' as const,\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('common.actions'),\r\n      field: 'actions',\r\n      align: 'center' as const,\r\n      sortable: false,\r\n      classes: 'col-actions',\r\n      headerClasses: 'col-actions',\r\n    },\r\n  ]);\r\n\r\n  // Filter event handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    // Handle individual filter changes if needed\r\n    // Filters are applied automatically via computed properties\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    // Handle filter reset - filters automatically reset via v-model\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    // Handle all filters cleared - filters automatically cleared via v-model\r\n  };\r\n\r\n  // Methods\r\n  const showComingSoon = () => {\r\n    $q.notify({\r\n      type: 'info',\r\n      message: t('locations.comingSoonDescription'),\r\n      position: 'top',\r\n    });\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(() => {\r\n    // Future: Load actual locations from API\r\n  });\r\n\r\n  onBeforeUnmount(() => {\r\n    isUnmounted.value = true;\r\n  });\r\n</script>\r\n\r\n<style scoped>\r\n  .locations-content {\r\n    padding: 24px;\r\n  }\r\n\r\n  .coming-soon-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 300px;\r\n    text-align: center;\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\MobileCountingTestPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":color\" should go before \"@click\".",
        "line": 16,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 71,
        "fix": {
          "range": [403, 504],
          "text": ":color=\"currentViewport === 'mobile' ? 'primary' : 'grey'\"\n            @click=\"setViewport('mobile')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 30,
        "fix": {
          "range": [403, 534],
          "text": "label=\"📱 Mobile\"\n            @click=\"setViewport('mobile')\"\n            :color=\"currentViewport === 'mobile' ? 'primary' : 'grey'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 18,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 18,
        "endColumn": 22,
        "fix": {
          "range": [403, 556],
          "text": "size=\"sm\"\n            @click=\"setViewport('mobile')\"\n            :color=\"currentViewport === 'mobile' ? 'primary' : 'grey'\"\n            label=\"📱 Mobile\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":color\" should go before \"@click\".",
        "line": 22,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 22,
        "endColumn": 71,
        "fix": {
          "range": [599, 700],
          "text": ":color=\"currentViewport === 'tablet' ? 'primary' : 'grey'\"\n            @click=\"setViewport('tablet')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 23,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 23,
        "endColumn": 30,
        "fix": {
          "range": [599, 730],
          "text": "label=\"📟 Tablet\"\n            @click=\"setViewport('tablet')\"\n            :color=\"currentViewport === 'tablet' ? 'primary' : 'grey'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 24,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 24,
        "endColumn": 22,
        "fix": {
          "range": [599, 752],
          "text": "size=\"sm\"\n            @click=\"setViewport('tablet')\"\n            :color=\"currentViewport === 'tablet' ? 'primary' : 'grey'\"\n            label=\"📟 Tablet\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":color\" should go before \"@click\".",
        "line": 28,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 72,
        "fix": {
          "range": [795, 898],
          "text": ":color=\"currentViewport === 'desktop' ? 'primary' : 'grey'\"\n            @click=\"setViewport('desktop')\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"label\" should go before \"@click\".",
        "line": 29,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 29,
        "endColumn": 32,
        "fix": {
          "range": [795, 930],
          "text": "label=\"🖥️ Desktop\"\n            @click=\"setViewport('desktop')\"\n            :color=\"currentViewport === 'desktop' ? 'primary' : 'grey'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 30,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 30,
        "endColumn": 22,
        "fix": {
          "range": [795, 952],
          "text": "size=\"sm\"\n            @click=\"setViewport('desktop')\"\n            :color=\"currentViewport === 'desktop' ? 'primary' : 'grey'\"\n            label=\"🖥️ Desktop\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":icon\" should go before \"@click\".",
        "line": 36,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 36,
        "endColumn": 56,
        "fix": {
          "range": [1015, 1094],
          "text": ":icon=\"darkMode ? 'light_mode' : 'dark_mode'\"\n          @click=\"toggleDarkMode\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":label\" should go before \"@click\".",
        "line": 37,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 37,
        "endColumn": 57,
        "fix": {
          "range": [1015, 1151],
          "text": ":label=\"darkMode ? 'Light Mode' : 'Dark Mode'\"\n          @click=\"toggleDarkMode\"\n          :icon=\"darkMode ? 'light_mode' : 'dark_mode'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"outline\" should go before \"@click\".",
        "line": 38,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 38,
        "endColumn": 18,
        "fix": {
          "range": [1015, 1169],
          "text": "outline\n          @click=\"toggleDarkMode\"\n          :icon=\"darkMode ? 'light_mode' : 'dark_mode'\"\n          :label=\"darkMode ? 'Light Mode' : 'Dark Mode'\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"size\" should go before \"@click\".",
        "line": 39,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 39,
        "endColumn": 20,
        "fix": {
          "range": [1015, 1189],
          "text": "size=\"sm\"\n          @click=\"toggleDarkMode\"\n          :icon=\"darkMode ? 'light_mode' : 'dark_mode'\"\n          :label=\"darkMode ? 'Light Mode' : 'Dark Mode'\"\n          outline"
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 13,
    "source": "<template>\n  <q-page class=\"mobile-counting-test-page\">\n    <!-- Test Header -->\n    <div class=\"test-header\">\n      <h1>Mobiel Tellen - Test Interface</h1>\n      <p>\n        Test de nieuwe moderne mobiel tellen interface op verschillende\n        schermformaten\n      </p>\n\n      <!-- Device Simulation Controls -->\n      <div class=\"device-controls\">\n        <q-btn-group>\n          <q-btn\n            @click=\"setViewport('mobile')\"\n            :color=\"currentViewport === 'mobile' ? 'primary' : 'grey'\"\n            label=\"📱 Mobile\"\n            size=\"sm\"\n          />\n          <q-btn\n            @click=\"setViewport('tablet')\"\n            :color=\"currentViewport === 'tablet' ? 'primary' : 'grey'\"\n            label=\"📟 Tablet\"\n            size=\"sm\"\n          />\n          <q-btn\n            @click=\"setViewport('desktop')\"\n            :color=\"currentViewport === 'desktop' ? 'primary' : 'grey'\"\n            label=\"🖥️ Desktop\"\n            size=\"sm\"\n          />\n        </q-btn-group>\n\n        <q-btn\n          @click=\"toggleDarkMode\"\n          :icon=\"darkMode ? 'light_mode' : 'dark_mode'\"\n          :label=\"darkMode ? 'Light Mode' : 'Dark Mode'\"\n          outline\n          size=\"sm\"\n        />\n      </div>\n    </div>\n\n    <!-- Device Viewport Simulator -->\n    <div class=\"viewport-simulator\" :class=\"viewportClass\">\n      <div class=\"device-frame\">\n        <div class=\"device-screen\">\n          <MobileCountingInterface\n            :practice-id=\"testPracticeId\"\n            :location-id=\"testLocationId\"\n            @close=\"handleClose\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <!-- Test Information -->\n    <div class=\"test-info\">\n      <q-card>\n        <q-card-section>\n          <h3>Test Features:</h3>\n          <ul>\n            <li>✅ Compacte camera preview (geen full-screen overlay)</li>\n            <li>✅ Geïntegreerde barcode scanner</li>\n            <li>✅ Touch-friendly interface</li>\n            <li>✅ Swipe gestures (links = overslaan, rechts = bevestigen)</li>\n            <li>✅ Haptic feedback op ondersteunde devices</li>\n            <li>✅ Moderne card-based layout</li>\n            <li>✅ Responsive design voor alle schermformaten</li>\n            <li>✅ Dark mode support</li>\n          </ul>\n        </q-card-section>\n      </q-card>\n\n      <q-card class=\"q-mt-md\">\n        <q-card-section>\n          <h3>Swipe Instructies:</h3>\n          <div class=\"swipe-demo\">\n            <div class=\"swipe-item left\">\n              <q-icon name=\"keyboard_arrow_left\" size=\"2rem\" />\n              <span>Swipe links om product over te slaan</span>\n            </div>\n            <div class=\"swipe-item right\">\n              <q-icon name=\"keyboard_arrow_right\" size=\"2rem\" />\n              <span>Swipe rechts om telling te bevestigen</span>\n            </div>\n          </div>\n        </q-card-section>\n      </q-card>\n    </div>\n  </q-page>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import { useQuasar } from 'quasar';\n  import MobileCountingInterface from 'src/components/inventory/MobileCountingInterface.vue';\n\n  const $q = useQuasar();\n\n  // Test state\n  const currentViewport = ref<'mobile' | 'tablet' | 'desktop'>('mobile');\n  const darkMode = ref(false);\n  const testPracticeId = ref('test-practice-1');\n  const testLocationId = ref('test-location-1');\n\n  // Computed\n  const viewportClass = computed(() => {\n    return `viewport-${currentViewport.value}${\n      darkMode.value ? ' dark-mode' : ''\n    }`;\n  });\n\n  // Methods\n  const setViewport = (viewport: 'mobile' | 'tablet' | 'desktop') => {\n    currentViewport.value = viewport;\n\n    $q.notify({\n      message: `Viewport changed to ${viewport}`,\n      type: 'info',\n      position: 'top',\n      timeout: 1000,\n    });\n  };\n\n  const toggleDarkMode = () => {\n    darkMode.value = !darkMode.value;\n\n    // Apply dark mode to body for testing\n    if (darkMode.value) {\n      document.body.classList.add('body--dark');\n    } else {\n      document.body.classList.remove('body--dark');\n    }\n\n    $q.notify({\n      message: `${darkMode.value ? 'Dark' : 'Light'} mode enabled`,\n      type: 'info',\n      position: 'top',\n      timeout: 1000,\n    });\n  };\n\n  const handleClose = () => {\n    $q.notify({\n      message: 'Mobiel tellen interface gesloten',\n      type: 'info',\n      position: 'top',\n    });\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .mobile-counting-test-page {\n    min-height: 100vh;\n    background: #f8fafc;\n    padding: 2rem;\n  }\n\n  .test-header {\n    text-align: center;\n    margin-bottom: 2rem;\n\n    h1 {\n      margin: 0 0 0.5rem 0;\n      color: #1e293b;\n      font-size: 2rem;\n      font-weight: 700;\n    }\n\n    p {\n      color: #64748b;\n      font-size: 1.125rem;\n      margin-bottom: 1.5rem;\n    }\n\n    .device-controls {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 1rem;\n      flex-wrap: wrap;\n    }\n  }\n\n  .viewport-simulator {\n    display: flex;\n    justify-content: center;\n    margin-bottom: 2rem;\n\n    .device-frame {\n      background: #1e293b;\n      border-radius: 20px;\n      padding: 20px;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n      position: relative;\n\n      &::before {\n        content: '';\n        position: absolute;\n        top: 8px;\n        left: 50%;\n        transform: translateX(-50%);\n        width: 60px;\n        height: 4px;\n        background: #64748b;\n        border-radius: 2px;\n      }\n\n      .device-screen {\n        background: white;\n        border-radius: 12px;\n        overflow: hidden;\n        position: relative;\n      }\n    }\n\n    &.viewport-mobile .device-frame {\n      width: 375px;\n      .device-screen {\n        height: 667px;\n      }\n    }\n\n    &.viewport-tablet .device-frame {\n      width: 768px;\n      .device-screen {\n        height: 1024px;\n      }\n    }\n\n    &.viewport-desktop .device-frame {\n      width: 1024px;\n      .device-screen {\n        height: 768px;\n      }\n    }\n\n    &.dark-mode .device-frame .device-screen {\n      background: #1e293b;\n    }\n  }\n\n  .test-info {\n    max-width: 800px;\n    margin: 0 auto;\n\n    h3 {\n      margin: 0 0 1rem 0;\n      color: #1e293b;\n      font-size: 1.25rem;\n      font-weight: 600;\n    }\n\n    ul {\n      margin: 0;\n      padding-left: 1.5rem;\n\n      li {\n        margin-bottom: 0.5rem;\n        color: #475569;\n      }\n    }\n\n    .swipe-demo {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 1rem;\n      margin-top: 1rem;\n\n      .swipe-item {\n        display: flex;\n        align-items: center;\n        gap: 0.75rem;\n        padding: 1rem;\n        border-radius: 8px;\n        font-weight: 500;\n\n        &.left {\n          background: #fef3c7;\n          color: #d97706;\n        }\n\n        &.right {\n          background: #dcfce7;\n          color: #16a34a;\n        }\n      }\n    }\n  }\n\n  // Responsive adjustments\n  @media (max-width: 1200px) {\n    .viewport-simulator {\n      &.viewport-desktop .device-frame {\n        width: 90vw;\n        max-width: 800px;\n      }\n    }\n  }\n\n  @media (max-width: 900px) {\n    .viewport-simulator {\n      &.viewport-tablet .device-frame {\n        width: 90vw;\n        max-width: 600px;\n        .device-screen {\n          height: 800px;\n        }\n      }\n    }\n  }\n\n  @media (max-width: 600px) {\n    .mobile-counting-test-page {\n      padding: 1rem;\n    }\n\n    .viewport-simulator {\n      &.viewport-mobile .device-frame {\n        width: 100%;\n        max-width: 350px;\n        .device-screen {\n          height: 600px;\n        }\n      }\n    }\n\n    .test-info .swipe-demo {\n      grid-template-columns: 1fr;\n    }\n  }\n\n  // Dark mode\n  body.body--dark {\n    .mobile-counting-test-page {\n      background: #0f172a;\n    }\n\n    .test-header {\n      h1 {\n        color: #f1f5f9;\n      }\n\n      p {\n        color: #94a3b8;\n      }\n    }\n\n    .test-info {\n      h3 {\n        color: #f1f5f9;\n      }\n\n      ul li {\n        color: #cbd5e1;\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\inventory\\MovementsPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 16,
        "column": 14,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 16,
        "endColumn": 56,
        "fix": {
          "range": [357, 434],
          "text": ":loading=\"inventoryStore.movementsLoading\"\r\n             @click=\"refreshData\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 17,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 17,
        "endColumn": 36,
        "fix": {
          "range": [357, 471],
          "text": "class=\"app-btn-refresh\"\r\n             @click=\"refreshData\"\r\n            :loading=\"inventoryStore.movementsLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"unelevated\" should go before \"@click\".",
        "line": 26,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 26,
        "endColumn": 23,
        "fix": { "range": [677, 725], "text": "unelevated\r\n            @click=\"exportMovements\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"no-caps\" should go before \"@click\".",
        "line": 27,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 27,
        "endColumn": 20,
        "fix": {
          "range": [677, 746],
          "text": "no-caps\r\n            @click=\"exportMovements\"\r\n            unelevated"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@click\".",
        "line": 28,
        "column": 13,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 28,
        "endColumn": 38,
        "fix": {
          "range": [677, 785],
          "text": "class=\"app-btn-secondary\"\r\n            @click=\"exportMovements\"\r\n            unelevated\r\n            no-caps"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model\" should go before \":preset\".",
        "line": 38,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 38,
        "endColumn": 31,
        "fix": { "range": [968, 1031], "text": "v-model=\"filterValues\"\r\n        :preset=\"movementsFilterPreset\"" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@clear\".",
        "line": 42,
        "column": 10,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 42,
        "endColumn": 52,
        "fix": {
          "range": [1115, 1194],
          "text": ":loading=\"inventoryStore.movementsLoading\"\r\n         @clear=\"handleFilterClear\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"collapsible\" should go before \"@clear\".",
        "line": 43,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 43,
        "endColumn": 20,
        "fix": {
          "range": [1115, 1215],
          "text": "collapsible\r\n         @clear=\"handleFilterClear\"\r\n        :loading=\"inventoryStore.movementsLoading\""
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@clear\".",
        "line": 44,
        "column": 9,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 44,
        "endColumn": 39,
        "fix": {
          "range": [1115, 1255],
          "text": "class=\"movements-filter-panel\"\r\n         @clear=\"handleFilterClear\"\r\n        :loading=\"inventoryStore.movementsLoading\"\r\n        collapsible"
        }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"v-model:pagination\" should go before \"row-key\".",
        "line": 78,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 78,
        "endColumn": 42,
        "fix": { "range": [2262, 2317], "text": "v-model:pagination=\"pagination\"\r\n          row-key=\"id\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-movement_type' instead of 'v-slot:body-cell-movement_type'.",
        "line": 91,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 91,
        "endColumn": 59,
        "fix": { "range": [2782, 2812], "text": "#body-cell-movement_type" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-product' instead of 'v-slot:body-cell-product'.",
        "line": 104,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 104,
        "endColumn": 53,
        "fix": { "range": [3225, 3249], "text": "#body-cell-product" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-quantity_change' instead of 'v-slot:body-cell-quantity_change'.",
        "line": 118,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 118,
        "endColumn": 61,
        "fix": { "range": [3738, 3770], "text": "#body-cell-quantity_change" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-location' instead of 'v-slot:body-cell-location'.",
        "line": 134,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 134,
        "endColumn": 54,
        "fix": { "range": [4306, 4331], "text": "#body-cell-location" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-created_at' instead of 'v-slot:body-cell-created_at'.",
        "line": 141,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 141,
        "endColumn": 56,
        "fix": { "range": [4553, 4580], "text": "#body-cell-created_at" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-notes' instead of 'v-slot:body-cell-notes'.",
        "line": 151,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 151,
        "endColumn": 51,
        "fix": { "range": [4928, 4950], "text": "#body-cell-notes" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 161,
        "column": 21,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 161,
        "endColumn": 53,
        "fix": { "range": [5264, 5288], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":title\" should go before \"@click\".",
        "line": 169,
        "column": 17,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 169,
        "endColumn": 43,
        "fix": {
          "range": [5479, 5562],
          "text": ":title=\"$t('common.view')\"\r\n                @click=\"viewMovementDetails(props.row)\""
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 393,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 393,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12790, 12793], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12790, 12793], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 428,
        "column": 102,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 428,
        "endColumn": 105,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14057, 14060], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14057, 14060], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 442,
        "column": 102,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 442,
        "endColumn": 105,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14618, 14621], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14618, 14621], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 456,
        "column": 104,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 456,
        "endColumn": 107,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15162, 15165], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15162, 15165], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 470,
        "column": 104,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 470,
        "endColumn": 107,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15724, 15727], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15724, 15727], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 23,
    "fixableErrorCount": 0,
    "fixableWarningCount": 18,
    "source": "<template>\r\n  <PageLayout>\r\n    <template #header>\r\n      <PageTitle\r\n        :title=\"$t('inventory.movements.title')\"\r\n        :subtitle=\"$t('inventory.movements.subtitle')\"\r\n        icon=\"timeline\"\r\n      >\r\n        <template #actions>\r\n          <q-btn\r\n            flat\r\n            round\r\n            icon=\"refresh\"\r\n            size=\"md\"\r\n            @click=\"refreshData\"\r\n             :loading=\"inventoryStore.movementsLoading\"\r\n            class=\"app-btn-refresh\"\r\n          >\r\n            <q-tooltip>{{ $t('common.refresh') }}</q-tooltip>\r\n          </q-btn>\r\n\r\n          <q-btn\r\n            icon=\"file_download\"\r\n            :label=\"$t('common.export')\"\r\n            @click=\"exportMovements\"\r\n            unelevated\r\n            no-caps\r\n            class=\"app-btn-secondary\"\r\n          />\r\n        </template>\r\n      </PageTitle>\r\n    </template>\r\n\r\n    <!-- FilterPanel component -->\r\n    <div class=\"filters-section q-mb-lg\">\r\n      <FilterPanel\r\n        :preset=\"movementsFilterPreset\"\r\n        v-model=\"filterValues\"\r\n        @change=\"handleFilterChange\"\r\n        @reset=\"handleFilterReset\"\r\n        @clear=\"handleFilterClear\"\r\n         :loading=\"inventoryStore.movementsLoading\"\r\n        collapsible\r\n        class=\"movements-filter-panel\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Error Banner -->\r\n    <q-banner\r\n      v-if=\"errorState.visible\"\r\n      dense\r\n      class=\"q-mb-md bg-negative text-white\"\r\n      rounded\r\n    >\r\n      <div class=\"row items-center\">\r\n        <q-icon name=\"error_outline\" class=\"q-mr-sm\" />\r\n        <div class=\"col\">{{ errorState.message }}</div>\r\n        <div class=\"col-auto\">\r\n          <q-btn flat dense color=\"white\" :label=\"$t('common.retry')\" @click=\"errorState.retry?.()\" />\r\n        </div>\r\n      </div>\r\n    </q-banner>\r\n\r\n    <!-- Main Content -->\r\n    <div class=\"movements-content\">\r\n      <!-- Loading State -->\r\n      <div v-if=\"inventoryStore.movementsLoading\" class=\"loading-container\">\r\n        <q-spinner-dots size=\"xl\" color=\"primary\" />\r\n        <p class=\"loading-text\">{{ $t('inventory.movements.loading') }}</p>\r\n      </div>\r\n\r\n      <!-- Movements Table -->\r\n      <div v-else class=\"medical-table\">\r\n        <q-table\r\n          :rows=\"filteredMovements\"\r\n          :columns=\"columns\"\r\n          row-key=\"id\"\r\n          v-model:pagination=\"pagination\"\r\n          :rows-number=\"inventoryStore.stockMovementsTotal || 0\"\r\n          :loading=\"inventoryStore.movementsLoading\"\r\n          :no-data-label=\"$t('inventory.movements.noData')\"\r\n          class=\"movements-table\"\r\n          flat\r\n          bordered\r\n          separator=\"cell\"\r\n        >\r\n          <template #loading>\r\n            <q-inner-loading showing color=\"primary\" />\r\n          </template>\r\n          <!-- Movement Type Column -->\r\n          <template v-slot:body-cell-movement_type=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-chip\r\n                :icon=\"movementIcon(props.value)\"\r\n                :color=\"movementColor(props.value)\"\r\n                text-color=\"white\"\r\n                :label=\"formatMovementType(props.value)\"\r\n                size=\"sm\"\r\n              />\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Product Column -->\r\n          <template v-slot:body-cell-product=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"product-info\">\r\n                <div class=\"product-name\">\r\n                  {{ props.row.product?.name || $t('common.unknownProduct') }}\r\n                </div>\r\n                <div class=\"product-sku\">\r\n                  {{ props.row.product?.sku || '-' }}\r\n                </div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Quantity Change Column -->\r\n          <template v-slot:body-cell-quantity_change=\"props\">\r\n            <q-td :props=\"props\">\r\n              <span\r\n                :class=\"{\r\n                  'quantity-positive': props.value > 0,\r\n                  'quantity-negative': props.value < 0,\r\n                  'quantity-neutral': props.value === 0,\r\n                }\"\r\n                class=\"quantity-change\"\r\n              >\r\n                {{ props.value > 0 ? '+' : '' }}{{ props.value }}\r\n              </span>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Location Column -->\r\n          <template v-slot:body-cell-location=\"props\">\r\n            <q-td :props=\"props\">\r\n              {{ props.row.location?.name || $t('common.unknownLocation') }}\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Date Column -->\r\n          <template v-slot:body-cell-created_at=\"props\">\r\n            <q-td :props=\"props\">\r\n              <div class=\"date-info\">\r\n                <div class=\"date\">{{ formatDate(props.value) }}</div>\r\n                <div class=\"time\">{{ formatTime(props.value) }}</div>\r\n              </div>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Notes Column -->\r\n          <template v-slot:body-cell-notes=\"props\">\r\n            <q-td :props=\"props\">\r\n              <span v-if=\"props.value\" class=\"notes\">\r\n                {{ props.value }}\r\n              </span>\r\n              <span v-else class=\"no-notes\">-</span>\r\n            </q-td>\r\n          </template>\r\n\r\n          <!-- Actions Column -->\r\n          <template v-slot:body-cell-actions=\"props\">\r\n            <q-td :props=\"props\">\r\n              <q-btn\r\n                flat\r\n                round\r\n                icon=\"visibility\"\r\n                size=\"sm\"\r\n                @click=\"viewMovementDetails(props.row)\"\r\n                :title=\"$t('common.view')\"\r\n              />\r\n            </q-td>\r\n          </template>\r\n        </q-table>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Movement Details Dialog -->\r\n    <BaseDialog\r\n      v-model=\"showMovementDetails\"\r\n      :title=\"$t('inventory.movementDetails')\"\r\n      icon=\"swap_horiz\"\r\n      size=\"md\"\r\n      @close=\"showMovementDetails = false\"\r\n    >\r\n      <div v-if=\"selectedMovement\" class=\"movement-details\">\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.movementType') }}:</span>\r\n          <q-chip\r\n            :icon=\"movementIcon(selectedMovement.movement_type)\"\r\n            :color=\"movementColor(selectedMovement.movement_type)\"\r\n            text-color=\"white\"\r\n            :label=\"formatMovementType(selectedMovement.movement_type)\"\r\n            size=\"sm\"\r\n          />\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.product') }}:</span>\r\n          <span class=\"value\">\r\n            {{ selectedMovement.product?.name || $t('common.unknownProduct') }}\r\n            <span class=\"sku\"\r\n              >({{ selectedMovement.product?.sku || $t('common.noSku') }})</span\r\n            >\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.location') }}:</span>\r\n          <span class=\"value\">{{\r\n            selectedMovement.location?.name || $t('common.unknownLocation')\r\n          }}</span>\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.quantityChange') }}:</span>\r\n          <span\r\n            :class=\"{\r\n              'quantity-positive': selectedMovement.quantity_change > 0,\r\n              'quantity-negative': selectedMovement.quantity_change < 0,\r\n            }\"\r\n            class=\"quantity-change value\"\r\n          >\r\n            {{ selectedMovement.quantity_change > 0 ? '+' : ''\r\n            }}{{ selectedMovement.quantity_change }}\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.quantityBefore') }}:</span>\r\n          <span class=\"value\">{{ selectedMovement.quantity_before }}</span>\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.quantityAfter') }}:</span>\r\n          <span class=\"value\">{{ selectedMovement.quantity_after }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedMovement.reason_code\" class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('inventory.reasonCode') }}:</span>\r\n          <span class=\"value\">{{\r\n            formatReasonCode(selectedMovement.reason_code)\r\n          }}</span>\r\n        </div>\r\n\r\n        <div v-if=\"selectedMovement.notes\" class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('common.notes') }}:</span>\r\n          <span class=\"value\">{{ selectedMovement.notes }}</span>\r\n        </div>\r\n\r\n        <div class=\"detail-row\">\r\n          <span class=\"label\">{{ $t('common.date') }}:</span>\r\n          <span class=\"value\">{{\r\n            formatDateTime(selectedMovement.created_at)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <template #actions>\r\n        <q-btn\r\n          flat\r\n          :label=\"$t('common.close')\"\r\n          color=\"primary\"\r\n          @click=\"showMovementDetails = false\"\r\n        />\r\n      </template>\r\n    </BaseDialog>\r\n  </PageLayout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\n  import { ref, computed, onMounted, onBeforeUnmount, watch } from 'vue';\r\n  import { useI18n } from 'vue-i18n';\r\n  import { useQuasar } from 'quasar';\r\n  import { useAuthStore } from 'src/stores/auth';\r\n  import { useInventoryStore } from 'src/stores/inventory';\r\n  import { useClinicStore } from 'src/stores/clinic';\r\n  import type {\r\n    MovementWithRelations,\r\n    MovementType,\r\n    ReasonCode,\r\n  } from 'src/types/inventory';\r\n  import type {\r\n    FilterValues,\r\n    FilterChangeEvent,\r\n    FilterResetEvent,\r\n  } from 'src/types/filters';\r\n  import PageLayout from 'src/components/PageLayout.vue';\r\n  import PageTitle from 'src/components/PageTitle.vue';\r\n  import { BaseCard, InteractiveCard, AlertCard } from 'src/components/cards';\r\n  import BaseDialog from 'src/components/base/BaseDialog.vue';\r\n  import FilterPanel from 'src/components/filters/FilterPanel.vue';\r\n  import { movementsFilterPreset } from 'src/presets/filters/movements';\r\n\r\n  // Composables\r\n  const { t } = useI18n();\r\n  const $q = useQuasar();\r\n  const authStore = useAuthStore();\r\n  const inventoryStore = useInventoryStore();\r\n  const clinicStore = useClinicStore();\r\n\r\n  // Reactive state\r\n  const showMovementDetails = ref(false);\r\n  const selectedMovement = ref<MovementWithRelations | null>(null);\r\n  const isUnmounted = ref(false);\r\n  const errorState = ref<{ visible: boolean; message: string; retry?: () => void }>({ visible: false, message: '' });\r\n  const demoMovements = ref<MovementWithRelations[]>([]);\r\n\r\n  // Filter system styles\r\n  const filterValues = ref<FilterValues>({});\r\n\r\n  // Pagination\r\n  const pagination = ref({\r\n    sortBy: 'created_at',\r\n    descending: true,\r\n    page: 1,\r\n    rowsPerPage: 25,\r\n  });\r\n\r\n  // Computed properties\r\n  const practiceId = computed(() => authStore.userProfile?.clinic_id || '');\r\n\r\n  const filteredMovements = computed(() => (practiceId.value ? inventoryStore.stockMovements : demoMovements.value));\r\n\r\n  const columns = computed(() => [\r\n    {\r\n      name: 'movement_type',\r\n      label: t('inventory.movementType'),\r\n      field: 'movement_type',\r\n      align: 'left',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'product',\r\n      label: t('inventory.product'),\r\n      field: 'product',\r\n      align: 'left',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'quantity_change',\r\n      label: t('inventory.quantityChange'),\r\n      field: 'quantity_change',\r\n      align: 'center',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'location',\r\n      label: t('inventory.location'),\r\n      field: 'location',\r\n      align: 'left',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'created_at',\r\n      label: t('common.date'),\r\n      field: 'created_at',\r\n      align: 'left',\r\n      sortable: true,\r\n    },\r\n    {\r\n      name: 'notes',\r\n      label: t('common.notes'),\r\n      field: 'notes',\r\n      align: 'left',\r\n      sortable: false,\r\n    },\r\n    {\r\n      name: 'actions',\r\n      label: t('common.actions'),\r\n      field: 'actions',\r\n      align: 'center',\r\n      sortable: false,\r\n    },\r\n  ]);\r\n\r\n  // Methods\r\n  const refreshData = async () => {\r\n    if (!practiceId.value) {\r\n      // Demo fallback\r\n      demoMovements.value = generateDemoMovements();\r\n      errorState.value = { visible: false, message: '' };\r\n      return;\r\n    }\r\n    try {\r\n      await inventoryStore.fetchStockMovements(practiceId.value, {\r\n        page: pagination.value.page,\r\n        rowsPerPage: pagination.value.rowsPerPage,\r\n        sortBy: pagination.value.sortBy,\r\n        descending: pagination.value.descending,\r\n        filters: {\r\n          dateRange: filterValues.value.date_range as { start?: string; end?: string } | undefined,\r\n          location_id: (filterValues.value.location_id as string) || undefined,\r\n          movement_type: (filterValues.value.movement_type as any) || undefined,\r\n          product_search: (filterValues.value.product_search as string) || undefined,\r\n        },\r\n      });\r\n      errorState.value = { visible: false, message: '' };\r\n      $q.notify({ type: 'positive', message: t('common.dataRefreshed'), position: 'top' });\r\n    } catch (error) {\r\n      console.error('Error refreshing movements:', error);\r\n      errorState.value = {\r\n        visible: true,\r\n        message: t('inventory.movements.loadError'),\r\n        retry: async () => {\r\n          await refreshData();\r\n        },\r\n      };\r\n    }\r\n  };\r\n\r\n  // Demo data\r\n  const generateDemoMovements = (): MovementWithRelations[] => {\r\n    const now = new Date();\r\n    const iso = (d: Date) => d.toISOString();\r\n    return [\r\n      {\r\n        id: 'demo-mv-1',\r\n        practice_id: 'demo',\r\n        location_id: 'loc-1',\r\n        product_id: 'prod-1',\r\n        movement_type: 'receipt',\r\n        quantity_change: 20,\r\n        quantity_before: 10,\r\n        quantity_after: 30,\r\n        created_at: iso(new Date(now.getTime() - 3600 * 1000)),\r\n        notes: 'Demo ontvangst',\r\n        product: { id: 'prod-1', name: 'Handschoenen M', sku: 'GLV-M' },\r\n        location: { id: 'loc-1', name: 'Demo Magazijn', code: 'WH1', location_type: 'warehouse' } as any,\r\n      },\r\n      {\r\n        id: 'demo-mv-2',\r\n        practice_id: 'demo',\r\n        location_id: 'loc-1',\r\n        product_id: 'prod-2',\r\n        movement_type: 'usage',\r\n        quantity_change: -3,\r\n        quantity_before: 12,\r\n        quantity_after: 9,\r\n        created_at: iso(new Date(now.getTime() - 2 * 3600 * 1000)),\r\n        notes: 'Verbruik behandelkamer',\r\n        product: { id: 'prod-2', name: 'Desinfectiemiddel 500ml', sku: 'DSF-500' },\r\n        location: { id: 'loc-1', name: 'Demo Magazijn', code: 'WH1', location_type: 'warehouse' } as any,\r\n      },\r\n      {\r\n        id: 'demo-mv-3',\r\n        practice_id: 'demo',\r\n        location_id: 'loc-2',\r\n        product_id: 'prod-3',\r\n        movement_type: 'adjustment',\r\n        quantity_change: 5,\r\n        quantity_before: 0,\r\n        quantity_after: 5,\r\n        created_at: iso(new Date(now.getTime() - 3 * 3600 * 1000)),\r\n        notes: 'Aanvulling',\r\n        product: { id: 'prod-3', name: 'Pleisters set', sku: 'PLS-SET' },\r\n        location: { id: 'loc-2', name: 'Behandelkamer 1', code: 'TR1', location_type: 'treatment' } as any,\r\n      },\r\n      {\r\n        id: 'demo-mv-4',\r\n        practice_id: 'demo',\r\n        location_id: 'loc-2',\r\n        product_id: 'prod-1',\r\n        movement_type: 'transfer',\r\n        quantity_change: 4,\r\n        quantity_before: 2,\r\n        quantity_after: 6,\r\n        created_at: iso(new Date(now.getTime() - 4 * 3600 * 1000)),\r\n        notes: 'Van magazijn naar behandelkamer',\r\n        product: { id: 'prod-1', name: 'Handschoenen M', sku: 'GLV-M' },\r\n        location: { id: 'loc-2', name: 'Behandelkamer 1', code: 'TR1', location_type: 'treatment' } as any,\r\n      },\r\n    ] as MovementWithRelations[];\r\n  };\r\n\r\n  const exportMovements = () => {\r\n    const rows = inventoryStore.stockMovements as MovementWithRelations[];\r\n    const header = ['type', 'sku', 'product_name', 'delta', 'location', 'created_at', 'note'];\r\n    const csvRows = [header.join(',')];\r\n    for (const r of rows) {\r\n      const type = r.movement_type;\r\n      const sku = r.product?.sku ?? '';\r\n      const name = r.product?.name ?? '';\r\n      const delta = String(r.quantity_change ?? 0);\r\n      const loc = r.location?.name ?? '';\r\n      const created = new Date(r.created_at).toISOString();\r\n      const note = (r.notes ?? '').replace(/\"/g, '\"\"');\r\n      const line = [type, sku, name, delta, loc, created, `\"${note}` + '\"'].join(',');\r\n      csvRows.push(line);\r\n    }\r\n    const blob = new Blob([csvRows.join('\\n')], { type: 'text/csv;charset=utf-8;' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `movements_${new Date().toISOString()}.csv`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const viewMovementDetails = (movement: MovementWithRelations) => {\r\n    selectedMovement.value = movement;\r\n    showMovementDetails.value = true;\r\n  };\r\n\r\n  // Filter event handlers\r\n  const handleFilterChange = (event: FilterChangeEvent) => {\r\n    // Handle individual filter changes if needed\r\n    // Could add specific logic here for real-time filtering\r\n  };\r\n\r\n  const handleFilterReset = (event: FilterResetEvent) => {\r\n    // Handle filter reset - refresh data to show all movements\r\n    refreshData();\r\n  };\r\n\r\n  const handleFilterClear = () => {\r\n    // Handle all filters cleared - refresh data to show all movements\r\n    refreshData();\r\n  };\r\n\r\n  // Formatting helpers\r\n  const formatMovementType = (type: MovementType): string => {\r\n    return t(`inventory.movement.${type}`, type);\r\n  };\r\n\r\n  const formatReasonCode = (code: ReasonCode): string => {\r\n    return t(`inventory.reason.${code}`, code);\r\n  };\r\n\r\n  const movementIcon = (type: MovementType): string => {\r\n    switch (type) {\r\n      case 'receipt':\r\n        return 'add_circle';\r\n      case 'usage':\r\n        return 'remove_circle';\r\n      case 'transfer':\r\n        return 'swap_horiz';\r\n      case 'adjustment':\r\n        return 'edit';\r\n      case 'count':\r\n        return 'checklist';\r\n      case 'waste':\r\n        return 'delete';\r\n      default:\r\n        return 'timeline';\r\n    }\r\n  };\r\n\r\n  const movementColor = (type: MovementType): string => {\r\n    switch (type) {\r\n      case 'receipt':\r\n        return 'positive';\r\n      case 'usage':\r\n        return 'negative';\r\n      case 'transfer':\r\n        return 'info';\r\n      case 'adjustment':\r\n        return 'warning';\r\n      case 'count':\r\n        return 'secondary';\r\n      case 'waste':\r\n        return 'negative';\r\n      default:\r\n        return 'primary';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  const formatTime = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  const formatDateTime = (dateString: string): string => {\r\n    return new Intl.DateTimeFormat('nl-NL', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    }).format(new Date(dateString));\r\n  };\r\n\r\n  // Lifecycle\r\n  onMounted(async () => {\r\n    if (practiceId.value) {\r\n      await clinicStore.fetchLocations(practiceId.value);\r\n      await refreshData();\r\n    }\r\n  });\r\n\r\n  onBeforeUnmount(() => {\r\n    isUnmounted.value = true;\r\n  });\r\n\r\n  // React to filter and pagination changes for server-side fetch\r\n  watch(\r\n    () => ({ ...pagination.value, ...filterValues.value, practice: practiceId.value }),\r\n    async () => {\r\n      if (practiceId.value) {\r\n        await refreshData();\r\n      }\r\n    },\r\n    { deep: true }\r\n  );\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n  .movements-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: var(--space-6);\r\n  }\r\n\r\n  .header-actions {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: var(--space-4);\r\n\r\n    @media (max-width: 768px) {\r\n      flex-direction: column;\r\n      gap: var(--space-3);\r\n    }\r\n  }\r\n\r\n  .loading-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: var(--space-12);\r\n    gap: var(--space-4);\r\n\r\n    .loading-text {\r\n      color: var(--text-muted);\r\n      font-size: var(--text-base);\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  .movements-table-card {\r\n    overflow: visible;\r\n  }\r\n\r\n  .product-info {\r\n    .product-name {\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    .product-sku {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n\r\n  .quantity-change {\r\n    font-weight: var(--font-weight-medium);\r\n\r\n    &.quantity-positive {\r\n      color: var(--positive);\r\n    }\r\n\r\n    &.quantity-negative {\r\n      color: var(--negative);\r\n    }\r\n\r\n    &.quantity-neutral {\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n\r\n  .date-info {\r\n    .date {\r\n      font-weight: var(--font-weight-medium);\r\n      color: var(--text-primary);\r\n    }\r\n\r\n    .time {\r\n      font-size: var(--text-sm);\r\n      color: var(--text-muted);\r\n    }\r\n  }\r\n\r\n  .notes {\r\n    font-style: italic;\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .no-notes {\r\n    color: var(--text-muted);\r\n  }\r\n\r\n  .movement-details {\r\n    .detail-row {\r\n      display: flex;\r\n      align-items: center;\r\n      margin-bottom: var(--space-4);\r\n\r\n      .label {\r\n        font-weight: var(--font-weight-medium);\r\n        color: var(--text-secondary);\r\n        min-width: 140px;\r\n      }\r\n\r\n      .value {\r\n        color: var(--text-primary);\r\n\r\n        .sku {\r\n          color: var(--text-muted);\r\n          font-size: var(--text-sm);\r\n        }\r\n      }\r\n    }\r\n  }\r\n</style>\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\ApiDocsPage.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-method' instead of 'v-slot:body-cell-method'.",
        "line": 75,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 75,
        "endColumn": 50,
        "fix": { "range": [2216, 2239], "text": "#body-cell-method" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 87,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 87,
        "endColumn": 50,
        "fix": { "range": [2534, 2557], "text": "#body-cell-status" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"API Documentation\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'API Documentation', to: '/platform/api-docs' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshApiStats\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- API Statistics -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Endpoints Card -->\n      <div class=\"col-12 col-sm-6 col-lg-4 stats-card-col\">\n        <BaseCard title=\"API endpoints\" icon=\"api\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">\n              {{ apiStats.totalEndpoints }}\n            </div>\n            <div class=\"kpi-subtitle\">Total endpoints</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Requests Today Card -->\n      <div class=\"col-12 col-sm-6 col-lg-4 stats-card-col\">\n        <BaseCard\n          title=\"Daily requests\"\n          icon=\"trending_up\"\n          icon-color=\"positive\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              {{ apiStats.requestsToday }}\n            </div>\n            <div class=\"kpi-subtitle\">Requests today</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Average Response Time Card -->\n      <div class=\"col-12 col-sm-6 col-lg-4 stats-card-col\">\n        <BaseCard title=\"Response time\" icon=\"speed\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">\n              {{ apiStats.avgResponseTime }}ms\n            </div>\n            <div class=\"kpi-subtitle\">Avg response time</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n    <!-- API Endpoints Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"endpoints\"\n        :columns=\"endpointColumns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"api-endpoints-table\"\n        title=\"API endpoints\"\n      >\n        <template v-slot:body-cell-method=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getMethodColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"props.value === 'active' ? 'positive' : 'negative'\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const loading = ref(false);\n  const apiStats = ref({\n    totalEndpoints: 0,\n    requestsToday: 0,\n    avgResponseTime: 0,\n  });\n\n  const endpoints = ref([]);\n\n  const endpointColumns = [\n    { name: 'method', label: 'Method', field: 'method', align: 'center' },\n    { name: 'path', label: 'Endpoint', field: 'path', align: 'left' },\n    {\n      name: 'description',\n      label: 'Description',\n      field: 'description',\n      align: 'left',\n    },\n    {\n      name: 'requests_count',\n      label: 'Requests',\n      field: 'requests_count',\n      align: 'right',\n    },\n    {\n      name: 'avg_response_time',\n      label: 'Avg Time (ms)',\n      field: 'avg_response_time',\n      align: 'right',\n    },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n  ];\n\n  const getMethodColor = (method: string) => {\n    switch (method) {\n      case 'GET':\n        return 'info';\n      case 'POST':\n        return 'positive';\n      case 'PUT':\n        return 'warning';\n      case 'DELETE':\n        return 'negative';\n      default:\n        return 'grey';\n    }\n  };\n\n  const refreshApiStats = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement API statistics fetching\n      console.log('Refreshing API statistics...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  onMounted(() => {\n    refreshApiStats();\n  });\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\BackupPage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \":loading\" should go before \"@click\".",
        "line": 24,
        "column": 11,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 24,
        "endColumn": 30,
        "fix": { "range": [521, 572], "text": ":loading=\"creating\"\n          @click=\"createBackup\"" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 88,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 88,
        "endColumn": 50,
        "fix": { "range": [2707, 2730], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 100,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 100,
        "endColumn": 51,
        "fix": { "range": [3031, 3055], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5705, 5708], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5705, 5708], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5838, 5841], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5838, 5841], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5968, 5971], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5968, 5971], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 3,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Backup & Restore\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Backup', to: '/platform/backup' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshBackups\"\n        />\n        <q-btn\n          class=\"app-btn-primary\"\n          icon=\"backup\"\n          label=\"Create Backup\"\n          @click=\"createBackup\"\n          :loading=\"creating\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Backup Statistics -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Total Backups Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Total backups\" icon=\"backup\" icon-color=\"positive\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">\n              {{ backupStats.totalBackups }}\n            </div>\n            <div class=\"kpi-subtitle\">Total backups</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Last Backup Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Last backup\" icon=\"schedule\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">{{ backupStats.lastBackup }}</div>\n            <div class=\"kpi-subtitle\">Last backup</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Total Size Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Total size\" icon=\"storage\" icon-color=\"warning\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-warning\">\n              {{ backupStats.totalSize }}\n            </div>\n            <div class=\"kpi-subtitle\">Total size</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Retention Days Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Retention policy\" icon=\"timer\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">\n              {{ backupStats.retention }}\n            </div>\n            <div class=\"kpi-subtitle\">Retention days</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n    <!-- Backup History Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"backups\"\n        :columns=\"backupColumns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"backup-history-table\"\n        title=\"Backup history\"\n      >\n        <template v-slot:body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getBackupStatusColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              icon=\"download\"\n              size=\"sm\"\n              class=\"app-btn-info\"\n              @click=\"downloadBackup(props.row)\"\n            >\n              <q-tooltip>Download</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"restore\"\n              size=\"sm\"\n              class=\"app-btn-warning\"\n              @click=\"restoreBackup(props.row)\"\n            >\n              <q-tooltip>Restore</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"delete\"\n              size=\"sm\"\n              class=\"app-btn-danger\"\n              @click=\"deleteBackup(props.row)\"\n            >\n              <q-tooltip>Delete</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const loading = ref(false);\n  const creating = ref(false);\n\n  const backupStats = ref({\n    totalBackups: 0,\n    lastBackup: 'N/A',\n    totalSize: '0 GB',\n    retention: 30,\n  });\n\n  const backups = ref([]);\n\n  const backupColumns = [\n    {\n      name: 'created_at',\n      label: 'Created',\n      field: 'created_at',\n      align: 'left',\n    },\n    { name: 'name', label: 'Name', field: 'name', align: 'left' },\n    { name: 'size', label: 'Size', field: 'size', align: 'right' },\n    { name: 'type', label: 'Type', field: 'type', align: 'center' },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n    { name: 'actions', label: 'Actions', field: 'actions', align: 'center' },\n  ];\n\n  const getBackupStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'positive';\n      case 'failed':\n        return 'negative';\n      case 'in_progress':\n        return 'warning';\n      default:\n        return 'grey';\n    }\n  };\n\n  const refreshBackups = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement backup fetching\n      console.log('Refreshing backups...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createBackup = async () => {\n    creating.value = true;\n    try {\n      // TODO: Implement backup creation\n      console.log('Creating backup...');\n    } finally {\n      creating.value = false;\n    }\n  };\n\n  const downloadBackup = (backup: any) => {\n    console.log('Download backup:', backup);\n    // TODO: Implement backup download\n  };\n\n  const restoreBackup = (backup: any) => {\n    console.log('Restore backup:', backup);\n    // TODO: Implement backup restore\n  };\n\n  const deleteBackup = (backup: any) => {\n    console.log('Delete backup:', backup);\n    // TODO: Implement backup deletion\n  };\n\n  onMounted(() => {\n    refreshBackups();\n  });\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\CreatePracticePage.vue",
    "messages": [
      {
        "ruleId": "vue/attributes-order",
        "severity": 1,
        "message": "Attribute \"class\" should go before \"@submit\".",
        "line": 29,
        "column": 46,
        "nodeType": "VAttribute",
        "messageId": "expectedOrder",
        "endLine": 29,
        "endColumn": 65,
        "fix": { "range": [769, 813], "text": "class=\"q-gutter-md\" @submit=\"createPractice\"" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Create New Practice\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Practices', to: '/platform/practices' },\n        { label: 'Create', to: '/platform/practices/create' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          class=\"app-btn-secondary\"\n          icon=\"arrow_back\"\n          label=\"Back to Practices\"\n          @click=\"$router.push('/platform/practices')\"\n        />\n      </template>\n    </PageTitle>\n\n    <div class=\"row q-gutter-lg\">\n      <div class=\"col-12\">\n        <BaseCard>\n          <template #header>\n            <div class=\"text-h6\">Practice Information</div>\n          </template>\n\n          <div class=\"q-pa-md\">\n            <q-form @submit=\"createPractice\" class=\"q-gutter-md\">\n              <div class=\"row q-gutter-md\">\n                <div class=\"col-md-6 col-12\">\n                  <q-input\n                    v-model=\"form.name\"\n                    label=\"Practice Name\"\n                    required\n                    outlined\n                  />\n                </div>\n                <div class=\"col-md-6 col-12\">\n                  <q-input\n                    v-model=\"form.email\"\n                    label=\"Contact Email\"\n                    type=\"email\"\n                    required\n                    outlined\n                  />\n                </div>\n              </div>\n\n              <div class=\"row q-gutter-md\">\n                <div class=\"col-md-6 col-12\">\n                  <q-input v-model=\"form.phone\" label=\"Phone Number\" outlined />\n                </div>\n                <div class=\"col-md-6 col-12\">\n                  <q-input v-model=\"form.address\" label=\"Address\" outlined />\n                </div>\n              </div>\n\n              <div class=\"row q-pt-md\">\n                <div class=\"col-12\">\n                  <q-btn\n                    type=\"submit\"\n                    class=\"app-btn-primary\"\n                    icon=\"add\"\n                    label=\"Create Practice\"\n                    :loading=\"creating\"\n                  />\n                  <q-btn\n                    class=\"app-btn-secondary q-ml-sm\"\n                    label=\"Cancel\"\n                    @click=\"$router.push('/platform/practices')\"\n                  />\n                </div>\n              </div>\n            </q-form>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref } from 'vue';\n  import { useRouter } from 'vue-router';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const router = useRouter();\n  const creating = ref(false);\n\n  const form = ref({\n    name: '',\n    email: '',\n    phone: '',\n    address: '',\n  });\n\n  const createPractice = async () => {\n    creating.value = true;\n    try {\n      // TODO: Implement practice creation\n      console.log('Creating practice:', form.value);\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      router.push('/platform/practices');\n    } finally {\n      creating.value = false;\n    }\n  };\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\DatabaseAdminPage.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\MonitoringPage.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-severity' instead of 'v-slot:body-cell-severity'.",
        "line": 80,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 80,
        "endColumn": 52,
        "fix": { "range": [2447, 2472], "text": "#body-cell-severity" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 92,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 92,
        "endColumn": 50,
        "fix": { "range": [2769, 2792], "text": "#body-cell-status" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"System Monitoring\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Monitoring', to: '/platform/monitoring' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshMetrics\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- System Health Metrics -->\n    <div class=\"row q-mb-lg stats-cards-container\">\n      <!-- Uptime Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard\n          title=\"System uptime\"\n          icon=\"trending_up\"\n          icon-color=\"positive\"\n        >\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-positive\">{{ metrics.uptime }}</div>\n            <div class=\"kpi-subtitle\">Uptime</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- CPU Usage Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"CPU usage\" icon=\"memory\" icon-color=\"info\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-info\">{{ metrics.cpuUsage }}%</div>\n            <div class=\"kpi-subtitle\">CPU usage</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Memory Usage Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Memory usage\" icon=\"storage\" icon-color=\"warning\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-warning\">{{ metrics.memoryUsage }}%</div>\n            <div class=\"kpi-subtitle\">Memory usage</div>\n          </div>\n        </BaseCard>\n      </div>\n\n      <!-- Disk Usage Card -->\n      <div class=\"col-12 col-sm-6 col-lg-3 stats-card-col\">\n        <BaseCard title=\"Disk usage\" icon=\"hard_drive\" icon-color=\"primary\">\n          <div class=\"kpi-content\">\n            <div class=\"kpi-value text-primary\">{{ metrics.diskUsage }}%</div>\n            <div class=\"kpi-subtitle\">Disk usage</div>\n          </div>\n        </BaseCard>\n      </div>\n    </div>\n\n    <!-- Recent Alerts Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"alerts\"\n        :columns=\"alertColumns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"alerts-table\"\n        title=\"Recent alerts\"\n      >\n        <template v-slot:body-cell-severity=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getSeverityColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"props.value === 'resolved' ? 'positive' : 'negative'\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const loading = ref(false);\n  const metrics = ref({\n    uptime: '99.9%',\n    cpuUsage: 0,\n    memoryUsage: 0,\n    diskUsage: 0,\n  });\n\n  const alerts = ref([]);\n\n  const alertColumns = [\n    { name: 'timestamp', label: 'Time', field: 'timestamp', align: 'left' },\n    { name: 'severity', label: 'Severity', field: 'severity', align: 'center' },\n    { name: 'service', label: 'Service', field: 'service', align: 'left' },\n    { name: 'message', label: 'Alert', field: 'message', align: 'left' },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n  ];\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'negative';\n      case 'warning':\n        return 'warning';\n      case 'info':\n        return 'info';\n      default:\n        return 'grey';\n    }\n  };\n\n  const refreshMetrics = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement metrics fetching\n      console.log('Refreshing monitoring metrics...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  onMounted(() => {\n    refreshMetrics();\n  });\n</script>\n\n<style scoped>\n  /* Dashboard Statistics Cards */\n  .stats-cards-container {\n    .stats-card-col {\n      padding: var(--space-2, 8px);\n\n      .kpi-content {\n        text-align: center;\n        padding: var(--space-4, 16px);\n\n        .kpi-value {\n          font-family: var(--font-family);\n          font-size: var(--text-4xl, 2.25rem);\n          font-weight: var(--font-weight-bold, 700);\n          line-height: var(--leading-tight, 1.25);\n          margin-bottom: var(--space-2, 8px);\n          font-variant-numeric: tabular-nums;\n        }\n\n        .kpi-subtitle {\n          font-family: var(--font-family);\n          font-size: var(--text-xs, 0.75rem);\n          font-weight: var(--font-weight-semibold, 600);\n          color: var(--text-secondary);\n          text-transform: uppercase;\n          letter-spacing: 0.05em;\n          line-height: var(--leading-normal, 1.5);\n        }\n      }\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\PlatformDashboard.vue",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\PracticesPage.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-status' instead of 'v-slot:body-cell-status'.",
        "line": 39,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 39,
        "endColumn": 50,
        "fix": { "range": [945, 968], "text": "#body-cell-status" }
      },
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-actions' instead of 'v-slot:body-cell-actions'.",
        "line": 51,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 51,
        "endColumn": 51,
        "fix": { "range": [1263, 1287], "text": "#body-cell-actions" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3349, 3352], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3349, 3352], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3486, 3489], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3486, 3489], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 2,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"Practice Management\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'Practices', to: '/platform/practices' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshData\"\n        />\n        <q-btn\n          class=\"app-btn-primary\"\n          icon=\"add\"\n          label=\"Create Practice\"\n          @click=\"$router.push('/platform/practices/create')\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Practices Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"practices\"\n        :columns=\"columns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        :pagination=\"{ rowsPerPage: 10 }\"\n        class=\"practices-table\"\n        title=\"Practices overview\"\n      >\n        <template v-slot:body-cell-status=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getStatusColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n\n        <template v-slot:body-cell-actions=\"props\">\n          <q-td :props=\"props\">\n            <q-btn\n              flat\n              round\n              icon=\"edit\"\n              size=\"sm\"\n              class=\"app-btn-secondary\"\n              @click=\"editPractice(props.row)\"\n            >\n              <q-tooltip>Edit</q-tooltip>\n            </q-btn>\n            <q-btn\n              flat\n              round\n              icon=\"visibility\"\n              size=\"sm\"\n              class=\"app-btn-info\"\n              @click=\"viewPractice(props.row)\"\n            >\n              <q-tooltip>View</q-tooltip>\n            </q-btn>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const practices = ref([]);\n  const loading = ref(false);\n\n  const columns = [\n    { name: 'name', label: 'Practice Name', field: 'name', align: 'left' },\n    { name: 'email', label: 'Contact Email', field: 'email', align: 'left' },\n    {\n      name: 'users_count',\n      label: 'Users',\n      field: 'users_count',\n      align: 'center',\n    },\n    {\n      name: 'created_at',\n      label: 'Created',\n      field: 'created_at',\n      align: 'left',\n    },\n    { name: 'status', label: 'Status', field: 'status', align: 'center' },\n    { name: 'actions', label: 'Actions', field: 'actions', align: 'center' },\n  ];\n\n  const refreshData = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement practice data fetching\n      console.log('Refreshing practices data...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'positive';\n      case 'inactive':\n        return 'negative';\n      case 'suspended':\n        return 'warning';\n      default:\n        return 'grey';\n    }\n  };\n\n  const editPractice = (practice: any) => {\n    console.log('Edit practice:', practice);\n    // TODO: Implement edit functionality\n  };\n\n  const viewPractice = (practice: any) => {\n    console.log('View practice:', practice);\n    // TODO: Implement view functionality\n  };\n\n  onMounted(() => {\n    refreshData();\n  });\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\pages\\platform\\SystemLogsPage.vue",
    "messages": [
      {
        "ruleId": "vue/v-slot-style",
        "severity": 1,
        "message": "Expected '#body-cell-level' instead of 'v-slot:body-cell-level'.",
        "line": 41,
        "column": 19,
        "nodeType": "VAttribute",
        "messageId": "expectedShorthand",
        "endLine": 41,
        "endColumn": 49,
        "fix": { "range": [955, 977], "text": "#body-cell-level" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "<template>\n  <PageLayout>\n    <PageTitle\n      title=\"System Logs\"\n      :breadcrumbs=\"[\n        { label: 'Platform', to: '/platform' },\n        { label: 'System Logs', to: '/platform/logs' },\n      ]\"\n    >\n      <template #actions>\n        <q-btn\n          flat\n          round\n          icon=\"refresh\"\n          size=\"md\"\n          class=\"app-btn-refresh\"\n          @click=\"refreshLogs\"\n        />\n        <q-btn\n          class=\"app-btn-secondary\"\n          icon=\"download\"\n          label=\"Export Logs\"\n          @click=\"exportLogs\"\n        />\n      </template>\n    </PageTitle>\n\n    <!-- Application Logs Table -->\n    <div class=\"q-mb-lg medical-table\">\n      <q-table\n        :rows=\"logs\"\n        :columns=\"columns\"\n        row-key=\"id\"\n        :loading=\"loading\"\n        virtual-scroll\n        :rows-per-page-options=\"[0]\"\n        style=\"height: 400px\"\n        class=\"system-logs-table\"\n        title=\"Application logs\"\n      >\n        <template v-slot:body-cell-level=\"props\">\n          <q-td :props=\"props\">\n            <q-chip\n              :color=\"getLogLevelColor(props.value)\"\n              text-color=\"white\"\n              size=\"sm\"\n            >\n              {{ props.value }}\n            </q-chip>\n          </q-td>\n        </template>\n      </q-table>\n    </div>\n  </PageLayout>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, onMounted } from 'vue';\n  import PageLayout from '@/components/PageLayout.vue';\n  import PageTitle from '@/components/PageTitle.vue';\n  import BaseCard from '@/components/cards/BaseCard.vue';\n\n  const logs = ref([]);\n  const loading = ref(false);\n\n  const columns = [\n    {\n      name: 'timestamp',\n      label: 'Timestamp',\n      field: 'timestamp',\n      align: 'left',\n    },\n    { name: 'level', label: 'Level', field: 'level', align: 'center' },\n    { name: 'service', label: 'Service', field: 'service', align: 'left' },\n    { name: 'message', label: 'Message', field: 'message', align: 'left' },\n    { name: 'user_id', label: 'User ID', field: 'user_id', align: 'left' },\n  ];\n\n  const refreshLogs = async () => {\n    loading.value = true;\n    try {\n      // TODO: Implement log fetching\n      console.log('Refreshing system logs...');\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const exportLogs = () => {\n    console.log('Exporting logs...');\n    // TODO: Implement log export\n  };\n\n  const getLogLevelColor = (level: string) => {\n    switch (level) {\n      case 'error':\n        return 'negative';\n      case 'warn':\n        return 'warning';\n      case 'info':\n        return 'info';\n      case 'debug':\n        return 'grey';\n      default:\n        return 'grey';\n    }\n  };\n\n  onMounted(() => {\n    refreshLogs();\n  });\n</script>\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\advancedOrderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\locations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\movements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\orderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\orders.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\products.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\presets\\filters\\suppliers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\router\\index.ts",
    "messages": [
      {
        "ruleId": "prefer-arrow-callback",
        "severity": 1,
        "message": "Unexpected function expression.",
        "line": 22,
        "column": 22,
        "nodeType": "FunctionExpression",
        "messageId": "preferArrowCallback",
        "endLine": 143,
        "endColumn": 2,
        "fix": { "range": [563, 601], "text": "(/* { store, ssrContext } */) =>" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'to' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 127,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'from' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 127,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 127,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import { route } from 'quasar/wrappers';\r\nimport {\r\n  createMemoryHistory,\r\n  createRouter,\r\n  createWebHashHistory,\r\n  createWebHistory,\r\n} from 'vue-router';\r\n\r\nimport routes from './routes';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { PermissionService } from '@/services/permissions';\r\n\r\n/*\r\n * If not building with SSR mode, you can\r\n * directly export the Router instantiation;\r\n *\r\n * The function below can be async too; either use\r\n * async/await or return a Promise which resolves\r\n * with the Router instance.\r\n */\r\n\r\nexport default route(function (/* { store, ssrContext } */) {\r\n  const createHistory = process.env.SERVER\r\n    ? createMemoryHistory\r\n    : process.env.VUE_ROUTER_MODE === 'history'\r\n    ? createWebHistory\r\n    : createWebHashHistory;\r\n\r\n  const Router = createRouter({\r\n    scrollBehavior: () => ({ left: 0, top: 0 }),\r\n    routes,\r\n\r\n    // Leave this as is and make changes in quasar.conf.js instead!\r\n    // quasar.conf.js -> build -> vueRouterMode\r\n    // quasar.conf.js -> build -> publicPath\r\n    history: createHistory(process.env.VUE_ROUTER_BASE),\r\n  });\r\n\r\n  // Global navigation guard for authentication and permissions\r\n  Router.beforeEach(async (to, from, next) => {\r\n    const authStore = useAuthStore();\r\n\r\n    // Initialize auth store if not already done\r\n    if (!authStore.initialized) {\r\n      await authStore.initialize();\r\n    }\r\n\r\n    // Check if route requires authentication\r\n    if (to.meta.requiresAuth && !authStore.isAuthenticated) {\r\n      next({ name: 'login' });\r\n      return;\r\n    }\r\n\r\n    // Check role-based permissions\r\n    if (to.meta.requiresRole && authStore.isAuthenticated) {\r\n      try {\r\n        const userRole = await PermissionService.getUserRole();\r\n        const requiredRoles = Array.isArray(to.meta.requiresRole)\r\n          ? to.meta.requiresRole\r\n          : [to.meta.requiresRole];\r\n\r\n        // If no role found but user is authenticated, default to 'guest' for demo purposes\r\n        const effectiveRole = userRole || 'guest';\r\n\r\n        if (!requiredRoles.includes(effectiveRole)) {\r\n          console.warn(\r\n            `Access denied. User role: ${effectiveRole}, Required: ${requiredRoles.join(\r\n              ', '\r\n            )}`\r\n          );\r\n\r\n          // Only redirect if not dashboard - avoid infinite loops\r\n          if (to.name !== 'dashboard') {\r\n            next({ name: 'dashboard' });\r\n            return;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking user role:', error);\r\n        // On error, allow access but log the issue for debugging\r\n        console.warn(\r\n          'Allowing access due to role check error - this should be fixed in production'\r\n        );\r\n      }\r\n    }\r\n\r\n    // Check specific permissions\r\n    if (to.meta.requiresPermission && authStore.isAuthenticated) {\r\n      try {\r\n        const { permission, resource, resourceId } = to.meta.requiresPermission;\r\n        const hasPermission = await PermissionService.hasPermission(\r\n          permission,\r\n          resource,\r\n          resourceId\r\n        );\r\n\r\n        if (!hasPermission) {\r\n          console.warn(\r\n            `Access denied. Missing permission: ${permission} on ${resource}`\r\n          );\r\n\r\n          // Only redirect if not dashboard - avoid infinite loops\r\n          if (to.name !== 'dashboard') {\r\n            next({ name: 'dashboard' });\r\n            return;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking permission:', error);\r\n        // On error, allow access but log the issue for debugging\r\n        console.warn(\r\n          'Allowing access due to permission check error - this should be fixed in production'\r\n        );\r\n      }\r\n    }\r\n\r\n    // If authenticated user tries to access login page, redirect to dashboard\r\n    if (authStore.isAuthenticated && to.name === 'login') {\r\n      next({ name: 'dashboard' });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  });\r\n\r\n  // Global after navigation hook for tracking\r\n  Router.afterEach((to, from) => {\r\n    // Track page views\r\n    // monitoringService.trackEvent('page_view', {\r\n    //   route: to.path,\r\n    //   routeName: (to.name as string) || 'unknown',\r\n    //   fromRoute: from.path,\r\n    // });\r\n    // Add breadcrumb for debugging\r\n    // monitoringService.addBreadcrumb(\r\n    //   `Navigated to ${to.path}`,\r\n    //   'navigation',\r\n    //   'info'\r\n    // );\r\n  });\r\n\r\n  return Router;\r\n});\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\router\\routes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\admin.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\analytics.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Do not use \"@ts-nocheck\" because it alters compilation errors.",
        "line": 1,
        "column": 1,
        "nodeType": "Line",
        "messageId": "tsDirectiveComment",
        "endLine": 1,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapProductRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProductDTO' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'toLegacyLowStockProduct' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 75,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'toLegacyStockLevelWithMovements' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 86,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'toLegacyUsageAnalytics' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 102,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'toLegacyStockEntry' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 108,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'InventoryProductRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 171,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 171,
        "endColumn": 30
      },
      {
        "ruleId": "prefer-const",
        "severity": 1,
        "message": "'lowStockAlerts' is never reassigned. Use 'const' instead.",
        "line": 520,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 520,
        "endColumn": 25,
        "fix": { "range": [14899, 14947], "text": "const lowStockAlerts = lowStockItems?.length || 0;" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "// @ts-nocheck\r\n/** @deprecated Use analytics-vm.ts */\r\nimport { supabase } from '@/boot/supabase';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { analyticsLogger } from '@/utils/logger';\r\nimport { handleSupabaseError } from '@/utils/service-error-handler';\r\nimport { t } from '@/utils/i18n-service';\r\nimport type {\r\n  AnalyticsDateRange,\r\n  AnalyticsSummary,\r\n  OrderMetrics,\r\n  ProductMetrics,\r\n  UserActivityMetrics,\r\n  AnalyticsStockLevelDTO,\r\n  LowStockItemDTO,\r\n  StockTurnoverRateDTO,\r\n  TopUsedProductDTO,\r\n} from '@/types/analytics';\r\nimport type { UsageAnalytics } from '@/types/analytics';\r\nimport {\r\n  mapProductRow,\r\n  mapStockLevelRow,\r\n} from '@/domain/inventory/bridge';\r\nimport type {\r\n  ProductDTO,\r\n  StockLevelDTO,\r\n} from '@/domain/inventory/dto';\r\nimport type { Tables } from '@/types/supabase.generated';\r\n\r\n// Legacy compatibility types\r\ninterface LegacyStockLevel {\r\n  product_id: string;\r\n  location_id: string;\r\n  current_quantity: number;\r\n  minimum_quantity: number;\r\n  reserved_quantity: number;\r\n  available_quantity: number;\r\n  product_name?: string;\r\n  location_name?: string;\r\n  preferred_supplier_id?: string | null;\r\n  updated_at?: string | null;\r\n}\r\n\r\ninterface LegacyLowStockProduct {\r\n  id: string;\r\n  name: string;\r\n  stock_levels: LegacyStockLevel[];\r\n  sku?: string | null;\r\n  unit_price?: number | null;\r\n}\r\n\r\ninterface LegacyStockLevelWithMovements extends LegacyStockLevel {\r\n  stock_movements: StockMovementRow[] | StockMovementRow | null;\r\n}\r\n\r\ninterface LegacyUsageAnalytics {\r\n  user_id: string | null;\r\n  session_id: string | null;\r\n  created_at: string;\r\n}\r\n\r\nconst toLegacyStockLevel = (dto: StockLevelDTO): LegacyStockLevel => ({\r\n  product_id: dto.productId,\r\n  location_id: dto.locationId,\r\n  current_quantity: dto.currentQuantity ?? 0,\r\n  minimum_quantity: dto.minimumQuantity ?? 0,\r\n  reserved_quantity: dto.reservedQuantity ?? 0,\r\n  available_quantity: dto.availableQuantity ?? 0,\r\n  product_name: dto.productName ?? undefined,\r\n  location_name: dto.locationName ?? undefined,\r\n  preferred_supplier_id: dto.preferredSupplierId ?? null,\r\n  updated_at: dto.updatedAt ?? null,\r\n});\r\n\r\nconst toLegacyLowStockProduct = (\r\n  productRow: Tables<'products'>,\r\n  stockLevels: StockLevelDTO[]\r\n): LegacyLowStockProduct => ({\r\n  id: productRow.id,\r\n  name: productRow.name ?? 'Unknown product',\r\n  stock_levels: stockLevels.map(toLegacyStockLevel),\r\n  sku: productRow.sku ?? null,\r\n  unit_price: productRow.price ?? null,\r\n});\r\n\r\nconst toLegacyStockLevelWithMovements = (\r\n  row: Tables<'stock_levels'> & {\r\n    stock_movements: StockMovementRow[] | StockMovementRow | null;\r\n    products?: Tables<'products'> | null;\r\n  }\r\n): LegacyStockLevelWithMovements => {\r\n  const dto = mapStockLevelRow(row);\r\n  const base = toLegacyStockLevel(dto);\r\n  const product = row.products ?? null;\r\n  return {\r\n    ...base,\r\n    product_name: base.product_name ?? product?.name ?? undefined,\r\n    stock_movements: row.stock_movements ?? null,\r\n  };\r\n};\r\n\r\nconst toLegacyUsageAnalytics = (event: UsageAnalytics): LegacyUsageAnalytics => ({\r\n  user_id: event.userId,\r\n  session_id: event.sessionId,\r\n  created_at: event.createdAt,\r\n});\r\n\r\nconst toLegacyStockEntry = (\r\n  entry: Tables<'stock_entries'> & { products?: Tables<'products'> | null }\r\n) => ({\r\n  ...entry,\r\n  counted_quantity: entry.counted_quantity,\r\n  counted_at: entry.counted_at,\r\n  created_at: entry.created_at,\r\n  products: entry.products ?? null,\r\n});\r\n\r\ninterface LowStockItem extends LowStockItemDTO {}\r\n\r\ninterface StockTurnoverRate extends StockTurnoverRateDTO {}\r\n\r\ntype MonthlyUsageTrends = Record<string, number>;\r\n\r\ninterface TopUsedProduct extends TopUsedProductDTO {}\r\n\r\ninterface CostSavingsAnalytics {\r\n  total_savings: number;\r\n  waste_reduction: number;\r\n  efficiency_improvement: number;\r\n  cost_per_unit_improvement: number;\r\n}\r\n\r\ninterface InventoryValueTrends {\r\n  current_value: number;\r\n  trend_data: Array<{ date: string; value: number }>;\r\n}\r\n\r\ninterface PredictedStockNeed {\r\n  productId: string;\r\n  productName: string;\r\n  currentStock: number;\r\n  predictedUsage: number;\r\n  suggestedOrder: number;\r\n}\r\n\r\ninterface ForecastAccuracy {\r\n  overall_accuracy: number;\r\n  category_accuracy: Record<string, number>;\r\n  trend: 'improving' | 'stable' | 'needs_attention' | 'insufficient_data';\r\n}\r\n\r\ninterface StockMovementRow {\r\n  movement_type: string;\r\n  quantity: number | null;\r\n  products?: {\r\n    price?: number | null;\r\n    category?: string | null;\r\n  } | null;\r\n}\r\n\r\ntype StockLevelWithMovementsRow = StockLevelView & {\r\n  stock_movements: StockMovementRow[] | StockMovementRow | null;\r\n};\r\n\r\ninterface StockEntryRow {\r\n  stockLevel: StockLevelView;\r\n  countedQuantity: number;\r\n  recordedAt: string;\r\n}\r\n\r\ninterface InventoryProductRow {\r\n  id: string;\r\n  name: string;\r\n  stock_levels: StockLevelView[] | null;\r\n}\r\n\r\ntype JsonRecord = Record<string, unknown>;\r\n\r\nconst toArray = <T>(value: T | T[] | null | undefined): T[] =>\r\n  Array.isArray(value) ? value : value ? [value] : [];\r\n\r\nconst mapStockLevelToAnalyticsDTO = (\r\n  entry: StockLevelView\r\n): AnalyticsStockLevelDTO => ({\r\n  productId: entry.productId,\r\n  locationId: entry.locationId,\r\n  currentQuantity: entry.currentQuantity ?? 0,\r\n  minimumQuantity: entry.minimumQuantity ?? 0,\r\n  reservedQuantity: entry.reservedQuantity ?? 0,\r\n  availableQuantity: entry.availableQuantity ?? 0,\r\n  productName: entry.productName ?? undefined,\r\n  locationName: entry.locationName ?? undefined,\r\n  preferredSupplierId: entry.preferredSupplierId ?? undefined,\r\n  updatedAt: entry.updatedAt ?? undefined,\r\n});\r\n\r\nexport class AnalyticsService {\r\n  private sessionId: string = crypto.randomUUID();\r\n  private eventQueue: JsonRecord[] = [];\r\n  private flushTimer: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    // Auto-flush events every 30 seconds\r\n    this.startAutoFlush();\r\n  }\r\n\r\n  /**\r\n   * Track user event\r\n   */\r\n  async trackEvent(\r\n    eventType: string,\r\n    eventData?: JsonRecord,\r\n    location_id?: string\r\n  ): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      analyticsLogger.warn('No practice selected, skipping analytics event', {\r\n        eventType,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase.from('usage_analytics').insert([\r\n        {\r\n          practice_id: practiceId,\r\n          user_id: authStore.user?.id || null,\r\n          location_id: location_id || null,\r\n          event_type: eventType,\r\n          event_data: eventData || {},\r\n          session_id: this.sessionId,\r\n          user_agent: navigator.userAgent,\r\n        },\r\n      ]);\r\n\r\n      if (error) {\r\n        handleSupabaseError(error, {\r\n          service: 'AnalyticsService',\r\n          operation: 'trackEvent',\r\n          practiceId,\r\n          userId: authStore.user?.id ?? null,\r\n          metadata: { eventType, eventData },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      analyticsLogger.error('Failed to track analytics event', {\r\n        eventType,\r\n        error,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get comprehensive analytics summary\r\n   */\r\n  static async getSummary(\r\n    dateRange: AnalyticsDateRange\r\n  ): Promise<AnalyticsSummary> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      return {\r\n        totalEvents: 0,\r\n        activeUsers: 0,\r\n        totalOrders: 0,\r\n        productUpdates: 0,\r\n        topEvents: [],\r\n        userActivity: {},\r\n        dailyActivity: {},\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Get usage analytics events\r\n      const { data: events = [] } = await supabase\r\n        .from('usage_analytics')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate)\r\n        .order('created_at', { ascending: false });\r\n\r\n      // Get orders count\r\n      const { count: ordersCount = 0 } = await supabase\r\n        .from('orders')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate);\r\n\r\n      // Get stock entries count\r\n      const { count: stockEntriesCount = 0 } = await supabase\r\n        .from('stock_entries')\r\n        .select('*', { count: 'exact', head: true })\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate);\r\n\r\n      // Process events\r\n      const eventCounts: Record<string, number> = {};\r\n      const userActivity: Record<\r\n        string,\r\n        { count: number; lastActivity: string }\r\n      > = {};\r\n      const dailyActivity: Record<string, number> = {};\r\n\r\n      events?.forEach(event => {\r\n        if (!event || !event.event_type || !event.created_at) {\r\n          return;\r\n        }\r\n\r\n        // Count event types\r\n        eventCounts[event.event_type] =\r\n          (eventCounts[event.event_type] || 0) + 1;\r\n\r\n        // Track user activity\r\n        if (event.user_id) {\r\n          if (!userActivity[event.user_id]) {\r\n            userActivity[event.user_id] = {\r\n              count: 0,\r\n              lastActivity: event.created_at,\r\n            };\r\n          }\r\n          userActivity[event.user_id].count += 1;\r\n          if (\r\n            new Date(event.created_at) >\r\n            new Date(userActivity[event.user_id].lastActivity)\r\n          ) {\r\n            userActivity[event.user_id].lastActivity = event.created_at;\r\n          }\r\n        }\r\n\r\n        // Track daily activity\r\n        const date = new Date(event.created_at).toDateString();\r\n        dailyActivity[date] = (dailyActivity[date] || 0) + 1;\r\n      });\r\n\r\n      const topEvents = Object.entries(eventCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, 10) as [string, number][];\r\n\r\n      return {\r\n        totalEvents: events?.length || 0,\r\n        activeUsers: Object.keys(userActivity).length,\r\n        totalOrders: ordersCount || 0,\r\n        productUpdates: stockEntriesCount || 0,\r\n        topEvents,\r\n        userActivity,\r\n        dailyActivity,\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting analytics summary:', error);\r\n      return {\r\n        totalEvents: 0,\r\n        activeUsers: 0,\r\n        totalOrders: 0,\r\n        productUpdates: 0,\r\n        topEvents: [],\r\n        userActivity: {},\r\n        dailyActivity: {},\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get order analytics\r\n   */\r\n  static async getOrderMetrics(\r\n    dateRange: AnalyticsDateRange\r\n  ): Promise<OrderMetrics> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      return {\r\n        totalOrders: 0,\r\n        totalOrderValue: 0,\r\n        averageOrderSize: 0,\r\n        ordersByStatus: {},\r\n        frequentlyOrderedItems: [],\r\n        orderTrends: {},\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Get orders with items\r\n      const { data: orders } = await supabase\r\n        .from('orders')\r\n        .select(\r\n          `\r\n          *,\r\n          order_items(\r\n            *,\r\n            products(name)\r\n          )\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate);\r\n\r\n      const totalOrders = orders?.length || 0;\r\n      const totalOrderValue =\r\n        orders?.reduce((sum, order) => sum + (order.total_amount || 0), 0) || 0;\r\n      const averageOrderSize =\r\n        totalOrders > 0 ? totalOrderValue / totalOrders : 0;\r\n\r\n      const ordersByStatus: Record<string, number> = {};\r\n      const itemCounts = new Map<\r\n        string,\r\n        {\r\n          productName: string;\r\n          totalQuantity: number;\r\n          orderCount: number;\r\n          productId: string;\r\n        }\r\n      >();\r\n      const orderTrends: Record<string, number> = {};\r\n\r\n      orders?.forEach(order => {\r\n        // Count by status\r\n        ordersByStatus[order.status] = (ordersByStatus[order.status] || 0) + 1;\r\n\r\n        // Count order trends by day\r\n        const date = new Date(order.created_at).toDateString();\r\n        orderTrends[date] = (orderTrends[date] || 0) + 1;\r\n\r\n        // Count item frequencies\r\n        order.order_items?.forEach((item: OrderItem) => {\r\n          const key = item.product_id;\r\n          const existing = itemCounts.get(key);\r\n          if (existing) {\r\n            existing.totalQuantity += item.quantity;\r\n            existing.orderCount += 1;\r\n          } else {\r\n            itemCounts.set(key, {\r\n              productName: item.products?.name || 'Unknown Product',\r\n              totalQuantity: item.quantity,\r\n              orderCount: 1,\r\n              productId: item.product_id,\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      const frequentlyOrderedItems = Array.from(itemCounts.values())\r\n        .sort((a, b) => b.totalQuantity - a.totalQuantity)\r\n        .slice(0, 10);\r\n\r\n      return {\r\n        totalOrders,\r\n        totalOrderValue,\r\n        averageOrderSize,\r\n        ordersByStatus,\r\n        frequentlyOrderedItems,\r\n        orderTrends,\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting order metrics:', error);\r\n      return {\r\n        totalOrders: 0,\r\n        totalOrderValue: 0,\r\n        averageOrderSize: 0,\r\n        ordersByStatus: {},\r\n        frequentlyOrderedItems: [],\r\n        orderTrends: {},\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get product analytics\r\n   */\r\n  static async getProductMetrics(\r\n    dateRange: AnalyticsDateRange\r\n  ): Promise<ProductMetrics> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      return {\r\n        totalUpdates: 0,\r\n        productsScanned: 0,\r\n        lowStockAlerts: 0,\r\n        stockEntryTrends: {},\r\n        mostUpdatedProducts: [],\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Get stock entries\r\n      const { data: stockEntries } = await supabase\r\n        .from('stock_entries')\r\n        .select(\r\n          `\r\n          *,\r\n          products(name)\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate);\r\n\r\n      // Get low stock alerts\r\n      const { data: lowStockItems } = await supabase\r\n        .from('order_suggestions')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .in('urgency_level', ['high', 'critical'])\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate);\r\n\r\n      const stockLevelDTOs = stockEntries\r\n        .map(entry => mapStockLevelToAnalyticsDTO(entry));\r\n      const totalUpdates = stockLevelDTOs.length;\r\n      const productsScanned = new Set(stockLevelDTOs.map(entry => entry.productId)).size;\r\n      let lowStockAlerts = lowStockItems?.length || 0;\r\n\r\n      const productUpdateCounts = new Map<\r\n        string,\r\n        { productName: string; updateCount: number; productId: string }\r\n      >();\r\n      const stockEntryTrends: Record<string, number> = {};\r\n\r\n      stockLevelDTOs.forEach(entry => {\r\n        const key = entry.productId;\r\n        const existing = productUpdateCounts.get(key);\r\n        if (existing) {\r\n          existing.updateCount += 1;\r\n        } else {\r\n          productUpdateCounts.set(key, {\r\n            productName: entry.productName ?? 'Unknown Product',\r\n            updateCount: 1,\r\n            productId: entry.productId,\r\n          });\r\n        }\r\n\r\n        const date = entry.updatedAt\r\n          ? new Date(entry.updatedAt).toDateString()\r\n          : 'Unknown';\r\n        stockEntryTrends[date] = (stockEntryTrends[date] || 0) + 1;\r\n      });\r\n\r\n      const mostUpdatedProducts = Array.from(productUpdateCounts.values())\r\n        .sort((a, b) => b.updateCount - a.updateCount)\r\n        .slice(0, 10);\r\n\r\n      return {\r\n        totalUpdates,\r\n        productsScanned,\r\n        lowStockAlerts,\r\n        stockEntryTrends,\r\n        mostUpdatedProducts,\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting product metrics:', error);\r\n      return {\r\n        totalUpdates: 0,\r\n        productsScanned: 0,\r\n        lowStockAlerts: 0,\r\n        stockEntryTrends: {},\r\n        mostUpdatedProducts: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user activity metrics\r\n   */\r\n  static async getUserActivityMetrics(\r\n    dateRange: AnalyticsDateRange\r\n  ): Promise<UserActivityMetrics> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      return {\r\n        activeUsers: 0,\r\n        totalSessions: 0,\r\n        averageSessionDuration: 0,\r\n        usersByRole: {},\r\n        mostActiveUsers: [],\r\n        userList: [],\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Get usage analytics\r\n      const { data: analytics } = await supabase\r\n        .from('usage_analytics')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .gte('created_at', dateRange.startDate)\r\n        .lte('created_at', dateRange.endDate)\r\n        .order('created_at', { ascending: false });\r\n\r\n      const events = analytics as UsageAnalytics[] | null;\r\n\r\n      const userMap = new Map<\r\n        string,\r\n        {\r\n          activity_count: number;\r\n          last_activity: string;\r\n          total_events: number;\r\n          sessions: Set<string>;\r\n        }\r\n      >();\r\n\r\n      events?.forEach(event => {\r\n        if (!event || !event.user_id) {\r\n          return;\r\n        }\r\n\r\n        const existing = userMap.get(event.user_id);\r\n        if (existing) {\r\n          existing.activity_count += 1;\r\n          existing.total_events += 1;\r\n          if (event.session_id) {\r\n            existing.sessions.add(event.session_id);\r\n          }\r\n          if (new Date(event.created_at) > new Date(existing.last_activity)) {\r\n            existing.last_activity = event.created_at;\r\n          }\r\n        } else {\r\n          userMap.set(event.user_id, {\r\n            activity_count: 1,\r\n            last_activity: event.created_at,\r\n            total_events: 1,\r\n            sessions: new Set(event.session_id ? [event.session_id] : []),\r\n          });\r\n        }\r\n      });\r\n\r\n      const userList = Array.from(userMap.entries()).map(([user_id, data]) => ({\r\n        user_id,\r\n        activity_count: data.activity_count,\r\n        last_activity: data.last_activity,\r\n        total_events: data.total_events,\r\n      }));\r\n\r\n      const totalSessions = Array.from(userMap.values()).reduce(\r\n        (sum, user) => sum + user.sessions.size,\r\n        0\r\n      );\r\n      const averageSessionDuration =\r\n        analytics?.length && totalSessions > 0\r\n          ? analytics.length / totalSessions\r\n          : 0;\r\n\r\n      return {\r\n        activeUsers: userMap.size,\r\n        totalSessions,\r\n        averageSessionDuration,\r\n        userList,\r\n        usersByRole: {},\r\n        mostActiveUsers: [],\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting user activity metrics:', error);\r\n      return {\r\n        activeUsers: 0,\r\n        totalSessions: 0,\r\n        averageSessionDuration: 0,\r\n        usersByRole: {},\r\n        mostActiveUsers: [],\r\n        userList: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get low stock items\r\n   */\r\n  static async getLowStockItems(clinicId: string): Promise<LowStockItem[]> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: productsData } = await supabase\r\n        .from('products')\r\n        .select(\r\n          `\r\n          id,\r\n          name,\r\n          stock_levels:stock_levels(\r\n            id,\r\n            practice_id,\r\n            location_id,\r\n            current_quantity,\r\n            available_quantity,\r\n            reserved_quantity,\r\n            minimum_quantity,\r\n            practice_locations(name)\r\n          )\r\n        `\r\n        )\r\n        .eq('stock_levels.practice_id', clinicId)\r\n        .order('stock_levels.current_quantity', { ascending: true });\r\n\r\n      if (!productsData) {\r\n        return [];\r\n      }\r\n\r\n      const products = productsData\r\n        .map(product => {\r\n          const stockLevels = toArray(product.stock_levels).map(level =>\r\n            mapStockLevelRowToView(level)\r\n          );\r\n          const primaryStock = stockLevels[0];\r\n\r\n          if (!primaryStock) {\r\n            return null;\r\n          }\r\n\r\n          const currentQuantity = primaryStock.currentQuantity ?? 0;\r\n          const minimumQuantity = primaryStock.minimumQuantity ?? 0;\r\n\r\n          if (currentQuantity > minimumQuantity) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            productId: product.id,\r\n            productName: product.name ?? 'Unknown product',\r\n            currentQuantity,\r\n            minimumQuantity,\r\n            locationId: primaryStock.locationId,\r\n            locationName: primaryStock.locationName ?? 'Unknown location',\r\n            availableQuantity: primaryStock.availableQuantity ?? 0,\r\n            reservedQuantity: primaryStock.reservedQuantity ?? 0,\r\n            preferredSupplierId: primaryStock.preferredSupplierId ?? null,\r\n            productSku: product.sku ?? null,\r\n            unitPrice: product.unit_price ?? null,\r\n          } satisfies LowStockItemDTO;\r\n        })\r\n        .filter((item): item is LowStockItemDTO => item !== null);\r\n\r\n      return products;\r\n    } catch (error) {\r\n      analyticsLogger.error('Error fetching low stock items:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get stock turnover rates\r\n   */\r\n  static async getStockTurnoverRates(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<StockTurnoverRate[]> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: stockData } = await supabase\r\n        .from('stock_levels')\r\n        .select(\r\n          `\r\n          id,\r\n          product_id,\r\n          practice_id,\r\n          location_id,\r\n          current_quantity,\r\n          available_quantity,\r\n          reserved_quantity,\r\n          minimum_quantity,\r\n          location_name,\r\n          product_name,\r\n          stock_movements!inner(\r\n            movement_type,\r\n            quantity,\r\n            created_at,\r\n            products(*),\r\n            stock_levels!inner(location_id)\r\n          )\r\n        `\r\n        )\r\n        .eq('practice_id', clinicId)\r\n        .gte('stock_movements.created_at', startDate.toISOString())\r\n        .lte('stock_movements.created_at', endDate.toISOString());\r\n\r\n      const levels = (stockData as StockLevelWithMovementsRow[] | null) ?? [];\r\n\r\n      if (!levels.length) {\r\n        return [];\r\n      }\r\n\r\n      const metrics = new Map<string, {\r\n        productId: string;\r\n        productName: string;\r\n        totalUsed: number;\r\n        averageStock: number;\r\n      }>();\r\n\r\n      levels.forEach(level => {\r\n        const productId = level.product_id;\r\n        const productName = level.products.name ?? 'Unknown product';\r\n        const currentQuantity = level.current_quantity ?? 0;\r\n\r\n        if (!metrics.has(productId)) {\r\n          metrics.set(productId, {\r\n            productId,\r\n            productName,\r\n            totalUsed: 0,\r\n            averageStock: currentQuantity,\r\n          });\r\n        }\r\n\r\n        const entry = metrics.get(productId);\r\n        if (!entry) {\r\n          return;\r\n        }\r\n\r\n        entry.averageStock = (entry.averageStock + currentQuantity) / 2;\r\n\r\n        const movements = toArray(level.stock_movements);\r\n\r\n        movements.forEach(movement => {\r\n          if (movement.movement_type === 'usage') {\r\n            const quantity = Math.abs(movement.quantity ?? 0);\r\n            entry.totalUsed += quantity;\r\n          }\r\n        });\r\n      });\r\n\r\n      return Array.from(metrics.values()).map(metric => ({\r\n        productId: metric.productId,\r\n        productName: metric.productName,\r\n        totalUsed: metric.totalUsed,\r\n        averageStock: metric.averageStock,\r\n        turnoverRate:\r\n          metric.averageStock > 0 ? metric.totalUsed / metric.averageStock : 0,\r\n      }));\r\n    } catch (error) {\r\n      analyticsLogger.error('Error calculating stock turnover rates:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get monthly usage trends\r\n   */\r\n  static async getMonthlyUsageTrends(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<MonthlyUsageTrends> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: entries } = await supabase\r\n        .from('stock_entries')\r\n        .select('*')\r\n        .eq('practice_id', clinicId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString());\r\n\r\n      const rows = (entries as StockEntryRow[] | null) ?? [];\r\n\r\n      const monthlyData: MonthlyUsageTrends = {};\r\n      rows.forEach(entry => {\r\n        const createdAt = new Date(entry.created_at);\r\n        const month = createdAt.getMonth();\r\n        const year = createdAt.getFullYear();\r\n        const key = `${year}-${month + 1}`;\r\n        const countedQuantity = entry.counted_quantity ?? 0;\r\n        monthlyData[key] = (monthlyData[key] ?? 0) + countedQuantity;\r\n      });\r\n\r\n      return monthlyData;\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting monthly usage trends:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get top used products\r\n   */\r\n  static async getTopUsedProducts(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date,\r\n    limit = 10\r\n  ): Promise<TopUsedProduct[]> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: entries } = await supabase\r\n        .from('stock_entries')\r\n        .select('*, products(name)')\r\n        .eq('practice_id', clinicId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .order('counted_quantity', { ascending: false })\r\n        .limit(limit);\r\n\r\n      const rows = (entries as StockEntryRow[] | null) ?? [];\r\n\r\n      return rows.map(entry => ({\r\n        productId: entry.product_id,\r\n        productName: entry.products?.name ?? 'Unknown',\r\n        totalUsed: entry.counted_quantity ?? 0,\r\n        usageCount: 1,\r\n      } satisfies TopUsedProduct));\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting top used products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get cost savings analytics\r\n   */\r\n  static async getCostSavingsAnalytics(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<CostSavingsAnalytics> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: movements } = await supabase\r\n        .from('stock_movements')\r\n        .select(\r\n          `\r\n          *,\r\n          products!inner(price),\r\n          stock_levels!inner(practice_id)\r\n        `\r\n        )\r\n        .eq('stock_levels.practice_id', clinicId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString());\r\n\r\n      const rows = (movements as StockMovementRow[] | null) ?? [];\r\n\r\n      if (!rows.length) {\r\n        return {\r\n          total_savings: 0,\r\n          waste_reduction: 0,\r\n          efficiency_improvement: 0,\r\n          cost_per_unit_improvement: 0,\r\n        };\r\n      }\r\n\r\n      let totalWaste = 0;\r\n      let totalUsage = 0;\r\n      let totalValue = 0;\r\n\r\n      rows.forEach(movement => {\r\n        const quantity = Math.abs(movement.quantity ?? 0);\r\n        const price = movement.products?.price ?? 0;\r\n        totalValue += quantity * price;\r\n\r\n        if (movement.movement_type === 'waste') {\r\n          totalWaste += quantity;\r\n        } else if (movement.movement_type === 'usage') {\r\n          totalUsage += quantity;\r\n        }\r\n      });\r\n\r\n      const wasteReduction =\r\n        totalUsage > 0 ? (1 - totalWaste / totalUsage) * 100 : 0;\r\n      const efficiencyImprovement =\r\n        wasteReduction > 0 ? wasteReduction * 0.8 : 0;\r\n\r\n      return {\r\n        total_savings: totalValue * (wasteReduction / 100),\r\n        waste_reduction: wasteReduction,\r\n        efficiency_improvement: efficiencyImprovement,\r\n        cost_per_unit_improvement:\r\n          totalUsage > 0 ? (totalValue / totalUsage) * 0.1 : 0,\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error calculating cost savings:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get inventory value trends\r\n   */\r\n  static async getInventoryValueTrends(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<InventoryValueTrends> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: levels } = await supabase\r\n        .from('stock_levels')\r\n        .select(\r\n          `\r\n          product_id,\r\n          product_name,\r\n          practice_id,\r\n          location_id,\r\n          current_quantity,\r\n          available_quantity,\r\n          reserved_quantity,\r\n          minimum_quantity,\r\n          created_at\r\n        `\r\n        )\r\n        .eq('practice_id', clinicId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString());\r\n\r\n      const rows = (levels as StockLevelView[] | null) ?? [];\r\n\r\n      const totalValue = rows.reduce((sum, level) => {\r\n        const available = level.available_quantity ?? 0;\r\n        const reserved = level.reserved_quantity ?? 0;\r\n        const quantity = available + reserved;\r\n        const price = 10; // Placeholder until pricing data is joined properly\r\n        return sum + quantity * price;\r\n      }, 0);\r\n\r\n      return {\r\n        current_value: totalValue,\r\n        trend_data: [{ date: new Date().toISOString(), value: totalValue }],\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting inventory value trends:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Predict future stock needs\r\n   */\r\n  static async predictStockNeeds(\r\n    clinicId: string\r\n  ): Promise<PredictedStockNeed[]> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: levels } = await supabase\r\n        .from('stock_levels')\r\n        .select(\r\n          `\r\n          product_id,\r\n          product_name,\r\n          practice_id,\r\n          location_id,\r\n          current_quantity,\r\n          available_quantity,\r\n          reserved_quantity,\r\n          minimum_quantity\r\n        `\r\n        )\r\n        .eq('practice_id', clinicId);\r\n\r\n      const rows = (levels as StockLevelView[] | null) ?? [];\r\n\r\n      return rows.map(level => ({\r\n        productId: level.product_id,\r\n        productName: level.product_name ?? 'Unknown',\r\n        currentStock: level.current_quantity ?? 0,\r\n        predictedUsage: Math.floor(Math.random() * 10),\r\n        suggestedOrder: Math.max(0, Math.floor(Math.random() * 20)),\r\n      }));\r\n    } catch (error) {\r\n      analyticsLogger.error('Error predicting stock needs:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get forecast accuracy\r\n   */\r\n  static async getForecastAccuracy(\r\n    clinicId: string,\r\n    startDate: Date,\r\n    endDate: Date\r\n  ): Promise<ForecastAccuracy> {\r\n    if (!clinicId) {\r\n      throw new Error(t('analytics.clinicIdRequired'));\r\n    }\r\n\r\n    try {\r\n      const { data: movements } = await supabase\r\n        .from('stock_movements')\r\n        .select(\r\n          `\r\n          *,\r\n          products!inner(category),\r\n          stock_levels!inner(practice_id)\r\n        `\r\n        )\r\n        .eq('stock_levels.practice_id', clinicId)\r\n        .gte('created_at', startDate.toISOString())\r\n        .lte('created_at', endDate.toISOString())\r\n        .eq('movement_type', 'usage');\r\n\r\n      const rows = (movements as StockMovementRow[] | null) ?? [];\r\n\r\n      if (!rows.length) {\r\n        return {\r\n          overall_accuracy: 0,\r\n          category_accuracy: {\r\n            medical_supplies: 0,\r\n            pharmaceuticals: 0,\r\n            equipment: 0,\r\n          },\r\n          trend: 'insufficient_data',\r\n        };\r\n      }\r\n\r\n      const categoryStats = new Map<string, { total: number; count: number }>();\r\n\r\n      rows.forEach(movement => {\r\n        const category = movement.products?.category ?? 'other';\r\n        if (!categoryStats.has(category)) {\r\n          categoryStats.set(category, { total: 0, count: 0 });\r\n        }\r\n        const stats = categoryStats.get(category);\r\n        if (!stats) {\r\n          return;\r\n        }\r\n        stats.total += Math.abs(movement.quantity ?? 0);\r\n        stats.count += 1;\r\n      });\r\n\r\n      const categoryAccuracy: Record<string, number> = {};\r\n      let overallTotal = 0;\r\n      let overallCount = 0;\r\n\r\n      categoryStats.forEach((stats, category) => {\r\n        const avgUsage = stats.total / Math.max(stats.count, 1);\r\n        const relevantMovements = rows.filter(\r\n          movement => (movement.products?.category ?? 'other') === category\r\n        );\r\n        const variance =\r\n          relevantMovements.reduce((sum, movement) => {\r\n            const quantity = Math.abs(movement.quantity ?? 0);\r\n            return sum + Math.pow(quantity - avgUsage, 2);\r\n          }, 0) / Math.max(stats.count, 1);\r\n\r\n        const accuracy = Math.max(0, 100 - (variance / Math.max(avgUsage, 1)) * 10);\r\n        categoryAccuracy[category.toLowerCase().replace(/\\s+/g, '_')] = accuracy;\r\n        overallTotal += accuracy;\r\n        overallCount += 1;\r\n      });\r\n\r\n      const overallAccuracy = overallCount > 0 ? overallTotal / overallCount : 0;\r\n\r\n      return {\r\n        overall_accuracy: overallAccuracy,\r\n        category_accuracy: {\r\n          medical_supplies: categoryAccuracy.medical_supplies ?? 0,\r\n          pharmaceuticals: categoryAccuracy.pharmaceuticals ?? 0,\r\n          equipment: categoryAccuracy.equipment ?? 0,\r\n          ...categoryAccuracy,\r\n        },\r\n        trend:\r\n          overallAccuracy > 75\r\n            ? 'improving'\r\n            : overallAccuracy > 50\r\n            ? 'stable'\r\n            : 'needs_attention',\r\n      };\r\n    } catch (error) {\r\n      analyticsLogger.error('Error calculating forecast accuracy:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Keep methods that are actually used in the codebase\r\n  async getUsageStats(): Promise<UsageAnalytics[]> {\r\n    try {\r\n      const { data: events } = await supabase\r\n        .from('events')\r\n        .select('*')\r\n        .order('created_at', { ascending: false })\r\n        .limit(100);\r\n      return (events as UsageAnalytics[] | null) ?? [];\r\n    } catch (error) {\r\n      analyticsLogger.error('Error getting usage stats:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async trackScanEvent(\r\n    productId: string,\r\n    scanType: string,\r\n    metadata?: JsonRecord\r\n  ) {\r\n    return this.trackEvent('scan_event', {\r\n      product_id: productId,\r\n      scan_type: scanType,\r\n      ...(metadata ?? {}),\r\n    });\r\n  }\r\n\r\n  async flushEvents(): Promise<void> {\r\n    // Implementation kept simple for now\r\n  }\r\n\r\n  private startAutoFlush() {\r\n    this.flushTimer = setInterval(() => {\r\n      this.flushEvents();\r\n    }, 30000);\r\n  }\r\n\r\n  destroy() {\r\n    if (this.flushTimer) {\r\n      clearInterval(this.flushTimer);\r\n    }\r\n    this.flushEvents(); // Final flush\r\n  }\r\n}\r\n\r\n// Export an instance for compatibility with existing code\r\nexport const analyticsService = new AnalyticsService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\platform-dashboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 10,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 10,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [357, 360], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [357, 360], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 368,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 368,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10630, 10633], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10630, 10633], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 407,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 407,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11597, 11600], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11597, 11600], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 409,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 409,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11696, 11699], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11696, 11699], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 411,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 411,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11791, 11794], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11791, 11794], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11919, 11922], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11919, 11922], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11934, 11937], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11934, 11937], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 618,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 618,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17691, 17694], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17691, 17694], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '../supabase';\r\nimport { dashboardLogger } from '@/utils/logger';\r\nimport { t } from '@/utils/i18n-service';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\n\r\nexport interface PlatformWidget {\r\n  id: string;\r\n  title: string;\r\n  type: 'metric' | 'chart' | 'list' | 'table' | 'system';\r\n  data: Record<string, any>;\r\n  size: 'small' | 'medium' | 'large';\r\n  position: number;\r\n  visible: boolean;\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport interface PlatformDashboardData {\r\n  widgets: PlatformWidget[];\r\n  systemInfo: {\r\n    version: string;\r\n    buildNumber: string;\r\n    lastDeployment: string;\r\n    uptime: string;\r\n    environment: string;\r\n  };\r\n  platformMetrics: {\r\n    totalPractices: number;\r\n    totalUsers: number;\r\n    activeToday: number;\r\n    totalEvents: number;\r\n    systemHealth: 'healthy' | 'warning' | 'critical';\r\n  };\r\n  quickActions: Array<{\r\n    id: string;\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    color: string;\r\n    permission?: string;\r\n  }>;\r\n}\r\n\r\nclass PlatformDashboardService {\r\n  private getWidgetConfig(): string[] {\r\n    return [\r\n      'system-health',\r\n      'version-info',\r\n      'platform-audit-logs',\r\n      'customer-management',\r\n      'api-integration-status',\r\n      'performance-metrics',\r\n      'database-status',\r\n      'error-monitoring',\r\n    ];\r\n  }\r\n\r\n  async getDashboardData(): Promise<PlatformDashboardData> {\r\n    try {\r\n      dashboardLogger.info('🌐 Loading platform dashboard');\r\n\r\n      const widgetIds = this.getWidgetConfig();\r\n\r\n      // Load system info\r\n      const systemInfo = await this.loadSystemInfo();\r\n\r\n      // Load platform metrics\r\n      const platformMetrics = await this.loadPlatformMetrics();\r\n\r\n      // Load platform widgets\r\n      const widgets = await this.loadWidgets(widgetIds);\r\n\r\n      // Load quick actions\r\n      const quickActions = this.getQuickActions();\r\n\r\n      return {\r\n        widgets,\r\n        systemInfo,\r\n        platformMetrics,\r\n        quickActions,\r\n      };\r\n    } catch (error) {\r\n      dashboardLogger.error('Error loading platform dashboard:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async loadSystemInfo() {\r\n    // This would typically come from environment variables or system APIs\r\n    const packageInfo = await import('../../../package.json');\r\n\r\n    return {\r\n      version: packageInfo.version || '2.1.0',\r\n      buildNumber: process.env.VITE_BUILD_NUMBER || '1234',\r\n      lastDeployment:\r\n        process.env.VITE_DEPLOYMENT_TIME || new Date().toISOString(),\r\n      uptime: this.getSystemUptime(),\r\n      environment: process.env.NODE_ENV || 'development',\r\n    };\r\n  }\r\n\r\n  private getSystemUptime(): string {\r\n    // In a real application, this would be calculated from deployment time\r\n    const uptimeMs = Date.now() - new Date('2024-01-01').getTime();\r\n    const days = Math.floor(uptimeMs / (1000 * 60 * 60 * 24));\r\n    const hours = Math.floor(\r\n      (uptimeMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n    );\r\n    return `${days}d ${hours}h`;\r\n  }\r\n\r\n  private async loadPlatformMetrics() {\r\n    try {\r\n      // Get real data from Supabase\r\n      const { count: totalPractices } = await supabase\r\n        .from('practices')\r\n        .select('id', { count: 'exact' });\r\n\r\n      const { count: totalUsers } = await supabase\r\n        .from('practice_members')\r\n        .select('user_id', { count: 'exact' });\r\n\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const { count: activeToday } = await supabase\r\n        .from('usage_analytics')\r\n        .select('user_id', { count: 'exact' })\r\n        .gte('created_at', today);\r\n\r\n      const { count: totalEvents } = await supabase\r\n        .from('usage_analytics')\r\n        .select('id', { count: 'exact' })\r\n        .gte('created_at', today);\r\n\r\n      const { count: recentErrors } = await supabase\r\n        .from('activity_log')\r\n        .select('id', { count: 'exact' })\r\n        .ilike('activity_type', '%error%')\r\n        .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());\r\n\r\n      let systemHealth: 'healthy' | 'warning' | 'critical' = 'healthy';\r\n      if (recentErrors && recentErrors > 10) systemHealth = 'warning';\r\n      if (recentErrors && recentErrors > 50) systemHealth = 'critical';\r\n\r\n      return {\r\n        totalPractices: totalPractices || 0,\r\n        totalUsers: totalUsers || 0,\r\n        activeToday: activeToday || 0,\r\n        totalEvents: totalEvents || 0,\r\n        systemHealth,\r\n      };\r\n    } catch (error) {\r\n      dashboardLogger.error('Error loading platform metrics:', error);\r\n      return {\r\n        totalPractices: 0,\r\n        totalUsers: 0,\r\n        activeToday: 0,\r\n        totalEvents: 0,\r\n        systemHealth: 'critical' as const,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async loadWidgets(widgetIds: string[]): Promise<PlatformWidget[]> {\r\n    const widgets: PlatformWidget[] = [];\r\n\r\n    for (let i = 0; i < widgetIds.length; i++) {\r\n      const widgetId = widgetIds[i];\r\n      try {\r\n        const widget = await this.loadWidget(widgetId, i);\r\n        if (widget) {\r\n          widgets.push(widget);\r\n        }\r\n      } catch (error) {\r\n        ServiceErrorHandler.handle(\r\n          error,\r\n          {\r\n            service: 'PlatformDashboardService',\r\n            operation: 'loadWidget',\r\n            metadata: { widgetId, position: i },\r\n          },\r\n          { rethrow: false, logLevel: 'error' }\r\n        );\r\n\r\n        // Add error widget\r\n        widgets.push({\r\n          id: widgetId,\r\n          title: this.getWidgetTitle(widgetId),\r\n          type: 'system',\r\n          data: { error: 'Failed to load widget data' },\r\n          size: 'medium',\r\n          position: i,\r\n          visible: true,\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n        });\r\n      }\r\n    }\r\n\r\n    return widgets;\r\n  }\r\n\r\n  private async loadWidget(\r\n    widgetId: string,\r\n    position: number\r\n  ): Promise<PlatformWidget | null> {\r\n    const baseWidget = {\r\n      id: widgetId,\r\n      title: this.getWidgetTitle(widgetId),\r\n      position,\r\n      visible: true,\r\n      loading: false,\r\n    };\r\n\r\n    switch (widgetId) {\r\n      case 'system-health':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadSystemHealth(),\r\n        };\r\n\r\n      case 'version-info':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'system' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadVersionInfo(),\r\n        };\r\n\r\n      case 'platform-audit-logs':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadPlatformAuditLogs(),\r\n        };\r\n\r\n      case 'customer-management':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadCustomerManagement(),\r\n        };\r\n\r\n      case 'api-integration-status':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadApiIntegrationStatus(),\r\n        };\r\n\r\n      case 'performance-metrics':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadPerformanceMetrics(),\r\n        };\r\n\r\n      case 'database-status':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'small' as const,\r\n          data: await this.loadDatabaseStatus(),\r\n        };\r\n\r\n      case 'error-monitoring':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadErrorMonitoring(),\r\n        };\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // Platform widget data loaders\r\n  private async loadSystemHealth() {\r\n    const { data: recentErrors } = await supabase\r\n      .from('activity_log')\r\n      .select('activity_type, created_at')\r\n      .ilike('activity_type', '%error%')\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: false });\r\n\r\n    const { data: practicesActive } = await supabase\r\n      .from('usage_analytics')\r\n      .select('practice_id')\r\n      .gte('created_at', new Date(Date.now() - 60 * 60 * 1000).toISOString());\r\n\r\n    const activePractices = new Set(practicesActive?.map(p => p.practice_id))\r\n      .size;\r\n\r\n    // Check database connection health\r\n    const { data: dbHealth } = await supabase\r\n      .from('practices')\r\n      .select('id')\r\n      .limit(1);\r\n\r\n    return {\r\n      error_count_24h: recentErrors?.length || 0,\r\n      active_practices_1h: activePractices,\r\n      database_status: dbHealth ? 'connected' : 'disconnected',\r\n      overall_status:\r\n        recentErrors && recentErrors.length > 20 ? 'warning' : 'healthy',\r\n      last_check: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  private async loadVersionInfo() {\r\n    const packageInfo = await import('../../../package.json');\r\n\r\n    return {\r\n      app_version: packageInfo.version || '2.1.0',\r\n      build_number: process.env.VITE_BUILD_NUMBER || '1234',\r\n      last_deployment:\r\n        process.env.VITE_DEPLOYMENT_TIME || new Date().toISOString(),\r\n      database_version: '15.4', // This would typically come from a query\r\n      environment: process.env.NODE_ENV || 'development',\r\n      dependencies: {\r\n        vue: packageInfo.dependencies?.vue || '3.4.0',\r\n        quasar: packageInfo.dependencies?.quasar || '2.14.0',\r\n        supabase:\r\n          packageInfo.dependencies?.['@supabase/supabase-js'] || '2.38.0',\r\n      },\r\n    };\r\n  }\r\n\r\n  private async loadPlatformAuditLogs() {\r\n    const { data } = await supabase\r\n      .from('activity_log')\r\n      .select(\r\n        `\r\n        activity_type,\r\n        description,\r\n        created_at,\r\n        practices!inner(name),\r\n        user_id\r\n      `\r\n      )\r\n      .in('activity_type', [\r\n        'user_created',\r\n        'practice_created',\r\n        'system_error',\r\n        'login_failed',\r\n      ])\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: false })\r\n      .limit(50);\r\n\r\n    return {\r\n      items:\r\n        data?.map(log => ({\r\n          type: log.activity_type,\r\n          description: log.description,\r\n          practice_name: (log.practices as any)?.name || 'System',\r\n          user_id: log.user_id,\r\n          timestamp: log.created_at,\r\n          severity: log.activity_type.includes('error')\r\n            ? 'error'\r\n            : log.activity_type.includes('failed')\r\n              ? 'warning'\r\n              : 'info',\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private async loadCustomerManagement() {\r\n    const { data } = await supabase\r\n      .from('practices')\r\n      .select(\r\n        `\r\n        name,\r\n        email,\r\n        created_at,\r\n        practice_members(user_id),\r\n        practice_locations(id),\r\n        usage_analytics(created_at)\r\n      `\r\n      )\r\n      .order('created_at', { ascending: false })\r\n      .limit(20);\r\n\r\n    return {\r\n      headers: [\r\n        'Practice',\r\n        'Email',\r\n        'Users',\r\n        'Locations',\r\n        'Last Activity',\r\n        'Created',\r\n      ],\r\n      rows:\r\n        data?.map(practice => {\r\n          const userCount = (practice.practice_members as any[])?.length || 0;\r\n          const locationCount =\r\n            (practice.practice_locations as any[])?.length || 0;\r\n          const lastActivity =\r\n            (practice.usage_analytics as any[])?.length > 0\r\n              ? new Date(\r\n                  Math.max(\r\n                    ...(practice.usage_analytics as any[]).map((a: any) =>\r\n                      new Date(a.created_at).getTime()\r\n                    )\r\n                  )\r\n                ).toLocaleDateString()\r\n              : 'Never';\r\n\r\n          return [\r\n            practice.name,\r\n            practice.email || 'N/A',\r\n            userCount,\r\n            locationCount,\r\n            lastActivity,\r\n            new Date(practice.created_at).toLocaleDateString(),\r\n          ];\r\n        }) || [],\r\n    };\r\n  }\r\n\r\n  private async loadApiIntegrationStatus() {\r\n    const { data } = await supabase\r\n      .from('suppliers')\r\n      .select('integration_type, order_method, sync_enabled, last_sync_at')\r\n      .neq('integration_type', 'manual');\r\n\r\n    // Group by integration type and method\r\n    const integrationStats: Record<\r\n      string,\r\n      {\r\n        total: number;\r\n        active: number;\r\n        recent_syncs: number;\r\n      }\r\n    > = {};\r\n\r\n    data?.forEach(supplier => {\r\n      const key = `${supplier.integration_type}-${supplier.order_method}`;\r\n      if (!integrationStats[key]) {\r\n        integrationStats[key] = { total: 0, active: 0, recent_syncs: 0 };\r\n      }\r\n\r\n      integrationStats[key].total++;\r\n      if (supplier.sync_enabled) integrationStats[key].active++;\r\n      if (\r\n        supplier.last_sync_at &&\r\n        new Date(supplier.last_sync_at) >\r\n          new Date(Date.now() - 24 * 60 * 60 * 1000)\r\n      ) {\r\n        integrationStats[key].recent_syncs++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      headers: ['Integration', 'Total', 'Active', 'Recent Syncs', 'Health'],\r\n      rows: Object.entries(integrationStats).map(([key, stats]) => {\r\n        const health =\r\n          stats.active > 0\r\n            ? stats.recent_syncs / stats.active > 0.8\r\n              ? 'Good'\r\n              : 'Warning'\r\n            : 'Inactive';\r\n\r\n        return [\r\n          key.replace('-', ' + '),\r\n          stats.total,\r\n          stats.active,\r\n          stats.recent_syncs,\r\n          health,\r\n        ];\r\n      }),\r\n    };\r\n  }\r\n\r\n  private async loadPerformanceMetrics() {\r\n    // Get usage analytics for the last 7 days\r\n    const { data } = await supabase\r\n      .from('usage_analytics')\r\n      .select('created_at, event_type')\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: true });\r\n\r\n    // Group by day\r\n    const dailyMetrics: Record<string, number> = {};\r\n    const last7Days = [];\r\n\r\n    for (let i = 6; i >= 0; i--) {\r\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000)\r\n        .toISOString()\r\n        .split('T')[0];\r\n      last7Days.push(date);\r\n      dailyMetrics[date] = 0;\r\n    }\r\n\r\n    data?.forEach(event => {\r\n      const day = event.created_at.split('T')[0];\r\n      if (Object.prototype.hasOwnProperty.call(dailyMetrics, day)) {\r\n        dailyMetrics[day]++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      chart_type: 'line',\r\n      labels: last7Days.map(date => new Date(date).toLocaleDateString()),\r\n      datasets: [\r\n        {\r\n          label: 'Daily Events',\r\n          data: last7Days.map(date => dailyMetrics[date]),\r\n          color: '#2196F3',\r\n        },\r\n      ],\r\n      total_events: Object.values(dailyMetrics).reduce(\r\n        (sum, val) => sum + val,\r\n        0\r\n      ),\r\n    };\r\n  }\r\n\r\n  private async loadDatabaseStatus() {\r\n    try {\r\n      // Simple connectivity test\r\n      const start = Date.now();\r\n      const { data: pingData, error: pingError } = await supabase\r\n        .from('practices')\r\n        .select('id')\r\n        .limit(1);\r\n      const responseTime = Date.now() - start;\r\n\r\n      // Optional RPC get_table_stats\r\n      let totalTables = 0;\r\n      let largestTable = 'unknown';\r\n      try {\r\n        const { data: tableStats } = await supabase.rpc('get_table_stats');\r\n        totalTables = tableStats?.length || 0;\r\n        largestTable = tableStats?.[0]?.table_name || 'unknown';\r\n      } catch (rpcError) {\r\n        ServiceErrorHandler.handle(\r\n          rpcError,\r\n          {\r\n            service: 'PlatformDashboardService',\r\n            operation: 'get_table_stats',\r\n          },\r\n          { rethrow: false, logLevel: 'warn' }\r\n        );\r\n      }\r\n\r\n      return {\r\n        status: pingError ? 'error' : pingData ? 'connected' : 'disconnected',\r\n        response_time_ms: responseTime,\r\n        total_tables: totalTables,\r\n        largest_table: largestTable,\r\n        last_check: new Date().toISOString(),\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'error',\r\n        response_time_ms: null,\r\n        total_tables: 0,\r\n        largest_table: 'unknown',\r\n        last_check: new Date().toISOString(),\r\n        error: error instanceof Error ? error.message : 'Unknown error',\r\n      };\r\n    }\r\n  }\r\n\r\n  private async loadErrorMonitoring() {\r\n    const { data } = await supabase\r\n      .from('activity_log')\r\n      .select(\r\n        `\r\n        activity_type,\r\n        description,\r\n        created_at,\r\n        practices!inner(name)\r\n      `\r\n      )\r\n      .ilike('activity_type', '%error%')\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: false })\r\n      .limit(20);\r\n\r\n    // Group errors by type\r\n    const errorGroups: Record<\r\n      string,\r\n      { count: number; last_seen: string; practices: Set<string> }\r\n    > = {};\r\n\r\n    data?.forEach(error => {\r\n      const type = error.activity_type;\r\n      if (!errorGroups[type]) {\r\n        errorGroups[type] = {\r\n          count: 0,\r\n          last_seen: error.created_at,\r\n          practices: new Set(),\r\n        };\r\n      }\r\n\r\n      errorGroups[type].count++;\r\n      errorGroups[type].practices.add(\r\n        (error.practices as any)?.name || 'Unknown'\r\n      );\r\n\r\n      if (new Date(error.created_at) > new Date(errorGroups[type].last_seen)) {\r\n        errorGroups[type].last_seen = error.created_at;\r\n      }\r\n    });\r\n\r\n    return {\r\n      items: Object.entries(errorGroups)\r\n        .map(([type, info]) => ({\r\n          error_type: type,\r\n          count: info.count,\r\n          affected_practices: info.practices.size,\r\n          last_seen: info.last_seen,\r\n          severity:\r\n            info.count > 10 ? 'high' : info.count > 5 ? 'medium' : 'low',\r\n        }))\r\n        .sort((a, b) => b.count - a.count),\r\n    };\r\n  }\r\n\r\n  private getWidgetTitle(widgetId: string): string {\r\n    const titles: Record<string, string> = {\r\n      'system-health': t('platform.widgets.systemHealth'),\r\n      'version-info': t('platform.widgets.versionInfo'),\r\n      'platform-audit-logs': t('platform.widgets.auditLogs'),\r\n      'customer-management': t('platform.widgets.customerManagement'),\r\n      'api-integration-status': t('platform.widgets.apiIntegrationStatus'),\r\n      'performance-metrics': t('platform.widgets.performanceMetrics'),\r\n      'database-status': t('platform.widgets.databaseStatus'),\r\n      'error-monitoring': t('platform.widgets.errorMonitoring'),\r\n    };\r\n\r\n    return titles[widgetId] || widgetId;\r\n  }\r\n\r\n  private getQuickActions() {\r\n    return [\r\n      {\r\n        id: 'create-practice',\r\n        label: t('platform.quickActions.createPractice'),\r\n        icon: 'add_business',\r\n        route: '/platform/practices/create',\r\n        color: 'primary',\r\n      },\r\n      {\r\n        id: 'system-logs',\r\n        label: t('platform.quickActions.systemLogs'),\r\n        icon: 'description',\r\n        route: '/platform/logs',\r\n        color: 'info',\r\n      },\r\n      {\r\n        id: 'database-admin',\r\n        label: t('platform.quickActions.databaseAdmin'),\r\n        icon: 'storage',\r\n        route: '/platform/database',\r\n        color: 'warning',\r\n      },\r\n      {\r\n        id: 'api-documentation',\r\n        label: t('platform.quickActions.apiDocumentation'),\r\n        icon: 'api',\r\n        route: '/platform/api-docs',\r\n        color: 'indigo',\r\n      },\r\n      {\r\n        id: 'monitoring',\r\n        label: t('platform.quickActions.monitoring'),\r\n        icon: 'monitoring',\r\n        route: '/platform/monitoring',\r\n        color: 'red',\r\n      },\r\n      {\r\n        id: 'backup-restore',\r\n        label: t('platform.quickActions.backupRestore'),\r\n        icon: 'backup',\r\n        route: '/platform/backup',\r\n        color: 'green',\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport const platformDashboardService = new PlatformDashboardService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\practice-dashboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RoleDashboardDefinition' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1190, 1193], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1190, 1193], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 227,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 227,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6788, 6791], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6788, 6791], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 307,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 307,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9129, 9132], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9129, 9132], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16906, 16909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16906, 16909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 630,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 630,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18046, 18049], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18046, 18049], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 631,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 631,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18096, 18099], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18096, 18099], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 663,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 663,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18962, 18965], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18962, 18965], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 692,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 692,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19771, 19774], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19771, 19774], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 693,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 693,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19826, 19829], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19826, 19829], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 782,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 782,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22506, 22509], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22506, 22509], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 836,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 836,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23948, 23951], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23948, 23951], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 908,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 908,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26059, 26062], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26059, 26062], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 915,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 915,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26274, 26277], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26274, 26277], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 999,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 999,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28475, 28478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28475, 28478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1032,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1032,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29385, 29388], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29385, 29388], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1084,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1084,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30913, 30916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30913, 30916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1219,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1219,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35471, 35474], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35471, 35474], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1220,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1220,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35535, 35538], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35535, 35538], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1242,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1242,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [36203, 36206], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [36203, 36206], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'practiceId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1307,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1307,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'practiceId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 1339,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1339,
        "endColumn": 42
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 22,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '../supabase';\r\nimport { dashboardLogger } from '@/utils/logger';\r\nimport { t } from '@/utils/i18n-service';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\nimport { roleDashboardConfig, type RoleDashboardDefinition } from './role-config';\r\nimport type { UserRole } from '@/types/permissions';\r\nimport type { AnalyticsStockLevelDTO } from '@/types/analytics';\r\nimport type { StockLevelView } from '@/types/inventory';\r\n\r\nconst mapStockLevelToDashboardDTO = (\r\n  entry: StockLevelView\r\n): AnalyticsStockLevelDTO => ({\r\n  productId: entry.productId,\r\n  locationId: entry.locationId,\r\n  currentQuantity: entry.currentQuantity ?? 0,\r\n  minimumQuantity: entry.minimumQuantity ?? 0,\r\n  reservedQuantity: entry.reservedQuantity ?? 0,\r\n  availableQuantity: entry.availableQuantity ?? 0,\r\n  productName: entry.productName ?? undefined,\r\n  locationName: entry.locationName ?? undefined,\r\n  preferredSupplierId: entry.preferredSupplierId ?? undefined,\r\n  updatedAt: entry.updatedAt ?? undefined,\r\n});\r\n\r\nexport interface PracticeWidget {\r\n  id: string;\r\n  title: string;\r\n  type: 'metric' | 'chart' | 'list' | 'alert' | 'table';\r\n  data: Record<string, any>;\r\n  size: 'small' | 'medium' | 'large';\r\n  position: number;\r\n  visible: boolean;\r\n  loading?: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport interface PracticeDashboardData {\r\n  widgets: PracticeWidget[];\r\n  metrics: {\r\n    totalProducts: number;\r\n    lowStockCount: number;\r\n    pendingOrders: number;\r\n    totalValue: number;\r\n    recentActivity: number;\r\n  };\r\n  quickActions: Array<{\r\n    id: string;\r\n    label: string;\r\n    icon: string;\r\n    route: string;\r\n    color: string;\r\n    type: string;\r\n    permission?: string;\r\n  }>;\r\n  alerts: Array<{\r\n    id: string;\r\n    type: 'warning' | 'error' | 'info' | 'success';\r\n    message: string;\r\n    action?: string;\r\n    actionLabel?: string;\r\n  }>;\r\n}\r\n\r\ntype RoleSummary = {\r\n  title: string;\r\n  subtitle: string;\r\n  widgets: string[];\r\n  color: string;\r\n  icon: string;\r\n};\r\n\r\nclass PracticeDashboardService {\r\n  /**\r\n   * Krijg role configuratie via de centrale role config service\r\n   */\r\n  getRoleConfig(role: UserRole): RoleSummary {\r\n    const config = roleDashboardConfig.getRoleConfig(role);\r\n\r\n    return {\r\n      title: t(config.titleKey),\r\n      subtitle: t(config.subtitleKey),\r\n      widgets: config.widgets.map(widget => widget.id),\r\n      color: config.color,\r\n      icon: config.icon,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Krijg widget configuratie via de centrale config\r\n   */\r\n  private getWidgetConfig(role: UserRole): string[] {\r\n    return roleDashboardConfig.getWidgetIds(role);\r\n  }\r\n\r\n  async getDashboardData(\r\n    role: UserRole,\r\n    practiceId: string\r\n  ): Promise<PracticeDashboardData> {\r\n    try {\r\n      dashboardLogger.info(\r\n        `🎯 Loading practice dashboard for role: \"${role}\", practice: \"${practiceId}\"`\r\n      );\r\n\r\n      const widgetIds = this.getWidgetConfig(role);\r\n\r\n      // Load base metrics\r\n      const metrics = await this.loadMetrics(practiceId);\r\n\r\n      // Load role-specific widgets\r\n      const widgets = await this.loadWidgets(widgetIds, practiceId, role);\r\n\r\n      // Load role-specific quick actions\r\n      const quickActions = this.getQuickActions(role);\r\n\r\n      // Load alerts\r\n      const alerts = await this.loadAlerts(practiceId, role);\r\n\r\n      return {\r\n        widgets,\r\n        metrics,\r\n        quickActions,\r\n        alerts,\r\n      };\r\n    } catch (error) {\r\n      dashboardLogger.error('Error loading practice dashboard:', ServiceErrorHandler.normalizeError(error));\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async loadMetrics(practiceId: string) {\r\n    try {\r\n      // 🚀 PERFORMANCE OPTIMIZATION: Use parallel queries instead of sequential\r\n      const [\r\n        stockLevelsResponse,\r\n        ordersResponse,\r\n        productsResponse,\r\n        inventoryValueResponse,\r\n        recentActivityResponse,\r\n      ] = await Promise.all([\r\n        // Stock levels for low stock calculation\r\n        supabase\r\n          .from('stock_levels')\r\n          .select('current_quantity, minimum_quantity')\r\n          .eq('practice_id', practiceId),\r\n\r\n        // Orders for pending count\r\n        supabase\r\n          .from('order_lists')\r\n          .select('id, status, total_value')\r\n          .eq('practice_id', practiceId)\r\n          .order('created_at', { ascending: false })\r\n          .limit(50),\r\n\r\n        // Products count\r\n        supabase\r\n          .from('products')\r\n          .select('id')\r\n          .eq('practice_id', practiceId)\r\n          .eq('active', true),\r\n\r\n        // Inventory value with JOIN optimization\r\n        supabase\r\n          .from('stock_levels')\r\n          .select(\r\n            `\r\n            current_quantity,\r\n            products!inner(price)\r\n          `\r\n          )\r\n          .eq('practice_id', practiceId),\r\n\r\n        // Recent activity count\r\n        supabase\r\n          .from('activity_log')\r\n          .select('id')\r\n          .eq('practice_id', practiceId)\r\n          .gte(\r\n            'created_at',\r\n            new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n          ),\r\n      ]);\r\n\r\n      // Check for errors\r\n      const { data: stockLevels, error: stockError } = stockLevelsResponse;\r\n      const { data: orders, error: ordersError } = ordersResponse;\r\n      const { data: products, error: productsError } = productsResponse;\r\n      const { data: inventoryValue, error: inventoryError } =\r\n        inventoryValueResponse;\r\n      const { data: recentActivity, error: activityError } =\r\n        recentActivityResponse;\r\n\r\n      if (stockError)\r\n        dashboardLogger.warn('Error fetching stock levels', {\r\n          error: stockError,\r\n        });\r\n      if (ordersError)\r\n        dashboardLogger.warn('Error fetching orders', {\r\n          error: ordersError,\r\n        });\r\n      if (productsError)\r\n        dashboardLogger.warn('Error fetching products', {\r\n          error: productsError,\r\n        });\r\n      if (inventoryError)\r\n        dashboardLogger.warn('Error fetching inventory value', {\r\n          error: inventoryError,\r\n        });\r\n      if (activityError)\r\n        dashboardLogger.warn('Error fetching recent activity', {\r\n          error: activityError,\r\n        });\r\n\r\n      // 🚀 PERFORMANCE: Calculate metrics from parallel data\r\n      const lowStockCount =\r\n        stockLevels?.filter(\r\n          stock => stock.current_quantity <= (stock.minimum_quantity || 0)\r\n        ).length || 0;\r\n\r\n      const pendingOrders =\r\n        orders?.filter(order => ['draft', 'active'].includes(order.status))\r\n          .length || 0;\r\n\r\n      const totalProducts = products?.length || 0;\r\n\r\n      const totalValue =\r\n        inventoryValue?.reduce((total, item) => {\r\n          const price = (item.products as any)?.price || 0;\r\n          return total + item.current_quantity * price;\r\n        }, 0) || 0;\r\n\r\n      return {\r\n        totalProducts,\r\n        lowStockCount,\r\n        pendingOrders,\r\n        totalValue: Math.round(totalValue),\r\n        recentActivity: recentActivity?.length || 0,\r\n      };\r\n    } catch (error) {\r\n      dashboardLogger.error('Error loading metrics:', error);\r\n      // Return fallback metrics\r\n      return {\r\n        totalProducts: 0,\r\n        lowStockCount: 0,\r\n        pendingOrders: 0,\r\n        totalValue: 0,\r\n        recentActivity: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  private async loadWidgets(\r\n    widgetIds: string[],\r\n    practiceId: string,\r\n    role: UserRole\r\n  ): Promise<PracticeWidget[]> {\r\n    const widgets: PracticeWidget[] = [];\r\n    const roleConfig = roleDashboardConfig.getRoleConfig(role);\r\n\r\n    for (let i = 0; i < widgetIds.length; i++) {\r\n      const widgetId = widgetIds[i];\r\n      try {\r\n        // Krijg widget config voor titel en eigenschappen\r\n        const widgetConfig = roleConfig.widgets.find(w => w.id === widgetId);\r\n        const widget = await this.loadWidget(\r\n          widgetId,\r\n          practiceId,\r\n          widgetConfig?.position || i,\r\n          widgetConfig\r\n        );\r\n        if (widget) {\r\n          widgets.push(widget);\r\n        }\r\n      } catch (error) {\r\n        ServiceErrorHandler.handle(\r\n          error,\r\n          {\r\n            service: 'PracticeDashboardService',\r\n            operation: 'loadWidget',\r\n            practiceId,\r\n            metadata: { widgetId, role, position: i },\r\n          },\r\n          { rethrow: false, logLevel: 'error' }\r\n        );\r\n\r\n        // Add error widget\r\n        const widgetConfig = roleConfig.widgets.find(w => w.id === widgetId);\r\n        widgets.push({\r\n          id: widgetId,\r\n          title: t(widgetConfig?.titleKey || 'dashboard.widgets.error'),\r\n          type: 'alert',\r\n          data: { error: 'Failed to load widget data' },\r\n          size: widgetConfig?.size || 'medium',\r\n          position: widgetConfig?.position || i,\r\n          visible: true,\r\n          error: error instanceof Error ? error.message : 'Unknown error',\r\n        });\r\n      }\r\n    }\r\n\r\n    return widgets;\r\n  }\r\n\r\n  private async loadWidget(\r\n    widgetId: string,\r\n    practiceId: string,\r\n    position: number,\r\n    widgetConfig?: any\r\n  ): Promise<PracticeWidget | null> {\r\n    const baseWidget = {\r\n      id: widgetId,\r\n      title: widgetConfig\r\n        ? t(widgetConfig.titleKey)\r\n        : this.getWidgetTitle(widgetId),\r\n      position,\r\n      visible: true,\r\n      loading: false,\r\n    };\r\n\r\n    switch (widgetId) {\r\n      case 'low-stock-alerts':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadLowStockAlerts(practiceId),\r\n        };\r\n\r\n      case 'expiring-products':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadExpiringProducts(practiceId),\r\n        };\r\n\r\n      case 'order-suggestions':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadOrderSuggestions(practiceId),\r\n        };\r\n\r\n      case 'active-order-lists':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadActiveOrderLists(practiceId),\r\n        };\r\n\r\n      case 'pending-deliveries':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadPendingDeliveries(practiceId),\r\n        };\r\n\r\n      case 'stock-trends':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadStockTrends(practiceId),\r\n        };\r\n\r\n      case 'supplier-performance':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadSupplierPerformance(practiceId),\r\n        };\r\n\r\n      case 'cost-analysis':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadCostAnalysis(practiceId),\r\n        };\r\n\r\n      case 'error-alerts':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'alert' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadErrorAlerts(practiceId),\r\n        };\r\n\r\n      case 'pending-orders':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'small' as const,\r\n          data: await this.loadPendingOrdersMetric(practiceId),\r\n        };\r\n\r\n      case 'inventory-value':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadInventoryValue(practiceId),\r\n        };\r\n\r\n      case 'batch-compliance':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadBatchCompliance(practiceId),\r\n        };\r\n\r\n      case 'supplier-contracts':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadSupplierContracts(),\r\n        };\r\n\r\n      case 'stock-rotation':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadStockRotation(practiceId),\r\n        };\r\n\r\n      case 'audit-notifications':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadAuditNotifications(practiceId),\r\n        };\r\n\r\n      // LOGISTICS role widgets\r\n      case 'stock-movements':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadStockMovements(practiceId),\r\n        };\r\n\r\n      case 'location-overview':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadLocationOverview(practiceId),\r\n        };\r\n\r\n      case 'transport-status':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'small' as const,\r\n          data: await this.loadTransportStatus(practiceId),\r\n        };\r\n\r\n      // MEMBER role widgets\r\n      case 'stock-overview':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadStockOverview(practiceId),\r\n        };\r\n\r\n      case 'my-tasks':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'list' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadMyTasks(practiceId),\r\n        };\r\n\r\n      // GUEST role widgets\r\n      case 'public-info':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadPublicInfo(practiceId),\r\n        };\r\n\r\n      // PLATFORM_OWNER role widgets\r\n      case 'system-overview':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'metric' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadSystemOverview(),\r\n        };\r\n\r\n      case 'user-analytics':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'chart' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadUserAnalytics(),\r\n        };\r\n\r\n      case 'platform-health':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'alert' as const,\r\n          size: 'medium' as const,\r\n          data: await this.loadPlatformHealth(),\r\n        };\r\n\r\n      case 'subscription-status':\r\n        return {\r\n          ...baseWidget,\r\n          type: 'table' as const,\r\n          size: 'large' as const,\r\n          data: await this.loadSubscriptionStatus(),\r\n        };\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // Widget data loaders - ASSISTANT WIDGETS\r\n  private async loadLowStockAlerts(practiceId: string) {\r\n    const { data, error } = await supabase\r\n      .from('stock_levels')\r\n      .select(\r\n        `\r\n        current_quantity,\r\n        minimum_quantity,\r\n        products!inner(name, category),\r\n        practice_locations!inner(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .order('current_quantity', { ascending: true })\r\n      .limit(10);\r\n\r\n    if (error) {\r\n      console.error('Error loading low stock alerts:', error);\r\n      return { items: [] };\r\n    }\r\n\r\n    const dtoItems = (data as StockLevelView[] | null)?.map(mapStockLevelToDashboardDTO) ?? [];\r\n    const items = dtoItems\r\n      .filter(item => item.currentQuantity <= item.minimumQuantity)\r\n      .map(item => ({\r\n        name: item.productName ?? 'Unknown product',\r\n        category: 'N/A',\r\n        current_quantity: item.currentQuantity,\r\n        minimum_quantity: item.minimumQuantity,\r\n        location: item.locationName ?? 'Unknown',\r\n      }));\r\n\r\n    return {\r\n      items:\r\n        items || [],\r\n    };\r\n  }\r\n\r\n  private async loadExpiringProducts(practiceId: string) {\r\n    const { data, error } = await supabase\r\n      .from('product_batches')\r\n      .select(\r\n        `\r\n        batch_number,\r\n        expiry_date,\r\n        current_quantity,\r\n        products!inner(name),\r\n        practice_locations!inner(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .lte(\r\n        'expiry_date',\r\n        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('expiry_date', { ascending: true })\r\n      .limit(10);\r\n\r\n    if (error) {\r\n      console.error('Error loading expiring products:', error);\r\n      return { items: [] };\r\n    }\r\n\r\n    return {\r\n      items:\r\n        data?.map((item: any) => ({\r\n          product_name: item.products?.name || 'Unknown Product',\r\n          batch_number: item.batch_number || 'N/A',\r\n          expiry_date: item.expiry_date || null,\r\n          quantity: item.current_quantity || 0,\r\n          location: item.practice_locations?.name || 'Unknown Location',\r\n          days_until_expiry: item.expiry_date\r\n            ? Math.ceil(\r\n                (new Date(item.expiry_date).getTime() - Date.now()) /\r\n                  (1000 * 60 * 60 * 24)\r\n              )\r\n            : 0,\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private async loadOrderSuggestions(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('order_suggestions')\r\n      .select(\r\n        `\r\n        current_stock,\r\n        minimum_stock,\r\n        suggested_quantity,\r\n        urgency_level,\r\n        products!inner(name, category)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .gt('expires_at', new Date().toISOString())\r\n      .order('urgency_level', { ascending: false })\r\n      .limit(10);\r\n\r\n    return {\r\n      items:\r\n        data?.map(item => ({\r\n          product_name: (item.products as any).name,\r\n          category: (item.products as any).category,\r\n          current_stock: item.current_stock,\r\n          minimum_stock: item.minimum_stock,\r\n          suggested_quantity: item.suggested_quantity,\r\n          urgency: item.urgency_level,\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private async loadActiveOrderLists(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('order_lists')\r\n      .select(\r\n        `\r\n        name,\r\n        status,\r\n        total_items,\r\n        total_value,\r\n        created_at,\r\n        suppliers(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .in('status', ['draft', 'active'])\r\n      .order('updated_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    return {\r\n      headers: ['Name', 'Supplier', 'Items', 'Value', 'Status', 'Created'],\r\n      rows:\r\n        data?.map(item => [\r\n          item.name,\r\n          (item.suppliers as any)?.name || 'No supplier',\r\n          item.total_items,\r\n          `€${item.total_value}`,\r\n          item.status,\r\n          new Date(item.created_at).toLocaleDateString(),\r\n        ]) || [],\r\n    };\r\n  }\r\n\r\n  private async loadPendingDeliveries(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        delivery_expected,\r\n        total_items,\r\n        total_value,\r\n        suppliers!inner(name),\r\n        order_lists!inner(name, practice_id)\r\n      `\r\n      )\r\n      .eq('order_lists.practice_id', practiceId)\r\n      .in('status', ['sent', 'confirmed'])\r\n      .order('delivery_expected', { ascending: true })\r\n      .limit(10);\r\n\r\n    return {\r\n      items:\r\n        data?.map(item => ({\r\n          supplier_name: (item.suppliers as any).name,\r\n          order_name: (item.order_lists as any).name,\r\n          expected_date: item.delivery_expected,\r\n          total_items: item.total_items,\r\n          total_value: item.total_value,\r\n          days_until_delivery: item.delivery_expected\r\n            ? Math.ceil(\r\n                (new Date(item.delivery_expected).getTime() - Date.now()) /\r\n                  (1000 * 60 * 60 * 24)\r\n              )\r\n            : null,\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  // Widget data loaders - MANAGER WIDGETS\r\n  private async loadStockTrends(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('stock_movements')\r\n      .select('created_at, movement_type, quantity_change')\r\n      .eq('practice_id', practiceId)\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: true });\r\n\r\n    // Group by week and movement type\r\n    const weeklyData: Record<string, Record<string, number>> = {};\r\n\r\n    data?.forEach(movement => {\r\n      const week = new Date(movement.created_at).toISOString().split('T')[0]; // Simplified to daily for now\r\n      if (!weeklyData[week]) weeklyData[week] = {};\r\n      if (!weeklyData[week][movement.movement_type])\r\n        weeklyData[week][movement.movement_type] = 0;\r\n      weeklyData[week][movement.movement_type] += Number(\r\n        movement.quantity_change\r\n      );\r\n    });\r\n\r\n    return {\r\n      chart_type: 'line',\r\n      labels: Object.keys(weeklyData).slice(-14), // Last 14 days\r\n      datasets: [\r\n        {\r\n          label: 'In',\r\n          data: Object.keys(weeklyData)\r\n            .slice(-14)\r\n            .map(week => weeklyData[week]['in'] || 0),\r\n          color: '#4CAF50',\r\n        },\r\n        {\r\n          label: 'Out',\r\n          data: Object.keys(weeklyData)\r\n            .slice(-14)\r\n            .map(week => Math.abs(weeklyData[week]['out'] || 0)),\r\n          color: '#F44336',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  private async loadSupplierPerformance(practiceId: string) {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_supplier_performance', {\r\n        practice_id_param: practiceId,\r\n      });\r\n\r\n      if (error) {\r\n        ServiceErrorHandler.handle(\r\n          error,\r\n          {\r\n            service: 'PracticeDashboardService',\r\n            operation: 'loadSupplierPerformance',\r\n            practiceId,\r\n          },\r\n          { rethrow: false, logLevel: 'warn' }\r\n        );\r\n      }\r\n\r\n      return {\r\n        headers: [\r\n          'Supplier',\r\n          'Integration',\r\n          'Orders',\r\n          'Avg Delivery',\r\n          'Failed',\r\n          'Last Sync',\r\n        ],\r\n        rows:\r\n          data?.map((item: any) => [\r\n            item.supplier_name,\r\n            item.integration_type,\r\n            item.total_orders,\r\n            item.avg_delivery_days ? `${item.avg_delivery_days} days` : 'N/A',\r\n            item.failed_orders,\r\n            item.last_sync_at\r\n              ? new Date(item.last_sync_at).toLocaleDateString()\r\n              : 'Never',\r\n          ]) || [],\r\n      };\r\n    } catch (error) {\r\n      ServiceErrorHandler.handle(\r\n        error,\r\n        {\r\n          service: 'PracticeDashboardService',\r\n          operation: 'loadSupplierPerformance',\r\n          practiceId,\r\n        },\r\n        { rethrow: false, logLevel: 'error' }\r\n      );\r\n\r\n      // Graceful empty state with headers\r\n      return {\r\n        headers: [\r\n          'Supplier',\r\n          'Integration',\r\n          'Orders',\r\n          'Avg Delivery',\r\n          'Failed',\r\n          'Last Sync',\r\n        ],\r\n        rows: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  private async loadCostAnalysis(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('product_batches')\r\n      .select(\r\n        `\r\n        total_cost,\r\n        products!inner(category)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString()\r\n      );\r\n\r\n    const categoryTotals: Record<string, number> = {};\r\n    data?.forEach(batch => {\r\n      const category = (batch.products as any).category || 'Unknown';\r\n      categoryTotals[category] =\r\n        (categoryTotals[category] || 0) + Number(batch.total_cost || 0);\r\n    });\r\n\r\n    return {\r\n      chart_type: 'doughnut',\r\n      labels: Object.keys(categoryTotals),\r\n      data: Object.values(categoryTotals),\r\n      total: Object.values(categoryTotals).reduce((sum, val) => sum + val, 0),\r\n    };\r\n  }\r\n\r\n  private async loadErrorAlerts(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('activity_log')\r\n      .select('activity_type, description, created_at')\r\n      .eq('practice_id', practiceId)\r\n      .ilike('activity_type', '%error%')\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    return {\r\n      alerts:\r\n        data?.map(alert => ({\r\n          type: 'error' as const,\r\n          title: alert.activity_type,\r\n          message: alert.description,\r\n          timestamp: alert.created_at,\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private async loadPendingOrdersMetric(practiceId: string) {\r\n    const { data, count } = await supabase\r\n      .from('order_lists')\r\n      .select('total_value', { count: 'exact' })\r\n      .eq('practice_id', practiceId)\r\n      .in('status', ['draft', 'active']);\r\n\r\n    const totalValue =\r\n      data?.reduce((sum, order) => sum + Number(order.total_value || 0), 0) ||\r\n      0;\r\n\r\n    return {\r\n      count: count || 0,\r\n      total_value: totalValue,\r\n      trend: 'stable', // Could be calculated from historical data\r\n    };\r\n  }\r\n\r\n  // Widget data loaders - OWNER WIDGETS\r\n  private async loadInventoryValue(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('stock_levels')\r\n      .select(\r\n        `\r\n        current_quantity,\r\n        products!inner(price, category)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId);\r\n\r\n    let totalValue = 0;\r\n    const categoryValues: Record<string, number> = {};\r\n    let totalProducts = 0;\r\n\r\n    data?.forEach(item => {\r\n      const price = Number((item.products as any).price || 0);\r\n      const quantity = Number(item.current_quantity || 0);\r\n      const value = price * quantity;\r\n\r\n      totalValue += value;\r\n      totalProducts++;\r\n\r\n      const category = (item.products as any).category || 'Unknown';\r\n      categoryValues[category] = (categoryValues[category] || 0) + value;\r\n    });\r\n\r\n    return {\r\n      total_value: totalValue,\r\n      total_products: totalProducts,\r\n      category_breakdown: categoryValues,\r\n      average_value_per_product:\r\n        totalProducts > 0 ? totalValue / totalProducts : 0,\r\n    };\r\n  }\r\n\r\n  private async loadBatchCompliance(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('product_batches')\r\n      .select('expiry_date, quality_check_passed, status')\r\n      .eq('practice_id', practiceId)\r\n      .eq('status', 'active');\r\n\r\n    const now = new Date();\r\n    const thirtyDaysFromNow = new Date(\r\n      now.getTime() + 30 * 24 * 60 * 60 * 1000\r\n    );\r\n\r\n    let totalBatches = 0;\r\n    let expiringSoon = 0;\r\n    let expired = 0;\r\n    let qualityIssues = 0;\r\n\r\n    data?.forEach(batch => {\r\n      totalBatches++;\r\n\r\n      const expiryDate = new Date(batch.expiry_date);\r\n      if (expiryDate <= now) expired++;\r\n      else if (expiryDate <= thirtyDaysFromNow) expiringSoon++;\r\n\r\n      if (batch.quality_check_passed === false) qualityIssues++;\r\n    });\r\n\r\n    return {\r\n      total_batches: totalBatches,\r\n      expiring_soon: expiringSoon,\r\n      expired: expired,\r\n      quality_issues: qualityIssues,\r\n      compliance_rate:\r\n        totalBatches > 0\r\n          ? ((totalBatches - expired - qualityIssues) / totalBatches) * 100\r\n          : 100,\r\n    };\r\n  }\r\n\r\n  private async loadSupplierContracts() {\r\n    const { data } = await supabase\r\n      .from('suppliers')\r\n      .select(\r\n        `\r\n        name,\r\n        integration_type,\r\n        order_method,\r\n        last_sync_at,\r\n        minimum_order_amount,\r\n        payment_terms,\r\n        supplier_products(id)\r\n      `\r\n      )\r\n      .eq('is_active', true)\r\n      .limit(10);\r\n\r\n    return {\r\n      headers: [\r\n        'Supplier',\r\n        'Type',\r\n        'Method',\r\n        'Products',\r\n        'Min Order',\r\n        'Payment Terms',\r\n        'Last Sync',\r\n      ],\r\n      rows:\r\n        data?.map(supplier => [\r\n          supplier.name,\r\n          supplier.integration_type,\r\n          supplier.order_method,\r\n          (supplier.supplier_products as any[])?.length || 0,\r\n          `€${supplier.minimum_order_amount || 0}`,\r\n          `${supplier.payment_terms || 30} days`,\r\n          supplier.last_sync_at\r\n            ? new Date(supplier.last_sync_at).toLocaleDateString()\r\n            : 'Never',\r\n        ]) || [],\r\n    };\r\n  }\r\n\r\n  private async loadStockRotation(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('product_batches')\r\n      .select(\r\n        `\r\n        created_at,\r\n        received_date,\r\n        products!inner(category)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .eq('status', 'depleted')\r\n      .gte(\r\n        'created_at',\r\n        new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString()\r\n      );\r\n\r\n    const categoryRotation: Record<\r\n      string,\r\n      { total_days: number; count: number }\r\n    > = {};\r\n\r\n    data?.forEach(batch => {\r\n      const category = (batch.products as any).category || 'Unknown';\r\n      const shelfLifeDays = Math.ceil(\r\n        (new Date(batch.created_at).getTime() -\r\n          new Date(batch.received_date).getTime()) /\r\n          (1000 * 60 * 60 * 24)\r\n      );\r\n\r\n      if (!categoryRotation[category]) {\r\n        categoryRotation[category] = { total_days: 0, count: 0 };\r\n      }\r\n\r\n      categoryRotation[category].total_days += shelfLifeDays;\r\n      categoryRotation[category].count++;\r\n    });\r\n\r\n    return {\r\n      chart_type: 'bar',\r\n      labels: Object.keys(categoryRotation),\r\n      data: Object.values(categoryRotation).map(cat =>\r\n        cat.count > 0 ? Math.round(cat.total_days / cat.count) : 0\r\n      ),\r\n      title: 'Average Shelf Life by Category (days)',\r\n    };\r\n  }\r\n\r\n  private async loadAuditNotifications(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('counting_sessions')\r\n      .select(\r\n        `\r\n        name,\r\n        status,\r\n        total_products_counted,\r\n        products_with_variance,\r\n        total_variance_value,\r\n        completed_at,\r\n        practice_locations!inner(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .eq('status', 'completed')\r\n      .gte(\r\n        'completed_at',\r\n        new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\r\n      )\r\n      .order('completed_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    return {\r\n      items:\r\n        data?.map(session => ({\r\n          session_name: session.name,\r\n          location: (session.practice_locations as any).name,\r\n          products_counted: session.total_products_counted,\r\n          variances: session.products_with_variance,\r\n          variance_value: session.total_variance_value,\r\n          completed_at: session.completed_at,\r\n          status: session.products_with_variance > 0 ? 'warning' : 'success',\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private getWidgetTitle(widgetId: string): string {\r\n    const titles: Record<string, string> = {\r\n      'low-stock-alerts': t('dashboard.widgets.lowStockAlerts'),\r\n      'expiring-products': t('dashboard.widgets.expiringProducts'),\r\n      'order-suggestions': t('dashboard.widgets.orderSuggestions'),\r\n      'active-order-lists': t('dashboard.widgets.activeOrderLists'),\r\n      'pending-deliveries': t('dashboard.widgets.pendingDeliveries'),\r\n      'stock-trends': t('dashboard.widgets.stockTrends'),\r\n      'supplier-performance': t('dashboard.widgets.supplierPerformance'),\r\n      'cost-analysis': t('dashboard.widgets.costAnalysis'),\r\n      'error-alerts': t('dashboard.widgets.errorAlerts'),\r\n      'pending-orders': t('dashboard.widgets.pendingOrders'),\r\n      'inventory-value': t('dashboard.widgets.inventoryValue'),\r\n      'batch-compliance': t('dashboard.widgets.batchCompliance'),\r\n      'supplier-contracts': t('dashboard.widgets.supplierContracts'),\r\n      'stock-rotation': t('dashboard.widgets.stockRotation'),\r\n      'audit-notifications': t('dashboard.widgets.auditNotifications'),\r\n    };\r\n\r\n    return titles[widgetId] || widgetId;\r\n  }\r\n\r\n  private getQuickActions(role: UserRole) {\r\n    const quickActions = roleDashboardConfig.getQuickActions(role);\r\n\r\n    return quickActions.map(action => ({\r\n      id: action.id,\r\n      label: t(action.labelKey),\r\n      icon: action.icon,\r\n      route: action.route,\r\n      color: action.color,\r\n      type: action.type,\r\n    }));\r\n  }\r\n\r\n  private async loadAlerts(practiceId: string, role: UserRole) {\r\n    const alerts = [];\r\n\r\n    try {\r\n      // Low stock alert for all roles\r\n      const { data: lowStock } = await supabase\r\n        .from('stock_levels')\r\n        .select('id')\r\n        .eq('practice_id', practiceId)\r\n        .filter('current_quantity', 'lte', 'minimum_quantity')\r\n        .limit(1);\r\n\r\n      if (lowStock && lowStock.length > 0) {\r\n        alerts.push({\r\n          id: 'low-stock',\r\n          type: 'warning' as const,\r\n          message: t('dashboard.alerts.lowStockMessage'),\r\n          action: '/inventory/levels',\r\n          actionLabel: t('dashboard.alerts.viewStock'),\r\n        });\r\n      }\r\n\r\n      // Role-specific alerts\r\n      if (role === 'manager' || role === 'owner') {\r\n        const { data: failedOrders } = await supabase\r\n          .from('supplier_orders')\r\n          .select('id')\r\n          .eq('status', 'failed')\r\n          .limit(1);\r\n\r\n        if (failedOrders && failedOrders.length > 0) {\r\n          alerts.push({\r\n            id: 'failed-orders',\r\n            type: 'error' as const,\r\n            message: t('dashboard.alerts.failedOrdersMessage'),\r\n            action: '/orders',\r\n            actionLabel: t('dashboard.alerts.viewOrders'),\r\n          });\r\n        }\r\n      }\r\n\r\n      if (role === 'owner') {\r\n        const { data: expiredBatches } = await supabase\r\n          .from('product_batches')\r\n          .select('id')\r\n          .eq('practice_id', practiceId)\r\n          .lt('expiry_date', new Date().toISOString())\r\n          .eq('status', 'active')\r\n          .limit(1);\r\n\r\n        if (expiredBatches && expiredBatches.length > 0) {\r\n          alerts.push({\r\n            id: 'expired-batches',\r\n            type: 'error' as const,\r\n            message: t('dashboard.alerts.expiredBatchesMessage'),\r\n            action: '/inventory/batches',\r\n            actionLabel: t('dashboard.alerts.viewBatches'),\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      dashboardLogger.error('Error loading alerts:', error);\r\n    }\r\n\r\n    return alerts;\r\n  }\r\n\r\n  // Additional widget loaders for new roles\r\n\r\n  // LOGISTICS role widget loaders\r\n  private async loadStockMovements(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('stock_movements')\r\n      .select(\r\n        `\r\n        movement_type,\r\n        quantity_change,\r\n        reason,\r\n        created_at,\r\n        products!inner(name),\r\n        practice_locations!inner(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(10);\r\n\r\n    return {\r\n      items:\r\n        data?.map(movement => ({\r\n          product_name: (movement.products as any).name,\r\n          location: (movement.practice_locations as any).name,\r\n          movement_type: movement.movement_type,\r\n          quantity_change: movement.quantity_change,\r\n          reason: movement.reason || 'Manual adjustment',\r\n          timestamp: movement.created_at,\r\n        })) || [],\r\n    };\r\n  }\r\n\r\n  private async loadLocationOverview(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('stock_levels')\r\n      .select(\r\n        `\r\n        current_quantity,\r\n        practice_locations!inner(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId);\r\n\r\n    const locationTotals: Record<string, number> = {};\r\n    data?.forEach(item => {\r\n      const location = (item.practice_locations as any).name;\r\n      locationTotals[location] =\r\n        (locationTotals[location] || 0) + Number(item.current_quantity);\r\n    });\r\n\r\n    return {\r\n      chart_type: 'doughnut',\r\n      labels: Object.keys(locationTotals),\r\n      data: Object.values(locationTotals),\r\n      total: Object.values(locationTotals).reduce((sum, val) => sum + val, 0),\r\n    };\r\n  }\r\n\r\n  private async loadTransportStatus(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        status,\r\n        order_lists!inner(practice_id)\r\n      `\r\n      )\r\n      .eq('order_lists.practice_id', practiceId)\r\n      .in('status', ['sent', 'in_transit', 'delivered']);\r\n\r\n    const statusCounts =\r\n      data?.reduce((acc: Record<string, number>, order) => {\r\n        acc[order.status] = (acc[order.status] || 0) + 1;\r\n        return acc;\r\n      }, {}) || {};\r\n\r\n    return {\r\n      in_transit: statusCounts.in_transit || 0,\r\n      delivered_today: statusCounts.delivered || 0,\r\n      pending_delivery: statusCounts.sent || 0,\r\n      total_active: Object.values(statusCounts).reduce(\r\n        (sum: number, val) => sum + val,\r\n        0\r\n      ),\r\n    };\r\n  }\r\n\r\n  // MEMBER role widget loaders\r\n  private async loadStockOverview(practiceId: string) {\r\n    const { data } = await supabase\r\n      .from('stock_levels')\r\n      .select('current_quantity, minimum_quantity')\r\n      .eq('practice_id', practiceId);\r\n\r\n    const totalItems = data?.length || 0;\r\n    const lowStockItems =\r\n      data?.filter(\r\n        item => item.current_quantity <= (item.minimum_quantity || 0)\r\n      ).length || 0;\r\n    const outOfStockItems =\r\n      data?.filter(item => item.current_quantity <= 0).length || 0;\r\n\r\n    return {\r\n      total_items: totalItems,\r\n      low_stock_items: lowStockItems,\r\n      out_of_stock_items: outOfStockItems,\r\n      healthy_stock: totalItems - lowStockItems - outOfStockItems,\r\n    };\r\n  }\r\n\r\n  private async loadMyTasks(practiceId: string) {\r\n    // Deze zou gekoppeld kunnen worden aan een task systeem\r\n    // Voor nu simuleren we enkele basis taken\r\n    const tasks = [\r\n      {\r\n        id: 'count-location-1',\r\n        title: 'Voorraad tellen locatie 1',\r\n        priority: 'high',\r\n        due_date: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(),\r\n        type: 'counting',\r\n      },\r\n      {\r\n        id: 'receive-order-123',\r\n        title: 'Bestelling #123 ontvangen',\r\n        priority: 'medium',\r\n        due_date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        type: 'receiving',\r\n      },\r\n    ];\r\n\r\n    return {\r\n      items: tasks.map(task => ({\r\n        ...task,\r\n        days_until_due: Math.ceil(\r\n          (new Date(task.due_date).getTime() - Date.now()) /\r\n            (1000 * 60 * 60 * 24)\r\n        ),\r\n      })),\r\n    };\r\n  }\r\n\r\n  // GUEST role widget loaders\r\n  private async loadPublicInfo(practiceId: string) {\r\n    return {\r\n      practice_name: 'Demo Practice',\r\n      status: 'Active',\r\n      last_updated: new Date().toISOString(),\r\n      public_info: 'Welcome to our inventory system',\r\n    };\r\n  }\r\n\r\n  // PLATFORM_OWNER role widget loaders\r\n  private async loadSystemOverview() {\r\n    // Deze zouden echte platform metrics moeten zijn\r\n    return {\r\n      total_practices: 150,\r\n      active_users: 1200,\r\n      total_transactions: 50000,\r\n      system_uptime: 99.9,\r\n      storage_used: '85%',\r\n      api_calls_today: 25000,\r\n    };\r\n  }\r\n\r\n  private async loadUserAnalytics() {\r\n    // Simulatie van user analytics data\r\n    const lastWeek = Array.from({ length: 7 }, (_, i) => {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - (6 - i));\r\n      return date.toISOString().split('T')[0];\r\n    });\r\n\r\n    return {\r\n      chart_type: 'line',\r\n      labels: lastWeek,\r\n      datasets: [\r\n        {\r\n          label: 'Active Users',\r\n          data: [850, 920, 1100, 980, 1200, 1150, 1180],\r\n          color: '#2196F3',\r\n        },\r\n        {\r\n          label: 'New Registrations',\r\n          data: [12, 18, 25, 15, 30, 22, 28],\r\n          color: '#4CAF50',\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  private async loadPlatformHealth() {\r\n    // Platform health check alerts\r\n    const alerts = [\r\n      {\r\n        type: 'success' as const,\r\n        title: 'System Status',\r\n        message: 'All systems operational',\r\n        timestamp: new Date().toISOString(),\r\n      },\r\n      {\r\n        type: 'warning' as const,\r\n        title: 'Database Performance',\r\n        message: 'Slightly elevated response times detected',\r\n        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\r\n      },\r\n    ];\r\n\r\n    return { alerts };\r\n  }\r\n\r\n  private async loadSubscriptionStatus() {\r\n    // Platform subscription overview\r\n    const subscriptions = [\r\n      {\r\n        practice_name: 'Practice A',\r\n        plan: 'Professional',\r\n        status: 'Active',\r\n        billing_period: 'Monthly',\r\n        amount: '€99',\r\n        next_billing: '2024-02-15',\r\n      },\r\n      {\r\n        practice_name: 'Practice B',\r\n        plan: 'Enterprise',\r\n        status: 'Active',\r\n        billing_period: 'Yearly',\r\n        amount: '€999',\r\n        next_billing: '2024-05-20',\r\n      },\r\n    ];\r\n\r\n    return {\r\n      headers: [\r\n        'Practice',\r\n        'Plan',\r\n        'Status',\r\n        'Billing',\r\n        'Amount',\r\n        'Next Billing',\r\n      ],\r\n      rows: subscriptions.map(sub => [\r\n        sub.practice_name,\r\n        sub.plan,\r\n        sub.status,\r\n        sub.billing_period,\r\n        sub.amount,\r\n        sub.next_billing,\r\n      ]),\r\n    };\r\n  }\r\n}\r\n\r\nexport const practiceDashboardService = new PracticeDashboardService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\dashboard\\role-config.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PracticeDashboardData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PlatformDashboardData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { t } from '@/utils/i18n-service';\nimport type { UserRole } from '@/types/permissions';\nimport type { PracticeDashboardData } from './practice-dashboard';\nimport type { PlatformDashboardData } from './platform-dashboard';\n\nexport interface WidgetConfig {\n  id: string;\n  type: 'metric' | 'chart' | 'list' | 'alert' | 'table';\n  size: 'small' | 'medium' | 'large';\n  position: number;\n  visible: boolean;\n  titleKey: string;\n  permissions?: string[];\n}\n\nexport interface RoleDashboardDefinition {\n  role: UserRole;\n  titleKey: string;\n  subtitleKey: string;\n  icon: string;\n  color: string;\n  widgets: WidgetConfig[];\n  quickActions: QuickActionConfig[];\n}\n\nexport type RoleDashboardMap = Record<UserRole, RoleDashboardDefinition>;\n\nexport interface QuickActionConfig {\n  id: string;\n  labelKey: string;\n  icon: string;\n  route: string;\n  color: string;\n  type: string;\n  permissions?: string[];\n}\n\n/**\n * Centrale configuratie voor alle dashboard widgets en quick actions per rol\n */\nclass RoleDashboardConfig {\n  private configs: RoleDashboardMap = {\n    // ASSISTANT - Focus op dagelijkse voorraadtaken\n    assistant: {\n      role: 'assistant',\n      titleKey: 'dashboard.roles.assistant',\n      subtitleKey: 'dashboard.roles.assistantDescription',\n      icon: 'medical_services',\n      color: 'blue',\n      widgets: [\n        {\n          id: 'low-stock-alerts',\n          type: 'list',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.lowStockAlerts',\n        },\n        {\n          id: 'expiring-products',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.expiringProducts',\n        },\n        {\n          id: 'order-suggestions',\n          type: 'list',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.orderSuggestions',\n        },\n        {\n          id: 'active-order-lists',\n          type: 'table',\n          size: 'large',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.activeOrderLists',\n        },\n        {\n          id: 'pending-deliveries',\n          type: 'list',\n          size: 'medium',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingDeliveries',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'create-order',\n          labelKey: 'dashboard.quickActions.createOrder',\n          icon: 'add_shopping_cart',\n          route: '/orders/create',\n          color: 'success',\n          type: 'create',\n        },\n        {\n          id: 'count-stock',\n          labelKey: 'dashboard.quickActions.countStock',\n          icon: 'fact_check',\n          route: '/inventory/counting',\n          color: 'warning',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // MANAGER - Focus op analytics en beheer\n    manager: {\n      role: 'manager',\n      titleKey: 'dashboard.roles.manager',\n      subtitleKey: 'dashboard.roles.managerDescription',\n      icon: 'analytics',\n      color: 'purple',\n      widgets: [\n        {\n          id: 'stock-trends',\n          type: 'chart',\n          size: 'large',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockTrends',\n        },\n        {\n          id: 'supplier-performance',\n          type: 'table',\n          size: 'large',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.supplierPerformance',\n        },\n        {\n          id: 'cost-analysis',\n          type: 'chart',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.costAnalysis',\n        },\n        {\n          id: 'error-alerts',\n          type: 'alert',\n          size: 'medium',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.errorAlerts',\n        },\n        {\n          id: 'pending-orders',\n          type: 'metric',\n          size: 'small',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingOrders',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'view-analytics',\n          labelKey: 'dashboard.quickActions.viewAnalytics',\n          icon: 'analytics',\n          route: '/analytics',\n          color: 'purple',\n          type: 'analyze',\n        },\n        {\n          id: 'manage-suppliers',\n          labelKey: 'dashboard.quickActions.manageSuppliers',\n          icon: 'business',\n          route: '/suppliers',\n          color: 'indigo',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // OWNER - Focus op financiëen en compliance\n    owner: {\n      role: 'owner',\n      titleKey: 'dashboard.roles.owner',\n      subtitleKey: 'dashboard.roles.ownerDescription',\n      icon: 'admin_panel_settings',\n      color: 'green',\n      widgets: [\n        {\n          id: 'inventory-value',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.inventoryValue',\n        },\n        {\n          id: 'batch-compliance',\n          type: 'metric',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.batchCompliance',\n        },\n        {\n          id: 'supplier-contracts',\n          type: 'table',\n          size: 'large',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.supplierContracts',\n        },\n        {\n          id: 'stock-rotation',\n          type: 'chart',\n          size: 'medium',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockRotation',\n        },\n        {\n          id: 'audit-notifications',\n          type: 'list',\n          size: 'medium',\n          position: 5,\n          visible: true,\n          titleKey: 'dashboard.widgets.auditNotifications',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'financial-reports',\n          labelKey: 'dashboard.quickActions.financialReports',\n          icon: 'account_balance',\n          route: '/reports/financial',\n          color: 'green',\n          type: 'analyze',\n        },\n        {\n          id: 'manage-users',\n          labelKey: 'dashboard.quickActions.manageUsers',\n          icon: 'people',\n          route: '/admin/users',\n          color: 'red',\n          type: 'settings',\n        },\n      ],\n    },\n\n    // LOGISTICS - Focus op bewegingen en leveringen\n    logistics: {\n      role: 'logistics',\n      titleKey: 'dashboard.roles.logistics',\n      subtitleKey: 'dashboard.roles.logisticsDescription',\n      icon: 'local_shipping',\n      color: 'orange',\n      widgets: [\n        {\n          id: 'pending-deliveries',\n          type: 'list',\n          size: 'large',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.pendingDeliveries',\n        },\n        {\n          id: 'stock-movements',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockMovements',\n        },\n        {\n          id: 'location-overview',\n          type: 'chart',\n          size: 'medium',\n          position: 3,\n          visible: true,\n          titleKey: 'dashboard.widgets.locationOverview',\n        },\n        {\n          id: 'transport-status',\n          type: 'metric',\n          size: 'small',\n          position: 4,\n          visible: true,\n          titleKey: 'dashboard.widgets.transportStatus',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-movements',\n          labelKey: 'dashboard.quickActions.viewMovements',\n          icon: 'move_up',\n          route: '/inventory/movements',\n          color: 'info',\n          type: 'view',\n        },\n        {\n          id: 'manage-locations',\n          labelKey: 'dashboard.quickActions.manageLocations',\n          icon: 'location_on',\n          route: '/inventory/locations',\n          color: 'orange',\n          type: 'manage',\n        },\n      ],\n    },\n\n    // MEMBER - Beperkte toegang\n    member: {\n      role: 'member',\n      titleKey: 'dashboard.roles.member',\n      subtitleKey: 'dashboard.roles.memberDescription',\n      icon: 'person',\n      color: 'grey',\n      widgets: [\n        {\n          id: 'stock-overview',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.stockOverview',\n        },\n        {\n          id: 'my-tasks',\n          type: 'list',\n          size: 'medium',\n          position: 2,\n          visible: true,\n          titleKey: 'dashboard.widgets.myTasks',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'scan-product',\n          labelKey: 'dashboard.quickActions.scanProduct',\n          icon: 'qr_code_scanner',\n          route: '/scan',\n          color: 'primary',\n          type: 'scan',\n        },\n        {\n          id: 'view-stock',\n          labelKey: 'dashboard.quickActions.viewStock',\n          icon: 'inventory',\n          route: '/inventory/levels',\n          color: 'info',\n          type: 'view',\n        },\n      ],\n    },\n\n    // GUEST - Zeer beperkte toegang\n    guest: {\n      role: 'guest',\n      titleKey: 'dashboard.roles.guest',\n      subtitleKey: 'dashboard.roles.guestDescription',\n      icon: 'visibility',\n      color: 'grey-5',\n      widgets: [\n        {\n          id: 'public-info',\n          type: 'metric',\n          size: 'medium',\n          position: 1,\n          visible: true,\n          titleKey: 'dashboard.widgets.publicInfo',\n        },\n      ],\n      quickActions: [\n        {\n          id: 'view-info',\n          labelKey: 'dashboard.quickActions.viewInfo',\n          icon: 'info',\n          route: '/info',\n          color: 'info',\n          type: 'view',\n        },\n      ],\n    },\n\n    // PLATFORM_OWNER - Geen widgets in normale dashboard, alleen redirect naar platform\n    platform_owner: {\n      role: 'platform_owner',\n      titleKey: 'dashboard.roles.platformOwner',\n      subtitleKey: 'dashboard.roles.platformOwnerDescription',\n      icon: 'settings',\n      color: 'deep-purple',\n      widgets: [], // Geen widgets - platform owners moeten naar /platform\n      quickActions: [\n        {\n          id: 'platform-dashboard',\n          labelKey: 'dashboard.quickActions.platformDashboard',\n          icon: 'dashboard',\n          route: '/platform',\n          color: 'deep-purple',\n          type: 'view',\n        },\n      ],\n    },\n  };\n\n  /**\n   * Krijg de volledige dashboard configuratie voor een rol\n   */\n  getRoleConfig(role: UserRole): RoleDashboardDefinition {\n    const config = this.configs[role];\n    if (!config) {\n      return this.configs.member;\n    }\n\n    return config;\n  }\n\n  /**\n   * Krijg de widgets voor een specifieke rol\n   */\n  getWidgetIds(role: UserRole): string[] {\n    const config = this.configs[role];\n    return config?.widgets.map(w => w.id) || [];\n  }\n\n  /**\n   * Krijg quick actions voor een specifieke rol\n   */\n  getQuickActions(role: UserRole): QuickActionConfig[] {\n    const config = this.configs[role];\n    return config?.quickActions || [];\n  }\n\n  /**\n   * Krijg rol opties voor demo switcher\n   */\n  getDemoRoleOptions() {\n    // Practice rollen voor normale gebruikers\n    const practiceRoles: UserRole[] = ['assistant', 'manager', 'owner'];\n\n    // In development mode ook platform_owner tonen voor testing\n    const isDevelopment =\n      process.env.NODE_ENV === 'development' ||\n      window.location.hostname === 'localhost';\n    const demoRoles = isDevelopment\n      ? [...practiceRoles, 'platform_owner']\n      : practiceRoles;\n\n    return demoRoles.map(role => ({\n      label: t(this.configs[role].titleKey),\n      value: role,\n      icon: this.configs[role].icon,\n      color: this.configs[role].color,\n    }));\n  }\n\n  /**\n   * Krijg alle beschikbare widget types\n   */\n  getAllWidgetTypes(): string[] {\n    const types = new Set<string>();\n    Object.values(this.configs).forEach(config => {\n      config.widgets.forEach(widget => {\n        types.add(widget.type);\n      });\n    });\n    return Array.from(types);\n  }\n\n  /**\n   * Check of een rol toegang heeft tot een specifieke widget\n   */\n  hasWidgetAccess(role: UserRole, widgetId: string): boolean {\n    const config = this.configs[role];\n    return config?.widgets.some(w => w.id === widgetId && w.visible) || false;\n  }\n}\n\nexport const roleDashboardConfig = new RoleDashboardConfig();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\integration\\inventoryOrderIntegration.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalErrors' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 301,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 301,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10860, 10863], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10860, 10863], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 323,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 323,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10885, 10888], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10885, 10888], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 324,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 324,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10917, 10920], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10917, 10920], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 325,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 325,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10943, 10946], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10943, 10946], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 326,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 326,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10974, 10977], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10974, 10977], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 327,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 327,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11004, 11007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11004, 11007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 367,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 367,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12310, 12313], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12310, 12313], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12764, 12767], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12764, 12767], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 406,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 406,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13266, 13269], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13266, 13269], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { centralOrderService } from '@/services/orderOrchestration/centralOrderService';\r\nimport { inventoryAutomationService } from '@/services/inventory/automationService';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { orderLogger } from '@/utils/logger';\r\n\r\n/**\r\n * Integration Service for Inventory & Order Management\r\n *\r\n * This service provides high-level integration between:\r\n * - Inventory automation\r\n * - Order orchestration\r\n * - Real-time notifications\r\n * - Dashboard updates\r\n */\r\nexport class InventoryOrderIntegrationService {\r\n  /**\r\n   * Initialize automated inventory management for a practice\r\n   */\r\n  async initializeAutomation(practiceId: string): Promise<{\r\n    lowStockItems: number;\r\n    automationEnabled: boolean;\r\n    schedulesCreated: number;\r\n    notificationsEnabled: boolean;\r\n  }> {\r\n    try {\r\n      orderLogger.info(`Initializing automation for practice ${practiceId}`);\r\n\r\n      // 1. Run initial inventory health check\r\n      const healthCheck =\r\n        await inventoryAutomationService.runInventoryHealthCheck(practiceId);\r\n\r\n      // 2. Check if automation is already enabled\r\n      const { data: settings } = await supabase\r\n        .from('practice_inventory_settings')\r\n        .select('auto_reorder_enabled')\r\n        .eq('practice_id', practiceId)\r\n        .single();\r\n\r\n      let automationEnabled = settings?.auto_reorder_enabled || false;\r\n\r\n      // 3. Enable automation if not already enabled and there are actionable items\r\n      if (!automationEnabled && healthCheck.lowStockCount > 0) {\r\n        await supabase.from('practice_inventory_settings').upsert({\r\n          practice_id: practiceId,\r\n          auto_reorder_enabled: true,\r\n          low_stock_threshold_percent: 20,\r\n          notify_on_low_stock: true,\r\n          notify_on_stock_out: true,\r\n        });\r\n        automationEnabled = true;\r\n      }\r\n\r\n      // 4. Create default automation schedule if none exists\r\n      const { data: existingSchedules } = await supabase\r\n        .from('automation_schedules')\r\n        .select('id')\r\n        .eq('practice_id', practiceId);\r\n\r\n      let schedulesCreated = 0;\r\n      if (!existingSchedules?.length && automationEnabled) {\r\n        await supabase.from('automation_schedules').insert({\r\n          practice_id: practiceId,\r\n          name: 'Daily Low Stock Check',\r\n          description:\r\n            'Automatically check for low stock items and create orders',\r\n          schedule_type: 'daily',\r\n          schedule_time: '09:00',\r\n          auto_approve: false,\r\n          max_order_value: 1000,\r\n          min_urgency_level: 'medium',\r\n        });\r\n        schedulesCreated = 1;\r\n      }\r\n\r\n      // 5. Create initial notifications for critical items\r\n      const criticalItems = await inventoryAutomationService.checkLowStockItems(\r\n        practiceId\r\n      );\r\n      const urgentItems = criticalItems.filter(\r\n        item => item.urgencyLevel === 'critical'\r\n      );\r\n\r\n      if (urgentItems.length > 0) {\r\n        await supabase.from('notifications').insert({\r\n          practice_id: practiceId,\r\n          title: 'Kritieke voorraadtekorten gedetecteerd',\r\n          message: `${urgentItems.length} producten zijn uitverkocht en hebben directe aandacht nodig`,\r\n          category: 'stock_alert',\r\n          priority: 'urgent',\r\n          action_url: '/inventory/levels',\r\n          action_label: 'Bekijk voorraad',\r\n        });\r\n      }\r\n\r\n      return {\r\n        lowStockItems: healthCheck.lowStockCount,\r\n        automationEnabled,\r\n        schedulesCreated,\r\n        notificationsEnabled: true,\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error initializing automation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process a complete reorder workflow\r\n   */\r\n  async processCompleteReorderWorkflow(\r\n    practiceId: string,\r\n    options: {\r\n      locationId?: string;\r\n      autoApprove?: boolean;\r\n      maxOrderValue?: number;\r\n      urgencyFilter?: 'low' | 'medium' | 'high' | 'critical';\r\n    } = {}\r\n  ): Promise<{\r\n    itemsAnalyzed: number;\r\n    itemsToOrder: number;\r\n    ordersCreated: number;\r\n    totalValue: number;\r\n    status: 'success' | 'partial' | 'failed';\r\n    details: string[];\r\n  }> {\r\n    try {\r\n      orderLogger.info(\r\n        `Processing complete reorder workflow for practice ${practiceId}`\r\n      );\r\n\r\n      // 1. Generate reorder suggestions\r\n      const suggestions =\r\n        await inventoryAutomationService.generateReorderSuggestions(practiceId);\r\n\r\n      // 2. Apply filters\r\n      let filteredSuggestions = suggestions;\r\n\r\n      if (options.locationId) {\r\n        filteredSuggestions = filteredSuggestions.filter(\r\n          s => s.locationId === options.locationId\r\n        );\r\n      }\r\n\r\n      if (options.urgencyFilter) {\r\n        const urgencyLevels = ['low', 'medium', 'high', 'critical'];\r\n        const minIndex = urgencyLevels.indexOf(options.urgencyFilter);\r\n        filteredSuggestions = filteredSuggestions.filter(\r\n          s => urgencyLevels.indexOf(s.urgencyLevel) >= minIndex\r\n        );\r\n      }\r\n\r\n      if (filteredSuggestions.length === 0) {\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: 0,\r\n          ordersCreated: 0,\r\n          totalValue: 0,\r\n          status: 'success',\r\n          details: ['No items need reordering with current filters'],\r\n        };\r\n      }\r\n\r\n      // 3. Calculate total value and check approval requirements\r\n      const totalValue = filteredSuggestions.reduce(\r\n        (sum, item) => sum + item.suggestedQuantity * item.estimatedCost,\r\n        0\r\n      );\r\n\r\n      const needsApproval =\r\n        !options.autoApprove ||\r\n        (options.maxOrderValue && totalValue > options.maxOrderValue);\r\n\r\n      // 4. Transform suggestions to reorder format\r\n      const reorderItems = filteredSuggestions.map(suggestion => ({\r\n        product_id: suggestion.productId,\r\n        product_name: suggestion.productName,\r\n        sku: suggestion.sku,\r\n        location_id: suggestion.locationId,\r\n        location_name: suggestion.locationName,\r\n        current_stock: suggestion.currentQuantity,\r\n        minimum_stock: suggestion.minimumQuantity,\r\n        reorder_point: suggestion.reorderPoint,\r\n        calculated_order_quantity: suggestion.suggestedQuantity,\r\n        unit_price: suggestion.estimatedCost,\r\n        preferred_supplier_id: suggestion.preferredSupplierId,\r\n        preferred_supplier_name: suggestion.supplierName,\r\n        urgency_level: suggestion.urgencyLevel,\r\n        estimated_cost: suggestion.estimatedCost * suggestion.suggestedQuantity,\r\n        lead_time_days: suggestion.leadTimeDays,\r\n        practice_id: practiceId,\r\n        last_ordered_at: null,\r\n        stock_trend: 'decreasing',\r\n      }));\r\n\r\n      // 5. Process the order\r\n      if (needsApproval) {\r\n        // Create draft order for approval\r\n        const result = await centralOrderService.createMultiSupplierOrder(\r\n          reorderItems\r\n        );\r\n\r\n        // Create notification for approval\r\n        await supabase.from('notifications').insert({\r\n          practice_id: practiceId,\r\n          title: 'Bestelling wacht op goedkeuring',\r\n          message: `Automatische bestelling van €${totalValue.toFixed(\r\n            2\r\n          )} wacht op goedkeuring`,\r\n          category: 'order_update',\r\n          priority: 'normal',\r\n          action_url: '/orders',\r\n          action_label: 'Bekijk bestelling',\r\n        });\r\n\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: filteredSuggestions.length,\r\n          ordersCreated: result.supplierOrders.length,\r\n          totalValue,\r\n          status: 'success',\r\n          details: ['Order created and waiting for approval'],\r\n        };\r\n      } else {\r\n        // Process automatic order\r\n        const result = await centralOrderService.createMultiSupplierOrder(\r\n          reorderItems\r\n        );\r\n\r\n        return {\r\n          itemsAnalyzed: suggestions.length,\r\n          itemsToOrder: filteredSuggestions.length,\r\n          ordersCreated: result.supplierOrders.length,\r\n          totalValue,\r\n          status: result.status,\r\n          details:\r\n            result.errors.length > 0\r\n              ? result.errors\r\n              : ['Orders processed successfully'],\r\n        };\r\n      }\r\n    } catch (error) {\r\n      orderLogger.error('Error in complete reorder workflow:', error);\r\n      return {\r\n        itemsAnalyzed: 0,\r\n        itemsToOrder: 0,\r\n        ordersCreated: 0,\r\n        totalValue: 0,\r\n        status: 'failed',\r\n        details: [error instanceof Error ? error.message : 'Unknown error'],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Monitor and process delivery updates\r\n   */\r\n  async processDeliveryUpdates(): Promise<{\r\n    ordersChecked: number;\r\n    deliveriesProcessed: number;\r\n    stockUpdates: number;\r\n    errors: string[];\r\n  }> {\r\n    try {\r\n      orderLogger.info('Processing delivery updates');\r\n\r\n      // 1. Process incoming deliveries\r\n      const deliveryResults =\r\n        await inventoryAutomationService.processIncomingDeliveries();\r\n\r\n      // 2. Check for overdue orders and send notifications\r\n      const { data: overdueOrders } = await supabase\r\n        .from('supplier_orders')\r\n        .select(\r\n          `\r\n          id,\r\n          order_reference,\r\n          estimated_delivery_date,\r\n          practice_id,\r\n          suppliers(name)\r\n        `\r\n        )\r\n        .eq('status', 'shipped')\r\n        .lt('estimated_delivery_date', new Date().toISOString().split('T')[0]);\r\n\r\n      // Create notifications for overdue orders\r\n      for (const order of overdueOrders || []) {\r\n        await supabase.from('notifications').insert({\r\n          practice_id: order.practice_id,\r\n          title: 'Bestelling is verlaat',\r\n          message: `Bestelling ${order.order_reference} van ${order.suppliers.name} had ${order.estimated_delivery_date} moeten aankomen`,\r\n          category: 'order_update',\r\n          priority: 'normal',\r\n          action_url: '/orders',\r\n          action_label: 'Bekijk bestelling',\r\n        });\r\n      }\r\n\r\n      const successfulDeliveries = deliveryResults.filter(\r\n        r => r.stockUpdated\r\n      ).length;\r\n      const totalErrors = deliveryResults.reduce(\r\n        (sum, r) => sum + r.errors.length,\r\n        0\r\n      );\r\n\r\n      return {\r\n        ordersChecked: deliveryResults.length + (overdueOrders?.length || 0),\r\n        deliveriesProcessed: successfulDeliveries,\r\n        stockUpdates: successfulDeliveries,\r\n        errors: deliveryResults.flatMap(r => r.errors),\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error processing delivery updates:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive inventory dashboard data\r\n   */\r\n  async generateInventoryDashboardData(practiceId: string): Promise<{\r\n    healthCheck: any;\r\n    lowStockItems: any[];\r\n    reorderSuggestions: any[];\r\n    recentOrders: any[];\r\n    pendingDeliveries: any[];\r\n    automationStatus: any;\r\n  }> {\r\n    try {\r\n      orderLogger.info(\r\n        `Generating inventory dashboard data for practice ${practiceId}`\r\n      );\r\n\r\n      // Run all data collection in parallel for better performance\r\n      const [\r\n        healthCheck,\r\n        lowStockItems,\r\n        reorderSuggestions,\r\n        recentOrders,\r\n        pendingDeliveries,\r\n        automationSettings,\r\n      ] = await Promise.all([\r\n        inventoryAutomationService.runInventoryHealthCheck(practiceId),\r\n        inventoryAutomationService.checkLowStockItems(practiceId),\r\n        inventoryAutomationService.generateReorderSuggestions(practiceId),\r\n        this.getRecentOrders(practiceId),\r\n        this.getPendingDeliveries(practiceId),\r\n        this.getAutomationStatus(practiceId),\r\n      ]);\r\n\r\n      return {\r\n        healthCheck,\r\n        lowStockItems: lowStockItems.slice(0, 10), // Top 10 most urgent\r\n        reorderSuggestions: reorderSuggestions.slice(0, 10), // Top 10 suggestions\r\n        recentOrders,\r\n        pendingDeliveries,\r\n        automationStatus: automationSettings,\r\n      };\r\n    } catch (error) {\r\n      orderLogger.error('Error generating inventory dashboard data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private async getRecentOrders(practiceId: string): Promise<any[]> {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        id,\r\n        order_reference,\r\n        status,\r\n        total_amount,\r\n        created_at,\r\n        suppliers(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .order('created_at', { ascending: false })\r\n      .limit(5);\r\n\r\n    return data || [];\r\n  }\r\n\r\n  private async getPendingDeliveries(practiceId: string): Promise<any[]> {\r\n    const { data } = await supabase\r\n      .from('supplier_orders')\r\n      .select(\r\n        `\r\n        id,\r\n        order_reference,\r\n        estimated_delivery_date,\r\n        tracking_number,\r\n        suppliers(name)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .in('status', ['sent', 'confirmed', 'shipped'])\r\n      .order('estimated_delivery_date', { ascending: true });\r\n\r\n    return data || [];\r\n  }\r\n\r\n  private async getAutomationStatus(practiceId: string): Promise<any> {\r\n    const { data: settings } = await supabase\r\n      .from('practice_inventory_settings')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .single();\r\n\r\n    const { data: schedules } = await supabase\r\n      .from('automation_schedules')\r\n      .select('*')\r\n      .eq('practice_id', practiceId)\r\n      .eq('enabled', true);\r\n\r\n    return {\r\n      autoReorderEnabled: settings?.auto_reorder_enabled || false,\r\n      notificationsEnabled: settings?.notify_on_low_stock || false,\r\n      activeSchedules: schedules?.length || 0,\r\n      lastRunAt: schedules?.[0]?.last_run_at,\r\n      nextRunAt: schedules?.[0]?.next_run_at,\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const inventoryOrderIntegration = new InventoryOrderIntegrationService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\inventory\\automationService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2178, 2181], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2178, 2181], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2676, 2679], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2676, 2679], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\r\nimport { inventoryLogger } from '@/utils/logger';\r\nimport {\r\n  centralOrderService,\r\n  type AutoReorderConfig,\r\n} from '@/services/orderOrchestration/centralOrderService';\r\nimport { AnalyticsService } from '@/services/analytics';\r\nimport type { LowStockItemDTO } from '@/types/analytics';\r\n\r\nexport interface AutomationSchedule {\r\n  practiceId: string;\r\n  enabled: boolean;\r\n  scheduleType: 'daily' | 'weekly' | 'monthly';\r\n  scheduleTime: string; // HH:MM format\r\n  scheduleDays?: number[]; // 0-6, Sunday-Saturday for weekly\r\n  scheduleDate?: number; // 1-31 for monthly\r\n  lastRun?: string;\r\n  nextRun?: string;\r\n}\r\n\r\nexport interface DeliveryProcessingResult {\r\n  orderId: string;\r\n  itemsProcessed: number;\r\n  stockUpdated: boolean;\r\n  notificationSent: boolean;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Inventory Automation Service\r\n *\r\n * Handles automated inventory operations:\r\n * - Low stock detection and alerts\r\n * - Scheduled automatic reordering\r\n * - Delivery processing and stock updates\r\n * - Inventory analytics and reporting\r\n */\r\nexport class InventoryAutomationService {\r\n  /**\r\n   * Check for low stock items across all locations\r\n   */\r\n  async checkLowStockItems(\r\n    practiceId: string,\r\n    locationId?: string\r\n  ): Promise<(LowStockItemDTO & { urgencyLevel: 'low' | 'medium' | 'high' | 'critical'; daysOutOfStock?: number })[]> {\r\n    const items = await AnalyticsService.getLowStockItems(practiceId);\r\n    const filteredItems = locationId\r\n      ? items.filter(item => item.locationId === locationId)\r\n      : items;\r\n\r\n    return filteredItems.map(item => {\r\n      const urgencyLevel = this.calculateUrgencyLevel(\r\n        item.currentQuantity,\r\n        item.minimumQuantity,\r\n        item.minimumQuantity\r\n      );\r\n\r\n      const daysOutOfStock =\r\n        item.currentQuantity <= 0\r\n          ? this.calculateDaysOutOfStock(undefined)\r\n          : undefined;\r\n\r\n      return {\r\n        ...item,\r\n        urgencyLevel,\r\n        daysOutOfStock,\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate reorder suggestions based on stock analysis\r\n   */\r\n  async generateReorderSuggestions(practiceId: string): Promise<any[]> {\r\n    try {\r\n      inventoryLogger.info(\r\n        `Generating reorder suggestions for practice ${practiceId}`\r\n      );\r\n\r\n      const lowStockItems = await this.checkLowStockItems(practiceId);\r\n\r\n      if (lowStockItems.length === 0) {\r\n        return [];\r\n      }\r\n\r\n      // Get supplier information for items with preferred suppliers\r\n      const supplierIds = lowStockItems\r\n        .map(item => item.preferredSupplierId)\r\n        .filter(Boolean) as string[];\r\n\r\n      let suppliers: any[] = [];\r\n      if (supplierIds.length > 0) {\r\n        const { data: supplierData } = await supabase\r\n          .from('suppliers')\r\n          .select('id, name, minimum_order_amount, lead_time_days')\r\n          .in('id', supplierIds);\r\n        suppliers = supplierData || [];\r\n      }\r\n\r\n      // Generate suggestions with supplier information\r\n      const suggestions = lowStockItems.map(item => {\r\n      const supplier = suppliers.find(s => s.id === item.preferredSupplierId);\r\n\r\n        // Calculate suggested order quantity\r\n        const suggestedQuantity = this.calculateOrderQuantity(\r\n          item.currentQuantity,\r\n          item.minimumQuantity,\r\n          item.minimumQuantity\r\n        );\r\n\r\n        return {\r\n          ...item,\r\n          suggestedQuantity,\r\n          supplierName: supplier?.name || 'No preferred supplier',\r\n          minimumOrderAmount: supplier?.minimum_order_amount || 0,\r\n          leadTimeDays: supplier?.lead_time_days || 7,\r\n          estimatedCost: suggestedQuantity * 10, // Placeholder - would need product pricing\r\n          priority: item.urgencyLevel === 'critical' ? 'urgent' : 'normal',\r\n        };\r\n      });\r\n\r\n      return suggestions;\r\n    } catch (error) {\r\n      inventoryLogger.error('Error generating reorder suggestions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule and execute automatic reorders\r\n   */\r\n  async scheduleAutomaticReorders(): Promise<void> {\r\n    try {\r\n      inventoryLogger.info('Running scheduled automatic reorders');\r\n\r\n      // Get all practices with automation enabled\r\n      const { data: practices, error } = await supabase\r\n        .from('practice_inventory_settings')\r\n        .select(\r\n          `\r\n          practice_id,\r\n          auto_reorder_enabled,\r\n          practices!inner(id, name)\r\n        `\r\n        )\r\n        .eq('auto_reorder_enabled', true);\r\n\r\n      if (error) throw error;\r\n\r\n      if (!practices?.length) {\r\n        inventoryLogger.info('No practices have automatic reordering enabled');\r\n        return;\r\n      }\r\n\r\n      // Process each practice\r\n      for (const practice of practices) {\r\n        try {\r\n          const config: AutoReorderConfig = {\r\n            practiceId: practice.practice_id,\r\n            enableLowStockReorder: true,\r\n            enableScheduledReorder: true,\r\n            approvalRequired: false, // For scheduled orders, we assume approval is not required\r\n            maxOrderValue: 1000, // Default limit for automatic orders\r\n          };\r\n\r\n          const result = await centralOrderService.processAutomaticReorder(\r\n            config\r\n          );\r\n\r\n          if (result.status === 'success' && result.totalItems > 0) {\r\n            inventoryLogger.info(\r\n              `Successfully processed automatic reorder for ${practice.practices.name}: ` +\r\n                `${result.totalItems} items, €${result.totalValue.toFixed(2)}`\r\n            );\r\n\r\n            // Create success notification\r\n            await this.createAutomationNotification(\r\n              practice.practice_id,\r\n              'Automatische bestelling geplaatst',\r\n              `${\r\n                result.totalItems\r\n              } producten besteld voor €${result.totalValue.toFixed(2)}`,\r\n              'success'\r\n            );\r\n          } else if (result.errors.length > 0) {\r\n            inventoryLogger.warn(\r\n              `Partial success for automatic reorder for ${practice.practices.name}: ` +\r\n                `${result.errors.length} errors`\r\n            );\r\n\r\n            // Create warning notification\r\n            await this.createAutomationNotification(\r\n              practice.practice_id,\r\n              'Automatische bestelling gedeeltelijk mislukt',\r\n              `${result.errors.length} fouten opgetreden bij bestelling`,\r\n              'warning'\r\n            );\r\n          }\r\n        } catch (practiceError) {\r\n          inventoryLogger.error(\r\n            `Error processing automatic reorder for practice ${practice.practice_id}:`,\r\n            practiceError\r\n          );\r\n\r\n          // Create error notification\r\n          await this.createAutomationNotification(\r\n            practice.practice_id,\r\n            'Automatische bestelling mislukt',\r\n            'Er is een fout opgetreden bij de automatische bestelling',\r\n            'error'\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      inventoryLogger.error('Error in scheduled automatic reorders:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process incoming deliveries and update stock\r\n   */\r\n  async processIncomingDeliveries(): Promise<DeliveryProcessingResult[]> {\r\n    try {\r\n      inventoryLogger.info('Processing incoming deliveries');\r\n\r\n      // Get orders that are marked as delivered but not yet processed\r\n      const { data: deliveredOrders, error } = await supabase\r\n        .from('supplier_orders')\r\n        .select(\r\n          `\r\n          id,\r\n          order_reference,\r\n          supplier_id,\r\n          practice_id,\r\n          status,\r\n          suppliers(name)\r\n        `\r\n        )\r\n        .eq('status', 'delivered')\r\n        .is('stock_updated_at', null); // Not yet processed\r\n\r\n      if (error) throw error;\r\n\r\n      if (!deliveredOrders?.length) {\r\n        inventoryLogger.info('No delivered orders to process');\r\n        return [];\r\n      }\r\n\r\n      const results: DeliveryProcessingResult[] = [];\r\n\r\n      for (const order of deliveredOrders) {\r\n        try {\r\n          // Update stock for this order\r\n          await centralOrderService.updateStockAfterDelivery(order.id);\r\n\r\n          // Mark order as stock updated\r\n          await supabase\r\n            .from('supplier_orders')\r\n            .update({\r\n              stock_updated_at: new Date().toISOString(),\r\n              status: 'completed',\r\n            })\r\n            .eq('id', order.id);\r\n\r\n          results.push({\r\n            orderId: order.id,\r\n            itemsProcessed: 0, // Would need to count items\r\n            stockUpdated: true,\r\n            notificationSent: true,\r\n            errors: [],\r\n          });\r\n\r\n          inventoryLogger.info(\r\n            `Successfully processed delivery for order ${order.order_reference} ` +\r\n              `from ${order.suppliers.name}`\r\n          );\r\n        } catch (orderError) {\r\n          inventoryLogger.error(\r\n            `Error processing delivery for order ${order.id}:`,\r\n            orderError\r\n          );\r\n\r\n          results.push({\r\n            orderId: order.id,\r\n            itemsProcessed: 0,\r\n            stockUpdated: false,\r\n            notificationSent: false,\r\n            errors: [\r\n              orderError instanceof Error\r\n                ? orderError.message\r\n                : 'Unknown error',\r\n            ],\r\n          });\r\n        }\r\n      }\r\n\r\n      return results;\r\n    } catch (error) {\r\n      inventoryLogger.error('Error processing incoming deliveries:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Run comprehensive inventory health check\r\n   */\r\n  async runInventoryHealthCheck(practiceId: string): Promise<{\r\n    lowStockCount: number;\r\n    expiredBatchCount: number;\r\n    expiringBatchCount: number;\r\n    zeroStockCount: number;\r\n    overStockCount: number;\r\n    recommendations: string[];\r\n  }> {\r\n    try {\r\n      inventoryLogger.info(\r\n        `Running inventory health check for practice ${practiceId}`\r\n      );\r\n\r\n      // Check low stock items\r\n      const lowStockItems = await this.checkLowStockItems(practiceId);\r\n      const zeroStockItems = lowStockItems.filter(\r\n        item => item.currentQuantity <= 0\r\n      );\r\n\r\n      // Check expired batches\r\n      const { data: expiredBatches } = await supabase\r\n        .from('product_batches')\r\n        .select('id')\r\n        .eq('practice_id', practiceId)\r\n        .lt('expiry_date', new Date().toISOString().split('T')[0])\r\n        .eq('status', 'active');\r\n\r\n      // Check expiring batches (next 30 days)\r\n      const futureDate = new Date();\r\n      futureDate.setDate(futureDate.getDate() + 30);\r\n\r\n      const { data: expiringBatches } = await supabase\r\n        .from('product_batches')\r\n        .select('id')\r\n        .eq('practice_id', practiceId)\r\n        .gte('expiry_date', new Date().toISOString().split('T')[0])\r\n        .lte('expiry_date', futureDate.toISOString().split('T')[0])\r\n        .eq('status', 'active');\r\n\r\n      // Check overstock items (above maximum quantity)\r\n      const { data: overStockItems } = await supabase\r\n        .from('stock_levels')\r\n        .select('id')\r\n        .eq('practice_id', practiceId)\r\n        .not('maximum_quantity', 'is', null)\r\n        .gt('current_quantity', supabase.rpc('maximum_quantity'));\r\n\r\n      // Generate recommendations\r\n      const recommendations = [];\r\n\r\n      if (lowStockItems.length > 0) {\r\n        recommendations.push(\r\n          `${lowStockItems.length} producten hebben lage voorraad en moeten worden besteld`\r\n        );\r\n      }\r\n\r\n      if (zeroStockItems.length > 0) {\r\n        recommendations.push(\r\n          `${zeroStockItems.length} producten zijn uitverkocht - prioriteit bestelling nodig`\r\n        );\r\n      }\r\n\r\n      if (expiredBatches?.length) {\r\n        recommendations.push(\r\n          `${expiredBatches.length} batches zijn verlopen en moeten worden weggegooid`\r\n        );\r\n      }\r\n\r\n      if (expiringBatches?.length) {\r\n        recommendations.push(\r\n          `${expiringBatches.length} batches verlopen binnen 30 dagen - gebruik eerst`\r\n        );\r\n      }\r\n\r\n      if (overStockItems?.length) {\r\n        recommendations.push(\r\n          `${overStockItems.length} producten hebben overvoorraad - overweeg minder te bestellen`\r\n        );\r\n      }\r\n\r\n      return {\r\n        lowStockCount: lowStockItems.length,\r\n        expiredBatchCount: expiredBatches?.length || 0,\r\n        expiringBatchCount: expiringBatches?.length || 0,\r\n        zeroStockCount: zeroStockItems.length,\r\n        overStockCount: overStockItems?.length || 0,\r\n        recommendations,\r\n      };\r\n    } catch (error) {\r\n      inventoryLogger.error('Error running inventory health check:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private calculateUrgencyLevel(\r\n    currentQuantity: number,\r\n    minimumQuantity: number,\r\n    reorderPoint: number\r\n  ): 'low' | 'medium' | 'high' | 'critical' {\r\n    if (currentQuantity <= 0) return 'critical';\r\n    if (currentQuantity <= minimumQuantity / 2) return 'high';\r\n    if (currentQuantity <= minimumQuantity) return 'medium';\r\n    if (currentQuantity <= reorderPoint) return 'low';\r\n    return 'low';\r\n  }\r\n\r\n  private calculateDaysOutOfStock(lastMovementAt: string): number {\r\n    const lastMovement = new Date(lastMovementAt);\r\n    const now = new Date();\r\n    return Math.floor(\r\n      (now.getTime() - lastMovement.getTime()) / (1000 * 60 * 60 * 24)\r\n    );\r\n  }\r\n\r\n  private calculateOrderQuantity(\r\n    currentQuantity: number,\r\n    minimumQuantity: number,\r\n    reorderPoint: number\r\n  ): number {\r\n    // Order enough to reach double the minimum quantity, or at least the reorder point\r\n    const targetQuantity = Math.max(minimumQuantity * 2, reorderPoint);\r\n    return Math.max(targetQuantity - currentQuantity, minimumQuantity);\r\n  }\r\n\r\n  private async createAutomationNotification(\r\n    practiceId: string,\r\n    title: string,\r\n    message: string,\r\n    type: 'success' | 'warning' | 'error'\r\n  ): Promise<void> {\r\n    const priority =\r\n      type === 'error' ? 'high' : type === 'warning' ? 'normal' : 'low';\r\n\r\n    await supabase.from('notifications').insert({\r\n      practice_id: practiceId,\r\n      title,\r\n      message,\r\n      category: 'system_notification',\r\n      priority,\r\n      action_url: '/inventory/levels',\r\n      action_label: 'Bekijk voorraad',\r\n    });\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const inventoryAutomationService = new InventoryAutomationService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\magento\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ServiceErrorHandler' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3132, 3135], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3132, 3135], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'errorBody' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 175,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 175,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Enhanced Magento API service with full implementation\r\nimport {\r\n  handleApiError,\r\n  ServiceErrorHandler,\r\n  validateRequired,\r\n} from 'src/utils/service-error-handler';\r\nimport { supabase } from 'src/services/supabase';\r\nimport { useAuthStore } from 'src/stores/auth';\r\nimport type {\r\n  MagentoConfig,\r\n  MagentoOrder,\r\n  MagentoOrderItem,\r\n  MagentoProduct,\r\n  MagentoSearchCriteria,\r\n} from '@/types/magento';\r\n\r\nexport interface MagentoOrder {\r\n  id: number;\r\n  increment_id: string;\r\n  status: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  grand_total: number;\r\n  items: MagentoOrderItem[];\r\n  billing_address?: MagentoAddress;\r\n  shipping_address?: MagentoAddress;\r\n  payment?: MagentoPayment;\r\n}\r\n\r\nexport interface MagentoOrderItem {\r\n  id: number;\r\n  product_id: number;\r\n  name: string;\r\n  sku: string;\r\n  qty_ordered: number;\r\n  price: number;\r\n  product_type: string;\r\n}\r\n\r\nexport interface MagentoAddress {\r\n  firstname: string;\r\n  lastname: string;\r\n  company?: string;\r\n  street: string[];\r\n  city: string;\r\n  region: string;\r\n  postcode: string;\r\n  country_id: string;\r\n  telephone?: string;\r\n  email?: string;\r\n}\r\n\r\nexport interface MagentoPayment {\r\n  method: string;\r\n  amount_ordered: number;\r\n  currency_code: string;\r\n  transaction_id?: string;\r\n  additional_information?: string[];\r\n}\r\n\r\nexport interface MagentoInvoice {\r\n  id: number;\r\n  order_id: number;\r\n  increment_id: string;\r\n  created_at: string;\r\n  grand_total: number;\r\n  state: number;\r\n  items: MagentoInvoiceItem[];\r\n}\r\n\r\nexport interface MagentoInvoiceItem {\r\n  id: number;\r\n  name: string;\r\n  sku: string;\r\n  qty: number;\r\n  price: number;\r\n}\r\n\r\nexport interface MagentoProduct {\r\n  id: number;\r\n  sku: string;\r\n  name: string;\r\n  price: number;\r\n  status: number;\r\n  type_id: string;\r\n  weight?: number;\r\n  attribute_set_id: number;\r\n  custom_attributes?: MagentoCustomAttribute[];\r\n}\r\n\r\nexport interface MagentoCustomAttribute {\r\n  attribute_code: string;\r\n  value: string | number | boolean;\r\n}\r\n\r\nexport interface MagentoSearchCriteria {\r\n  filterGroups?: MagentoFilterGroup[];\r\n  sortOrders?: MagentoSortOrder[];\r\n  pageSize?: number;\r\n  currentPage?: number;\r\n}\r\n\r\nexport interface MagentoFilterGroup {\r\n  filters: MagentoFilter[];\r\n}\r\n\r\nexport interface MagentoFilter {\r\n  field: string;\r\n  value: string | number;\r\n  condition_type?: string;\r\n}\r\n\r\nexport interface MagentoSortOrder {\r\n  field: string;\r\n  direction: 'ASC' | 'DESC';\r\n}\r\n\r\nclass MagentoApiService {\r\n  private config: MagentoConfig | null = null;\r\n  private readonly DEFAULT_TIMEOUT = 30000;\r\n\r\n  /**\r\n   * Configure the Magento API service\r\n   */\r\n  configure(config: MagentoConfig): void {\r\n    validateRequired(\r\n      {\r\n        baseUrl: config.baseUrl,\r\n        token: config.token,\r\n      },\r\n      {\r\n        service: 'MagentoApiService',\r\n        operation: 'configure',\r\n      }\r\n    );\r\n\r\n    this.config = {\r\n      ...config,\r\n      timeout: config.timeout || this.DEFAULT_TIMEOUT,\r\n      storeCode: config.storeCode || 'default',\r\n    };\r\n  }\r\n\r\n  private async makeRequest(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<any> {\r\n    if (!this.config) {\r\n      throw new Error($t('index.magentoapiconfigurationis'));\r\n    }\r\n\r\n    const url = `${this.config.baseUrl}/rest/V1${endpoint}`;\r\n\r\n    try {\r\n      const controller = new AbortController();\r\n      const timeoutId = setTimeout(\r\n        () => controller.abort(),\r\n        this.config.timeout\r\n      );\r\n\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          Authorization: `Bearer ${this.config.token}`,\r\n          'Content-Type': 'application/json',\r\n          Store: this.config.storeCode || 'default',\r\n          ...options.headers,\r\n        },\r\n        signal: controller.signal,\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      if (!response.ok) {\r\n        const errorBody = await response.text();\r\n        handleApiError(\r\n          new Error($t('index.httpresponsestatusresponsestatuste')),\r\n          {\r\n            service: 'MagentoApiService',\r\n            operation: 'makeRequest',\r\n            metadata: {\r\n              endpoint,\r\n              method: options.method || 'GET',\r\n              status: response.status,\r\n            },\r\n          }\r\n        );\r\n      }\r\n\r\n      return response.json();\r\n    } catch (error) {\r\n      if (error.name === 'AbortError') {\r\n        handleApiError(new Error($t('index.requesttimeout')), {\r\n          service: 'MagentoApiService',\r\n          operation: 'makeRequest',\r\n          metadata: { endpoint, timeout: this.config.timeout },\r\n        });\r\n      }\r\n\r\n      handleApiError(error, {\r\n        service: 'MagentoApiService',\r\n        operation: 'makeRequest',\r\n        metadata: { endpoint, method: options.method || 'GET' },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test the connection to Magento API\r\n   */\r\n  async testConnection(): Promise<{ success: boolean; message: string }> {\r\n    if (!this.isConfigured()) {\r\n      return {\r\n        success: false,\r\n        message: 'API not configured',\r\n      };\r\n    }\r\n\r\n    try {\r\n      // Test with a simple API call\r\n      await this.makeRequest('/store/storeConfigs');\r\n      return {\r\n        success: true,\r\n        message: 'Connection successful',\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: error instanceof Error ? error.message : 'Connection failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get connection status with detailed information\r\n   */\r\n  async getConnectionStatus(): Promise<{\r\n    configured: boolean;\r\n    connected: boolean;\r\n    message: string;\r\n    lastTested?: Date;\r\n  }> {\r\n    const configured = this.isConfigured();\r\n\r\n    if (!configured) {\r\n      return {\r\n        configured: false,\r\n        connected: false,\r\n        message: 'Not configured',\r\n      };\r\n    }\r\n\r\n    const connectionTest = await this.testConnection();\r\n\r\n    return {\r\n      configured: true,\r\n      connected: connectionTest.success,\r\n      message: connectionTest.message,\r\n      lastTested: new Date(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create search criteria helper\r\n   */\r\n  createSearchCriteria(options: {\r\n    filters?: Array<{\r\n      field: string;\r\n      value: string | number;\r\n      condition?: string;\r\n    }>;\r\n    sortBy?: string;\r\n    sortDirection?: 'ASC' | 'DESC';\r\n    pageSize?: number;\r\n    currentPage?: number;\r\n  }): MagentoSearchCriteria {\r\n    const criteria: MagentoSearchCriteria = {};\r\n\r\n    if (options.filters && options.filters.length > 0) {\r\n      criteria.filterGroups = [\r\n        {\r\n          filters: options.filters.map(filter => ({\r\n            field: filter.field,\r\n            value: filter.value,\r\n            condition_type: filter.condition || 'eq',\r\n          })),\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (options.sortBy) {\r\n      criteria.sortOrders = [\r\n        {\r\n          field: options.sortBy,\r\n          direction: options.sortDirection || 'ASC',\r\n        },\r\n      ];\r\n    }\r\n\r\n    if (options.pageSize) {\r\n      criteria.pageSize = options.pageSize;\r\n    }\r\n\r\n    if (options.currentPage) {\r\n      criteria.currentPage = options.currentPage;\r\n    }\r\n\r\n    return criteria;\r\n  }\r\n\r\n  // Order management\r\n  async getOrders(\r\n    searchCriteria?: MagentoSearchCriteria\r\n  ): Promise<MagentoOrder[]> {\r\n    const endpoint = '/orders';\r\n    const params: string[] = [];\r\n    if (searchCriteria) {\r\n      if (\r\n        searchCriteria.filterGroups &&\r\n        searchCriteria.filterGroups.length > 0\r\n      ) {\r\n        params.push(\r\n          `searchCriteria[filter_groups]=${JSON.stringify(\r\n            searchCriteria.filterGroups\r\n          )}`\r\n        );\r\n      }\r\n      if (searchCriteria.sortOrders && searchCriteria.sortOrders.length > 0) {\r\n        params.push(\r\n          `searchCriteria[sort_orders]=${JSON.stringify(\r\n            searchCriteria.sortOrders\r\n          )}`\r\n        );\r\n      }\r\n      if (searchCriteria.pageSize) {\r\n        params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\r\n      }\r\n      if (searchCriteria.currentPage) {\r\n        params.push(\r\n          `searchCriteria[current_page]=${searchCriteria.currentPage}`\r\n        );\r\n      }\r\n    }\r\n    const queryString = params.length > 0 ? `?${params.join('&')}` : '';\r\n    return this.makeRequest(`${endpoint}${queryString}`);\r\n  }\r\n\r\n  async getOrder(orderId: string): Promise<MagentoOrder | null> {\r\n    return this.makeRequest(`/orders/${orderId}`);\r\n  }\r\n\r\n  async createOrder(orderData: MagentoOrder): Promise<MagentoOrder> {\r\n    return this.makeRequest('/orders', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ entity: orderData }),\r\n    });\r\n  }\r\n\r\n  // Invoice management\r\n  async getInvoices(\r\n    searchCriteria?: MagentoSearchCriteria\r\n  ): Promise<MagentoInvoice[]> {\r\n    const endpoint = '/invoices';\r\n    const params: string[] = [];\r\n    if (searchCriteria) {\r\n      if (\r\n        searchCriteria.filterGroups &&\r\n        searchCriteria.filterGroups.length > 0\r\n      ) {\r\n        params.push(\r\n          `searchCriteria[filter_groups]=${JSON.stringify(\r\n            searchCriteria.filterGroups\r\n          )}`\r\n        );\r\n      }\r\n      if (searchCriteria.sortOrders && searchCriteria.sortOrders.length > 0) {\r\n        params.push(\r\n          `searchCriteria[sort_orders]=${JSON.stringify(\r\n            searchCriteria.sortOrders\r\n          )}`\r\n        );\r\n      }\r\n      if (searchCriteria.pageSize) {\r\n        params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\r\n      }\r\n      if (searchCriteria.currentPage) {\r\n        params.push(\r\n          `searchCriteria[current_page]=${searchCriteria.currentPage}`\r\n        );\r\n      }\r\n    }\r\n    const queryString = params.length > 0 ? `?${params.join('&')}` : '';\r\n    return this.makeRequest(`${endpoint}${queryString}`);\r\n  }\r\n\r\n  async getInvoice(invoiceId: string): Promise<MagentoInvoice | null> {\r\n    return this.makeRequest(`/invoices/${invoiceId}`);\r\n  }\r\n\r\n  // Product management\r\n  async getProducts(\r\n    searchCriteria?: MagentoSearchCriteria\r\n  ): Promise<MagentoProduct[]> {\r\n    // If Magento API is configured, try to use it first\r\n    if (this.isConfigured()) {\r\n      try {\r\n        const endpoint = '/products';\r\n        const params: string[] = [];\r\n        if (searchCriteria) {\r\n          if (\r\n            searchCriteria.filterGroups &&\r\n            searchCriteria.filterGroups.length > 0\r\n          ) {\r\n            params.push(\r\n              `searchCriteria[filter_groups]=${JSON.stringify(\r\n                searchCriteria.filterGroups\r\n              )}`\r\n            );\r\n          }\r\n          if (\r\n            searchCriteria.sortOrders &&\r\n            searchCriteria.sortOrders.length > 0\r\n          ) {\r\n            params.push(\r\n              `searchCriteria[sort_orders]=${JSON.stringify(\r\n                searchCriteria.sortOrders\r\n              )}`\r\n            );\r\n          }\r\n          if (searchCriteria.pageSize) {\r\n            params.push(`searchCriteria[page_size]=${searchCriteria.pageSize}`);\r\n          }\r\n          if (searchCriteria.currentPage) {\r\n            params.push(\r\n              `searchCriteria[current_page]=${searchCriteria.currentPage}`\r\n            );\r\n          }\r\n        }\r\n        const queryString = params.length > 0 ? `?${params.join('&')}` : '';\r\n        return this.makeRequest(`${endpoint}${queryString}`);\r\n      } catch (error) {\r\n        console.warn(\r\n          'Magento API failed, falling back to Supabase data:',\r\n          error\r\n        );\r\n      }\r\n    }\r\n\r\n    // Fallback to Supabase data\r\n    return magentoDataService.getProducts();\r\n  }\r\n\r\n  async getProduct(sku: string): Promise<MagentoProduct | null> {\r\n    // Try Magento API first, fallback to Supabase\r\n    if (this.isConfigured()) {\r\n      try {\r\n        return this.makeRequest(`/products/${encodeURIComponent(sku)}`);\r\n      } catch (error) {\r\n        console.warn(\r\n          'Magento API failed for single product, checking Supabase:',\r\n          error\r\n        );\r\n      }\r\n    }\r\n\r\n    // Fallback: search in Supabase products\r\n    const products = await magentoDataService.getProducts();\r\n    return products.find(p => p.sku === sku) || null;\r\n  }\r\n\r\n  // Utility methods\r\n  isConfigured(): boolean {\r\n    return !!(this.config?.baseUrl && this.config?.token);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const magentoApi = new MagentoApiService();\r\n\r\n// Utility functions for Magento integration\r\nexport const magentoUtils = {\r\n  formatOrderStatus(status: string): string {\r\n    const statusMap: Record<string, string> = {\r\n      pending: 'In behandeling',\r\n      processing: 'Wordt verwerkt',\r\n      shipped: 'Verzonden',\r\n      complete: 'Voltooid',\r\n      canceled: 'Geannuleerd',\r\n      refunded: 'Terugbetaald',\r\n    };\r\n\r\n    return statusMap[status] || status;\r\n  },\r\n\r\n  formatPrice(price: number): string {\r\n    return new Intl.NumberFormat('nl-NL', {\r\n      style: 'currency',\r\n      currency: 'EUR',\r\n    }).format(price);\r\n  },\r\n\r\n  formatDate(dateString: string): string {\r\n    return new Date(dateString).toLocaleDateString('nl-NL');\r\n  },\r\n};\r\n\r\n// Real data service for Magento-compatible queries\r\nexport const magentoDataService = {\r\n  /**\r\n   * Get orders from Supabase in Magento-compatible format\r\n   */\r\n  async getOrders(practiceId?: string): Promise<MagentoOrder[]> {\r\n    const authStore = useAuthStore();\r\n    const currentPracticeId = practiceId || authStore.clinicId;\r\n\r\n    if (!currentPracticeId) {\r\n      throw new Error($t('index.nopracticeidavailable'));\r\n    }\r\n\r\n    try {\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select(\r\n          `\r\n          *,\r\n          order_items (\r\n            *,\r\n            products (*)\r\n          )\r\n        `\r\n        )\r\n        .eq('practice_id', currentPracticeId)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      return (\r\n        orders?.map(order => ({\r\n          id: parseInt(order.id) || 0,\r\n          increment_id: order.order_number || `ORD-${order.id}`,\r\n          status: this.mapOrderStatus(order.status),\r\n          created_at: order.created_at,\r\n          updated_at: order.updated_at,\r\n          grand_total:\r\n            order.order_items?.reduce(\r\n              (sum, item) => sum + (item.total_price || 0),\r\n              0\r\n            ) || 0,\r\n          items:\r\n            order.order_items?.map(item => ({\r\n              id: parseInt(item.id) || 0,\r\n              product_id: parseInt(item.product_id) || 0,\r\n              name: item.products?.name || '',\r\n              sku: item.products?.sku || '',\r\n              qty_ordered: item.quantity,\r\n              price: item.unit_price || 0,\r\n              product_type: 'simple',\r\n            })) || [],\r\n        })) || []\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching orders for Magento:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get products from Supabase in Magento-compatible format\r\n   */\r\n  async getProducts(practiceId?: string): Promise<MagentoProduct[]> {\r\n    const authStore = useAuthStore();\r\n    const currentPracticeId = practiceId || authStore.clinicId;\r\n\r\n    if (!currentPracticeId) {\r\n      throw new Error($t('index.nopracticeidavailable'));\r\n    }\r\n\r\n    try {\r\n      const { data: products, error } = await supabase\r\n        .from('products')\r\n        .select('*')\r\n        .eq('active', true)\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n\r\n      return (\r\n        products?.map(product => ({\r\n          id: parseInt(product.id) || 0,\r\n          sku: product.sku || '',\r\n          name: product.name || '',\r\n          price: parseFloat(product.price || '0'),\r\n          status: product.is_active ? 1 : 0,\r\n          type_id: 'simple',\r\n        })) || []\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching products for Magento:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get invoices from order_items joined with orders in Magento-compatible format\r\n   */\r\n  async getInvoices(practiceId?: string): Promise<MagentoInvoice[]> {\r\n    const authStore = useAuthStore();\r\n    const currentPracticeId = practiceId || authStore.clinicId;\r\n\r\n    if (!currentPracticeId) {\r\n      throw new Error($t('index.nopracticeidavailable'));\r\n    }\r\n\r\n    try {\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select(\r\n          `\r\n          *,\r\n          order_items (\r\n            *\r\n          )\r\n        `\r\n        )\r\n        .eq('practice_id', currentPracticeId)\r\n        .in('status', ['completed', 'delivered', 'invoiced'])\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      return (\r\n        orders?.map(order => ({\r\n          id: parseInt(order.id) || 0,\r\n          order_id: parseInt(order.id) || 0,\r\n          increment_id: `INV-${order.order_number || order.id}`,\r\n          created_at: order.updated_at || order.created_at,\r\n          grand_total:\r\n            order.order_items?.reduce(\r\n              (sum, item) => sum + (item.total_price || 0),\r\n              0\r\n            ) || 0,\r\n        })) || []\r\n      );\r\n    } catch (error) {\r\n      console.error('Error fetching invoices for Magento:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Map internal order status to Magento-compatible status\r\n   */\r\n  mapOrderStatus(status: string): string {\r\n    const statusMap: Record<string, string> = {\r\n      draft: 'pending',\r\n      submitted: 'processing',\r\n      confirmed: 'processing',\r\n      shipped: 'shipped',\r\n      delivered: 'complete',\r\n      completed: 'complete',\r\n      cancelled: 'canceled',\r\n      refunded: 'refunded',\r\n    };\r\n    return statusMap[status] || 'pending';\r\n  },\r\n};\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\magicInvites.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'inviteId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 354,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 354,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 367,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 367,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11131, 11134], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11131, 11134], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 399,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 399,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12046, 12049], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12046, 12049], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\r\nimport type { Json } from '../types/supabase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n// 🎭 REVOLUTIONARY MAGIC INVITE SERVICE\r\n// The most innovative user management system ever created!\r\n\r\nexport interface MagicInvite {\r\n  id: string;\r\n  practice_id: string;\r\n  magic_code: string;\r\n  emoji_sequence: string;\r\n  color_theme: string;\r\n  practice_avatar_seed: string;\r\n  target_role: string;\r\n  department?: string;\r\n  location_access: string[];\r\n  allow_guest_mode: boolean;\r\n  guest_session_hours: number;\r\n  auto_upgrade_to_member: boolean;\r\n  ai_role_suggestions: Json;\r\n  contextual_welcome_message?: string;\r\n  suggested_avatar_style: string;\r\n  qr_code_data?: string;\r\n  whatsapp_link?: string;\r\n  deep_link: string;\r\n  expires_at?: string;\r\n  max_uses: number;\r\n  current_uses: number;\r\n  auto_regenerate: boolean;\r\n  welcome_achievement: string;\r\n  onboarding_quest_enabled: boolean;\r\n  progress_rewards: Json;\r\n  created_by: string;\r\n  used_by: string[];\r\n  shared_via: string[];\r\n  view_count: number;\r\n  conversion_rate: number;\r\n  last_used_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface GuestSession {\r\n  id: string;\r\n  magic_invite_id: string;\r\n  practice_id: string;\r\n  guest_name: string;\r\n  display_emoji: string;\r\n  session_color: string;\r\n  session_token: string;\r\n  expires_at: string;\r\n  is_active: boolean;\r\n  can_extend: boolean;\r\n  granted_permissions: Json;\r\n  accessible_locations: string[];\r\n  restricted_features: string[];\r\n  device_fingerprint: string;\r\n  ip_address: unknown;\r\n  user_agent: string;\r\n  timezone: string;\r\n  actions_performed: Json;\r\n  achievements_unlocked: string[];\r\n  upgrade_prompts_shown: number;\r\n  showed_upgrade_interest: boolean;\r\n  upgrade_trigger_action?: string;\r\n  converted_to_user_id?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  last_activity_at: string;\r\n}\r\n\r\nexport interface CreateMagicInviteRequest {\r\n  practice_id: string;\r\n  target_role: string;\r\n  department?: string;\r\n  location_access?: string[];\r\n  max_uses?: number;\r\n  guest_session_hours?: number;\r\n  allow_guest_mode?: boolean;\r\n  emoji_sequence?: string;\r\n  color_theme?: string;\r\n  expires_in_days?: number;\r\n}\r\n\r\nexport interface CreateGuestSessionRequest {\r\n  magic_invite_id: string;\r\n  guest_name: string;\r\n  display_emoji?: string;\r\n  device_fingerprint: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  timezone?: string;\r\n}\r\n\r\nexport class MagicInviteService {\r\n  // 🎨 GENERATE VISUAL MAGIC CODE\r\n  static async generateMagicCode(\r\n    practiceName: string,\r\n    department?: string,\r\n    style: 'friendly' | 'professional' | 'playful' = 'friendly'\r\n  ): Promise<string> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('generate_magic_code', {\r\n        practice_name: practiceName,\r\n        department: department || null,\r\n        style,\r\n      });\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error generating magic code:', error);\r\n      // Fallback generation\r\n      const emojis = ['🏥', '💊', '🦷', '👩‍⚕️', '🔬', '🩺', '💉', '⚕️'];\r\n      const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];\r\n      const cityPart = practiceName\r\n        .replace(/[^a-zA-Z]/g, '')\r\n        .toUpperCase()\r\n        .substring(0, 8);\r\n      const year = new Date().getFullYear();\r\n      return `${randomEmoji}${cityPart}✨${year}`;\r\n    }\r\n  }\r\n\r\n  // ✨ CREATE MAGIC INVITE\r\n  static async createMagicInvite(\r\n    request: CreateMagicInviteRequest\r\n  ): Promise<MagicInvite> {\r\n    try {\r\n      // Generate the magic code\r\n      const magicCode = await this.generateMagicCode(\r\n        'PRACTICE', // We'll get the actual practice name from the database\r\n        request.department\r\n      );\r\n\r\n      const inviteData = {\r\n        id: uuidv4(),\r\n        practice_id: request.practice_id,\r\n        magic_code: magicCode,\r\n        emoji_sequence: request.emoji_sequence || '🏥✨',\r\n        color_theme: request.color_theme || 'blue',\r\n        practice_avatar_seed: uuidv4().substring(0, 8),\r\n        target_role: request.target_role,\r\n        department: request.department,\r\n        location_access: request.location_access || [],\r\n        allow_guest_mode: request.allow_guest_mode ?? true,\r\n        guest_session_hours: request.guest_session_hours || 8,\r\n        auto_upgrade_to_member: false,\r\n        ai_role_suggestions: {},\r\n        suggested_avatar_style: 'medical',\r\n        deep_link: `remcura://join/${magicCode}`,\r\n        expires_at: request.expires_in_days\r\n          ? new Date(\r\n              Date.now() + request.expires_in_days * 24 * 60 * 60 * 1000\r\n            ).toISOString()\r\n          : null,\r\n        max_uses: request.max_uses || 1,\r\n        current_uses: 0,\r\n        auto_regenerate: false,\r\n        welcome_achievement: 'practice_explorer',\r\n        onboarding_quest_enabled: true,\r\n        progress_rewards: {},\r\n        used_by: [],\r\n        shared_via: [],\r\n        view_count: 0,\r\n        conversion_rate: 0,\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('magic_invites')\r\n        .insert([inviteData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Generate QR code and WhatsApp link\r\n      await this.updateInviteLinks(data.id, magicCode);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating magic invite:', error);\r\n      throw new Error($t('magicinvit.failedtocreatemagic'));\r\n    }\r\n  }\r\n\r\n  // 🔗 UPDATE INVITE LINKS (QR & WhatsApp)\r\n  static async updateInviteLinks(\r\n    inviteId: string,\r\n    magicCode: string\r\n  ): Promise<void> {\r\n    try {\r\n      const qrCodeData = `https://app.remcura.com/join/${magicCode}`;\r\n      const whatsappLink = `https://wa.me/?text=${encodeURIComponent(\r\n        `🏥 Je bent uitgenodigd voor Remcura!\\n\\nGebruik deze magische code: ${magicCode}\\n\\nDirect toegang: ${qrCodeData}`\r\n      )}`;\r\n\r\n      await supabase\r\n        .from('magic_invites')\r\n        .update({\r\n          qr_code_data: qrCodeData,\r\n          whatsapp_link: whatsappLink,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', inviteId);\r\n    } catch (error) {\r\n      console.error('Error updating invite links:', error);\r\n    }\r\n  }\r\n\r\n  // 🔍 VALIDATE MAGIC CODE\r\n  static async validateMagicCode(\r\n    magicCode: string\r\n  ): Promise<MagicInvite | null> {\r\n    try {\r\n      // Alternative approach: use any to completely bypass TypeScript issues\r\n      const query = supabase.from('magic_invites');\r\n      const result = await query\r\n        .select('*')\r\n        .eq('magic_code', magicCode)\r\n        .eq('is_active', true)\r\n        .maybeSingle();\r\n\r\n      const { data, error } = result;\r\n\r\n      if (error || !data) {\r\n        return null;\r\n      }\r\n\r\n      // Manual validation of complex conditions that were causing TypeScript issues\r\n      const currentTime = new Date();\r\n      const isNotExpired =\r\n        !data.expires_at || new Date(data.expires_at) > currentTime;\r\n      const hasUsesLeft = (data.max_uses || 0) > (data.current_uses || 0);\r\n\r\n      if (!isNotExpired || !hasUsesLeft) {\r\n        return null;\r\n      }\r\n\r\n      // Track view\r\n      await this.trackInviteView(data.id);\r\n\r\n      return data as MagicInvite;\r\n    } catch (error) {\r\n      console.error('Error validating magic code:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // 🔄 INCREMENT INVITE USAGE\r\n  static async incrementInviteUsage(inviteId: string): Promise<void> {\r\n    try {\r\n      // First get the current uses count\r\n      const { data: currentInvite } = await supabase\r\n        .from('magic_invites')\r\n        .select('current_uses')\r\n        .eq('id', inviteId)\r\n        .single();\r\n\r\n      const newUses = (currentInvite?.current_uses || 0) + 1;\r\n\r\n      const { error } = await supabase\r\n        .from('magic_invites')\r\n        .update({\r\n          current_uses: newUses,\r\n          last_used_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', inviteId);\r\n\r\n      if (error) {\r\n        console.error('Error incrementing invite usage:', error);\r\n        throw error;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating invite usage:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 🎮 CREATE GUEST SESSION\r\n  static async createGuestSession(\r\n    request: CreateGuestSessionRequest\r\n  ): Promise<GuestSession> {\r\n    try {\r\n      // Generate unique session token\r\n      const sessionToken = uuidv4();\r\n\r\n      // Get invite details\r\n      const { data: invite } = await supabase\r\n        .from('magic_invites')\r\n        .select('*')\r\n        .eq('id', request.magic_invite_id)\r\n        .single();\r\n      if (!invite) throw new Error($t('magicinvit.invalidinvite'));\r\n\r\n      const sessionData = {\r\n        id: uuidv4(),\r\n        magic_invite_id: request.magic_invite_id,\r\n        practice_id: invite.practice_id,\r\n        guest_name: request.guest_name,\r\n        display_emoji: request.display_emoji || '👤',\r\n        session_color: this.generateSessionColor(),\r\n        session_token: sessionToken,\r\n        expires_at: new Date(\r\n          Date.now() + invite.guest_session_hours * 60 * 60 * 1000\r\n        ).toISOString(),\r\n        is_active: true,\r\n        can_extend: true,\r\n        granted_permissions: this.getGuestPermissions(invite.target_role),\r\n        accessible_locations: invite.location_access,\r\n        restricted_features: this.getRestrictedFeatures(invite.target_role),\r\n        device_fingerprint: request.device_fingerprint,\r\n        ip_address: request.ip_address || '',\r\n        user_agent: request.user_agent || '',\r\n        timezone: request.timezone || 'UTC',\r\n        actions_performed: {},\r\n        achievements_unlocked: [invite.welcome_achievement],\r\n        upgrade_prompts_shown: 0,\r\n        showed_upgrade_interest: false,\r\n        last_activity_at: new Date().toISOString(),\r\n      };\r\n\r\n      const { data, error } = await supabase\r\n        .from('guest_sessions')\r\n        .insert([sessionData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Update invite usage\r\n      await this.incrementInviteUsage(request.magic_invite_id);\r\n\r\n      // Track conversion\r\n      await this.trackInviteAnalytics(\r\n        request.magic_invite_id,\r\n        invite.practice_id,\r\n        'guest_join',\r\n        {\r\n          guest_name: request.guest_name,\r\n          session_id: data.id,\r\n        }\r\n      );\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error creating guest session:', error);\r\n      throw new Error($t('magicinvit.failedtocreateguest'));\r\n    }\r\n  }\r\n\r\n  // 📊 ANALYTICS & TRACKING\r\n  static async trackInviteView(inviteId: string): Promise<void> {\r\n    try {\r\n      // TODO: Implement analytics tracking when the increment_invite_views RPC function is created\r\n      // Tracking invite view\r\n    } catch (error) {\r\n      console.error('Error tracking invite view:', error);\r\n    }\r\n  }\r\n\r\n  static async trackInviteAnalytics(\r\n    inviteId: string,\r\n    practiceId: string,\r\n    eventType: string,\r\n    eventData: Record<string, any> = {}\r\n  ): Promise<void> {\r\n    try {\r\n      // Invite analytics now handled by usage_analytics table\r\n      await supabase.from('usage_analytics').insert([\r\n        {\r\n          practice_id: practiceId,\r\n          event_type: `invite_${eventType}`,\r\n          event_data: { magic_invite_id: inviteId, ...eventData },\r\n          user_agent: navigator.userAgent,\r\n          device_type: this.getDeviceType(),\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error tracking analytics:', error);\r\n    }\r\n  }\r\n\r\n  // 🎨 HELPER METHODS\r\n  static generateSessionColor(): string {\r\n    const colors = [\r\n      '#2196F3',\r\n      '#4CAF50',\r\n      '#FF9800',\r\n      '#9C27B0',\r\n      '#F44336',\r\n      '#009688',\r\n    ];\r\n    return colors[Math.floor(Math.random() * colors.length)];\r\n  }\r\n\r\n  static getGuestPermissions(role: string): Record<string, any> {\r\n    const basePermissions = {\r\n      view_inventory: true,\r\n      view_products: true,\r\n      view_locations: true,\r\n    };\r\n\r\n    switch (role) {\r\n      case 'admin':\r\n        return {\r\n          ...basePermissions,\r\n          edit_inventory: true,\r\n          manage_orders: true,\r\n          view_analytics: true,\r\n        };\r\n      case 'member':\r\n        return {\r\n          ...basePermissions,\r\n          edit_inventory: true,\r\n          create_orders: true,\r\n        };\r\n      default:\r\n        return basePermissions;\r\n    }\r\n  }\r\n\r\n  static getRestrictedFeatures(role: string): string[] {\r\n    const commonRestrictions = [\r\n      'user_management',\r\n      'system_settings',\r\n      'billing',\r\n    ];\r\n\r\n    switch (role) {\r\n      case 'guest':\r\n        return [...commonRestrictions, 'delete_data', 'export_data'];\r\n      case 'member':\r\n        return [...commonRestrictions, 'delete_data'];\r\n      default:\r\n        return commonRestrictions;\r\n    }\r\n  }\r\n\r\n  static getDeviceType(): string {\r\n    const userAgent = navigator.userAgent.toLowerCase();\r\n    if (userAgent.includes('mobile')) {\r\n      return 'mobile';\r\n    }\r\n    if (userAgent.includes('tablet')) {\r\n      return 'tablet';\r\n    }\r\n    return 'desktop';\r\n  }\r\n\r\n  // 📱 GET ACTIVE SESSIONS\r\n  static async getActiveSessions(practiceId: string): Promise<GuestSession[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('guest_sessions')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .eq('is_active', true)\r\n        .gt('expires_at', new Date().toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error getting active sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // 🔄 EXTEND GUEST SESSION\r\n  static async extendGuestSession(\r\n    sessionId: string,\r\n    additionalHours: number = 4\r\n  ): Promise<void> {\r\n    try {\r\n      const newExpiryTime = new Date(\r\n        Date.now() + additionalHours * 60 * 60 * 1000\r\n      ).toISOString();\r\n\r\n      await supabase\r\n        .from('guest_sessions')\r\n        .update({\r\n          expires_at: newExpiryTime,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', sessionId);\r\n    } catch (error) {\r\n      console.error('Error extending guest session:', error);\r\n      throw new Error($t('magicinvit.failedtoextendsession'));\r\n    }\r\n  }\r\n\r\n  // 🎯 GET PRACTICE INVITES\r\n  static async getPracticeInvites(practiceId: string): Promise<MagicInvite[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('magic_invites')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('Error getting practice invites:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default MagicInviteService;\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\monitoring.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'createStructuredLogger' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\r\n * Monitoring and Error Tracking Service\r\n * Placeholder for production monitoring tools like Sentry, LogRocket, etc.\r\n */\r\n\r\nimport type { Router } from 'vue-router';\r\nimport { logger } from '@/utils/logger';\r\n\r\ntype StructuredLogger = ReturnType<typeof logger.createContext>;\r\n\r\nconst createStructuredLogger = (context: string) => {\r\n  const base = logger.createContext(context);\r\n  return {\r\n    info: (message: string, data?: Record<string, unknown>) =>\r\n      data ? base.structured(message, data) : base.info(message),\r\n    warn: (message: string, data?: Record<string, unknown>) =>\r\n      data ? base.structured(message, data) : base.warn(message),\r\n    error: (message: string, data?: Record<string, unknown>) =>\r\n      data ? base.structured(message, data) : base.error(message),\r\n  } satisfies StructuredLogger & {\r\n    info: (message: string, data?: Record<string, unknown>) => void;\r\n    warn: (message: string, data?: Record<string, unknown>) => void;\r\n    error: (message: string, data?: Record<string, unknown>) => void;\r\n  };\r\n};\r\n\r\nexport interface MonitoringConfig {\r\n  dsn?: string;\r\n  environment: 'development' | 'staging' | 'production';\r\n  userId?: string;\r\n  version: string;\r\n}\r\n\r\nexport interface ErrorContext {\r\n  userId?: string;\r\n  userAgent?: string;\r\n  url?: string;\r\n  timestamp: string;\r\n  sessionId?: string;\r\n}\r\n\r\ninterface TrackingProperties {\r\n  [key: string]: string | number | boolean | undefined;\r\n}\r\n\r\nclass MonitoringService {\r\n  private config: MonitoringConfig | null = null;\r\n  private isInitialized = false;\r\n  private router: Router | null = null;\r\n\r\n  async initialize(config: MonitoringConfig, router?: Router): Promise<void> {\r\n    this.config = config;\r\n    this.router = router ?? null;\r\n\r\n    if (config.environment === 'production') {\r\n      await this.initializeSentry(config);\r\n    }\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  captureError(error: Error, context?: ErrorContext): void {\r\n    if (!this.isInitialized || !this.config) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Monitoring service not initialized', error);\r\n      return;\r\n    }\r\n\r\n    if (this.config.environment !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Captured error:', error, context);\r\n    }\r\n\r\n    if (this.config.environment === 'production') {\r\n      void this.sendToSentry(error, context);\r\n    }\r\n  }\r\n\r\n  private async sendToSentry(\r\n    error: Error,\r\n    context?: ErrorContext\r\n  ): Promise<void> {\r\n    if (!this.config) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const Sentry = await import('@sentry/vue');\r\n\r\n      Sentry.withScope(scope => {\r\n        if (context?.userId) {\r\n          scope.setUser({ id: context.userId });\r\n        }\r\n\r\n        scope.setTag('environment', this.config?.environment ?? 'unknown');\r\n        scope.setContext('error_context', {\r\n          url: context?.url ?? (typeof window !== 'undefined' ? window.location.href : undefined),\r\n          userAgent: context?.userAgent ?? (typeof navigator !== 'undefined' ? navigator.userAgent : undefined),\r\n          timestamp: context?.timestamp ?? new Date().toISOString(),\r\n          sessionId: context?.sessionId,\r\n        });\r\n\r\n        Sentry.captureException(error);\r\n      });\r\n    } catch (sentryError) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Failed to send error to Sentry:', sentryError);\r\n    }\r\n  }\r\n\r\n  trackEvent(eventName: string, properties?: TrackingProperties): void {\r\n    if (!this.isInitialized || !this.config) {\r\n      return;\r\n    }\r\n\r\n    if (this.config.environment !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.debug('Tracking event:', eventName, properties);\r\n    }\r\n\r\n    // Hook for production analytics services\r\n  }\r\n\r\n  setUserContext(user: { id: string; email?: string; role?: string }): void {\r\n    if (!this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.config?.environment === 'production') {\r\n      void this.setSentryUser(user);\r\n    }\r\n  }\r\n\r\n  private async setSentryUser(user: {\r\n    id: string;\r\n    email?: string;\r\n    role?: string;\r\n  }): Promise<void> {\r\n    try {\r\n      const Sentry = await import('@sentry/vue');\r\n\r\n      const sentryUser: { id: string; email?: string; role?: string } = {\r\n        id: user.id,\r\n      };\r\n      if (user.email) {\r\n        sentryUser.email = user.email;\r\n      }\r\n      if (user.role) {\r\n        sentryUser.role = user.role;\r\n      }\r\n\r\n      Sentry.setUser(sentryUser);\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Failed to set Sentry user:', error);\r\n    }\r\n  }\r\n\r\n  addBreadcrumb(\r\n    message: string,\r\n    category?: string,\r\n    level?: 'info' | 'warning' | 'error'\r\n  ): void {\r\n    if (!this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.config?.environment === 'production') {\r\n      void this.addSentryBreadcrumb(message, category, level);\r\n    }\r\n  }\r\n\r\n  private async addSentryBreadcrumb(\r\n    message: string,\r\n    category?: string,\r\n    level?: 'info' | 'warning' | 'error'\r\n  ): Promise<void> {\r\n    try {\r\n      const Sentry = await import('@sentry/vue');\r\n      Sentry.addBreadcrumb({\r\n        message,\r\n        category: category ?? 'custom',\r\n        level: level ?? 'info',\r\n      });\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Failed to add Sentry breadcrumb:', error);\r\n    }\r\n  }\r\n\r\n  trackPerformance(metric: string, value: number, unit?: string): void {\r\n    if (!this.isInitialized) {\r\n      return;\r\n    }\r\n\r\n    if (this.config?.environment !== 'production') {\r\n      // eslint-disable-next-line no-console\r\n      console.debug('Performance metric:', { metric, value, unit });\r\n    }\r\n  }\r\n\r\n  private async initializeSentry(config: MonitoringConfig): Promise<void> {\r\n    if (!config.dsn) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn('Sentry DSN not provided for production environment');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const Sentry = await import('@sentry/vue');\r\n\r\n      const integrations: unknown[] = [];\r\n\r\n      try {\r\n        const { browserTracingIntegration } = await import('@sentry/vue');\r\n        integrations.push(\r\n          browserTracingIntegration({\r\n            router: this.router ?? undefined,\r\n          })\r\n        );\r\n      } catch (tracingError) {\r\n        // eslint-disable-next-line no-console\r\n        console.warn('Browser tracing not available:', tracingError);\r\n      }\r\n\r\n      Sentry.init({\r\n        dsn: config.dsn,\r\n        environment: config.environment,\r\n        release: config.version,\r\n        integrations,\r\n        tracesSampleRate: config.environment === 'production' ? 0.1 : 1.0,\r\n        beforeSend(event) {\r\n          if (config.environment !== 'production') {\r\n            return event;\r\n          }\r\n\r\n          const exception = event?.exception?.values?.[0]?.value ?? '';\r\n          if (typeof exception === 'string' && exception.includes('Non-Error')) {\r\n            return null;\r\n          }\r\n\r\n          return event;\r\n        },\r\n      });\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Failed to initialize Sentry:', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport const monitoringService = new MonitoringService();\r\n\r\nexport async function initializeMonitoring(router?: Router): Promise<void> {\r\n  const config: MonitoringConfig = {\r\n    environment: import.meta.env.PROD ? 'production' : 'development',\r\n    version: '1.0.0',\r\n    ...(import.meta.env.VITE_SENTRY_DSN\r\n      ? { dsn: import.meta.env.VITE_SENTRY_DSN }\r\n      : {}),\r\n  };\r\n\r\n  await monitoringService.initialize(config, router);\r\n}\r\n\r\nexport const captureStructuredError = (\r\n  error: Error,\r\n  metadata: Record<string, unknown> = {}\r\n): void => {\r\n  monitoringService.captureError(error, {\r\n    timestamp: new Date().toISOString(),\r\n    ...metadata,\r\n  });\r\n};\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\notifications.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PushToken' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6611, 6614], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6611, 6614], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 350,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 350,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9633, 9636], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9633, 9636], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 375,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 375,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10232, 10235], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10232, 10235], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/services/supabase';\r\nimport type {\r\n  NotificationSettings,\r\n  NotificationSettingsInsert,\r\n  PushToken,\r\n  PushTokenInsert,\r\n  NotificationChannel,\r\n  NotificationType,\r\n} from '@/types/supabase';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { notificationLogger } from 'src/utils/logger';\r\nimport { ref, reactive } from 'vue';\r\nimport type { NotificationMessage } from '@/types/notifications';\r\n\r\nexport class NotificationService {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private inAppNotifications = ref<NotificationMessage[]>([]);\r\n  private settings = reactive<Record<string, NotificationSettings>>({});\r\n\r\n  constructor() {\r\n    this.initializeServiceWorker();\r\n    this.loadNotificationSettings();\r\n  }\r\n\r\n  /**\r\n   * Initialize service worker for push notifications\r\n   */\r\n  private async initializeServiceWorker() {\r\n    if ('serviceWorker' in navigator && 'PushManager' in window) {\r\n      try {\r\n        this.registration = await navigator.serviceWorker.register('/sw.js');\r\n        notificationLogger.info(\r\n          'Service Worker registered:',\r\n          this.registration\r\n        );\r\n      } catch (error) {\r\n        notificationLogger.error('Service Worker registration failed:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request push notification permission\r\n   */\r\n  async requestNotificationPermission(): Promise<NotificationPermission> {\r\n    if (!('Notification' in window)) {\r\n      throw new Error($t('notificati.thisbrowserdoesnot'));\r\n    }\r\n\r\n    const permission = await Notification.requestPermission();\r\n\r\n    if (permission === 'granted') {\r\n      await this.subscribeToPushNotifications();\r\n    }\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Subscribe to push notifications\r\n   */\r\n  async subscribeToPushNotifications(): Promise<PushSubscription | null> {\r\n    if (!this.registration) {\r\n      throw new Error($t('notificati.serviceworkernotregistered'));\r\n    }\r\n\r\n    try {\r\n      // You would need to replace this with your actual VAPID public key\r\n      const vapidPublicKey = 'your-vapid-public-key';\r\n\r\n      const subscription = await this.registration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: this.urlBase64ToUint8Array(vapidPublicKey),\r\n      });\r\n\r\n      // Store subscription in database\r\n      await this.storePushSubscription(subscription);\r\n\r\n      return subscription;\r\n    } catch (error) {\r\n      notificationLogger.error(\r\n        'Failed to subscribe to push notifications:',\r\n        error\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Store push subscription in database\r\n   */\r\n  private async storePushSubscription(\r\n    subscription: PushSubscription\r\n  ): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const user = authStore.user;\r\n\r\n    if (!user) {\r\n      return;\r\n    }\r\n\r\n    const endpoint = subscription.endpoint;\r\n    const keys = subscription.getKey\r\n      ? {\r\n          p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')),\r\n          auth: this.arrayBufferToBase64(subscription.getKey('auth')),\r\n        }\r\n      : null;\r\n\r\n    const tokenData: PushTokenInsert = {\r\n      user_id: user.id,\r\n      token: JSON.stringify({ endpoint, keys }),\r\n      platform: 'web',\r\n      is_active: true,\r\n    };\r\n\r\n    // TODO: Implement push_tokens functionality when push notifications are activated\r\n    notificationLogger.info(\r\n      'Push subscription stored (placeholder):',\r\n      tokenData\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Send in-app notification\r\n   */\r\n  showInAppNotification(notification: NotificationMessage): void {\r\n    const id = crypto.randomUUID();\r\n    const notificationWithId = { ...notification, id };\r\n\r\n    this.inAppNotifications.value.unshift(notificationWithId);\r\n\r\n    // Auto-remove after 5 seconds unless requireInteraction is true\r\n    if (!notification.requireInteraction) {\r\n      setTimeout(() => {\r\n        this.removeInAppNotification(id);\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove in-app notification\r\n   */\r\n  removeInAppNotification(id: string): void {\r\n    const index = this.inAppNotifications.value.findIndex(n => n.id === id);\r\n    if (index !== -1) {\r\n      this.inAppNotifications.value.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all in-app notifications\r\n   */\r\n  clearAllInAppNotifications(): void {\r\n    this.inAppNotifications.value = [];\r\n  }\r\n\r\n  /**\r\n   * Get in-app notifications\r\n   */\r\n  getInAppNotifications() {\r\n    return this.inAppNotifications;\r\n  }\r\n\r\n  /**\r\n   * Send browser notification\r\n   */\r\n  async showBrowserNotification(\r\n    notification: NotificationMessage\r\n  ): Promise<void> {\r\n    if (Notification.permission !== 'granted') {\r\n      return;\r\n    }\r\n\r\n    const options: NotificationOptions = {\r\n      body: notification.body,\r\n      icon: notification.icon || '/icons/icon-192x192.png',\r\n      badge: notification.badge || '/icons/icon-192x192.png',\r\n      tag: notification.tag,\r\n      requireInteraction: notification.requireInteraction,\r\n      data: notification.data,\r\n      actions: notification.actions,\r\n    };\r\n\r\n    new Notification(notification.title, options);\r\n  }\r\n\r\n  /**\r\n   * Send push notification (server-side would call this)\r\n   */\r\n  async sendPushNotification(\r\n    userId: string,\r\n    notification: NotificationMessage\r\n  ): Promise<void> {\r\n    // In a real implementation, this would be called from your backend\r\n    // Here we simulate it by showing a browser notification\r\n    const authStore = useAuthStore();\r\n    if (authStore.user?.id === userId) {\r\n      await this.showBrowserNotification(notification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load notification settings for current user\r\n   */\r\n  async loadNotificationSettings(): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const user = authStore.user;\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!user || !practiceId) {\r\n      return;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('notification_settings')\r\n      .select('*')\r\n      .eq('user_id', user.id)\r\n      .eq('practice_id', practiceId);\r\n\r\n    if (error) {\r\n      notificationLogger.error('Failed to load notification settings:', error);\r\n      return;\r\n    }\r\n\r\n    data?.forEach(setting => {\r\n      const key = `${setting.notification_type}_${setting.channel}`;\r\n      this.settings[key] = setting;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update notification settings\r\n   */\r\n  async updateNotificationSetting(\r\n    notificationType: NotificationType,\r\n    channel: NotificationChannel,\r\n    isEnabled: boolean,\r\n    settings?: any\r\n  ): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const user = authStore.user;\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!user || !practiceId) {\r\n      return;\r\n    }\r\n\r\n    const settingData: NotificationSettingsInsert = {\r\n      user_id: user.id,\r\n      practice_id: practiceId,\r\n      notification_type: notificationType,\r\n      channel,\r\n      is_enabled: isEnabled,\r\n      settings: settings || {},\r\n    };\r\n\r\n    const { error } = await supabase\r\n      .from('notification_settings')\r\n      .upsert(settingData, {\r\n        onConflict: 'user_id,practice_id,notification_type,channel',\r\n        ignoreDuplicates: false,\r\n      });\r\n\r\n    if (error) {\r\n      notificationLogger.error('Failed to update notification setting:', error);\r\n      return;\r\n    }\r\n\r\n    // Update local cache\r\n    const key = `${notificationType}_${channel}`;\r\n    this.settings[key] = {\r\n      ...settingData,\r\n      id: crypto.randomUUID(),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if notification is enabled\r\n   */\r\n  isNotificationEnabled(\r\n    notificationType: NotificationType,\r\n    channel: NotificationChannel\r\n  ): boolean {\r\n    const key = `${notificationType}_${channel}`;\r\n    return this.settings[key]?.is_enabled ?? true; // Default to enabled\r\n  }\r\n\r\n  /**\r\n   * Send stock alert notification\r\n   */\r\n  async sendStockAlert(\r\n    productName: string,\r\n    currentStock: number,\r\n    minimumStock: number\r\n  ): Promise<void> {\r\n    const notification: NotificationMessage = {\r\n      title: 'Voorraad Waarschuwing',\r\n      body: `${productName} heeft lage voorraad (${currentStock}/${minimumStock})`,\r\n      type: 'stock_alert',\r\n      icon: '/icons/warning.png',\r\n      tag: 'stock-alert',\r\n      requireInteraction: true,\r\n      data: { productName, currentStock, minimumStock },\r\n    };\r\n\r\n    if (this.isNotificationEnabled('stock_alert', 'in_app')) {\r\n      this.showInAppNotification(notification);\r\n    }\r\n\r\n    if (this.isNotificationEnabled('stock_alert', 'push')) {\r\n      await this.showBrowserNotification(notification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send order update notification\r\n   */\r\n  async sendOrderUpdate(\r\n    orderNumber: string,\r\n    status: string,\r\n    message?: string\r\n  ): Promise<void> {\r\n    const notification: NotificationMessage = {\r\n      title: 'Bestelling Update',\r\n      body: message || `Bestelling ${orderNumber} is ${status}`,\r\n      type: 'order_update',\r\n      icon: '/icons/order.png',\r\n      tag: `order-${orderNumber}`,\r\n      data: { orderNumber, status },\r\n    };\r\n\r\n    if (this.isNotificationEnabled('order_update', 'in_app')) {\r\n      this.showInAppNotification(notification);\r\n    }\r\n\r\n    if (this.isNotificationEnabled('order_update', 'push')) {\r\n      await this.showBrowserNotification(notification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send system notification\r\n   */\r\n  async sendSystemNotification(\r\n    title: string,\r\n    message: string,\r\n    data?: any\r\n  ): Promise<void> {\r\n    const notification: NotificationMessage = {\r\n      title,\r\n      body: message,\r\n      type: 'system_notification',\r\n      icon: '/icons/system.png',\r\n      data,\r\n    };\r\n\r\n    if (this.isNotificationEnabled('system_notification', 'in_app')) {\r\n      this.showInAppNotification(notification);\r\n    }\r\n\r\n    if (this.isNotificationEnabled('system_notification', 'push')) {\r\n      await this.showBrowserNotification(notification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send reminder notification\r\n   */\r\n  async sendReminder(\r\n    title: string,\r\n    message: string,\r\n    data?: any\r\n  ): Promise<void> {\r\n    const notification: NotificationMessage = {\r\n      title,\r\n      body: message,\r\n      type: 'reminder',\r\n      icon: '/icons/reminder.png',\r\n      requireInteraction: true,\r\n      data,\r\n    };\r\n\r\n    if (this.isNotificationEnabled('reminder', 'in_app')) {\r\n      this.showInAppNotification(notification);\r\n    }\r\n\r\n    if (this.isNotificationEnabled('reminder', 'push')) {\r\n      await this.showBrowserNotification(notification);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Schedule periodic stock checks\r\n   */\r\n  startStockMonitoring(): void {\r\n    // Check stock levels every hour\r\n    setInterval(async () => {\r\n      await this.checkStockLevels();\r\n    }, 60 * 60 * 1000);\r\n\r\n    // Initial check\r\n    this.checkStockLevels();\r\n  }\r\n\r\n  /**\r\n   * Check stock levels and send alerts\r\n   */\r\n  private async checkStockLevels(): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data: lowStockItems, error } = await supabase\r\n        .from('product_list_items')\r\n        .select(\r\n          `\r\n          *,\r\n          products (name),\r\n          product_lists!inner (practice_id)\r\n        `\r\n        )\r\n        .eq('product_lists.practice_id', practiceId)\r\n        .filter('current_stock', 'lt', supabase.raw('minimum_stock'));\r\n\r\n      if (error) {\r\n        notificationLogger.error('Failed to check stock levels:', error);\r\n        return;\r\n      }\r\n\r\n      for (const item of lowStockItems || []) {\r\n        await this.sendStockAlert(\r\n          item.products?.name || 'Unknown Product',\r\n          item.current_stock,\r\n          item.minimum_stock\r\n        );\r\n      }\r\n    } catch (error) {\r\n      notificationLogger.error('Stock monitoring error:', error);\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n    const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\n  private arrayBufferToBase64(buffer: ArrayBuffer | null): string {\r\n    if (!buffer) {\r\n      return '';\r\n    }\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n}\r\n\r\nexport const notificationService = new NotificationService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Bestellijst' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ShoppingCart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 182,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 182,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5019, 5022], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5019, 5022], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 477,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 477,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13037, 13040], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13037, 13040], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, reactive } from 'vue';\r\nimport { supabase } from '@/services/supabase';\r\nimport type {\r\n  Bestellijst,\r\n  BestellijstItem,\r\n  Product,\r\n  ShoppingCart,\r\n  ShoppingCartItem,\r\n} from '@/types/supabase';\r\nimport { useAuthStore } from '@/stores/auth';\r\nimport { offlineLogger } from 'src/utils/logger';\r\nimport { analyticsService } from './analytics';\r\nimport type { OfflineAction, OfflineData } from '@/types/offline';\r\n\r\nexport class OfflineService {\r\n  private isOnline = ref(navigator.onLine);\r\n  private offlineActions = ref<OfflineAction[]>([]);\r\n  private offlineData = reactive<OfflineData>({\r\n    bestellijsten: [],\r\n    bestellijst_items: [],\r\n    products: [],\r\n    shopping_carts: [],\r\n    shopping_cart_items: [],\r\n    last_sync: null,\r\n  });\r\n  private syncInProgress = ref(false);\r\n  private maxRetries = 3;\r\n  private syncInterval: NodeJS.Timeout | null = null;\r\n\r\n  constructor() {\r\n    this.setupNetworkListeners();\r\n    this.loadOfflineData();\r\n    this.startPeriodicSync();\r\n  }\r\n\r\n  /**\r\n   * Setup network status listeners\r\n   */\r\n  private setupNetworkListeners(): void {\r\n    window.addEventListener('online', () => {\r\n      this.isOnline.value = true;\r\n      this.syncWhenOnline();\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      this.isOnline.value = false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if device is online\r\n   */\r\n  getOnlineStatus(): boolean {\r\n    return this.isOnline.value;\r\n  }\r\n\r\n  /**\r\n   * Sync data when coming back online\r\n   */\r\n  private async syncWhenOnline(): Promise<void> {\r\n    if (this.isOnline.value && !this.syncInProgress.value) {\r\n      await this.syncToServer();\r\n      await this.downloadLatestData();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Download latest data for offline use\r\n   */\r\n  async downloadLatestData(): Promise<void> {\r\n    if (!this.isOnline.value) {\r\n      return;\r\n    }\r\n\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n\r\n    if (!practiceId) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Download bestellijsten\r\n      const { data: bestellijsten, error: bestellijstenError } = await supabase\r\n        .from('product_lists')\r\n        .select('*')\r\n        .eq('practice_id', practiceId);\r\n\r\n      if (bestellijstenError) throw bestellijstenError;\r\n\r\n      // Download bestellijst items\r\n      const { data: items, error: itemsError } = await supabase\r\n        .from('product_list_items')\r\n        .select(\r\n          `\r\n          *,\r\n          product_lists!inner (practice_id)\r\n        `\r\n        )\r\n        .eq('product_lists.practice_id', practiceId);\r\n\r\n      if (itemsError) throw itemsError;\r\n\r\n      // Download products (only those in use)\r\n      const productIds = [\r\n        ...new Set(items?.map(item => item.product_id) || []),\r\n      ];\r\n      let products: Product[] = [];\r\n\r\n      if (productIds.length > 0) {\r\n        const { data: productsData, error: productsError } = await supabase\r\n          .from('products')\r\n          .select('*')\r\n          .in('id', productIds);\r\n\r\n        if (productsError) throw productsError;\r\n        products = productsData || [];\r\n      }\r\n\r\n      // Download shopping carts\r\n      const { data: carts, error: cartsError } = await supabase\r\n        .from('shopping_carts')\r\n        .select('*')\r\n        .eq('practice_id', practiceId);\r\n\r\n      if (cartsError) throw cartsError;\r\n\r\n      // Download shopping cart items\r\n      const cartIds = carts?.map(cart => cart.id) || [];\r\n      let cartItems: ShoppingCartItem[] = [];\r\n\r\n      if (cartIds.length > 0) {\r\n        const { data: cartItemsData, error: cartItemsError } = await supabase\r\n          .from('shopping_cart_items')\r\n          .select('*')\r\n          .in('cart_id', cartIds);\r\n\r\n        if (cartItemsError) throw cartItemsError;\r\n        cartItems = cartItemsData || [];\r\n      }\r\n\r\n      // Update offline data\r\n      this.offlineData.bestellijsten = bestellijsten || [];\r\n      this.offlineData.bestellijst_items =\r\n        items?.map(item => ({\r\n          ...item,\r\n          last_counted: item.last_counted,\r\n        })) || [];\r\n      this.offlineData.products = products;\r\n      this.offlineData.shopping_carts = carts || [];\r\n      this.offlineData.shopping_cart_items = cartItems;\r\n      this.offlineData.last_sync = new Date();\r\n\r\n      // Save to localStorage\r\n      this.saveOfflineData();\r\n\r\n      // Track analytics\r\n      analyticsService.trackEvent('offline_data_downloaded', {\r\n        bestellijsten_count: this.offlineData.bestellijsten.length,\r\n        items_count: this.offlineData.bestellijst_items.length,\r\n        products_count: this.offlineData.products.length,\r\n      });\r\n    } catch (error) {\r\n      offlineLogger.error('Failed to download offline data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get offline data\r\n   */\r\n  getOfflineData(): OfflineData {\r\n    return this.offlineData;\r\n  }\r\n\r\n  /**\r\n   * Add action to offline queue\r\n   */\r\n  addOfflineAction(\r\n    type: OfflineAction['type'],\r\n    table: string,\r\n    data: any\r\n  ): void {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.selectedPractice?.id;\r\n    const userId = authStore.user?.id;\r\n\r\n    if (!practiceId || !userId) {\r\n      offlineLogger.error('Cannot add offline action - no practice or user');\r\n      return;\r\n    }\r\n\r\n    const action: OfflineAction = {\r\n      id: crypto.randomUUID(),\r\n      type,\r\n      table,\r\n      data,\r\n      timestamp: new Date(),\r\n      retry_count: 0,\r\n      practice_id: practiceId,\r\n      user_id: userId,\r\n    };\r\n\r\n    this.offlineActions.value.push(action);\r\n    this.saveOfflineActions();\r\n\r\n    // Try to sync immediately if online\r\n    if (this.isOnline.value) {\r\n      this.syncToServer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync offline actions to server\r\n   */\r\n  async syncToServer(): Promise<void> {\r\n    if (\r\n      !this.isOnline.value ||\r\n      this.syncInProgress.value ||\r\n      this.offlineActions.value.length === 0\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    this.syncInProgress.value = true;\r\n\r\n    try {\r\n      offlineLogger.info(\r\n        `Syncing ${this.offlineActions.value.length} offline actions...`\r\n      );\r\n\r\n      const actionsToSync = [...this.offlineActions.value];\r\n      const syncedActions: string[] = [];\r\n      const failedActions: OfflineAction[] = [];\r\n\r\n      for (const action of actionsToSync) {\r\n        try {\r\n          await this.syncSingleAction(action);\r\n          syncedActions.push(action.id);\r\n        } catch (error) {\r\n          offlineLogger.error('Failed to sync action:', action, error);\r\n\r\n          // Increment retry count\r\n          action.retry_count++;\r\n\r\n          if (action.retry_count >= this.maxRetries) {\r\n            offlineLogger.error('Max retries reached for action:', action);\r\n            // Remove from queue after max retries\r\n            syncedActions.push(action.id);\r\n          } else {\r\n            failedActions.push(action);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove synced actions\r\n      this.offlineActions.value = this.offlineActions.value.filter(\r\n        action => !syncedActions.includes(action.id)\r\n      );\r\n\r\n      // Update failed actions with new retry counts\r\n      failedActions.forEach(failedAction => {\r\n        const index = this.offlineActions.value.findIndex(\r\n          a => a.id === failedAction.id\r\n        );\r\n        if (index !== -1) {\r\n          this.offlineActions.value[index] = failedAction;\r\n        }\r\n      });\r\n\r\n      this.saveOfflineActions();\r\n\r\n      offlineLogger.info(\r\n        `Sync completed. Synced: ${syncedActions.length}, Failed: ${failedActions.length}`\r\n      );\r\n\r\n      // Track analytics\r\n      analyticsService.trackEvent('offline_sync_completed', {\r\n        synced_count: syncedActions.length,\r\n        failed_count: failedActions.length,\r\n        remaining_count: this.offlineActions.value.length,\r\n      });\r\n    } catch (error) {\r\n      offlineLogger.error('Sync process failed:', error);\r\n    } finally {\r\n      this.syncInProgress.value = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync a single action to server\r\n   */\r\n  private async syncSingleAction(action: OfflineAction): Promise<void> {\r\n    switch (action.type) {\r\n      case 'create':\r\n        await this.syncCreateAction(action);\r\n        break;\r\n      case 'update':\r\n        await this.syncUpdateAction(action);\r\n        break;\r\n      case 'delete':\r\n        await this.syncDeleteAction(action);\r\n        break;\r\n      default:\r\n        throw new Error($t('offline.unknownactiontypeactiontype'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync create action\r\n   */\r\n  private async syncCreateAction(action: OfflineAction): Promise<void> {\r\n    const { error } = await supabase.from(action.table).insert(action.data);\r\n\r\n    if (error) {\r\n      throw new Error($t('offline.failedtosynccreate'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync update action\r\n   */\r\n  private async syncUpdateAction(action: OfflineAction): Promise<void> {\r\n    const { id, ...updateData } = action.data;\r\n\r\n    const { error } = await supabase\r\n      .from(action.table)\r\n      .update(updateData)\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      throw new Error($t('offline.failedtosyncupdate'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync delete action\r\n   */\r\n  private async syncDeleteAction(action: OfflineAction): Promise<void> {\r\n    const { error } = await supabase\r\n      .from(action.table)\r\n      .delete()\r\n      .eq('id', action.data.id);\r\n\r\n    if (error) {\r\n      throw new Error($t('offline.failedtosyncdelete'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update bestellijst item offline\r\n   */\r\n  updateBestellijstItemOffline(\r\n    itemId: string,\r\n    updates: Partial<BestellijstItem>\r\n  ): void {\r\n    // Update local data\r\n    const index = this.offlineData.bestellijst_items.findIndex(\r\n      item => item.id === itemId\r\n    );\r\n    if (index !== -1) {\r\n      this.offlineData.bestellijst_items[index] = {\r\n        ...this.offlineData.bestellijst_items[index],\r\n        ...updates,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n      this.saveOfflineData();\r\n    }\r\n\r\n    // Add to sync queue\r\n    this.addOfflineAction('update', 'product_list_items', {\r\n      id: itemId,\r\n      ...updates,\r\n      updated_at: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add product to cart offline\r\n   */\r\n  addToCartOffline(cartId: string, productId: string, quantity: number): void {\r\n    // Update local data\r\n    const existingItem = this.offlineData.shopping_cart_items.find(\r\n      item => item.cart_id === cartId && item.product_id === productId\r\n    );\r\n\r\n    if (existingItem) {\r\n      existingItem.quantity += quantity;\r\n      existingItem.updated_at = new Date().toISOString();\r\n\r\n      this.addOfflineAction('update', 'shopping_cart_items', {\r\n        id: existingItem.id,\r\n        quantity: existingItem.quantity,\r\n        updated_at: existingItem.updated_at,\r\n      });\r\n    } else {\r\n      const newItem: ShoppingCartItem = {\r\n        id: crypto.randomUUID(),\r\n        cart_id: cartId,\r\n        product_id: productId,\r\n        quantity,\r\n        notes: null,\r\n        suggested_by: 'manual',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      this.offlineData.shopping_cart_items.push(newItem);\r\n      this.addOfflineAction('create', 'shopping_cart_items', newItem);\r\n    }\r\n\r\n    this.saveOfflineData();\r\n  }\r\n\r\n  /**\r\n   * Save offline data to localStorage\r\n   */\r\n  private saveOfflineData(): void {\r\n    try {\r\n      localStorage.setItem(\r\n        'remcura_offline_data',\r\n        JSON.stringify({\r\n          ...this.offlineData,\r\n          last_sync: this.offlineData.last_sync?.toISOString(),\r\n        })\r\n      );\r\n    } catch (error) {\r\n      offlineLogger.error('Failed to save offline data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load offline data from localStorage\r\n   */\r\n  private loadOfflineData(): void {\r\n    try {\r\n      const saved = localStorage.getItem('remcura_offline_data');\r\n      if (saved) {\r\n        const data = JSON.parse(saved);\r\n        Object.assign(this.offlineData, {\r\n          ...data,\r\n          last_sync: data.last_sync ? new Date(data.last_sync) : null,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      offlineLogger.error('Failed to load offline data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save offline actions to localStorage\r\n   */\r\n  private saveOfflineActions(): void {\r\n    try {\r\n      localStorage.setItem(\r\n        'remcura_offline_actions',\r\n        JSON.stringify(\r\n          this.offlineActions.value.map(action => ({\r\n            ...action,\r\n            timestamp: action.timestamp.toISOString(),\r\n          }))\r\n        )\r\n      );\r\n    } catch (error) {\r\n      offlineLogger.error('Failed to save offline actions:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load offline actions from localStorage\r\n   */\r\n  private loadOfflineActions(): void {\r\n    try {\r\n      const saved = localStorage.getItem('remcura_offline_actions');\r\n      if (saved) {\r\n        const actions = JSON.parse(saved);\r\n        this.offlineActions.value = actions.map((action: any) => ({\r\n          ...action,\r\n          timestamp: new Date(action.timestamp),\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      offlineLogger.error('Failed to load offline actions:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start periodic sync\r\n   */\r\n  private startPeriodicSync(): void {\r\n    // Sync every 5 minutes when online\r\n    this.syncInterval = setInterval(() => {\r\n      if (this.isOnline.value && this.offlineActions.value.length > 0) {\r\n        this.syncToServer();\r\n      }\r\n    }, 5 * 60 * 1000);\r\n  }\r\n\r\n  /**\r\n   * Clear all offline data\r\n   */\r\n  clearOfflineData(): void {\r\n    this.offlineData.bestellijsten = [];\r\n    this.offlineData.bestellijst_items = [];\r\n    this.offlineData.products = [];\r\n    this.offlineData.shopping_carts = [];\r\n    this.offlineData.shopping_cart_items = [];\r\n    this.offlineData.last_sync = null;\r\n\r\n    this.offlineActions.value = [];\r\n\r\n    localStorage.removeItem('remcura_offline_data');\r\n    localStorage.removeItem('remcura_offline_actions');\r\n  }\r\n\r\n  /**\r\n   * Get pending sync count\r\n   */\r\n  getPendingSyncCount(): number {\r\n    return this.offlineActions.value.length;\r\n  }\r\n\r\n  /**\r\n   * Get sync status\r\n   */\r\n  getSyncStatus() {\r\n    return {\r\n      isOnline: this.isOnline.value,\r\n      syncInProgress: this.syncInProgress.value,\r\n      pendingActions: this.offlineActions.value.length,\r\n      lastSync: this.offlineData.last_sync,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Force sync now\r\n   */\r\n  async forceSyncNow(): Promise<void> {\r\n    if (this.isOnline.value) {\r\n      await this.syncToServer();\r\n      await this.downloadLatestData();\r\n    } else {\r\n      throw new Error($t('offline.cannotsyncwhileoffline'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up resources\r\n   */\r\n  destroy(): void {\r\n    if (this.syncInterval) {\r\n      clearInterval(this.syncInterval);\r\n      this.syncInterval = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const offlineService = new OfflineService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\action-queue.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [211, 214], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [211, 214], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1153, 1156], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1153, 1156], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 299,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 299,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7011, 7014], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7011, 7014], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport { ServiceErrorHandler } from 'src/utils/service-error-handler';\n\nexport interface OfflineAction {\n  id: string;\n  type: 'create' | 'update' | 'delete';\n  table: string;\n  data: any;\n  timestamp: Date;\n  retry_count: number;\n  practice_id: string;\n  user_id: string;\n  priority?: number; // Lower numbers = higher priority\n}\n\nexport interface ActionSyncResult {\n  success: boolean;\n  action: OfflineAction;\n  error?: Error;\n}\n\nexport interface ActionExecutor {\n  (action: OfflineAction): Promise<void>;\n}\n\nexport class ActionQueue {\n  private actions = ref<OfflineAction[]>([]);\n  private readonly maxRetries: number;\n  private readonly storageKey = 'offline_actions';\n  private executors: Map<string, ActionExecutor> = new Map();\n\n  constructor(maxRetries = 3) {\n    this.maxRetries = maxRetries;\n    this.loadFromStorage();\n  }\n\n  /**\n   * Register an executor for a specific table\n   */\n  registerExecutor(table: string, executor: ActionExecutor): void {\n    this.executors.set(table, executor);\n  }\n\n  /**\n   * Add action to the queue\n   */\n  addAction(\n    type: OfflineAction['type'],\n    table: string,\n    data: any,\n    practiceId: string,\n    userId: string,\n    priority = 5\n  ): string {\n    const action: OfflineAction = {\n      id: crypto.randomUUID(),\n      type,\n      table,\n      data,\n      timestamp: new Date(),\n      retry_count: 0,\n      practice_id: practiceId,\n      user_id: userId,\n      priority,\n    };\n\n    this.actions.value.push(action);\n    this.sortActionsByPriority();\n    this.saveToStorage();\n\n    // Offline action added - debug logging removed\n    return action.id;\n  }\n\n  /**\n   * Get all actions\n   */\n  get allActions() {\n    return this.actions.value;\n  }\n\n  /**\n   * Get actions count\n   */\n  get count(): number {\n    return this.actions.value.length;\n  }\n\n  /**\n   * Get failed actions (those that have reached max retries)\n   */\n  get failedActions(): OfflineAction[] {\n    return this.actions.value.filter(\n      action => action.retry_count >= this.maxRetries\n    );\n  }\n\n  /**\n   * Get pending actions (those that haven't reached max retries)\n   */\n  get pendingActions(): OfflineAction[] {\n    return this.actions.value.filter(\n      action => action.retry_count < this.maxRetries\n    );\n  }\n\n  /**\n   * Execute all pending actions\n   */\n  async executeAll(): Promise<ActionSyncResult[]> {\n    const results: ActionSyncResult[] = [];\n    const actionsToProcess = [...this.pendingActions];\n\n    for (const action of actionsToProcess) {\n      const result = await this.executeAction(action);\n      results.push(result);\n\n      if (result.success) {\n        this.removeAction(action.id);\n      } else {\n        this.incrementRetryCount(action.id);\n      }\n    }\n\n    this.saveToStorage();\n    return results;\n  }\n\n  /**\n   * Execute a single action\n   */\n  private async executeAction(\n    action: OfflineAction\n  ): Promise<ActionSyncResult> {\n    const executor = this.executors.get(action.table);\n\n    if (!executor) {\n      const error = new Error($t('actionqueu.noexecutorregisteredfor'));\n      ServiceErrorHandler.handle(\n        error,\n        {\n          service: 'ActionQueue',\n          operation: 'executeAction',\n          practiceId: action.practice_id,\n          userId: action.user_id,\n          metadata: { actionId: action.id, table: action.table },\n        },\n        { rethrow: false }\n      );\n\n      return {\n        success: false,\n        action,\n        error,\n      };\n    }\n\n    try {\n      await executor(action);\n      return {\n        success: true,\n        action,\n      };\n    } catch (error) {\n      ServiceErrorHandler.handle(\n        error,\n        {\n          service: 'ActionQueue',\n          operation: 'executeAction',\n          practiceId: action.practice_id,\n          userId: action.user_id,\n          metadata: {\n            actionId: action.id,\n            table: action.table,\n            retryCount: action.retry_count,\n          },\n        },\n        { rethrow: false }\n      );\n\n      return {\n        success: false,\n        action,\n        error: error instanceof Error ? error : new Error(String(error)),\n      };\n    }\n  }\n\n  /**\n   * Remove action from queue\n   */\n  removeAction(actionId: string): boolean {\n    const index = this.actions.value.findIndex(\n      action => action.id === actionId\n    );\n    if (index !== -1) {\n      this.actions.value.splice(index, 1);\n      this.saveToStorage();\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Increment retry count for an action\n   */\n  private incrementRetryCount(actionId: string): void {\n    const action = this.actions.value.find(a => a.id === actionId);\n    if (action) {\n      action.retry_count++;\n\n      // If max retries reached, log it\n      if (action.retry_count >= this.maxRetries) {\n        console.error('Max retries reached for action:', action);\n        ServiceErrorHandler.handle(\n          new Error($t('actionqueu.actionfailedafterthismaxretri')),\n          {\n            service: 'ActionQueue',\n            operation: 'incrementRetryCount',\n            practiceId: action.practice_id,\n            userId: action.user_id,\n            metadata: { actionId: action.id, table: action.table },\n          },\n          { rethrow: false, logLevel: 'warn' }\n        );\n      }\n    }\n  }\n\n  /**\n   * Clear all actions\n   */\n  clear(): void {\n    this.actions.value = [];\n    this.saveToStorage();\n  }\n\n  /**\n   * Clear failed actions only\n   */\n  clearFailed(): void {\n    this.actions.value = this.actions.value.filter(\n      action => action.retry_count < this.maxRetries\n    );\n    this.saveToStorage();\n  }\n\n  /**\n   * Retry a specific action\n   */\n  retryAction(actionId: string): void {\n    const action = this.actions.value.find(a => a.id === actionId);\n    if (action) {\n      action.retry_count = 0;\n      this.saveToStorage();\n    }\n  }\n\n  /**\n   * Sort actions by priority (lower number = higher priority)\n   */\n  private sortActionsByPriority(): void {\n    this.actions.value.sort((a, b) => {\n      const priorityA = a.priority || 5;\n      const priorityB = b.priority || 5;\n\n      if (priorityA !== priorityB) {\n        return priorityA - priorityB;\n      }\n\n      // If same priority, sort by timestamp (older first)\n      return a.timestamp.getTime() - b.timestamp.getTime();\n    });\n  }\n\n  /**\n   * Save actions to localStorage\n   */\n  private saveToStorage(): void {\n    try {\n      const serializedActions = this.actions.value.map(action => ({\n        ...action,\n        timestamp: action.timestamp.toISOString(),\n      }));\n      localStorage.setItem(this.storageKey, JSON.stringify(serializedActions));\n    } catch (error) {\n      console.error('Failed to save actions to storage:', error);\n    }\n  }\n\n  /**\n   * Load actions from localStorage\n   */\n  private loadFromStorage(): void {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      if (stored) {\n        const parsedActions = JSON.parse(stored);\n        this.actions.value = parsedActions.map((action: any) => ({\n          ...action,\n          timestamp: new Date(action.timestamp),\n        }));\n        this.sortActionsByPriority();\n      }\n    } catch (error) {\n      console.error('Failed to load actions from storage:', error);\n      this.actions.value = [];\n    }\n  }\n}\n\n// Export singleton instance\nexport const actionQueue = new ActionQueue();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\data-sync.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ref' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'computed' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2087, 2090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2087, 2090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'successCount' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 156,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 156,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed } from 'vue';\nimport { useAuthStore } from 'src/stores/auth';\nimport { networkMonitor, type NetworkStatus } from './network-monitor';\nimport { actionQueue, type OfflineAction } from './action-queue';\nimport { dataSyncManager, type SyncProgressCallback } from './data-sync';\nimport { supabase } from 'src/boot/supabase';\n\nexport interface OfflineServiceConfig {\n  autoSyncInterval?: number; // minutes\n  maxRetries?: number;\n  enablePeriodicSync?: boolean;\n}\n\nexport class OfflineService {\n  private config: OfflineServiceConfig;\n  private periodicSyncTimer: NodeJS.Timeout | null = null;\n\n  constructor(config: OfflineServiceConfig = {}) {\n    this.config = {\n      autoSyncInterval: 15, // Default 15 minutes\n      maxRetries: 3,\n      enablePeriodicSync: true,\n      ...config,\n    };\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the offline service\n   */\n  private initialize(): void {\n    // Setup network status listener\n    networkMonitor.addListener(this.handleNetworkChange.bind(this));\n\n    // Register action executors\n    this.registerActionExecutors();\n\n    // Start periodic sync if enabled\n    if (this.config.enablePeriodicSync) {\n      this.startPeriodicSync();\n    }\n  }\n\n  /**\n   * Get network status\n   */\n  get isOnline(): boolean {\n    return networkMonitor.isOnline;\n  }\n\n  /**\n   * Get reactive network status\n   */\n  get networkStatus() {\n    return networkMonitor.networkStatus;\n  }\n\n  /**\n   * Get offline data\n   */\n  get offlineData() {\n    return dataSyncManager.offlineData;\n  }\n\n  /**\n   * Get pending actions count\n   */\n  get pendingActionsCount(): number {\n    return actionQueue.count;\n  }\n\n  /**\n   * Get failed actions\n   */\n  get failedActions() {\n    return actionQueue.failedActions;\n  }\n\n  /**\n   * Get sync status\n   */\n  get isSyncing(): boolean {\n    return dataSyncManager.isSyncing;\n  }\n\n  /**\n   * Get last sync time\n   */\n  get lastSync(): Date | null {\n    return dataSyncManager.lastSync;\n  }\n\n  /**\n   * Add an offline action\n   */\n  addAction(\n    type: OfflineAction['type'],\n    table: string,\n    data: any,\n    priority = 5\n  ): string {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n    const userId = authStore.user?.id;\n\n    if (!practiceId || !userId) {\n      throw new Error($t('index.cannotaddofflineaction'));\n    }\n\n    const actionId = actionQueue.addAction(\n      type,\n      table,\n      data,\n      practiceId,\n      userId,\n      priority\n    );\n\n    // Try to sync immediately if online\n    if (this.isOnline) {\n      this.syncActions();\n    }\n\n    return actionId;\n  }\n\n  /**\n   * Download latest data for offline use\n   */\n  async downloadData(onProgress?: SyncProgressCallback): Promise<void> {\n    const authStore = useAuthStore();\n    const practiceId = authStore.selectedPractice?.id;\n\n    if (!practiceId) {\n      throw new Error($t('index.nopracticeselectedfor'));\n    }\n\n    if (!this.isOnline) {\n      throw new Error($t('index.cannotdownloaddatadevice'));\n    }\n\n    await dataSyncManager.downloadData(practiceId, onProgress);\n  }\n\n  /**\n   * Sync pending actions to server\n   */\n  async syncActions(): Promise<boolean> {\n    if (!this.isOnline || actionQueue.count === 0) {\n      return false;\n    }\n\n    try {\n      const results = await actionQueue.executeAll();\n      const successCount = results.filter(r => r.success).length;\n      const failureCount = results.filter(r => !r.success).length;\n\n      // Sync completed - debug logging removed\n\n      return failureCount === 0;\n    } catch (error) {\n      console.error('Error during action sync:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Full sync - download data and sync actions\n   */\n  async fullSync(onProgress?: SyncProgressCallback): Promise<void> {\n    if (!this.isOnline) {\n      throw new Error($t('index.cannotsyncdeviceis'));\n    }\n\n    // First sync actions\n    await this.syncActions();\n\n    // Then download latest data\n    await this.downloadData(onProgress);\n  }\n\n  /**\n   * Clear all offline data and actions\n   */\n  clearAll(): void {\n    dataSyncManager.clearData();\n    actionQueue.clear();\n  }\n\n  /**\n   * Retry failed actions\n   */\n  retryFailedActions(): void {\n    this.failedActions.forEach(action => {\n      actionQueue.retryAction(action.id);\n    });\n\n    if (this.isOnline) {\n      this.syncActions();\n    }\n  }\n\n  /**\n   * Get offline statistics\n   */\n  getStats() {\n    return {\n      network: {\n        isOnline: this.isOnline,\n        lastCheck: new Date(),\n      },\n      data: dataSyncManager.getStats(),\n      actions: {\n        pending: actionQueue.pendingActions.length,\n        failed: actionQueue.failedActions.length,\n        total: actionQueue.count,\n      },\n    };\n  }\n\n  /**\n   * Handle network status changes\n   */\n  private handleNetworkChange(status: NetworkStatus): void {\n    // Network status change handled\n\n    if (status === 'online') {\n      // When coming back online, sync actions and optionally refresh data\n      this.syncActions();\n    }\n  }\n\n  /**\n   * Register action executors for different tables\n   */\n  private registerActionExecutors(): void {\n    // Product list items executor\n    actionQueue.registerExecutor('product_list_items', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('product_list_items').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('product_list_items')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('product_list_items')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n\n    // Shopping cart items executor\n    actionQueue.registerExecutor('shopping_cart_items', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('shopping_cart_items').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('shopping_cart_items')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('shopping_cart_items')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n\n    // Shopping carts executor\n    actionQueue.registerExecutor('shopping_carts', async action => {\n      switch (action.type) {\n        case 'create':\n          await supabase.from('shopping_carts').insert([action.data]);\n          break;\n        case 'update':\n          await supabase\n            .from('shopping_carts')\n            .update(action.data)\n            .eq('id', action.data.id);\n          break;\n        case 'delete':\n          await supabase\n            .from('shopping_carts')\n            .delete()\n            .eq('id', action.data.id);\n          break;\n      }\n    });\n  }\n\n  /**\n   * Start periodic sync\n   */\n  private startPeriodicSync(): void {\n    if (this.periodicSyncTimer) {\n      clearInterval(this.periodicSyncTimer);\n    }\n\n    const intervalMs = (this.config.autoSyncInterval || 15) * 60 * 1000;\n\n    this.periodicSyncTimer = setInterval(() => {\n      if (this.isOnline && actionQueue.count > 0) {\n        // Periodic sync triggered\n        this.syncActions();\n      }\n    }, intervalMs);\n  }\n\n  /**\n   * Stop periodic sync\n   */\n  stopPeriodicSync(): void {\n    if (this.periodicSyncTimer) {\n      clearInterval(this.periodicSyncTimer);\n      this.periodicSyncTimer = null;\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    this.stopPeriodicSync();\n    networkMonitor.cleanup();\n  }\n}\n\n// Export singleton instance\nexport const offlineService = new OfflineService();\n\n// Export types and submodules for direct access if needed\nexport { networkMonitor } from './network-monitor';\nexport { actionQueue } from './action-queue';\nexport { dataSyncManager } from './data-sync';\nexport type { OfflineAction, SyncProgressCallback };\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\offline\\network-monitor.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'response' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 97,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\n\nexport type NetworkStatus = 'online' | 'offline';\n\nexport interface NetworkEventListener {\n  (status: NetworkStatus): void;\n}\n\nexport class NetworkMonitor {\n  private status = ref<NetworkStatus>(navigator.onLine ? 'online' : 'offline');\n  private listeners: Set<NetworkEventListener> = new Set();\n\n  constructor() {\n    this.setupEventListeners();\n  }\n\n  /**\n   * Get current network status\n   */\n  get isOnline(): boolean {\n    return this.status.value === 'online';\n  }\n\n  /**\n   * Get reactive network status\n   */\n  get networkStatus() {\n    return this.status;\n  }\n\n  /**\n   * Add listener for network status changes\n   */\n  addListener(listener: NetworkEventListener): () => void {\n    this.listeners.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  /**\n   * Setup native event listeners\n   */\n  private setupEventListeners(): void {\n    const handleOnline = () => {\n      this.status.value = 'online';\n      this.notifyListeners('online');\n    };\n\n    const handleOffline = () => {\n      this.status.value = 'offline';\n      this.notifyListeners('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Cleanup function (can be called manually if needed)\n    this.cleanup = () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }\n\n  /**\n   * Notify all listeners of status change\n   */\n  private notifyListeners(status: NetworkStatus): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener(status);\n      } catch (error) {\n        console.error('Error in network status listener:', error);\n      }\n    });\n  }\n\n  /**\n   * Cleanup event listeners\n   */\n  public cleanup = () => {\n    // Will be overwritten in setupEventListeners\n  };\n\n  /**\n   * Check actual network connectivity (beyond navigator.onLine)\n   */\n  async checkConnectivity(): Promise<boolean> {\n    if (!navigator.onLine) {\n      return false;\n    }\n\n    try {\n      // Try to fetch a small resource to verify actual connectivity\n      const response = await fetch('/ping', {\n        method: 'HEAD',\n        mode: 'no-cors',\n        timeout: 3000,\n      });\n      return true;\n    } catch {\n      // If custom ping endpoint fails, try a well-known endpoint\n      try {\n        await fetch('https://httpbin.org/status/200', {\n          method: 'HEAD',\n          mode: 'no-cors',\n          timeout: 3000,\n        });\n        return true;\n      } catch {\n        return false;\n      }\n    }\n  }\n}\n\n// Export singleton instance\nexport const networkMonitor = new NetworkMonitor();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\orderOrchestration\\centralOrderService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\orderProcessing.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderItem' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ShoppingCart' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Product' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'emailBody' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 409,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 409,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 490,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 490,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13146, 13149], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13146, 13149], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/services/supabase';\r\nimport type {\r\n  Order,\r\n  OrderInsert,\r\n  OrderItem,\r\n  OrderItemInsert,\r\n  ShoppingCart,\r\n  Product,\r\n  OrderWithItems,\r\n} from '@/types/supabase';\r\nimport { useAuthStore } from '@/stores/auth';\r\n\r\nexport class OrderProcessingService {\r\n  /**\r\n   * Create a new order from shopping cart\r\n   */\r\n  async createOrderFromCart(cartId: string, notes?: string): Promise<Order> {\r\n    const authStore = useAuthStore();\r\n    const user = authStore.user;\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!user || !practiceId) {\r\n      throw new Error($t('orderproce.usernotauthenticatedor'));\r\n    }\r\n\r\n    // Get cart details\r\n    const { data: cart, error: cartError } = await supabase\r\n      .from('shopping_carts')\r\n      .select(\r\n        `\r\n        *,\r\n        shopping_cart_items (\r\n          *,\r\n          products (*)\r\n        )\r\n      `\r\n      )\r\n      .eq('id', cartId)\r\n      .single();\r\n\r\n    if (cartError || !cart) {\r\n      throw new Error($t('orderproce.shoppingcartnotfound'));\r\n    }\r\n\r\n    // Generate order number\r\n    const { data: orderNumber, error: numberError } = await supabase.rpc(\r\n      'generate_order_number',\r\n      { practice_uuid: practiceId }\r\n    );\r\n\r\n    if (numberError || !orderNumber) {\r\n      throw new Error($t('orderproce.failedtogenerateorder'));\r\n    }\r\n\r\n    // Create order\r\n    const orderData: OrderInsert = {\r\n      practice_id: practiceId,\r\n      cart_id: cartId,\r\n      order_number: orderNumber,\r\n      status: 'draft',\r\n      notes: notes,\r\n      created_by: user.id,\r\n    };\r\n\r\n    const { data: order, error: orderError } = await supabase\r\n      .from('orders')\r\n      .insert(orderData)\r\n      .select()\r\n      .single();\r\n\r\n    if (orderError || !order) {\r\n      throw new Error($t('orderproce.failedtocreateorder'));\r\n    }\r\n\r\n    // Create order items from cart items\r\n    if (cart.shopping_cart_items && cart.shopping_cart_items.length > 0) {\r\n      const orderItems: OrderItemInsert[] = cart.shopping_cart_items.map(\r\n        item => ({\r\n          order_id: order.id,\r\n          product_id: item.product_id,\r\n          quantity: item.quantity,\r\n          unit_price: item.products?.price || 0,\r\n          total_price: (item.products?.price || 0) * item.quantity,\r\n          notes: item.notes,\r\n        })\r\n      );\r\n\r\n      const { error: itemsError } = await supabase\r\n        .from('order_items')\r\n        .insert(orderItems);\r\n\r\n      if (itemsError) {\r\n        throw new Error($t('orderproce.failedtocreateorder'));\r\n      }\r\n    }\r\n\r\n    // Update cart status\r\n    await supabase\r\n      .from('shopping_carts')\r\n      .update({ status: 'ordered' })\r\n      .eq('id', cartId);\r\n\r\n    return order;\r\n  }\r\n\r\n  /**\r\n   * Get orders for current practice\r\n   */\r\n  async getOrders(filters?: {\r\n    status?: string;\r\n    supplier_id?: string;\r\n    date_from?: string;\r\n    date_to?: string;\r\n  }): Promise<OrderWithItems[]> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!practiceId) {\r\n      throw new Error($t('orderproce.nopracticeselected'));\r\n    }\r\n\r\n    let query = supabase\r\n      .from('orders')\r\n      .select(\r\n        `\r\n        *,\r\n        order_items (\r\n          *,\r\n          products (*)\r\n        ),\r\n        suppliers (*)\r\n      `\r\n      )\r\n      .eq('practice_id', practiceId)\r\n      .order('order_date', { ascending: false });\r\n\r\n    if (filters?.status) {\r\n      query = query.eq('status', filters.status);\r\n    }\r\n    if (filters?.supplier_id) {\r\n      query = query.eq('supplier_id', filters.supplier_id);\r\n    }\r\n    if (filters?.date_from) {\r\n      query = query.gte('order_date', filters.date_from);\r\n    }\r\n    if (filters?.date_to) {\r\n      query = query.lte('order_date', filters.date_to);\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      throw new Error($t('orderproce.failedtogetorders'));\r\n    }\r\n\r\n    return data || [];\r\n  }\r\n\r\n  /**\r\n   * Update order status\r\n   */\r\n  async updateOrderStatus(\r\n    orderId: string,\r\n    status: string,\r\n    notes?: string\r\n  ): Promise<void> {\r\n    const updateData: Partial<Order> = {\r\n      status,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n    if (notes) {\r\n      updateData.notes = notes;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('orders')\r\n      .update(updateData)\r\n      .eq('id', orderId);\r\n\r\n    if (error) {\r\n      throw new Error($t('orderproce.failedtoupdateorder'));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export order to CSV\r\n   */\r\n  async exportOrderToCSV(orderId: string): Promise<Blob> {\r\n    const orders = await this.getOrders();\r\n    const order = orders.find(o => o.id === orderId);\r\n\r\n    if (!order) {\r\n      throw new Error($t('orderproce.ordernotfound'));\r\n    }\r\n\r\n    const csvHeaders = [\r\n      'Order Number',\r\n      'Product SKU',\r\n      'Product Name',\r\n      'Quantity',\r\n      'Unit Price',\r\n      'Total Price',\r\n      'Notes',\r\n    ];\r\n\r\n    const csvRows =\r\n      order.order_items?.map(item => [\r\n        order.order_number,\r\n        item.products?.sku || '',\r\n        item.products?.name || '',\r\n        item.quantity.toString(),\r\n        (item.unit_price || 0).toFixed(2),\r\n        (item.total_price || 0).toFixed(2),\r\n        item.notes || '',\r\n      ]) || [];\r\n\r\n    const csvContent = [\r\n      csvHeaders.join(','),\r\n      ...csvRows.map(row => row.map(field => `\"${field}\"`).join(',')),\r\n    ].join('\\n');\r\n\r\n    return new Blob([csvContent], { type: 'text/csv' });\r\n  }\r\n\r\n  /**\r\n   * Export multiple orders to CSV\r\n   */\r\n  async exportOrdersToCSV(orderIds: string[]): Promise<Blob> {\r\n    const orders = await this.getOrders();\r\n    const filteredOrders = orders.filter(o => orderIds.includes(o.id));\r\n\r\n    const csvHeaders = [\r\n      'Order Number',\r\n      'Order Date',\r\n      'Status',\r\n      'Supplier',\r\n      'Product SKU',\r\n      'Product Name',\r\n      'Quantity',\r\n      'Unit Price',\r\n      'Total Price',\r\n      'Order Notes',\r\n      'Item Notes',\r\n    ];\r\n\r\n    const csvRows: string[][] = [];\r\n\r\n    filteredOrders.forEach(order => {\r\n      if (order.order_items && order.order_items.length > 0) {\r\n        order.order_items.forEach(item => {\r\n          csvRows.push([\r\n            order.order_number,\r\n            new Date(order.order_date).toLocaleDateString(),\r\n            order.status,\r\n            order.suppliers?.name || '',\r\n            item.products?.sku || '',\r\n            item.products?.name || '',\r\n            item.quantity.toString(),\r\n            (item.unit_price || 0).toFixed(2),\r\n            (item.total_price || 0).toFixed(2),\r\n            order.notes || '',\r\n            item.notes || '',\r\n          ]);\r\n        });\r\n      } else {\r\n        csvRows.push([\r\n          order.order_number,\r\n          new Date(order.order_date).toLocaleDateString(),\r\n          order.status,\r\n          order.suppliers?.name || '',\r\n          '',\r\n          '',\r\n          '0',\r\n          '0.00',\r\n          '0.00',\r\n          order.notes || '',\r\n          '',\r\n        ]);\r\n      }\r\n    });\r\n\r\n    const csvContent = [\r\n      csvHeaders.join(','),\r\n      ...csvRows.map(row => row.map(field => `\"${field}\"`).join(',')),\r\n    ].join('\\n');\r\n\r\n    return new Blob([csvContent], { type: 'text/csv' });\r\n  }\r\n\r\n  /**\r\n   * Generate PDF for order\r\n   */\r\n  async generateOrderPDF(orderId: string): Promise<Blob> {\r\n    // For now, return HTML content that can be converted to PDF\r\n    // In a full implementation, you'd use a library like jsPDF or html2canvas\r\n    const orders = await this.getOrders();\r\n    const order = orders.find(o => o.id === orderId);\r\n\r\n    if (!order) {\r\n      throw new Error($t('orderproce.ordernotfound'));\r\n    }\r\n\r\n    const htmlContent = this.generateOrderHTML(order);\r\n    return new Blob([htmlContent], { type: 'text/html' });\r\n  }\r\n\r\n  /**\r\n   * Generate HTML template for order\r\n   */\r\n  private generateOrderHTML(order: OrderWithItems): string {\r\n    const itemsHTML =\r\n      order.order_items\r\n        ?.map(\r\n          item => `\r\n      <tr>\r\n        <td>${item.products?.sku || ''}</td>\r\n        <td>${item.products?.name || ''}</td>\r\n        <td>${item.quantity}</td>\r\n        <td>€${(item.unit_price || 0).toFixed(2)}</td>\r\n        <td>€${(item.total_price || 0).toFixed(2)}</td>\r\n      </tr>\r\n    `\r\n        )\r\n        .join('') || '';\r\n\r\n    return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>Order ${order.order_number}</title>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 20px; }\r\n          .header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 20px; }\r\n          .order-info { margin-bottom: 20px; }\r\n          table { width: 100%; border-collapse: collapse; }\r\n          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\r\n          th { background-color: #f2f2f2; }\r\n          .total { font-weight: bold; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"header\">\r\n          <h1>Remcura - Bestelling</h1>\r\n          <p><strong>Order Number:</strong> ${order.order_number}</p>\r\n          <p><strong>Order Date:</strong> ${new Date(\r\n            order.order_date\r\n          ).toLocaleDateString()}</p>\r\n          <p><strong>Status:</strong> ${order.status}</p>\r\n          ${\r\n            order.suppliers\r\n              ? `<p><strong>Supplier:</strong> ${order.suppliers.name}</p>`\r\n              : ''\r\n          }\r\n        </div>\r\n        \r\n        <div class=\"order-info\">\r\n          ${order.notes ? `<p><strong>Notes:</strong> ${order.notes}</p>` : ''}\r\n        </div>\r\n\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>SKU</th>\r\n              <th>Product</th>\r\n              <th>Quantity</th>\r\n              <th>Unit Price</th>\r\n              <th>Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${itemsHTML}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr class=\"total\">\r\n              <td colspan=\"4\"><strong>Total Items:</strong></td>\r\n              <td><strong>${order.total_items}</strong></td>\r\n            </tr>\r\n            <tr class=\"total\">\r\n              <td colspan=\"4\"><strong>Total Amount:</strong></td>\r\n              <td><strong>€${(order.total_amount || 0).toFixed(2)}</strong></td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Send order via email\r\n   */\r\n  async sendOrderByEmail(\r\n    orderId: string,\r\n    recipientEmail: string,\r\n    subject?: string\r\n  ): Promise<void> {\r\n    // This would integrate with an email service like SendGrid, Mailgun, etc.\r\n    // For now, we'll simulate the functionality\r\n\r\n    const orders = await this.getOrders();\r\n    const order = orders.find(o => o.id === orderId);\r\n\r\n    if (!order) {\r\n      throw new Error($t('orderproce.ordernotfound'));\r\n    }\r\n\r\n    const emailSubject = subject || `Order ${order.order_number} - Remcura`;\r\n    const emailBody = this.generateOrderHTML(order);\r\n\r\n    // In a real implementation, you would call your email service here\r\n    // Debug email logging removed for production\r\n\r\n    // Log the activity\r\n    await this.logActivity('order_emailed', {\r\n      order_id: orderId,\r\n      recipient: recipientEmail,\r\n      subject: emailSubject,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Submit order to Magento API\r\n   */\r\n  async submitOrderToMagento(orderId: string): Promise<MagentoOrder> {\r\n    const orders = await this.getOrders();\r\n    const order = orders.find(o => o.id === orderId);\r\n\r\n    if (!order) {\r\n      throw new Error($t('orderproce.ordernotfound'));\r\n    }\r\n\r\n    // Convert to Magento format\r\n    const magentoOrder: MagentoOrder = {\r\n      status: 'pending',\r\n      items:\r\n        order.order_items?.map(item => ({\r\n          sku: item.products?.sku || '',\r\n          qty_ordered: item.quantity,\r\n          price: item.unit_price || 0,\r\n          product_type: 'simple',\r\n        })) || [],\r\n    };\r\n\r\n    // In a real implementation, you would call the Magento API here\r\n    // For now, we'll simulate it\r\n    const simulatedResponse: MagentoOrder = {\r\n      ...magentoOrder,\r\n      id: Math.floor(Math.random() * 10000),\r\n      increment_id: `MAG-${Date.now()}`,\r\n    };\r\n\r\n    // Update order with Magento ID\r\n    await supabase\r\n      .from('orders')\r\n      .update({\r\n        magento_order_id: simulatedResponse.id,\r\n        status: 'submitted',\r\n      })\r\n      .eq('id', orderId);\r\n\r\n    // Log the activity\r\n    await this.logActivity('order_submitted_magento', {\r\n      order_id: orderId,\r\n      magento_order_id: simulatedResponse.id,\r\n    });\r\n\r\n    return simulatedResponse;\r\n  }\r\n\r\n  /**\r\n   * Download file helper\r\n   */\r\n  downloadFile(blob: Blob, filename: string): void {\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  /**\r\n   * Log activity\r\n   */\r\n  private async logActivity(\r\n    activityType: string,\r\n    data: Record<string, any>\r\n  ): Promise<void> {\r\n    const authStore = useAuthStore();\r\n    const practiceId = authStore.clinicId;\r\n    const userId = authStore.user?.id;\r\n\r\n    if (practiceId) {\r\n      await supabase.from('usage_analytics').insert({\r\n        practice_id: practiceId,\r\n        user_id: userId || null,\r\n        event_type: activityType,\r\n        event_data: data,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport const orderProcessingService = new OrderProcessingService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\permanentUsers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MagicInvite' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1266, 1269], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1266, 1269], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 101,
        "column": 7,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 101,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": { "range": [2791, 2827], "text": "// @ts-expect-error - Json type complexity" },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3227, 3230], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3227, 3230], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/ban-ts-comment",
        "severity": 1,
        "message": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.",
        "line": 196,
        "column": 7,
        "nodeType": "Line",
        "messageId": "tsIgnoreInsteadOfExpectError",
        "endLine": 196,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "replaceTsIgnoreWithTsExpectError",
            "fix": {
              "range": [5962, 6033],
              "text": "// @ts-expect-error - Supabase type complexity with department null/undefined"
            },
            "desc": "Replace \"@ts-ignore\" with \"@ts-expect-error\"."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 367,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 367,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [11244, 11245], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 368,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 368,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [11276, 11277], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-non-null-assertion",
        "severity": 1,
        "message": "Forbidden non-null assertion.",
        "line": 369,
        "column": 5,
        "nodeType": "TSNonNullExpression",
        "messageId": "noNonNull",
        "endLine": 369,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestOptionalChain",
            "fix": { "range": [11307, 11308], "text": "?" },
            "desc": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type {\r\n  PermanentUser,\r\n  MagicInvite,\r\n} from 'src/types/supabase';\r\nimport type { TablesInsert } from 'src/types/supabase.generated';\r\n\r\n// 🚀 PERMANENT USERS SERVICE\r\n// Handles the complete upgrade flow from guest to permanent team member\r\n\r\n// Extended interface with UI properties\r\nexport interface EnhancedPermanentUser extends PermanentUser {\r\n  initials?: string;\r\n  avatarColor?: string;\r\n  isOnline?: boolean;\r\n}\r\n\r\nexport interface CreatePermanentUserRequest {\r\n  practice_id: string;\r\n  invite_id: string;\r\n  full_name: string;\r\n  role: string;\r\n  department?: string;\r\n  login_method: 'magic_code' | 'email_password' | 'device_remember';\r\n  email?: string;\r\n  password?: string;\r\n  device_fingerprint?: string;\r\n}\r\n\r\nexport interface LoginResult {\r\n  success: boolean;\r\n  user?: PermanentUser;\r\n  session_token?: string;\r\n  login_method?: string;\r\n  error?: string;\r\n}\r\n\r\n// Remove duplicate interface - use from types\r\n\r\nexport class PermanentUserService {\r\n  // 🎯 DETECT LOGIN TYPE - Smart detection between invite codes and personal codes\r\n  static async detectLoginType(code: string): Promise<{\r\n    type: 'invite' | 'personal' | 'invalid';\r\n    data?: any;\r\n  }> {\r\n    try {\r\n      // First check if it's a personal magic code\r\n      const personalResult = await this.validatePersonalMagicCode(code);\r\n      if (personalResult.success) {\r\n        return { type: 'personal', data: personalResult.user };\r\n      }\r\n\r\n      // Then check if it's an invite code\r\n      const inviteResult = await this.validateInviteCode(code);\r\n      if (inviteResult.success) {\r\n        return { type: 'invite', data: inviteResult.invite };\r\n      }\r\n\r\n      return { type: 'invalid' };\r\n    } catch (error) {\r\n      console.error('Error detecting login type:', error);\r\n      return { type: 'invalid' };\r\n    }\r\n  }\r\n\r\n  // 🔐 VALIDATE PERSONAL MAGIC CODE\r\n  static async validatePersonalMagicCode(code: string): Promise<LoginResult> {\r\n    try {\r\n      const { data, error } = await supabase.rpc(\r\n        'validate_personal_magic_code',\r\n        {\r\n          magic_code: code,\r\n        }\r\n      );\r\n\r\n      if (error) throw error;\r\n\r\n      if (\r\n        data &&\r\n        typeof data === 'object' &&\r\n        'success' in data &&\r\n        data.success\r\n      ) {\r\n        // Create session token\r\n        const sessionToken = this.generateSessionToken();\r\n        await this.createUserSession(\r\n          data.user_id as string,\r\n          'magic_code',\r\n          sessionToken\r\n        );\r\n\r\n        return {\r\n          success: true,\r\n          user: data as PermanentUser,\r\n          session_token: sessionToken,\r\n          login_method: 'personal_magic_code',\r\n        };\r\n      }\r\n\r\n      // @ts-ignore - Json type complexity\r\n      return { success: false, error: data?.error || 'Invalid magic code' };\r\n    } catch (error) {\r\n      console.error('Error validating personal magic code:', error);\r\n      return { success: false, error: 'Invalid magic code' };\r\n    }\r\n  }\r\n\r\n  // 📧 VALIDATE INVITE CODE (existing magic invite)\r\n  static async validateInviteCode(code: string): Promise<{\r\n    success: boolean;\r\n    invite?: any;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('magic_invites')\r\n        .select(\r\n          `\r\n          *,\r\n          practices!inner(id, name)\r\n        `\r\n        )\r\n        .eq('magic_code', code)\r\n        .eq('is_active', true)\r\n        .gt('max_uses', 'current_uses')\r\n        .or('expires_at.is.null,expires_at.gt.' + new Date().toISOString())\r\n        .single();\r\n\r\n      if (error || !data) {\r\n        return { success: false, error: 'Invalid or expired invite code' };\r\n      }\r\n\r\n      return { success: true, invite: data };\r\n    } catch (error) {\r\n      console.error('Error validating invite code:', error);\r\n      return { success: false, error: 'Invalid invite code' };\r\n    }\r\n  }\r\n\r\n  // ⚡ CREATE PERMANENT USER - The upgrade process\r\n  static async createPermanentUser(\r\n    request: CreatePermanentUserRequest\r\n  ): Promise<{\r\n    success: boolean;\r\n    user?: PermanentUser;\r\n    personal_code?: string;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      // Generate personal magic code if using magic_code method\r\n      let personalMagicCode = null;\r\n      if (request.login_method === 'magic_code') {\r\n        // Get practice name for code generation\r\n        const { data: practice } = await supabase\r\n          .from('practices')\r\n          .select('name')\r\n          .eq('id', request.practice_id)\r\n          .single();\r\n\r\n        personalMagicCode = await this.generatePersonalMagicCode(\r\n          request.full_name,\r\n          (practice && practice.name) || 'PRACTICE'\r\n        );\r\n      }\r\n\r\n      // Hash password if using email/password\r\n      let passwordHash = null;\r\n      if (request.login_method === 'email_password' && request.password) {\r\n        passwordHash = await this.hashPassword(request.password);\r\n      }\r\n\r\n      // Create the permanent user\r\n      const userData = {\r\n        id: uuidv4(),\r\n        practice_id: request.practice_id,\r\n        full_name: request.full_name,\r\n        email: request.email || null,\r\n        personal_magic_code: personalMagicCode,\r\n        magic_code_enabled: request.login_method === 'magic_code',\r\n        email_login_enabled: request.login_method === 'email_password',\r\n        password_hash: passwordHash,\r\n        device_remember_enabled: request.login_method === 'device_remember',\r\n        device_tokens: [], // JSON field for device authentication\r\n        role: request.role,\r\n        department: request.department || null,\r\n        permissions: {},\r\n        is_active: true,\r\n        login_count: 0,\r\n        preferred_login_method: request.login_method,\r\n        created_from_invite_id: request.invite_id,\r\n        timezone: 'Europe/Amsterdam',\r\n        language: 'nl',\r\n      };\r\n\r\n      // @ts-ignore - Supabase type complexity with department null/undefined\r\n      const { data: newUser, error } = await supabase\r\n        .from('permanent_users')\r\n        .insert([userData])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Mark invite as converted\r\n      await supabase\r\n        .from('magic_invites')\r\n        .update({\r\n          converted_to_user_id: newUser.id,\r\n          conversion_completed_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', request.invite_id);\r\n\r\n      // Create device token array entry if requested\r\n      if (\r\n        request.login_method === 'device_remember' &&\r\n        request.device_fingerprint\r\n      ) {\r\n        await supabase\r\n          .from('permanent_users')\r\n          .update({\r\n            device_tokens: [\r\n              {\r\n                fingerprint: request.device_fingerprint,\r\n                created_at: new Date().toISOString(),\r\n              },\r\n            ],\r\n          })\r\n          .eq('id', newUser.id);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        user: newUser,\r\n        personal_code: personalMagicCode || '',\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating permanent user:', error);\r\n      return { success: false, error: 'Failed to create permanent user' };\r\n    }\r\n  }\r\n\r\n  // 🎲 GENERATE PERSONAL MAGIC CODE\r\n  static async generatePersonalMagicCode(\r\n    fullName: string | undefined,\r\n    practiceName: string\r\n  ): Promise<string> {\r\n    try {\r\n      const { data, error } = await supabase.rpc(\r\n        'generate_personal_magic_code',\r\n        {\r\n          user_name: fullName || 'USER',\r\n          practice_name: practiceName,\r\n        }\r\n      );\r\n\r\n      if (error) throw error;\r\n      return data as string;\r\n    } catch (error) {\r\n      console.error('Error generating personal magic code:', error);\r\n      // Fallback generation\r\n      const nameToUse: string = fullName ? fullName.toString() : 'USER';\r\n      const nameParts = nameToUse.split(' ');\r\n      const cleanName = (nameParts[0] || 'USER')\r\n        .toUpperCase()\r\n        .replace(/[^A-Z]/g, '');\r\n      const year = new Date().getFullYear();\r\n      return `🏥${cleanName}${year}`;\r\n    }\r\n  }\r\n\r\n  // 🔒 PASSWORD UTILITIES\r\n  static async hashPassword(password: string): Promise<string> {\r\n    // In a real implementation, use bcrypt or similar\r\n    // For now, just base64 encode (NOT SECURE - just for demo)\r\n    return btoa(password);\r\n  }\r\n\r\n  static async verifyPassword(\r\n    password: string,\r\n    hash: string\r\n  ): Promise<boolean> {\r\n    // In a real implementation, use bcrypt.compare\r\n    return btoa(password) === hash;\r\n  }\r\n\r\n  // 📱 DEVICE TOKEN MANAGEMENT - Now handled via permanent_users.device_tokens JSON field\r\n  // Legacy device_tokens table has been removed - functionality moved to user JSON field\r\n\r\n  // 🎫 SESSION MANAGEMENT\r\n  static generateSessionToken(): string {\r\n    return uuidv4() + '-' + Date.now();\r\n  }\r\n\r\n  static async createUserSession(\r\n    userId: string,\r\n    loginMethod: string,\r\n    sessionToken: string\r\n  ): Promise<void> {\r\n    try {\r\n      // Get practice_id from user\r\n      const { data: user } = await supabase\r\n        .from('permanent_users')\r\n        .select('practice_id')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      const sessionData: TablesInsert<'user_sessions'> = {\r\n        id: uuidv4(),\r\n        user_id: userId,\r\n        practice_id: user?.practice_id ?? '',\r\n        session_token: sessionToken,\r\n        login_method: loginMethod,\r\n        device_fingerprint: this.getDeviceFingerprint(),\r\n        ip_address: await this.getClientIP(),\r\n        user_agent: navigator.userAgent,\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\r\n        is_active: true,\r\n      };\r\n\r\n      await supabase.from('user_sessions').insert([sessionData]);\r\n    } catch (error) {\r\n      console.error('Error creating user session:', error);\r\n    }\r\n  }\r\n\r\n  // 👥 GET PRACTICE TEAM\r\n  static async getPracticeTeam(\r\n    practiceId: string\r\n  ): Promise<EnhancedPermanentUser[]> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('permanent_users')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .eq('is_active', true)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return (data || []) as EnhancedPermanentUser[];\r\n    } catch (error) {\r\n      console.error('Error getting practice team:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // 🔧 UTILITY FUNCTIONS\r\n  static getDeviceName(): string {\r\n    const userAgent = navigator.userAgent;\r\n    if (/iPhone|iPad|iPod/.test(userAgent)) {\r\n      return /iPad/.test(userAgent) ? 'iPad' : 'iPhone';\r\n    } else if (/Android/.test(userAgent)) {\r\n      return 'Android Device';\r\n    } else if (/Mac/.test(userAgent)) {\r\n      return 'Mac';\r\n    } else if (/Windows/.test(userAgent)) {\r\n      return 'Windows PC';\r\n    }\r\n    return 'Unknown Device';\r\n  }\r\n\r\n  static getDeviceFingerprint(): string {\r\n    // Simple device fingerprinting (in production, use a proper library)\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    ctx!.textBaseline = 'top';\r\n    ctx!.font = '14px Arial';\r\n    ctx!.fillText('Device fingerprint', 2, 2);\r\n\r\n    const fingerprint = [\r\n      navigator.userAgent,\r\n      navigator.language,\r\n      screen.width + 'x' + screen.height,\r\n      new Date().getTimezoneOffset(),\r\n      canvas.toDataURL(),\r\n    ].join('|');\r\n\r\n    return btoa(fingerprint).substring(0, 32);\r\n  }\r\n\r\n  static generateTokenHash(): string {\r\n    return uuidv4().replace(/-/g, '');\r\n  }\r\n\r\n  static async getClientIP(): Promise<string> {\r\n    try {\r\n      const response = await fetch('https://api.ipify.org?format=json');\r\n      const data = await response.json();\r\n      return data.ip;\r\n    } catch {\r\n      return '0.0.0.0';\r\n    }\r\n  }\r\n\r\n  // 📧 EMAIL LOGIN\r\n  static async loginWithEmail(\r\n    email: string,\r\n    password: string\r\n  ): Promise<LoginResult> {\r\n    try {\r\n      const { data: user, error } = await supabase\r\n        .from('permanent_users')\r\n        .select('*')\r\n        .eq('email', email)\r\n        .eq('email_login_enabled', true)\r\n        .eq('is_active', true)\r\n        .single();\r\n\r\n      if (error || !user) {\r\n        return { success: false, error: 'Invalid email or password' };\r\n      }\r\n\r\n      const isValidPassword = await this.verifyPassword(\r\n        password,\r\n        user.password_hash || ''\r\n      );\r\n      if (!isValidPassword) {\r\n        return { success: false, error: 'Invalid email or password' };\r\n      }\r\n\r\n      // Update login stats\r\n      await supabase\r\n        .from('permanent_users')\r\n        .update({\r\n          last_login_at: new Date().toISOString(),\r\n          login_count: (user.login_count || 0) + 1,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', user.id);\r\n\r\n      // Create session\r\n      const sessionToken = this.generateSessionToken();\r\n      await this.createUserSession(user.id, 'email_password', sessionToken);\r\n\r\n      return {\r\n        success: true,\r\n        user: user as PermanentUser,\r\n        session_token: sessionToken,\r\n        login_method: 'email_password',\r\n      };\r\n    } catch (error) {\r\n      console.error('Error logging in with email:', error);\r\n      return { success: false, error: 'Login failed' };\r\n    }\r\n  }\r\n}\r\n\r\nexport default PermanentUserService;\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\permissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4526, 4529], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4526, 4529], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4580, 4583], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4580, 4583], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 264,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 264,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8099, 8102], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8099, 8102], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 265,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 265,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8153, 8156], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8153, 8156], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'authStore' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 355,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 355,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from 'src/boot/supabase';\r\nimport { useAuthStore } from 'src/stores/auth';\r\nimport type { UserRole, PermissionType, ResourceType, Permission, RoleDefinition } from '@/types/permissions';\r\nimport type { Database } from '@/types';\r\n\r\ntype PermissionRow = Database['public']['Functions']['get_user_permissions']['Returns'][number];\r\n\r\nconst mapPermissionRow = (\r\n  row: PermissionRow,\r\n  resourceType: ResourceType\r\n): Permission => ({\r\n  permission_type: row.permission as PermissionType,\r\n  resource_type: resourceType,\r\n  resource_id: row.resource_id ?? undefined,\r\n  source: 'role',\r\n});\r\n\r\n// Role definitions for frontend display\r\nexport const ROLE_DEFINITIONS: Record<UserRole, RoleDefinition> = {\r\n  owner: {\r\n    role: 'owner',\r\n    displayName: 'Eigenaar',\r\n    description: 'Volledige toegang tot alle functies en instellingen',\r\n    permissions: [\r\n      { permission_type: 'admin', resource_type: 'all', source: 'role' },\r\n    ],\r\n  },\r\n  manager: {\r\n    role: 'manager',\r\n    displayName: 'Manager',\r\n    description: 'Operationele toegang tot producten, voorraad en bestellingen',\r\n    permissions: [\r\n      { permission_type: 'write', resource_type: 'products', source: 'role' },\r\n      { permission_type: 'write', resource_type: 'inventory', source: 'role' },\r\n      { permission_type: 'write', resource_type: 'orders', source: 'role' },\r\n      { permission_type: 'read', resource_type: 'analytics', source: 'role' },\r\n      { permission_type: 'read', resource_type: 'users', source: 'role' },\r\n    ],\r\n  },\r\n  assistant: {\r\n    role: 'assistant',\r\n    displayName: 'Assistent',\r\n    description: 'Algemene operationele toegang',\r\n    permissions: [\r\n      { permission_type: 'write', resource_type: 'products', source: 'role' },\r\n      { permission_type: 'write', resource_type: 'inventory', source: 'role' },\r\n      { permission_type: 'write', resource_type: 'orders', source: 'role' },\r\n      {\r\n        permission_type: 'read',\r\n        resource_type: 'analytics',\r\n        conditions: { basic_only: true },\r\n        source: 'role',\r\n      },\r\n    ],\r\n  },\r\n  logistics: {\r\n    role: 'logistics',\r\n    displayName: 'Logistiek',\r\n    description: 'Beperkt tot voorraadtelling en product viewing',\r\n    permissions: [\r\n      { permission_type: 'read', resource_type: 'products', source: 'role' },\r\n      {\r\n        permission_type: 'write',\r\n        resource_type: 'inventory',\r\n        conditions: { actions: ['count', 'adjust'] },\r\n        source: 'role',\r\n      },\r\n      { permission_type: 'read', resource_type: 'inventory', source: 'role' },\r\n    ],\r\n  },\r\n  member: {\r\n    role: 'member',\r\n    displayName: 'Lid',\r\n    description: 'Basistoegang tot producten en voorraad',\r\n    permissions: [\r\n      { permission_type: 'read', resource_type: 'products', source: 'role' },\r\n      { permission_type: 'read', resource_type: 'inventory', source: 'role' },\r\n      {\r\n        permission_type: 'write',\r\n        resource_type: 'orders',\r\n        conditions: { own_only: true },\r\n        source: 'role',\r\n      },\r\n    ],\r\n  },\r\n  guest: {\r\n    role: 'guest',\r\n    displayName: 'Gast',\r\n    description: 'Zeer beperkte toegang',\r\n    permissions: [\r\n      {\r\n        permission_type: 'read',\r\n        resource_type: 'products',\r\n        conditions: { limited: true },\r\n        source: 'role',\r\n      },\r\n      {\r\n        permission_type: 'read',\r\n        resource_type: 'inventory',\r\n        conditions: { limited: true },\r\n        source: 'role',\r\n      },\r\n    ],\r\n  },\r\n  platform_owner: {\r\n    role: 'platform_owner',\r\n    displayName: 'Platform Eigenaar',\r\n    description: 'Volledige platform en alle praktijk toegang',\r\n    permissions: [\r\n      { permission_type: 'admin', resource_type: 'all', source: 'role' },\r\n    ],\r\n  },\r\n};\r\n\r\nexport class PermissionService {\r\n  /**\r\n   * Check if current user has permission for a specific action\r\n   */\r\n  static async hasPermission(\r\n    permissionType: PermissionType,\r\n    resourceType: ResourceType,\r\n    resourceId?: string\r\n  ): Promise<boolean> {\r\n    const authStore = useAuthStore();\r\n    const userId = authStore.user?.id;\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!userId) {\r\n      return false;\r\n    }\r\n\r\n    // Platform owner bypass\r\n    // Prefer backend check; fallback to app_metadata\r\n    try {\r\n      const { data: isPo } = await supabase.rpc('is_platform_owner');\r\n      if (isPo === true) return true;\r\n    } catch {\r\n      // ignore\r\n    }\r\n    const isPlatformOwnerFallback =\r\n      !!(authStore.user as any)?.app_metadata?.role &&\r\n      (authStore.user as any).app_metadata.role === 'platform_owner';\r\n    if (isPlatformOwnerFallback) return true;\r\n\r\n    // Practice owner bypass (treat practice owners as having all permissions)\r\n    if (practiceId) {\r\n      try {\r\n        const { data: membership } = await supabase\r\n          .from('practice_members')\r\n          .select('role')\r\n          .eq('practice_id', practiceId)\r\n          .eq('user_id', userId)\r\n          .single();\r\n\r\n        if (membership?.role === 'owner') {\r\n          return true;\r\n        }\r\n      } catch {\r\n        // Ignore and continue to explicit permission check\r\n      }\r\n    }\r\n\r\n    // If no practiceId (Magic Join users), grant basic read permissions\r\n    if (!practiceId) {\r\n      console.warn('No practice ID - applying magic join fallback permissions');\r\n      // Grant read access to basic resources for magic join users\r\n      if (\r\n        permissionType === 'read' &&\r\n        ['products', 'inventory'].includes(resourceType)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.rpc('check_user_permission_v2', {\r\n        user_id_param: userId,\r\n        practice_id_param: practiceId,\r\n        p_permission_type: permissionType,\r\n        p_resource_type: resourceType,\r\n        p_resource_id: resourceId ?? null,\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error checking permission:', error);\r\n        // Fallback: grant basic read permissions if RPC fails\r\n        if (\r\n          permissionType === 'read' &&\r\n          ['products', 'inventory'].includes(resourceType)\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      return data || false;\r\n    } catch (error) {\r\n      console.error('Error in hasPermission:', error);\r\n      // Fallback: grant basic read permissions if RPC fails\r\n      if (\r\n        permissionType === 'read' &&\r\n        ['products', 'inventory'].includes(resourceType)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all effective permissions for current user\r\n   */\r\n  static async getUserPermissions(): Promise<Permission[]> {\r\n    const authStore = useAuthStore();\r\n    const userId = authStore.user?.id;\r\n    const practiceId = authStore.clinicId;\r\n\r\n    if (!userId || !practiceId) {\r\n      return [];\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_user_permissions', {\r\n        user_id_param: userId,\r\n        practice_id_param: practiceId,\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error fetching user permissions:', error);\r\n        return [];\r\n      }\r\n\r\n      return (data ?? []).map(row =>\r\n        mapPermissionRow(\r\n          row,\r\n          row.permission === 'write_orders'\r\n            ? 'orders'\r\n            : (row.permission as ResourceType | undefined) ?? 'products'\r\n        )\r\n      );\r\n    } catch (error) {\r\n      console.error('Error in getUserPermissions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's role in current practice\r\n   */\r\n  static async getUserRole(): Promise<UserRole | null> {\r\n    const authStore = useAuthStore();\r\n    const userId = authStore.user?.id;\r\n    const practiceId = authStore.clinicId;\r\n\r\n    // Platform owner from JWT/app_metadata\r\n    try {\r\n      const { data: isPo } = await supabase.rpc('is_platform_owner');\r\n      if (isPo === true) return 'platform_owner';\r\n    } catch {\r\n      // ignore\r\n    }\r\n    const isPlatformOwnerFallback =\r\n      !!(authStore.user as any)?.app_metadata?.role &&\r\n      (authStore.user as any).app_metadata.role === 'platform_owner';\r\n    if (isPlatformOwnerFallback) return 'platform_owner';\r\n\r\n    // If no practiceId, this might be a Magic Join user - give them guest access for now\r\n    if (!practiceId) {\r\n      console.warn(\r\n        'No practice ID found - granting guest access for magic join user'\r\n      );\r\n      return 'guest';\r\n    }\r\n\r\n    if (!userId) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('practice_members')\r\n        .select('role')\r\n        .eq('user_id', userId)\r\n        .eq('practice_id', practiceId)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error fetching user role:', error);\r\n        // If user not found in practice_members, might be magic join - give guest access\r\n        return 'guest';\r\n      }\r\n\r\n      return (data?.role as UserRole) || 'guest';\r\n    } catch (error) {\r\n      console.error('Error in getUserRole:', error);\r\n      return 'guest';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user can perform specific actions based on role\r\n   */\r\n  static canCreateProducts(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  static canEditProducts(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  static canDeleteProducts(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  static canManageInventory(role: UserRole): boolean {\r\n    return [\r\n      'owner',\r\n      'manager',\r\n      'assistant',\r\n      'logistics',\r\n      'platform_owner',\r\n    ].includes(role);\r\n  }\r\n\r\n  static canViewAnalytics(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  static canManageUsers(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  static canSubmitOrders(role: UserRole): boolean {\r\n    return ['owner', 'manager', 'assistant', 'platform_owner'].includes(role);\r\n  }\r\n\r\n  /**\r\n   * Get role display information\r\n   */\r\n  static getRoleDefinition(role: UserRole): RoleDefinition {\r\n    return ROLE_DEFINITIONS[role];\r\n  }\r\n\r\n  /**\r\n   * Get all available roles\r\n   */\r\n  static getAllRoles(): RoleDefinition[] {\r\n    return Object.values(ROLE_DEFINITIONS);\r\n  }\r\n}\r\n\r\n// Composable for reactive permission checking\r\nexport function usePermissions() {\r\n  const authStore = useAuthStore();\r\n\r\n  const hasPermission = async (\r\n    permissionType: PermissionType,\r\n    resourceType: ResourceType,\r\n    resourceId?: string\r\n  ) => {\r\n    return PermissionService.hasPermission(\r\n      permissionType,\r\n      resourceType,\r\n      resourceId\r\n    );\r\n  };\r\n\r\n  const getUserRole = async () => {\r\n    return PermissionService.getUserRole();\r\n  };\r\n\r\n  const canCreateProducts = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canCreateProducts(role) : false;\r\n  };\r\n\r\n  const canEditProducts = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canEditProducts(role) : false;\r\n  };\r\n\r\n  const canDeleteProducts = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canDeleteProducts(role) : false;\r\n  };\r\n\r\n  const canManageInventory = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canManageInventory(role) : false;\r\n  };\r\n\r\n  const canViewAnalytics = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canViewAnalytics(role) : false;\r\n  };\r\n\r\n  const canManageUsers = async () => {\r\n    const role = await getUserRole();\r\n    return role ? PermissionService.canManageUsers(role) : false;\r\n  };\r\n\r\n  return {\r\n    hasPermission,\r\n    getUserRole,\r\n    canCreateProducts,\r\n    canEditProducts,\r\n    canDeleteProducts,\r\n    canManageInventory,\r\n    canViewAnalytics,\r\n    canManageUsers,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\safeUpdate.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\stockMovements.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supabase.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockLevelView' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 4,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProductBatchWithDetails' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListItemInsert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { createClient } from '@supabase/supabase-js';\nimport type { Database, Tables, TablesInsert, TablesUpdate } from '@/types';\nimport type {\n  StockLevelView,\n  PracticeRow,\n  ProductRow,\n  OrderAdviceResult,\n  PracticeInsert,\n  PracticeUpdate,\n  PracticeMemberRow,\n  PracticeMemberInsert,\n  PracticeMemberUpdate,\n  OrderListRow,\n  ProductBatchWithDetails,\n  OrderListItemInsert,\n} from '@/types/inventory';\nimport { handleSupabaseError } from '@/utils/service-error-handler';\nimport type {\n  RealtimeChannel,\n  RealtimePostgresChangesPayload,\n} from '@supabase/supabase-js';\n\n// Create and configure Supabase client centrally\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Supabase environment variables are missing');\n}\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n  },\n});\n\n// Practice operations\nexport const practiceService = {\n  async getById(id: string): Promise<PracticeRow | null> {\n    const { data, error } = await supabase\n      .from('practices')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'practiceService',\n        operation: 'getById',\n        metadata: { practiceId: id },\n      });\n    }\n\n    return data;\n  },\n\n  async create(practice: PracticeInsert): Promise<PracticeRow | null> {\n    const { data, error } = await supabase\n      .from('practices')\n      .insert(practice)\n      .select()\n      .single<PracticeRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'practiceService',\n          operation: 'create',\n        },\n        'Failed to create practice'\n      );\n    }\n\n    return data;\n  },\n\n  async update(id: string, updates: PracticeUpdate): Promise<PracticeRow | null> {\n    const { data, error } = await supabase\n      .from('practices')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single<PracticeRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'practiceService',\n          operation: 'update',\n          metadata: { practiceId: id },\n        },\n        'Failed to update practice'\n      );\n    }\n\n    return data;\n  },\n};\n\n// User profile operations - now using auth.users and practice_members\nexport const userProfileService = {\n  async getById(id: string): Promise<PracticeMemberRow | null> {\n    const { data, error } = await supabase\n      .from('practice_members')\n      .select('*')\n      .eq('user_id', id)\n      .single();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'userProfileService',\n          operation: 'getById',\n          metadata: { userId: id },\n        },\n        'Failed to fetch user profile'\n      );\n    }\n\n    return data;\n  },\n\n  async getByIdWithUserData(\n    id: string\n  ): Promise<PracticeMemberRow & { email?: string | null; user_metadata?: Record<string, unknown> | null }> {\n    const { data: memberData, error: memberError } = await supabase\n      .from('practice_members')\n      .select('*')\n      .eq('user_id', id)\n      .single();\n\n    if (memberError) {\n      handleSupabaseError(\n        memberError,\n        {\n          service: 'userProfileService',\n          operation: 'getByIdWithUserData',\n          metadata: { userId: id },\n        },\n        'Failed to fetch user profile'\n      );\n      throw memberError;\n    }\n\n    const { data: userData, error: userError } =\n      await supabase.auth.admin.getUserById(id);\n\n    if (userError) {\n      handleSupabaseError(\n        userError,\n        {\n          service: 'userProfileService',\n          operation: 'getByIdWithUserData',\n          metadata: { userId: id },\n        },\n        'Failed to fetch user auth data'\n      );\n      throw userError;\n    }\n\n    return {\n      ...memberData,\n      email: userData.user?.email ?? null,\n      user_metadata: userData.user?.user_metadata ?? null,\n    };\n  },\n\n  async create(\n    profile: PracticeMemberInsert & { id: string }\n  ): Promise<PracticeMemberRow | null> {\n    const { data, error } = await supabase\n      .from('practice_members')\n      .insert({\n        user_id: profile.id,\n        practice_id: profile.practice_id,\n        role: profile.role ?? 'guest',\n        joined_at: new Date().toISOString(),\n      } satisfies TablesInsert<'practice_members'>)\n      .select()\n      .single<PracticeMemberRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'userProfileService',\n          operation: 'create',\n        },\n        'Failed to create user profile'\n      );\n    }\n\n    return data;\n  },\n\n  async update(\n    id: string,\n    updates: PracticeMemberUpdate\n  ): Promise<PracticeMemberRow | null> {\n    const payload: TablesUpdate<'practice_members'> = {\n      role: updates.role ?? null,\n      updated_at: new Date().toISOString(),\n    };\n\n    const { data, error } = await supabase\n      .from('practice_members')\n      .update(payload)\n      .eq('user_id', id)\n      .select()\n      .single<PracticeMemberRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'userProfileService',\n          operation: 'update',\n          metadata: { userId: id },\n        },\n        'Failed to update user profile'\n      );\n    }\n\n    return data;\n  },\n};\n\n// Products operations\nexport const productService = {\n  async getAll(practiceId: string): Promise<Array<Pick<ProductRow, 'id' | 'name' | 'sku' | 'category' | 'brand' | 'unit' | 'price' | 'image_url'>>> {\n    const { data, error } = await supabase\n      .from('products')\n      .select(\n        `\n        id, name, sku, category, brand, unit, price, image_url,\n        stock_levels!inner(practice_id)\n      `\n      )\n      .eq('stock_levels.practice_id', practiceId)\n      .eq('active', true)\n      .order('name');\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'productService',\n          operation: 'getAll',\n          metadata: { practiceId },\n        },\n        'Failed to fetch products'\n      );\n    }\n\n    return (data ?? []) as Array<\n      Pick<ProductRow, 'id' | 'name' | 'sku' | 'category' | 'brand' | 'unit' | 'price' | 'image_url'>\n    >;\n  },\n\n  async getById(id: string): Promise<ProductRow | null> {\n    const { data, error } = await supabase\n      .from('products')\n      .select('*')\n      .eq('id', id)\n      .single<ProductRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'productService',\n          operation: 'getById',\n          metadata: { productId: id },\n        },\n        'Failed to fetch product'\n      );\n    }\n\n    return data;\n  },\n\n  async create(product: TablesInsert<'products'>): Promise<ProductRow | null> {\n    const { data, error } = await supabase\n      .from('products')\n      .insert(product)\n      .select()\n      .single<ProductRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'productService',\n          operation: 'create',\n          metadata: { productSku: product.sku ?? 'unknown' },\n        },\n        'Failed to create product'\n      );\n    }\n\n    return data;\n  },\n\n  async update(id: string, updates: TablesUpdate<'products'>): Promise<ProductRow | null> {\n    const { data, error } = await supabase\n      .from('products')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single<ProductRow>();\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'productService',\n          operation: 'update',\n          metadata: { productId: id },\n        },\n        'Failed to update product'\n      );\n    }\n\n    return data;\n  },\n\n  async delete(id: string): Promise<boolean> {\n    const { error } = await supabase.from('products').delete().eq('id', id);\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'productService',\n        operation: 'delete',\n        metadata: { productId: id },\n      });\n      return false;\n    }\n\n    return true;\n  },\n\n  async getLowStock(practiceId: string): Promise<OrderAdviceResult> {\n    const { data, error } = await supabase.rpc('get_order_advice', {\n      practice_uuid: practiceId,\n    });\n\n    if (error) {\n      handleSupabaseError(error, {\n        service: 'productService',\n        operation: 'getLowStock',\n        metadata: { practiceId },\n      });\n      return [];\n    }\n\n    return (data as OrderAdviceResult) ?? [];\n  },\n\n  async getOutOfStock(practiceId: string): Promise<OrderAdviceResult> {\n    const { data, error } = await supabase.rpc('get_order_advice', {\n      practice_uuid: practiceId,\n    });\n\n    if (error) {\n      handleSupabaseError(\n        error,\n        {\n          service: 'productService',\n          operation: 'getOutOfStock',\n          metadata: { practiceId },\n        },\n        'Failed to fetch out of stock products'\n      );\n      return [];\n    }\n\n    const rows = (data as OrderAdviceResult) ?? [];\n    return rows.filter(item => (item.current_stock ?? 0) === 0);\n  },\n};\n\n// Real-time subscriptions\ntype OrderListPayload = RealtimePostgresChangesPayload<Tables<'order_lists'>>;\ntype OrderListItemPayload = RealtimePostgresChangesPayload<Tables<'order_list_items'>>;\ntype StockLevelPayload = RealtimePostgresChangesPayload<Tables<'stock_levels'>>;\ntype SupplierOrderPayload = RealtimePostgresChangesPayload<Tables<'supplier_orders'>>;\n\nexport const realtimeService = {\n  subscribeToOrderLists(\n    practiceId: string,\n    callback: (payload: OrderListPayload) => void\n  ): RealtimeChannel {\n    return supabase\n      .channel(`order_lists:${practiceId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'order_lists',\n          filter: `practice_id=eq.${practiceId}`,\n        },\n        callback\n      )\n      .subscribe();\n  },\n\n  subscribeToOrderListItems(\n    callback: (payload: OrderListItemPayload) => void\n  ): RealtimeChannel {\n    return supabase\n      .channel('order_list_items')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'order_list_items',\n        },\n        callback\n      )\n      .subscribe();\n  },\n\n  subscribeToStockLevels(\n    practiceId: string,\n    callback: (payload: StockLevelPayload) => void\n  ): RealtimeChannel {\n    return supabase\n      .channel(`stock_levels:${practiceId}`)\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'stock_levels',\n          filter: `practice_id=eq.${practiceId}`,\n        },\n        callback\n      )\n      .subscribe();\n  },\n\n  subscribeToSupplierOrders(\n    callback: (payload: SupplierOrderPayload) => void\n  ): RealtimeChannel {\n    return supabase\n      .channel('supplier_orders')\n      .on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'supplier_orders',\n        },\n        callback\n      )\n      .subscribe();\n  },\n\n  unsubscribe(channel: RealtimeChannel | null) {\n    if (!channel) {\n      return Promise.resolve();\n    }\n    return supabase.removeChannel(channel);\n  },\n};\n\n// Utility functions\nexport const utils = {\n  isValidUUID(uuid: string): boolean {\n    const uuidRegex =\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  },\n\n  formatTimestamp(timestamp: string): string {\n    return new Date(timestamp).toLocaleString();\n  },\n\n  generateId(): string {\n    return crypto.randomUUID();\n  },\n};\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierAgnostic\\multiSupplierOrderListService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierOrder' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListDTO' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2268, 2271], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2268, 2271], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6543, 6546], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6543, 6546], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9307, 9310], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9307, 9310], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 343,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 343,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11007, 11010], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11007, 11010], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 439,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 439,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14004, 14007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14004, 14007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 601,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 601,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19306, 19309], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19306, 19309], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 695,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 695,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22005, 22008], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22005, 22008], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\r\nimport { orderLogger } from '@/utils/logger';\r\nimport type { SupplierOrder } from '@/stores/orderLists/orderLists-supplier-splitting';\r\nimport type { OrderListWithItems } from '@/types/stores';\r\nimport type {\r\n  OrderListDTO,\r\n  OrderListInsert,\r\n  OrderListItemDTO,\r\n  OrderListItemInsert,\r\n  OrderListItemRow,\r\n  OrderListRow,\r\n  ProductRow,\r\n  StockLevelRow,\r\n  SupplierProductRow,\r\n} from '@/types/inventory';\r\nimport {\r\n  mapOrderListItemRowToDTO,\r\n  mapOrderListRowToDTO,\r\n  mapStockLevelRowToView,\r\n} from '@/types/inventory';\r\n\r\ntype SupplierProductWithSupplier = SupplierProductRow & {\r\n  suppliers: { id: string; name: string } | null;\r\n};\r\n\r\nexport type SupplierAgnosticOrderList = OrderListWithItems;\r\n\r\nexport interface OrderListAnalytics {\r\n  total_items: number;\r\n  suppliers_count: number;\r\n  low_stock_items: number;\r\n  out_of_stock_items: number;\r\n  total_value: number;\r\n  avg_lead_time: number;\r\n  supplier_breakdown: Array<{\r\n    supplier_id: string;\r\n    supplier_name: string;\r\n    item_count: number;\r\n    total_value: number;\r\n    avg_lead_time: number;\r\n  }>;\r\n}\r\n\r\nexport class MultiSupplierOrderListService {\r\n  /**\r\n   * Create a new supplier-agnostic order list\r\n   */\r\n  async createOrderList(data: {\r\n    practice_id: string;\r\n    name: string;\r\n    description?: string;\r\n    location_id: string;\r\n    auto_reorder_enabled?: boolean;\r\n  }): Promise<SupplierAgnosticOrderList> {\r\n    try {\r\n      orderLogger.info('Creating new supplier-agnostic order list:', data.name);\r\n\r\n      const { data: orderList, error } = await supabase\r\n        .from('order_lists')\r\n        .insert<OrderListInsert>(\r\n          {\r\n            practice_id: data.practice_id,\r\n            name: data.name,\r\n            description: data.description ?? null,\r\n            location_id: data.location_id,\r\n            auto_reorder_enabled: data.auto_reorder_enabled ?? false,\r\n          }\r\n        )\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      orderLogger.info('✅ Order list created successfully:', orderList.id);\r\n\r\n      return {\r\n        ...mapOrderListRowToDTO(orderList as OrderListRow),\r\n        items: [],\r\n      } satisfies SupplierAgnosticOrderList;\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to create order list:', error);\r\n      throw new Error(`Failed to create order list: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a product to an order list with supplier selection\r\n   */\r\n  async addProductToOrderList(\r\n    orderListId: string,\r\n    data: {\r\n      product_id: string;\r\n      supplier_id: string;\r\n      minimum_stock: number;\r\n      maximum_stock: number;\r\n      is_preferred_supplier?: boolean;\r\n    }\r\n  ): Promise<OrderListItemDTO> {\r\n    try {\r\n      orderLogger.info('Adding product to order list:', {\r\n        orderListId,\r\n        productId: data.product_id,\r\n      });\r\n\r\n      // Get product and supplier details\r\n      const [productResult, supplierProductResult, stockResult] =\r\n        await Promise.all([\r\n          supabase\r\n            .from('products')\r\n            .select('id, name, sku')\r\n            .eq('id', data.product_id)\r\n            .single<ProductRow>(),\r\n          supabase\r\n            .from('supplier_products')\r\n            .select(\r\n              `\r\n            supplier_sku,\r\n            cost_price,\r\n            currency,\r\n            lead_time_days,\r\n            supplier_id,\r\n            suppliers (id, name)\r\n          `\r\n            )\r\n            .eq('product_id', data.product_id)\r\n            .eq('supplier_id', data.supplier_id)\r\n            .single<SupplierProductWithSupplier>(),\r\n          supabase\r\n            .from('stock_levels')\r\n            .select('current_quantity')\r\n            .eq('product_id', data.product_id)\r\n            .order('created_at', { ascending: false })\r\n            .limit(1)\r\n            .maybeSingle<StockLevelRow>(),\r\n        ]);\r\n\r\n      if (productResult.error) throw productResult.error;\r\n      if (supplierProductResult.error) throw supplierProductResult.error;\r\n\r\n      const product = productResult.data;\r\n      const supplierProduct = supplierProductResult.data;\r\n      const currentStock = stockResult.data\r\n        ? mapStockLevelRowToView(stockResult.data).current_quantity\r\n        : null;\r\n\r\n      if (!product || !supplierProduct) {\r\n        throw new Error('Product or supplier product could not be loaded');\r\n      }\r\n\r\n      // Insert order list item\r\n      const { data: orderListItem, error } = await supabase\r\n        .from('order_list_items')\r\n        .insert<OrderListItemInsert>({\r\n          order_list_id: orderListId,\r\n          product_id: data.product_id,\r\n          supplier_product_id: supplierProduct.id,\r\n          preferred_supplier_id: data.supplier_id,\r\n          minimum_stock: data.minimum_stock,\r\n          maximum_stock: data.maximum_stock,\r\n          current_stock: currentStock,\r\n          unit_price: supplierProduct.cost_price,\r\n          ordered_quantity: data.minimum_stock,\r\n          suggested_quantity: data.minimum_stock,\r\n          total_price:\r\n            (supplierProduct.cost_price ?? 0) * Math.max(data.minimum_stock, 0),\r\n        })\r\n        .select(\r\n          `\r\n          *,\r\n          product:products(id, name, sku),\r\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\r\n          supplier:suppliers!order_list_items_preferred_supplier_id_fkey(id, name)\r\n        `\r\n        )\r\n        .single<OrderListItemRow>();\r\n\r\n      if (error) throw error;\r\n\r\n      orderLogger.info('✅ Product added to order list successfully');\r\n\r\n      const dto = mapOrderListItemRowToDTO(orderListItem);\r\n      return {\r\n        ...dto,\r\n        product: {\r\n          ...(dto.product ?? {}),\r\n          id: product.id,\r\n          name: product.name,\r\n          sku: product.sku,\r\n        } as OrderListItemDTO['product'],\r\n        supplier_product: supplierProduct\r\n          ? ({\r\n              ...(dto.supplier_product ?? {}),\r\n              id: supplierProduct.id,\r\n              supplier_id: supplierProduct.supplier_id,\r\n              supplier_sku: supplierProduct.supplier_sku ?? null,\r\n              cost_price: supplierProduct.cost_price ?? null,\r\n              currency: supplierProduct.currency ?? null,\r\n              lead_time_days: supplierProduct.lead_time_days ?? null,\r\n            } as OrderListItemDTO['supplier_product'])\r\n          : dto.supplier_product,\r\n      } satisfies OrderListItemDTO;\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to add product to order list:', error);\r\n      throw new Error(`Failed to add product to order list: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update supplier for an existing order list item\r\n   */\r\n  async updateItemSupplier(\r\n    itemId: string,\r\n    newSupplierId: string\r\n  ): Promise<OrderListItemDTO> {\r\n    try {\r\n      orderLogger.info('Updating supplier for order list item:', {\r\n        itemId,\r\n        newSupplierId,\r\n      });\r\n\r\n      // Get current item\r\n      const { data: currentItem, error: currentError } = await supabase\r\n        .from('order_list_items')\r\n        .select('product_id, order_list_id')\r\n        .eq('id', itemId)\r\n        .single();\r\n\r\n      if (currentError) throw currentError;\r\n\r\n      // Get new supplier product details\r\n      const { data: supplierProduct, error: supplierError } = await supabase\r\n        .from('supplier_products')\r\n        .select(\r\n          `\r\n          id,\r\n          supplier_sku,\r\n          cost_price,\r\n          currency,\r\n          lead_time_days,\r\n          supplier_id,\r\n          suppliers (id, name)\r\n        `\r\n        )\r\n        .eq('product_id', currentItem.product_id)\r\n        .eq('supplier_id', newSupplierId)\r\n        .single();\r\n\r\n      if (supplierError) throw supplierError;\r\n\r\n      // Update the item\r\n      const { data: updatedItem, error: updateError } = await supabase\r\n        .from('order_list_items')\r\n        .update({\r\n          supplier_product_id: supplierProduct.id,\r\n          preferred_supplier_id: newSupplierId,\r\n          unit_price: supplierProduct.cost_price,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', itemId)\r\n        .select(\r\n          `\r\n          *,\r\n          product:products(id, name, sku),\r\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\r\n          supplier:suppliers!order_list_items_preferred_supplier_id_fkey(id, name)\r\n        `\r\n        )\r\n        .single<OrderListItemRow>();\r\n\r\n      if (updateError) throw updateError;\r\n\r\n      orderLogger.info('✅ Supplier updated successfully');\r\n\r\n      const dto = mapOrderListItemRowToDTO(updatedItem);\r\n      return {\r\n        ...dto,\r\n        supplier_product: {\r\n          ...(dto.supplier_product ?? {}),\r\n          id: supplierProduct.id,\r\n          supplier_id: supplierProduct.supplier_id,\r\n          supplier_sku: supplierProduct.supplier_sku ?? null,\r\n          cost_price: supplierProduct.cost_price ?? null,\r\n          currency: supplierProduct.currency ?? null,\r\n          lead_time_days: supplierProduct.lead_time_days ?? null,\r\n        } as OrderListItemDTO['supplier_product'],\r\n      } satisfies OrderListItemDTO;\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to update item supplier:', error);\r\n      throw new Error(`Failed to update item supplier: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get alternative suppliers for a product\r\n   */\r\n  async getAlternativeSuppliers(productId: string): Promise<\r\n    Array<{\r\n      supplier_id: string;\r\n      supplier_name: string;\r\n      supplier_sku?: string;\r\n      cost_price: number;\r\n      currency: string;\r\n      lead_time_days: number;\r\n      is_available: boolean;\r\n      price_difference_percent: number;\r\n    }>\r\n  > {\r\n    try {\r\n      const { data: supplierProducts, error } = await supabase\r\n        .from('supplier_products')\r\n        .select(\r\n          `\r\n          supplier_id,\r\n          supplier_sku,\r\n          cost_price,\r\n          currency,\r\n          lead_time_days,\r\n          is_available,\r\n          suppliers (id, name)\r\n        `\r\n        )\r\n        .eq('product_id', productId)\r\n        .eq('is_available', true)\r\n        .order('cost_price', { ascending: true });\r\n\r\n      if (error) throw error;\r\n\r\n        const lowestPrice = supplierProducts[0]?.cost_price ?? 0;\r\n\r\n      return supplierProducts.map(sp => ({\r\n        supplier_id: sp.supplier_id,\r\n        supplier_name: sp.suppliers?.name ?? '',\r\n        supplier_sku: sp.supplier_sku ?? undefined,\r\n        cost_price: sp.cost_price ?? 0,\r\n        currency: sp.currency || 'EUR',\r\n        lead_time_days: sp.lead_time_days ?? 1,\r\n        is_available: sp.is_available ?? false,\r\n        price_difference_percent:\r\n          lowestPrice > 0 && sp.cost_price !== null\r\n            ? ((sp.cost_price - lowestPrice) / lowestPrice) * 100\r\n            : 0,\r\n      }));\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to get alternative suppliers:', error);\r\n      throw new Error(`Failed to get alternative suppliers: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get analytics for an order list\r\n   */\r\n  async getOrderListAnalytics(\r\n    orderListId: string\r\n  ): Promise<OrderListAnalytics> {\r\n    try {\r\n      const { data: items, error } = await supabase\r\n        .from('order_list_items')\r\n        .select(\r\n          `\r\n          minimum_stock,\r\n          maximum_stock,\r\n          current_stock,\r\n          unit_price,\r\n          lead_time_days,\r\n          suppliers (id, name)\r\n        `\r\n        )\r\n        .eq('order_list_id', orderListId);\r\n\r\n      if (error) throw error;\r\n\r\n      const totalItems = items.length;\r\n      const suppliersCount = new Set(\r\n        items\r\n          .map(item => item.suppliers?.id)\r\n          .filter((id): id is string => Boolean(id))\r\n      ).size;\r\n      const lowStockItems = items.filter(item => {\r\n        const current = item.current_stock ?? 0;\r\n        const minimum = item.minimum_stock ?? 0;\r\n        return current <= minimum;\r\n      }).length;\r\n      const outOfStockItems = items.filter(\r\n        item => (item.current_stock ?? 0) === 0\r\n      ).length;\r\n      const totalValue = items.reduce(\r\n        (sum, item) => sum + (item.unit_price ?? 0),\r\n        0\r\n      );\r\n      const avgLeadTime =\r\n        items.reduce((sum, item) => sum + (item.supplier_product?.lead_time_days ?? 0), 0) /\r\n        (totalItems || 1);\r\n\r\n      // Supplier breakdown\r\n      const supplierMap = new Map<string, {\r\n        supplier_id: string;\r\n        supplier_name: string;\r\n        item_count: number;\r\n        total_value: number;\r\n        total_lead_time: number;\r\n      }>();\r\n      items.forEach(item => {\r\n        const supplierId = item.suppliers?.id;\r\n        if (!supplierId) {\r\n          return;\r\n        }\r\n        if (!supplierMap.has(supplierId)) {\r\n          supplierMap.set(supplierId, {\r\n            supplier_id: supplierId,\r\n            supplier_name: item.suppliers?.name ?? '',\r\n            item_count: 0,\r\n            total_value: 0,\r\n            total_lead_time: 0,\r\n          });\r\n        }\r\n        const supplier = supplierMap.get(supplierId);\r\n        if (!supplier) return;\r\n        supplier.item_count++;\r\n        supplier.total_value += item.unit_price ?? 0;\r\n        supplier.total_lead_time += item.supplier_product?.lead_time_days ?? 0;\r\n      });\r\n\r\n      const supplierBreakdown = Array.from(supplierMap.values()).map(\r\n        supplier => ({\r\n          ...supplier,\r\n          avg_lead_time: supplier.total_lead_time / supplier.item_count,\r\n        })\r\n      );\r\n\r\n      return {\r\n        total_items: totalItems,\r\n        suppliers_count: suppliersCount,\r\n        low_stock_items: lowStockItems,\r\n        out_of_stock_items: outOfStockItems,\r\n        total_value: totalValue,\r\n        avg_lead_time: avgLeadTime || 0,\r\n        supplier_breakdown: supplierBreakdown,\r\n      };\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to get order list analytics:', error);\r\n      throw new Error(`Failed to get order list analytics: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize supplier selection for better pricing and lead times\r\n   */\r\n  async optimizeSupplierSelection(\r\n    orderListId: string,\r\n    criteria: {\r\n      prioritize: 'price' | 'lead_time' | 'balanced';\r\n      max_price_increase_percent?: number;\r\n      max_lead_time_days?: number;\r\n    }\r\n  ): Promise<{\r\n    recommendations: Array<{\r\n      item_id: string;\r\n      current_supplier: string;\r\n      recommended_supplier: string;\r\n      price_savings: number;\r\n      lead_time_improvement: number;\r\n      reason: string;\r\n    }>;\r\n    total_savings: number;\r\n    avg_lead_time_improvement: number;\r\n  }> {\r\n    try {\r\n      orderLogger.info(\r\n        'Optimizing supplier selection for order list:',\r\n        orderListId\r\n      );\r\n\r\n      // Get current order list items\r\n      const { data: items, error: itemsError } = await supabase\r\n        .from('order_list_items')\r\n        .select(\r\n          `\r\n          id,\r\n          product_id,\r\n          supplier_product_id,\r\n          preferred_supplier_id,\r\n          unit_price,\r\n          supplier_product:supplier_products(id, supplier_id, supplier_sku, cost_price, currency, lead_time_days),\r\n          suppliers (id, name, lead_time_days)\r\n        `\r\n        )\r\n        .eq('order_list_id', orderListId);\r\n\r\n      if (itemsError) throw itemsError;\r\n\r\n      const recommendations: Array<{\r\n        item_id: string;\r\n        current_supplier: string;\r\n        recommended_supplier: string;\r\n        price_savings: number;\r\n        lead_time_improvement: number;\r\n        reason: string;\r\n      }> = [];\r\n      let totalSavings = 0;\r\n      let totalLeadTimeImprovement = 0;\r\n\r\n      for (const item of items) {\r\n        const alternatives = await this.getAlternativeSuppliers(\r\n          item.product_id\r\n        );\r\n\r\n        if (alternatives.length <= 1) continue; // No alternatives\r\n\r\n        const currentPrice = item.unit_price ?? 0;\r\n        const currentLeadTime = item.supplier_product?.lead_time_days ?? 7;\r\n        const currentSupplierId =\r\n          item.preferred_supplier_id ??\r\n          item.supplier_product?.supplier_id ??\r\n          null;\r\n\r\n        let bestAlternative;\r\n\r\n        switch (criteria.prioritize) {\r\n          case 'price':\r\n            bestAlternative = alternatives\r\n              .filter(alt => alt.supplier_id !== currentSupplierId)\r\n              .filter(alt => alt.cost_price < currentPrice)\r\n              .sort((a, b) => a.cost_price - b.cost_price)[0];\r\n            break;\r\n\r\n          case 'lead_time':\r\n            bestAlternative = alternatives\r\n              .filter(alt => alt.supplier_id !== currentSupplierId)\r\n            .filter(alt => alt.lead_time_days < currentLeadTime)\r\n              .sort((a, b) => a.lead_time_days - b.lead_time_days)[0];\r\n            break;\r\n\r\n          case 'balanced':\r\n            bestAlternative = alternatives\r\n              .filter(alt => alt.supplier_id !== currentSupplierId)\r\n              .map(alt => ({\r\n                ...alt,\r\n                score:\r\n                  (currentPrice > 0\r\n                    ? ((currentPrice - alt.cost_price) / currentPrice) * 0.6\r\n                    : 0) +\r\n                  (currentLeadTime > 0\r\n                    ? ((currentLeadTime - alt.lead_time_days) / currentLeadTime) *\r\n                      0.4\r\n                    : 0),\r\n              }))\r\n              .filter(alt => alt.score > 0)\r\n              .sort((a, b) => b.score - a.score)[0];\r\n            break;\r\n        }\r\n\r\n        if (bestAlternative) {\r\n          const priceSavings = currentPrice - bestAlternative.cost_price;\r\n          const leadTimeImprovement =\r\n            currentLeadTime - bestAlternative.lead_time_days;\r\n\r\n          // Apply criteria filters\r\n          if (\r\n            criteria.max_price_increase_percent &&\r\n            priceSavings < 0 &&\r\n            Math.abs((priceSavings / currentPrice) * 100) >\r\n              criteria.max_price_increase_percent\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n          if (\r\n            criteria.max_lead_time_days &&\r\n            bestAlternative.lead_time_days > criteria.max_lead_time_days\r\n          ) {\r\n            continue;\r\n          }\r\n\r\n        recommendations.push({\r\n          item_id: item.id,\r\n          current_supplier: item.suppliers?.name ?? 'Unknown',\r\n            recommended_supplier: bestAlternative.supplier_name,\r\n            price_savings: priceSavings,\r\n            lead_time_improvement: leadTimeImprovement,\r\n            reason:\r\n              priceSavings > 0\r\n                ? `Save €${priceSavings.toFixed(2)} per unit`\r\n                : `Improve lead time by ${leadTimeImprovement} days`,\r\n          });\r\n\r\n          totalSavings += priceSavings;\r\n          totalLeadTimeImprovement += leadTimeImprovement;\r\n        }\r\n      }\r\n\r\n      orderLogger.info('✅ Supplier optimization completed');\r\n\r\n      return {\r\n        recommendations,\r\n        total_savings: totalSavings,\r\n        avg_lead_time_improvement:\r\n          recommendations.length > 0\r\n            ? totalLeadTimeImprovement / recommendations.length\r\n            : 0,\r\n      };\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to optimize supplier selection:', error);\r\n      throw new Error(\r\n        `Failed to optimize supplier selection: ${error.message}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Duplicate an order list to another department/location\r\n   */\r\n  async duplicateOrderList(\r\n    orderListId: string,\r\n    newData: {\r\n      name: string;\r\n      description?: string;\r\n      location_id: string;\r\n    }\r\n  ): Promise<SupplierAgnosticOrderList> {\r\n    try {\r\n      orderLogger.info('Duplicating order list:', orderListId);\r\n\r\n      // Get original order list\r\n      const { data: originalList, error: listError } = await supabase\r\n        .from('order_lists')\r\n        .select(\r\n          `\r\n          practice_id,\r\n          auto_reorder_enabled,\r\n          order_list_items (\r\n            product_id,\r\n            preferred_supplier_id,\r\n            minimum_stock,\r\n            maximum_stock,\r\n            is_preferred_supplier\r\n          )\r\n        `\r\n        )\r\n        .eq('id', orderListId)\r\n        .single<\r\n          OrderListRow & {\r\n            order_list_items: Array<\r\n              OrderListItemRow & {\r\n                preferred_supplier_id?: string | null;\r\n                supplier_id?: string | null;\r\n              }\r\n            >;\r\n          }\r\n        >();\r\n\r\n      if (listError) throw listError;\r\n\r\n      // Create new order list\r\n      if (!newData.location_id) {\r\n        throw new Error('Location is required to duplicate order list');\r\n      }\r\n\r\n      const newOrderList = await this.createOrderList({\r\n        practice_id: originalList.practice_id,\r\n        name: newData.name,\r\n        description: newData.description,\r\n        location_id: newData.location_id,\r\n        auto_reorder_enabled: originalList.auto_reorder_enabled ?? false,\r\n      });\r\n\r\n      // Copy all items\r\n      const itemPromises = originalList.order_list_items.map(item => {\r\n        const supplierId =\r\n          item.preferred_supplier_id ??\r\n          (item as { supplier_id?: string | null }).supplier_id ??\r\n          null;\r\n\r\n        if (!supplierId) {\r\n          return Promise.resolve(null);\r\n        }\r\n\r\n        return this.addProductToOrderList(newOrderList.id, {\r\n          product_id: item.product_id,\r\n          supplier_id: supplierId,\r\n          minimum_stock: item.minimum_stock ?? 0,\r\n          maximum_stock: item.maximum_stock ?? 0,\r\n        });\r\n      });\r\n\r\n      const items = (await Promise.all(itemPromises)).filter(\r\n        (item): item is OrderListItemDTO => item !== null\r\n      );\r\n\r\n      orderLogger.info('✅ Order list duplicated successfully');\r\n\r\n      return {\r\n        ...newOrderList,\r\n        items,\r\n      };\r\n    } catch (error: any) {\r\n      orderLogger.error('❌ Failed to duplicate order list:', error);\r\n      throw new Error(`Failed to duplicate order list: ${error.message}`);\r\n    }\r\n  }\r\n}\r\n\r\nexport const multiSupplierOrderListService =\r\n  new MultiSupplierOrderListService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\apiService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1434, 1437], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1434, 1437], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4414, 4417], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4414, 4417], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 333,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 333,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9815, 9818], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9815, 9818], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 350,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 350,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10270, 10273], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10270, 10273], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 401,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 401,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11626, 11629], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11626, 11629], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 430,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 430,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12307, 12310], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12307, 12310], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 512,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 512,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14545, 14548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14545, 14548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 571,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 571,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16138, 16141], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16138, 16141], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16726, 16729], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16726, 16729], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport { t } from '@/utils/i18n-service';\nimport type {\n  SupplierOrder,\n  OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { Tables } from '@/types';\n\nexport interface APIConfig {\n  api_endpoint: string;\n  api_key?: string;\n  api_username?: string;\n  api_password?: string;\n  api_token?: string;\n  api_format?: 'json' | 'xml' | 'form-data';\n  api_auth_type?: 'bearer' | 'basic' | 'api-key' | 'oauth2';\n  oauth2_config?: {\n    client_id?: string;\n    client_secret?: string;\n    token_endpoint?: string;\n    scope?: string;\n  };\n  webhook_url?: string;\n  test_mode?: boolean;\n  timeout_seconds?: number;\n  custom_headers?: Record<string, string>;\n}\n\nexport interface APIOrderPayload {\n  order_reference: string;\n  order_date: string;\n  requested_delivery_date?: string;\n  customer: {\n    id?: string;\n    name: string;\n    address: {\n      street: string;\n      city: string;\n      postal_code: string;\n      country: string;\n    };\n    contact?: {\n      email?: string;\n      phone?: string;\n    };\n  };\n  items: Array<{\n    sku: string;\n    name?: string;\n    quantity: number;\n    unit_price: number;\n    line_total: number;\n  }>;\n  totals: {\n    subtotal: number;\n    tax?: number;\n    shipping?: number;\n    total: number;\n    currency: string;\n  };\n  notes?: string;\n  metadata?: Record<string, any>;\n}\n\nexport class APIService {\n  private cache = new Map<string, { token: string; expires_at: number }>();\n\n  /**\n   * Send order via API\n   */\n  async sendOrderViaAPI(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> {\n    try {\n      orderLogger.info(\n        `Sending order ${orderReference} via API to supplier ${order.supplier_name}`\n      );\n\n      // Get supplier API configuration\n      const { data: supplier, error: supplierError } = await supabase\n        .from('suppliers')\n        .select('integration_config, name, code')\n        .eq('id', order.supplier_id)\n        .single<Tables<'suppliers'>>();\n\n      if (supplierError || !supplier) {\n        throw new Error(t('services.supplierIntegration.supplierNotFound'));\n      }\n\n      const rawConfig = supplier.integration_config;\n      if (!rawConfig || typeof rawConfig !== 'object' || Array.isArray(rawConfig)) {\n        throw new Error(t('services.supplierIntegration.apiEndpointNotConfigured'));\n      }\n\n      const apiConfig = rawConfig as Partial<APIConfig>;\n\n      const apiEndpoint = apiConfig.api_endpoint;\n      if (typeof apiEndpoint !== 'string' || apiEndpoint.length === 0) {\n        throw new Error(\n          t('services.supplierIntegration.apiEndpointNotConfigured')\n        );\n      }\n\n      // Optional auth configuration\n      if (\n        apiConfig.api_auth_type === 'oauth2' &&\n        (!apiConfig.oauth2_config?.client_id ||\n          !apiConfig.oauth2_config.client_secret)\n      ) {\n        throw new Error(\n          t('services.supplierIntegration.oauth2ConfigurationIncomplete')\n        );\n      }\n\n      // Get practice details\n      const { data: practice, error: practiceError } = await supabase\n        .from('practices')\n        .select('name, address, city, postal_code, country, email, phone')\n        .eq('id', order.practice_id)\n        .single<Tables<'practices'>>();\n\n      if (practiceError || !practice) {\n        throw new Error(\n          t('services.supplierIntegration.practiceDetailsNotFound')\n        );\n      }\n\n      // Build API payload\n      const apiPayload = this.buildAPIPayload(order, orderReference, practice);\n\n      // Get authentication token if needed\n      const authHeaders = await this.getAuthHeaders(apiConfig as APIConfig);\n\n      // Send order to API\n      const response = await this.sendToAPI(apiConfig as APIConfig, apiPayload, authHeaders);\n\n      // Record the order\n      await this.recordSupplierOrder(order, orderReference, 'api', response);\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: response.success ? 'success' : 'failed',\n        method_used: 'api',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: response.success ? '' : response.error ?? '',\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    } catch (error: any) {\n      orderLogger.error(\n        `API order sending failed for ${orderReference}:`,\n        error\n      );\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'failed',\n        method_used: 'api',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: error instanceof Error ? error.message : String(error),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    }\n  }\n\n  /**\n   * Build API payload from order data\n   */\n  private buildAPIPayload(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: Tables<'practices'>\n  ): APIOrderPayload {\n      const contact: { email?: string; phone?: string } = {};\n      if (practice.email) {\n        contact.email = practice.email;\n      }\n      if (practice.phone) {\n        contact.phone = practice.phone;\n      }\n\n    return {\n      order_reference: orderReference,\n      order_date: new Date().toISOString(),\n      requested_delivery_date: order.estimated_delivery_date,\n      customer: {\n        id: order.practice_id,\n        name: practice.name ?? '',\n        address: {\n          street: practice.address ?? '',\n          city: practice.city ?? '',\n          postal_code: practice.postal_code ?? '',\n          country: practice.country ?? 'NL',\n        },\n          ...(Object.keys(contact).length > 0 ? { contact } : {}),\n      },\n      items: order.items.map(item => ({\n        sku: item.supplier_sku || item.product_sku || '',\n        name: item.product_name ?? '',\n        quantity: item.quantity,\n        unit_price: item.unit_price ?? 0,\n        line_total: item.quantity * (item.unit_price ?? 0),\n      })),\n      totals: {\n        subtotal: order.items.reduce((sum, item) => sum + item.total_price, 0),\n        total:\n          order.items.reduce((sum, item) => sum + item.total_price, 0) +\n          (order.shipping_cost || 0),\n        currency: 'EUR',\n        shipping: order.shipping_cost ?? undefined,\n      },\n      notes: `Automated order from Remcura for ${practice.name ?? ''}`,\n      metadata: {\n        source: 'remcura',\n        practice_id: order.practice_id,\n        supplier_id: order.supplier_id,\n        created_at: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get authentication headers based on config\n   */\n  private async getAuthHeaders(\n    config: APIConfig\n  ): Promise<Record<string, string>> {\n    const headers: Record<string, string> = {};\n\n    // Add custom headers\n    if (config.custom_headers) {\n      Object.assign(headers, config.custom_headers);\n    }\n\n    switch (config.api_auth_type) {\n      case 'bearer':\n        if (config.api_token) {\n          headers['Authorization'] = `Bearer ${config.api_token}`;\n        } else if (config.oauth2_config) {\n          const token = await this.getOAuth2Token(config);\n          headers['Authorization'] = `Bearer ${token}`;\n        }\n        break;\n\n      case 'basic':\n        if (config.api_username && config.api_password) {\n          const auth = btoa(`${config.api_username}:${config.api_password}`);\n          headers['Authorization'] = `Basic ${auth}`;\n        }\n        break;\n\n      case 'api-key':\n        if (config.api_key) {\n          headers['X-API-Key'] = config.api_key;\n          // Some APIs use different header names\n          headers['Authorization'] = `ApiKey ${config.api_key}`;\n        }\n        break;\n\n      case 'oauth2': {\n        const token = await this.getOAuth2Token(config);\n        headers['Authorization'] = `Bearer ${token}`;\n        break;\n      }\n    }\n\n    return headers;\n  }\n\n  /**\n   * Get OAuth2 token (cached)\n   */\n  private async getOAuth2Token(config: APIConfig): Promise<string> {\n    if (\n      !config.oauth2_config?.client_id ||\n      !config.oauth2_config?.client_secret\n    ) {\n      throw new Error(\n        t('services.supplierIntegration.oauth2ConfigurationIncomplete')\n      );\n    }\n\n    const cacheKey = `${config.oauth2_config.client_id}_${config.oauth2_config.token_endpoint}`;\n    const cached = this.cache.get(cacheKey);\n\n    // Return cached token if still valid\n    if (cached && cached.expires_at > Date.now() + 60000) {\n      // 1 minute buffer\n      return cached.token;\n    }\n\n    try {\n      const tokenEndpoint =\n        config.oauth2_config.token_endpoint ||\n        `${config.api_endpoint}/oauth/token`;\n\n      const tokenResponse = await fetch(tokenEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'client_credentials',\n          client_id: config.oauth2_config.client_id,\n          client_secret: config.oauth2_config.client_secret,\n          scope: config.oauth2_config.scope || '',\n        }),\n      });\n\n      if (!tokenResponse.ok) {\n        throw new Error(\n          t('services.supplierIntegration.oauth2TokenRequestFailed', {\n            status: tokenResponse.status,\n          })\n        );\n      }\n\n      const tokenData = await tokenResponse.json();\n      const expiresAt = Date.now() + tokenData.expires_in * 1000 - 60000; // 1 minute buffer\n\n      // Cache the token\n      this.cache.set(cacheKey, {\n        token: tokenData.access_token,\n        expires_at: expiresAt,\n      });\n\n      return tokenData.access_token;\n    } catch (error: any) {\n      orderLogger.error('OAuth2 token acquisition failed:', error);\n      throw new Error(\n        t('services.supplierIntegration.oauth2AuthenticationFailed', {\n          error: error.message,\n        })\n      );\n    }\n  }\n\n  /**\n   * Send data to API endpoint\n   */\n  private async sendToAPI(\n    config: APIConfig,\n    payload: APIOrderPayload,\n    authHeaders: Record<string, string>\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\n    try {\n      const headers: Record<string, string> = {\n        ...authHeaders,\n      };\n\n      let body: string | FormData;\n\n      switch (config.api_format || 'json') {\n        case 'json':\n          headers['Content-Type'] = 'application/json';\n          body = JSON.stringify(payload);\n          break;\n\n        case 'xml':\n          headers['Content-Type'] = 'application/xml';\n          body = this.convertToXML(payload);\n          break;\n\n        case 'form-data': {\n          const formData = new FormData();\n          this.flattenObjectToFormData(payload, formData);\n          body = formData;\n          // Don't set Content-Type for FormData, browser will set it with boundary\n          break;\n        }\n\n        default:\n          throw new Error(\n            t('services.supplierIntegration.unsupportedApiFormat', {\n              format: config.api_format,\n            })\n          );\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(\n        () => controller.abort(),\n        (config.timeout_seconds || 30) * 1000\n      );\n\n      const response = await fetch(config.api_endpoint, {\n        method: 'POST',\n        headers,\n        body,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      const responseText = await response.text();\n      let responseData: any;\n\n      try {\n        responseData = JSON.parse(responseText);\n      } catch {\n        responseData = responseText;\n      }\n\n      if (!response.ok) {\n        throw new Error(\n          t('services.supplierIntegration.apiResponseError', {\n            status: response.status,\n            response: responseText,\n          })\n        );\n      }\n\n      orderLogger.info(\n        `API order sent successfully, response: ${response.status}`\n      );\n\n      return {\n        success: true,\n        response: {\n          status: response.status,\n          headers: Object.fromEntries(response.headers.entries()),\n          body: responseData,\n        },\n      };\n    } catch (error: any) {\n      if (error.name === 'AbortError') {\n        orderLogger.error('API request timed out');\n        return {\n          success: false,\n          error: 'Request timed out',\n        };\n      }\n\n      orderLogger.error(`API sending failed: ${error.message}`);\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Convert JSON payload to XML\n   */\n  private convertToXML(payload: APIOrderPayload): string {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Order>\n  <OrderReference>${payload.order_reference}</OrderReference>\n  <OrderDate>${payload.order_date}</OrderDate>\n  ${\n    payload.requested_delivery_date\n      ? `<RequestedDeliveryDate>${payload.requested_delivery_date}</RequestedDeliveryDate>`\n      : ''\n  }\n  <Customer>\n    <ID>${payload.customer.id}</ID>\n    <Name><![CDATA[${payload.customer.name}]]></Name>\n    <Address>\n      <Street><![CDATA[${payload.customer.address.street}]]></Street>\n      <City><![CDATA[${payload.customer.address.city}]]></City>\n      <PostalCode>${payload.customer.address.postal_code}</PostalCode>\n      <Country>${payload.customer.address.country}</Country>\n    </Address>\n    ${\n      payload.customer.contact?.email\n        ? `<Email>${payload.customer.contact.email}</Email>`\n        : ''\n    }\n    ${\n      payload.customer.contact?.phone\n        ? `<Phone>${payload.customer.contact.phone}</Phone>`\n        : ''\n    }\n  </Customer>\n  <Items>\n    ${payload.items\n      .map(\n        item => `\n    <Item>\n      <SKU>${item.sku}</SKU>\n      <Name><![CDATA[${item.name || ''}]]></Name>\n      <Quantity>${item.quantity}</Quantity>\n      <UnitPrice>${item.unit_price}</UnitPrice>\n      <LineTotal>${item.line_total}</LineTotal>\n    </Item>`\n      )\n      .join('')}\n  </Items>\n  <Totals>\n    <Subtotal>${payload.totals.subtotal}</Subtotal>\n    <Total>${payload.totals.total}</Total>\n    <Currency>${payload.totals.currency}</Currency>\n    ${\n      payload.totals.shipping\n        ? `<Shipping>${payload.totals.shipping}</Shipping>`\n        : ''\n    }\n  </Totals>\n  ${payload.notes ? `<Notes><![CDATA[${payload.notes}]]></Notes>` : ''}\n</Order>`;\n  }\n\n  /**\n   * Flatten object to FormData\n   */\n  private flattenObjectToFormData(\n    obj: any,\n    formData: FormData,\n    prefix = ''\n  ): void {\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const formKey = prefix ? `${prefix}[${key}]` : key;\n        const value = obj[key];\n\n        if (\n          value !== null &&\n          typeof value === 'object' &&\n          !(value instanceof Date)\n        ) {\n          if (Array.isArray(value)) {\n            value.forEach((item, index) => {\n              this.flattenObjectToFormData(\n                item,\n                formData,\n                `${formKey}[${index}]`\n              );\n            });\n          } else {\n            this.flattenObjectToFormData(value, formData, formKey);\n          }\n        } else {\n          formData.append(formKey, value?.toString() || '');\n        }\n      }\n    }\n  }\n\n  /**\n   * Record order in supplier_orders table\n   */\n  private async recordSupplierOrder(\n    order: SupplierOrder,\n    orderReference: string,\n    method: string,\n    response: { success: boolean; error?: string; response?: unknown }\n  ): Promise<void> {\n    const subtotal = order.items.reduce((sum, item) => sum + item.total_price, 0);\n    const total = subtotal + (order.shipping_cost || 0);\n\n    orderLogger.info('Supplier order recorded (simulation)', {\n      supplier_id: order.supplier_id,\n      order_reference: orderReference,\n      method,\n      success: response.success,\n      subtotal,\n      total,\n    });\n  }\n\n  /**\n   * Test API connection\n   */\n  async testAPIConnection(\n    config: APIConfig\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\n    try {\n      const headers = await this.getAuthHeaders(config);\n\n      // Try a simple GET request to test the connection\n      const testEndpoint =\n        config.api_endpoint.replace(/\\/orders?$/, '/health') ||\n        `${config.api_endpoint}/test`;\n\n      const response = await fetch(testEndpoint, {\n        method: 'GET',\n        headers,\n      });\n\n      const responseText = await response.text();\n\n      return {\n        success: response.ok,\n        response: {\n          status: response.status,\n          body: responseText,\n        },\n      };\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n}\n\nexport const apiService = new APIService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\ediService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 162,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 162,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5183, 5186], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5183, 5186], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 388,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 388,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12687, 12690], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12687, 12690], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 425,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 425,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13756, 13759], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13756, 13759], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 441,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 441,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14113, 14116], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14113, 14116], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\r\nimport { orderLogger } from '@/utils/logger';\r\nimport type {\r\n  SupplierOrder,\r\n  OrderSendingResult,\r\n} from '@/stores/orderLists/orderLists-supplier-splitting';\r\nimport type { Tables } from '@/types';\r\n\r\nexport interface EDIConfig {\r\n  edi_endpoint: string;\r\n  edi_partner_id: string;\r\n  edi_interchange_id?: string;\r\n  edi_test_mode?: boolean;\r\n  edi_username?: string;\r\n  edi_password?: string;\r\n  edi_format?: 'ORDERS' | 'X12_850' | 'EDIFACT_ORDERS';\r\n}\r\n\r\nexport interface EDIOrderItem {\r\n  line_number: number;\r\n  sku: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  description?: string;\r\n  uom?: string; // Unit of Measure\r\n}\r\n\r\nexport interface EDIOrder {\r\n  order_number: string;\r\n  order_date: string;\r\n  delivery_date?: string;\r\n  buyer_party: {\r\n    gln?: string;\r\n    name: string;\r\n    address: string;\r\n    city: string;\r\n    postal_code: string;\r\n    country: string;\r\n  };\r\n  supplier_party: {\r\n    gln?: string;\r\n    name: string;\r\n    edi_partner_id: string;\r\n  };\r\n  items: EDIOrderItem[];\r\n  currency: string;\r\n  total_amount: number;\r\n  notes?: string;\r\n}\r\n\r\nexport class EDIService {\r\n  /**\r\n   * Send order via EDI/XML\r\n   */\r\n  async sendOrderViaEDI(\r\n    order: SupplierOrder,\r\n    orderReference: string\r\n  ): Promise<OrderSendingResult> {\r\n    try {\r\n      orderLogger.info(\r\n        `Sending order ${orderReference} via EDI to supplier ${order.supplier_name}`\r\n      );\r\n\r\n      // Get supplier EDI configuration\r\n      const { data: supplier, error: supplierError } = await supabase\r\n        .from('suppliers')\r\n        .select('integration_config, name, code')\r\n        .eq('id', order.supplier_id)\r\n        .single<Tables<'suppliers'>>();\r\n\r\n      if (supplierError || !supplier) {\r\n        throw new Error('Supplier not found');\r\n      }\r\n\r\n      const rawConfig = supplier.integration_config;\r\n      if (!rawConfig || typeof rawConfig !== 'object' || Array.isArray(rawConfig)) {\r\n        throw new Error('EDI configuration incomplete');\r\n      }\r\n\r\n      const ediConfig = rawConfig as Partial<EDIConfig>;\r\n      if (!ediConfig.edi_endpoint || !ediConfig.edi_partner_id) {\r\n        throw new Error('EDI configuration incomplete');\r\n      }\r\n\r\n      // Get practice details for buyer party\r\n      const { data: practice, error: practiceError } = await supabase\r\n        .from('practices')\r\n        .select('name, address, city, postal_code, country')\r\n        .eq('id', order.practice_id)\r\n        .single<Tables<'practices'>>();\r\n\r\n      if (practiceError || !practice) {\r\n        throw new Error('Practice details not found');\r\n      }\r\n\r\n      // Build EDI order\r\n      const ediOrder: EDIOrder = {\r\n        order_number: orderReference,\r\n        order_date: new Date().toISOString().split('T')[0] ?? '',\r\n        delivery_date: order.estimated_delivery_date,\r\n        buyer_party: {\r\n          gln:\r\n            (supplier.integration_config as { buyer_gln?: string } | null | undefined)?.buyer_gln ??\r\n            '',\r\n          name: practice.name ?? '',\r\n          address: practice.address ?? '',\r\n          city: practice.city ?? '',\r\n          postal_code: practice.postal_code ?? '',\r\n          country: practice.country ?? '',\r\n        },\r\n        supplier_party: {\r\n          gln: ediConfig.edi_partner_id,\r\n          name: supplier.name,\r\n          edi_partner_id: ediConfig.edi_partner_id,\r\n        },\r\n        items: order.items.map((item, index) => ({\r\n          line_number: index + 1,\r\n          sku: item.supplier_sku || item.product_sku || '',\r\n          quantity: item.quantity,\r\n          unit_price: item.unit_price ?? 0,\r\n          description: item.product_name ?? item.product_sku ?? '',\r\n          uom: 'PCE', // Default to pieces, could be configurable\r\n        })),\r\n        currency: 'EUR',\r\n        total_amount: order.items.reduce((sum, item) => sum + item.total_price, 0),\r\n        notes: `Automated order from Remcura for ${practice.name ?? ''}`,\r\n      };\r\n\r\n      // Generate XML based on EDI format\r\n      let xmlContent: string;\r\n      switch (ediConfig.edi_format || 'ORDERS') {\r\n        case 'EDIFACT_ORDERS':\r\n          xmlContent = this.generateEDIFACTXML(ediOrder);\r\n          break;\r\n        case 'X12_850':\r\n          xmlContent = this.generateX12XML(ediOrder);\r\n          break;\r\n        default:\r\n          xmlContent = this.generateGenericOrderXML(ediOrder);\r\n      }\r\n\r\n      // Send to EDI endpoint\r\n      const response = await this.sendToEDIEndpoint(\r\n        ediConfig as EDIConfig,\r\n        xmlContent,\r\n        orderReference\r\n      );\r\n\r\n      // Record the order in supplier_orders table\r\n      await this.recordSupplierOrder(order, orderReference, 'edi', response);\r\n\r\n      return {\r\n        supplier_id: order.supplier_id,\r\n        supplier_name: order.supplier_name,\r\n        status: response.success ? 'success' : 'failed',\r\n        method_used: 'edi',\r\n        order_reference: orderReference,\r\n        sent_at: new Date().toISOString(),\r\n        error_message: response.success ? '' : response.error ?? '',\r\n        delivery_expected: order.estimated_delivery_date ?? '',\r\n      } satisfies OrderSendingResult;\r\n    } catch (error: any) {\r\n      orderLogger.error(\r\n        `EDI order sending failed for ${orderReference}:`,\r\n        error\r\n      );\r\n\r\n      return {\r\n        supplier_id: order.supplier_id,\r\n        supplier_name: order.supplier_name,\r\n        status: 'failed',\r\n        method_used: 'edi',\r\n        order_reference: orderReference,\r\n        sent_at: new Date().toISOString(),\r\n        error_message: error instanceof Error ? error.message : String(error),\r\n        delivery_expected: order.estimated_delivery_date ?? '',\r\n      } satisfies OrderSendingResult;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate EDIFACT ORDERS D.96A XML\r\n   */\r\n  private generateEDIFACTXML(order: EDIOrder): string {\r\n    const timestamp = new Date()\r\n      .toISOString()\r\n      .replace(/[-:]/g, '')\r\n      .replace(/\\.\\d{3}Z/, '');\r\n\r\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<EDIFACT_ORDERS>\r\n  <UNH>\r\n    <MessageReferenceNumber>${order.order_number}</MessageReferenceNumber>\r\n    <MessageType>ORDERS</MessageType>\r\n    <Version>D</Version>\r\n    <Release>96A</Release>\r\n  </UNH>\r\n  <BGM>\r\n    <DocumentMessageName>220</DocumentMessageName>\r\n    <DocumentMessageNumber>${order.order_number}</DocumentMessageNumber>\r\n    <MessageFunction>9</MessageFunction>\r\n  </BGM>\r\n  <DTM>\r\n    <DateTimePeriod>\r\n      <DateTimePeriodQualifier>137</DateTimePeriodQualifier>\r\n      <DateTimePeriod>${timestamp}</DateTimePeriod>\r\n      <DateTimePeriodFormatQualifier>102</DateTimePeriodFormatQualifier>\r\n    </DateTimePeriod>\r\n  </DTM>\r\n  <NAD_BY>\r\n    <PartyQualifier>BY</PartyQualifier>\r\n    <PartyIdentificationDetails>\r\n      <PartyIdIdentification>${order.buyer_party.gln}</PartyIdIdentification>\r\n    </PartyIdentificationDetails>\r\n    <NameAndAddress>\r\n      <NameAndAddressLine>${order.buyer_party.name}</NameAndAddressLine>\r\n      <NameAndAddressLine>${order.buyer_party.address}</NameAndAddressLine>\r\n      <NameAndAddressLine>${order.buyer_party.postal_code} ${\r\n      order.buyer_party.city\r\n    }</NameAndAddressLine>\r\n      <CountryCode>${order.buyer_party.country}</CountryCode>\r\n    </NameAndAddress>\r\n  </NAD_BY>\r\n  <NAD_SU>\r\n    <PartyQualifier>SU</PartyQualifier>\r\n    <PartyIdentificationDetails>\r\n      <PartyIdIdentification>${order.supplier_party.gln}</PartyIdIdentification>\r\n    </PartyIdentificationDetails>\r\n  </NAD_SU>\r\n  ${order.items\r\n    .map(\r\n      item => `\r\n  <LIN>\r\n    <LineItemNumber>${item.line_number}</LineItemNumber>\r\n    <ItemNumberIdentification>\r\n      <ItemNumber>${item.sku}</ItemNumber>\r\n      <ItemNumberType>SA</ItemNumberType>\r\n    </ItemNumberIdentification>\r\n  </LIN>\r\n  <QTY>\r\n    <QuantityDetails>\r\n      <QuantityQualifier>21</QuantityQualifier>\r\n      <Quantity>${item.quantity}</Quantity>\r\n      <MeasureUnitQualifier>${item.uom}</MeasureUnitQualifier>\r\n    </QuantityDetails>\r\n  </QTY>\r\n  <PRI>\r\n    <PriceInformation>\r\n      <PriceQualifier>AAB</PriceQualifier>\r\n      <Price>${item.unit_price}</Price>\r\n      <PriceType>TU</PriceType>\r\n    </PriceInformation>\r\n  </PRI>`\r\n    )\r\n    .join('')}\r\n  <UNT>\r\n    <NumberOfSegments>${2 + order.items.length * 3}</NumberOfSegments>\r\n    <MessageReferenceNumber>${order.order_number}</MessageReferenceNumber>\r\n  </UNT>\r\n</EDIFACT_ORDERS>`;\r\n  }\r\n\r\n  /**\r\n   * Generate X12 850 (Purchase Order) XML\r\n   */\r\n  private generateX12XML(order: EDIOrder): string {\r\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<X12_850>\r\n  <ST>\r\n    <TransactionSetIdentifierCode>850</TransactionSetIdentifierCode>\r\n    <TransactionSetControlNumber>${\r\n      order.order_number\r\n    }</TransactionSetControlNumber>\r\n  </ST>\r\n  <BEG>\r\n    <TransactionSetPurposeCode>00</TransactionSetPurposeCode>\r\n    <PurchaseOrderTypeCode>NE</PurchaseOrderTypeCode>\r\n    <PurchaseOrderNumber>${order.order_number}</PurchaseOrderNumber>\r\n    <Date>${order.order_date.replace(/-/g, '')}</Date>\r\n  </BEG>\r\n  <N1_BY>\r\n    <EntityIdentifierCode>BY</EntityIdentifierCode>\r\n    <Name>${order.buyer_party.name}</Name>\r\n    <IdentificationCodeQualifier>91</IdentificationCodeQualifier>\r\n    <IdentificationCode>${order.buyer_party.gln}</IdentificationCode>\r\n  </N1_BY>\r\n  <N3_BY>\r\n    <AddressInformation>${order.buyer_party.address}</AddressInformation>\r\n  </N3_BY>\r\n  <N4_BY>\r\n    <CityName>${order.buyer_party.city}</CityName>\r\n    <StateOrProvinceCode></StateOrProvinceCode>\r\n    <PostalCode>${order.buyer_party.postal_code}</PostalCode>\r\n    <CountryCode>${order.buyer_party.country}</CountryCode>\r\n  </N4_BY>\r\n  <N1_ST>\r\n    <EntityIdentifierCode>ST</EntityIdentifierCode>\r\n    <Name>${order.supplier_party.name}</Name>\r\n    <IdentificationCodeQualifier>91</IdentificationCodeQualifier>\r\n    <IdentificationCode>${order.supplier_party.gln}</IdentificationCode>\r\n  </N1_ST>\r\n  ${order.items\r\n    .map(\r\n      item => `\r\n  <PO1>\r\n    <AssignedIdentification>${item.line_number}</AssignedIdentification>\r\n    <QuantityOrdered>${item.quantity}</QuantityOrdered>\r\n    <UnitOrBasisForMeasurementCode>${item.uom}</UnitOrBasisForMeasurementCode>\r\n    <UnitPrice>${item.unit_price}</UnitPrice>\r\n    <BasisOfUnitPriceCode>PE</BasisOfUnitPriceCode>\r\n    <ProductServiceIdQualifier>SK</ProductServiceIdQualifier>\r\n    <ProductServiceId>${item.sku}</ProductServiceId>\r\n  </PO1>`\r\n    )\r\n    .join('')}\r\n  <CTT>\r\n    <NumberOfLineItems>${order.items.length}</NumberOfLineItems>\r\n  </CTT>\r\n  <SE>\r\n    <NumberOfIncludedSegments>${\r\n      4 + order.items.length\r\n    }</NumberOfIncludedSegments>\r\n    <TransactionSetControlNumber>${\r\n      order.order_number\r\n    }</TransactionSetControlNumber>\r\n  </SE>\r\n</X12_850>`;\r\n  }\r\n\r\n  /**\r\n   * Generate generic order XML for suppliers without specific EDI format\r\n   */\r\n  private generateGenericOrderXML(order: EDIOrder): string {\r\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Order xmlns=\"http://www.remcura.nl/order/schema\">\r\n  <Header>\r\n    <OrderNumber>${order.order_number}</OrderNumber>\r\n    <OrderDate>${order.order_date}</OrderDate>\r\n    <Currency>${order.currency}</Currency>\r\n    <TotalAmount>${order.total_amount}</TotalAmount>\r\n    ${\r\n      order.delivery_date\r\n        ? `<RequestedDeliveryDate>${order.delivery_date}</RequestedDeliveryDate>`\r\n        : ''\r\n    }\r\n  </Header>\r\n  <BuyerParty>\r\n    <Name>${order.buyer_party.name}</Name>\r\n    <GLN>${order.buyer_party.gln}</GLN>\r\n    <Address>\r\n      <Street>${order.buyer_party.address}</Street>\r\n      <City>${order.buyer_party.city}</City>\r\n      <PostalCode>${order.buyer_party.postal_code}</PostalCode>\r\n      <Country>${order.buyer_party.country}</Country>\r\n    </Address>\r\n  </BuyerParty>\r\n  <SupplierParty>\r\n    <Name>${order.supplier_party.name}</Name>\r\n    <PartnerID>${order.supplier_party.edi_partner_id}</PartnerID>\r\n  </SupplierParty>\r\n  <OrderLines>\r\n    ${order.items\r\n      .map(\r\n        item => `\r\n    <OrderLine>\r\n      <LineNumber>${item.line_number}</LineNumber>\r\n      <SKU>${item.sku}</SKU>\r\n      <Description><![CDATA[${item.description || ''}]]></Description>\r\n      <Quantity>${item.quantity}</Quantity>\r\n      <UnitOfMeasure>${item.uom}</UnitOfMeasure>\r\n      <UnitPrice>${item.unit_price}</UnitPrice>\r\n      <LineTotal>${(item.quantity * item.unit_price).toFixed(2)}</LineTotal>\r\n    </OrderLine>`\r\n      )\r\n      .join('')}\r\n  </OrderLines>\r\n  ${order.notes ? `<Notes><![CDATA[${order.notes}]]></Notes>` : ''}\r\n</Order>`;\r\n  }\r\n\r\n  /**\r\n   * Send XML to EDI endpoint\r\n   */\r\n  private async sendToEDIEndpoint(\r\n    config: EDIConfig,\r\n    xmlContent: string,\r\n    orderReference: string\r\n  ): Promise<{ success: boolean; error?: string; response?: any }> {\r\n    try {\r\n      const headers: Record<string, string> = {\r\n        'Content-Type': 'application/xml',\r\n        'X-Order-Reference': orderReference,\r\n      };\r\n\r\n      // Add authentication if configured\r\n      if (config.edi_username && config.edi_password) {\r\n        const auth = btoa(`${config.edi_username}:${config.edi_password}`);\r\n        headers['Authorization'] = `Basic ${auth}`;\r\n      }\r\n\r\n      const response = await fetch(config.edi_endpoint, {\r\n        method: 'POST',\r\n        headers,\r\n        body: xmlContent,\r\n      });\r\n\r\n      const responseText = await response.text();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `EDI endpoint returned ${response.status}: ${responseText}`\r\n        );\r\n      }\r\n\r\n      orderLogger.info(`EDI order ${orderReference} sent successfully`);\r\n\r\n      return {\r\n        success: true,\r\n        response: {\r\n          status: response.status,\r\n          headers: Object.fromEntries(response.headers.entries()),\r\n          body: responseText,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      orderLogger.error(`EDI sending failed: ${error.message}`);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record order in supplier_orders table\r\n   */\r\n  private async recordSupplierOrder(\r\n    order: SupplierOrder,\r\n    orderReference: string,\r\n    method: string,\r\n    response: any\r\n  ): Promise<void> {\r\n    const subtotal = order.items.reduce((sum, item) => sum + item.total_price, 0);\r\n    const total = subtotal + (order.shipping_cost || 0);\r\n\r\n    orderLogger.info('Supplier order recorded (simulation)', {\r\n      supplier_id: order.supplier_id,\r\n      order_reference: orderReference,\r\n      method,\r\n      success: response.success,\r\n      subtotal,\r\n      total,\r\n    });\r\n  }\r\n}\r\n\r\nexport const ediService = new EDIService();\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\pdfService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3556, 3559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3556, 3559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4238, 4241], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4238, 4241], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 148,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 148,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4257, 4260], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4257, 4260], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12321, 12324], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12321, 12324], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 476,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 476,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12340, 12343], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12340, 12343], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 607,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 607,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16586, 16589], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16586, 16589], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 620,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 620,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16906, 16909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16906, 16909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { supabase } from '@/boot/supabase';\nimport { orderLogger } from '@/utils/logger';\nimport type {\n  SupplierOrder,\n  OrderSendingResult,\n} from '@/stores/orderLists/orderLists-supplier-splitting';\nimport type { Tables } from '@/types';\n\nexport interface PDFConfig {\n  email_template?: 'standard' | 'custom';\n  pdf_template?: 'standard' | 'custom';\n  email_subject_template?: string;\n  include_logos?: boolean;\n  include_terms?: boolean;\n  auto_send_email?: boolean;\n  cc_emails?: string[];\n  bcc_emails?: string[];\n  custom_css?: string;\n  footer_text?: string;\n}\n\nexport interface EmailTemplate {\n  subject: string;\n  body_html: string;\n  body_text: string;\n}\n\nexport class PDFService {\n  /**\n   * Send order via PDF (email with PDF attachment)\n   */\n  async sendOrderViaPDF(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<OrderSendingResult> {\n    try {\n      orderLogger.info(\n        `Generating PDF order ${orderReference} for supplier ${order.supplier_name}`\n      );\n\n      // Get supplier and practice details\n      const [supplierResult, practiceResult] = await Promise.all([\n        supabase\n          .from('suppliers')\n          .select('integration_config, name, contact_email, contact_person')\n          .eq('id', order.supplier_id)\n          .single<Tables<'suppliers'>>(),\n        supabase\n          .from('practices')\n          .select(\n            'name, address, city, postal_code, country, contact_email, contact_phone, logo_url'\n          )\n          .eq('id', order.practice_id)\n          .single<Tables<'practices'>>(),\n      ]);\n\n      if (supplierResult.error || !supplierResult.data) {\n        throw new Error('Supplier not found');\n      }\n\n      if (practiceResult.error || !practiceResult.data) {\n        throw new Error('Practice details not found');\n      }\n\n      const supplier = supplierResult.data;\n      const practice = practiceResult.data;\n      const practiceName = practice.name ?? 'Onbekende praktijk';\n      const rawConfig = supplier.integration_config;\n      const pdfConfig: PDFConfig =\n        rawConfig && typeof rawConfig === 'object' && !Array.isArray(rawConfig)\n          ? (rawConfig as PDFConfig)\n          : {};\n\n      if (!supplier.contact_email) {\n        throw new Error('Supplier email not configured');\n      }\n\n      // Generate PDF content\n      const pdfHTML = this.generatePDFHTML(\n        order,\n        orderReference,\n        { ...practice, name: practiceName },\n        supplier,\n        pdfConfig\n      );\n\n      // Generate PDF using browser's print functionality (would need actual PDF generation in production)\n      const pdfBlob = await this.generatePDFBlob(pdfHTML);\n\n      // Prepare email\n      const emailTemplate = this.generateEmailTemplate(\n        order,\n        orderReference,\n        { ...practice, name: practiceName },\n        supplier,\n        pdfConfig\n      );\n\n      // Send email with PDF attachment\n      await this.sendEmail(\n        supplier.contact_email,\n        emailTemplate,\n        pdfBlob,\n        orderReference,\n        pdfConfig\n      );\n\n      // Record the order\n      await this.recordSupplierOrder(order, orderReference, 'pdf', {\n        success: true,\n      });\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'success',\n        method_used: 'pdf',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    } catch (error: any) {\n      orderLogger.error(\n        `PDF order sending failed for ${orderReference}:`,\n        error\n      );\n\n      return {\n        supplier_id: order.supplier_id,\n        supplier_name: order.supplier_name,\n        status: 'failed',\n        method_used: 'pdf',\n        order_reference: orderReference,\n        sent_at: new Date().toISOString(),\n        error_message: error instanceof Error ? error.message : String(error),\n        delivery_expected: order.estimated_delivery_date ?? '',\n      } satisfies OrderSendingResult;\n    }\n  }\n\n  /**\n   * Generate PDF HTML content\n   */\n  private generatePDFHTML(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: any,\n    supplier: any,\n    config: PDFConfig\n  ): string {\n    const currentDate = new Date().toLocaleDateString('nl-NL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n\n    const practiceName = practice.name ?? 'Onbekende praktijk';\n\n    return `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Bestelling ${orderReference}</title>\n  <style>\n    ${this.getDefaultPDFStyles()}\n    ${config.custom_css || ''}\n  </style>\n</head>\n<body>\n  <div class=\"pdf-container\">\n    <!-- Header -->\n    <header class=\"order-header\">\n      <div class=\"header-left\">\n        ${\n          config.include_logos && practice.logo_url\n            ? `<img src=\"${practice.logo_url}\" alt=\"${practice.name}\" class=\"logo\">`\n            : ''\n        }\n        <div class=\"practice-info\">\n          <h1>${practiceName}</h1>\n          <div class=\"address\">\n            ${practice.address}<br>\n            ${practice.postal_code} ${practice.city}<br>\n            ${practice.country}\n          </div>\n          ${\n            practice.contact_email\n              ? `<div class=\"contact\">Email: ${practice.contact_email}</div>`\n              : ''\n          }\n          ${\n            practice.contact_phone\n              ? `<div class=\"contact\">Tel: ${practice.contact_phone}</div>`\n              : ''\n          }\n        </div>\n      </div>\n      <div class=\"header-right\">\n        <h2>BESTELLING</h2>\n        <div class=\"order-info\">\n          <div><strong>Bestelnummer:</strong> ${orderReference}</div>\n          <div><strong>Datum:</strong> ${currentDate}</div>\n          ${\n            order.estimated_delivery_date\n              ? `<div><strong>Gewenste leverdatum:</strong> ${new Date(\n                  order.estimated_delivery_date\n                ).toLocaleDateString('nl-NL')}</div>`\n              : ''\n          }\n        </div>\n      </div>\n    </header>\n\n    <!-- Supplier info -->\n    <section class=\"supplier-section\">\n      <h3>Leverancier</h3>\n      <div class=\"supplier-info\">\n        <strong>${supplier.name}</strong>\n        ${\n          supplier.contact_person ? `<br>T.a.v. ${supplier.contact_person}` : ''\n        }\n      </div>\n    </section>\n\n    <!-- Order items -->\n    <section class=\"items-section\">\n      <h3>Bestelde artikelen</h3>\n      <table class=\"items-table\">\n        <thead>\n          <tr>\n            <th>Artikel</th>\n            <th>SKU</th>\n            <th>Aantal</th>\n            <th>Prijs per stuk</th>\n            <th>Totaal</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${order.items\n            .map(\n              item => `\n          <tr>\n            <td>${item.product_name}</td>\n            <td>${item.supplier_sku || ''}</td>\n            <td>${item.quantity}</td>\n            <td>€${(item.unit_price ?? 0).toFixed(2)}</td>\n            <td>€${item.total_price.toFixed(2)}</td>\n          </tr>\n          `\n            )\n            .join('')}\n        </tbody>\n        <tfoot>\n          <tr class=\"total-row\">\n            <td colspan=\"3\"><strong>Totaal aantal artikelen:</strong></td>\n            <td><strong>${order.total_items}</strong></td>\n          <td><strong>€${order.items\n            .reduce((sum, item) => sum + item.total_price, 0)\n            .toFixed(2)}</strong></td>\n          </tr>\n          ${\n            order.shipping_cost\n              ? `\n          <tr>\n            <td colspan=\"4\">Verzendkosten</td>\n            <td>€${order.shipping_cost.toFixed(2)}</td>\n          </tr>\n          <tr class=\"grand-total\">\n            <td colspan=\"4\"><strong>Totaal inclusief verzending</strong></td>\n          <td><strong>€${(\n            order.items.reduce((sum, item) => sum + item.total_price, 0) +\n            order.shipping_cost\n          ).toFixed(2)}</strong></td>\n          </tr>\n          `\n              : ''\n          }\n        </tfoot>\n      </table>\n    </section>\n\n    <!-- Additional notes -->\n    <section class=\"notes-section\">\n      <h3>Opmerkingen</h3>\n      <p>Deze bestelling is automatisch gegenereerd door Remcura voor ${\n        practiceName\n      }.</p>\n      <p>Gelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.</p>\n    </section>\n\n    ${\n      config.include_terms\n        ? `\n    <section class=\"terms-section\">\n      <h3>Algemene voorwaarden</h3>\n      <p>Deze bestelling is onderworpen aan de algemene voorwaarden van ${practiceName} en de leverancier.</p>\n    </section>\n    `\n        : ''\n    }\n\n    <!-- Footer -->\n    <footer class=\"order-footer\">\n      ${\n        config.footer_text ||\n        `<p>Gegenereerd op ${new Date().toLocaleString(\n          'nl-NL'\n        )} door Remcura</p>`\n      }\n    </footer>\n  </div>\n</body>\n</html>`;\n  }\n\n  /**\n   * Get default PDF styles\n   */\n  private getDefaultPDFStyles(): string {\n    return `\n      * {\n        margin: 0;\n        padding: 0;\n        box-sizing: border-box;\n      }\n      \n      body {\n        font-family: Arial, sans-serif;\n        font-size: 12px;\n        line-height: 1.4;\n        color: #333;\n      }\n      \n      .pdf-container {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 20px;\n      }\n      \n      .order-header {\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 30px;\n        padding-bottom: 20px;\n        border-bottom: 2px solid #2196F3;\n      }\n      \n      .logo {\n        max-height: 60px;\n        margin-bottom: 10px;\n      }\n      \n      .practice-info h1 {\n        font-size: 18px;\n        color: #2196F3;\n        margin-bottom: 10px;\n      }\n      \n      .address {\n        margin-bottom: 10px;\n      }\n      \n      .contact {\n        font-size: 11px;\n        color: #666;\n      }\n      \n      .header-right {\n        text-align: right;\n      }\n      \n      .header-right h2 {\n        font-size: 24px;\n        color: #2196F3;\n        margin-bottom: 15px;\n      }\n      \n      .order-info div {\n        margin-bottom: 5px;\n      }\n      \n      .supplier-section, .items-section, .notes-section, .terms-section {\n        margin-bottom: 25px;\n      }\n      \n      h3 {\n        font-size: 14px;\n        color: #2196F3;\n        margin-bottom: 10px;\n        border-bottom: 1px solid #e0e0e0;\n        padding-bottom: 5px;\n      }\n      \n      .items-table {\n        width: 100%;\n        border-collapse: collapse;\n        margin-top: 10px;\n      }\n      \n      .items-table th,\n      .items-table td {\n        border: 1px solid #ddd;\n        padding: 8px;\n        text-align: left;\n      }\n      \n      .items-table th {\n        background-color: #f5f5f5;\n        font-weight: bold;\n      }\n      \n      .items-table td:nth-child(3),\n      .items-table td:nth-child(4),\n      .items-table td:nth-child(5) {\n        text-align: right;\n      }\n      \n      .total-row td {\n        background-color: #f9f9f9;\n        font-weight: bold;\n      }\n      \n      .grand-total td {\n        background-color: #2196F3;\n        color: white;\n        font-weight: bold;\n      }\n      \n      .notes-section p {\n        margin-bottom: 8px;\n      }\n      \n      .order-footer {\n        margin-top: 40px;\n        padding-top: 20px;\n        border-top: 1px solid #e0e0e0;\n        text-align: center;\n        font-size: 10px;\n        color: #666;\n      }\n      \n      @media print {\n        .pdf-container {\n          margin: 0;\n          padding: 0;\n        }\n        \n        body {\n          -webkit-print-color-adjust: exact;\n        }\n      }\n    `;\n  }\n\n  /**\n   * Generate PDF blob (simplified - in production use a proper PDF library)\n   */\n  private async generatePDFBlob(htmlContent: string): Promise<Blob> {\n    // This is a simplified approach. In a production environment, you would use:\n    // - Puppeteer for server-side PDF generation\n    // - jsPDF for client-side PDF generation\n    // - Or a PDF generation service\n\n    // For now, we'll return the HTML as a blob that can be printed to PDF\n    return new Blob([htmlContent], { type: 'text/html' });\n  }\n\n  /**\n   * Generate email template\n   */\n  private generateEmailTemplate(\n    order: SupplierOrder,\n    orderReference: string,\n    practice: any,\n    supplier: any,\n    config: PDFConfig\n  ): EmailTemplate {\n    const defaultSubject = config.email_subject_template\n      ? config.email_subject_template\n          .replace('{order_reference}', orderReference)\n          .replace('{practice_name}', practice.name)\n          .replace('{supplier_name}', supplier.name)\n      : `Nieuwe bestelling ${orderReference} van ${practice.name}`;\n\n    const bodyHtml = `\n      <html>\n        <body style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\n          <h2>Nieuwe bestelling</h2>\n          \n          <p>Beste ${supplier.contact_person || supplier.name},</p>\n          \n          <p>Hierbij ontvangt u een nieuwe bestelling van <strong>${\n            practice.name\n          }</strong>.</p>\n          \n          <h3>Bestelling details:</h3>\n          <ul>\n            <li><strong>Bestelnummer:</strong> ${orderReference}</li>\n            <li><strong>Verzendinformatie:</strong> ${order.estimated_delivery_date ? `Verwachte levering op ${new Date(order.estimated_delivery_date).toLocaleDateString('nl-NL')}` : 'Geen informatie beschikbaar'}</li>\n            <li><strong>Totaal aantal artikelen:</strong> ${order.total_items}</li>\n            <li><strong>Totaalwaarde:</strong> €${order.items\n              .reduce((sum, item) => sum + item.total_price, 0)\n              .toFixed(2)}</li>\n            ${\n              order.shipping_cost\n                ? `<li><strong>Verzendkosten:</strong> €${order.shipping_cost.toFixed(2)}</li>`\n                : ''\n            }\n            ${\n              order.estimated_delivery_date\n                ? `<li><strong>Gewenste leverdatum:</strong> ${new Date(\n                    order.estimated_delivery_date\n                  ).toLocaleDateString('nl-NL')}</li>`\n                : ''\n            }\n          </ul>\n          \n          <p>Zie de bijgevoegde PDF voor alle details van de bestelling.</p>\n          \n          <p>Gelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.</p>\n          \n          <p>Met vriendelijke groet,<br>\n          ${practice.name}<br>\n          ${practice.contact_email || ''}</p>\n          \n          <hr>\n          <p style=\"font-size: 12px; color: #666;\">\n            Deze email is automatisch gegenereerd door Remcura.\n          </p>\n        </body>\n      </html>\n    `;\n\n    const bodyText = `\nNieuwe bestelling\n\nBeste ${supplier.contact_person || supplier.name},\n\nHierbij ontvangt u een nieuwe bestelling van ${practice.name}.\n\nBestelling details:\n- Bestelnummer: ${orderReference}\n- Datum: ${new Date().toLocaleDateString('nl-NL')}\n- Aantal artikelen: ${order.total_items}\n${\n  order.estimated_delivery_date\n    ? `- Gewenste leverdatum: ${new Date(\n        order.estimated_delivery_date\n      ).toLocaleDateString('nl-NL')}`\n    : ''\n}\n\nZie de bijgevoegde PDF voor alle details van de bestelling.\n\nGelieve deze bestelling te bevestigen en een verwachte leverdatum door te geven.\n\nMet vriendelijke groet,\n${practice.name}\n${practice.contact_email || ''}\n\n---\nDeze email is automatisch gegenereerd door Remcura.\n    `;\n\n    return {\n      subject: defaultSubject,\n      body_html: bodyHtml,\n      body_text: bodyText,\n    };\n  }\n\n  /**\n   * Send email with PDF attachment\n   */\n  private async sendEmail(\n    recipientEmail: string,\n    template: EmailTemplate,\n    pdfBlob: Blob,\n    orderReference: string,\n    config: PDFConfig\n  ): Promise<void> {\n    try {\n      // In a production environment, you would integrate with an email service like:\n      // - SendGrid\n      // - Mailgun\n      // - AWS SES\n      // - Or use Supabase Edge Functions for email sending\n\n      // For now, we'll simulate the email sending\n      orderLogger.info(\n        `Email sent to ${recipientEmail} with PDF attachment for order ${orderReference}`\n      );\n\n      // Create a download link for the PDF (for testing purposes)\n      const pdfUrl = URL.createObjectURL(pdfBlob);\n      console.log(`PDF download link: ${pdfUrl}`);\n\n      // Log email details\n      orderLogger.info('Email details:', {\n        to: recipientEmail,\n        cc: config.cc_emails || [],\n        bcc: config.bcc_emails || [],\n        subject: template.subject,\n        attachment: `order_${orderReference}.pdf`,\n      });\n    } catch (error: any) {\n      orderLogger.error('Email sending failed:', error);\n      throw new Error(`Failed to send email: ${error.message}`);\n    }\n  }\n\n  /**\n   * Record order in supplier_orders table\n   */\n  private async recordSupplierOrder(\n    order: SupplierOrder,\n    orderReference: string,\n    method: string,\n    response: any\n  ): Promise<void> {\n    orderLogger.info('Supplier order recorded (simulation)', {\n      supplier_id: order.supplier_id,\n      order_reference: orderReference,\n      method,\n      success: response.success,\n    });\n  }\n\n  /**\n   * Generate PDF for download (without sending email)\n   */\n  async generatePDFForDownload(\n    order: SupplierOrder,\n    orderReference: string\n  ): Promise<Blob> {\n    // Get practice and supplier details\n    const [practiceResult, supplierResult] = await Promise.all([\n      supabase\n        .from('practices')\n        .select(\n          'name, address, city, postal_code, country, contact_email, contact_phone, logo_url'\n        )\n        .eq('id', order.practice_id)\n        .single(),\n      supabase\n        .from('suppliers')\n        .select('name, contact_person, integration_config')\n        .eq('id', order.supplier_id)\n        .single(),\n    ]);\n\n    if (practiceResult.error || supplierResult.error) {\n      throw new Error('Failed to fetch order details');\n    }\n\n    const practice = practiceResult.data;\n    const supplier = supplierResult.data;\n    const config = (supplier.integration_config as PDFConfig) || {};\n\n    const htmlContent = this.generatePDFHTML(\n      order,\n      orderReference,\n      practice,\n      supplier,\n      config\n    );\n    return this.generatePDFBlob(htmlContent);\n  }\n}\n\nexport const pdfService = new PDFService();\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\services\\supplierIntegration\\types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\auth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\batch.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProductBatchWithDetailsView' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CreateBatchRequest' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapProductBatchRowToDetails' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'t' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mapStockLevelRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport type {\n  ProductBatch,\n  ProductBatchWithDetails,\n  ProductBatchWithDetailsView,\n  CreateBatchRequest,\n  UpdateBatchRequest,\n  ExpiringBatch,\n  BatchMovement,\n} from '@/types/inventory';\nimport { mapProductBatchRowToDetails } from '@/types/inventory';\nimport type { Tables } from '@/types';\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\nimport {\n  calculateBatchUrgency,\n  sortBatchesFIFO,\n  filterBatchesByUrgency,\n  validateBatchData,\n  areBatchNumbersSimilar,\n} from '@/utils/batch-helpers';\nimport { toArray } from '@/utils/array';\nimport { t } from '@/utils/i18n-service';\nimport {\n  mapProductBatchRow,\n  ProductBatchDTO,\n  mapStockLevelRow,\n} from '@/domain/inventory/bridge';\nimport { toProductBatchInsert, toProductBatchUpdate } from '@/domain/inventory/payload';\n\ninterface ProductBatchFetchRow extends Tables<'product_batches'> {\n  product: { id: string; name: string | null; sku: string | null } | null;\n  location: { id: string; name: string | null } | null;\n  supplier: { id: string; name: string | null } | null;\n}\n\nexport const useBatchStore = defineStore('batch', () => {\n  const batches = ref<ProductBatchDTO[]>([]);\n  const expiringBatches = ref<ExpiringBatch[]>([]);\n  const fifoBatches = ref<ProductBatchDTO[]>([]);\n  const loading = ref(false);\n  const error = ref<string | null>(null);\n\n  const batchesByProduct = computed(() => (productId: string) =>\n    batches.value.filter(batch => batch.productId === productId)\n  );\n  const batchesByLocation = computed(() => (locationId: string) =>\n    batches.value.filter(batch => batch.locationId === locationId)\n  );\n\n  const expiredBatches = computed(() =>\n    batches.value.filter(batch => new Date(batch.expiryDate) < new Date())\n  );\n\n  const expiringBatchesCount = computed(() => {\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    return batches.value.filter(batch => {\n      const expiryDate = new Date(batch.expiryDate);\n      return expiryDate <= thirtyDaysFromNow && expiryDate > new Date();\n    }).length;\n  });\n\n  const lowStockBatches = computed(() =>\n    batches.value.filter(batch => batch.currentQuantity <= 10)\n  );\n\n  const totalValue = computed(() =>\n    batches.value.reduce((total, batch) => {\n      const unitCost = batch.unitCost || 0;\n      return total + batch.currentQuantity * unitCost;\n    }, 0)\n  );\n\n  const batchesSortedByFIFO = computed(() =>\n    sortBatchesFIFO(\n      batches.value.map(batch => ({\n        id: batch.id,\n        expiry_date: batch.expiryDate,\n        current_quantity: batch.currentQuantity,\n        created_at: batch.createdAt,\n      }))\n    )\n  );\n\n  const criticalBatches = computed(() =>\n    filterBatchesByUrgency(\n      batches.value.map(batch => ({\n        id: batch.id,\n        expiry_date: batch.expiryDate,\n        current_quantity: batch.currentQuantity,\n      })),\n      ['critical', 'expired']\n    )\n  );\n\n  const warningBatches = computed(() =>\n    filterBatchesByUrgency(\n      batches.value.map(batch => ({\n        id: batch.id,\n        expiry_date: batch.expiryDate,\n        current_quantity: batch.currentQuantity,\n      })),\n      ['warning', 'high']\n    )\n  );\n\n  const batchesWithUrgency = computed(() =>\n    batches.value.map(batch => ({\n      ...batch,\n      urgencyInfo: calculateBatchUrgency(batch.expiryDate),\n    }))\n  );\n\n  const batchesByUrgencyLevel = computed(() => {\n    const grouped: Record<string, ProductBatchDTO[]> = {\n      expired: [],\n      critical: [],\n      high: [],\n      warning: [],\n      low: [],\n      normal: [],\n    };\n\n    batches.value.forEach(batch => {\n      const urgency = calculateBatchUrgency(batch.expiryDate);\n      grouped[urgency.level].push(batch);\n    });\n\n    return grouped;\n  });\n\n  const fetchBatches = async (filters?: {\n    practiceId?: string;\n    productId?: string;\n    locationId?: string;\n    includeExpired?: boolean;\n  }) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      let query = supabase.from('product_batches').select(\n        `\n          *,\n          product:products!inner(id, name, sku),\n          location:practice_locations!inner(id, name),\n          supplier:suppliers(id, name)\n        `\n      );\n\n      if (filters?.practiceId) {\n        query = query.eq('practice_id', filters.practiceId);\n      } else {\n        query = query.is('practice_id', null);\n      }\n\n      if (filters?.productId) {\n        query = query.eq('product_id', filters.productId);\n      }\n\n      if (filters?.locationId) {\n        query = query.eq('location_id', filters.locationId);\n      }\n\n      if (!filters?.includeExpired) {\n        query = query.gte('expiry_date', new Date().toISOString());\n      }\n\n      query = query.eq('status', 'active').order('expiry_date', { ascending: true });\n\n      const { data, error: fetchError } = await query;\n      if (fetchError) throw fetchError;\n\n      batches.value = toArray(data).map(batchRow =>\n        mapProductBatchRow(batchRow as ProductBatchFetchRow, {\n          product: (batchRow as ProductBatchFetchRow).product,\n          location: (batchRow as ProductBatchFetchRow).location,\n          supplier: (batchRow as ProductBatchFetchRow).supplier,\n        })\n      );\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'fetchBatches',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const fetchExpiringBatches = async (practiceId: string, daysAhead = 30) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { data, error: fetchError } = await supabase.rpc('get_expiring_batches', {\n        p_practice_id: practiceId,\n        p_days_ahead: daysAhead,\n      });\n\n      if (fetchError) {\n        const today = new Date();\n        const until = new Date();\n        until.setDate(today.getDate() + daysAhead);\n        const { data: fallbackData, error: fbError } = await supabase\n          .from('product_batches')\n          .select(\n            `\n            *,\n            product:products!inner(id, name, sku),\n            location:practice_locations!inner(id, name),\n            supplier:suppliers(id, name)\n          `\n          )\n          .eq('practice_id', practiceId)\n          .lte('expiry_date', until.toISOString())\n          .gte('expiry_date', today.toISOString())\n          .order('expiry_date', { ascending: true });\n\n        if (fbError) throw fbError;\n\n        expiringBatches.value = toArray(fallbackData).map(row => {\n          const mapped = mapProductBatchRow(row as ProductBatchFetchRow, {\n            product: (row as ProductBatchFetchRow).product,\n            location: (row as ProductBatchFetchRow).location,\n            supplier: (row as ProductBatchFetchRow).supplier,\n          });\n          const diffDays = Math.ceil(\n            (new Date(mapped.expiryDate).getTime() - Date.now()) /\n              (1000 * 60 * 60 * 24)\n          );\n          let urgency: ExpiringBatch['urgency_level'] = 'normal';\n          if (diffDays < 0) urgency = 'expired';\n          else if (diffDays <= 7) urgency = 'critical';\n          else if (diffDays <= 14) urgency = 'warning';\n\n          return {\n            batch_id: mapped.id,\n            product_id: mapped.productId,\n            product_name: mapped.productName ?? '',\n            product_sku: mapped.productSku ?? '',\n            location_id: mapped.locationId,\n            location_name: mapped.locationName ?? '',\n            batch_number: mapped.batchNumber,\n            expiry_date: mapped.expiryDate,\n            current_quantity: mapped.currentQuantity,\n            days_until_expiry: diffDays,\n            urgency_level: urgency,\n          } satisfies ExpiringBatch;\n        });\n        return expiringBatches.value;\n      }\n\n      expiringBatches.value = (data ?? []).map(item => ({\n        batch_id: item.batch_id,\n        product_id: item.product_id,\n        product_name: item.product_name,\n        product_sku: item.product_sku,\n        location_id: item.location_id,\n        location_name: item.location_name,\n        batch_number: item.batch_number,\n        expiry_date: item.expiry_date,\n        current_quantity: item.current_quantity,\n        days_until_expiry: item.days_until_expiry,\n        urgency_level: item.urgency_level,\n      }));\n      return expiringBatches.value;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'fetchExpiringBatches',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const fetchFifoBatches = async (productId: string, locationId: string, quantity: number) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { data, error: fetchError } = await supabase.rpc('get_fifo_batches', {\n        p_product_id: productId,\n        p_location_id: locationId,\n        p_quantity_needed: quantity,\n      });\n\n      if (fetchError) {\n        const { data: rows, error: fbError } = await supabase\n          .from('product_batches')\n          .select('*, product:products(id, name, sku), location:practice_locations(id, name), supplier:suppliers(id, name)')\n          .eq('product_id', productId)\n          .eq('location_id', locationId)\n          .eq('status', 'active')\n          .gt('current_quantity', 0)\n          .order('expiry_date', { ascending: true });\n\n        if (fbError) throw fbError;\n\n        fifoBatches.value = toArray(rows).map(row =>\n          mapProductBatchRow(row as ProductBatchFetchRow, {\n            product: (row as ProductBatchFetchRow).product,\n            location: (row as ProductBatchFetchRow).location,\n            supplier: (row as ProductBatchFetchRow).supplier,\n          })\n        );\n        return fifoBatches.value;\n      }\n\n      fifoBatches.value = (data || []).map(entry => ({\n        id: entry.batch_id,\n        practiceId: entry.practice_id,\n        productId: entry.product_id,\n        locationId: entry.location_id,\n        supplierId: entry.supplier_id ?? null,\n        batchNumber: entry.batch_number,\n        expiryDate: entry.expiry_date,\n        receivedDate: entry.received_date ?? entry.expiry_date,\n        currentQuantity: entry.available_quantity ?? entry.current_quantity,\n        reservedQuantity: entry.reserved_quantity ?? 0,\n        availableQuantity: entry.available_quantity ?? entry.current_quantity,\n        unitCost: entry.unit_cost ?? null,\n        totalCost: entry.total_cost ?? null,\n        currency: entry.currency ?? null,\n        status: entry.status ?? null,\n      }));\n      return fifoBatches.value;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'fetchFifoBatches',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createBatch = async (request: Tables<'product_batches'>) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const payload = toProductBatchInsert(mapProductBatchRow(request));\n      const { data, error: insertError } = await supabase\n        .from('product_batches')\n        .insert(payload)\n        .select('*')\n        .single();\n\n      if (insertError) throw insertError;\n\n      return data;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'createBatch',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const updateBatch = async (id: string, updates: UpdateBatchRequest) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const practiceId = updates.practice_id ?? undefined;\n      const mappedUpdate = toProductBatchUpdate(mapProductBatchRow({\n        ...updates,\n        id,\n        practice_id: updates.practice_id ?? '',\n        product_id: updates.product_id ?? '',\n        location_id: updates.location_id ?? '',\n        supplier_id: updates.supplier_id ?? null,\n        batch_number: updates.batch_number ?? '',\n        supplier_batch_number: updates.supplier_batch_number ?? null,\n        expiry_date: updates.expiry_date ?? '',\n        received_date: updates.received_date ?? '',\n        initial_quantity: updates.current_quantity ?? 0,\n        current_quantity: updates.current_quantity ?? 0,\n        reserved_quantity: updates.reserved_quantity ?? null,\n        available_quantity: updates.available_quantity ?? null,\n        unit_cost: updates.unit_cost ?? null,\n        total_cost: updates.total_cost ?? null,\n        currency: updates.currency ?? null,\n        status: updates.status ?? null,\n        purchase_order_number: updates.purchase_order_number ?? null,\n        invoice_number: updates.invoice_number ?? null,\n        quality_check_passed: updates.quality_check_passed ?? null,\n        quality_notes: updates.quality_notes ?? null,\n        quarantine_until: updates.quarantine_until ?? null,\n        created_at: null,\n        updated_at: null,\n        supplier_id: updates.supplier_id ?? null,\n        supplier_batch_number: updates.supplier_batch_number ?? null,\n      } as ProductBatch));\n\n      const { data, error: updateError } = await supabase\n        .from('product_batches')\n        .update(mappedUpdate)\n        .eq('id', id)\n        .eq(practiceId ? 'practice_id' : 'id', practiceId ? practiceId : id)\n        .select('*')\n        .single();\n\n      if (updateError) throw updateError;\n\n      const index = batches.value.findIndex(batch => batch.id === id);\n      if (index !== -1) {\n        batches.value[index] = mapProductBatchRow(data as ProductBatchFetchRow, {\n          product: (data as ProductBatchFetchRow).product,\n          location: (data as ProductBatchFetchRow).location,\n          supplier: (data as ProductBatchFetchRow).supplier,\n        });\n      }\n\n      return data;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'updateBatch',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const deleteBatch = async (batchId: string) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { error: deleteError } = await supabase\n        .from('product_batches')\n        .delete()\n        .eq('id', batchId);\n\n      if (deleteError) throw deleteError;\n\n      batches.value = batches.value.filter(batch => batch.id !== batchId);\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'deleteBatch',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const useBatch = async (movements: BatchMovement[]) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { data, error: rpcError } = await supabase.rpc(\n        'process_batch_stock_movement',\n        {\n          p_movements: JSON.stringify(movements),\n        }\n      );\n\n      if (rpcError) throw rpcError;\n\n      return data;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'useBatch',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const getBatch = async (id: string) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { data, error: fetchError } = await supabase\n        .from('product_batches')\n        .select(\n          `\n          *,\n          product:products!inner(id, name, sku, category, brand, unit),\n          location:practice_locations!inner(id, name, code, location_type),\n          supplier:suppliers(id, name, code)\n        `\n        )\n        .eq('id', id)\n        .single();\n\n      if (fetchError) throw fetchError;\n\n      return data;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'getBatch',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  // New enhanced actions\n  const searchBatches = async (searchTerm: string, practiceId: string) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      let query = supabase\n        .from('product_batches')\n        .select(\n          `\n          *,\n          product:products!inner(id, name, sku, category, brand, unit),\n          location:practice_locations!inner(id, name, code, location_type),\n          supplier:suppliers(id, name, code)\n        `\n        )\n        .eq('practice_id', practiceId);\n\n      // Search in batch number, product name, or SKU\n      query = query.or(\n        `batch_number.ilike.%${searchTerm}%,supplier_batch_number.ilike.%${searchTerm}%,product.name.ilike.%${searchTerm}%,product.sku.ilike.%${searchTerm}%`\n      );\n\n      const { data, error: searchError } = await query\n        .eq('status', 'active')\n        .order('expiry_date', { ascending: true })\n        .limit(50);\n\n      if (searchError) throw searchError;\n\n      return data || [];\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'searchBatches',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const findSimilarBatches = (\n    batchNumber: string,\n    productId: string\n  ): ProductBatchWithDetails[] => {\n    return batches.value.filter(\n      batch =>\n        batch.product_id === productId &&\n        areBatchNumbersSimilar(batch.batch_number, batchNumber)\n    );\n  };\n\n  const validateNewBatch = (batchData: Tables<'product_batches'>) => {\n    const validationResult = validateBatchData({\n      batchNumber: batchData.batch_number,\n      expiryDate: batchData.expiry_date,\n      quantity: batchData.initial_quantity,\n    });\n\n    // Check for duplicate batch numbers\n    const existingBatch = batches.value.find(\n      batch =>\n        batch.product_id === batchData.product_id &&\n        batch.batch_number.toLowerCase() ===\n          batchData.batch_number.toLowerCase()\n    );\n\n    if (existingBatch) {\n      validationResult.errors.push('Batchnummer bestaat al voor dit product');\n      validationResult.isValid = false;\n    }\n\n    // Check for similar batch numbers\n    const similarBatches = findSimilarBatches(\n      batchData.batch_number,\n      batchData.product_id\n    );\n    if (similarBatches.length > 0) {\n      validationResult.warnings.push(\n        `Vergelijkbare batchnummers gevonden: ${similarBatches\n          .map(b => b.batch_number)\n          .join(', ')}`\n      );\n    }\n\n    return validationResult;\n  };\n\n  const getFifoBatchSuggestion = (\n    productId: string,\n    locationId: string,\n    quantityNeeded: number\n  ) => {\n    const productBatches = batches.value.filter(\n      batch =>\n        batch.product_id === productId &&\n        batch.location_id === locationId &&\n        batch.status === 'active' &&\n        batch.current_quantity > 0\n    );\n\n    const sortedBatches = sortBatchesFIFO(productBatches);\n    const suggestion = [];\n    let remainingQuantity = quantityNeeded;\n\n    for (const batch of sortedBatches) {\n      if (remainingQuantity <= 0) break;\n\n      const quantityFromBatch = Math.min(\n        batch.current_quantity,\n        remainingQuantity\n      );\n      suggestion.push({\n        batch,\n        quantity: quantityFromBatch,\n        urgencyInfo: calculateBatchUrgency(batch.expiry_date),\n      });\n\n      remainingQuantity -= quantityFromBatch;\n    }\n\n    return {\n      suggestion,\n      canFulfill: remainingQuantity <= 0,\n      shortfall: Math.max(0, remainingQuantity),\n    };\n  };\n\n  const getBatchHistory = async (batchId: string) => {\n    try {\n      loading.value = true;\n      error.value = null;\n\n      const { data, error } = await supabase\n        .from('stock_movements')\n        .select(\n          `\n          id,\n          movement_type,\n          quantity_change,\n          reason,\n          created_at,\n          location:practice_locations(id, name),\n          product:products(id, name, sku)\n        `\n        )\n        .eq('batch_id', batchId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      return data || [];\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'BatchStore',\n        operation: 'getBatchHistory',\n      });\n      error.value = handledError.message;\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  return {\n    batches,\n    expiringBatches,\n    fifoBatches,\n    loading,\n    error,\n    batchesByProduct,\n    batchesByLocation,\n    expiredBatches,\n    expiringBatchesCount,\n    lowStockBatches,\n    totalValue,\n    batchesSortedByFIFO,\n    criticalBatches,\n    warningBatches,\n    batchesWithUrgency,\n    batchesByUrgencyLevel,\n    fetchBatches,\n    fetchExpiringBatches,\n    fetchFifoBatches,\n    createBatch,\n    updateBatch,\n    deleteBatch,\n    useBatch,\n    getBatch,\n    searchBatches,\n    findSimilarBatches,\n    validateNewBatch,\n    getFifoBatchSuggestion,\n    getBatchHistory,\n  };\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\clinic.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\counting.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'notes' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 389,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 389,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { useAuthStore } from './auth';\nimport { countingLogger } from '@/utils/logger';\nimport { handleSupabaseError } from '@/utils/service-error-handler';\nimport { t as i18nT } from '@/utils/i18n-service';\nimport type { Tables, TablesInsert } from '@/types';\nimport type {\n  CountingSession,\n  CountingEntryDTO,\n  CountingProduct,\n  CountingStats,\n  StartCountingSessionRequest,\n} from '@/types/inventory';\n\nexport const useCountingStore = defineStore('counting', () => {\n  // State\n  const currentSession = ref<CountingSession | null>(null);\n  const countingEntries = ref<CountingEntryDTO[]>([]);\n  const availableProducts = ref<CountingProduct[]>([]);\n  const sessions = ref<CountingSession[]>([]);\n  const loading = ref(false);\n  const isCountingMode = ref(false);\n  const lastPostedMovementIds = ref<Record<string, string[]>>({});\n\n  // Auth store\n  const authStore = useAuthStore();\n\n  // Getters\n  const countingStats = computed((): CountingStats => {\n    if (!currentSession.value) {\n      return {\n        totalProducts: 0,\n        countedProducts: 0,\n        remainingProducts: 0,\n        discrepancies: 0,\n        progressPercentage: 0,\n      };\n    }\n\n    const totalProducts =\n      currentSession.value.total_products_counted ?? countingEntries.value.length;\n    const countedProducts = countingEntries.value.length;\n    const discrepancies = countingEntries.value.filter(\n      entry => Math.abs(entry.variance ?? 0) !== 0\n    ).length;\n\n    return {\n      totalProducts,\n      countedProducts,\n      remainingProducts: totalProducts - countedProducts,\n      discrepancies,\n      progressPercentage:\n        totalProducts > 0\n          ? Number(((countedProducts / totalProducts) * 100).toFixed(2))\n          : 0,\n    };\n  });\n\n  const entriesWithVariance = computed(() =>\n    countingEntries.value.filter(entry => Math.abs(entry.variance) > 0)\n  );\n\n  const entriesPendingVerification = computed(() =>\n    countingEntries.value.filter(\n      entry => entry.status === 'pending' || entry.status === 'discrepancy'\n    )\n  );\n\n  const nextProductToCount = computed(() => {\n    if (!availableProducts.value.length) {\n      return null;\n    }\n\n    const countedProductIds = countingEntries.value.map(\n      entry => entry.product_id\n    );\n    return (\n      availableProducts.value.find(\n        product => !countedProductIds.includes(product.id)\n      ) || null\n    );\n  });\n\n  // Actions\n  const startCountingSession = async (request: StartCountingSessionRequest) => {\n    try {\n      loading.value = true;\n\n      const primaryLocation = request.location_ids[0];\n      if (!primaryLocation) {\n        throw new Error('At least one location must be provided for counting session');\n      }\n\n      const { data: session, error: sessionError } = await supabase\n        .from('counting_sessions')\n        .insert([\n          {\n            practice_id: request.practice_id,\n            name: request.name,\n            location_id: primaryLocation,\n            started_by: authStore.user?.id ?? null,\n            status: 'in_progress',\n            count_all_products: request.session_type === 'full',\n            specific_product_ids: request.product_ids ?? null,\n            product_category_filter: request.category_filter ?? null,\n            created_at: new Date().toISOString(),\n          } satisfies TablesInsert<'counting_sessions'>,\n        ])\n        .select('*')\n        .single();\n\n      if (sessionError)\n        return handleSupabaseError(sessionError, {\n          service: 'countingStore',\n          operation: 'startCountingSession',\n          practiceId: request.practice_id,\n          metadata: {},\n        });\n\n      currentSession.value = session as CountingSession;\n      isCountingMode.value = true;\n\n      await fetchProductsForSession(session.id);\n\n      return session;\n    } catch (error) {\n      countingLogger.error('Error starting counting session', error as Error);\n      throw error;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const fetchProductsForSession = async (sessionId: string) => {\n    try {\n      const session =\n        currentSession.value || sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // Build query to get products for counting\n      let query = supabase\n        .from('stock_levels')\n        .select(\n          `\n          product_id,\n          location_id,\n          current_quantity,\n          last_counted_at,\n          location:practice_locations(name),\n          product:products(id, name, sku, category, brand, unit, image_url)\n        `\n        )\n        .eq('practice_id', session.practice_id)\n        .in('location_id', session.location_ids ?? []);\n\n      if (session.product_ids && session.product_ids.length > 0) {\n        query = query.in('product_id', session.product_ids);\n      }\n\n      const { data, error } = await query;\n\n      if (error) throw error;\n\n      type StockLevelRow = {\n        product_id: string;\n        location_id: string;\n        current_quantity: number;\n        last_counted_at?: string | null;\n        location: { name: string | null };\n        product: {\n          id: string;\n          name: string;\n          sku: string;\n          category?: string | null;\n          brand?: string | null;\n          unit?: string | null;\n          image_url?: string | null;\n        };\n      };\n\n      const rows = (data ?? []) as StockLevelRow[];\n      availableProducts.value = rows.map(item => ({\n        id: item.product.id,\n        name: item.product.name,\n        sku: item.product.sku,\n        currentSystemQuantity: item.current_quantity ?? 0,\n        locationName: item.location.name ?? '-',\n        category: item.product.category ?? undefined,\n        brand: item.product.brand ?? undefined,\n        unit: item.product.unit ?? undefined,\n        imageUrl: item.product.image_url ?? undefined,\n        lastCountedAt: item.last_counted_at ?? undefined,\n      } satisfies CountingProduct));\n\n      // Update session with product count\n      if (currentSession.value) {\n        await updateSession(session.id, {\n          total_products_counted: availableProducts.value.length,\n        });\n      }\n    } catch (error) {\n      countingLogger.error(\n        'Error fetching products for session',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const countProduct = async (\n    productId: string,\n    locationId: string,\n    countedQuantity: number,\n    options: {\n      countMethod?: 'manual' | 'barcode' | 'rfid';\n      confidenceLevel?: 'low' | 'medium' | 'high';\n      batchNumber?: string;\n      expiryDate?: string;\n      notes?: string;\n      photos?: string[];\n    } = {}\n  ) => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      // Get current system quantity\n      const { data: stockLevel, error: stockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', currentSession.value.practice_id)\n        .eq('location_id', locationId)\n        .eq('product_id', productId)\n        .single();\n\n      if (stockError)\n        return handleSupabaseError(stockError, {\n          service: 'countingStore',\n          operation: 'countProduct.fetchStockLevel',\n          practiceId: currentSession.value.practice_id,\n          metadata: { productId, locationId },\n        });\n\n      const systemQuantity =\n        (stockLevel as unknown as { current_quantity?: number } | null)\n          ?.current_quantity || 0;\n      const variance = countedQuantity - systemQuantity;\n\n      // Create counting entry\n      const payload: TablesInsert<'counting_entries'> = {\n          counting_session_id: currentSession.value.id,\n          practice_id: currentSession.value.practice_id,\n          location_id: locationId,\n          product_id: productId,\n          system_quantity: systemQuantity,\n          counted_quantity: countedQuantity,\n        counted_by: authStore.user?.id ?? null,\n        confidence_level: options.confidenceLevel ?? null,\n        batch_number: options.batchNumber ?? null,\n        expiry_date: options.expiryDate ?? null,\n        notes: options.notes ?? null,\n        };\n\n  const { data: entry, error: entryError } = await supabase\n        .from('counting_entries')\n        .insert([payload])\n        .select()\n        .single();\n\n      if (entryError)\n        return handleSupabaseError(entryError, {\n          service: 'countingStore',\n          operation: 'countProduct.insertEntry',\n          practiceId: currentSession.value.practice_id,\n          metadata: { sessionId: currentSession.value.id },\n        });\n\n      // Map DB row to app model\n      const newEntry = mapDbEntryToCountingEntry(entry);\n      countingEntries.value = [...countingEntries.value, newEntry];\n\n      // Update session progress based on actual counts\n      const newProductsCountedCount =\n        (currentSession.value.total_products_counted ?? 0) + 1;\n      const newDiscrepanciesCount =\n        Math.abs(variance) > 0\n          ? (currentSession.value.products_with_variance ?? 0) + 1\n          : currentSession.value.products_with_variance ?? 0;\n\n      await updateSession(currentSession.value.id, {\n        total_products_counted: newProductsCountedCount,\n        products_with_variance: newDiscrepanciesCount,\n      });\n\n      return newEntry;\n    } catch (error) {\n      countingLogger.error('Error counting product:', error as Error);\n      throw error;\n    }\n  };\n\n  const updateCountingEntry = async (\n    entryId: string,\n    updates: Partial<Tables<'counting_entries'>>\n  ) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_entries')\n        .update(updates)\n        .eq('id', entryId)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      const index = countingEntries.value.findIndex(\n        entry => entry.id === entryId\n      );\n      if (index >= 0) {\n        countingEntries.value[index] = mapDbEntryToCountingEntry(data);\n      }\n\n      return mapDbEntryToCountingEntry(data);\n    } catch (error) {\n      countingLogger.error('Error updating counting entry:', error as Error);\n      throw error;\n    }\n  };\n\n  const completeCountingSession = async () => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      await updateSession(currentSession.value.id, {\n        status: 'completed',\n        completed_at: new Date().toISOString(),\n        completed_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      isCountingMode.value = false;\n      return true;\n    } catch (error) {\n      countingLogger.error(\n        'Error completing counting session:',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const approveCountingSession = async (sessionId: string) => {\n    try {\n      await updateSession(sessionId, {\n        status: 'approved',\n        approved_at: new Date().toISOString(),\n        approved_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      // If auto_adjust_stock is enabled, apply all count adjustments\n      const session = sessions.value.find(s => s.id === sessionId);\n      if (session && (session as CountingSession & { auto_adjust_stock?: boolean }).auto_adjust_stock) {\n        await applyCountAdjustments(sessionId);\n      }\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error approving counting session:', error as Error);\n      throw error;\n    }\n  };\n\ntype CountingEntryRow = Tables<'counting_entries'>;\ntype CountingEntryWithRelations = CountingEntryRow & {\n  location?: { name?: string | null };\n  product?: { name?: string | null; sku?: string | null };\n};\n\nfunction mapDbEntryToCountingEntry(\n  row: CountingEntryWithRelations\n): CountingEntryDTO {\n  const systemQuantity = row.system_quantity ?? 0;\n  const countedQuantity = row.counted_quantity ?? 0;\n  const varianceQuantity = row.variance_quantity ?? 0;\n  const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n\n  return {\n    id: row.id,\n    session_id: row.counting_session_id,\n    practice_id: row.practice_id,\n    location_id: row.location_id,\n    product_id: row.product_id,\n    system_quantity: systemQuantity,\n    counted_quantity: countedQuantity,\n    variance: varianceQuantity,\n    confidence_level:\n      (row.confidence_level as 'low' | 'medium' | 'high') ?? null,\n    counted_by: row.counted_by ?? null,\n    counted_at: row.counted_at ?? null,\n    verified_by: row.verified_by ?? null,\n    verified_at: row.verified_at ?? null,\n    notes: row.notes ?? null,\n    batch_number: row.batch_number ?? null,\n    expiry_date: row.expiry_date ?? null,\n    created_at: row.created_at ?? null,\n    updated_at: row.updated_at ?? null,\n    status: Math.abs(varianceQuantity) > 0 ? 'discrepancy' : 'verified',\n    location_name: row.location?.name ?? null,\n    product_name: row.product?.name ?? null,\n    product_sku: row.product?.sku ?? null,\n  } satisfies CountingEntryDTO;\n};\n\n  const applyCountAdjustments = async (sessionId: string) => {\n    try {\n      const session = sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // Get all entries with variances\n      const { data: entries, error } = await supabase\n        .from('counting_entries')\n        .select('*')\n        .eq('counting_session_id', sessionId)\n        .neq('variance_quantity', 0);\n\n      if (error) throw error;\n\n      // Apply each adjustment using the stock update function\n      for (const entry of entries || []) {\n        const varianceQuantity = entry.variance_quantity ?? 0;\n        const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n        try {\n        await supabase.rpc('update_stock_level', {\n          p_practice_id: entry.practice_id,\n          p_location_id: entry.location_id,\n          p_product_id: entry.product_id,\n            p_quantity_change: entry.variance_quantity ?? 0,\n          p_movement_type: 'count',\n            p_performed_by: authStore.user?.id ?? '',\n          p_reference_type: 'counting_session',\n          p_reference_id: sessionId,\n          p_reason_code: 'inventory_count',\n            p_notes: notes,\n          });\n        } catch (rpcError) {\n          // Fallback: manual movement + stock level update\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.loadLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const levelRow = level as { current_quantity?: number } | null;\n          const beforeQty = levelRow?.current_quantity ?? 0;\n          const afterQty = beforeQty + (entry.variance_quantity as number);\n\n          const { error: mvErr } = await supabase\n            .from('stock_movements')\n            .insert([\n              {\n                practice_id: entry.practice_id,\n                location_id: entry.location_id,\n                product_id: entry.product_id,\n                movement_type: 'count',\n                quantity_change: entry.variance_quantity as number,\n                quantity_before: beforeQty,\n                quantity_after: afterQty,\n                reference_type: 'counting_session',\n                reference_id: sessionId,\n                reason_code: 'count_correction',\n                notes,\n                performed_by: authStore.user?.id ?? entry.practice_id,\n              },\n            ]);\n          if (mvErr)\n            handleSupabaseError(mvErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.insertMovement',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.updateLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error applying count adjustments:', error as Error);\n      throw error;\n    }\n  };\n\n  const updateSession = async (\n    sessionId: string,\n    updates: Partial<CountingSession>\n  ) => {\n    try {\n      const practiceId =\n        currentSession.value?.practice_id ||\n        authStore.userProfile?.clinic_id ||\n        '';\n      // Enforce practice_id guard on update\n      const { safeUpdateByIdAndPractice } = await import(\n        '@/services/safeUpdate'\n      );\n      const data = await safeUpdateByIdAndPractice<CountingSession & Record<string, unknown>>(\n        'counting_sessions',\n        sessionId,\n        practiceId,\n        {\n          ...updates,\n        }\n      );\n\n      if (!data) throw new Error('Failed to update counting session');\n\n      if (currentSession.value?.id === sessionId) {\n        currentSession.value = data as unknown as CountingSession;\n      }\n\n      const index = sessions.value.findIndex(s => s.id === sessionId);\n      if (index >= 0) {\n        sessions.value[index] = data as unknown as CountingSession;\n      }\n\n      return data as unknown as CountingSession;\n    } catch (error) {\n      countingLogger.error('Error updating session:', error as Error);\n      throw error;\n    }\n  };\n\n  const fetchSessions = async (practiceId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_sessions')\n        .select('*')\n        .eq('practice_id', practiceId)\n        .order('created_at', { ascending: false });\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchSessions',\n          practiceId: practiceId,\n          metadata: {},\n        });\n\n      sessions.value = (data as unknown as CountingSession[]) || [];\n    } catch (error) {\n      countingLogger.error('Error fetching counting sessions:', error as Error);\n      throw error;\n    }\n  };\n\n  const fetchSessionById = async (\n    practiceId: string,\n    sessionId: string\n  ): Promise<CountingSession | null> => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_sessions')\n        .select('*')\n        .eq('id', sessionId)\n        .eq('practice_id', practiceId)\n        .single();\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchSessionById',\n          practiceId: practiceId,\n          metadata: { sessionId },\n        });\n\n      currentSession.value = (data as unknown as CountingSession) || null;\n      return currentSession.value;\n    } catch (error) {\n      countingLogger.error(\n        'Error fetching counting session by id:',\n        error as Error\n      );\n      throw error;\n    }\n  };\n\n  const fetchCountingEntries = async (sessionId: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('counting_entries')\n        .select(\n          `\n          *,\n          location:practice_locations(name),\n          product:products(name, sku)\n        `\n        )\n        .eq('counting_session_id', sessionId)\n        .order('created_at', { ascending: false });\n\n      if (error)\n        handleSupabaseError(error, {\n          service: 'countingStore',\n          operation: 'fetchCountingEntries',\n          ...(currentSession.value?.practice_id\n            ? { practiceId: currentSession.value.practice_id }\n            : {}),\n          metadata: { sessionId },\n        });\n\n      type CountingEntryWithRelations = CountingEntryRow & {\n        location?: { name?: string | null };\n        product?: { name?: string | null; sku?: string | null };\n      };\n      const rows = (data ?? []) as CountingEntryWithRelations[];\n      countingEntries.value = rows.map(row => {\n        const entry = mapDbEntryToCountingEntry(row);\n        if (row.location?.name) {\n          entry.location_name = row.location.name;\n        }\n        if (row.product?.name) {\n          entry.product_name = row.product.name;\n        }\n        if (row.product?.sku) {\n          entry.product_sku = row.product.sku;\n        }\n        return entry;\n      });\n    } catch (error) {\n      countingLogger.error('Error fetching counting entries:', error as Error);\n      throw error;\n    }\n  };\n\n  const postCountingSession = async (\n    sessionId: string\n  ): Promise<{ movementIds: string[] }> => {\n    try {\n      // Ensure session loaded\n      const session =\n        currentSession.value || sessions.value.find(s => s.id === sessionId);\n      if (!session) throw new Error(i18nT('counting.sessionnotfound'));\n\n      // If approval is required, move to review (completed) without posting\n      if (session.status !== 'approved' && (session as CountingSession & { require_approval?: boolean }).require_approval) {\n        await updateSession(sessionId, {\n          status: 'completed',\n          completed_at: new Date().toISOString(),\n          completed_by: authStore.user?.id ?? null,\n        } satisfies Partial<Tables<'counting_sessions'>>);\n        return { movementIds: [] };\n      }\n\n      // Baseline existing movement IDs for this session\n      const { data: beforeMovements, error: beforeErr } = await supabase\n        .from('stock_movements')\n        .select('id')\n        .eq('reference_type', 'counting_session')\n        .eq('reference_id', sessionId);\n      if (beforeErr)\n        handleSupabaseError(beforeErr, {\n          service: 'countingStore',\n          operation: 'post.beforeMovements',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      // Load entries with variance\n      const { data: entries, error: entriesErr } = await supabase\n        .from('counting_entries')\n        .select('*')\n        .eq('counting_session_id', sessionId)\n        .neq('variance_quantity', 0);\n      if (entriesErr)\n        handleSupabaseError(entriesErr, {\n          service: 'countingStore',\n          operation: 'post.fetchEntries',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      for (const entry of entries || []) {\n        const varianceQuantity = entry.variance_quantity ?? 0;\n        const notes = `Stock count adjustment: ${varianceQuantity > 0 ? '+' : ''}${varianceQuantity}`;\n        try {\n          await supabase.rpc('update_stock_level', {\n            p_practice_id: entry.practice_id,\n            p_location_id: entry.location_id,\n            p_product_id: entry.product_id,\n            p_quantity_change: entry.variance_quantity ?? 0,\n            p_movement_type: 'count',\n            p_performed_by: authStore.user?.id ?? entry.practice_id,\n            p_reference_type: 'counting_session',\n            p_reference_id: sessionId,\n            p_reason_code: 'count_correction',\n            p_notes: notes,\n          });\n        } catch (rpcError) {\n          // Fallback: manual movement + stock level update\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.loadLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const levelRow = level as { current_quantity?: number } | null;\n          const beforeQty = levelRow?.current_quantity ?? 0;\n          const afterQty = beforeQty + (entry.variance_quantity as number);\n\n          const { error: mvErr } = await supabase\n            .from('stock_movements')\n            .insert([\n              {\n                practice_id: entry.practice_id,\n                location_id: entry.location_id,\n                product_id: entry.product_id,\n                movement_type: 'count',\n                quantity_change: entry.variance_quantity as number,\n                quantity_before: beforeQty,\n                quantity_after: afterQty,\n                reference_type: 'counting_session',\n                reference_id: sessionId,\n                reason_code: 'count_correction',\n                notes,\n                performed_by: authStore.user?.id ?? entry.practice_id,\n              },\n            ]);\n          if (mvErr)\n            handleSupabaseError(mvErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.insertMovement',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', entry.practice_id)\n            .eq('location_id', entry.location_id)\n            .eq('product_id', entry.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'post.fallback.updateLevel',\n              practiceId: entry.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      // Get new movement IDs\n      const { data: afterMovements, error: afterErr } = await supabase\n        .from('stock_movements')\n        .select('id')\n        .eq('reference_type', 'counting_session')\n        .eq('reference_id', sessionId);\n      if (afterErr)\n        handleSupabaseError(afterErr, {\n          service: 'countingStore',\n          operation: 'post.afterMovements',\n          practiceId: session.practice_id,\n          metadata: { sessionId },\n        });\n\n      const beforeIds = new Set((beforeMovements ?? []).map(m => m.id));\n      const newIds = (afterMovements ?? [])\n        .map(m => m.id)\n        .filter(id => !beforeIds.has(id));\n\n      lastPostedMovementIds.value[sessionId] = newIds as string[];\n\n      // Mark session as approved/posted\n      await updateSession(sessionId, {\n        status: 'approved',\n        approved_at: new Date().toISOString(),\n        approved_by: authStore.user?.id ?? null,\n      } satisfies Partial<Tables<'counting_sessions'>>);\n\n      return { movementIds: newIds };\n    } catch (error) {\n      countingLogger.error('Error posting counting session:', error as Error);\n      throw error;\n    }\n  };\n\n  const undoLastPosting = async (sessionId: string): Promise<boolean> => {\n    try {\n      const ids = lastPostedMovementIds.value[sessionId] || [];\n      if (!ids.length) return false;\n\n      // Load movements details\n      const { data: movements, error: movementsErr } = await supabase\n        .from('stock_movements')\n        .select('*')\n        .in('id', ids);\n      if (movementsErr)\n        handleSupabaseError(movementsErr, {\n          service: 'countingStore',\n          operation: 'undo.loadMovements',\n          practiceId: currentSession.value?.practice_id ?? '',\n          metadata: { sessionId },\n        });\n\n      // Reverse stock by applying negative of quantity_change\n      const movementRows = movements ?? [];\n      for (const mv of movementRows) {\n        try {\n          await supabase.rpc('update_stock_level', {\n            p_practice_id: mv.practice_id,\n            p_location_id: mv.location_id,\n            p_product_id: mv.product_id,\n            p_quantity_change: -mv.quantity_change,\n            p_movement_type: 'correction',\n            p_performed_by: authStore.user?.id ?? mv.practice_id,\n            p_reference_type: 'counting_session',\n            p_reference_id: sessionId,\n            p_reason_code: 'count_correction',\n            p_notes: 'Undo counting post',\n          });\n        } catch (rpcError) {\n          // Fallback: directly adjust stock_levels\n          const { data: level, error: levelErr } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', mv.practice_id)\n            .eq('location_id', mv.location_id)\n            .eq('product_id', mv.product_id)\n            .single();\n          if (levelErr)\n            handleSupabaseError(levelErr, {\n              service: 'countingStore',\n              operation: 'undo.fallback.loadLevel',\n              practiceId: mv.practice_id,\n              metadata: { sessionId },\n            });\n          const beforeQty =\n            (level as unknown as { current_quantity?: number } | null)\n              ?.current_quantity || 0;\n          const afterQty = beforeQty - (mv.quantity_change as number);\n          const { error: updErr } = await supabase\n            .from('stock_levels')\n            .update({ current_quantity: afterQty })\n            .eq('practice_id', mv.practice_id)\n            .eq('location_id', mv.location_id)\n            .eq('product_id', mv.product_id);\n          if (updErr)\n            handleSupabaseError(updErr, {\n              service: 'countingStore',\n              operation: 'undo.fallback.updateLevel',\n              practiceId: mv.practice_id,\n              metadata: { sessionId },\n            });\n        }\n      }\n\n      // Delete original movements\n      const { error: delErr } = await supabase\n        .from('stock_movements')\n        .delete()\n        .in('id', ids);\n      if (delErr)\n        handleSupabaseError(delErr, {\n          service: 'countingStore',\n          operation: 'undo.deleteMovements',\n          practiceId: currentSession.value?.practice_id ?? '',\n          metadata: { sessionId },\n        });\n\n      // Re-open the session\n      await updateSession(sessionId, {\n        status: 'in_progress',\n      });\n\n      delete lastPostedMovementIds.value[sessionId];\n      return true;\n    } catch (error) {\n      countingLogger.error('Error undoing posting:', error as Error);\n      throw error;\n    }\n  };\n\n  const cancelCountingSession = async () => {\n    try {\n      if (!currentSession.value) {\n        throw new Error(i18nT('counting.noactivecountingsession'));\n      }\n\n      await updateSession(currentSession.value.id, {\n        status: 'cancelled',\n      });\n\n      currentSession.value = null;\n      isCountingMode.value = false;\n      countingEntries.value = [];\n      availableProducts.value = [];\n\n      return true;\n    } catch (error) {\n      countingLogger.error('Error canceling counting session:', error as Error);\n      throw error;\n    }\n  };\n\n  return {\n    // State\n    currentSession,\n    countingEntries,\n    availableProducts,\n    sessions,\n    loading,\n    isCountingMode,\n    lastPostedMovementIds,\n\n    // Getters\n    countingStats,\n    entriesWithVariance,\n    entriesPendingVerification,\n    nextProductToCount,\n\n    // Actions\n    startCountingSession,\n    fetchProductsForSession,\n    countProduct,\n    updateCountingEntry,\n    completeCountingSession,\n    approveCountingSession,\n    applyCountAdjustments,\n    updateSession,\n    fetchSessions,\n    fetchSessionById,\n    fetchCountingEntries,\n    cancelCountingSession,\n    postCountingSession,\n    undoLastPosting,\n  };\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-alerts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-core.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-movements.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockMovement' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MovementQueryRow' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\nimport type { Ref } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { inventoryLogger } from '@/utils/logger';\nimport type {\n  StockMovement,\n  StockMovementInsert,\n  StockUpdateRequest,\n  MovementWithRelations,\n  MovementType,\n  MovementQueryRow,\n} from '@/types/inventory';\n\n// Using shared MovementWithRelations from types\n\nexport function useInventoryMovements(\n  currentPracticeId: Ref<string | null>,\n  currentUserId: Ref<string | null>\n) {\n  // State\n  const stockMovements = ref<MovementWithRelations[]>([]);\n  const stockMovementsTotal = ref<number>(0);\n  const movementsLoading = ref<boolean>(false);\n\n  // Actions - pure inventory operations only\n  const updateStockLevel = async (request: StockUpdateRequest) => {\n    try {\n      // Validate required fields\n      if (!request.practice_id || !request.location_id || !request.product_id) {\n        throw new Error('Missing required fields for stock update');\n      }\n\n      if (request.quantity_change === 0) {\n        throw new Error('Quantity change cannot be zero');\n      }\n\n      // Get current stock level with retry logic for race conditions\n      let currentStock = 0;\n      let retryCount = 0;\n      const maxRetries = 3;\n\n      while (retryCount < maxRetries) {\n        try {\n          const { data: stockLevel, error: stockError } = await supabase\n            .from('stock_levels')\n            .select('current_quantity')\n            .eq('practice_id', request.practice_id)\n            .eq('location_id', request.location_id)\n            .eq('product_id', request.product_id)\n            .maybeSingle();\n\n          if (stockError && stockError.code !== 'PGRST116') {\n            throw stockError;\n          }\n\n          currentStock = stockLevel?.current_quantity ?? 0;\n          break;\n        } catch (fetchError: unknown) {\n          retryCount += 1;\n          if (retryCount >= maxRetries) {\n            inventoryLogger.error('Failed to get current stock after retries:', {\n              error: fetchError instanceof Error ? fetchError.message : String(fetchError),\n            });\n            throw new Error('Unable to fetch current stock level');\n          }\n          await new Promise(resolve => setTimeout(resolve, 100 * retryCount));\n        }\n      }\n\n      const newQuantity = currentStock + request.quantity_change;\n\n      // Validate that new quantity is not negative if not allowed\n      if (newQuantity < 0) {\n        throw new Error('Insufficient stock for this operation');\n      }\n\n      // Create stock movement record first (this serves as our audit trail)\n      const movementData: StockMovementInsert = {\n        practice_id: request.practice_id,\n        location_id: request.location_id,\n        product_id: request.product_id,\n        movement_type: request.movement_type,\n        quantity_change: request.quantity_change,\n        quantity_before: currentStock,\n        quantity_after: newQuantity,\n        reference_type: 'manual_adjustment',\n        reason: request.reason_code ?? null,\n        notes: request.notes ?? null,\n        batch_id: null,\n        batch_number: null,\n        expiry_date: null,\n      };\n\n      // Add created_by only if we have a valid user\n      const userId = currentUserId.value;\n      if (userId && userId !== '550e8400-e29b-41d4-a716-446655440001') {\n        // Only add created_by for real users, not demo user\n        movementData.created_by = userId;\n      }\n\n      const { data: insertedMovement, error: movementError } = await supabase\n        .from('stock_movements')\n        .insert(movementData)\n        .select()\n        .single();\n\n      if (movementError) {\n        inventoryLogger.error('Error creating stock movement:', {\n          error: movementError.message,\n          code: movementError.code,\n        });\n        throw movementError;\n      }\n\n      // Stock level is automatically updated by database triggers\n      // No need for manual upsert anymore\n\n      // Refresh data to reflect changes\n      await fetchStockMovements(request.practice_id);\n\n      return insertedMovement;\n    } catch (error: unknown) {\n      inventoryLogger.error('Error updating stock level:', {\n        error: error instanceof Error ? error.message : String(error),\n        practiceId: request.practice_id,\n        locationId: request.location_id,\n        productId: request.product_id,\n      });\n      throw error;\n    }\n  };\n\n  const fetchStockMovements = async (\n    practiceId: string,\n    options?: {\n      page?: number;\n      rowsPerPage?: number;\n      sortBy?: string;\n      descending?: boolean;\n      filters?: {\n        dateRange?: { start?: string; end?: string };\n        location_id?: string;\n        movement_type?: MovementType;\n        product_search?: string;\n      };\n    }\n  ) => {\n    try {\n      movementsLoading.value = true;\n      const page = options?.page ?? 1;\n      const rowsPerPage = options?.rowsPerPage ?? 25;\n      const sortBy = options?.sortBy ?? 'created_at';\n      const descending = options?.descending ?? true;\n\n      const from = (page - 1) * rowsPerPage;\n      const to = from + rowsPerPage - 1;\n\n      let query = supabase\n        .from('stock_movements')\n        .select(\n          `\n          id, practice_id, location_id, product_id, movement_type, quantity_change, quantity_before, quantity_after, reason, notes, created_at,\n          product:products(id, name, sku),\n          location:practice_locations(id, name)\n        `,\n          { count: 'exact' }\n        )\n        .eq('practice_id', practiceId)\n        .order(sortBy, { ascending: !descending })\n        .range(from, to);\n\n      // Filters\n      const f = options?.filters;\n      if (f?.location_id) {\n        query = query.eq('location_id', f.location_id);\n      }\n      if (f?.movement_type) {\n        query = query.eq('movement_type', f.movement_type);\n      }\n      if (f?.dateRange?.start) {\n        query = query.gte('created_at', f.dateRange.start);\n      }\n      if (f?.dateRange?.end) {\n        query = query.lte('created_at', f.dateRange.end);\n      }\n      if (f?.product_search) {\n        const term = `%${f.product_search}%`;\n        // OR match on product name or sku in the joined products table\n        query = query.or(`name.ilike.${term},sku.ilike.${term}`, { foreignTable: 'products' });\n      }\n\n      const { data, error, count } = await query;\n      if (error) throw error;\n\n      const mappedData = (data ?? []).map(row => ({\n        id: row.id,\n        practice_id: row.practice_id,\n        location_id: row.location_id,\n        product_id: row.product_id,\n        movement_type: row.movement_type as MovementType,\n        quantity_change: row.quantity_change,\n        quantity_before: row.quantity_before,\n        quantity_after: row.quantity_after,\n        reason: row.reason ?? null,\n        notes: row.notes ?? null,\n        created_at: row.created_at ?? null,\n        product: row.product ?? null,\n        location: row.location ?? null,\n      }));\n\n      stockMovements.value = mappedData as MovementWithRelations[];\n      stockMovementsTotal.value = count ?? 0;\n    } catch (error) {\n      inventoryLogger.error('Error fetching stock movements:', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n    finally {\n      movementsLoading.value = false;\n    }\n  };\n\n  const transferStock = async (\n    practiceId: string,\n    productId: string,\n    fromLocationId: string,\n    toLocationId: string,\n    quantity: number,\n    notes?: string\n  ) => {\n    try {\n      // Get current stock at source location\n      const { data: fromStockData, error: fromStockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', practiceId)\n        .eq('location_id', fromLocationId)\n        .eq('product_id', productId)\n        .maybeSingle();\n\n      if (fromStockError && fromStockError.code !== 'PGRST116') {\n        throw fromStockError;\n      }\n\n      const { data: toStockData, error: toStockError } = await supabase\n        .from('stock_levels')\n        .select('current_quantity')\n        .eq('practice_id', practiceId)\n        .eq('location_id', toLocationId)\n        .eq('product_id', productId)\n        .maybeSingle();\n\n      if (toStockError && toStockError.code !== 'PGRST116') {\n        throw toStockError;\n      }\n\n      const fromCurrentStock = fromStockData?.current_quantity ?? 0;\n      const toCurrentStock = toStockData?.current_quantity ?? 0;\n\n      // Create transfer out movement\n      await supabase.from('stock_movements').insert({\n        practice_id: practiceId,\n        location_id: fromLocationId,\n        product_id: productId,\n        movement_type: 'transfer',\n        quantity_change: -quantity,\n        quantity_before: fromCurrentStock,\n        quantity_after: fromCurrentStock - quantity,\n        reference_type: 'transfer',\n        notes: notes || `Transfer to ${toLocationId}`,\n        created_by: currentUserId.value || '',\n      });\n\n      // Create transfer in movement\n      await supabase.from('stock_movements').insert({\n        practice_id: practiceId,\n        location_id: toLocationId,\n        product_id: productId,\n        movement_type: 'transfer',\n        quantity_change: quantity,\n        quantity_before: toCurrentStock,\n        quantity_after: toCurrentStock + quantity,\n        reference_type: 'transfer',\n        notes: notes || `Transfer from ${fromLocationId}`,\n        created_by: currentUserId.value || '',\n      });\n\n      // Update stock levels for both locations\n      await supabase.from('stock_levels').upsert(\n        [\n          {\n            practice_id: practiceId,\n            location_id: fromLocationId,\n            product_id: productId,\n            current_quantity: fromCurrentStock - quantity,\n            updated_at: new Date().toISOString(),\n          },\n          {\n            practice_id: practiceId,\n            location_id: toLocationId,\n            product_id: productId,\n            current_quantity: toCurrentStock + quantity,\n            updated_at: new Date().toISOString(),\n          },\n        ],\n        {\n          onConflict: 'practice_id,location_id,product_id',\n        }\n      );\n\n      // Refresh movements\n      await fetchStockMovements(practiceId);\n    } catch (error) {\n      inventoryLogger.error('Error transferring stock', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  const executeStockTransfer = async (transferData: {\n    from_location_id: string;\n    to_location_id: string;\n    product_id: string;\n    quantity: number;\n    reason?: string;\n    notes?: string;\n  }) => {\n    const practiceId = currentPracticeId.value;\n\n    if (!practiceId) {\n      throw new Error('No practice selected for transfer');\n    }\n\n    try {\n        await transferStock(\n          practiceId,\n          transferData.product_id,\n          transferData.from_location_id,\n          transferData.to_location_id,\n          transferData.quantity,\n          transferData.notes\n        );\n    } catch (error) {\n      inventoryLogger.error('Error executing stock transfer:', {\n        error: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  };\n\n  return {\n    // State\n    stockMovements,\n    stockMovementsTotal,\n    movementsLoading,\n\n    // Actions\n    updateStockLevel,\n    fetchStockMovements,\n    transferStock,\n    executeStockTransfer,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\inventory\\inventory-realtime.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleStockMovementUpdate' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, onUnmounted, type Ref } from 'vue';\nimport { realtimeService } from '@/boot/supabase';\nimport { inventoryLogger } from '@/utils/logger';\nimport type { StockLevelRow, StockMovementRow } from '@/types/inventory';\nimport type { RealtimeChannel } from '@supabase/supabase-js';\n\nexport function useInventoryRealtime(\n  currentPracticeId: Ref<string | null>,\n  lastSyncAt: Ref<Date | null>,\n  fetchStockMovements?: (practiceId: string) => Promise<void>\n) {\n  // Real-time state\n  const realtimeConnected = ref(false);\n  const inventoryChannel = ref<RealtimeChannel | null>(null);\n\n  // Real-time functions\n  const handleStockLevelUpdate = async (payload: {\n    eventType: string;\n    new: StockLevelRow;\n    old: StockLevelRow;\n  }) => {\n    const practiceId = currentPracticeId.value;\n    if (!practiceId) {\n      return;\n    }\n\n    inventoryLogger.info('🔄 Stock level changed, refreshing data...');\n\n    if (payload.eventType === 'INSERT' && fetchStockMovements) {\n      const currentId = currentPracticeId.value;\n      if (currentId) {\n        inventoryLogger.info('📈 New stock movement, refreshing...');\n        await fetchStockMovements(currentId);\n      }\n    }\n  };\n\n  const handleStockMovementUpdate = async (payload: {\n    eventType: string;\n    new: StockMovementRow;\n    old: StockMovementRow;\n  }) => {\n    const practiceId = currentPracticeId.value;\n    if (!practiceId || !fetchStockMovements) {\n      return;\n    }\n\n    if (payload.eventType === 'INSERT') {\n      inventoryLogger.info('📈 New stock movement, refreshing...');\n      await fetchStockMovements(practiceId);\n    }\n  };\n\n  const startRealtimeSubscription = (practiceId: string) => {\n    if (inventoryChannel.value) {\n      void realtimeService.unsubscribe(inventoryChannel.value);\n    }\n\n    inventoryLogger.info(\n      '🔄 Starting real-time inventory subscription for practice:',\n      practiceId\n    );\n\n    inventoryChannel.value = realtimeService.subscribeToStockLevels(\n      practiceId,\n      payload => {\n        if (!payload.new) {\n          return;\n        }\n\n        handleStockLevelUpdate({\n          eventType: payload.eventType,\n          new: payload.new as StockLevelRow,\n          old: (payload.old ?? {}) as StockLevelRow,\n        });\n\n        lastSyncAt.value = new Date();\n      }\n    );\n\n    realtimeConnected.value = true;\n  };\n\n  const stopRealtimeSubscription = async () => {\n    if (inventoryChannel.value) {\n      await realtimeService.unsubscribe(inventoryChannel.value);\n      inventoryChannel.value = null;\n    }\n\n    realtimeConnected.value = false;\n    inventoryLogger.info('❌ Stopped real-time inventory subscription');\n  };\n\n  // Auto-start real-time when practice is available\n  const initializeRealtime = () => {\n    const practiceId = currentPracticeId.value;\n    if (practiceId && !realtimeConnected.value) {\n      startRealtimeSubscription(practiceId);\n    }\n  };\n\n  // Cleanup on unmount\n  onUnmounted(() => {\n    void stopRealtimeSubscription();\n  });\n\n  return {\n    // State\n    realtimeConnected,\n\n    // Actions\n    startRealtimeSubscription,\n    stopRealtimeSubscription,\n    initializeRealtime,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-core.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListDTO' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListItemInsert' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed } from 'vue';\nimport { supabase } from '@/boot/supabase';\nimport { useAuthStore } from '../auth';\nimport { useSuppliersStore } from '../suppliers';\nimport { createLogger } from '@/utils/logger';\nimport {\n  OrderListRow,\n  OrderListItemRow,\n  OrderListStatus,\n  OrderListDTO,\n  OrderListItemDTO,\n  OrderListInsert,\n  OrderListItemInsert,\n  mapOrderListRowToDTO,\n  mapOrderListItemRowToDTO,\n} from '@/types/inventory';\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\nimport type {\n  OrderListWithItems,\n  CreateOrderListRequest,\n  UpdateOrderListRequest,\n} from '@/types/stores';\nimport type { Tables } from '@/types';\n\nconst log = createLogger('OrderListsCore');\n\nexport function useOrderListsCore() {\n  // State\n  const orderLists = ref<OrderListWithItems[]>([]);\n  const loading = ref(false);\n  const saving = ref(false);\n\n  // Dependencies\n  const authStore = useAuthStore();\n  const suppliersStore = useSuppliersStore();\n\n  // Getters\n  const getOrderListById = computed(() => {\n    return (id: string) => orderLists.value.find(list => list.id === id);\n  });\n\n  const getOrderListsBySupplier = computed(() => {\n    return (supplierId: string) =>\n      orderLists.value.filter(list => list.supplier_id === supplierId);\n  });\n\n  const getOrderListsByStatus = computed(() => {\n    return (status: OrderListStatus) =>\n      orderLists.value.filter(list => list.status === status);\n  });\n\n  const orderListStats = computed(() => {\n    const stats: Record<OrderListStatus, number> = {\n      draft: 0,\n      active: 0,\n      submitted: 0,\n      completed: 0,\n      cancelled: 0,\n    };\n\n    orderLists.value.forEach(list => {\n      const status: OrderListStatus = list.status ?? 'draft';\n      stats[status] = (stats[status] ?? 0) + 1;\n    });\n\n    return {\n      total: orderLists.value.length,\n      ...stats,\n    };\n  });\n\n  // Actions\n  const fetchOrderLists = async (practiceId: string) => {\n    loading.value = true;\n    try {\n      const { data, error } = await supabase\n        .from('order_lists')\n        .select(\n          `\n          *,\n          supplier:suppliers(*),\n          items:order_list_items(\n            *,\n            product:products(*),\n            supplier_product:supplier_products(*),\n            reorder_suggestion:reorder_suggestions(*)\n          )\n        `\n        )\n        .eq('practice_id', practiceId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      const orderListsWithRelations = (data ?? []) as Array<\n        OrderListRow & {\n          supplier: Tables<'suppliers'> | null;\n          items: Array<\n            OrderListItemRow & {\n              product: Tables<'products'> | null;\n              supplier_product: Tables<'supplier_products'> | null;\n            }\n          > | null;\n        }\n      >;\n\n      orderLists.value = orderListsWithRelations.map(orderList => {\n        const dto = mapOrderListRowToDTO(orderList);\n        dto.supplier = orderList.supplier ?? null;\n        const items: OrderListItemDTO[] = (orderList.items ?? []).map(item => {\n          const itemDto = mapOrderListItemRowToDTO(item);\n          itemDto.product = item.product ?? null;\n          itemDto.supplier_product = item.supplier_product ?? null;\n          return itemDto;\n        });\n\n        return {\n          ...dto,\n          items,\n        } satisfies OrderListWithItems;\n      });\n    } catch (err: unknown) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'fetchOrderLists',\n        practiceId,\n      });\n      log.error('Error fetching order lists', {\n        error: handledError.message,\n        practiceId,\n      });\n      throw handledError;\n    } finally {\n      loading.value = false;\n    }\n  };\n\n  const createOrderList = async (\n    request: CreateOrderListRequest\n  ): Promise<OrderListWithItems> => {\n    saving.value = true;\n    try {\n      const orderListData: OrderListInsert = {\n        practice_id: request.practice_id,\n        location_id: request.location_id,\n        supplier_id: request.supplier_id ?? null,\n        name: request.name,\n        description: request.description ?? null,\n        status: request.status ?? 'draft',\n        total_items: 0,\n        total_value: 0,\n        min_order_value: null,\n        created_by: authStore.user?.id ?? null,\n      };\n\n      const { data, error } = await supabase\n        .from('order_lists')\n        .insert(orderListData)\n        .select(\n          `\n          *,\n          supplier:suppliers(*)\n        `\n        )\n        .single();\n\n      if (error) throw error;\n\n      const createdDto = mapOrderListRowToDTO(data as OrderListRow);\n      createdDto.supplier = (data as { supplier?: Tables<'suppliers'> | null }).supplier ?? null;\n\n      const createdOrderList: OrderListWithItems = {\n        ...createdDto,\n        items: [],\n      };\n\n      orderLists.value.unshift(createdOrderList);\n      return createdOrderList;\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'createOrderList',\n        practiceId: request.practice_id,\n        metadata: { request },\n      });\n      log.error('Error creating order list', {\n        error: handledError.message,\n        practiceId: request.practice_id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const updateOrderList = async (\n    request: UpdateOrderListRequest\n  ): Promise<void> => {\n    saving.value = true;\n    try {\n      const updatePayload: Partial<OrderListRow> = {\n        updated_at: new Date().toISOString(),\n      };\n      if (request.name !== undefined) updatePayload.name = request.name;\n      if (request.description !== undefined) updatePayload.description = request.description;\n      if (request.supplier_id !== undefined) updatePayload.supplier_id = request.supplier_id;\n      if (request.location_id !== undefined) updatePayload.location_id = request.location_id;\n\n      const { error } = await supabase\n        .from('order_lists')\n        .update(updatePayload)\n        .eq('id', request.id)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const index = orderLists.value.findIndex(list => list.id === request.id);\n      if (index !== -1) {\n        const orderList = orderLists.value[index];\n        if (!orderList) {\n          return;\n        }\n\n        if (request.name !== undefined) orderList.name = request.name;\n        if (request.description !== undefined)\n          orderList.description = request.description;\n        if (request.supplier_id !== undefined) {\n          orderList.supplier_id = request.supplier_id;\n          orderList.supplier =\n            suppliersStore.suppliers.find(s => s.id === request.supplier_id) ?? null;\n        }\n        if (request.location_id !== undefined) {\n          orderList.location_id = request.location_id;\n        }\n        orderList.updated_at = updatePayload.updated_at ?? new Date().toISOString();\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'updateOrderList',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { request },\n      });\n      log.error('Error updating order list', {\n        error: handledError.message,\n        orderListId: request.id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const deleteOrderList = async (id: string): Promise<void> => {\n    saving.value = true;\n    try {\n      const { error } = await supabase\n        .from('order_lists')\n        .delete()\n        .eq('id', id)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const index = orderLists.value.findIndex(list => list.id === id);\n      if (index !== -1) {\n        orderLists.value.splice(index, 1);\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'deleteOrderList',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { orderListId: id },\n      });\n      log.error('Error deleting order list', {\n        error: handledError.message,\n        orderListId: id,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  const changeOrderListStatus = async (\n    orderListId: string,\n    status: OrderListStatus\n  ): Promise<void> => {\n    try {\n      saving.value = true;\n\n      // Prepare update data\n      const updateData: Partial<OrderListRow> = {\n        status,\n        updated_at: new Date().toISOString(),\n      };\n\n      // Add submission specific fields\n      if (status === 'submitted') {\n        // No submitted fields in schema; future enhancement could persist elsewhere\n      }\n\n      const { error } = await supabase\n        .from('order_lists')\n        .update(updateData)\n        .eq('id', orderListId)\n        .eq('practice_id', authStore.userProfile?.clinic_id || '');\n\n      if (error) throw error;\n\n      // Update local state\n      const orderList = orderLists.value.find(list => list.id === orderListId);\n      if (orderList) {\n        orderList.status = status;\n        orderList.updated_at = updateData.updated_at ?? orderList.updated_at;\n        // Submitted metadata not persisted – leaving local fields unchanged\n      }\n    } catch (err) {\n      const handledError = ServiceErrorHandler.handle(err as Error, {\n        service: 'OrderListsStore',\n        operation: 'changeOrderListStatus',\n        practiceId: authStore.userProfile?.clinic_id ?? '',\n        metadata: { orderListId, status },\n      });\n      log.error('Error changing order list status', {\n        error: handledError.message,\n        orderListId,\n        status,\n      });\n      throw handledError;\n    } finally {\n      saving.value = false;\n    }\n  };\n\n  return {\n    // State\n    orderLists,\n    loading,\n    saving,\n\n    // Getters\n    getOrderListById,\n    getOrderListsBySupplier,\n    getOrderListsByStatus,\n    orderListStats,\n\n    // Actions\n    fetchOrderLists,\n    createOrderList,\n    updateOrderList,\n    deleteOrderList,\n    changeOrderListStatus,\n  };\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-integration.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListStatus' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, type Ref } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { useAuthStore } from '../auth';\r\nimport { useProductsStore } from '../products';\r\nimport { createLogger } from '@/utils/logger';\r\nimport type {\r\n  OrderListStatus,\r\n  OrderListDTO,\r\n  OrderListItemDTO,\r\n  OrderListInsert,\r\n  OrderListItemInsert,\r\n  OrderListRow,\r\n} from '@/types/inventory';\r\nimport { mapOrderListRowToDTO } from '@/types/inventory';\r\nimport { ServiceErrorHandler } from '@/utils/service-error-handler';\r\nimport type { OrderListWithItems } from '@/types/stores';\r\n\r\nconst log = createLogger('OrderListsIntegration');\r\n\r\nexport function useOrderListsIntegration(\r\n  orderLists: Ref<OrderListWithItems[]>\r\n) {\r\n  // State\r\n  const saving = ref(false);\r\n\r\n  // Dependencies\r\n  const authStore = useAuthStore();\r\n  const productsStore = useProductsStore();\r\n\r\n  const duplicateOrderList = async (\r\n    originalId: string,\r\n    newName: string\r\n  ): Promise<OrderListWithItems> => {\r\n    saving.value = true;\r\n    try {\r\n      const original = orderLists.value.find(\r\n        (list: OrderListWithItems) => list.id === originalId\r\n      );\r\n      if (!original) throw new Error('Original order list not found');\r\n\r\n      const insertPayload: OrderListInsert = {\r\n        practice_id: original.practice_id,\r\n        location_id: original.location_id,\r\n        supplier_id: original.supplier_id,\r\n        name: newName,\r\n        description: original.description ?? null,\r\n        status: 'draft',\r\n        total_items: 0,\r\n        total_value: 0,\r\n        min_order_value: null,\r\n        created_by: authStore.user?.id ?? null,\r\n      };\r\n\r\n      const { data: newOrderList, error: orderListError } = await supabase\r\n        .from('order_lists')\r\n        .insert(insertPayload)\r\n        .select(\r\n          `\r\n          *,\r\n          supplier:suppliers(*)\r\n        `\r\n        )\r\n        .single();\r\n\r\n      if (orderListError) throw orderListError;\r\n\r\n      // Duplicate items if any exist\r\n      if (original.items.length > 0) {\r\n        const itemsToCreate: OrderListItemInsert[] = original.items.map(item => ({\r\n          order_list_id: (newOrderList as OrderListRow).id,\r\n          product_id: item.product_id,\r\n          supplier_product_id: item.supplier_product_id ?? null,\r\n          suggested_quantity: item.suggested_quantity ?? item.ordered_quantity ?? 0,\r\n          ordered_quantity: item.ordered_quantity ?? item.suggested_quantity ?? 0,\r\n          unit_price: item.unit_price ?? null,\r\n          total_price:\r\n            (item.ordered_quantity ?? item.suggested_quantity ?? 0) * (item.unit_price ?? 0),\r\n          notes: item.notes ?? null,\r\n        }));\r\n\r\n        const { error: itemsError } = await supabase\r\n          .from('order_list_items')\r\n          .insert(itemsToCreate);\r\n\r\n        if (itemsError) throw itemsError;\r\n      }\r\n\r\n      const dto: OrderListDTO = {\r\n        ...mapOrderListRowToDTO(newOrderList as OrderListRow),\r\n        total_items: original.items.length,\r\n        total_cost: (newOrderList as OrderListRow).total_value ?? 0,\r\n        supplier: (newOrderList as { supplier?: OrderListDTO['supplier'] }).supplier ?? null,\r\n      };\r\n\r\n      const newOrderListWithItems: OrderListWithItems = {\r\n        ...dto,\r\n        items: original.items.map(item => ({\r\n          ...item,\r\n          order_list_id: dto.id,\r\n        })) as OrderListItemDTO[],\r\n      };\r\n\r\n      orderLists.value.unshift(newOrderListWithItems);\r\n      log.info('Order list duplicated', {\r\n        newOrderListId: newOrderList.id,\r\n      });\r\n      return newOrderListWithItems;\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'duplicateOrderList',\r\n        metadata: { originalId, newName },\r\n      });\r\n      log.error('Error duplicating order list', {\r\n        error: handledError.message,\r\n        originalId,\r\n      });\r\n      throw handledError;\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  const addToCart = async (orderListId: string): Promise<void> => {\r\n    try {\r\n      const orderList = orderLists.value.find(\r\n        (list: OrderListWithItems) => list.id === orderListId\r\n      );\r\n      if (!orderList) throw new Error('Order list not found');\r\n\r\n      // Clear existing cart\r\n      productsStore.clearCart();\r\n\r\n      // Add all items to cart\r\n      for (const item of orderList.items) {\r\n        const product = productsStore.getProductById(item.product_id);\r\n        if (product) {\r\n          const supplierProduct = product.supplier_products?.find(\r\n            sp => sp.id === item.supplier_product_id\r\n          );\r\n          productsStore.addToCart(\r\n            product,\r\n            item.suggested_quantity ?? item.ordered_quantity ?? 0,\r\n            supplierProduct?.supplier_id\r\n          );\r\n        }\r\n      }\r\n      log.info('Adding order list to cart', {\r\n        orderListId,\r\n      });\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'addToCart',\r\n        metadata: { orderListId },\r\n      });\r\n      log.error('Error adding order list to cart', {\r\n        error: handledError.message,\r\n        orderListId,\r\n      });\r\n      throw handledError;\r\n    }\r\n  };\r\n\r\n  const autoFillFromStockLevels = async (): Promise<void> => {\r\n    saving.value = true;\r\n    try {\r\n      log.info('Auto-fill from stock levels not yet implemented');\r\n    } catch (err) {\r\n      const handledError = ServiceErrorHandler.handle(err as Error, {\r\n        service: 'OrderListsStore',\r\n        operation: 'autoFillFromStockLevels',\r\n        metadata: {},\r\n      });\r\n      log.error('Error auto-filling order list', {\r\n        error: handledError.message,\r\n      });\r\n      throw handledError;\r\n    } finally {\r\n      saving.value = false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    // State\r\n    saving,\r\n\r\n    // Actions\r\n    duplicateOrderList,\r\n    addToCart,\r\n    autoFillFromStockLevels,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-items.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-minmax.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'reason' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 220,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed, onUnmounted } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { orderLogger, createLogger } from '@/utils/logger';\r\nimport type { UrgencyLevel, OrderListInsert } from '@/types/inventory';\r\n\r\n// Min/Max specific types\r\nexport interface MinMaxItem {\r\n  id: string;\r\n  order_list_id: string;\r\n  product_id: string;\r\n  minimum_stock: number;\r\n  maximum_stock: number;\r\n  current_stock: number;\r\n  reorder_point: number;\r\n  preferred_supplier_id?: string;\r\n  alternative_suppliers: string[];\r\n  last_order_date?: string;\r\n  last_order_quantity: number;\r\n  average_consumption: number;\r\n  lead_time_days: number;\r\n  urgency_level: 'low' | 'normal' | 'high' | 'critical';\r\n  auto_suggest_enabled: boolean;\r\n  manual_override: boolean;\r\n  override_reason?: string;\r\n}\r\n\r\nexport interface ReorderSuggestion {\r\n  id: string;\r\n  order_list_id: string;\r\n  product_id: string;\r\n  current_stock: number;\r\n  minimum_stock: number;\r\n  maximum_stock: number;\r\n  reorder_point: number;\r\n  suggested_quantity: number;\r\n  urgency_level: UrgencyLevel;\r\n  stock_status:\r\n    | 'out_of_stock'\r\n    | 'below_minimum'\r\n    | 'reorder_needed'\r\n    | 'overstocked'\r\n    | 'in_range';\r\n  calculated_order_quantity: number;\r\n  product_name: string;\r\n  product_sku: string;\r\n  product_unit: string;\r\n  list_name: string;\r\n  practice_id: string;\r\n  location_id: string;\r\n  location_name?: string | null;\r\n  preferred_unit_price: number;\r\n  min_order_qty: number;\r\n  preferred_supplier_name: string;\r\n  preferred_supplier_id?: string;\r\n}\r\n\r\nexport interface OrderAdvice {\r\n  total_items_to_order: number;\r\n  total_estimated_cost: number;\r\n  items_by_urgency: {\r\n    critical: ReorderSuggestion[];\r\n    high: ReorderSuggestion[];\r\n    normal: ReorderSuggestion[];\r\n    low: ReorderSuggestion[];\r\n  };\r\n  suppliers_involved: string[];\r\n  estimated_delivery_dates: Record<string, string>;\r\n}\r\n\r\nconst normalizeUrgency = (value: string | null): UrgencyLevel => {\r\n  switch (value) {\r\n    case 'critical':\r\n    case 'high':\r\n    case 'medium':\r\n    case 'low':\r\n      return value;\r\n    default:\r\n      return 'low';\r\n  }\r\n};\r\n\r\nexport function useOrderListsMinMax() {\r\n  // Event emitter for store communication\r\n  // const eventEmitter = createEventEmitter('order-lists-minmax'); // This line is removed as per the edit hint.\r\n\r\n  // Current practice ID (from auth events)\r\n  const currentPracticeId = ref<string | null>(null);\r\n\r\n  // State\r\n  const reorderSuggestions = ref<ReorderSuggestion[]>([]);\r\n  const loading = ref(false);\r\n  const lastCalculationAt = ref<Date | null>(null);\r\n\r\n  const log = createLogger('OrderListsMinMax');\r\n\r\n  // Set up event listeners for auth changes\r\n  // The eventEmitter.on calls are removed as per the edit hint.\r\n  // The original code had eventEmitter.on(StoreEventsOrderLists.USER_LOGGED_IN, ...)\r\n  // and eventEmitter.on(StoreEventsOrderLists.USER_LOGGED_OUT, ...).\r\n  // Since eventEmitter is removed, these listeners are also removed.\r\n\r\n  // Clean up listeners\r\n  onUnmounted(() => {\r\n    // The unsubscribeAuth and unsubscribeLogout functions are removed as per the edit hint.\r\n    // The original code had them, but they relied on eventEmitter.\r\n  });\r\n\r\n  // Computed properties for order advice\r\n  const orderAdvice = computed((): OrderAdvice => {\r\n    const itemsToOrder = reorderSuggestions.value.filter(\r\n      item =>\r\n        item.calculated_order_quantity > 0 &&\r\n        item.stock_status !== 'in_range' &&\r\n        item.stock_status !== 'overstocked'\r\n    );\r\n\r\n    const itemsByUrgency = {\r\n      critical: itemsToOrder.filter(item => item.urgency_level === 'critical'),\r\n      high: itemsToOrder.filter(item => item.urgency_level === 'high'),\r\n      normal: itemsToOrder.filter(item => item.urgency_level === 'medium'),\r\n      low: itemsToOrder.filter(item => item.urgency_level === 'low'),\r\n    };\r\n\r\n    const suppliersInvolved = [\r\n      ...new Set(\r\n        itemsToOrder.map(item => item.preferred_supplier_name).filter(Boolean)\r\n      ),\r\n    ];\r\n\r\n    const totalEstimatedCost = itemsToOrder.reduce(\r\n      (sum, item) =>\r\n        sum +\r\n        item.calculated_order_quantity *\r\n          (item.preferred_unit_price ?? 0),\r\n      0\r\n    );\r\n\r\n    // Estimate delivery dates based on lead times (simplified)\r\n    const estimatedDeliveryDates: Record<string, string> = {};\r\n    suppliersInvolved.forEach(supplier => {\r\n      const supplierItems = itemsToOrder.filter(\r\n        item => item.preferred_supplier_name === supplier\r\n      );\r\n      const maxLeadTime = Math.max(\r\n        ...supplierItems.map(item => item.lead_time_days ?? 7)\r\n      );\r\n      const deliveryDate = new Date();\r\n      deliveryDate.setDate(deliveryDate.getDate() + maxLeadTime);\r\n      estimatedDeliveryDates[supplier] =\r\n        deliveryDate.toISOString().split('T')[0] ?? new Date().toISOString().split('T')[0];\r\n    });\r\n\r\n    return {\r\n      total_items_to_order: itemsToOrder.length,\r\n      total_estimated_cost: totalEstimatedCost,\r\n      items_by_urgency: itemsByUrgency,\r\n      suppliers_involved: suppliersInvolved,\r\n      estimated_delivery_dates: estimatedDeliveryDates,\r\n    };\r\n  });\r\n\r\n  const criticalItemsCount = computed(\r\n    () =>\r\n      reorderSuggestions.value.filter(\r\n        item =>\r\n          item.urgency_level === 'critical' &&\r\n          item.calculated_order_quantity > 0\r\n      ).length\r\n  );\r\n\r\n  const itemsBelowMinimum = computed(\r\n    () =>\r\n      reorderSuggestions.value.filter(\r\n        item =>\r\n          item.stock_status === 'below_minimum' ||\r\n          item.stock_status === 'out_of_stock'\r\n      ).length\r\n  );\r\n\r\n  // Actions\r\n  const refreshReorderSuggestions = async (practiceId: string) => {\r\n    loading.value = true;\r\n    try {\r\n      log.info('Fetching reorder suggestions for practice', { practiceId });\r\n\r\n      const { data, error } = await supabase\r\n        .from('reorder_suggestions')\r\n        .select('*')\r\n        .eq('practice_id', practiceId)\r\n        .order('urgency_level', { ascending: false })\r\n        .order('stock_status', { ascending: true });\r\n\r\n      if (error) throw error;\r\n\r\n      reorderSuggestions.value = (data || []).map(suggestion => ({\r\n        ...suggestion,\r\n        urgency_level: normalizeUrgency(suggestion.urgency_level),\r\n      })) as ReorderSuggestion[];\r\n      lastCalculationAt.value = new Date();\r\n\r\n      // TODO: emit event when order suggestion updates are centralized\r\n\r\n      log.info(\r\n        `✅ Loaded ${reorderSuggestions.value.length} reorder suggestions`\r\n      );\r\n\r\n    } catch (error) {\r\n      log.error('Error fetching reorder suggestions', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const updateStockLevel = async (\r\n    itemId: string,\r\n    newStockLevel: number,\r\n    reason?: string\r\n  ) => {\r\n    try {\r\n      log.info(\r\n        `Updating stock level for item ${itemId} to ${newStockLevel}`\r\n      );\r\n\r\n      // Update the item's current stock\r\n      const { error } = await supabase\r\n        .from('order_list_items')\r\n        .update({\r\n          current_stock: newStockLevel,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', itemId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      const item = reorderSuggestions.value.find(s => s.id === itemId);\r\n      if (item) {\r\n        item.current_stock = newStockLevel;\r\n\r\n        // Recalculate stock status and order quantity\r\n        if (newStockLevel <= 0) {\r\n          item.stock_status = 'out_of_stock';\r\n          item.calculated_order_quantity = item.maximum_stock;\r\n        } else if (newStockLevel <= item.minimum_stock) {\r\n          item.stock_status = 'below_minimum';\r\n          item.calculated_order_quantity = item.maximum_stock - newStockLevel;\r\n        } else if (\r\n          newStockLevel <= (item.reorder_point || item.minimum_stock * 1.2)\r\n        ) {\r\n          item.stock_status = 'reorder_needed';\r\n          item.calculated_order_quantity = Math.max(\r\n            item.maximum_stock - newStockLevel,\r\n            item.minimum_stock\r\n          );\r\n        } else if (newStockLevel >= item.maximum_stock) {\r\n          item.stock_status = 'overstocked';\r\n          item.calculated_order_quantity = 0;\r\n        } else {\r\n          item.stock_status = 'in_range';\r\n          item.calculated_order_quantity = 0;\r\n        }\r\n      }\r\n\r\n      log.info(`✅ Stock level updated successfully`);\r\n\r\n      // TODO: emit order list stock level update once new event map is defined\r\n    } catch (error) {\r\n      log.error('Error updating stock level', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createOrdersFromAdvice = async (selectedItems?: string[]) => {\r\n    try {\r\n      const itemsToOrder = selectedItems\r\n        ? reorderSuggestions.value.filter(item =>\r\n            selectedItems.includes(item.id)\r\n          )\r\n        : reorderSuggestions.value.filter(\r\n            item => item.calculated_order_quantity > 0\r\n          );\r\n\r\n      if (itemsToOrder.length === 0) {\r\n        throw new Error('No items selected for ordering');\r\n      }\r\n\r\n      // Group items by supplier\r\n      const ordersBySupplier = new Map<string, ReorderSuggestion[]>();\r\n\r\n      itemsToOrder.forEach(item => {\r\n        const supplierId = item.preferred_supplier_name || 'unassigned';\r\n        const currentItems = ordersBySupplier.get(supplierId);\r\n        if (currentItems) {\r\n          currentItems.push(item);\r\n        } else {\r\n          ordersBySupplier.set(supplierId, [item]);\r\n        }\r\n      });\r\n\r\n      const createdOrders: Array<{\r\n        orderList: { id: string };\r\n        itemCount: number;\r\n        supplier: string;\r\n      }> = [];\r\n\r\n      // Create separate order lists per supplier\r\n      for (const [supplierName, items] of ordersBySupplier) {\r\n        const practiceId = currentPracticeId.value;\r\n        if (!practiceId) {\r\n          throw new Error('Geen praktijk geselecteerd');\r\n        }\r\n\r\n        const orderData: OrderListInsert = {\r\n          practice_id: practiceId,\r\n          location_id: 'default',\r\n          name: `Auto-order ${supplierName} - ${new Date().toLocaleDateString()}`,\r\n          description: `Automatisch gegenereerde bestelling gebaseerd op min/max niveaus`,\r\n          status: 'draft',\r\n          supplier_id: null,\r\n          total_items: items.length,\r\n          total_cost: items.reduce(\r\n            (sum, item) =>\r\n              sum +\r\n              item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\r\n            0\r\n          ),\r\n          created_by: null,\r\n        };\r\n\r\n        const { data: newOrderList, error: orderError } = await supabase\r\n          .from('order_lists')\r\n          .insert(orderData)\r\n          .select()\r\n          .single();\r\n\r\n        if (orderError) throw orderError;\r\n\r\n        const orderItems: OrderListItemInsert[] = items.map(item => ({\r\n          order_list_id: newOrderList.id,\r\n          product_id: item.product_id,\r\n          supplier_product_id: item.preferred_supplier_id ?? null,\r\n          suggested_quantity: item.calculated_order_quantity,\r\n          ordered_quantity: item.calculated_order_quantity,\r\n          unit_price: item.preferred_unit_price ?? 0,\r\n          total_price:\r\n            item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\r\n          status: 'pending',\r\n          notes: `Auto-suggested: ${item.stock_status}`,\r\n        }));\r\n\r\n        const { error: itemsError } = await supabase\r\n          .from('order_list_items')\r\n          .insert(orderItems);\r\n\r\n        if (itemsError) throw itemsError;\r\n\r\n        createdOrders.push({\r\n          orderList: newOrderList,\r\n          itemCount: items.length,\r\n          supplier: supplierName,\r\n        });\r\n\r\n        log.info(\r\n          `✅ Created order for ${supplierName} with ${items.length} items`\r\n        );\r\n      }\r\n\r\n      return createdOrders;\r\n    } catch (error) {\r\n      log.error('Error creating orders from advice', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateMinMaxLevels = async (\r\n    itemId: string,\r\n    minStock: number,\r\n    maxStock: number,\r\n    reorderPoint?: number\r\n  ) => {\r\n    try {\r\n      const updateData = {\r\n        minimum_stock: minStock,\r\n        maximum_stock: maxStock,\r\n        reorder_point: reorderPoint || minStock * 1.2,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      const { error } = await supabase\r\n        .from('order_list_items')\r\n        .update(updateData)\r\n        .eq('id', itemId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state\r\n      const item = reorderSuggestions.value.find(s => s.id === itemId);\r\n      if (item) {\r\n        item.minimum_stock = minStock;\r\n        item.maximum_stock = maxStock;\r\n        item.reorder_point = reorderPoint || minStock * 1.2;\r\n      }\r\n\r\n      log.info(`✅ Updated min/max levels for item ${itemId}`);\r\n    } catch (error) {\r\n      log.error('Error updating min/max levels', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    // State\r\n    reorderSuggestions,\r\n    loading,\r\n    lastCalculationAt,\r\n    currentPracticeId,\r\n\r\n    // Computed\r\n    orderAdvice,\r\n    criticalItemsCount,\r\n    itemsBelowMinimum,\r\n\r\n    // Actions\r\n    refreshReorderSuggestions,\r\n    updateStockLevel,\r\n    createOrdersFromAdvice,\r\n    updateMinMaxLevels,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-realtime.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresInsertPayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresUpdatePayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimePostgresDeletePayload' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RealtimeEventType' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 45,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrderListItemRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StockLevelRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 52,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierOrderRecord' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, onUnmounted } from 'vue';\r\nimport { realtimeService } from '@/boot/supabase';\r\nimport { createLogger } from '@/utils/logger';\r\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\r\nimport type { OrderListWithItems } from '@/types/stores';\r\nimport type {\r\n  RealtimePostgresChangesPayload,\r\n  RealtimePostgresInsertPayload,\r\n  RealtimePostgresUpdatePayload,\r\n  RealtimePostgresDeletePayload,\r\n} from '@supabase/supabase-js';\r\nimport type { Tables } from '@/types';\r\nimport type { RealtimeChannel } from '@supabase/supabase-js';\r\n\r\nconst orderLoggerWithContext = createLogger('OrderListsRealtime');\r\nconst infoLog = (message: string, data?: Record<string, unknown>): void =>\r\n  data\r\n    ? orderLoggerWithContext.structured(message, data)\r\n    : orderLoggerWithContext.info(message);\r\nconst errorLog = (\r\n  message: string,\r\n  data?: Record<string, unknown>\r\n): void =>\r\n  data\r\n    ? orderLoggerWithContext.structured(message, data)\r\n    : orderLoggerWithContext.error(message);\r\n\r\nexport function useOrderListsRealtime() {\r\n  // Event emitter for store communication\r\n  const eventEmitter = createEventEmitter('order-lists-realtime');\r\n\r\n  // Real-time state\r\n  const realtimeConnected = ref(false);\r\n  const orderListsChannel = ref<RealtimeChannel | null>(null);\r\n  const orderListItemsChannel = ref<RealtimeChannel | null>(null);\r\n  const stockLevelsChannel = ref<RealtimeChannel | null>(null);\r\n  const supplierOrdersChannel = ref<RealtimeChannel | null>(null);\r\n  const lastSyncAt = ref<Date | null>(null);\r\n\r\n  // Configuration for external functions\r\n  const currentPracticeId = ref<string | null>(null);\r\n  let refreshOrderLists: ((practiceId: string) => Promise<void>) | null = null;\r\n  let refreshReorderSuggestions: ((practiceId: string) => Promise<void>) | null = null;\r\n\r\n  type RealtimeEventType = 'INSERT' | 'UPDATE' | 'DELETE';\r\n  type OrderListItemRecord = {\r\n    id: string;\r\n    minimum_stock: number | null;\r\n    maximum_stock: number | null;\r\n    current_stock: number | null;\r\n  };\r\n  type StockLevelRecord = {\r\n    product_id: string;\r\n    location_id: string;\r\n    current_quantity: number;\r\n    minimum_quantity: number | null;\r\n  };\r\n  type SupplierOrderRecord = {\r\n    id: string;\r\n    status: string;\r\n  };\r\n\r\n  type OrderListPayload = RealtimePostgresChangesPayload<Tables<'order_lists'>>;\r\n  type OrderListItemPayload = RealtimePostgresChangesPayload<Tables<'order_list_items'>>;\r\n  type StockLevelPayload = RealtimePostgresChangesPayload<Tables<'stock_levels'>>;\r\n  type SupplierOrderPayload = RealtimePostgresChangesPayload<Tables<'supplier_orders'>>;\r\n\r\n  // Real-time functions\r\n  const startRealtimeSubscriptions = (practiceId: string) => {\r\n    infoLog('Realtime: starting subscriptions', { practiceId });\r\n\r\n    try {\r\n      // Subscribe to order lists changes\r\n      orderListsChannel.value = realtimeService.subscribeToOrderLists(\r\n        practiceId,\r\n        handleOrderListChange\r\n      );\r\n\r\n      orderListItemsChannel.value = realtimeService.subscribeToOrderListItems(\r\n        handleOrderListItemChange\r\n      );\r\n\r\n      stockLevelsChannel.value = realtimeService.subscribeToStockLevels(\r\n        practiceId,\r\n        handleStockLevelChange\r\n      );\r\n\r\n      supplierOrdersChannel.value =\r\n        realtimeService.subscribeToSupplierOrders(handleSupplierOrderChange);\r\n\r\n      realtimeConnected.value = true;\r\n      infoLog('Realtime: subscriptions started');\r\n    } catch (error) {\r\n      errorLog('❌ Failed to start real-time subscriptions', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      realtimeConnected.value = false;\r\n    }\r\n  };\r\n\r\n  const stopRealtimeSubscriptions = async () => {\r\n    infoLog('Realtime: stopping subscriptions');\r\n\r\n    try {\r\n      if (orderListsChannel.value) {\r\n        await realtimeService.unsubscribe(orderListsChannel.value);\r\n        orderListsChannel.value = null;\r\n      }\r\n\r\n      for (const channelRef of [\r\n        orderListItemsChannel,\r\n        stockLevelsChannel,\r\n        supplierOrdersChannel,\r\n      ]) {\r\n        if (channelRef.value) {\r\n          await realtimeService.unsubscribe(channelRef.value);\r\n          channelRef.value = null;\r\n        }\r\n      }\r\n\r\n      realtimeConnected.value = false;\r\n      infoLog('Realtime: subscriptions stopped');\r\n    } catch (error) {\r\n      errorLog('Error stopping real-time subscriptions', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Event handlers\r\n  const handleOrderListChange = async (payload: OrderListPayload) => {\r\n    const { eventType } = payload;\r\n    const newRow = payload.new as Tables<'order_lists'> | null;\r\n    const oldRow = payload.old as Tables<'order_lists'> | null;\r\n\r\n    infoLog('Realtime: order list update', {\r\n      eventType,\r\n      name: newRow?.name,\r\n    });\r\n\r\n    const practiceId = currentPracticeId.value;\r\n    if (!practiceId) return;\r\n\r\n    try {\r\n      switch (eventType) {\r\n        case 'INSERT':\r\n          if (newRow) {\r\n            infoLog('Realtime: order list created', {\r\n              name: newRow.name,\r\n            });\r\n            await eventEmitter.emit(StoreEvents.ORDER_CREATED, {\r\n              orderList: { id: newRow.id } as OrderListWithItems,\r\n              timestamp: new Date().toISOString(),\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'UPDATE':\r\n          if (newRow) {\r\n            infoLog('Realtime: order list updated', {\r\n              name: newRow.name,\r\n            });\r\n            await eventEmitter.emit(StoreEvents.ORDER_UPDATED, {\r\n              orderList: { id: newRow.id } as OrderListWithItems,\r\n              oldOrderList: oldRow ? ({ id: oldRow.id } as OrderListWithItems) : null,\r\n              timestamp: new Date().toISOString(),\r\n            });\r\n          }\r\n          break;\r\n\r\n        case 'DELETE':\r\n          if (oldRow) {\r\n            infoLog('Realtime: order list deleted', {\r\n              name: oldRow.name,\r\n            });\r\n            await eventEmitter.emit(StoreEvents.ORDER_DELETED, {\r\n              orderListId: oldRow.id,\r\n              timestamp: new Date().toISOString(),\r\n            });\r\n          }\r\n          break;\r\n      }\r\n\r\n      // Refresh order lists to get latest data\r\n      if (refreshOrderLists) {\r\n        await refreshOrderLists(practiceId);\r\n      }\r\n      await eventEmitter.emit(StoreEvents.DATA_REFRESH_COMPLETED, {\r\n        scope: 'order_lists',\r\n        practiceId,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n      lastSyncAt.value = new Date();\r\n    } catch (error) {\r\n      errorLog('Error handling order list change', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOrderListItemChange = async (payload: OrderListItemPayload) => {\r\n    const { eventType } = payload;\r\n    const newRow = payload.new as Tables<'order_list_items'> | null;\r\n    const oldRow = payload.old as Tables<'order_list_items'> | null;\r\n\r\n    infoLog('Realtime: order list item update', {\r\n      eventType,\r\n    });\r\n\r\n    const practiceId = currentPracticeId.value;\r\n    if (!practiceId) return;\r\n\r\n    try {\r\n      // When order list items change, we need to:\r\n      // 1. Refresh the affected order list\r\n      // 2. Potentially update reorder suggestions\r\n\r\n      if (eventType === 'UPDATE' && newRow && oldRow) {\r\n        // Check if min/max values changed\r\n        const minMaxChanged =\r\n          newRow.minimum_stock !== oldRow.minimum_stock ||\r\n          newRow.maximum_stock !== oldRow.maximum_stock ||\r\n          newRow.current_stock !== oldRow.current_stock;\r\n\r\n        if (minMaxChanged) {\r\n          infoLog('Realtime: inventory thresholds updated', {\r\n            itemId: newRow.id,\r\n          });\r\n          if (refreshReorderSuggestions) {\r\n            await refreshReorderSuggestions(practiceId);\r\n          }\r\n\r\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\r\n            scope: 'reorder_suggestions',\r\n            practiceId,\r\n            itemId: newRow.id,\r\n            timestamp: new Date().toISOString(),\r\n          });\r\n        }\r\n      }\r\n\r\n      // Always refresh order lists for any item change\r\n      if (refreshOrderLists) {\r\n        await refreshOrderLists(practiceId);\r\n      }\r\n      lastSyncAt.value = new Date();\r\n    } catch (error) {\r\n      errorLog('Error handling order list item change', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleStockLevelChange = async (payload: StockLevelPayload) => {\r\n    const { eventType } = payload;\r\n    const newRow = payload.new as Tables<'stock_levels'> | null;\r\n    const oldRow = payload.old as Tables<'stock_levels'> | null;\r\n\r\n    infoLog('Realtime: stock level update', {\r\n      eventType,\r\n    });\r\n\r\n    const practiceId = currentPracticeId.value;\r\n    if (!practiceId) return;\r\n\r\n    try {\r\n      if (eventType === 'UPDATE' && newRow && oldRow) {\r\n        const quantityChanged = newRow.current_quantity !== oldRow.current_quantity;\r\n\r\n        if (quantityChanged) {\r\n          infoLog('Realtime: stock quantity changed', {\r\n            productId: newRow.product_id,\r\n            locationId: newRow.location_id,\r\n          });\r\n\r\n          // Emit stock level updated event\r\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\r\n            scope: 'stock_levels',\r\n            productId: newRow.product_id,\r\n            locationId: newRow.location_id,\r\n            changeType: 'quantity_change',\r\n            timestamp: new Date().toISOString(),\r\n          });\r\n\r\n          // Check if this triggers low stock alert\r\n          const minQuantity = newRow.minimum_quantity ?? 0;\r\n          if (newRow.current_quantity <= minQuantity && oldRow.current_quantity > minQuantity) {\r\n            await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\r\n              scope: 'low_stock_alert',\r\n              productId: newRow.product_id,\r\n              locationId: newRow.location_id,\r\n              currentQuantity: newRow.current_quantity,\r\n              minimumQuantity: minQuantity,\r\n              timestamp: new Date().toISOString(),\r\n            });\r\n          }\r\n\r\n          // Refresh reorder suggestions\r\n          if (refreshReorderSuggestions) {\r\n            await refreshReorderSuggestions(practiceId);\r\n          }\r\n\r\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_COMPLETED, {\r\n            scope: 'order_suggestions',\r\n            practiceId,\r\n            itemId: newRow.product_id,\r\n            changeType: 'stock_updated',\r\n            timestamp: new Date().toISOString(),\r\n          });\r\n        }\r\n      }\r\n\r\n      lastSyncAt.value = new Date();\r\n    } catch (error) {\r\n      errorLog('Error handling stock level change', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSupplierOrderChange = async (payload: SupplierOrderPayload) => {\r\n    const { eventType } = payload;\r\n    const newRow = payload.new as Tables<'supplier_orders'> | null;\r\n    const oldRow = payload.old as Tables<'supplier_orders'> | null;\r\n\r\n    infoLog('Realtime: supplier order update', {\r\n      eventType,\r\n    });\r\n\r\n    try {\r\n      if (eventType === 'UPDATE' && newRow && oldRow) {\r\n        const statusChanged = newRow.status !== oldRow.status;\r\n\r\n        if (statusChanged) {\r\n          infoLog('Realtime: supplier order status changed', {\r\n            orderId: newRow.id,\r\n            from: oldRow.status,\r\n            to: newRow.status,\r\n          });\r\n\r\n          await eventEmitter.emit(StoreEvents.DATA_REFRESH_REQUESTED, {\r\n            scope: 'supplier_orders',\r\n            orderId: newRow.id,\r\n            oldStatus: oldRow.status,\r\n            newStatus: newRow.status,\r\n            timestamp: new Date().toISOString(),\r\n          });\r\n\r\n          if (newRow.status === 'delivered') {\r\n            infoLog('Realtime: supplier order delivered', {\r\n              orderId: newRow.id,\r\n            });\r\n\r\n            const practiceId = currentPracticeId.value;\r\n            if (practiceId) {\r\n              setTimeout(async () => {\r\n                try {\r\n                  if (refreshReorderSuggestions) {\r\n                    await refreshReorderSuggestions(practiceId);\r\n                  }\r\n                  if (refreshOrderLists) {\r\n                    await refreshOrderLists(practiceId);\r\n                  }\r\n                } catch (refreshError) {\r\n                  errorLog('Error during post-delivery refresh', {\r\n                    error:\r\n                      refreshError instanceof Error\r\n                        ? refreshError.message\r\n                        : String(refreshError),\r\n                  });\r\n                }\r\n              }, 1000);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      lastSyncAt.value = new Date();\r\n    } catch (error) {\r\n      errorLog('Error handling supplier order change', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Periodic sync function (backup for real-time)\r\n  const periodicSync = ref<ReturnType<typeof setInterval> | null>(null);\r\n\r\n  const startPeriodicSync = (practiceId: string, intervalMs = 60000) => {\r\n    stopPeriodicSync();\r\n\r\n    periodicSync.value = setInterval(async () => {\r\n      if (!realtimeConnected.value) {\r\n        infoLog(\r\n          '🔄 Periodic sync: real-time disconnected, syncing data'\r\n        );\r\n        try {\r\n          const promises = [];\r\n          if (refreshOrderLists) {\r\n            promises.push(refreshOrderLists(practiceId));\r\n          }\r\n          if (refreshReorderSuggestions) {\r\n            promises.push(refreshReorderSuggestions(practiceId));\r\n          }\r\n          await Promise.all(promises);\r\n          lastSyncAt.value = new Date();\r\n        } catch (error) {\r\n          errorLog('Periodic sync failed', {\r\n            error: error instanceof Error ? error.message : String(error),\r\n          });\r\n        }\r\n      }\r\n    }, intervalMs);\r\n\r\n    infoLog(`⏰ Started periodic sync every ${intervalMs}ms`);\r\n  };\r\n\r\n  const stopPeriodicSync = () => {\r\n    if (periodicSync.value) {\r\n      clearInterval(periodicSync.value);\r\n      periodicSync.value = null;\r\n      infoLog('⏰ Stopped periodic sync');\r\n    }\r\n  };\r\n\r\n  // Connection health monitoring\r\n  const connectionHealth = ref<'healthy' | 'warning' | 'error'>('healthy');\r\n  const lastConnectionCheck = ref<Date | null>(null);\r\n\r\n  const checkConnectionHealth = () => {\r\n    const now = new Date();\r\n    lastConnectionCheck.value = now;\r\n\r\n    if (!realtimeConnected.value) {\r\n      connectionHealth.value = 'error';\r\n      return;\r\n    }\r\n\r\n    if (lastSyncAt.value) {\r\n      const timeSinceLastSync = now.getTime() - lastSyncAt.value.getTime();\r\n      const maxSyncAge = 5 * 60 * 1000; // 5 minutes\r\n\r\n      if (timeSinceLastSync > maxSyncAge) {\r\n        connectionHealth.value = 'warning';\r\n        infoLog(\r\n          '⚠️ Real-time connection health warning: no sync in 5+ minutes'\r\n        );\r\n      } else {\r\n        connectionHealth.value = 'healthy';\r\n      }\r\n    }\r\n  };\r\n\r\n  // Start health monitoring\r\n  const healthCheckInterval = setInterval(checkConnectionHealth, 30000); // Every 30 seconds\r\n\r\n  // Cleanup\r\n  onUnmounted(() => {\r\n    void stopRealtimeSubscriptions();\r\n    stopPeriodicSync();\r\n    clearInterval(healthCheckInterval);\r\n  });\r\n\r\n  // Setup and teardown functions for external configuration\r\n  const setupRealtime = (config: {\r\n    practiceId: string;\r\n    refreshOrderListsFn: (practiceId: string) => Promise<void>;\r\n    refreshReorderSuggestionsFn: (practiceId: string) => Promise<void>;\r\n    enablePeriodicSync?: boolean;\r\n    syncIntervalMs?: number;\r\n  }) => {\r\n    infoLog('🚀 Setting up real-time order lists system');\r\n\r\n    // Configure external functions\r\n    currentPracticeId.value = config.practiceId;\r\n    refreshOrderLists = config.refreshOrderListsFn;\r\n    refreshReorderSuggestions = config.refreshReorderSuggestionsFn;\r\n\r\n    // Start real-time subscriptions\r\n    startRealtimeSubscriptions(config.practiceId);\r\n\r\n    // Start periodic sync if enabled\r\n    if (config.enablePeriodicSync !== false) {\r\n      startPeriodicSync(config.practiceId, config.syncIntervalMs);\r\n    }\r\n\r\n    infoLog('✅ Real-time order lists system configured');\r\n  };\r\n\r\n  const teardownRealtime = () => {\r\n    infoLog('🛑 Tearing down real-time order lists system');\r\n\r\n    stopRealtimeSubscriptions();\r\n    stopPeriodicSync();\r\n\r\n    // Clear configuration\r\n    currentPracticeId.value = null;\r\n    refreshOrderLists = null;\r\n    refreshReorderSuggestions = null;\r\n\r\n    infoLog('✅ Real-time order lists system torn down');\r\n  };\r\n\r\n  return {\r\n    // State\r\n    realtimeConnected,\r\n    lastSyncAt,\r\n    connectionHealth,\r\n    lastConnectionCheck,\r\n\r\n    // Actions\r\n    startRealtimeSubscriptions,\r\n    stopRealtimeSubscriptions,\r\n    startPeriodicSync,\r\n    stopPeriodicSync,\r\n    checkConnectionHealth,\r\n    setupRealtime,\r\n    teardownRealtime,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\orderLists\\orderLists-supplier-splitting.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'orderLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { orderLogger, createLogger } from '@/utils/logger';\r\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\r\nimport type { ReorderSuggestion } from './orderLists-minmax';\r\nimport type { UrgencyLevel } from '@/types/inventory';\r\n\r\nconst normalizeUrgency = (value: string | null | undefined): UrgencyLevel => {\r\n  switch (value) {\r\n    case 'critical':\r\n    case 'high':\r\n    case 'medium':\r\n    case 'low':\r\n      return value;\r\n    default:\r\n      return 'low';\r\n  }\r\n};\r\n\r\nexport interface SupplierOrder {\r\n  practice_id: string;\r\n  location_id: string;\r\n  supplier_id: string;\r\n  supplier_name: string;\r\n  supplier_code: string;\r\n  items: OrderItemForSupplier[];\r\n  total_items: number;\r\n  total_cost: number;\r\n  estimated_delivery_date: string;\r\n  earliest_delivery_date: string;\r\n  latest_delivery_date: string;\r\n  order_method: 'email' | 'api' | 'pdf' | 'manual';\r\n  minimum_order_amount: number;\r\n  shipping_cost: number;\r\n  free_shipping_threshold: number;\r\n  payment_terms: number;\r\n  lead_time_days: number;\r\n}\r\n\r\nexport interface OrderItemForSupplier {\r\n  product_id: string;\r\n  product_name: string;\r\n  product_sku: string;\r\n  supplier_sku: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  total_price: number;\r\n  minimum_order_quantity: number | null;\r\n  order_multiple: number | null;\r\n  urgency_level: UrgencyLevel;\r\n  notes?: string | null;\r\n}\r\n\r\nexport interface SplitOrderResult {\r\n  supplier_orders: SupplierOrder[];\r\n  items_without_supplier: OrderItemForSupplier[];\r\n  total_suppliers: number;\r\n  total_estimated_cost: number;\r\n  earliest_delivery_date: string;\r\n  latest_delivery_date: string;\r\n  shipping_optimization_suggestions: string[];\r\n}\r\n\r\nexport interface OrderSendingResult {\r\n  supplier_id: string;\r\n  supplier_name: string;\r\n  status: 'success' | 'failed' | 'pending';\r\n  method_used: string;\r\n  order_reference?: string;\r\n  tracking_info?: Record<string, unknown>;\r\n  error_message?: string;\r\n  sent_at?: string;\r\n  delivery_expected?: string;\r\n}\r\n\r\nconst supplierLog = createLogger('SupplierSplit');\r\nconst infoLog = (message: string, data?: Record<string, unknown>): void =>\r\n  data ? supplierLog.structured(message, data) : supplierLog.info(message);\r\nconst warnLog = (message: string, data?: Record<string, unknown>): void =>\r\n  data ? supplierLog.structured(message, data) : supplierLog.warn(message);\r\nconst errorLog = (message: string, data?: Record<string, unknown>): void =>\r\n  data ? supplierLog.structured(message, data) : supplierLog.error(message);\r\n\r\nexport function useOrderListsSupplierSplitting() {\r\n  // Event emitter for store communication\r\n  const eventEmitter = createEventEmitter('order-lists-supplier-splitting');\r\n\r\n  // State\r\n  const splittingProgress = ref<{\r\n    current: number;\r\n    total: number;\r\n    status: string;\r\n  } | null>(null);\r\n  const sendingProgress = ref<{\r\n    current: number;\r\n    total: number;\r\n    status: string;\r\n  } | null>(null);\r\n\r\n  // Actions\r\n  const splitOrderBySuppliers = async (\r\n    items: ReorderSuggestion[]\r\n  ): Promise<SplitOrderResult> => {\r\n    splittingProgress.value = {\r\n      current: 0,\r\n      total: items.length,\r\n      status: 'Analyzing items...',\r\n    };\r\n\r\n    try {\r\n      infoLog('Starting supplier splitting', {\r\n        itemCount: items.length,\r\n      });\r\n\r\n      // Get all suppliers involved\r\n      const supplierIds = [\r\n        ...new Set(\r\n          items.map(item => item.preferred_supplier_name).filter(Boolean)\r\n        ),\r\n      ];\r\n\r\n      splittingProgress.value = {\r\n        current: 10,\r\n        total: 100,\r\n        status: 'Fetching supplier details...',\r\n      };\r\n\r\n      // Fetch full supplier details\r\n      const { error: suppliersError } = await supabase\r\n        .from('suppliers')\r\n        .select('id')\r\n        .in('name', supplierIds);\r\n\r\n      if (suppliersError) throw suppliersError;\r\n\r\n      splittingProgress.value = {\r\n        current: 30,\r\n        total: 100,\r\n        status: 'Fetching supplier products...',\r\n      };\r\n\r\n      // Fetch supplier-specific product details\r\n      const productIds = items.map(item => item.product_id);\r\n      const { data: supplierProducts, error: supplierProductsError } =\r\n        await supabase\r\n          .from('supplier_products')\r\n          .select(\r\n            `\r\n          *,\r\n          supplier:suppliers(id, name, code, order_method, minimum_order_amount, shipping_cost, free_shipping_threshold, payment_terms),\r\n          product:products(id, name, sku)\r\n        `\r\n          )\r\n          .in('product_id', productIds);\r\n\r\n      if (supplierProductsError) throw supplierProductsError;\r\n\r\n      splittingProgress.value = {\r\n        current: 50,\r\n        total: 100,\r\n        status: 'Creating supplier orders...',\r\n      };\r\n\r\n      const supplierOrdersMap = new Map<string, SupplierOrder>();\r\n      const itemsWithoutSupplier: OrderItemForSupplier[] = [];\r\n\r\n      // Process each item\r\n      for (let i = 0; i < items.length; i++) {\r\n        const item = items[i];\r\n        if (!item) {\r\n          continue;\r\n        }\r\n        splittingProgress.value = {\r\n          current: 50 + (i / items.length) * 40,\r\n          total: 100,\r\n          status: `Processing ${item.product_name}...`,\r\n        };\r\n\r\n        // Find supplier product details\r\n        const supplierProduct = (supplierProducts ?? []).find(\r\n          sp =>\r\n            sp.product_id === item.product_id &&\r\n            sp.supplier?.name === item.preferred_supplier_name\r\n        );\r\n\r\n        if (!supplierProduct || !supplierProduct.supplier) {\r\n          // Item has no supplier assignment\r\n          itemsWithoutSupplier.push({\r\n            product_id: item.product_id,\r\n            product_name: item.product_name,\r\n            product_sku: item.product_sku,\r\n            supplier_sku: '',\r\n            quantity: item.calculated_order_quantity,\r\n            unit_price: item.preferred_unit_price ?? 0,\r\n            total_price:\r\n              item.calculated_order_quantity * (item.preferred_unit_price ?? 0),\r\n            minimum_order_quantity: 1,\r\n            order_multiple: 1,\r\n            urgency_level: normalizeUrgency(item.urgency_level),\r\n          notes: 'No supplier assigned',\r\n          });\r\n          continue;\r\n        }\r\n\r\n        const supplier = supplierProduct.supplier;\r\n        const supplierId = supplier.id;\r\n\r\n        // Initialize supplier order if not exists\r\n        if (!supplierOrdersMap.has(supplierId)) {\r\n          const estimatedDeliveryDate = new Date();\r\n          estimatedDeliveryDate.setDate(\r\n            estimatedDeliveryDate.getDate() + (supplierProduct.lead_time_days ?? 7)\r\n          );\r\n\r\n        supplierOrdersMap.set(supplierId, {\r\n          practice_id: item.practice_id,\r\n          location_id: item.location_id ?? '',\r\n          supplier_id: supplierId,\r\n          supplier_name: supplier.name,\r\n          supplier_code: supplier.code ?? supplierId,\r\n          items: [],\r\n          total_items: 0,\r\n          total_cost: 0,\r\n          estimated_delivery_date: estimatedDeliveryDate\r\n            .toISOString()\r\n            .split('T')[0] ?? '',\r\n          earliest_delivery_date: estimatedDeliveryDate\r\n            .toISOString()\r\n            .split('T')[0] ?? '',\r\n          latest_delivery_date: estimatedDeliveryDate\r\n            .toISOString()\r\n            .split('T')[0] ?? '',\r\n          order_method: (supplier.order_method as SupplierOrder['order_method']) ?? 'manual',\r\n          minimum_order_amount: supplier.minimum_order_amount ?? 0,\r\n          shipping_cost: supplier.shipping_cost ?? 0,\r\n          free_shipping_threshold: supplier.free_shipping_threshold ?? 0,\r\n          payment_terms: supplier.payment_terms ?? 30,\r\n          lead_time_days: supplierProduct.lead_time_days ?? 7,\r\n        });\r\n        }\r\n\r\n        const supplierOrder = supplierOrdersMap.get(supplierId);\r\n        if (!supplierOrder) {\r\n          warnLog('Supplier order missing after initialization', {\r\n            supplierId,\r\n          });\r\n          continue;\r\n        }\r\n\r\n        const earliestDate = new Date();\r\n        earliestDate.setDate(\r\n          earliestDate.getDate() + (supplierProduct.lead_time_days ?? 7)\r\n        );\r\n\r\n        const latestDate = new Date(earliestDate);\r\n        latestDate.setDate(latestDate.getDate() + 3);\r\n\r\n        supplierOrder.earliest_delivery_date = earliestDate\r\n          .toISOString()\r\n          .split('T')[0];\r\n\r\n        supplierOrder.latest_delivery_date = latestDate\r\n          .toISOString()\r\n          .split('T')[0];\r\n\r\n        // Adjust quantity based on supplier constraints\r\n        let adjustedQuantity = item.calculated_order_quantity;\r\n\r\n        // Apply minimum order quantity\r\n        if (\r\n          supplierProduct.minimum_order_quantity !== null &&\r\n          supplierProduct.minimum_order_quantity !== undefined &&\r\n          adjustedQuantity < supplierProduct.minimum_order_quantity\r\n        ) {\r\n          adjustedQuantity = supplierProduct.minimum_order_quantity;\r\n        }\r\n\r\n        // Apply order multiple\r\n        if (\r\n          supplierProduct.order_multiple !== null &&\r\n          supplierProduct.order_multiple !== undefined &&\r\n          supplierProduct.order_multiple > 1\r\n        ) {\r\n          adjustedQuantity =\r\n            Math.ceil(adjustedQuantity / supplierProduct.order_multiple) *\r\n            supplierProduct.order_multiple;\r\n        }\r\n\r\n      const orderItem: OrderItemForSupplier = {\r\n          product_id: item.product_id,\r\n          product_name: item.product_name,\r\n          product_sku: item.product_sku,\r\n          supplier_sku: supplierProduct.supplier_sku || '',\r\n          quantity: adjustedQuantity,\r\n          unit_price: supplierProduct.cost_price ?? item.preferred_unit_price ?? 0,\r\n          total_price:\r\n            adjustedQuantity * (supplierProduct.cost_price ?? item.preferred_unit_price ?? 0),\r\n          minimum_order_quantity: supplierProduct.minimum_order_quantity ?? 1,\r\n          order_multiple: supplierProduct.order_multiple ?? 1,\r\n          urgency_level: normalizeUrgency(item.urgency_level),\r\n          notes:\r\n            adjustedQuantity !== item.calculated_order_quantity\r\n              ? `Adjusted from ${item.calculated_order_quantity} due to supplier constraints`\r\n              : null,\r\n        } satisfies OrderItemForSupplier;\r\n\r\n        supplierOrder.items.push(orderItem);\r\n        supplierOrder.total_items += 1;\r\n        supplierOrder.total_cost += orderItem.total_price;\r\n      }\r\n\r\n      splittingProgress.value = {\r\n        current: 90,\r\n        total: 100,\r\n        status: 'Optimizing orders...',\r\n      };\r\n\r\n      // Convert map to array and optimize\r\n      const supplierOrders = Array.from(supplierOrdersMap.values());\r\n      const totalCost = supplierOrders.reduce(\r\n        (sum, order) => sum + order.total_cost,\r\n        0\r\n      );\r\n\r\n      const deliveryTimes = supplierOrders\r\n        .map(order => Date.parse(order.estimated_delivery_date))\r\n        .filter(time => Number.isFinite(time));\r\n\r\n      const fallbackDate = new Date().toISOString().split('T')[0];\r\n      const earliestDelivery = deliveryTimes.length\r\n        ? new Date(Math.min(...deliveryTimes)).toISOString().split('T')[0]\r\n        : fallbackDate;\r\n\r\n      const latestDelivery = deliveryTimes.length\r\n        ? new Date(Math.max(...deliveryTimes)).toISOString().split('T')[0]\r\n        : fallbackDate;\r\n\r\n      infoLog('Supplier splitting completed', {\r\n        supplierCount: supplierOrders.length,\r\n        withoutSupplier: itemsWithoutSupplier.length,\r\n        totalCost,\r\n        earliestDelivery,\r\n        latestDelivery,\r\n      });\r\n\r\n      return {\r\n        supplier_orders: supplierOrders,\r\n        items_without_supplier: itemsWithoutSupplier,\r\n        total_suppliers: supplierOrders.length,\r\n        total_estimated_cost: totalCost,\r\n        earliest_delivery_date: earliestDelivery,\r\n        latest_delivery_date: latestDelivery,\r\n        shipping_optimization_suggestions: [],\r\n      };\r\n    } catch (error) {\r\n      splittingProgress.value = null;\r\n      errorLog('Error splitting order by suppliers', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const sendOrdersToSuppliers = async (\r\n    supplierOrders: SupplierOrder[]\r\n  ): Promise<OrderSendingResult[]> => {\r\n    sendingProgress.value = {\r\n      current: 0,\r\n      total: supplierOrders.length,\r\n      status: 'Preparing to send orders...',\r\n    };\r\n\r\n    const results: OrderSendingResult[] = [];\r\n\r\n    try {\r\n      for (let i = 0; i < supplierOrders.length; i++) {\r\n        const order = supplierOrders[i];\r\n        if (!order) {\r\n          continue;\r\n        }\r\n        sendingProgress.value = {\r\n          current: i,\r\n          total: supplierOrders.length,\r\n          status: `Sending order to ${order.supplier_name}...`,\r\n        };\r\n\r\n        try {\r\n          const result = await sendOrderToSupplier(order);\r\n          results.push(result);\r\n\r\n          infoLog('Order sent to supplier', {\r\n            supplier: order.supplier_name,\r\n            method: result.method_used,\r\n          });\r\n        } catch (error) {\r\n          const failedResult: OrderSendingResult = {\r\n            supplier_id: order.supplier_id,\r\n            supplier_name: order.supplier_name,\r\n            status: 'failed',\r\n            method_used: order.order_method,\r\n            error_message:\r\n              error instanceof Error ? error.message : 'Unknown error',\r\n            sent_at: new Date().toISOString(),\r\n            delivery_expected: order.estimated_delivery_date,\r\n          };\r\n          results.push(failedResult);\r\n\r\n          errorLog('Failed to send order to supplier', {\r\n            supplier: order.supplier_name,\r\n            error: error instanceof Error ? error.message : String(error),\r\n          });\r\n        }\r\n\r\n        if (i < supplierOrders.length - 1) {\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n        }\r\n      }\r\n\r\n      sendingProgress.value = {\r\n        current: supplierOrders.length,\r\n        total: supplierOrders.length,\r\n        status: 'All orders processed!',\r\n      };\r\n\r\n      const successCount = results.filter(r => r.status === 'success').length;\r\n      const failedCount = results.filter(r => r.status === 'failed').length;\r\n\r\n      await eventEmitter.emit(StoreEvents.ORDERS_SENT_TO_SUPPLIERS, {\r\n        totalOrders: supplierOrders.length,\r\n        successCount,\r\n        failedCount,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n\r\n      setTimeout(() => {\r\n        sendingProgress.value = null;\r\n      }, 3000);\r\n\r\n      return results;\r\n    } catch (error) {\r\n      sendingProgress.value = null;\r\n      errorLog('Error sending orders to suppliers', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const sendOrderToSupplier = async (\r\n    order: SupplierOrder\r\n  ): Promise<OrderSendingResult> => {\r\n    const orderReference = `ORD-${Date.now()}-${order.supplier_code}`;\r\n\r\n    switch (order.order_method) {\r\n      case 'api':\r\n        return sendOrderViaAPI(order, orderReference);\r\n      case 'email':\r\n        return sendOrderViaEmail(order, orderReference);\r\n      case 'pdf':\r\n        return sendOrderViaPDF(order, orderReference);\r\n      default:\r\n        return {\r\n          supplier_id: order.supplier_id,\r\n          supplier_name: order.supplier_name,\r\n          status: 'pending',\r\n          method_used: 'manual',\r\n          order_reference: orderReference,\r\n          sent_at: new Date().toISOString(),\r\n        };\r\n    }\r\n  };\r\n\r\n  const sendOrderViaAPI = async (\r\n    order: SupplierOrder,\r\n    orderReference: string\r\n  ): Promise<OrderSendingResult> => {\r\n    const { apiService } = await import(\r\n      '@/services/supplierIntegration/apiService'\r\n    );\r\n    return apiService.sendOrderViaAPI(order, orderReference);\r\n  };\r\n\r\n  const sendOrderViaEmail = async (\r\n    order: SupplierOrder,\r\n    orderReference: string\r\n  ): Promise<OrderSendingResult> => {\r\n    // For email orders, we use the PDF service which sends via email\r\n    const { pdfService } = await import(\r\n      '@/services/supplierIntegration/pdfService'\r\n    );\r\n    return pdfService.sendOrderViaPDF(order, orderReference);\r\n  };\r\n\r\n  const sendOrderViaPDF = async (\r\n    order: SupplierOrder,\r\n    orderReference: string\r\n  ): Promise<OrderSendingResult> => {\r\n    const { pdfService } = await import(\r\n      '@/services/supplierIntegration/pdfService'\r\n    );\r\n    return pdfService.sendOrderViaPDF(order, orderReference);\r\n  };\r\n\r\n  // Helper functions - removed as they are now handled by dedicated services\r\n\r\n  return {\r\n    // State\r\n    splittingProgress,\r\n    sendingProgress,\r\n\r\n    // Actions\r\n    splitOrderBySuppliers,\r\n    sendOrdersToSuppliers,\r\n    sendOrderToSupplier,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-cart.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-core.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'productLogger' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Database' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AnalyticsSummary' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SupplierProductView' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'warnLog' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 47,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'determineStockStatus' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 226,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 226,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { ref, computed, onUnmounted } from 'vue';\r\nimport { supabase } from '@/boot/supabase';\r\nimport { productLogger, createLogger } from '@/utils/logger';\r\nimport { createEventEmitter, StoreEvents } from '@/utils/eventBus';\r\nimport type { UserLoggedInPayload } from '@/types/events';\r\nimport { useApiCache } from '@/composables/useCache';\r\nimport type {\r\n  ProductRow,\r\n  ProductWithStock,\r\n  ProductCategory,\r\n  ProductFilter,\r\n  StockLevelRow,\r\n} from '@/types/inventory';\r\nimport type { Database } from '@/types';\r\nimport type { AnalyticsSummary } from '@/types/analytics';\r\nimport type { SupplierProductRow, SupplierProductView } from '@/types/supplier';\r\n\r\n// RPC response interface for get_products_with_stock_levels\r\n\r\nexport function useProductsCore() {\r\n  // Event emitter for store communication\r\n  const eventEmitter = createEventEmitter('products-core');\r\n\r\n  // ✅ PERFORMANCE OPTIMIZATION: API Cache for faster data loading\r\n  const cache = useApiCache();\r\n\r\n  // Current practice ID (from auth events)\r\n  const currentPracticeId = ref<string | null>(null);\r\n\r\n  // State\r\n  const products = ref<ProductWithStock[]>([]);\r\n  const categories = ref<ProductCategory[]>([]);\r\n  const loading = ref(false);\r\n  const lastSyncAt = ref<Date | null>(null);\r\n  const filters = ref<ProductFilter>({\r\n    search: '',\r\n    category: '',\r\n    supplier: '',\r\n    stock_status: 'all',\r\n    sort_by: 'name',\r\n    sort_order: 'asc',\r\n  });\r\n\r\n  const productLog = createLogger('Products');\r\n  const infoLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.info(message);\r\n  const warnLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.warn(message);\r\n  const errorLog = (message: string, data?: Record<string, unknown>): void =>\r\n    data ? productLog.structured(message, data) : productLog.error(message);\r\n\r\n  // Set up event listeners for auth changes\r\n  const unsubscribeAuth = eventEmitter.on<UserLoggedInPayload>(\r\n    StoreEvents.USER_LOGGED_IN,\r\n    async data => {\r\n      currentPracticeId.value = data.clinicId ?? null;\r\n      infoLog('Auth changed, auto-loading products', {\r\n        clinicId: data.clinicId,\r\n      });\r\n\r\n      if (data.clinicId) {\r\n        await fetchProducts(data.clinicId);\r\n      }\r\n    }\r\n  );\r\n\r\n  const unsubscribeLogout = eventEmitter.on(StoreEvents.USER_LOGGED_OUT, () => {\r\n    currentPracticeId.value = null;\r\n    products.value = [];\r\n    categories.value = [];\r\n    errorLog('User logged out, product data cleared');\r\n  });\r\n\r\n  // Clean up listeners\r\n  onUnmounted(() => {\r\n    unsubscribeAuth();\r\n    unsubscribeLogout();\r\n  });\r\n\r\n  // Core getters\r\n  const productStats = computed(() => {\r\n    const stats = {\r\n      total: products.value.length,\r\n      inStock: 0,\r\n      lowStock: 0,\r\n      outOfStock: 0,\r\n    };\r\n\r\n    products.value.forEach(product => {\r\n      const totalStock =\r\n        product.stockLevels?.reduce(\r\n          (sum, level) => sum + level.currentQuantity,\r\n          0\r\n        ) ?? 0;\r\n      const minimumStock = 0;\r\n\r\n      if (totalStock > minimumStock) {\r\n        stats.inStock += 1;\r\n      } else if (totalStock > 0) {\r\n        stats.lowStock += 1;\r\n      } else {\r\n        stats.outOfStock += 1;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  });\r\n\r\n  const availableCategories = computed(() => {\r\n    const categorySet = new Set(\r\n      products.value.map(p => p.category).filter(Boolean)\r\n    );\r\n    return Array.from(categorySet).sort();\r\n  });\r\n\r\n  const availableCountries = computed(() => {\r\n    const countrySet = new Set(\r\n      products.value.map(p => p.countryOfOrigin).filter(Boolean)\r\n    );\r\n    return Array.from(countrySet).sort();\r\n  });\r\n\r\n  const availableGpcCodes = computed(() => {\r\n    const gpcSet = new Set(\r\n      products.value\r\n        .map(p => p.gpcBrickCode)\r\n        .filter((code): code is string => Boolean(code))\r\n    );\r\n    return Array.from(gpcSet).sort();\r\n  });\r\n\r\n  const availableLifecycleStatuses = computed(() => {\r\n    const statusSet = new Set(\r\n      products.value\r\n        .map(p => p.lifecycleStatus)\r\n        .filter((status): status is string => Boolean(status))\r\n    );\r\n    return Array.from(statusSet).sort();\r\n  });\r\n\r\n  // Core actions\r\n  const fetchProducts = async (practiceId: string, forceRefresh = false) => {\r\n    if (loading.value) {\r\n      return;\r\n    }\r\n\r\n    const cacheKey = `products:${practiceId}`;\r\n    if (!forceRefresh) {\r\n      const cachedProducts = cache.get(cacheKey) as ProductWithStock[] | null;\r\n      if (cachedProducts && cachedProducts.length > 0) {\r\n        products.value = cachedProducts;\r\n        infoLog('Using cached products', {\r\n          practiceId,\r\n          count: cachedProducts.length,\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    loading.value = true;\r\n\r\n    try {\r\n      infoLog('Fetching products from Supabase');\r\n\r\n      const supabaseProducts = await fetchProductsFromSupabase(practiceId);\r\n      products.value = supabaseProducts as unknown as ProductWithStock[];\r\n      lastSyncAt.value = new Date();\r\n\r\n      cache.set(cacheKey, supabaseProducts, 5 * 60 * 1000);\r\n      infoLog('Products loaded successfully', {\r\n        total: supabaseProducts.length,\r\n        practiceId,\r\n      });\r\n    } catch (error) {\r\n      errorLog('Failed to fetch products', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    } finally {\r\n      loading.value = false;\r\n    }\r\n  };\r\n\r\n  const fetchProductsFromSupabase = async (\r\n    practiceId: string\r\n  ): Promise<(ProductRow & { stock_levels: StockLevelRow[] | null })[]> => {\r\n    try {\r\n      const { data: productRows, error: productsError } = await supabase\r\n        .from('products')\r\n        .select(\r\n          `\r\n          *,\r\n          stock_levels(id, practice_id, product_id, location_id, current_quantity, reserved_quantity, minimum_quantity, maximum_quantity, reorder_point, preferred_supplier_id, last_counted_at, last_movement_at, last_ordered_at),\r\n          supplier_products(id, supplier_id, supplier_name, supplier_sku, cost_price, currency, lead_time_days, is_preferred)\r\n        `\r\n        )\r\n        .eq('practice_id', practiceId);\r\n\r\n      if (productsError) {\r\n        errorLog('Fallback product query failed', {\r\n          error: productsError.message,\r\n        });\r\n        throw productsError;\r\n      }\r\n\r\n      const rows = (productRows ?? []) as Array<\r\n        ProductRow & {\r\n          stock_levels: StockLevelRow[] | null;\r\n          supplier_products: SupplierProductRow[] | null;\r\n        }\r\n      >;\r\n\r\n      infoLog('Fallback product query succeeded', {\r\n        count: rows.length,\r\n      });\r\n\r\n      return rows;\r\n    } catch (error) {\r\n      errorLog('Error fetching products from Supabase', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const determineStockStatus = (\r\n    current: number,\r\n    minimum: number\r\n  ): 'in_stock' | 'low_stock' | 'out_of_stock' => {\r\n    if (current <= 0) return 'out_of_stock';\r\n    if (current < minimum) return 'low_stock';\r\n    return 'in_stock';\r\n  };\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .select('category')\r\n        .not('category', 'is', null);\r\n\r\n      if (error) throw error;\r\n\r\n      const uniqueCategories = Array.from(\r\n        new Set((data ?? []).map(item => item.category).filter((cat): cat is string => Boolean(cat)))\r\n      );\r\n\r\n      categories.value = uniqueCategories.map(cat => ({\r\n        id: cat,\r\n        name: cat,\r\n        description: '',\r\n        parent_id: null,\r\n        sort_order: 0,\r\n        is_active: true,\r\n      } satisfies ProductCategory));\r\n    } catch (error) {\r\n      errorLog('Error fetching categories', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n    }\r\n  };\r\n\r\n  const refreshData = async (practiceId: string) => {\r\n    try {\r\n      await Promise.all([fetchProducts(practiceId), fetchCategories()]);\r\n    } catch (error) {\r\n      errorLog('Error refreshing product data', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // CRUD operations\r\n  const createProduct = async (productData: ProductRow) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .insert(productData)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      errorLog('Error creating product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateProduct = async (productId: string, updates: ProductRow) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('products')\r\n        .update(updates)\r\n        .eq('id', productId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      errorLog('Error updating product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteProduct = async (productId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('products')\r\n        .delete()\r\n        .eq('id', productId);\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      errorLog('Error deleting product', {\r\n        error: error instanceof Error ? error.message : String(error),\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Utility functions\r\n  const getProductById = (id: string): ProductWithStock | undefined => {\r\n    return products.value.find(p => p.id === id);\r\n  };\r\n\r\n  const getProductBySku = (sku: string): ProductWithStock | undefined => {\r\n    return products.value.find(p => p.sku === sku);\r\n  };\r\n\r\n  const requiresBatchTracking = (productId: string): boolean => {\r\n    const product = getProductById(productId);\r\n    return product?.requiresBatchTracking || false;\r\n  };\r\n\r\n  const batchTrackedProducts = computed(() => {\r\n    return products.value.filter(p => p.requiresBatchTracking);\r\n  });\r\n\r\n  const manualStockProducts = computed(() =>\r\n    products.value.filter(product => product.batchStatus === 'manual_stock')\r\n  );\r\n\r\n  return {\r\n    // State\r\n    products,\r\n    categories,\r\n    loading,\r\n    lastSyncAt,\r\n    filters,\r\n\r\n    // Getters\r\n    productStats,\r\n    availableCategories,\r\n    availableCountries,\r\n    availableGpcCodes,\r\n    availableLifecycleStatuses,\r\n    batchTrackedProducts,\r\n    manualStockProducts,\r\n\r\n    // Actions\r\n    fetchProducts,\r\n    fetchCategories,\r\n    refreshData,\r\n    createProduct,\r\n    updateProduct,\r\n    deleteProduct,\r\n    getProductById,\r\n    getProductBySku,\r\n    requiresBatchTracking,\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\products\\products-inventory.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\stores\\suppliers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\analytics.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2282, 2285], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2282, 2285], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2318, 2321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2318, 2321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export interface LowStockItemDTO {\n  productId: string;\n  productName: string;\n  currentQuantity: number;\n  minimumQuantity: number;\n  locationId?: string;\n  locationName?: string;\n  availableQuantity?: number;\n  reservedQuantity?: number;\n  preferredSupplierId?: string | null;\n  lastMovementAt?: string | null;\n  productSku?: string | null;\n  unitPrice?: number | null;\n}\n\nexport interface StockTurnoverRateDTO {\n  productId: string;\n  productName: string;\n  totalUsed: number;\n  averageStock: number;\n  turnoverRate: number;\n}\n\nexport interface TopUsedProductDTO {\n  productId: string;\n  productName: string;\n  totalUsed: number;\n  usageCount: number;\n}\n// Analytics and metrics types\nexport interface AnalyticsDateRange {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface AnalyticsSummary {\n  totalEvents: number;\n  activeUsers: number;\n  totalOrders: number;\n  productUpdates: number;\n  topEvents: [string, number][];\n  userActivity: Record<string, { count: number; lastActivity: string }>;\n  dailyActivity: Record<string, number>;\n}\n\nexport interface OrderMetrics {\n  totalOrders: number;\n  totalOrderValue: number;\n  averageOrderSize: number;\n  ordersByStatus: Record<string, number>;\n  frequentlyOrderedItems: Array<{\n    productName: string;\n    totalQuantity: number;\n    orderCount: number;\n    productId: string;\n  }>;\n  orderTrends: Record<string, number>;\n}\n\nexport interface ProductMetrics {\n  totalUpdates: number;\n  productsScanned: number;\n  lowStockAlerts: number;\n  stockEntryTrends: Record<string, number>;\n  mostUpdatedProducts: Array<{\n    productName: string;\n    updateCount: number;\n    productId: string;\n  }>;\n}\n\nexport interface UserActivityMetrics {\n  activeUsers: number;\n  totalSessions: number;\n  averageSessionDuration: number;\n  usersByRole: Record<string, number>;\n  mostActiveUsers: Array<{\n    userId: string;\n    sessionCount: number;\n    totalDuration: number;\n    practiceName?: string;\n  }>;\n  userList?: Array<{\n    userId: string;\n    activityCount: number;\n    lastActivity: string;\n    totalEvents: number;\n  }>;\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  practice_id: string;\n  user_id?: string;\n  user_email?: string;\n  action: string;\n  resource_type: string;\n  resource_id?: string;\n  old_values?: Record<string, any>;\n  new_values?: Record<string, any>;\n  ip_address?: string;\n  user_agent?: string;\n  timestamp: string;\n  success: boolean;\n  error_message?: string;\n}\n\nexport interface UsageAnalytics {\n  id: string;\n  practiceId: string;\n  userId: string | null;\n  locationId: string | null;\n  eventType: string;\n  eventData: Record<string, unknown> | null;\n  sessionId: string | null;\n  userAgent: string | null;\n  ipAddress: string | null;\n  createdAt: string;\n}\n\nexport interface AnalyticsStockLevelDTO {\n  productId: string;\n  locationId: string;\n  currentQuantity: number;\n  minimumQuantity: number;\n  reservedQuantity: number;\n  availableQuantity: number;\n  productName?: string;\n  locationName?: string;\n  preferredSupplierId?: string | null;\n  updatedAt?: string | null;\n}\n\nexport interface OrderListStatusDTO {\n  id: string;\n  practiceId: string;\n  supplierId: string | null;\n  status: string | null;\n  totalItems: number;\n  totalCost: number;\n  updatedAt: string | null;\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\events.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\filters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\i18n.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\inventory.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Json' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 1,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 55
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Tables, TablesInsert, TablesUpdate, Json } from './supabase.generated';\nimport type { Database } from './supabase.generated';\n\ntype PracticeLocationRow = Tables<'practice_locations'>;\ntype ProductRowRaw = Tables<'products'>;\ntype SupplierRowRaw = Tables<'suppliers'>;\n\nconst resolveNullableNumber = (value: number | null | undefined): number | null =>\n  typeof value === 'number' ? value : null;\n\nconst resolveRelation = <T>(maybeRelation: T | undefined | null): T | null =>\n  maybeRelation ?? null;\n\ntype ProductBatchRowWithRelations = ProductBatch & {\n  product?: ProductRowRaw | null;\n  products?: ProductRowRaw | null;\n  supplier?: SupplierRowRaw | null;\n  suppliers?: SupplierRowRaw | null;\n  location?: PracticeLocationRow | null;\n  practiceLocations?: PracticeLocationRow | null;\n  totalCost?: number | null;\n  productName?: string | null;\n  locationName?: string | null;\n  supplierName?: string | null;\n};\nexport type ProductBatchRow = ProductBatchRowWithRelations;\n\ntype StockLevelRowWithRelations = StockLevelRow & {\n  products?: ProductRowRaw | null;\n  practiceLocations?: PracticeLocationRow | null;\n  locationName?: string | null;\n  productName?: string | null;\n  stockStatus?: string | null;\n  averageConsumption?: number | null;\n  reorderRecommendation?: number | null;\n  priority?: string | null;\n};\nexport type StockLevelRowWithRelationsAlias = StockLevelRowWithRelations;\n\ninterface SimpleProductView {\n  id: string;\n  sku: string | null;\n  name: string | null;\n}\n\ninterface SimpleSupplierView {\n  id: string;\n  name: string | null;\n}\n\ninterface SimpleLocationView {\n  id: string;\n  code: string | null;\n  name: string | null;\n}\n\ninterface StockMetricsView {\n  onHand: number;\n  available: number | null;\n  reserved: number | null;\n  minimum: number | null;\n  maximum: number | null;\n  reorderPoint: number | null;\n}\n\ninterface SupplierProductView {\n  id: string;\n  supplier: SimpleSupplierView;\n  supplierSku: string | null;\n  costPrice: number | null;\n  currency: string | null;\n  leadTimeDays: number | null;\n  isPreferred: boolean | null;\n  raw: SupplierProductRow;\n}\n\nexport const mapProductBatchRowToDetails = (\n  row: ProductBatch | ProductBatchRowWithRelations\n): ProductBatchWithDetails => {\n  const withRelations: ProductBatchRowWithRelations = row;\n  const resolvedProduct =\n    resolveRelation(withRelations.product) ??\n    resolveRelation(withRelations.products);\n  const resolvedSupplier =\n    resolveRelation(withRelations.supplier) ??\n    resolveRelation(withRelations.suppliers);\n  const resolvedLocation =\n    resolveRelation(withRelations.location) ??\n    resolveRelation(withRelations.practiceLocations);\n\n  const legacy: ProductBatchLegacyView = {\n    id: row.id,\n    practice_id: row.practice_id,\n    product_id: row.product_id,\n    location_id: row.location_id,\n    supplier_id: row.supplier_id ?? null,\n    batch_number: row.batch_number,\n    expiry_date: row.expiry_date,\n    current_quantity: row.current_quantity,\n    available_quantity: row.available_quantity ?? null,\n    reserved_quantity: row.reserved_quantity ?? null,\n    unit_cost: row.unit_cost ?? null,\n    total_cost: resolveNullableNumber(withRelations.total_cost),\n    product_name: resolvedProduct?.name ?? withRelations.product_name ?? null,\n    product_sku: resolvedProduct?.sku ?? null,\n    product_category: resolvedProduct?.category ?? null,\n    location_name: resolvedLocation?.name ?? withRelations.locationName ?? null,\n    location_code: resolvedLocation?.code ?? null,\n    location_type: resolvedLocation?.location_type ?? null,\n    supplier_name: resolvedSupplier?.name ?? withRelations.supplierName ?? null,\n  };\n\n  return {\n    id: row.id,\n    practiceId: row.practice_id,\n    productId: row.product_id,\n    locationId: row.location_id,\n    supplierId: row.supplier_id ?? resolvedSupplier?.id ?? null,\n    batchNumber: row.batch_number,\n    expiryDate: row.expiry_date,\n    currentQuantity: row.current_quantity,\n    availableQuantity: row.available_quantity ?? null,\n    reservedQuantity: row.reserved_quantity ?? null,\n    unitCost: row.unit_cost ?? null,\n    totalCost: resolveNullableNumber(withRelations.total_cost),\n    productName: legacy.product_name,\n    productSku: legacy.product_sku,\n    productCategory: legacy.product_category,\n    locationName: legacy.location_name,\n    locationCode: legacy.location_code,\n    locationType: legacy.location_type,\n    supplierName: legacy.supplier_name,\n    product: resolvedProduct\n      ? {\n          id: resolvedProduct.id,\n          sku: resolvedProduct.sku ?? null,\n          name: resolvedProduct.name ?? legacy.product_name,\n        }\n      : null,\n    supplier: resolvedSupplier\n      ? {\n          id: resolvedSupplier.id,\n          name: resolvedSupplier.name ?? legacy.supplier_name,\n        }\n      : null,\n    location: resolvedLocation\n      ? {\n          id: resolvedLocation.id,\n          code: resolvedLocation.code ?? legacy.location_code,\n          name: resolvedLocation.name ?? legacy.location_name,\n        }\n      : null,\n    stock: {\n      onHand: row.current_quantity,\n      reserved: row.reserved_quantity ?? null,\n      available: row.available_quantity ?? null,\n      minimum: row.minimum_quantity ?? null,\n      maximum: row.maximum_quantity ?? null,\n      reorderPoint: row.reorder_point ?? null,\n    },\n    legacy,\n    raw: withRelations,\n  };\n};\n\nexport const mapProductBatchRowToView = (\n  row: ProductBatch | ProductBatchRowWithRelations\n): ProductBatchWithDetails => mapProductBatchRowToDetails(row);\nexport type PracticeRow = Tables<'practices'>;\nexport type PracticeInsert = TablesInsert<'practices'>;\nexport type PracticeUpdate = TablesUpdate<'practices'>;\n\nexport type Supplier = Tables<'suppliers'>;\nexport type SupplierRow = Tables<'suppliers'>;\nexport type SupplierView = SupplierRow & {\n  contact_email: string | null;\n  contact_phone: string | null;\n  contact_person: string | null;\n  address: string | null;\n  city: string | null;\n  postal_code: string | null;\n  country: string | null;\n  website: string | null;\n  payment_terms: number | null;\n  minimum_order_amount: number | null;\n  shipping_cost: number | null;\n  free_shipping_threshold: number | null;\n  api_endpoint: string | null;\n  api_type: string | null;\n  sync_enabled: boolean | null;\n  is_active: boolean | null;\n  preferred_order_day: number | null;\n  order_cutoff_time: string | null;\n};\n\nexport type SupplierInsert = TablesInsert<'suppliers'>;\nexport type SupplierUpdate = TablesUpdate<'suppliers'>;\n\nexport type SupplierProduct = Tables<'supplier_products'>;\nexport type SupplierProductRow = Tables<'supplier_products'>;\nexport type SupplierProductInsert = TablesInsert<'supplier_products'>;\nexport type SupplierProductUpdate = TablesUpdate<'supplier_products'>;\n\nexport type PracticeLocation = Tables<'practice_locations'>;\nexport type PracticeLocationInsert = TablesInsert<'practice_locations'>;\nexport type PracticeLocationUpdate = TablesUpdate<'practice_locations'>;\n\nexport type OrderAdviceResult = Database['public']['Functions']['get_order_advice']['Returns'];\n\nexport type PracticeMemberRow = Tables<'practice_members'>;\nexport type PracticeMemberInsert = TablesInsert<'practice_members'>;\nexport type PracticeMemberUpdate = TablesUpdate<'practice_members'>;\n\nexport type OrderListRow = Tables<'order_lists'>;\nexport type OrderListInsert = TablesInsert<'order_lists'>;\nexport type OrderListUpdate = TablesUpdate<'order_lists'>;\n\nexport type ProductRow = Tables<'products'>;\n\nexport type ProductBatch = Tables<'product_batches'>;\n\nexport interface ProductBatchWithDetails {\n  id: string;\n  practiceId: string;\n  productId: string;\n  locationId: string;\n  supplierId: string | null;\n  batchNumber: string;\n  expiryDate: string;\n  currentQuantity: number;\n  availableQuantity: number | null;\n  reservedQuantity: number | null;\n  unitCost: number | null;\n  totalCost: number | null;\n  productName: string | null;\n  productSku: string | null;\n  productCategory: string | null;\n  locationName: string | null;\n  locationCode: string | null;\n  locationType: string | null;\n  supplierName: string | null;\n  product: SimpleProductView | null;\n  supplier: SimpleSupplierView | null;\n  location: SimpleLocationView | null;\n  stock: StockMetricsView;\n  legacy: ProductBatchLegacyView;\n  raw?: ProductBatchRowWithRelations;\n  /** @deprecated use practiceId */\n  practice_id: string;\n  /** @deprecated use productId */\n  product_id: string;\n  /** @deprecated use locationId */\n  location_id: string;\n  /** @deprecated use supplierId */\n  supplier_id: string | null;\n  /** @deprecated use batchNumber */\n  batch_number: string;\n  /** @deprecated use expiryDate */\n  expiry_date: string;\n  /** @deprecated use currentQuantity */\n  current_quantity: number;\n  /** @deprecated use availableQuantity */\n  available_quantity: number | null;\n  /** @deprecated use reservedQuantity */\n  reserved_quantity: number | null;\n  /** @deprecated use unitCost */\n  unit_cost: number | null;\n  /** @deprecated use totalCost */\n  total_cost: number | null;\n  /** @deprecated use productName */\n  product_name: string | null;\n  /** @deprecated use productSku */\n  product_sku: string | null;\n  /** @deprecated use productCategory */\n  product_category: string | null;\n  /** @deprecated use locationName */\n  location_name: string | null;\n  /** @deprecated use locationCode */\n  location_code: string | null;\n  /** @deprecated use locationType */\n  location_type: string | null;\n  /** @deprecated use supplierName */\n  supplier_name: string | null;\n}\n\nexport interface ProductBatchLegacyView {\n  /** @deprecated use camelCase fields */\n  id: string;\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  supplier_id: string | null;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  available_quantity: number | null;\n  reserved_quantity: number | null;\n  unit_cost: number | null;\n  total_cost: number | null;\n  product_name: string | null;\n  product_sku: string | null;\n  product_category: string | null;\n  location_name: string | null;\n  location_code: string | null;\n  location_type: string | null;\n  supplier_name: string | null;\n}\n\nexport type ProductBatchWithDetailsView = ProductBatchWithDetails & {\n  days_until_expiry: number | null;\n  daysUntilExpiry: number | null;\n  urgency_level?: ExpiryUrgencyLevel;\n  urgencyLevel?: ExpiryUrgencyLevel;\n};\n\nexport interface BatchMovement {\n  batch_id: string;\n  batch_number: string;\n  quantity_used: number;\n  expiry_date: string;\n}\n\nexport interface FifoBatch {\n  batch_id: string;\n  batch_number: string;\n  available_quantity: number;\n  expiry_date: string;\n  use_quantity: number;\n}\n\nexport interface ExpiringBatch {\n  batch_id: string;\n  product_id: string;\n  product_name: string;\n  product_sku: string;\n  location_id: string;\n  location_name: string;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  days_until_expiry: number;\n  urgency_level: 'normal' | 'warning' | 'critical' | 'expired';\n}\n\nexport type StockLevelRow = Tables<'stock_levels'>;\n\nexport interface StockLevelView {\n  id: string;\n  practiceId: string;\n  productId: string;\n  locationId: string;\n  currentQuantity: number;\n  availableQuantity: number;\n  reservedQuantity: number;\n  minimumQuantity: number;\n  maximumQuantity: number | null;\n  reorderPoint: number | null;\n  preferredSupplierId: string | null;\n  preferredSupplierName: string | null;\n  lastCountedAt: string | null;\n  lastMovementAt: string | null;\n  lastOrderedAt: string | null;\n  locationName: string | null;\n  productName: string | null;\n  stockStatus: string | null;\n  averageConsumption: number | null;\n  reorderRecommendation: number | null;\n  priority: string | null;\n  createdAt: string | null;\n  updatedAt: string | null;\n  legacy: StockLevelLegacyView;\n  raw?: StockLevelRowWithRelations;\n}\n\nexport interface StockLevelLegacyView {\n  /** @deprecated use camelCase fields */\n  id: string;\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  current_quantity: number;\n  available_quantity: number;\n  reserved_quantity: number;\n  minimum_quantity: number;\n  maximum_quantity: number | null;\n  reorder_point: number | null;\n  preferred_supplier_id: string | null;\n  preferred_supplier_name: string | null;\n  last_counted_at: string | null;\n  last_movement_at: string | null;\n  last_ordered_at: string | null;\n  location_name: string | null;\n  product_name: string | null;\n  stock_status: string | null;\n  average_consumption: number | null;\n  reorder_recommendation: number | null;\n  priority: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n}\n\nexport const mapStockLevelRowToView = (\n  row: StockLevelRow | StockLevelRowWithRelations\n): StockLevelView => {\n  const extended = row as StockLevelRowWithRelations;\n  const locationName =\n    extended.location_name ?? extended.practice_locations?.name ?? null;\n  const productName = extended.product_name ?? extended.products?.name ?? null;\n  const stockStatus = extended.stock_status ?? null;\n  const averageConsumption = extended.average_consumption ?? null;\n  const reorderRecommendation = extended.reorder_recommendation ?? null;\n  const priority = extended.priority ?? null;\n  const preferredSupplierName = extended.preferred_supplier_name ?? null;\n\n  return {\n    id: row.id,\n    practiceId: row.practice_id,\n    productId: row.product_id,\n    locationId: row.location_id,\n    currentQuantity: row.current_quantity ?? 0,\n    availableQuantity: row.available_quantity ?? 0,\n    reservedQuantity: row.reserved_quantity ?? 0,\n    minimumQuantity: row.minimum_quantity ?? 0,\n    maximumQuantity: row.maximum_quantity ?? null,\n    reorderPoint: row.reorder_point ?? null,\n    preferredSupplierId: row.preferred_supplier_id ?? null,\n    preferredSupplierName,\n    lastCountedAt: row.last_counted_at ?? null,\n    lastMovementAt: row.last_movement_at ?? null,\n    lastOrderedAt: row.last_ordered_at ?? null,\n    locationName,\n    productName,\n    stockStatus,\n    averageConsumption,\n    reorderRecommendation,\n    priority,\n    createdAt: row.created_at ?? null,\n    updatedAt: row.updated_at ?? null,\n    legacy: {\n  id: row.id,\n  practice_id: row.practice_id,\n  product_id: row.product_id,\n  location_id: row.location_id,\n  current_quantity: row.current_quantity ?? 0,\n  available_quantity: row.available_quantity ?? 0,\n  reserved_quantity: row.reserved_quantity ?? 0,\n  minimum_quantity: row.minimum_quantity ?? 0,\n  maximum_quantity: row.maximum_quantity ?? null,\n  reorder_point: row.reorder_point ?? null,\n  preferred_supplier_id: row.preferred_supplier_id ?? null,\n      preferred_supplier_name,\n  last_counted_at: row.last_counted_at ?? null,\n  last_movement_at: row.last_movement_at ?? null,\n  last_ordered_at: row.last_ordered_at ?? null,\n      location_name: locationName,\n      product_name: productName,\n      stock_status: stockStatus,\n      average_consumption: averageConsumption,\n      reorder_recommendation: reorderRecommendation,\n      priority,\n  created_at: row.created_at ?? null,\n  updated_at: row.updated_at ?? null,\n    },\n    raw: extended,\n  };\n};\n\nexport type StockMovement = Tables<'stock_movements'>;\n\nexport type StockMovementInsert = TablesInsert<'stock_movements'>;\n\nexport type StockMovementUpdate = TablesUpdate<'stock_movements'>;\n\nexport type StockMovementRow = Tables<'stock_movements'>;\n\nexport type MovementWithRelations = StockMovementRow & {\n  product?: Pick<Tables<'products'>, 'id' | 'name' | 'sku' | 'category' | 'brand' | 'unit'> | null;\n  location?: Pick<Tables<'practice_locations'>, 'id' | 'name' | 'location_type'> | null;\n  from_location?: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n  to_location?: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n};\n\nexport type MovementQueryRow = Tables<'stock_movements'> & {\n  product: Pick<Tables<'products'>, 'id' | 'name' | 'sku'> | null;\n  location: Pick<Tables<'practice_locations'>, 'id' | 'name'> | null;\n};\n\nexport type CountingSession = Tables<'counting_sessions'> & {\n  location_ids?: string[];\n  product_ids?: string[];\n  total_discrepancy_value?: number | null;\n};\n\nexport type CountingEntry = Tables<'counting_entries'>;\n\nexport type OrderListItemRow = Tables<'order_list_items'>;\nexport type OrderListItemInsert = TablesInsert<'order_list_items'>;\nexport type OrderListItemUpdate = TablesUpdate<'order_list_items'>;\n\nexport type OrderListStatus = Database['public']['Enums']['order_list_status'];\n\nexport type OrderListItemStatus = OrderListItemRow['status'];\n\nexport interface OrderListDTO {\n  id: string;\n  practice_id: string;\n  location_id: string;\n  supplier_id: string | null;\n  name: string;\n  description: string | null;\n  status: OrderListStatus | null;\n  total_items: number;\n  total_cost: number;\n  min_order_value: number | null;\n  created_at: string | null;\n  updated_at: string | null;\n  created_by: string | null;\n  submitted_at: string | null;\n  submitted_by: string | null;\n  supplier: Tables<'suppliers'> | null;\n}\n\nexport interface OrderListItemDTO {\n  id: string;\n  order_list_id: string;\n  product_id: string;\n  supplier_product_id: string | null;\n  suggested_quantity: number;\n  ordered_quantity: number;\n  unit_price: number | null;\n  total_price: number | null;\n  status: string | null;\n  notes: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  product: Tables<'products'> | null;\n  supplier_product: Tables<'supplier_products'> | null;\n}\n\n// Type unions\nexport type MovementType =\n  | 'count'\n  | 'receipt'\n  | 'usage'\n  | 'transfer'\n  | 'adjustment'\n  | 'waste'\n  | 'order_received'\n  | 'consumption'\n  | 'expired'\n  | 'manual_adjustment'\n  | 'correction';\n\nexport type ReasonCode =\n  | 'normal_usage'\n  | 'expired'\n  | 'damaged'\n  | 'lost'\n  | 'found'\n  | 'transfer_in'\n  | 'transfer_out'\n  | 'adjustment'\n  | 'count_correction';\n\nexport type OrderListWorkflowStatus =\n  | 'draft'\n  | 'ready'\n  | 'submitted'\n  | 'confirmed'\n  | 'delivered'\n  | 'cancelled';\n\nexport type UrgencyLevel = 'low' | 'medium' | 'high' | 'critical';\n\nexport type BatchStatus = 'active' | 'depleted' | 'expired' | 'recalled';\n\nexport type ExpiryUrgencyLevel = 'normal' | 'warning' | 'critical' | 'expired';\n\n// Enhanced types with relationships\nexport interface StockLevelWithDetails extends StockLevelView {\n  location?: PracticeLocation;\n  product?: {\n    id: string;\n    name: string;\n    sku: string;\n    category?: string;\n    brand?: string;\n    unit?: string;\n  };\n  preferred_supplier?: Supplier | null;\n}\n\nexport interface OrderSuggestion {\n  product_id: string;\n  product_name: string;\n  product_sku: string;\n  location_id: string;\n  location_name: string;\n  current_stock: number;\n  minimum_stock: number;\n  suggested_quantity: number;\n  preferred_supplier_id: string | null;\n  supplier_name: string | null;\n  urgency_level: UrgencyLevel | null;\n  days_until_stockout: number | null;\n  productName?: string;\n  productSku?: string;\n  locationName?: string;\n  currentStock?: number;\n  minimumStock?: number;\n  suggestedQuantity?: number;\n  preferredSupplierId?: string | null;\n  supplierName?: string | null;\n  urgencyLevel?: UrgencyLevel | null;\n  daysUntilStockout?: number | null;\n}\n\nexport interface StockAlert {\n  id: string;\n  type:\n    | 'out_of_stock'\n    | 'low_stock'\n    | 'overstock'\n    | 'expired'\n    | 'expiring_soon';\n  severity?: 'critical' | 'warning' | 'info';\n  product_id: string;\n  product_name?: string;\n  product_sku?: string;\n  location_id: string;\n  location_name?: string;\n  current_stock: number;\n  minimum_stock?: number;\n  threshold_quantity?: number;\n  batch_number?: string;\n  expiry_date?: string;\n  days_until_expiry?: number;\n  message: string;\n  title?: string;\n  suggested_action?: string;\n  created_at: string;\n}\n\n// Form types for API operations\nexport interface CreateSupplierRequest {\n  name: string;\n  code: string;\n  contact_email?: string;\n  contact_phone?: string;\n  contact_person?: string;\n  address?: string;\n  city?: string;\n  postal_code?: string;\n  country?: string;\n  website?: string;\n  payment_terms?: number;\n  minimum_order_amount?: number;\n  shipping_cost?: number;\n  notes?: string;\n}\n\nexport interface CreateLocationRequest {\n  practice_id: string;\n  name: string;\n  code: string;\n  description?: string;\n  location_type:\n    | 'storage'\n    | 'treatment'\n    | 'emergency'\n    | 'mobile'\n    | 'warehouse'\n    | 'clinic'\n    | 'drop_point';\n  address?: string;\n  floor_level?: string;\n  room_number?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  is_main_location?: boolean;\n  requires_counting?: boolean;\n  allows_negative_stock?: boolean;\n}\n\nexport interface UpdateLocationRequest {\n  id: string;\n  practice_id: string;\n  name?: string;\n  code?: string;\n  description?: string;\n  location_type?:\n    | 'storage'\n    | 'treatment'\n    | 'emergency'\n    | 'mobile'\n    | 'warehouse'\n    | 'clinic'\n    | 'drop_point';\n  address?: string;\n  floor_level?: string;\n  room_number?: string;\n  contact_email?: string;\n  contact_phone?: string;\n  is_main_location?: boolean;\n  requires_counting?: boolean;\n  allows_negative_stock?: boolean;\n  restricted_access?: boolean;\n  access_code?: string;\n  responsible_user_id?: string;\n}\n\nexport interface StockUpdateRequest {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  quantity_change: number;\n  movement_type: MovementType;\n  reference_type?: string;\n  reference_id?: string;\n  reason_code?: ReasonCode;\n  notes?: string;\n  batch_number?: string;\n  expiry_date?: string;\n  use_fifo?: boolean;\n}\n\nexport interface CreateBatchRequest {\n  practice_id: string;\n  product_id: string;\n  location_id: string;\n  batch_number: string;\n  supplier_batch_number?: string;\n  expiry_date: string;\n  received_date?: string;\n  initial_quantity: number;\n  unit_cost?: number;\n  currency?: string;\n  supplier_id?: string;\n  purchase_order_number?: string;\n  invoice_number?: string;\n  quality_check_passed?: boolean;\n  quality_notes?: string;\n}\n\nexport interface UpdateBatchRequest {\n  id: string;\n  practice_id: string;\n  current_quantity?: number;\n  reserved_quantity?: number;\n  unit_cost?: number;\n  status?: BatchStatus;\n  quality_check_passed?: boolean;\n  quality_notes?: string;\n  quarantine_until?: string;\n}\n\nexport interface BatchStockMovementRequest {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  quantity_change: number;\n  movement_type: MovementType;\n  batch_movements: BatchMovement[];\n  reason_code?: ReasonCode;\n  notes?: string;\n}\n\nexport interface StartCountingSessionRequest {\n  practice_id: string;\n  name: string;\n  session_type: 'full' | 'partial' | 'spot_check' | 'cycle';\n  location_ids: string[];\n  product_ids?: string[];\n  category_filter?: string;\n  allow_negative_counts?: boolean;\n  require_approval?: boolean;\n  auto_adjust_stock?: boolean;\n  notes?: string;\n}\n\n// Mobile-optimized types for counting interface\nexport interface CountingProduct {\n  id: string;\n  name: string;\n  sku: string;\n  category?: string;\n  brand?: string;\n  unit?: string;\n  currentSystemQuantity: number;\n  lastCountedAt?: string;\n  locationName: string;\n  barcode?: string;\n  imageUrl?: string;\n}\n\nexport interface CountingStats {\n  totalProducts: number;\n  countedProducts: number;\n  remainingProducts: number;\n  discrepancies: number;\n  progressPercentage: number;\n}\n\n// Analytics types\nexport interface InventoryKPI {\n  totalSkuCount: number;\n  totalStockValue: number;\n  lowStockItems: number;\n  outOfStockItems: number;\n  stockTurnoverRate: number;\n  averageDaysToStockout: number;\n  topMovingProducts: Array<{\n    productId: string;\n    productName: string;\n    movementCount: number;\n    totalQuantityMoved: number;\n  }>;\n  stockAccuracyPercentage: number;\n  lastFullCountDate: string | null;\n}\n\nexport interface LocationPerformance {\n  locationId: string;\n  locationName: string;\n  totalProducts: number;\n  stockAccuracy: number;\n  avgCountFrequencyDays: number;\n  lastCountedAt?: string;\n  criticalItemsCount: number;\n}\n\n// Product-related types for ProductsPage\nexport type ProductWithRelations = ProductRow & {\n  stock_levels?: StockLevelRow[] | null;\n  supplier_products?: SupplierProductRow[] | null;\n};\n\nexport interface ProductWithStock {\n  id: string;\n  practiceId: string;\n  sku: string;\n  name: string;\n  category: string | null;\n  brand: string | null;\n  unit: string | null;\n  totalStock: number;\n  availableStock: number;\n  reservedStock: number;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  reorderLevel: number | null;\n  unitPrice: number | null;\n  lowestPrice: number | null;\n  supplier: SimpleSupplierView | null;\n  stockLevels: StockLevelView[];\n  supplierProducts: SupplierProductView[];\n  batches: ProductBatchSummary[];\n  legacy: ProductLegacyView;\n  raw?: ProductWithRelations;\n}\n\nexport interface ProductLegacyView {\n  /** @deprecated use camelCase fields */\n  total_stock: number;\n  available_stock: number;\n  reserved_stock: number;\n  stock_status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  reorder_level?: number | null;\n  supplier_id?: string | null;\n  supplier_name?: string | null;\n  supplier_code?: string | null;\n  supplier_phone?: string | null;\n  supplier_email?: string | null;\n  expiry_date?: string | null;\n  gs1_status?: 'complete' | 'incomplete';\n  batch_status?: 'batch_tracked' | 'manual_stock';\n}\n\nexport const determineStockStatus = (\n  current: number,\n  minimum: number\n): 'in_stock' | 'low_stock' | 'out_of_stock' => {\n  if (current <= 0) return 'out_of_stock';\n  if (current < minimum) return 'low_stock';\n  return 'in_stock';\n};\n\nexport const mapProductRowToView = (\n  row: ProductWithRelations\n): ProductWithStock => {\n  const supplierProducts: SupplierProductView[] = (row.supplier_products ?? []).map(\n    product => ({\n    id: product.id,\n      supplier: {\n        id: product.supplier_id,\n        name: product.supplier_name ?? null,\n      },\n      supplierSku: product.supplier_sku ?? null,\n      costPrice: product.cost_price ?? null,\n    currency: product.currency ?? null,\n      leadTimeDays: product.lead_time_days ?? null,\n      isPreferred: product.is_preferred ?? null,\n      raw: product,\n    })\n  );\n\n  const stockLevels = (row.stock_levels ?? []).map(level =>\n    mapStockLevelRowToView(level)\n  );\n\n  const totalStock = stockLevels.reduce(\n    (sum, level) => sum + level.currentQuantity,\n    0\n  );\n\n  const availableStock = stockLevels.reduce(\n    (sum, level) => sum + level.availableQuantity,\n    0\n  );\n\n  const reservedStock = stockLevels.reduce(\n    (sum, level) => sum + level.reservedQuantity,\n    0\n  );\n\n  const minimumStock = row.minimum_stock ?? null;\n\n  const legacy: ProductLegacyView = {\n    total_stock: totalStock,\n    available_stock: availableStock,\n    reserved_stock: reservedStock,\n    stock_status: determineStockStatus(totalStock, minimumStock ?? 0),\n    reorder_level: minimumStock,\n    supplier_id: row.supplier_id ?? null,\n    supplier_name: row.supplier_name ?? null,\n    supplier_code: row.supplier_code ?? null,\n    supplier_phone: row.supplier_phone ?? null,\n    supplier_email: row.supplier_email ?? null,\n    expiry_date: row.expiry_date ?? null,\n    gs1_status: row.gs1_status ?? null,\n    batch_status: row.batch_status ?? null,\n  };\n\n  return {\n    id: row.id,\n    practiceId: row.practice_id,\n    sku: row.sku,\n    name: row.name,\n    category: row.category ?? null,\n    brand: row.brand ?? null,\n    unit: row.unit ?? null,\n    totalStock,\n    availableStock,\n    reservedStock,\n    status: legacy.stock_status,\n    reorderLevel: minimumStock,\n    unitPrice: row.unit_price ?? null,\n    lowestPrice: row.lowest_price ?? null,\n    supplier: row.supplier_id\n      ? { id: row.supplier_id, name: row.supplier_name ?? null }\n      : null,\n    stockLevels,\n    supplierProducts,\n    batches: [],\n    legacy,\n    raw: row,\n  };\n};\n\nexport interface LocationSummary {\n  id: string;\n  name: string;\n}\n\nexport interface StockTransferRequest {\n  practice_id: string;\n  product_id: string;\n  from_location_id: string;\n  to_location_id: string;\n  quantity: number;\n  reason: string;\n  notes?: string;\n  batch_id?: string | null;\n}\n\nexport interface ProductBatchSummary {\n  id: string;\n  batch_number: string;\n  expiry_date: string;\n  current_quantity: number;\n  urgency: ExpiryUrgencyLevel;\n}\n\nexport interface ProductCategory {\n  id: string;\n  name: string;\n  description?: string;\n  parent_id?: string;\n  sort_order: number;\n  is_active: boolean;\n}\n\nexport interface ProductFilter {\n  search?: string;\n  category?: string;\n  supplier?: string;\n  stock_status?: string;\n  sort_by?:\n    | 'name'\n    | 'price'\n    | 'stock'\n    | 'category'\n    | 'sku'\n    | 'last_updated';\n  sort_order?: 'asc' | 'desc';\n\n  // GS1 Filters\n  gtin?: string;\n  country_of_origin?: string;\n  gpc_brick_code?: string;\n  lifecycle_status?: string;\n  orderable_only?: boolean;\n}\n\nexport interface CartItem {\n  product_id: string;\n  product: ProductRow;\n  quantity: number;\n  unit_price?: number;\n  supplier_id?: string;\n  notes?: string;\n}\n\nexport interface OrderListCart {\n  id?: string;\n  name: string;\n  supplier_id?: string;\n  items: CartItem[];\n  total_items: number;\n  estimated_total?: number;\n  notes?: string;\n}\n\n// Unified stock view interface for consolidated stock information\nexport interface UnifiedStockView {\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n\n  // Product details\n  product_name: string;\n  product_sku: string;\n  product_category: string | null;\n  product_brand: string | null;\n  product_unit: string | null;\n  product_price: number | null;\n  requires_batch_tracking: boolean;\n\n  // Location details\n  location_name: string;\n  location_code: string;\n  location_type: string;\n\n  // Stock quantities\n  current_quantity: number;\n  reserved_quantity: number;\n  available_quantity: number;\n\n  // Stock status\n  stock_status: 'in_stock' | 'low_stock' | 'out_of_stock';\n  minimum_quantity: number;\n  maximum_quantity: number | null;\n  reorder_point: number | null;\n  preferred_supplier_id: string | null;\n  last_counted_at: string | null;\n\n  // Tracking\n  last_movement_at: string;\n  stock_source: 'batch' | 'manual';\n  calculated_at: string;\n}\n\nexport interface CountingEntryDTO {\n  id: string;\n  session_id: string;\n  practice_id: string;\n  location_id: string;\n  product_id: string;\n  system_quantity: number;\n  counted_quantity: number;\n  variance: number;\n  confidence_level?: 'low' | 'medium' | 'high' | null;\n  counted_by: string | null;\n  counted_at: string | null;\n  verified_by: string | null;\n  verified_at: string | null;\n  notes: string | null;\n  batch_number: string | null;\n  expiry_date: string | null;\n  created_at: string | null;\n  updated_at: string | null;\n  status: 'discrepancy' | 'verified' | 'pending';\n  location_name?: string | null;\n  product_name?: string | null;\n  product_sku?: string | null;\n}\n\nexport const mapOrderListRowToDTO = (row: OrderListRow): OrderListDTO => ({\n  id: row.id,\n  practice_id: row.practice_id,\n  location_id: row.location_id,\n  supplier_id: row.supplier_id ?? null,\n  name: row.name,\n  description: row.description ?? null,\n  status: row.status ?? null,\n  total_items: row.total_items ?? 0,\n  total_cost: row.total_value ?? 0,\n  min_order_value: row.min_order_value ?? null,\n  created_at: row.created_at ?? null,\n  updated_at: row.updated_at ?? null,\n  created_by: row.created_by ?? null,\n  submitted_at: (row as { submitted_at?: string | null }).submitted_at ?? null,\n  submitted_by: (row as { submitted_by?: string | null }).submitted_by ?? null,\n  supplier: null,\n});\n\nexport const mapOrderListItemRowToDTO = (row: OrderListItemRow): OrderListItemDTO => ({\n  id: row.id,\n  order_list_id: row.order_list_id,\n  product_id: row.product_id,\n  supplier_product_id: row.supplier_product_id ?? null,\n  suggested_quantity: row.suggested_quantity ?? 0,\n  ordered_quantity: row.ordered_quantity ?? 0,\n  unit_price: row.unit_price ?? null,\n  total_price: row.total_price ?? null,\n  status: row.status ?? null,\n  notes: row.notes ?? null,\n  created_at: row.created_at ?? null,\n  updated_at: row.updated_at ?? null,\n  product: null,\n  supplier_product: null,\n});\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\logging.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\magento.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1797, 1800], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1797, 1800], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2095, 2098], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2095, 2098], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Magento integration types\nexport interface MagentoConfig {\n  baseUrl: string;\n  adminToken: string;\n  storeId?: number;\n  timeout?: number;\n}\n\nexport interface MagentoOrder {\n  entity_id: number;\n  increment_id: string;\n  state: string;\n  status: string;\n  customer_email: string;\n  customer_firstname: string;\n  customer_lastname: string;\n  grand_total: number;\n  created_at: string;\n  updated_at: string;\n  items: MagentoOrderItem[];\n  billing_address: MagentoAddress;\n  shipping_address: MagentoAddress;\n  payment: MagentoPayment;\n}\n\nexport interface MagentoOrderItem {\n  item_id: number;\n  product_id: number;\n  sku: string;\n  name: string;\n  qty_ordered: number;\n  qty_shipped: number;\n  qty_invoiced: number;\n  price: number;\n  row_total: number;\n}\n\nexport interface MagentoAddress {\n  entity_id: number;\n  firstname: string;\n  lastname: string;\n  street: string[];\n  city: string;\n  region: string;\n  postcode: string;\n  country_id: string;\n  telephone: string;\n  email?: string;\n}\n\nexport interface MagentoPayment {\n  method: string;\n  amount_ordered: number;\n  amount_paid: number;\n  base_amount_ordered: number;\n  base_amount_paid: number;\n}\n\nexport interface MagentoInvoice {\n  entity_id: number;\n  order_id: number;\n  increment_id: string;\n  state: number;\n  grand_total: number;\n  created_at: string;\n  items: MagentoInvoiceItem[];\n}\n\nexport interface MagentoInvoiceItem {\n  entity_id: number;\n  sku: string;\n  name: string;\n  qty: number;\n  price: number;\n  row_total: number;\n}\n\nexport interface MagentoProduct {\n  id: number;\n  sku: string;\n  name: string;\n  price: number;\n  status: number;\n  visibility: number;\n  type_id: string;\n  weight: number;\n  custom_attributes: MagentoCustomAttribute[];\n}\n\nexport interface MagentoCustomAttribute {\n  attribute_code: string;\n  value: any;\n}\n\nexport interface MagentoSearchCriteria {\n  filterGroups: MagentoFilterGroup[];\n  sortOrders?: MagentoSortOrder[];\n  pageSize?: number;\n  currentPage?: number;\n}\n\nexport interface MagentoFilterGroup {\n  filters: MagentoFilter[];\n}\n\nexport interface MagentoFilter {\n  field: string;\n  value: any;\n  condition_type: string;\n}\n\nexport interface MagentoSortOrder {\n  field: string;\n  direction: 'ASC' | 'DESC';\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\network.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\notifications.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\offline.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\permissions.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [482, 485], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [482, 485], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// User roles and permissions types\nexport type UserRole =\n  | 'owner'\n  | 'manager'\n  | 'assistant'\n  | 'logistics'\n  | 'member'\n  | 'guest'\n  | 'platform_owner';\nexport type PermissionType = 'read' | 'write' | 'admin';\nexport type ResourceType =\n  | 'products'\n  | 'inventory'\n  | 'orders'\n  | 'analytics'\n  | 'users'\n  | 'all';\n\nexport interface Permission {\n  permission_type: PermissionType;\n  resource_type: ResourceType;\n  resource_id?: string;\n  conditions?: Record<string, any>;\n  source: 'role' | 'user';\n}\n\nexport interface RoleDefinition {\n  role: UserRole;\n  displayName: string;\n  description: string;\n  permissions: Permission[];\n}\n\nexport interface PermissionCheck {\n  permission_type: PermissionType;\n  resource_type: ResourceType;\n  resource_id?: string;\n  practice_id?: string;\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\scanner.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\stores.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\ui.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\types\\validation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [69, 72], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [69, 72], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Form validation types\nexport interface ValidationRule {\n  (value: any): boolean | string;\n}\n\nexport interface FieldValidation {\n  rules: ValidationRule[];\n  message?: string;\n  required?: boolean;\n  immediate?: boolean;\n}\n\nexport interface FormValidationState {\n  valid: boolean;\n  errors: Record<string, string[]>;\n  touched: Record<string, boolean>;\n}\n\nexport interface ValidationResult {\n  valid: boolean;\n  errors: string[];\n}\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\batch-helpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\date.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\error-handler.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LogData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Notify } from 'quasar';\r\nimport type { AppError, LogData } from '@/types/logging';\r\n\r\nexport class ErrorHandler {\r\n  static handle(error: Error | AppError, context?: string): void {\r\n    const appError = this.normalizeError(error, context);\r\n\r\n    console.error(`[${appError.context ?? 'Unknown'}]`, appError.originalError ?? appError);\r\n\r\n    Notify.create({\r\n      type: 'negative',\r\n      message: appError.message,\r\n      position: 'top',\r\n      timeout: 5000,\r\n      actions: [\r\n        {\r\n          icon: 'close',\r\n          color: 'white',\r\n          round: true,\r\n          handler: () => {\r\n            /* dismiss */\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  static normalizeError(error: Error | AppError, context?: string): AppError {\r\n    if ('message' in error && typeof error.message === 'string' && !('stack' in error)) {\r\n      const appError = error as AppError;\r\n      return {\r\n        ...appError,\r\n        context: context ?? appError.context ?? 'Unknown',\r\n      };\r\n    }\r\n\r\n    return {\r\n      message: this.getErrorMessage(error as Error),\r\n      context: context ?? 'Unknown',\r\n      originalError: error as Error,\r\n      timestamp: new Date(),\r\n    };\r\n  }\r\n\r\n  static getErrorMessage(error: Error): string {\r\n    if (error.message.includes('JWT')) {\r\n      return 'Je sessie is verlopen. Log opnieuw in.';\r\n    }\r\n\r\n    if (error.message.includes('duplicate key')) {\r\n      return 'Dit item bestaat al.';\r\n    }\r\n\r\n    if (error.message.includes('foreign key')) {\r\n      return 'Dit item kan niet worden verwijderd omdat het in gebruik is.';\r\n    }\r\n\r\n    if (error.message.includes('not found')) {\r\n      return 'Het opgevraagde item werd niet gevonden.';\r\n    }\r\n\r\n    return error.message || 'Er is een onbekende fout opgetreden.';\r\n  }\r\n}\r\n\r\nexport function useErrorHandler() {\r\n  return {\r\n    handleError: (error: Error | AppError, context?: string) =>\r\n      ErrorHandler.handle(error, context),\r\n    getErrorMessage: (error: Error) => ErrorHandler.getErrorMessage(error),\r\n  };\r\n}\r\n",
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\eventBus.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\i18n-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\logger.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  },
  {
    "filePath": "C:\\Users\\MartijnvanHoutenRemk\\OneDrive - Remka B.V\\Documenten\\Remcura\\src\\utils\\service-error-handler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [{ "ruleId": "vue/component-tags-order", "replacedBy": ["block-order"] }]
  }
]
