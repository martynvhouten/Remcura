import type {
  ProductBatchDTO,
  StockLevelDTO,
  OrderListDTO,
  OrderListItemDTO,
  CountingSessionDTO,
  CountingEntryDTO,
} from './dto';

const toNull = <T>(value: T | null | undefined): T | null =>
  value === undefined ? null : value;

export const toProductBatchInsert = (dto: ProductBatchDTO) => ({
  practice_id: dto.practiceId,
  product_id: dto.productId,
  location_id: dto.locationId,
  supplier_id: toNull(dto.supplierId),
  batch_number: dto.batchNumber,
  supplier_batch_number: toNull(dto.supplierBatchNumber),
  expiry_date: dto.expiryDate,
  received_date: dto.receivedDate,
  initial_quantity: dto.initialQuantity,
  current_quantity: dto.currentQuantity,
  reserved_quantity: dto.reservedQuantity,
  available_quantity: toNull(dto.availableQuantity),
  unit_cost: toNull(dto.unitCost),
  total_cost: toNull(dto.totalCost),
  currency: dto.currency ?? null,
  purchase_order_number: toNull(dto.purchaseOrderNumber),
  invoice_number: toNull(dto.invoiceNumber),
  status: dto.status ?? null,
  quality_check_passed: dto.qualityCheckPassed ?? null,
  quality_notes: dto.qualityNotes ?? null,
  quarantine_until: dto.quarantineUntil ?? null,
});

export const toProductBatchUpdate = (dto: Partial<ProductBatchDTO>) => ({
  supplier_id: dto.supplierId,
  batch_number: dto.batchNumber,
  supplier_batch_number: dto.supplierBatchNumber,
  expiry_date: dto.expiryDate,
  received_date: dto.receivedDate,
  initial_quantity: dto.initialQuantity,
  current_quantity: dto.currentQuantity,
  reserved_quantity: dto.reservedQuantity,
  available_quantity: dto.availableQuantity,
  unit_cost: dto.unitCost,
  total_cost: dto.totalCost,
  currency: dto.currency,
  status: dto.status,
  purchase_order_number: dto.purchaseOrderNumber,
  invoice_number: dto.invoiceNumber,
  quality_check_passed: dto.qualityCheckPassed,
  quality_notes: dto.qualityNotes,
  quarantine_until: dto.quarantineUntil,
});

export const toStockLevelUpdate = (dto: Partial<StockLevelDTO>) => ({
  current_quantity: dto.currentQuantity,
  reserved_quantity: dto.reservedQuantity,
  available_quantity: dto.availableQuantity,
  minimum_quantity: dto.minimumQuantity,
  maximum_quantity: dto.maximumQuantity,
  reorder_point: dto.reorderPoint,
  preferred_supplier_id: dto.preferredSupplierId,
  last_counted_at: dto.lastCountedAt,
  last_movement_at: dto.lastMovementAt,
  last_ordered_at: dto.lastOrderedAt,
});

export const toOrderListInsert = (dto: OrderListDTO) => ({
  practice_id: dto.practiceId,
  location_id: dto.locationId,
  supplier_id: toNull(dto.supplierId),
  name: dto.name,
  description: toNull(dto.description),
  status: dto.status ?? null,
  total_items: dto.totalItems ?? null,
  total_value: dto.totalValue ?? null,
  created_by: dto.createdBy ?? null,
  list_type: dto.listType ?? null,
  auto_reorder_enabled: dto.autoReorderEnabled ?? null,
  reorder_frequency_days: dto.reorderFrequencyDays ?? null,
  last_auto_check: dto.lastAutoCheck ?? null,
  min_order_value: dto.minOrderValue ?? null,
  preferred_order_day: dto.preferredOrderDay ?? null,
  order_cutoff_time: dto.orderCutoffTime ?? null,
  tags: dto.tags ?? null,
  is_template: dto.isTemplate ?? null,
  template_name: dto.templateName ?? null,
});

export const toOrderListItemInsert = (dto: OrderListItemDTO) => ({
  order_list_id: dto.orderListId,
  product_id: dto.productId,
  supplier_product_id: toNull(dto.supplierProductId),
  suggested_quantity: dto.suggestedQuantity,
  ordered_quantity: toNull(dto.orderedQuantity),
  received_quantity: dto.receivedQuantity ?? null,
  unit_price: toNull(dto.unitPrice),
  total_price: toNull(dto.totalPrice),
  status: dto.status ?? null,
  notes: dto.notes ?? null,
  minimum_stock: dto.minimumStock ?? null,
  maximum_stock: dto.maximumStock ?? null,
  current_stock: dto.currentStock ?? null,
  reorder_point: dto.reorderPoint ?? null,
  preferred_supplier_id: dto.preferredSupplierId ?? null,
  alternative_suppliers: dto.alternativeSuppliers ?? null,
  last_order_date: dto.lastOrderDate ?? null,
  last_order_quantity: dto.lastOrderQuantity ?? null,
  average_consumption: dto.averageConsumption ?? null,
  lead_time_days: dto.leadTimeDays ?? null,
  urgency_level: dto.urgencyLevel ?? null,
  auto_suggest_enabled: dto.autoSuggestEnabled ?? null,
  manual_override: dto.manualOverride ?? null,
  override_reason: dto.overrideReason ?? null,
});

export const toCountingSessionInsert = (dto: CountingSessionDTO) => ({
  practice_id: dto.practiceId,
  location_id: dto.locationId,
  name: dto.name,
  description: toNull(dto.description),
  status: dto.status ?? null,
  count_all_products: dto.countAllProducts ?? null,
  product_category_filter: dto.productCategoryFilter ?? null,
  specific_product_ids: dto.specificProductIds ?? null,
  started_by: dto.startedBy ?? null,
});

export const toCountingEntryInsert = (dto: CountingEntryDTO) => ({
  counting_session_id: dto.countingSessionId,
  practice_id: dto.practiceId,
  location_id: dto.locationId,
  product_id: dto.productId,
  system_quantity: dto.systemQuantity,
  counted_quantity: dto.countedQuantity,
  variance_quantity: dto.varianceQuantity ?? null,
  batch_number: dto.batchNumber ?? null,
  expiry_date: dto.expiryDate ?? null,
  notes: dto.notes ?? null,
  confidence_level: dto.confidenceLevel ?? null,
  counted_by: dto.countedBy ?? null,
});
